
SDCARD_DEMO.elf:     file format elf32-littlenios2
SDCARD_DEMO.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0004022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00019440 memsz 0x00019440 flags r-x
    LOAD off    0x0001a460 vaddr 0x00059460 paddr 0x0005af50 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x0001ca40 vaddr 0x0005ca40 paddr 0x0005ca40 align 2**12
         filesz 0x00000000 memsz 0x00000198 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018794  0004022c  0004022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000aa0  000589c0  000589c0  000199c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  00059460  0005af50  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000198  0005ca40  0005ca40  0001ca40  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  0005cbd8  0005cbd8  0001bf50  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001bf50  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001008  00000000  00000000  0001bf78  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002cfa6  00000000  00000000  0001cf80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b3fa  00000000  00000000  00049f26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e953  00000000  00000000  00055320  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003094  00000000  00000000  00063c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004982  00000000  00000000  00066d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001d15a  00000000  00000000  0006b68a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000887e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000016a0  00000000  00000000  00088828  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008de3e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0008de41  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008de4b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008de4c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008de4d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0008de51  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0008de55  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0008de59  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0008de62  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0008de6b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0008de74  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  0008de7f  2**0
                  CONTENTS, READONLY
 29 .jdi          0000405d  00000000  00000000  0008deaa  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006befe  00000000  00000000  00091f07  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
0004022c l    d  .text	00000000 .text
000589c0 l    d  .rodata	00000000 .rodata
00059460 l    d  .rwdata	00000000 .rwdata
0005ca40 l    d  .bss	00000000 .bss
0005cbd8 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SDCARD_DEMO_bsp//obj/HAL/src/crt0.o
00040264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 FatFileSystem.c
00000000 l    df *ABS*	00000000 FatInternal.c
00000000 l    df *ABS*	00000000 LED.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 crc16.c
00058ba8 l     O .rodata	00000200 crc16tab
00000000 l    df *ABS*	00000000 crc7.c
00058da8 l     O .rodata	00000100 crc7_syndrome_table
00000000 l    df *ABS*	00000000 sd_hal.c
00000000 l    df *ABS*	00000000 sd_lib.c
0005ca78 l     O .bss	00000038 gSdInfo
00000000 l    df *ABS*	00000000 sd_protocol.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000451f4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00058fee l     O .rodata	00000010 zeroes.4166
00058ffe l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 vfprintf.c
0005900e l     O .rodata	00000010 zeroes.4181
0005901e l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
0005912f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0004bbb8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0004d760 l     F .text	00000008 __fp_lock
0004d768 l     F .text	00000008 __fp_unlock
0004d77c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00059868 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00059cac l     O .rwdata	00000020 lc_ctype_charset
00059c8c l     O .rwdata	00000020 lc_message_charset
00059ccc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000592d0 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
000593f4 l     O .rodata	00000010 zeroes.4110
00059404 l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 vfprintf.c
000516b0 l     F .text	000000fc __sprint_r.part.0
00059424 l     O .rodata	00000010 blanks.4125
00059414 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00055fcc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000560f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00056120 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00056228 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00056324 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00056408 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000565ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0005af40 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00056a3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00056b8c l     F .text	00000038 alt_dev_reg
00059eac l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00056e80 l     F .text	00000204 altera_avalon_jtag_uart_irq
00057084 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000576a4 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00057a54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00057eec l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00058044 l     F .text	00000050 alt_get_errno
00058094 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0005ca74 g     O .bss	00000004 alt_instruction_exception_handler
00047420 g     F .text	00000018 putchar
0004f8e8 g     F .text	00000074 _mprec_log10
0004f9d4 g     F .text	0000008c __any_on
0005324c g     F .text	00000054 _isatty_r
000592dc g     O .rodata	00000028 __mprec_tinytens
00056534 g     F .text	00000078 alt_main
00047438 g     F .text	000000b8 _puts_r
0004077c g     F .text	0000006c Fat_FileBrowseBegin
0005cad8 g     O .bss	00000100 alt_irq
000532a0 g     F .text	0000005c _lseek_r
0005af50 g       *ABS*	00000000 __flash_rwdata_start
00054a50 g     F .text	00000084 .hidden __eqdf2
00043ad0 g     F .text	00000080 SDLIB_WriteBlock512
0005cbd8 g       *ABS*	00000000 __alt_heap_start
000473dc g     F .text	0000003c printf
00053358 g     F .text	0000009c _wcrtomb_r
00044f58 g     F .text	000001a8 SD_CMD24
000502b4 g     F .text	0000005c __sseek
0004dac4 g     F .text	00000010 __sinit
00052c0c g     F .text	00000154 __swbuf_r
0004e53c g     F .text	0000007c _setlocale_r
0004d91c g     F .text	00000078 __sfmoreglue
000565cc g     F .text	00000020 __malloc_unlock
000407e8 g     F .text	00000430 Fat_FileBrowseNext
00045348 g     F .text	00000450 .hidden __divsf3
00042f44 g     F .text	0000002c SDHAL_IsSupport4Bits
00042e84 g     F .text	00000050 crc7_byte
00042138 g     F .text	000000a8 fatIsValidDir
0004e8bc g     F .text	0000015c memmove
0004daac g     F .text	00000018 _cleanup
0004ea18 g     F .text	000000a8 _Balloc
00042b48 g     F .text	0000002c LED_AllOff
00054ad4 g     F .text	000000e0 .hidden __gtdf2
000582e8 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
00043110 g     F .text	00000224 SDHAL_GetResponse
00040020 g       *ABS*	00000000 __flash_exceptions_start
000531f4 g     F .text	00000058 _fstat_r
0005ca4c g     O .bss	00000004 errno
00050230 g     F .text	00000008 __seofread
000504e0 g     F .text	000011d0 ___svfiprintf_internal_r
00041b3c g     F .text	00000180 fatNextCluster
0005ca60 g     O .bss	00000004 alt_argv
00062f0c g       *ABS*	00000000 _gp
00056a0c g     F .text	00000030 usleep
00059d2c g     O .rwdata	00000180 alt_fd_list
00047418 g     F .text	00000008 _putchar_r
00058308 g     F .text	00000090 alt_find_dev
00047154 g     F .text	00000138 memcpy
00042b74 g     F .text	00000040 LED_Display
0004d770 g     F .text	0000000c _cleanup_r
00055e58 g     F .text	000000d0 .hidden __floatsidf
00057fcc g     F .text	00000078 alt_io_redirect
00054bb4 g     F .text	000000e0 .hidden __ltdf2
000589c0 g       *ABS*	00000000 __DTOR_END__
00040ec8 g     F .text	000000b0 Fat_FileExist
000474f0 g     F .text	00000014 puts
00058580 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00050168 g     F .text	00000074 __fpclassifyd
000440d0 g     F .text	00000198 SD_CMD2
0004f844 g     F .text	000000a4 __ratio
00052be8 g     F .text	00000024 __vfiprintf_internal
00057280 g     F .text	0000020c altera_avalon_jtag_uart_read
00046984 g     F .text	00000014 malloc
000473b0 g     F .text	0000002c _printf_r
00045310 g     F .text	00000008 .hidden __udivsi3
00056278 g     F .text	000000ac isatty
0005932c g     O .rodata	000000c8 __mprec_tens
00044c30 g     F .text	00000180 SD_ACMD42
0004e5b8 g     F .text	0000000c __locale_charset
0004ba48 g     F .text	00000040 vsnprintf
0005ca48 g     O .bss	00000004 __malloc_top_pad
0005af20 g     O .rwdata	00000004 __mb_cur_max
0004e5e8 g     F .text	0000000c _localeconv_r
00044784 g     F .text	00000180 SD_CMD7
0004ee40 g     F .text	0000003c __i2b
0004df28 g     F .text	000004a4 __sfvwrite_r
00047504 g     F .text	00000054 _sbrk_r
00044904 g     F .text	000001a0 SD_CMD16
00045180 g     F .text	00000074 ArrayToU32
000532fc g     F .text	0000005c _read_r
0005af38 g     O .rwdata	00000004 alt_max_fd
00042694 g     F .text	0000031c fatMount
00052f04 g     F .text	00000100 _fclose_r
0004d730 g     F .text	00000030 fflush
0005ca44 g     O .bss	00000004 __malloc_max_sbrked_mem
00046678 g     F .text	00000110 .hidden __extendsfdf2
000541b4 g     F .text	0000089c .hidden __adddf3
000421e0 g     F .text	00000048 fatIsUnusedDir
0004f5ec g     F .text	0000011c __b2d
00053b98 g     F .text	0000061c .hidden __umoddi3
00056458 g     F .text	000000dc lseek
0005af18 g     O .rwdata	00000004 _global_impure_ptr
0004fbc8 g     F .text	000005a0 _realloc_r
0005cbd8 g       *ABS*	00000000 __bss_end
00057dfc g     F .text	000000f0 alt_iic_isr_register
00056908 g     F .text	00000104 alt_tick
00053558 g     F .text	00000640 .hidden __udivdi3
00053018 g     F .text	00000184 _fputwc_r
00059304 g     O .rodata	00000028 __mprec_bigtens
0004ec24 g     F .text	00000104 __s2b
00055f28 g     F .text	000000a4 .hidden __floatunsidf
0004f394 g     F .text	00000060 __mcmp
000429b0 g     F .text	0000003c SD_ReadBlock512
0004dae4 g     F .text	00000018 __fp_lock_all
00057db0 g     F .text	0000004c alt_ic_irq_enabled
00040f78 g     F .text	00000220 Fat_FileOpen
00056870 g     F .text	00000098 alt_alarm_stop
0005ca70 g     O .bss	00000004 alt_irq_active
00041e44 g     F .text	000001f8 fatDelClusterList
000400fc g     F .exceptions	000000d0 alt_irq_handler
00059d04 g     O .rwdata	00000028 alt_dev_null
0004300c g     F .text	00000104 SDHAL_SendCmd
00057a38 g     F .text	0000001c alt_dcache_flush_all
0004ed28 g     F .text	00000068 __hi0bits
00043334 g     F .text	00000168 SDHAL_ReadData
00055dd0 g     F .text	00000088 .hidden __fixdfsi
0005af50 g       *ABS*	00000000 __ram_rwdata_end
0005af30 g     O .rwdata	00000008 alt_dev_list
00040680 g     F .text	00000044 Fat_Mount
00056a8c g     F .text	00000100 write
0004fa60 g     F .text	000000a0 _putc_r
00059460 g       *ABS*	00000000 __ram_rodata_end
00056170 g     F .text	000000b8 fstat
00054bb4 g     F .text	000000e0 .hidden __ledf2
00042c5c g     F .text	0000006c myprintf
0004f10c g     F .text	00000140 __pow5mult
000517c4 g     F .text	00001424 ___vfiprintf_internal_r
0005ca58 g     O .bss	00000004 __nlocale_changed
00045318 g     F .text	00000008 .hidden __umodsi3
0005cbd8 g       *ABS*	00000000 end
00042b1c g     F .text	0000002c LED_AllOn
00056dbc g     F .text	000000c4 altera_avalon_jtag_uart_init
000401cc g     F .exceptions	00000060 alt_instruction_exception_entry
000589c0 g       *ABS*	00000000 __CTOR_LIST__
000649f0 g       *ABS*	00000000 __alt_stack_pointer
00057718 g     F .text	00000088 alt_avalon_timer_sc_init
00046920 g     F .text	00000064 .hidden __clzsi2
0005748c g     F .text	00000218 altera_avalon_jtag_uart_write
00041760 g     F .text	00000044 Fat_FileClose
0004dad4 g     F .text	00000004 __sfp_lock_acquire
00040c18 g     F .text	0000006c Fat_FileCount
0004e7d4 g     F .text	000000e8 memchr
00049838 g     F .text	000020fc ___vfprintf_internal_r
00047558 g     F .text	00000058 _sprintf_r
0004dc38 g     F .text	000002f0 _free_r
0004e5c4 g     F .text	00000010 __locale_mb_cur_max
000587f8 g     F .text	00000194 __call_exitprocs
0005ca54 g     O .bss	00000004 __mlocale_changed
0005af0c g     O .rwdata	00000004 __malloc_sbrk_base
0004022c g     F .text	0000003c _start
0005ca68 g     O .bss	00000004 _alt_tick_rate
0004f24c g     F .text	00000148 __lshift
0005ca6c g     O .bss	00000004 _alt_nticks
00043ba0 g     F .text	00000088 SD_CMD0
0005663c g     F .text	00000104 read
00056bf8 g     F .text	00000060 alt_sys_init
00050318 g     F .text	000001c8 __ssprint_r
000586e4 g     F .text	00000114 __register_exitproc
000436bc g     F .text	00000060 SDHAL_DummyClock
00041198 g     F .text	00000044 Fat_FileSize
00042de0 g     F .text	000000a4 crc16
0004ee7c g     F .text	00000290 __multiply
00043b50 g     F .text	00000028 SD_Init
0005712c g     F .text	00000068 altera_avalon_jtag_uart_close
00045320 g     F .text	00000028 .hidden __mulsi3
00059460 g       *ABS*	00000000 __ram_rwdata_start
000589c0 g       *ABS*	00000000 __ram_rodata_start
0005cab0 g     O .bss	00000028 __malloc_current_mallinfo
0004f708 g     F .text	0000013c __d2b
0004761c g     F .text	00000070 strcasecmp
00056c58 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000584ac g     F .text	000000d4 alt_get_fd
000578e0 g     F .text	00000158 alt_busy_sleep
00052dd8 g     F .text	00000054 _close_r
000411dc g     F .text	00000484 Fat_FileRead
00058668 g     F .text	0000007c memcmp
00056d18 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0005cbd8 g       *ABS*	00000000 __alt_stack_base
00056d68 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00042584 g     F .text	00000110 fatFindUnusedDirectory
00042f70 g     F .text	0000009c SDHAL_Init
0004ba88 g     F .text	00000130 __swsetup_r
00045cf8 g     F .text	00000980 .hidden __divdf3
0004d994 g     F .text	00000118 __sfp
0004f95c g     F .text	00000078 __copybits
00059460 g     O .rwdata	00000408 __malloc_av_
0004dae0 g     F .text	00000004 __sinit_lock_release
0004b958 g     F .text	000000f0 _vsnprintf_r
00054c94 g     F .text	0000086c .hidden __muldf3
000501dc g     F .text	00000054 __sread
000417a4 g     F .text	0000021c Fat_SpeedTest
00058398 g     F .text	00000114 alt_find_file
00057aa4 g     F .text	000000a4 alt_dev_llist_insert
000565ac g     F .text	00000020 __malloc_lock
000567c0 g     F .text	000000b0 sbrk
000477c8 g     F .text	00002070 ___svfprintf_internal_r
0004d508 g     F .text	00000228 _fflush_r
00052e2c g     F .text	000000d8 _calloc_r
000424d8 g     F .text	000000ac fatFindDirectory
0005ca40 g       *ABS*	00000000 __bss_start
0004728c g     F .text	00000124 memset
00040518 g     F .text	00000168 main
00042448 g     F .text	00000090 fatReadSecter
0005ca64 g     O .bss	00000004 alt_envp
0005ca40 g     O .bss	00000004 __malloc_max_total_mem
00042cc8 g     F .text	00000088 myprintf_hexarray
00056cb8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00052d60 g     F .text	0000001c __swbuf
00050310 g     F .text	00000008 __sclose
00042228 g     F .text	00000198 fatDump
000649f0 g       *ABS*	00000000 __alt_heap_limit
00053004 g     F .text	00000014 fclose
00046788 g     F .text	00000198 .hidden __truncdfsf2
0004bde0 g     F .text	00001728 _dtoa_r
000469ac g     F .text	000007a8 _malloc_r
000534cc g     F .text	00000030 __ascii_wctomb
00045140 g     F .text	00000040 SD_WriteData
0005af3c g     O .rwdata	00000004 alt_errno
0004e3cc g     F .text	000000b8 _fwalk
0004203c g     F .text	0000005c fatDumpDate
00042ed4 g     F .text	00000070 crc7
0004fb00 g     F .text	000000c8 putc
00041660 g     F .text	00000100 Fat_FileSeek
00045260 g     F .text	00000054 .hidden __divsi3
00044aa4 g     F .text	0000018c SD_ACMD6
0004db14 g     F .text	00000124 _malloc_trim_r
000589c0 g       *ABS*	00000000 __CTOR_END__
00045798 g     F .text	00000450 .hidden __mulsf3
0004768c g     F .text	000000a4 strcmp
000429ec g     F .text	0000003c SD_WriteBlock512
000589c0 g       *ABS*	00000000 __flash_rodata_start
000589c0 g       *ABS*	00000000 __DTOR_LIST__
000423c0 g     F .text	00000088 fatArray2Value
00043b78 g     F .text	00000028 SD_IsSupport4Bits
00054a50 g     F .text	00000084 .hidden __nedf2
00041a70 g     F .text	000000cc fat32ClusterType
00056bc4 g     F .text	00000034 alt_irq_init
00056740 g     F .text	00000080 alt_release_fd
000475b0 g     F .text	0000006c sprintf
00058ea8 g     O .rodata	00000100 .hidden __clz_tab
00042c2c g     F .text	00000030 debug_output
0005ca50 g     O .bss	00000004 _PathLocale
00043f34 g     F .text	0000019c SD_ACMD41
0005861c g     F .text	00000014 atexit
00052d7c g     F .text	0000005c _write_r
00043c28 g     F .text	0000018c SD_CMD8
00040d18 g     F .text	000001b0 fatComposeShortFilename
0004e5f4 g     F .text	0000001c setlocale
0005af1c g     O .rwdata	00000004 _impure_ptr
0005ca5c g     O .bss	00000004 alt_argc
00057ba4 g     F .text	0000005c _do_dtors
0004e5e0 g     F .text	00000008 __locale_cjk_lang
00040710 g     F .text	0000006c Fat_Type
00042d50 g     F .text	00000090 myprintf_dwordarray
00040020 g       .exceptions	00000000 alt_irq_entry
0004f58c g     F .text	00000060 __ulp
0004dafc g     F .text	00000018 __fp_unlock_all
00040268 g     F .text	000002b0 Fat_Test
000419c0 g     F .text	000000b0 fat16ClusterType
0005af28 g     O .rwdata	00000008 alt_fs_list
00043db4 g     F .text	00000180 SD_CMD55
000445c4 g     F .text	000001c0 SD_CMD10
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004e610 g     F .text	0000000c localeconv
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00040c84 g     F .text	00000094 fatSameLongFilename
00057c1c g     F .text	00000050 alt_ic_isr_register
0005af50 g       *ABS*	00000000 _edata
00042098 g     F .text	0000005c fatDumpTime
0005cbd8 g       *ABS*	00000000 _end
00044404 g     F .text	000001c0 SD_CMD9
0004022c g       *ABS*	00000000 __ram_exceptions_end
00057194 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00057d0c g     F .text	000000a4 alt_ic_irq_disable
00050238 g     F .text	0000007c __swrite
0005af10 g     O .rwdata	00000004 __malloc_trim_threshold
0004e5d4 g     F .text	0000000c __locale_msgcharset
00058630 g     F .text	00000038 exit
00042bb4 g     F .text	00000078 LED_LightCount
00042a28 g     F .text	000000f4 fatMountSdcard
0004e484 g     F .text	000000b8 _fwalk_reent
00045be8 g     F .text	00000110 .hidden __floatunsisf
0004f3f4 g     F .text	00000198 __mdiff
000452b4 g     F .text	0000005c .hidden __modsi3
0005af14 g     O .rwdata	00000004 __ctype_ptr__
000649f0 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004dad8 g     F .text	00000004 __sfp_lock_release
0004371c g     F .text	00000334 SDLIB_Init
0005902e g     O .rodata	00000101 _ctype_
00044db0 g     F .text	000001a8 SD_CMD17
0005898c g     F .text	00000034 _exit
000577a0 g     F .text	00000140 alt_alarm_start
0004e61c g     F .text	000001b8 __smakebuf_r
00047730 g     F .text	00000098 strlen
00058188 g     F .text	00000160 open
00054ad4 g     F .text	000000e0 .hidden __gedf2
0005af24 g     O .rwdata	00000004 __wctomb
000517ac g     F .text	00000018 __sprint_r
00057c00 g     F .text	0000001c alt_icache_flush_all
0005af4c g     O .rwdata	00000004 alt_priority_mask
00057c6c g     F .text	000000a0 alt_ic_irq_enable
0004349c g     F .text	00000220 SDHAL_WriteData
0004b934 g     F .text	00000024 __vfprintf_internal
00041cbc g     F .text	00000188 fatFindUnusedCluster
000534fc g     F .text	0000005c _wctomb_r
00055500 g     F .text	000008d0 .hidden __subdf3
0004ed90 g     F .text	000000b0 __lo0bits
0005af44 g     O .rwdata	00000008 alt_alarm_list
00057b48 g     F .text	0000005c _do_ctors
00045100 g     F .text	00000040 SD_ReadData
000533f4 g     F .text	000000d8 wcrtomb
0005601c g     F .text	000000d8 close
000406c4 g     F .text	0000004c Fat_Unmount
00056388 g     F .text	00000080 alt_load
0005319c g     F .text	00000058 fputwc
00046998 g     F .text	00000014 free
0004dadc g     F .text	00000004 __sinit_lock_acquire
0004eae8 g     F .text	0000013c __multadd
000420f4 g     F .text	00000044 fatIsLastDir
0004eac0 g     F .text	00000028 _Bfree
00044268 g     F .text	0000019c SD_CMD3
00043a50 g     F .text	00000080 SDLIB_ReadBlock512



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408b14 	ori	at,at,556
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401cc0 	call	401cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	008001b4 	movhi	r2,6
   40140:	10b2b604 	addi	r2,r2,-13608
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	008001b4 	movhi	r2,6
   40158:	10b2b604 	addi	r2,r2,-13608
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffdb73c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffdb730>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	e037883a 	mov	sp,fp
   401bc:	dfc00117 	ldw	ra,4(sp)
   401c0:	df000017 	ldw	fp,0(sp)
   401c4:	dec00204 	addi	sp,sp,8
   401c8:	f800283a 	ret

000401cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401cc:	defffb04 	addi	sp,sp,-20
   401d0:	dfc00415 	stw	ra,16(sp)
   401d4:	df000315 	stw	fp,12(sp)
   401d8:	df000304 	addi	fp,sp,12
   401dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e0:	00bfffc4 	movi	r2,-1
   401e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401ec:	d0a6da17 	ldw	r2,-25752(gp)
   401f0:	10000726 	beq	r2,zero,40210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f4:	d0a6da17 	ldw	r2,-25752(gp)
   401f8:	e0fffd17 	ldw	r3,-12(fp)
   401fc:	1809883a 	mov	r4,r3
   40200:	e17fff17 	ldw	r5,-4(fp)
   40204:	e1bffe17 	ldw	r6,-8(fp)
   40208:	103ee83a 	callr	r2
   4020c:	00000206 	br	40218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40214:	0005883a 	mov	r2,zero
}
   40218:	e037883a 	mov	sp,fp
   4021c:	dfc00117 	ldw	ra,4(sp)
   40220:	df000017 	ldw	fp,0(sp)
   40224:	dec00204 	addi	sp,sp,8
   40228:	f800283a 	ret

Disassembly of section .text:

0004022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   4022c:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40230:	ded27c14 	ori	sp,sp,18928
    movhi gp, %hi(_gp)
   40234:	068001b4 	movhi	gp,6
    ori gp, gp, %lo(_gp)
   40238:	d68bc314 	ori	gp,gp,12044
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   4023c:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40240:	10b29014 	ori	r2,r2,51776

    movhi r3, %hi(__bss_end)
   40244:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   40248:	18f2f614 	ori	r3,r3,52184

    beq r2, r3, 1f
   4024c:	10c00326 	beq	r2,r3,4025c <_start+0x30>

0:
    stw zero, (r2)
   40250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40258:	10fffd36 	bltu	r2,r3,40250 <__alt_data_end+0xfffdb860>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   4025c:	00563880 	call	56388 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40260:	00565340 	call	56534 <alt_main>

00040264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40264:	003fff06 	br	40264 <__alt_data_end+0xfffdb874>

00040268 <Fat_Test>:
#include "alt_types.h"
#include "sd_lib.h"
#include "FatFileSystem.h"


bool Fat_Test(FAT_HANDLE hFat, char *pDumpFile){
   40268:	deff6704 	addi	sp,sp,-612
   4026c:	dfc09815 	stw	ra,608(sp)
   40270:	df009715 	stw	fp,604(sp)
   40274:	df009704 	addi	fp,sp,604
   40278:	e13ffe15 	stw	r4,-8(fp)
   4027c:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    int nCount = 0;
   40280:	e03f6a15 	stw	zero,-600(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;

    bSuccess = Fat_FileBrowseBegin(hFat, &hBrowse);
   40284:	e0bf7204 	addi	r2,fp,-568
   40288:	e13ffe17 	ldw	r4,-8(fp)
   4028c:	100b883a 	mov	r5,r2
   40290:	004077c0 	call	4077c <Fat_FileBrowseBegin>
   40294:	e0bf6915 	stw	r2,-604(fp)
    if (bSuccess){
   40298:	e0bf6917 	ldw	r2,-604(fp)
   4029c:	10003d26 	beq	r2,zero,40394 <Fat_Test+0x12c>
        while(Fat_FileBrowseNext(&hBrowse, &FileContext)){
   402a0:	00003606 	br	4037c <Fat_Test+0x114>
            if (FileContext.bLongFilename){
   402a4:	e0bfb417 	ldw	r2,-304(fp)
   402a8:	10002b26 	beq	r2,zero,40358 <Fat_Test+0xf0>
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
   402ac:	e0bf7404 	addi	r2,fp,-560
   402b0:	e0bf6b15 	stw	r2,-596(fp)
                pData8 = FileContext.szName;
   402b4:	e0bf7404 	addi	r2,fp,-560
   402b8:	e0bf6c15 	stw	r2,-592(fp)
                printf("[%d]", nCount);
   402bc:	010001b4 	movhi	r4,6
   402c0:	21227004 	addi	r4,r4,-30272
   402c4:	e17f6a17 	ldw	r5,-600(fp)
   402c8:	00473dc0 	call	473dc <printf>
                while(*pData16){
   402cc:	00001b06 	br	4033c <Fat_Test+0xd4>
                    if (*pData8)
   402d0:	e0bf6c17 	ldw	r2,-592(fp)
   402d4:	10800003 	ldbu	r2,0(r2)
   402d8:	10803fcc 	andi	r2,r2,255
   402dc:	10000526 	beq	r2,zero,402f4 <Fat_Test+0x8c>
                        printf("%c", *pData8);
   402e0:	e0bf6c17 	ldw	r2,-592(fp)
   402e4:	10800003 	ldbu	r2,0(r2)
   402e8:	10803fcc 	andi	r2,r2,255
   402ec:	1009883a 	mov	r4,r2
   402f0:	00474200 	call	47420 <putchar>
                    pData8++;
   402f4:	e0bf6c17 	ldw	r2,-592(fp)
   402f8:	10800044 	addi	r2,r2,1
   402fc:	e0bf6c15 	stw	r2,-592(fp)
                    if (*pData8)
   40300:	e0bf6c17 	ldw	r2,-592(fp)
   40304:	10800003 	ldbu	r2,0(r2)
   40308:	10803fcc 	andi	r2,r2,255
   4030c:	10000526 	beq	r2,zero,40324 <Fat_Test+0xbc>
                        printf("%c", *pData8);
   40310:	e0bf6c17 	ldw	r2,-592(fp)
   40314:	10800003 	ldbu	r2,0(r2)
   40318:	10803fcc 	andi	r2,r2,255
   4031c:	1009883a 	mov	r4,r2
   40320:	00474200 	call	47420 <putchar>
                    pData8++;
   40324:	e0bf6c17 	ldw	r2,-592(fp)
   40328:	10800044 	addi	r2,r2,1
   4032c:	e0bf6c15 	stw	r2,-592(fp)
                    //
                    pData16++;
   40330:	e0bf6b17 	ldw	r2,-596(fp)
   40334:	10800084 	addi	r2,r2,2
   40338:	e0bf6b15 	stw	r2,-596(fp)
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                printf("[%d]", nCount);
                while(*pData16){
   4033c:	e0bf6b17 	ldw	r2,-596(fp)
   40340:	1080000b 	ldhu	r2,0(r2)
   40344:	10bfffcc 	andi	r2,r2,65535
   40348:	103fe11e 	bne	r2,zero,402d0 <__alt_data_end+0xfffdb8e0>
                        printf("%c", *pData8);
                    pData8++;
                    //
                    pData16++;
                }
                printf("\n");
   4034c:	01000284 	movi	r4,10
   40350:	00474200 	call	47420 <putchar>
   40354:	00000606 	br	40370 <Fat_Test+0x108>
            }else{
                printf("[%d]%s\n", nCount, FileContext.szName);
   40358:	e0bf7404 	addi	r2,fp,-560
   4035c:	010001b4 	movhi	r4,6
   40360:	21227204 	addi	r4,r4,-30264
   40364:	e17f6a17 	ldw	r5,-600(fp)
   40368:	100d883a 	mov	r6,r2
   4036c:	00473dc0 	call	473dc <printf>
            }
            nCount++;
   40370:	e0bf6a17 	ldw	r2,-600(fp)
   40374:	10800044 	addi	r2,r2,1
   40378:	e0bf6a15 	stw	r2,-600(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;

    bSuccess = Fat_FileBrowseBegin(hFat, &hBrowse);
    if (bSuccess){
        while(Fat_FileBrowseNext(&hBrowse, &FileContext)){
   4037c:	e0ff7204 	addi	r3,fp,-568
   40380:	e0bf7404 	addi	r2,fp,-560
   40384:	1809883a 	mov	r4,r3
   40388:	100b883a 	mov	r5,r2
   4038c:	00407e80 	call	407e8 <Fat_FileBrowseNext>
   40390:	103fc41e 	bne	r2,zero,402a4 <__alt_data_end+0xfffdb8b4>
                printf("[%d]%s\n", nCount, FileContext.szName);
            }
            nCount++;
        }
    }
    if (bSuccess && pDumpFile && strlen(pDumpFile)){
   40394:	e0bf6917 	ldw	r2,-604(fp)
   40398:	10005926 	beq	r2,zero,40500 <Fat_Test+0x298>
   4039c:	e0bfff17 	ldw	r2,-4(fp)
   403a0:	10005726 	beq	r2,zero,40500 <Fat_Test+0x298>
   403a4:	e0bfff17 	ldw	r2,-4(fp)
   403a8:	10800003 	ldbu	r2,0(r2)
   403ac:	10803fcc 	andi	r2,r2,255
   403b0:	1080201c 	xori	r2,r2,128
   403b4:	10bfe004 	addi	r2,r2,-128
   403b8:	10005126 	beq	r2,zero,40500 <Fat_Test+0x298>
        FAT_FILE_HANDLE hFile;
        hFile =  Fat_FileOpen(hFat, pDumpFile);
   403bc:	e13ffe17 	ldw	r4,-8(fp)
   403c0:	e17fff17 	ldw	r5,-4(fp)
   403c4:	0040f780 	call	40f78 <Fat_FileOpen>
   403c8:	e0bf7015 	stw	r2,-576(fp)
        if (hFile){
   403cc:	e0bf7017 	ldw	r2,-576(fp)
   403d0:	10004626 	beq	r2,zero,404ec <Fat_Test+0x284>
            char szRead[256];
            int nReadSize, nFileSize, nTotalReadSize=0;
   403d4:	e03f6e15 	stw	zero,-584(fp)
            nFileSize = Fat_FileSize(hFile);
   403d8:	e13f7017 	ldw	r4,-576(fp)
   403dc:	00411980 	call	41198 <Fat_FileSize>
   403e0:	e0bf7115 	stw	r2,-572(fp)
            if (nReadSize > sizeof(szRead))
   403e4:	e0bf6d17 	ldw	r2,-588(fp)
   403e8:	10804070 	cmpltui	r2,r2,257
   403ec:	1000021e 	bne	r2,zero,403f8 <Fat_Test+0x190>
                nReadSize = sizeof(szRead);
   403f0:	00804004 	movi	r2,256
   403f4:	e0bf6d15 	stw	r2,-588(fp)
            printf("%s dump:\n", pDumpFile);
   403f8:	010001b4 	movhi	r4,6
   403fc:	21227404 	addi	r4,r4,-30256
   40400:	e17fff17 	ldw	r5,-4(fp)
   40404:	00473dc0 	call	473dc <printf>
            while(bSuccess && nTotalReadSize < nFileSize){
   40408:	00002c06 	br	404bc <Fat_Test+0x254>
                nReadSize = sizeof(szRead);
   4040c:	00804004 	movi	r2,256
   40410:	e0bf6d15 	stw	r2,-588(fp)
                if (nReadSize > (nFileSize - nTotalReadSize))
   40414:	e0ff7117 	ldw	r3,-572(fp)
   40418:	e0bf6e17 	ldw	r2,-584(fp)
   4041c:	1887c83a 	sub	r3,r3,r2
   40420:	e0bf6d17 	ldw	r2,-588(fp)
   40424:	1880040e 	bge	r3,r2,40438 <Fat_Test+0x1d0>
                    nReadSize = (nFileSize - nTotalReadSize);
   40428:	e0ff7117 	ldw	r3,-572(fp)
   4042c:	e0bf6e17 	ldw	r2,-584(fp)
   40430:	1885c83a 	sub	r2,r3,r2
   40434:	e0bf6d15 	stw	r2,-588(fp)
                //
                if (Fat_FileRead(hFile, szRead, nReadSize)){
   40438:	e0bfbe04 	addi	r2,fp,-264
   4043c:	e13f7017 	ldw	r4,-576(fp)
   40440:	100b883a 	mov	r5,r2
   40444:	e1bf6d17 	ldw	r6,-588(fp)
   40448:	00411dc0 	call	411dc <Fat_FileRead>
   4044c:	10001626 	beq	r2,zero,404a8 <Fat_Test+0x240>
                    int i;
                    for(i=0;i<nReadSize;i++){
   40450:	e03f6f15 	stw	zero,-580(fp)
   40454:	00000c06 	br	40488 <Fat_Test+0x220>
                        printf("%c", szRead[i]);
   40458:	e0ffbe04 	addi	r3,fp,-264
   4045c:	e0bf6f17 	ldw	r2,-580(fp)
   40460:	1885883a 	add	r2,r3,r2
   40464:	10800003 	ldbu	r2,0(r2)
   40468:	10803fcc 	andi	r2,r2,255
   4046c:	1080201c 	xori	r2,r2,128
   40470:	10bfe004 	addi	r2,r2,-128
   40474:	1009883a 	mov	r4,r2
   40478:	00474200 	call	47420 <putchar>
                if (nReadSize > (nFileSize - nTotalReadSize))
                    nReadSize = (nFileSize - nTotalReadSize);
                //
                if (Fat_FileRead(hFile, szRead, nReadSize)){
                    int i;
                    for(i=0;i<nReadSize;i++){
   4047c:	e0bf6f17 	ldw	r2,-580(fp)
   40480:	10800044 	addi	r2,r2,1
   40484:	e0bf6f15 	stw	r2,-580(fp)
   40488:	e0ff6f17 	ldw	r3,-580(fp)
   4048c:	e0bf6d17 	ldw	r2,-588(fp)
   40490:	18bff116 	blt	r3,r2,40458 <__alt_data_end+0xfffdba68>
                        printf("%c", szRead[i]);
                    }
                    nTotalReadSize += nReadSize;
   40494:	e0ff6e17 	ldw	r3,-584(fp)
   40498:	e0bf6d17 	ldw	r2,-588(fp)
   4049c:	1885883a 	add	r2,r3,r2
   404a0:	e0bf6e15 	stw	r2,-584(fp)
   404a4:	00000506 	br	404bc <Fat_Test+0x254>
                }else{
                    bSuccess = FALSE;
   404a8:	e03f6915 	stw	zero,-604(fp)
                    printf("\nFaied to read the file \"%s\"\n", pDumpFile);
   404ac:	010001b4 	movhi	r4,6
   404b0:	21227704 	addi	r4,r4,-30244
   404b4:	e17fff17 	ldw	r5,-4(fp)
   404b8:	00473dc0 	call	473dc <printf>
            int nReadSize, nFileSize, nTotalReadSize=0;
            nFileSize = Fat_FileSize(hFile);
            if (nReadSize > sizeof(szRead))
                nReadSize = sizeof(szRead);
            printf("%s dump:\n", pDumpFile);
            while(bSuccess && nTotalReadSize < nFileSize){
   404bc:	e0bf6917 	ldw	r2,-604(fp)
   404c0:	10000326 	beq	r2,zero,404d0 <Fat_Test+0x268>
   404c4:	e0ff6e17 	ldw	r3,-584(fp)
   404c8:	e0bf7117 	ldw	r2,-572(fp)
   404cc:	18bfcf16 	blt	r3,r2,4040c <__alt_data_end+0xfffdba1c>
                }else{
                    bSuccess = FALSE;
                    printf("\nFaied to read the file \"%s\"\n", pDumpFile);
                }
            } // while
            if (bSuccess)
   404d0:	e0bf6917 	ldw	r2,-604(fp)
   404d4:	10000226 	beq	r2,zero,404e0 <Fat_Test+0x278>
                printf("\n");
   404d8:	01000284 	movi	r4,10
   404dc:	00474200 	call	47420 <putchar>
            Fat_FileClose(hFile);
   404e0:	e13f7017 	ldw	r4,-576(fp)
   404e4:	00417600 	call	41760 <Fat_FileClose>
   404e8:	00000506 	br	40500 <Fat_Test+0x298>
        }else{
            bSuccess = FALSE;
   404ec:	e03f6915 	stw	zero,-604(fp)
            printf("Cannot find the file \"%s\"\n", pDumpFile);
   404f0:	010001b4 	movhi	r4,6
   404f4:	21227f04 	addi	r4,r4,-30212
   404f8:	e17fff17 	ldw	r5,-4(fp)
   404fc:	00473dc0 	call	473dc <printf>
        }
    }

    return bSuccess;
   40500:	e0bf6917 	ldw	r2,-604(fp)
}
   40504:	e037883a 	mov	sp,fp
   40508:	dfc00117 	ldw	ra,4(sp)
   4050c:	df000017 	ldw	fp,0(sp)
   40510:	dec00204 	addi	sp,sp,8
   40514:	f800283a 	ret

00040518 <main>:

int main()
{
   40518:	defff804 	addi	sp,sp,-32
   4051c:	dfc00715 	stw	ra,28(sp)
   40520:	df000615 	stw	fp,24(sp)
   40524:	df000604 	addi	fp,sp,24
    const alt_u32 LED_TEST_PATTERN = 0xF0;
   40528:	00803c04 	movi	r2,240
   4052c:	e0bffc15 	stw	r2,-16(fp)
    const alt_u32 LED_NG_PATTERN = 0xFF;
   40530:	00803fc4 	movi	r2,255
   40534:	e0bffd15 	stw	r2,-12(fp)
    const alt_u32 LED_PASS_PATTERN = 0x00;
   40538:	e03ffe15 	stw	zero,-8(fp)
    bool bSuccess;
    int i;
    FAT_HANDLE hFat;
    // select 3.3V
    IOWR(SD_SEL_BASE, 0x00, 0x00);
   4053c:	0007883a 	mov	r3,zero
   40540:	00800234 	movhi	r2,8
   40544:	10840804 	addi	r2,r2,4128
   40548:	10c00035 	stwio	r3,0(r2)

    printf("========== DECA SDCARD test ==========\n");
   4054c:	010001b4 	movhi	r4,6
   40550:	21228604 	addi	r4,r4,-30184
   40554:	00474f00 	call	474f0 <puts>
    printf("please ensure the sd card has been inserted into DECA board\n");
   40558:	010001b4 	movhi	r4,6
   4055c:	21229004 	addi	r4,r4,-30144
   40560:	00474f00 	call	474f0 <puts>
    while(1)
    {
        printf("Processing...\r\n");
   40564:	010001b4 	movhi	r4,6
   40568:	21229f04 	addi	r4,r4,-30084
   4056c:	00474f00 	call	474f0 <puts>
        IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, LED_TEST_PATTERN);
   40570:	e0fffc17 	ldw	r3,-16(fp)
   40574:	00800234 	movhi	r2,8
   40578:	10841c04 	addi	r2,r2,4208
   4057c:	10c00035 	stwio	r3,0(r2)
        bSuccess = SDLIB_Init();
   40580:	004371c0 	call	4371c <SDLIB_Init>
   40584:	e0bffa15 	stw	r2,-24(fp)
       	    for(i=0;i<5 && !bSuccess;i++){ // try 3 time at max
   40588:	e03ffb15 	stw	zero,-20(fp)
   4058c:	00000506 	br	405a4 <main+0x8c>
       	        bSuccess = SDLIB_Init();
   40590:	004371c0 	call	4371c <SDLIB_Init>
   40594:	e0bffa15 	stw	r2,-24(fp)
    while(1)
    {
        printf("Processing...\r\n");
        IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, LED_TEST_PATTERN);
        bSuccess = SDLIB_Init();
       	    for(i=0;i<5 && !bSuccess;i++){ // try 3 time at max
   40598:	e0bffb17 	ldw	r2,-20(fp)
   4059c:	10800044 	addi	r2,r2,1
   405a0:	e0bffb15 	stw	r2,-20(fp)
   405a4:	e0bffb17 	ldw	r2,-20(fp)
   405a8:	10800148 	cmpgei	r2,r2,5
   405ac:	1000021e 	bne	r2,zero,405b8 <main+0xa0>
   405b0:	e0bffa17 	ldw	r2,-24(fp)
   405b4:	103ff626 	beq	r2,zero,40590 <__alt_data_end+0xfffdbba0>
       	        bSuccess = SDLIB_Init();
       	    }
        hFat = Fat_Mount(FAT_SD_CARD, 0);
   405b8:	0009883a 	mov	r4,zero
   405bc:	000b883a 	mov	r5,zero
   405c0:	00406800 	call	40680 <Fat_Mount>
   405c4:	e0bfff15 	stw	r2,-4(fp)
        if (hFat){
   405c8:	e0bfff17 	ldw	r2,-4(fp)
   405cc:	10001726 	beq	r2,zero,4062c <main+0x114>
            printf("sdcard mount success!\n");
   405d0:	010001b4 	movhi	r4,6
   405d4:	2122a304 	addi	r4,r4,-30068
   405d8:	00474f00 	call	474f0 <puts>
            printf("Root Directory Item Count:%d\n", Fat_FileCount(hFat));
   405dc:	e13fff17 	ldw	r4,-4(fp)
   405e0:	0040c180 	call	40c18 <Fat_FileCount>
   405e4:	010001b4 	movhi	r4,6
   405e8:	2122a904 	addi	r4,r4,-30044
   405ec:	100b883a 	mov	r5,r2
   405f0:	00473dc0 	call	473dc <printf>
            Fat_Test(hFat, "test.txt");
   405f4:	e13fff17 	ldw	r4,-4(fp)
   405f8:	014001b4 	movhi	r5,6
   405fc:	2962b104 	addi	r5,r5,-30012
   40600:	00402680 	call	40268 <Fat_Test>
            Fat_Unmount(hFat);
   40604:	e13fff17 	ldw	r4,-4(fp)
   40608:	00406c40 	call	406c4 <Fat_Unmount>
            IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, LED_PASS_PATTERN);
   4060c:	e0fffe17 	ldw	r3,-8(fp)
   40610:	00800234 	movhi	r2,8
   40614:	10841c04 	addi	r2,r2,4208
   40618:	10c00035 	stwio	r3,0(r2)
            printf("===== Test Done =====\r\nPress KEY1 to test again.\r\n");
   4061c:	010001b4 	movhi	r4,6
   40620:	2122b404 	addi	r4,r4,-30000
   40624:	00474f00 	call	474f0 <puts>
   40628:	00000706 	br	40648 <main+0x130>
        }else{
            printf("Failed to mount the SDCARD!\r\nPlease insert the SDCARD into DECA board and press KEY1.\r\n");
   4062c:	010001b4 	movhi	r4,6
   40630:	2122c104 	addi	r4,r4,-29948
   40634:	00474f00 	call	474f0 <puts>
            IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, LED_NG_PATTERN);
   40638:	e0fffd17 	ldw	r3,-12(fp)
   4063c:	00800234 	movhi	r2,8
   40640:	10841c04 	addi	r2,r2,4208
   40644:	10c00035 	stwio	r3,0(r2)
        }
       	//printf("sdcard init %s\r\n", bSuccess?"success":"fail");

        while ((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x02) == 0x02);
   40648:	0001883a 	nop
   4064c:	00800234 	movhi	r2,8
   40650:	10841804 	addi	r2,r2,4192
   40654:	10800037 	ldwio	r2,0(r2)
   40658:	1080008c 	andi	r2,r2,2
   4065c:	103ffb1e 	bne	r2,zero,4064c <__alt_data_end+0xfffdbc5c>
        IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, LED_TEST_PATTERN);
   40660:	e0fffc17 	ldw	r3,-16(fp)
   40664:	00800234 	movhi	r2,8
   40668:	10841c04 	addi	r2,r2,4208
   4066c:	10c00035 	stwio	r3,0(r2)
        usleep(400*1000); // debounce
   40670:	010001b4 	movhi	r4,6
   40674:	2106a004 	addi	r4,r4,6784
   40678:	0056a0c0 	call	56a0c <usleep>
    } // while
   4067c:	003fb906 	br	40564 <__alt_data_end+0xfffdbb74>

00040680 <Fat_Mount>:
bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2);




FAT_HANDLE Fat_Mount(FAT_DEVICE FatDevice, DEVICE_HANDLE hUsbDisk){
   40680:	defffb04 	addi	sp,sp,-20
   40684:	dfc00415 	stw	ra,16(sp)
   40688:	df000315 	stw	fp,12(sp)
   4068c:	df000304 	addi	fp,sp,12
   40690:	e13ffe15 	stw	r4,-8(fp)
   40694:	e17fff15 	stw	r5,-4(fp)
    
    //Fat_Unmount();
    FAT_HANDLE hFat = 0;
   40698:	e03ffd15 	stw	zero,-12(fp)
    
    if (FatDevice == FAT_SD_CARD){
   4069c:	e0bffe17 	ldw	r2,-8(fp)
   406a0:	1000021e 	bne	r2,zero,406ac <Fat_Mount+0x2c>
        #ifdef SUPPORT_SD_CARD
        hFat = fatMountSdcard();
   406a4:	0042a280 	call	42a28 <fatMountSdcard>
   406a8:	e0bffd15 	stw	r2,-12(fp)
    }else if (FatDevice == FAT_USB_DISK){
        #ifdef SUPPORT_USB_DISK
        hFat = fatMountUsbDisk(hUsbDisk);
        #endif
    }  
    return hFat;      
   406ac:	e0bffd17 	ldw	r2,-12(fp)
        
}
   406b0:	e037883a 	mov	sp,fp
   406b4:	dfc00117 	ldw	ra,4(sp)
   406b8:	df000017 	ldw	fp,0(sp)
   406bc:	dec00204 	addi	sp,sp,8
   406c0:	f800283a 	ret

000406c4 <Fat_Unmount>:

void Fat_Unmount(FAT_HANDLE Fat){
   406c4:	defffc04 	addi	sp,sp,-16
   406c8:	dfc00315 	stw	ra,12(sp)
   406cc:	df000215 	stw	fp,8(sp)
   406d0:	df000204 	addi	fp,sp,8
   406d4:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
   406d8:	e0bfff17 	ldw	r2,-4(fp)
   406dc:	e0bffe15 	stw	r2,-8(fp)
    if (!pVol)
   406e0:	e0bffe17 	ldw	r2,-8(fp)
   406e4:	1000011e 	bne	r2,zero,406ec <Fat_Unmount+0x28>
        return;
   406e8:	00000406 	br	406fc <Fat_Unmount+0x38>
    if (pVol->szFatTable){
        free(pVol->szFatTable);
        pVol->szFatTable = 0;
    }        
#endif //#ifdef FAT_READONLY
    pVol->bMount = FALSE;
   406ec:	e0bffe17 	ldw	r2,-8(fp)
   406f0:	10000415 	stw	zero,16(r2)
    
    free(pVol);  
   406f4:	e13ffe17 	ldw	r4,-8(fp)
   406f8:	00469980 	call	46998 <free>
}   
   406fc:	e037883a 	mov	sp,fp
   40700:	dfc00117 	ldw	ra,4(sp)
   40704:	df000017 	ldw	fp,0(sp)
   40708:	dec00204 	addi	sp,sp,8
   4070c:	f800283a 	ret

00040710 <Fat_Type>:

FAT_TYPE Fat_Type(FAT_HANDLE Fat){
   40710:	defffc04 	addi	sp,sp,-16
   40714:	df000315 	stw	fp,12(sp)
   40718:	df000304 	addi	fp,sp,12
   4071c:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
   40720:	e0bfff17 	ldw	r2,-4(fp)
   40724:	e0bffe15 	stw	r2,-8(fp)
    FAT_TYPE Type = FAT_UNKNOWN;
   40728:	e03ffd15 	stw	zero,-12(fp)
    if (pVol){
   4072c:	e0bffe17 	ldw	r2,-8(fp)
   40730:	10000d26 	beq	r2,zero,40768 <Fat_Type+0x58>
        if (pVol->Partition_Type == PARTITION_FAT16)
   40734:	e0bffe17 	ldw	r2,-8(fp)
   40738:	10800317 	ldw	r2,12(r2)
   4073c:	10800198 	cmpnei	r2,r2,6
   40740:	1000031e 	bne	r2,zero,40750 <Fat_Type+0x40>
            Type = FAT_FAT16;
   40744:	00800044 	movi	r2,1
   40748:	e0bffd15 	stw	r2,-12(fp)
   4074c:	00000606 	br	40768 <Fat_Type+0x58>
        else if (pVol->Partition_Type == PARTITION_FAT32)
   40750:	e0bffe17 	ldw	r2,-8(fp)
   40754:	10800317 	ldw	r2,12(r2)
   40758:	108002d8 	cmpnei	r2,r2,11
   4075c:	1000021e 	bne	r2,zero,40768 <Fat_Type+0x58>
            Type = FAT_FAT32;
   40760:	00800084 	movi	r2,2
   40764:	e0bffd15 	stw	r2,-12(fp)
    }
    return Type;        
   40768:	e0bffd17 	ldw	r2,-12(fp)
}
   4076c:	e037883a 	mov	sp,fp
   40770:	df000017 	ldw	fp,0(sp)
   40774:	dec00104 	addi	sp,sp,4
   40778:	f800283a 	ret

0004077c <Fat_FileBrowseBegin>:

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
   4077c:	defffc04 	addi	sp,sp,-16
   40780:	df000315 	stw	fp,12(sp)
   40784:	df000304 	addi	fp,sp,12
   40788:	e13ffe15 	stw	r4,-8(fp)
   4078c:	e17fff15 	stw	r5,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
   40790:	e0bffe17 	ldw	r2,-8(fp)
   40794:	e0bffd15 	stw	r2,-12(fp)
    if (!pVol)
   40798:	e0bffd17 	ldw	r2,-12(fp)
   4079c:	1000021e 	bne	r2,zero,407a8 <Fat_FileBrowseBegin+0x2c>
        return FALSE;
   407a0:	0005883a 	mov	r2,zero
   407a4:	00000c06 	br	407d8 <Fat_FileBrowseBegin+0x5c>
    if (!pVol->bMount)
   407a8:	e0bffd17 	ldw	r2,-12(fp)
   407ac:	10800417 	ldw	r2,16(r2)
   407b0:	1000021e 	bne	r2,zero,407bc <Fat_FileBrowseBegin+0x40>
        return FALSE;
   407b4:	0005883a 	mov	r2,zero
   407b8:	00000706 	br	407d8 <Fat_FileBrowseBegin+0x5c>
    pFatBrowseHandle->DirectoryIndex = -1;
   407bc:	e0bfff17 	ldw	r2,-4(fp)
   407c0:	00ffffc4 	movi	r3,-1
   407c4:	10c00015 	stw	r3,0(r2)
    pFatBrowseHandle->hFat = hFat;
   407c8:	e0bfff17 	ldw	r2,-4(fp)
   407cc:	e0fffe17 	ldw	r3,-8(fp)
   407d0:	10c00115 	stw	r3,4(r2)
    return TRUE;
   407d4:	00800044 	movi	r2,1
}
   407d8:	e037883a 	mov	sp,fp
   407dc:	df000017 	ldw	fp,0(sp)
   407e0:	dec00104 	addi	sp,sp,4
   407e4:	f800283a 	ret

000407e8 <Fat_FileBrowseNext>:

bool Fat_FileBrowseNext(FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext){
   407e8:	defff404 	addi	sp,sp,-48
   407ec:	dfc00b15 	stw	ra,44(sp)
   407f0:	df000a15 	stw	fp,40(sp)
   407f4:	df000a04 	addi	fp,sp,40
   407f8:	e13ffe15 	stw	r4,-8(fp)
   407fc:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE, bError=FALSE, bLongFilename = FALSE;
   40800:	e03ff615 	stw	zero,-40(fp)
   40804:	e03ff715 	stw	zero,-36(fp)
   40808:	e03ff815 	stw	zero,-32(fp)
    int OrderValue = 0;
   4080c:	e03ff915 	stw	zero,-28(fp)
    FAT_DIRECTORY *pDir;
    //unsigned int nSecter, nSecterOffset,nByteOffset;
    VOLUME_INFO *pVol = (VOLUME_INFO *)pFatBrowseHandle->hFat;
   40810:	e0bffe17 	ldw	r2,-8(fp)
   40814:	10800117 	ldw	r2,4(r2)
   40818:	e0bffa15 	stw	r2,-24(fp)
    
    if (!pVol)
   4081c:	e0bffa17 	ldw	r2,-24(fp)
   40820:	1000021e 	bne	r2,zero,4082c <Fat_FileBrowseNext+0x44>
        return FALSE;    
   40824:	0005883a 	mov	r2,zero
   40828:	0000f606 	br	40c04 <Fat_FileBrowseNext+0x41c>
    
    if (!pVol->bMount)
   4082c:	e0bffa17 	ldw	r2,-24(fp)
   40830:	10800417 	ldw	r2,16(r2)
   40834:	1000021e 	bne	r2,zero,40840 <Fat_FileBrowseNext+0x58>
        return FALSE;
   40838:	0005883a 	mov	r2,zero
   4083c:	0000f106 	br	40c04 <Fat_FileBrowseNext+0x41c>
    
    
    do{  // search Directory Table
        pFatBrowseHandle->DirectoryIndex++;        
   40840:	e0bffe17 	ldw	r2,-8(fp)
   40844:	10800017 	ldw	r2,0(r2)
   40848:	10c00044 	addi	r3,r2,1
   4084c:	e0bffe17 	ldw	r2,-8(fp)
   40850:	10c00015 	stw	r3,0(r2)
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
   40854:	e0bffe17 	ldw	r2,-8(fp)
   40858:	10800017 	ldw	r2,0(r2)
   4085c:	e13ffa17 	ldw	r4,-24(fp)
   40860:	100b883a 	mov	r5,r2
   40864:	00424d80 	call	424d8 <fatFindDirectory>
   40868:	e0bffb15 	stw	r2,-20(fp)
        if (!pDir)
   4086c:	e0bffb17 	ldw	r2,-20(fp)
   40870:	1000021e 	bne	r2,zero,4087c <Fat_FileBrowseNext+0x94>
            bError = TRUE;
   40874:	00800044 	movi	r2,1
   40878:	e0bff715 	stw	r2,-36(fp)
            
        if (!bError){                        
   4087c:	e0bff717 	ldw	r2,-36(fp)
   40880:	1000d81e 	bne	r2,zero,40be4 <Fat_FileBrowseNext+0x3fc>
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
   40884:	e13ffb17 	ldw	r4,-20(fp)
   40888:	00421380 	call	42138 <fatIsValidDir>
   4088c:	1000d526 	beq	r2,zero,40be4 <Fat_FileBrowseNext+0x3fc>
   40890:	e13ffb17 	ldw	r4,-20(fp)
   40894:	00421e00 	call	421e0 <fatIsUnusedDir>
   40898:	1000d21e 	bne	r2,zero,40be4 <Fat_FileBrowseNext+0x3fc>
                if ((pDir->Attribute & ATTR_LONG_NAME) == ATTR_LONG_NAME){
   4089c:	e0bffb17 	ldw	r2,-20(fp)
   408a0:	108002c3 	ldbu	r2,11(r2)
   408a4:	10803fcc 	andi	r2,r2,255
   408a8:	108003cc 	andi	r2,r2,15
   408ac:	108003d8 	cmpnei	r2,r2,15
   408b0:	1000531e 	bne	r2,zero,40a00 <Fat_FileBrowseNext+0x218>
                    FAT_LONG_DIRECTORY *pLDIR = (FAT_LONG_DIRECTORY *)pDir;
   408b4:	e0bffb17 	ldw	r2,-20(fp)
   408b8:	e0bffc15 	stw	r2,-16(fp)
                    // check attribute
                    if ((pLDIR->LDIR_Attr & ATTR_LONG_NAME) != ATTR_LONG_NAME){
   408bc:	e0bffc17 	ldw	r2,-16(fp)
   408c0:	108002c3 	ldbu	r2,11(r2)
   408c4:	10803fcc 	andi	r2,r2,255
   408c8:	108003cc 	andi	r2,r2,15
   408cc:	108003e0 	cmpeqi	r2,r2,15
   408d0:	1000031e 	bne	r2,zero,408e0 <Fat_FileBrowseNext+0xf8>
                        bError = TRUE;
   408d4:	00800044 	movi	r2,1
   408d8:	e0bff715 	stw	r2,-36(fp)
   408dc:	00001e06 	br	40958 <Fat_FileBrowseNext+0x170>
                    }else{                        
                        // check order
                        if (OrderValue == 0){
   408e0:	e0bff917 	ldw	r2,-28(fp)
   408e4:	1000141e 	bne	r2,zero,40938 <Fat_FileBrowseNext+0x150>
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
   408e8:	e0bff817 	ldw	r2,-32(fp)
   408ec:	1000041e 	bne	r2,zero,40900 <Fat_FileBrowseNext+0x118>
   408f0:	e0bff917 	ldw	r2,-28(fp)
   408f4:	10c0100c 	andi	r3,r2,64
   408f8:	e0bff917 	ldw	r2,-28(fp)
   408fc:	18800326 	beq	r3,r2,4090c <Fat_FileBrowseNext+0x124>
                                bError = TRUE;
   40900:	00800044 	movi	r2,1
   40904:	e0bff715 	stw	r2,-36(fp)
   40908:	00000506 	br	40920 <Fat_FileBrowseNext+0x138>
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
   4090c:	e0bffc17 	ldw	r2,-16(fp)
   40910:	10800003 	ldbu	r2,0(r2)
   40914:	10803fcc 	andi	r2,r2,255
   40918:	10800fcc 	andi	r2,r2,63
   4091c:	e0bff915 	stw	r2,-28(fp)
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
   40920:	e0bfff17 	ldw	r2,-4(fp)
   40924:	1009883a 	mov	r4,r2
   40928:	000b883a 	mov	r5,zero
   4092c:	01804004 	movi	r6,256
   40930:	004728c0 	call	4728c <memset>
   40934:	00000806 	br	40958 <Fat_FileBrowseNext+0x170>
                        }else{
                            if ((pLDIR->LDIR_Ord & 0x3F) != OrderValue)
   40938:	e0bffc17 	ldw	r2,-16(fp)
   4093c:	10800003 	ldbu	r2,0(r2)
   40940:	10803fcc 	andi	r2,r2,255
   40944:	10c00fcc 	andi	r3,r2,63
   40948:	e0bff917 	ldw	r2,-28(fp)
   4094c:	18800226 	beq	r3,r2,40958 <Fat_FileBrowseNext+0x170>
                                bError = TRUE;
   40950:	00800044 	movi	r2,1
   40954:	e0bff715 	stw	r2,-36(fp)
                        }
                    }
                    
                    //                        
                    if (!bError){
   40958:	e0bff717 	ldw	r2,-36(fp)
   4095c:	1000271e 	bne	r2,zero,409fc <Fat_FileBrowseNext+0x214>
                        int BaseOffset;
                        bLongFilename = TRUE;
   40960:	00800044 	movi	r2,1
   40964:	e0bff815 	stw	r2,-32(fp)
                        OrderValue--;
   40968:	e0bff917 	ldw	r2,-28(fp)
   4096c:	10bfffc4 	addi	r2,r2,-1
   40970:	e0bff915 	stw	r2,-28(fp)
                        BaseOffset = OrderValue * 26;
   40974:	e13ff917 	ldw	r4,-28(fp)
   40978:	01400684 	movi	r5,26
   4097c:	00453200 	call	45320 <__mulsi3>
   40980:	e0bffd15 	stw	r2,-12(fp)
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
   40984:	e0bffd17 	ldw	r2,-12(fp)
   40988:	e0ffff17 	ldw	r3,-4(fp)
   4098c:	1887883a 	add	r3,r3,r2
   40990:	e0bffc17 	ldw	r2,-16(fp)
   40994:	10800044 	addi	r2,r2,1
   40998:	1809883a 	mov	r4,r3
   4099c:	100b883a 	mov	r5,r2
   409a0:	01800284 	movi	r6,10
   409a4:	00471540 	call	47154 <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
   409a8:	e0bffd17 	ldw	r2,-12(fp)
   409ac:	10800284 	addi	r2,r2,10
   409b0:	e0ffff17 	ldw	r3,-4(fp)
   409b4:	1887883a 	add	r3,r3,r2
   409b8:	e0bffc17 	ldw	r2,-16(fp)
   409bc:	10800384 	addi	r2,r2,14
   409c0:	1809883a 	mov	r4,r3
   409c4:	100b883a 	mov	r5,r2
   409c8:	01800304 	movi	r6,12
   409cc:	00471540 	call	47154 <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
   409d0:	e0bffd17 	ldw	r2,-12(fp)
   409d4:	10800584 	addi	r2,r2,22
   409d8:	e0ffff17 	ldw	r3,-4(fp)
   409dc:	1887883a 	add	r3,r3,r2
   409e0:	e0bffc17 	ldw	r2,-16(fp)
   409e4:	10800704 	addi	r2,r2,28
   409e8:	1809883a 	mov	r4,r3
   409ec:	100b883a 	mov	r5,r2
   409f0:	01800104 	movi	r6,4
   409f4:	00471540 	call	47154 <memcpy>
   409f8:	00007a06 	br	40be4 <Fat_FileBrowseNext+0x3fc>
   409fc:	00007906 	br	40be4 <Fat_FileBrowseNext+0x3fc>
                    }                        
                }else{
                    if (bLongFilename){
   40a00:	e0bff817 	ldw	r2,-32(fp)
   40a04:	10000e26 	beq	r2,zero,40a40 <Fat_FileBrowseNext+0x258>
                        pFileContext->Attribute = ATTR_LONG_NAME;
   40a08:	e0bfff17 	ldw	r2,-4(fp)
   40a0c:	00c003c4 	movi	r3,15
   40a10:	10c04505 	stb	r3,276(r2)
                        if ((pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)) == 0)
   40a14:	e0bffb17 	ldw	r2,-20(fp)
   40a18:	108002c3 	ldbu	r2,11(r2)
   40a1c:	10803fcc 	andi	r2,r2,255
   40a20:	10800c0c 	andi	r2,r2,48
   40a24:	1000031e 	bne	r2,zero,40a34 <Fat_FileBrowseNext+0x24c>
                            bError = TRUE;
   40a28:	00800044 	movi	r2,1
   40a2c:	e0bff715 	stw	r2,-36(fp)
   40a30:	00000906 	br	40a58 <Fat_FileBrowseNext+0x270>
                        else    
                            bFind = TRUE;
   40a34:	00800044 	movi	r2,1
   40a38:	e0bff615 	stw	r2,-40(fp)
   40a3c:	00000606 	br	40a58 <Fat_FileBrowseNext+0x270>
                    }else{
                        fatComposeShortFilename(pDir, pFileContext->szName);
   40a40:	e0bfff17 	ldw	r2,-4(fp)
   40a44:	e13ffb17 	ldw	r4,-20(fp)
   40a48:	100b883a 	mov	r5,r2
   40a4c:	0040d180 	call	40d18 <fatComposeShortFilename>
                        bFind = TRUE;
   40a50:	00800044 	movi	r2,1
   40a54:	e0bff615 	stw	r2,-40(fp)
                    }
                    
                    if (bFind){
   40a58:	e0bff617 	ldw	r2,-40(fp)
   40a5c:	10006126 	beq	r2,zero,40be4 <Fat_FileBrowseNext+0x3fc>
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
   40a60:	e0bfff17 	ldw	r2,-4(fp)
   40a64:	e0fff817 	ldw	r3,-32(fp)
   40a68:	10c04015 	stw	r3,256(r2)
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
   40a6c:	e0bffb17 	ldw	r2,-20(fp)
   40a70:	108002c3 	ldbu	r2,11(r2)
   40a74:	10803fcc 	andi	r2,r2,255
   40a78:	1080080c 	andi	r2,r2,32
   40a7c:	1004c03a 	cmpne	r2,r2,zero
   40a80:	10c03fcc 	andi	r3,r2,255
   40a84:	e0bfff17 	ldw	r2,-4(fp)
   40a88:	10c04115 	stw	r3,260(r2)
                        pFileContext->bDirectory = (pDir->Attribute & ATTR_DIRECTORY)?TRUE:FALSE;
   40a8c:	e0bffb17 	ldw	r2,-20(fp)
   40a90:	108002c3 	ldbu	r2,11(r2)
   40a94:	10803fcc 	andi	r2,r2,255
   40a98:	1080040c 	andi	r2,r2,16
   40a9c:	1004c03a 	cmpne	r2,r2,zero
   40aa0:	10c03fcc 	andi	r3,r2,255
   40aa4:	e0bfff17 	ldw	r2,-4(fp)
   40aa8:	10c04215 	stw	r3,264(r2)
                        pFileContext->bVolume = (pDir->Attribute & ATTR_VOLUME_ID)?TRUE:FALSE;
   40aac:	e0bffb17 	ldw	r2,-20(fp)
   40ab0:	108002c3 	ldbu	r2,11(r2)
   40ab4:	10803fcc 	andi	r2,r2,255
   40ab8:	1080020c 	andi	r2,r2,8
   40abc:	1004c03a 	cmpne	r2,r2,zero
   40ac0:	10c03fcc 	andi	r3,r2,255
   40ac4:	e0bfff17 	ldw	r2,-4(fp)
   40ac8:	10c04315 	stw	r3,268(r2)
                        pFileContext->DirEntryIndex = pFatBrowseHandle->DirectoryIndex; // add in v2.0.0
   40acc:	e0bffe17 	ldw	r2,-8(fp)
   40ad0:	10c00017 	ldw	r3,0(r2)
   40ad4:	e0bfff17 	ldw	r2,-4(fp)
   40ad8:	10c04415 	stw	r3,272(r2)
                        
                        //
                        pFileContext->Attribute = pDir->Attribute;
   40adc:	e0bffb17 	ldw	r2,-20(fp)
   40ae0:	10c002c3 	ldbu	r3,11(r2)
   40ae4:	e0bfff17 	ldw	r2,-4(fp)
   40ae8:	10c04505 	stb	r3,276(r2)
                        pFileContext->CreateTime = pDir->CreateTime;
   40aec:	e0bffb17 	ldw	r2,-20(fp)
   40af0:	10c00383 	ldbu	r3,14(r2)
   40af4:	108003c3 	ldbu	r2,15(r2)
   40af8:	1004923a 	slli	r2,r2,8
   40afc:	10c4b03a 	or	r2,r2,r3
   40b00:	1007883a 	mov	r3,r2
   40b04:	e0bfff17 	ldw	r2,-4(fp)
   40b08:	10c0458d 	sth	r3,278(r2)
                        pFileContext->LastAccessDate = pDir->LastAccessDate;
   40b0c:	e0bffb17 	ldw	r2,-20(fp)
   40b10:	10c00483 	ldbu	r3,18(r2)
   40b14:	108004c3 	ldbu	r2,19(r2)
   40b18:	1004923a 	slli	r2,r2,8
   40b1c:	10c4b03a 	or	r2,r2,r3
   40b20:	1007883a 	mov	r3,r2
   40b24:	e0bfff17 	ldw	r2,-4(fp)
   40b28:	10c0468d 	sth	r3,282(r2)
                        pFileContext->FirstLogicalClusterHi = pDir->FirstLogicalClusterHi;
   40b2c:	e0bffb17 	ldw	r2,-20(fp)
   40b30:	10c00503 	ldbu	r3,20(r2)
   40b34:	10800543 	ldbu	r2,21(r2)
   40b38:	1004923a 	slli	r2,r2,8
   40b3c:	10c4b03a 	or	r2,r2,r3
   40b40:	1007883a 	mov	r3,r2
   40b44:	e0bfff17 	ldw	r2,-4(fp)
   40b48:	10c0470d 	sth	r3,284(r2)
                        pFileContext->LastWriteTime = pDir->LastWriteTime;
   40b4c:	e0bffb17 	ldw	r2,-20(fp)
   40b50:	10c00583 	ldbu	r3,22(r2)
   40b54:	108005c3 	ldbu	r2,23(r2)
   40b58:	1004923a 	slli	r2,r2,8
   40b5c:	10c4b03a 	or	r2,r2,r3
   40b60:	1007883a 	mov	r3,r2
   40b64:	e0bfff17 	ldw	r2,-4(fp)
   40b68:	10c0478d 	sth	r3,286(r2)
                        pFileContext->LastWriteDate = pDir->LastWriteDate;
   40b6c:	e0bffb17 	ldw	r2,-20(fp)
   40b70:	10c00603 	ldbu	r3,24(r2)
   40b74:	10800643 	ldbu	r2,25(r2)
   40b78:	1004923a 	slli	r2,r2,8
   40b7c:	10c4b03a 	or	r2,r2,r3
   40b80:	1007883a 	mov	r3,r2
   40b84:	e0bfff17 	ldw	r2,-4(fp)
   40b88:	10c0480d 	sth	r3,288(r2)
                        pFileContext->FirstLogicalCluster = pDir->FirstLogicalCluster;
   40b8c:	e0bffb17 	ldw	r2,-20(fp)
   40b90:	10c00683 	ldbu	r3,26(r2)
   40b94:	108006c3 	ldbu	r2,27(r2)
   40b98:	1004923a 	slli	r2,r2,8
   40b9c:	10c4b03a 	or	r2,r2,r3
   40ba0:	1007883a 	mov	r3,r2
   40ba4:	e0bfff17 	ldw	r2,-4(fp)
   40ba8:	10c0488d 	sth	r3,290(r2)
                        pFileContext->FileSize = pDir->FileSize;
   40bac:	e0bffb17 	ldw	r2,-20(fp)
   40bb0:	10c00703 	ldbu	r3,28(r2)
   40bb4:	11000743 	ldbu	r4,29(r2)
   40bb8:	2008923a 	slli	r4,r4,8
   40bbc:	20c6b03a 	or	r3,r4,r3
   40bc0:	11000783 	ldbu	r4,30(r2)
   40bc4:	2008943a 	slli	r4,r4,16
   40bc8:	20c6b03a 	or	r3,r4,r3
   40bcc:	108007c3 	ldbu	r2,31(r2)
   40bd0:	1004963a 	slli	r2,r2,24
   40bd4:	10c4b03a 	or	r2,r2,r3
   40bd8:	1007883a 	mov	r3,r2
   40bdc:	e0bfff17 	ldw	r2,-4(fp)
   40be0:	10c04915 	stw	r3,292(r2)
                    }                        
                }                    
            }                
        }            
    }while (!bFind && !fatIsLastDir(pDir) && !bError);
   40be4:	e0bff617 	ldw	r2,-40(fp)
   40be8:	1000051e 	bne	r2,zero,40c00 <Fat_FileBrowseNext+0x418>
   40bec:	e13ffb17 	ldw	r4,-20(fp)
   40bf0:	00420f40 	call	420f4 <fatIsLastDir>
   40bf4:	1000021e 	bne	r2,zero,40c00 <Fat_FileBrowseNext+0x418>
   40bf8:	e0bff717 	ldw	r2,-36(fp)
   40bfc:	103f1026 	beq	r2,zero,40840 <__alt_data_end+0xfffdbe50>
    
    return bFind;
   40c00:	e0bff617 	ldw	r2,-40(fp)
    
}
   40c04:	e037883a 	mov	sp,fp
   40c08:	dfc00117 	ldw	ra,4(sp)
   40c0c:	df000017 	ldw	fp,0(sp)
   40c10:	dec00204 	addi	sp,sp,8
   40c14:	f800283a 	ret

00040c18 <Fat_FileCount>:


unsigned int Fat_FileCount(FAT_HANDLE Fat){
   40c18:	deffb004 	addi	sp,sp,-320
   40c1c:	dfc04f15 	stw	ra,316(sp)
   40c20:	df004e15 	stw	fp,312(sp)
   40c24:	df004e04 	addi	fp,sp,312
   40c28:	e13fff15 	stw	r4,-4(fp)
    unsigned int nCount = 0;
   40c2c:	e03fb215 	stw	zero,-312(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
   40c30:	e0bfb304 	addi	r2,fp,-308
   40c34:	e13fff17 	ldw	r4,-4(fp)
   40c38:	100b883a 	mov	r5,r2
   40c3c:	004077c0 	call	4077c <Fat_FileBrowseBegin>
   40c40:	10000a26 	beq	r2,zero,40c6c <Fat_FileCount+0x54>
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
   40c44:	00000306 	br	40c54 <Fat_FileCount+0x3c>
            nCount++;
   40c48:	e0bfb217 	ldw	r2,-312(fp)
   40c4c:	10800044 	addi	r2,r2,1
   40c50:	e0bfb215 	stw	r2,-312(fp)
    unsigned int nCount = 0;
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
   40c54:	e0ffb304 	addi	r3,fp,-308
   40c58:	e0bfb504 	addi	r2,fp,-300
   40c5c:	1809883a 	mov	r4,r3
   40c60:	100b883a 	mov	r5,r2
   40c64:	00407e80 	call	407e8 <Fat_FileBrowseNext>
   40c68:	103ff71e 	bne	r2,zero,40c48 <__alt_data_end+0xfffdc258>
            nCount++;
    }
    
    return nCount;
   40c6c:	e0bfb217 	ldw	r2,-312(fp)
}
   40c70:	e037883a 	mov	sp,fp
   40c74:	dfc00117 	ldw	ra,4(sp)
   40c78:	df000017 	ldw	fp,0(sp)
   40c7c:	dec00204 	addi	sp,sp,8
   40c80:	f800283a 	ret

00040c84 <fatSameLongFilename>:

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
   40c84:	defffc04 	addi	sp,sp,-16
   40c88:	df000315 	stw	fp,12(sp)
   40c8c:	df000304 	addi	fp,sp,12
   40c90:	e13ffe15 	stw	r4,-8(fp)
   40c94:	e17fff15 	stw	r5,-4(fp)
    bool bSame = TRUE;
   40c98:	00800044 	movi	r2,1
   40c9c:	e0bffd15 	stw	r2,-12(fp)
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
   40ca0:	00000e06 	br	40cdc <fatSameLongFilename+0x58>
        if (*p1 != *p2){
   40ca4:	e0bffe17 	ldw	r2,-8(fp)
   40ca8:	10c0000b 	ldhu	r3,0(r2)
   40cac:	e0bfff17 	ldw	r2,-4(fp)
   40cb0:	1080000b 	ldhu	r2,0(r2)
   40cb4:	18ffffcc 	andi	r3,r3,65535
   40cb8:	10bfffcc 	andi	r2,r2,65535
   40cbc:	18800126 	beq	r3,r2,40cc4 <fatSameLongFilename+0x40>
            bSame = FALSE;
   40cc0:	e03ffd15 	stw	zero,-12(fp)
        }
        p1++;
   40cc4:	e0bffe17 	ldw	r2,-8(fp)
   40cc8:	10800084 	addi	r2,r2,2
   40ccc:	e0bffe15 	stw	r2,-8(fp)
        p2++;
   40cd0:	e0bfff17 	ldw	r2,-4(fp)
   40cd4:	10800084 	addi	r2,r2,2
   40cd8:	e0bfff15 	stw	r2,-4(fp)
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
   40cdc:	e0bffd17 	ldw	r2,-12(fp)
   40ce0:	10000826 	beq	r2,zero,40d04 <fatSameLongFilename+0x80>
   40ce4:	e0bffe17 	ldw	r2,-8(fp)
   40ce8:	1080000b 	ldhu	r2,0(r2)
   40cec:	10bfffcc 	andi	r2,r2,65535
   40cf0:	103fec1e 	bne	r2,zero,40ca4 <__alt_data_end+0xfffdc2b4>
   40cf4:	e0bfff17 	ldw	r2,-4(fp)
   40cf8:	1080000b 	ldhu	r2,0(r2)
   40cfc:	10bfffcc 	andi	r2,r2,65535
   40d00:	103fe81e 	bne	r2,zero,40ca4 <__alt_data_end+0xfffdc2b4>
        p1++;
        p2++;
        
    }
    
    return bSame;
   40d04:	e0bffd17 	ldw	r2,-12(fp)
}
   40d08:	e037883a 	mov	sp,fp
   40d0c:	df000017 	ldw	fp,0(sp)
   40d10:	dec00104 	addi	sp,sp,4
   40d14:	f800283a 	ret

00040d18 <fatComposeShortFilename>:


void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
   40d18:	defffb04 	addi	sp,sp,-20
   40d1c:	df000415 	stw	fp,16(sp)
   40d20:	df000404 	addi	fp,sp,16
   40d24:	e13ffe15 	stw	r4,-8(fp)
   40d28:	e17fff15 	stw	r5,-4(fp)
    int i,nPos=0;
   40d2c:	e03ffd15 	stw	zero,-12(fp)
    
    i=0;
   40d30:	e03ffc15 	stw	zero,-16(fp)
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
   40d34:	00000d06 	br	40d6c <fatComposeShortFilename+0x54>
        szFilename[nPos++] = pDir->Name[i++];
   40d38:	e0bffd17 	ldw	r2,-12(fp)
   40d3c:	10c00044 	addi	r3,r2,1
   40d40:	e0fffd15 	stw	r3,-12(fp)
   40d44:	1007883a 	mov	r3,r2
   40d48:	e0bfff17 	ldw	r2,-4(fp)
   40d4c:	10c7883a 	add	r3,r2,r3
   40d50:	e0bffc17 	ldw	r2,-16(fp)
   40d54:	11000044 	addi	r4,r2,1
   40d58:	e13ffc15 	stw	r4,-16(fp)
   40d5c:	e13ffe17 	ldw	r4,-8(fp)
   40d60:	2085883a 	add	r2,r4,r2
   40d64:	10800003 	ldbu	r2,0(r2)
   40d68:	18800005 	stb	r2,0(r3)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
   40d6c:	e0bffc17 	ldw	r2,-16(fp)
   40d70:	10800208 	cmpgei	r2,r2,8
   40d74:	1000111e 	bne	r2,zero,40dbc <fatComposeShortFilename+0xa4>
   40d78:	e0fffe17 	ldw	r3,-8(fp)
   40d7c:	e0bffc17 	ldw	r2,-16(fp)
   40d80:	1885883a 	add	r2,r3,r2
   40d84:	10800003 	ldbu	r2,0(r2)
   40d88:	10803fcc 	andi	r2,r2,255
   40d8c:	1080201c 	xori	r2,r2,128
   40d90:	10bfe004 	addi	r2,r2,-128
   40d94:	10000926 	beq	r2,zero,40dbc <fatComposeShortFilename+0xa4>
   40d98:	e0fffe17 	ldw	r3,-8(fp)
   40d9c:	e0bffc17 	ldw	r2,-16(fp)
   40da0:	1885883a 	add	r2,r3,r2
   40da4:	10800003 	ldbu	r2,0(r2)
   40da8:	10803fcc 	andi	r2,r2,255
   40dac:	1080201c 	xori	r2,r2,128
   40db0:	10bfe004 	addi	r2,r2,-128
   40db4:	10800818 	cmpnei	r2,r2,32
   40db8:	103fdf1e 	bne	r2,zero,40d38 <__alt_data_end+0xfffdc348>
        szFilename[nPos++] = pDir->Name[i++];
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
   40dbc:	e0bffe17 	ldw	r2,-8(fp)
   40dc0:	108002c3 	ldbu	r2,11(r2)
   40dc4:	10803fcc 	andi	r2,r2,255
   40dc8:	10800c0c 	andi	r2,r2,48
   40dcc:	10003326 	beq	r2,zero,40e9c <fatComposeShortFilename+0x184>
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
   40dd0:	e0bffe17 	ldw	r2,-8(fp)
   40dd4:	108002c3 	ldbu	r2,11(r2)
   40dd8:	10803fcc 	andi	r2,r2,255
   40ddc:	10800c0c 	andi	r2,r2,48
   40de0:	10000826 	beq	r2,zero,40e04 <fatComposeShortFilename+0xec>
            szFilename[nPos++] = '.';   
   40de4:	e0bffd17 	ldw	r2,-12(fp)
   40de8:	10c00044 	addi	r3,r2,1
   40dec:	e0fffd15 	stw	r3,-12(fp)
   40df0:	1007883a 	mov	r3,r2
   40df4:	e0bfff17 	ldw	r2,-4(fp)
   40df8:	10c5883a 	add	r2,r2,r3
   40dfc:	00c00b84 	movi	r3,46
   40e00:	10c00005 	stb	r3,0(r2)
        i=0;
   40e04:	e03ffc15 	stw	zero,-16(fp)
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
   40e08:	00000e06 	br	40e44 <fatComposeShortFilename+0x12c>
            szFilename[nPos++] = pDir->Extension[i++];
   40e0c:	e0bffd17 	ldw	r2,-12(fp)
   40e10:	10c00044 	addi	r3,r2,1
   40e14:	e0fffd15 	stw	r3,-12(fp)
   40e18:	1007883a 	mov	r3,r2
   40e1c:	e0bfff17 	ldw	r2,-4(fp)
   40e20:	10c7883a 	add	r3,r2,r3
   40e24:	e0bffc17 	ldw	r2,-16(fp)
   40e28:	11000044 	addi	r4,r2,1
   40e2c:	e13ffc15 	stw	r4,-16(fp)
   40e30:	e13ffe17 	ldw	r4,-8(fp)
   40e34:	2085883a 	add	r2,r4,r2
   40e38:	10800204 	addi	r2,r2,8
   40e3c:	10800003 	ldbu	r2,0(r2)
   40e40:	18800005 	stb	r2,0(r3)
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
   40e44:	e0bffc17 	ldw	r2,-16(fp)
   40e48:	108000c8 	cmpgei	r2,r2,3
   40e4c:	1000131e 	bne	r2,zero,40e9c <fatComposeShortFilename+0x184>
   40e50:	e0fffe17 	ldw	r3,-8(fp)
   40e54:	e0bffc17 	ldw	r2,-16(fp)
   40e58:	1885883a 	add	r2,r3,r2
   40e5c:	10800204 	addi	r2,r2,8
   40e60:	10800003 	ldbu	r2,0(r2)
   40e64:	10803fcc 	andi	r2,r2,255
   40e68:	1080201c 	xori	r2,r2,128
   40e6c:	10bfe004 	addi	r2,r2,-128
   40e70:	10000a26 	beq	r2,zero,40e9c <fatComposeShortFilename+0x184>
   40e74:	e0fffe17 	ldw	r3,-8(fp)
   40e78:	e0bffc17 	ldw	r2,-16(fp)
   40e7c:	1885883a 	add	r2,r3,r2
   40e80:	10800204 	addi	r2,r2,8
   40e84:	10800003 	ldbu	r2,0(r2)
   40e88:	10803fcc 	andi	r2,r2,255
   40e8c:	1080201c 	xori	r2,r2,128
   40e90:	10bfe004 	addi	r2,r2,-128
   40e94:	10800818 	cmpnei	r2,r2,32
   40e98:	103fdc1e 	bne	r2,zero,40e0c <__alt_data_end+0xfffdc41c>
            szFilename[nPos++] = pDir->Extension[i++];
    }            
    szFilename[nPos++] = 0;
   40e9c:	e0bffd17 	ldw	r2,-12(fp)
   40ea0:	10c00044 	addi	r3,r2,1
   40ea4:	e0fffd15 	stw	r3,-12(fp)
   40ea8:	1007883a 	mov	r3,r2
   40eac:	e0bfff17 	ldw	r2,-4(fp)
   40eb0:	10c5883a 	add	r2,r2,r3
   40eb4:	10000005 	stb	zero,0(r2)
}
   40eb8:	e037883a 	mov	sp,fp
   40ebc:	df000017 	ldw	fp,0(sp)
   40ec0:	dec00104 	addi	sp,sp,4
   40ec4:	f800283a 	ret

00040ec8 <Fat_FileExist>:





bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
   40ec8:	deffaf04 	addi	sp,sp,-324
   40ecc:	dfc05015 	stw	ra,320(sp)
   40ed0:	df004f15 	stw	fp,316(sp)
   40ed4:	df004f04 	addi	fp,sp,316
   40ed8:	e13ffe15 	stw	r4,-8(fp)
   40edc:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
   40ee0:	e03fb115 	stw	zero,-316(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
   40ee4:	e0bfb204 	addi	r2,fp,-312
   40ee8:	e13ffe17 	ldw	r4,-8(fp)
   40eec:	100b883a 	mov	r5,r2
   40ef0:	004077c0 	call	4077c <Fat_FileBrowseBegin>
   40ef4:	10001a26 	beq	r2,zero,40f60 <Fat_FileExist+0x98>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
   40ef8:	00000f06 	br	40f38 <Fat_FileExist+0x70>
            if (FileContext.bLongFilename){
   40efc:	e0bff417 	ldw	r2,-48(fp)
   40f00:	10000626 	beq	r2,zero,40f1c <Fat_FileExist+0x54>
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
   40f04:	e0bfb404 	addi	r2,fp,-304
   40f08:	1009883a 	mov	r4,r2
   40f0c:	e17fff17 	ldw	r5,-4(fp)
   40f10:	0040c840 	call	40c84 <fatSameLongFilename>
   40f14:	e0bfb115 	stw	r2,-316(fp)
   40f18:	00000706 	br	40f38 <Fat_FileExist+0x70>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
   40f1c:	e0bfb404 	addi	r2,fp,-304
   40f20:	1009883a 	mov	r4,r2
   40f24:	e17fff17 	ldw	r5,-4(fp)
   40f28:	004761c0 	call	4761c <strcasecmp>
   40f2c:	1000021e 	bne	r2,zero,40f38 <Fat_FileExist+0x70>
                    bFind = TRUE;
   40f30:	00800044 	movi	r2,1
   40f34:	e0bfb115 	stw	r2,-316(fp)
bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
   40f38:	e0bfb117 	ldw	r2,-316(fp)
   40f3c:	1000061e 	bne	r2,zero,40f58 <Fat_FileExist+0x90>
   40f40:	e0ffb204 	addi	r3,fp,-312
   40f44:	e0bfb404 	addi	r2,fp,-304
   40f48:	1809883a 	mov	r4,r3
   40f4c:	100b883a 	mov	r5,r2
   40f50:	00407e80 	call	407e8 <Fat_FileBrowseNext>
   40f54:	103fe91e 	bne	r2,zero,40efc <__alt_data_end+0xfffdc50c>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
                    bFind = TRUE;
            }    
        } // while 
        Fat_FileClose(Fat); 
   40f58:	e13ffe17 	ldw	r4,-8(fp)
   40f5c:	00417600 	call	41760 <Fat_FileClose>
    }
    return bFind;            
   40f60:	e0bfb117 	ldw	r2,-316(fp)
}    
   40f64:	e037883a 	mov	sp,fp
   40f68:	dfc00117 	ldw	ra,4(sp)
   40f6c:	df000017 	ldw	fp,0(sp)
   40f70:	dec00204 	addi	sp,sp,8
   40f74:	f800283a 	ret

00040f78 <Fat_FileOpen>:
 
// File Access
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
   40f78:	deff6b04 	addi	sp,sp,-596
   40f7c:	dfc09415 	stw	ra,592(sp)
   40f80:	df009315 	stw	fp,588(sp)
   40f84:	df009304 	addi	fp,sp,588
   40f88:	e13ffe15 	stw	r4,-8(fp)
   40f8c:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
   40f90:	e03f6d15 	stw	zero,-588(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    FAT_FILE_INFO *pFile = 0;
   40f94:	e03f6e15 	stw	zero,-584(fp)
    int nPos = 0;
   40f98:	e03f6f15 	stw	zero,-580(fp)
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
   40f9c:	e0bf7204 	addi	r2,fp,-568
   40fa0:	e13ffe17 	ldw	r4,-8(fp)
   40fa4:	100b883a 	mov	r5,r2
   40fa8:	004077c0 	call	4077c <Fat_FileBrowseBegin>
   40fac:	10007426 	beq	r2,zero,41180 <Fat_FileOpen+0x208>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
   40fb0:	00004c06 	br	410e4 <Fat_FileOpen+0x16c>
            if (FileContext.bLongFilename){
   40fb4:	e0bfb417 	ldw	r2,-304(fp)
   40fb8:	10004326 	beq	r2,zero,410c8 <Fat_FileOpen+0x150>
                //bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
                nPos = 0;
   40fbc:	e03f6f15 	stw	zero,-580(fp)
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
   40fc0:	e0bf7404 	addi	r2,fp,-560
   40fc4:	e0bf7015 	stw	r2,-576(fp)
                pData8 = FileContext.szName;
   40fc8:	e0bf7404 	addi	r2,fp,-560
   40fcc:	e0bf7115 	stw	r2,-572(fp)
                while(*pData16){
   40fd0:	00002d06 	br	41088 <Fat_FileOpen+0x110>
                    if (*pData8 && *pData8 != ' ')
   40fd4:	e0bf7117 	ldw	r2,-572(fp)
   40fd8:	10800003 	ldbu	r2,0(r2)
   40fdc:	10803fcc 	andi	r2,r2,255
   40fe0:	10000e26 	beq	r2,zero,4101c <Fat_FileOpen+0xa4>
   40fe4:	e0bf7117 	ldw	r2,-572(fp)
   40fe8:	10800003 	ldbu	r2,0(r2)
   40fec:	10803fcc 	andi	r2,r2,255
   40ff0:	10800820 	cmpeqi	r2,r2,32
   40ff4:	1000091e 	bne	r2,zero,4101c <Fat_FileOpen+0xa4>
                        szWaveFilename[nPos++] = *pData8;
   40ff8:	e0bf6f17 	ldw	r2,-580(fp)
   40ffc:	10c00044 	addi	r3,r2,1
   41000:	e0ff6f15 	stw	r3,-580(fp)
   41004:	e0ff7117 	ldw	r3,-572(fp)
   41008:	18c00003 	ldbu	r3,0(r3)
   4100c:	1809883a 	mov	r4,r3
   41010:	e0ffbe04 	addi	r3,fp,-264
   41014:	1885883a 	add	r2,r3,r2
   41018:	11000005 	stb	r4,0(r2)
                    pData8++;
   4101c:	e0bf7117 	ldw	r2,-572(fp)
   41020:	10800044 	addi	r2,r2,1
   41024:	e0bf7115 	stw	r2,-572(fp)
                    if (*pData8 && *pData8 != ' ')
   41028:	e0bf7117 	ldw	r2,-572(fp)
   4102c:	10800003 	ldbu	r2,0(r2)
   41030:	10803fcc 	andi	r2,r2,255
   41034:	10000e26 	beq	r2,zero,41070 <Fat_FileOpen+0xf8>
   41038:	e0bf7117 	ldw	r2,-572(fp)
   4103c:	10800003 	ldbu	r2,0(r2)
   41040:	10803fcc 	andi	r2,r2,255
   41044:	10800820 	cmpeqi	r2,r2,32
   41048:	1000091e 	bne	r2,zero,41070 <Fat_FileOpen+0xf8>
                        szWaveFilename[nPos++] = *pData8;
   4104c:	e0bf6f17 	ldw	r2,-580(fp)
   41050:	10c00044 	addi	r3,r2,1
   41054:	e0ff6f15 	stw	r3,-580(fp)
   41058:	e0ff7117 	ldw	r3,-572(fp)
   4105c:	18c00003 	ldbu	r3,0(r3)
   41060:	1809883a 	mov	r4,r3
   41064:	e0ffbe04 	addi	r3,fp,-264
   41068:	1885883a 	add	r2,r3,r2
   4106c:	11000005 	stb	r4,0(r2)
                    pData8++;                    
   41070:	e0bf7117 	ldw	r2,-572(fp)
   41074:	10800044 	addi	r2,r2,1
   41078:	e0bf7115 	stw	r2,-572(fp)
                    //    
                    pData16++;
   4107c:	e0bf7017 	ldw	r2,-576(fp)
   41080:	10800084 	addi	r2,r2,2
   41084:	e0bf7015 	stw	r2,-576(fp)
                nPos = 0;
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                while(*pData16){
   41088:	e0bf7017 	ldw	r2,-576(fp)
   4108c:	1080000b 	ldhu	r2,0(r2)
   41090:	10bfffcc 	andi	r2,r2,65535
   41094:	103fcf1e 	bne	r2,zero,40fd4 <__alt_data_end+0xfffdc5e4>
                        szWaveFilename[nPos++] = *pData8;
                    pData8++;                    
                    //    
                    pData16++;
                }
                szWaveFilename[nPos] = 0;
   41098:	e0ffbe04 	addi	r3,fp,-264
   4109c:	e0bf6f17 	ldw	r2,-580(fp)
   410a0:	1885883a 	add	r2,r3,r2
   410a4:	10000005 	stb	zero,0(r2)
                
                if(strcmp(pFilename,szWaveFilename) == 0)
   410a8:	e0bfbe04 	addi	r2,fp,-264
   410ac:	e13fff17 	ldw	r4,-4(fp)
   410b0:	100b883a 	mov	r5,r2
   410b4:	004768c0 	call	4768c <strcmp>
   410b8:	1000021e 	bne	r2,zero,410c4 <Fat_FileOpen+0x14c>
                    bFind = TRUE;
   410bc:	00800044 	movi	r2,1
   410c0:	e0bf6d15 	stw	r2,-588(fp)
   410c4:	00000706 	br	410e4 <Fat_FileOpen+0x16c>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
   410c8:	e0bf7404 	addi	r2,fp,-560
   410cc:	1009883a 	mov	r4,r2
   410d0:	e17fff17 	ldw	r5,-4(fp)
   410d4:	004761c0 	call	4761c <strcasecmp>
   410d8:	1000021e 	bne	r2,zero,410e4 <Fat_FileOpen+0x16c>
                    bFind = TRUE;
   410dc:	00800044 	movi	r2,1
   410e0:	e0bf6d15 	stw	r2,-588(fp)
    FAT_FILE_INFO *pFile = 0;
    int nPos = 0;
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
   410e4:	e0bf6d17 	ldw	r2,-588(fp)
   410e8:	1000061e 	bne	r2,zero,41104 <Fat_FileOpen+0x18c>
   410ec:	e0ff7204 	addi	r3,fp,-568
   410f0:	e0bf7404 	addi	r2,fp,-560
   410f4:	1809883a 	mov	r4,r3
   410f8:	100b883a 	mov	r5,r2
   410fc:	00407e80 	call	407e8 <Fat_FileBrowseNext>
   41100:	103fac1e 	bne	r2,zero,40fb4 <__alt_data_end+0xfffdc5c4>
                if (strcmpi(FileContext.szName, pFilename) == 0)
                    bFind = TRUE;
            }    
        } // while 
        
        if (bFind){
   41104:	e0bf6d17 	ldw	r2,-588(fp)
   41108:	10001d26 	beq	r2,zero,41180 <Fat_FileOpen+0x208>
            pFile = malloc(sizeof(FAT_FILE_INFO));
   4110c:	01005004 	movi	r4,320
   41110:	00469840 	call	46984 <malloc>
   41114:	e0bf6e15 	stw	r2,-584(fp)
            if (pFile){
   41118:	e0bf6e17 	ldw	r2,-584(fp)
   4111c:	10001826 	beq	r2,zero,41180 <Fat_FileOpen+0x208>
                pFile->OpenAttribute = FILE_OPEN_READ; 
   41120:	e0bf6e17 	ldw	r2,-584(fp)
   41124:	00c00044 	movi	r3,1
   41128:	10c00115 	stw	r3,4(r2)
                pFile->SeekPos = 0;
   4112c:	e0bf6e17 	ldw	r2,-584(fp)
   41130:	10000215 	stw	zero,8(r2)
                pFile->Directory = FileContext;
   41134:	e0bf6e17 	ldw	r2,-584(fp)
   41138:	11000504 	addi	r4,r2,20
   4113c:	e0ff7404 	addi	r3,fp,-560
   41140:	00804a04 	movi	r2,296
   41144:	180b883a 	mov	r5,r3
   41148:	100d883a 	mov	r6,r2
   4114c:	00471540 	call	47154 <memcpy>
                pFile->IsOpened = TRUE;
   41150:	e0bf6e17 	ldw	r2,-584(fp)
   41154:	00c00044 	movi	r3,1
   41158:	10c00015 	stw	r3,0(r2)
                pFile->Cluster = FileContext.FirstLogicalCluster;
   4115c:	e0bfbc8b 	ldhu	r2,-270(fp)
   41160:	10ffffcc 	andi	r3,r2,65535
   41164:	e0bf6e17 	ldw	r2,-584(fp)
   41168:	10c00315 	stw	r3,12(r2)
                pFile->ClusterSeq = 0;
   4116c:	e0bf6e17 	ldw	r2,-584(fp)
   41170:	10000415 	stw	zero,16(r2)
                pFile->Fat = Fat;
   41174:	e0bf6e17 	ldw	r2,-584(fp)
   41178:	e0fffe17 	ldw	r3,-8(fp)
   4117c:	10c04f15 	stw	r3,316(r2)
            }    
        }    
    }  

    
    return (FAT_FILE_HANDLE)pFile;  
   41180:	e0bf6e17 	ldw	r2,-584(fp)
}
   41184:	e037883a 	mov	sp,fp
   41188:	dfc00117 	ldw	ra,4(sp)
   4118c:	df000017 	ldw	fp,0(sp)
   41190:	dec00204 	addi	sp,sp,8
   41194:	f800283a 	ret

00041198 <Fat_FileSize>:


unsigned int Fat_FileSize(FAT_FILE_HANDLE hFileHandle){
   41198:	defffd04 	addi	sp,sp,-12
   4119c:	df000215 	stw	fp,8(sp)
   411a0:	df000204 	addi	fp,sp,8
   411a4:	e13fff15 	stw	r4,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
   411a8:	e0bfff17 	ldw	r2,-4(fp)
   411ac:	e0bffe15 	stw	r2,-8(fp)
    if (f->IsOpened)
   411b0:	e0bffe17 	ldw	r2,-8(fp)
   411b4:	10800017 	ldw	r2,0(r2)
   411b8:	10000326 	beq	r2,zero,411c8 <Fat_FileSize+0x30>
        return f->Directory.FileSize;
   411bc:	e0bffe17 	ldw	r2,-8(fp)
   411c0:	10804e17 	ldw	r2,312(r2)
   411c4:	00000106 	br	411cc <Fat_FileSize+0x34>
    return 0;        
   411c8:	0005883a 	mov	r2,zero
}
   411cc:	e037883a 	mov	sp,fp
   411d0:	df000017 	ldw	fp,0(sp)
   411d4:	dec00104 	addi	sp,sp,4
   411d8:	f800283a 	ret

000411dc <Fat_FileRead>:


bool Fat_FileRead(FAT_FILE_HANDLE hFileHandle, void *pBuffer, const int nBufferSize){
   411dc:	deffef04 	addi	sp,sp,-68
   411e0:	dfc01015 	stw	ra,64(sp)
   411e4:	df000f15 	stw	fp,60(sp)
   411e8:	df000f04 	addi	fp,sp,60
   411ec:	e13ffd15 	stw	r4,-12(fp)
   411f0:	e17ffe15 	stw	r5,-8(fp)
   411f4:	e1bfff15 	stw	r6,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
   411f8:	e0bffd17 	ldw	r2,-12(fp)
   411fc:	e0bff915 	stw	r2,-28(fp)
    VOLUME_INFO *pVol;
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
   41200:	e03ff415 	stw	zero,-48(fp)
    int s;
    bool bSuccess= TRUE;
   41204:	00800044 	movi	r2,1
   41208:	e0bff715 	stw	r2,-36(fp)
    
    if (!f || !f->Fat)
   4120c:	e0bff917 	ldw	r2,-28(fp)
   41210:	10000326 	beq	r2,zero,41220 <Fat_FileRead+0x44>
   41214:	e0bff917 	ldw	r2,-28(fp)
   41218:	10804f17 	ldw	r2,316(r2)
   4121c:	1000021e 	bne	r2,zero,41228 <Fat_FileRead+0x4c>
        return FALSE;
   41220:	0005883a 	mov	r2,zero
   41224:	00010906 	br	4164c <Fat_FileRead+0x470>
    pVol = (VOLUME_INFO *)f->Fat;        
   41228:	e0bff917 	ldw	r2,-28(fp)
   4122c:	10804f17 	ldw	r2,316(r2)
   41230:	e0bffa15 	stw	r2,-24(fp)
    
    if (!f->IsOpened){
   41234:	e0bff917 	ldw	r2,-28(fp)
   41238:	10800017 	ldw	r2,0(r2)
   4123c:	1000021e 	bne	r2,zero,41248 <Fat_FileRead+0x6c>
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
        return bSuccess;
   41240:	e0bff717 	ldw	r2,-36(fp)
   41244:	00010106 	br	4164c <Fat_FileRead+0x470>
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
   41248:	e0bffa17 	ldw	r2,-24(fp)
   4124c:	10800c17 	ldw	r2,48(r2)
   41250:	e0bffb15 	stw	r2,-20(fp)
    Pos = f->SeekPos;
   41254:	e0bff917 	ldw	r2,-28(fp)
   41258:	10800217 	ldw	r2,8(r2)
   4125c:	e0bff115 	stw	r2,-60(fp)
    if (BytesPerCluster == 32768){
   41260:	e0fffb17 	ldw	r3,-20(fp)
   41264:	00a00014 	movui	r2,32768
   41268:	18800a1e 	bne	r3,r2,41294 <Fat_FileRead+0xb8>
        nClusterSeq = Pos >> 15;
   4126c:	e0bff117 	ldw	r2,-60(fp)
   41270:	1004d3fa 	srli	r2,r2,15
   41274:	e0bff515 	stw	r2,-44(fp)
        Pos -= (f->ClusterSeq << 15);
   41278:	e0bff917 	ldw	r2,-28(fp)
   4127c:	10800417 	ldw	r2,16(r2)
   41280:	100493fa 	slli	r2,r2,15
   41284:	e0fff117 	ldw	r3,-60(fp)
   41288:	1885c83a 	sub	r2,r3,r2
   4128c:	e0bff115 	stw	r2,-60(fp)
   41290:	00002706 	br	41330 <Fat_FileRead+0x154>
    }else if (BytesPerCluster == 16384){
   41294:	e0bffb17 	ldw	r2,-20(fp)
   41298:	10900018 	cmpnei	r2,r2,16384
   4129c:	10000a1e 	bne	r2,zero,412c8 <Fat_FileRead+0xec>
        nClusterSeq = Pos >> 14;
   412a0:	e0bff117 	ldw	r2,-60(fp)
   412a4:	1004d3ba 	srli	r2,r2,14
   412a8:	e0bff515 	stw	r2,-44(fp)
        Pos -= (f->ClusterSeq << 14);
   412ac:	e0bff917 	ldw	r2,-28(fp)
   412b0:	10800417 	ldw	r2,16(r2)
   412b4:	100493ba 	slli	r2,r2,14
   412b8:	e0fff117 	ldw	r3,-60(fp)
   412bc:	1885c83a 	sub	r2,r3,r2
   412c0:	e0bff115 	stw	r2,-60(fp)
   412c4:	00001a06 	br	41330 <Fat_FileRead+0x154>
    }else if (BytesPerCluster == 2048){
   412c8:	e0bffb17 	ldw	r2,-20(fp)
   412cc:	10820018 	cmpnei	r2,r2,2048
   412d0:	10000a1e 	bne	r2,zero,412fc <Fat_FileRead+0x120>
        nClusterSeq = Pos >> 11;
   412d4:	e0bff117 	ldw	r2,-60(fp)
   412d8:	1004d2fa 	srli	r2,r2,11
   412dc:	e0bff515 	stw	r2,-44(fp)
        Pos -= (f->ClusterSeq << 11);
   412e0:	e0bff917 	ldw	r2,-28(fp)
   412e4:	10800417 	ldw	r2,16(r2)
   412e8:	100492fa 	slli	r2,r2,11
   412ec:	e0fff117 	ldw	r3,-60(fp)
   412f0:	1885c83a 	sub	r2,r3,r2
   412f4:	e0bff115 	stw	r2,-60(fp)
   412f8:	00000d06 	br	41330 <Fat_FileRead+0x154>
    }else{        
        nClusterSeq = Pos/BytesPerCluster;
   412fc:	e13ff117 	ldw	r4,-60(fp)
   41300:	e17ffb17 	ldw	r5,-20(fp)
   41304:	00453100 	call	45310 <__udivsi3>
   41308:	e0bff515 	stw	r2,-44(fp)
        Pos -= f->ClusterSeq*BytesPerCluster;
   4130c:	e0bff917 	ldw	r2,-28(fp)
   41310:	10800417 	ldw	r2,16(r2)
   41314:	1009883a 	mov	r4,r2
   41318:	e17ffb17 	ldw	r5,-20(fp)
   4131c:	00453200 	call	45320 <__mulsi3>
   41320:	1007883a 	mov	r3,r2
   41324:	e0bff117 	ldw	r2,-60(fp)
   41328:	10c5c83a 	sub	r2,r2,r3
   4132c:	e0bff115 	stw	r2,-60(fp)
    }    
        
       
    Cluster = f->Cluster;
   41330:	e0bff917 	ldw	r2,-28(fp)
   41334:	10800317 	ldw	r2,12(r2)
   41338:	e0bff315 	stw	r2,-52(fp)
    if (nClusterSeq != f->ClusterSeq){
   4133c:	e0bff917 	ldw	r2,-28(fp)
   41340:	10c00417 	ldw	r3,16(r2)
   41344:	e0bff517 	ldw	r2,-44(fp)
   41348:	18801f26 	beq	r3,r2,413c8 <Fat_FileRead+0x1ec>
        Cluster = f->Cluster;  //11/20/2007, richard
   4134c:	e0bff917 	ldw	r2,-28(fp)
   41350:	10800317 	ldw	r2,12(r2)
   41354:	e0bff315 	stw	r2,-52(fp)
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
   41358:	00001606 	br	413b4 <Fat_FileRead+0x1d8>
            // go to next cluster
            NextCluster = fatNextCluster(pVol, Cluster); 
   4135c:	e13ffa17 	ldw	r4,-24(fp)
   41360:	e17ff317 	ldw	r5,-52(fp)
   41364:	0041b3c0 	call	41b3c <fatNextCluster>
   41368:	e0bffc15 	stw	r2,-16(fp)
            if (NextCluster == 0){
   4136c:	e0bffc17 	ldw	r2,-16(fp)
   41370:	1000021e 	bne	r2,zero,4137c <Fat_FileRead+0x1a0>
                bSuccess = FALSE;
   41374:	e03ff715 	stw	zero,-36(fp)
   41378:	00000206 	br	41384 <Fat_FileRead+0x1a8>
                FAT_DEBUG(("[FAT] Fat_FileRead, no next Cluster, current Cluster=%d\r\n", Cluster));
            }else{
                Cluster = NextCluster;
   4137c:	e0bffc17 	ldw	r2,-16(fp)
   41380:	e0bff315 	stw	r2,-52(fp)
            }        
            Pos -= BytesPerCluster;
   41384:	e0fff117 	ldw	r3,-60(fp)
   41388:	e0bffb17 	ldw	r2,-20(fp)
   4138c:	1885c83a 	sub	r2,r3,r2
   41390:	e0bff115 	stw	r2,-60(fp)
            f->Cluster = Cluster;
   41394:	e0bff917 	ldw	r2,-28(fp)
   41398:	e0fff317 	ldw	r3,-52(fp)
   4139c:	10c00315 	stw	r3,12(r2)
            f->ClusterSeq++; 
   413a0:	e0bff917 	ldw	r2,-28(fp)
   413a4:	10800417 	ldw	r2,16(r2)
   413a8:	10c00044 	addi	r3,r2,1
   413ac:	e0bff917 	ldw	r2,-28(fp)
   413b0:	10c00415 	stw	r3,16(r2)
       
    Cluster = f->Cluster;
    if (nClusterSeq != f->ClusterSeq){
        Cluster = f->Cluster;  //11/20/2007, richard
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
   413b4:	e0fff117 	ldw	r3,-60(fp)
   413b8:	e0bffb17 	ldw	r2,-20(fp)
   413bc:	18800236 	bltu	r3,r2,413c8 <Fat_FileRead+0x1ec>
   413c0:	e0bff717 	ldw	r2,-36(fp)
   413c4:	103fe51e 	bne	r2,zero,4135c <__alt_data_end+0xfffdc96c>
            f->ClusterSeq++; 
        }
    }            
    
    // reading
    while(nReadCount < nBufferSize && bSuccess){
   413c8:	00009206 	br	41614 <Fat_FileRead+0x438>
        if (pVol->BPB_SecPerCluster == 32)
   413cc:	e0bffa17 	ldw	r2,-24(fp)
   413d0:	10800717 	ldw	r2,28(r2)
   413d4:	10800818 	cmpnei	r2,r2,32
   413d8:	1000081e 	bne	r2,zero,413fc <Fat_FileRead+0x220>
            PhysicalSecter = ((Cluster-2) << 5) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
   413dc:	e0bff317 	ldw	r2,-52(fp)
   413e0:	10bfff84 	addi	r2,r2,-2
   413e4:	1006917a 	slli	r3,r2,5
   413e8:	e0bffa17 	ldw	r2,-24(fp)
   413ec:	10800f17 	ldw	r2,60(r2)
   413f0:	1885883a 	add	r2,r3,r2
   413f4:	e0bff215 	stw	r2,-56(fp)
   413f8:	00001806 	br	4145c <Fat_FileRead+0x280>
        else if (pVol->BPB_SecPerCluster == 64)
   413fc:	e0bffa17 	ldw	r2,-24(fp)
   41400:	10800717 	ldw	r2,28(r2)
   41404:	10801018 	cmpnei	r2,r2,64
   41408:	1000081e 	bne	r2,zero,4142c <Fat_FileRead+0x250>
            PhysicalSecter = ((Cluster-2) << 6) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
   4140c:	e0bff317 	ldw	r2,-52(fp)
   41410:	10bfff84 	addi	r2,r2,-2
   41414:	100691ba 	slli	r3,r2,6
   41418:	e0bffa17 	ldw	r2,-24(fp)
   4141c:	10800f17 	ldw	r2,60(r2)
   41420:	1885883a 	add	r2,r3,r2
   41424:	e0bff215 	stw	r2,-56(fp)
   41428:	00000c06 	br	4145c <Fat_FileRead+0x280>
        else
            PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
   4142c:	e0bff317 	ldw	r2,-52(fp)
   41430:	10ffff84 	addi	r3,r2,-2
   41434:	e0bffa17 	ldw	r2,-24(fp)
   41438:	10800717 	ldw	r2,28(r2)
   4143c:	1809883a 	mov	r4,r3
   41440:	100b883a 	mov	r5,r2
   41444:	00453200 	call	45320 <__mulsi3>
   41448:	1007883a 	mov	r3,r2
   4144c:	e0bffa17 	ldw	r2,-24(fp)
   41450:	10800f17 	ldw	r2,60(r2)
   41454:	1885883a 	add	r2,r3,r2
   41458:	e0bff215 	stw	r2,-56(fp)
        for(s=0;s<pVol->BPB_SecPerCluster && nReadCount < nBufferSize && bSuccess;s++){
   4145c:	e03ff615 	stw	zero,-40(fp)
   41460:	00004e06 	br	4159c <Fat_FileRead+0x3c0>
            if (Pos >= pVol->BPB_BytsPerSec){
   41464:	e0bffa17 	ldw	r2,-24(fp)
   41468:	10800617 	ldw	r2,24(r2)
   4146c:	e0fff117 	ldw	r3,-60(fp)
   41470:	18800636 	bltu	r3,r2,4148c <Fat_FileRead+0x2b0>
                Pos -= pVol->BPB_BytsPerSec;
   41474:	e0bffa17 	ldw	r2,-24(fp)
   41478:	10800617 	ldw	r2,24(r2)
   4147c:	e0fff117 	ldw	r3,-60(fp)
   41480:	1885c83a 	sub	r2,r3,r2
   41484:	e0bff115 	stw	r2,-60(fp)
   41488:	00003e06 	br	41584 <Fat_FileRead+0x3a8>
            }else{
                // read secter data
                bSuccess = fatReadSecter(pVol, PhysicalSecter);
   4148c:	e13ffa17 	ldw	r4,-24(fp)
   41490:	e17ff217 	ldw	r5,-56(fp)
   41494:	00424480 	call	42448 <fatReadSecter>
   41498:	e0bff715 	stw	r2,-36(fp)
                
                if (bSuccess){
   4149c:	e0bff717 	ldw	r2,-36(fp)
   414a0:	10003826 	beq	r2,zero,41584 <Fat_FileRead+0x3a8>
                    // copy data to user buffer
                
                    int nCopyCount;
                    nCopyCount = pVol->BPB_BytsPerSec;
   414a4:	e0bffa17 	ldw	r2,-24(fp)
   414a8:	10800617 	ldw	r2,24(r2)
   414ac:	e0bff815 	stw	r2,-32(fp)
                    if (Pos)
   414b0:	e0bff117 	ldw	r2,-60(fp)
   414b4:	10000426 	beq	r2,zero,414c8 <Fat_FileRead+0x2ec>
                        nCopyCount -= Pos;
   414b8:	e0fff817 	ldw	r3,-32(fp)
   414bc:	e0bff117 	ldw	r2,-60(fp)
   414c0:	1885c83a 	sub	r2,r3,r2
   414c4:	e0bff815 	stw	r2,-32(fp)
                    if (nCopyCount > (nBufferSize-nReadCount))
   414c8:	e0bff817 	ldw	r2,-32(fp)
   414cc:	e13fff17 	ldw	r4,-4(fp)
   414d0:	e0fff417 	ldw	r3,-48(fp)
   414d4:	20c7c83a 	sub	r3,r4,r3
   414d8:	1880042e 	bgeu	r3,r2,414ec <Fat_FileRead+0x310>
                        nCopyCount = nBufferSize-nReadCount;
   414dc:	e0ffff17 	ldw	r3,-4(fp)
   414e0:	e0bff417 	ldw	r2,-48(fp)
   414e4:	1885c83a 	sub	r2,r3,r2
   414e8:	e0bff815 	stw	r2,-32(fp)
                    if (nCopyCount == 512){
   414ec:	e0bff817 	ldw	r2,-32(fp)
   414f0:	10808018 	cmpnei	r2,r2,512
   414f4:	1000111e 	bne	r2,zero,4153c <Fat_FileRead+0x360>
                        memcpy((char *)pBuffer+nReadCount, pVol->Secter_Data, 512);
   414f8:	e0fffe17 	ldw	r3,-8(fp)
   414fc:	e0bff417 	ldw	r2,-48(fp)
   41500:	1887883a 	add	r3,r3,r2
   41504:	e0bffa17 	ldw	r2,-24(fp)
   41508:	10801004 	addi	r2,r2,64
   4150c:	1809883a 	mov	r4,r3
   41510:	100b883a 	mov	r5,r2
   41514:	01808004 	movi	r6,512
   41518:	00471540 	call	47154 <memcpy>
                        nReadCount += nCopyCount;
   4151c:	e0bff817 	ldw	r2,-32(fp)
   41520:	e0fff417 	ldw	r3,-48(fp)
   41524:	1885883a 	add	r2,r3,r2
   41528:	e0bff415 	stw	r2,-48(fp)
                        if (Pos > 0)
   4152c:	e0bff117 	ldw	r2,-60(fp)
   41530:	10001426 	beq	r2,zero,41584 <Fat_FileRead+0x3a8>
                            Pos = 0;
   41534:	e03ff115 	stw	zero,-60(fp)
   41538:	00001206 	br	41584 <Fat_FileRead+0x3a8>
                    }else{
                        memcpy((void *)((char *)pBuffer+nReadCount), pVol->Secter_Data+Pos,nCopyCount);
   4153c:	e0fffe17 	ldw	r3,-8(fp)
   41540:	e0bff417 	ldw	r2,-48(fp)
   41544:	1889883a 	add	r4,r3,r2
   41548:	e0bff117 	ldw	r2,-60(fp)
   4154c:	10801004 	addi	r2,r2,64
   41550:	e0fffa17 	ldw	r3,-24(fp)
   41554:	1887883a 	add	r3,r3,r2
   41558:	e0bff817 	ldw	r2,-32(fp)
   4155c:	180b883a 	mov	r5,r3
   41560:	100d883a 	mov	r6,r2
   41564:	00471540 	call	47154 <memcpy>
                        nReadCount += nCopyCount;
   41568:	e0bff817 	ldw	r2,-32(fp)
   4156c:	e0fff417 	ldw	r3,-48(fp)
   41570:	1885883a 	add	r2,r3,r2
   41574:	e0bff415 	stw	r2,-48(fp)
                        if (Pos > 0)
   41578:	e0bff117 	ldw	r2,-60(fp)
   4157c:	10000126 	beq	r2,zero,41584 <Fat_FileRead+0x3a8>
                            Pos = 0;
   41580:	e03ff115 	stw	zero,-60(fp)
                    }         
                }    // if bSuccess
                    
            }
            PhysicalSecter++;
   41584:	e0bff217 	ldw	r2,-56(fp)
   41588:	10800044 	addi	r2,r2,1
   4158c:	e0bff215 	stw	r2,-56(fp)
            PhysicalSecter = ((Cluster-2) << 5) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        else if (pVol->BPB_SecPerCluster == 64)
            PhysicalSecter = ((Cluster-2) << 6) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        else
            PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        for(s=0;s<pVol->BPB_SecPerCluster && nReadCount < nBufferSize && bSuccess;s++){
   41590:	e0bff617 	ldw	r2,-40(fp)
   41594:	10800044 	addi	r2,r2,1
   41598:	e0bff615 	stw	r2,-40(fp)
   4159c:	e0fff617 	ldw	r3,-40(fp)
   415a0:	e0bffa17 	ldw	r2,-24(fp)
   415a4:	10800717 	ldw	r2,28(r2)
   415a8:	1880052e 	bgeu	r3,r2,415c0 <Fat_FileRead+0x3e4>
   415ac:	e0bfff17 	ldw	r2,-4(fp)
   415b0:	e0fff417 	ldw	r3,-48(fp)
   415b4:	1880022e 	bgeu	r3,r2,415c0 <Fat_FileRead+0x3e4>
   415b8:	e0bff717 	ldw	r2,-36(fp)
   415bc:	103fa91e 	bne	r2,zero,41464 <__alt_data_end+0xfffdca74>
            }
            PhysicalSecter++;
        }    
            
        // next cluster
        if (nReadCount < nBufferSize){
   415c0:	e0bfff17 	ldw	r2,-4(fp)
   415c4:	e0fff417 	ldw	r3,-48(fp)
   415c8:	1880122e 	bgeu	r3,r2,41614 <Fat_FileRead+0x438>
            NextCluster = fatNextCluster(pVol, Cluster); 
   415cc:	e13ffa17 	ldw	r4,-24(fp)
   415d0:	e17ff317 	ldw	r5,-52(fp)
   415d4:	0041b3c0 	call	41b3c <fatNextCluster>
   415d8:	e0bffc15 	stw	r2,-16(fp)
            if (NextCluster == 0){
   415dc:	e0bffc17 	ldw	r2,-16(fp)
   415e0:	1000021e 	bne	r2,zero,415ec <Fat_FileRead+0x410>
                bSuccess = FALSE;
   415e4:	e03ff715 	stw	zero,-36(fp)
   415e8:	00000206 	br	415f4 <Fat_FileRead+0x418>
                FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
            }else{
                Cluster = NextCluster;
   415ec:	e0bffc17 	ldw	r2,-16(fp)
   415f0:	e0bff315 	stw	r2,-52(fp)
            }    
            //    
            f->ClusterSeq++; 
   415f4:	e0bff917 	ldw	r2,-28(fp)
   415f8:	10800417 	ldw	r2,16(r2)
   415fc:	10c00044 	addi	r3,r2,1
   41600:	e0bff917 	ldw	r2,-28(fp)
   41604:	10c00415 	stw	r3,16(r2)
            f->Cluster = Cluster;
   41608:	e0bff917 	ldw	r2,-28(fp)
   4160c:	e0fff317 	ldw	r3,-52(fp)
   41610:	10c00315 	stw	r3,12(r2)
            f->ClusterSeq++; 
        }
    }            
    
    // reading
    while(nReadCount < nBufferSize && bSuccess){
   41614:	e0bfff17 	ldw	r2,-4(fp)
   41618:	e0fff417 	ldw	r3,-48(fp)
   4161c:	1880022e 	bgeu	r3,r2,41628 <Fat_FileRead+0x44c>
   41620:	e0bff717 	ldw	r2,-36(fp)
   41624:	103f691e 	bne	r2,zero,413cc <__alt_data_end+0xfffdc9dc>
            f->ClusterSeq++; 
            f->Cluster = Cluster;
        }                    
    }
    
    if (bSuccess){
   41628:	e0bff717 	ldw	r2,-36(fp)
   4162c:	10000626 	beq	r2,zero,41648 <Fat_FileRead+0x46c>
        f->SeekPos += nBufferSize;
   41630:	e0bff917 	ldw	r2,-28(fp)
   41634:	10c00217 	ldw	r3,8(r2)
   41638:	e0bfff17 	ldw	r2,-4(fp)
   4163c:	1887883a 	add	r3,r3,r2
   41640:	e0bff917 	ldw	r2,-28(fp)
   41644:	10c00215 	stw	r3,8(r2)
    }        
        
    
    return bSuccess;
   41648:	e0bff717 	ldw	r2,-36(fp)
}
   4164c:	e037883a 	mov	sp,fp
   41650:	dfc00117 	ldw	ra,4(sp)
   41654:	df000017 	ldw	fp,0(sp)
   41658:	dec00204 	addi	sp,sp,8
   4165c:	f800283a 	ret

00041660 <Fat_FileSeek>:


bool Fat_FileSeek(FAT_FILE_HANDLE hFileHandle, const FAT_SEEK_POS SeekPos, const int nOffset){
   41660:	defff904 	addi	sp,sp,-28
   41664:	df000615 	stw	fp,24(sp)
   41668:	df000604 	addi	fp,sp,24
   4166c:	e13ffd15 	stw	r4,-12(fp)
   41670:	e17ffe15 	stw	r5,-8(fp)
   41674:	e1bfff15 	stw	r6,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
   41678:	e0bffd17 	ldw	r2,-12(fp)
   4167c:	e0bffb15 	stw	r2,-20(fp)
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;
   41680:	00800044 	movi	r2,1
   41684:	e0bffa15 	stw	r2,-24(fp)

    if (!f || !f->Fat)
   41688:	e0bffb17 	ldw	r2,-20(fp)
   4168c:	10000326 	beq	r2,zero,4169c <Fat_FileSeek+0x3c>
   41690:	e0bffb17 	ldw	r2,-20(fp)
   41694:	10804f17 	ldw	r2,316(r2)
   41698:	1000021e 	bne	r2,zero,416a4 <Fat_FileSeek+0x44>
        return FALSE;
   4169c:	0005883a 	mov	r2,zero
   416a0:	00002b06 	br	41750 <Fat_FileSeek+0xf0>
    pVol = (VOLUME_INFO *)f->Fat;        
   416a4:	e0bffb17 	ldw	r2,-20(fp)
   416a8:	10804f17 	ldw	r2,316(r2)
   416ac:	e0bffc15 	stw	r2,-16(fp)
    
    if (!f->IsOpened)
   416b0:	e0bffb17 	ldw	r2,-20(fp)
   416b4:	10800017 	ldw	r2,0(r2)
   416b8:	1000021e 	bne	r2,zero,416c4 <Fat_FileSeek+0x64>
        return FALSE;
   416bc:	0005883a 	mov	r2,zero
   416c0:	00002306 	br	41750 <Fat_FileSeek+0xf0>
        
    switch(SeekPos){
   416c4:	e0bffe17 	ldw	r2,-8(fp)
   416c8:	10c00060 	cmpeqi	r3,r2,1
   416cc:	1800081e 	bne	r3,zero,416f0 <Fat_FileSeek+0x90>
   416d0:	0080032e 	bgeu	zero,r2,416e0 <Fat_FileSeek+0x80>
   416d4:	108000a0 	cmpeqi	r2,r2,2
   416d8:	10000c1e 	bne	r2,zero,4170c <Fat_FileSeek+0xac>
   416dc:	00001206 	br	41728 <Fat_FileSeek+0xc8>
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
   416e0:	e0ffff17 	ldw	r3,-4(fp)
   416e4:	e0bffb17 	ldw	r2,-20(fp)
   416e8:	10c00215 	stw	r3,8(r2)
            break;
   416ec:	00001006 	br	41730 <Fat_FileSeek+0xd0>
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
   416f0:	e0bffb17 	ldw	r2,-20(fp)
   416f4:	10c00217 	ldw	r3,8(r2)
   416f8:	e0bfff17 	ldw	r2,-4(fp)
   416fc:	1887883a 	add	r3,r3,r2
   41700:	e0bffb17 	ldw	r2,-20(fp)
   41704:	10c00215 	stw	r3,8(r2)
            break;
   41708:	00000906 	br	41730 <Fat_FileSeek+0xd0>
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
   4170c:	e0bffb17 	ldw	r2,-20(fp)
   41710:	10c04e17 	ldw	r3,312(r2)
   41714:	e0bfff17 	ldw	r2,-4(fp)
   41718:	1887883a 	add	r3,r3,r2
   4171c:	e0bffb17 	ldw	r2,-20(fp)
   41720:	10c00215 	stw	r3,8(r2)
            break;
   41724:	00000206 	br	41730 <Fat_FileSeek+0xd0>
        default:
            bSuccess = FALSE;
   41728:	e03ffa15 	stw	zero,-24(fp)
            break;    
   4172c:	0001883a 	nop
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
   41730:	e0bffb17 	ldw	r2,-20(fp)
   41734:	10804d8b 	ldhu	r2,310(r2)
   41738:	10ffffcc 	andi	r3,r2,65535
   4173c:	e0bffb17 	ldw	r2,-20(fp)
   41740:	10c00315 	stw	r3,12(r2)
    f->ClusterSeq = 0;
   41744:	e0bffb17 	ldw	r2,-20(fp)
   41748:	10000415 	stw	zero,16(r2)
    
    return bSuccess;
   4174c:	e0bffa17 	ldw	r2,-24(fp)
    
}
   41750:	e037883a 	mov	sp,fp
   41754:	df000017 	ldw	fp,0(sp)
   41758:	dec00104 	addi	sp,sp,4
   4175c:	f800283a 	ret

00041760 <Fat_FileClose>:

void Fat_FileClose(FAT_FILE_HANDLE hFileHandle){
   41760:	defffc04 	addi	sp,sp,-16
   41764:	dfc00315 	stw	ra,12(sp)
   41768:	df000215 	stw	fp,8(sp)
   4176c:	df000204 	addi	fp,sp,8
   41770:	e13fff15 	stw	r4,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
   41774:	e0bfff17 	ldw	r2,-4(fp)
   41778:	e0bffe15 	stw	r2,-8(fp)
    if (!f)
   4177c:	e0bffe17 	ldw	r2,-8(fp)
   41780:	1000011e 	bne	r2,zero,41788 <Fat_FileClose+0x28>
        return;
   41784:	00000206 	br	41790 <Fat_FileClose+0x30>
        
    free(f);        
   41788:	e13ffe17 	ldw	r4,-8(fp)
   4178c:	00469980 	call	46998 <free>
}
   41790:	e037883a 	mov	sp,fp
   41794:	dfc00117 	ldw	ra,4(sp)
   41798:	df000017 	ldw	fp,0(sp)
   4179c:	dec00204 	addi	sp,sp,8
   417a0:	f800283a 	ret

000417a4 <Fat_SpeedTest>:



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
   417a4:	deff7304 	addi	sp,sp,-564
   417a8:	dfc08c15 	stw	ra,560(sp)
   417ac:	df008b15 	stw	fp,556(sp)
   417b0:	dc008a15 	stw	r16,552(sp)
   417b4:	df008b04 	addi	fp,sp,556
   417b8:	e13ffd15 	stw	r4,-12(fp)
   417bc:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = TRUE;
   417c0:	00800044 	movi	r2,1
   417c4:	e0bf7515 	stw	r2,-556(fp)
    alt_u32 time_start, time_finish, time_elapsed, TotalReadBytes=0;
   417c8:	e03f7615 	stw	zero,-552(fp)
    int nSecter = 0;
   417cc:	e03f7715 	stw	zero,-548(fp)
    float fMegaBytePerSec = 0;
   417d0:	e03f7815 	stw	zero,-544(fp)
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
   417d4:	e0bffd17 	ldw	r2,-12(fp)
   417d8:	e0bf7915 	stw	r2,-540(fp)
    if (!pVol)
   417dc:	e0bf7917 	ldw	r2,-540(fp)
   417e0:	1000021e 	bne	r2,zero,417ec <Fat_SpeedTest+0x48>
        return 0;
   417e4:	0005883a 	mov	r2,zero
   417e8:	00006d06 	br	419a0 <Fat_SpeedTest+0x1fc>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   417ec:	008001b4 	movhi	r2,6
   417f0:	10b29b04 	addi	r2,r2,-13716
   417f4:	10800017 	ldw	r2,0(r2)
    time_start = alt_nticks();
   417f8:	e0bf7a15 	stw	r2,-536(fp)
   417fc:	008001b4 	movhi	r2,6
   41800:	10b29b04 	addi	r2,r2,-13716
   41804:	14000017 	ldw	r16,0(r2)
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
   41808:	e13ffe17 	ldw	r4,-8(fp)
   4180c:	0140fa04 	movi	r5,1000
   41810:	00453200 	call	45320 <__mulsi3>
   41814:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   41818:	008001b4 	movhi	r2,6
   4181c:	10b29a04 	addi	r2,r2,-13720
   41820:	10800017 	ldw	r2,0(r2)
   41824:	1809883a 	mov	r4,r3
   41828:	100b883a 	mov	r5,r2
   4182c:	00453100 	call	45310 <__udivsi3>
   41830:	8085883a 	add	r2,r16,r2
   41834:	e0bf7b15 	stw	r2,-532(fp)
    while(alt_nticks() < time_finish && bSuccess){
   41838:	00000f06 	br	41878 <Fat_SpeedTest+0xd4>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
   4183c:	e0bf7917 	ldw	r2,-540(fp)
   41840:	10800117 	ldw	r2,4(r2)
   41844:	e0ff7917 	ldw	r3,-540(fp)
   41848:	19000017 	ldw	r4,0(r3)
   4184c:	e17f7717 	ldw	r5,-548(fp)
   41850:	e0ff7d04 	addi	r3,fp,-524
   41854:	180d883a 	mov	r6,r3
   41858:	103ee83a 	callr	r2
   4185c:	e0bf7515 	stw	r2,-556(fp)
        nSecter++;
   41860:	e0bf7717 	ldw	r2,-548(fp)
   41864:	10800044 	addi	r2,r2,1
   41868:	e0bf7715 	stw	r2,-548(fp)
        TotalReadBytes += sizeof(szBlock);
   4186c:	e0bf7617 	ldw	r2,-552(fp)
   41870:	10808004 	addi	r2,r2,512
   41874:	e0bf7615 	stw	r2,-552(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   41878:	008001b4 	movhi	r2,6
   4187c:	10b29b04 	addi	r2,r2,-13716
   41880:	10c00017 	ldw	r3,0(r2)
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    while(alt_nticks() < time_finish && bSuccess){
   41884:	e0bf7b17 	ldw	r2,-532(fp)
   41888:	1880022e 	bgeu	r3,r2,41894 <Fat_SpeedTest+0xf0>
   4188c:	e0bf7517 	ldw	r2,-556(fp)
   41890:	103fea1e 	bne	r2,zero,4183c <__alt_data_end+0xfffdce4c>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
        nSecter++;
        TotalReadBytes += sizeof(szBlock);
        
    }        
    if (bSuccess){
   41894:	e0bf7517 	ldw	r2,-556(fp)
   41898:	10003726 	beq	r2,zero,41978 <Fat_SpeedTest+0x1d4>
   4189c:	008001b4 	movhi	r2,6
   418a0:	10b29b04 	addi	r2,r2,-13716
   418a4:	10c00017 	ldw	r3,0(r2)
        time_elapsed = alt_nticks() - time_start;
   418a8:	e0bf7a17 	ldw	r2,-536(fp)
   418ac:	1885c83a 	sub	r2,r3,r2
   418b0:	e0bf7c15 	stw	r2,-528(fp)
        fMegaBytePerSec = (float)TotalReadBytes * (float)alt_ticks_per_second() / (float)time_elapsed / 1024.0 / 1024.0;
   418b4:	e13f7617 	ldw	r4,-552(fp)
   418b8:	0045be80 	call	45be8 <__floatunsisf>
   418bc:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   418c0:	008001b4 	movhi	r2,6
   418c4:	10b29a04 	addi	r2,r2,-13720
   418c8:	10800017 	ldw	r2,0(r2)
   418cc:	1009883a 	mov	r4,r2
   418d0:	0045be80 	call	45be8 <__floatunsisf>
   418d4:	1007883a 	mov	r3,r2
   418d8:	8009883a 	mov	r4,r16
   418dc:	180b883a 	mov	r5,r3
   418e0:	00457980 	call	45798 <__mulsf3>
   418e4:	1007883a 	mov	r3,r2
   418e8:	1821883a 	mov	r16,r3
   418ec:	e13f7c17 	ldw	r4,-528(fp)
   418f0:	0045be80 	call	45be8 <__floatunsisf>
   418f4:	1007883a 	mov	r3,r2
   418f8:	8009883a 	mov	r4,r16
   418fc:	180b883a 	mov	r5,r3
   41900:	00453480 	call	45348 <__divsf3>
   41904:	1007883a 	mov	r3,r2
   41908:	1805883a 	mov	r2,r3
   4190c:	1009883a 	mov	r4,r2
   41910:	00466780 	call	46678 <__extendsfdf2>
   41914:	100b883a 	mov	r5,r2
   41918:	180d883a 	mov	r6,r3
   4191c:	2809883a 	mov	r4,r5
   41920:	300b883a 	mov	r5,r6
   41924:	000d883a 	mov	r6,zero
   41928:	01d02434 	movhi	r7,16528
   4192c:	0045cf80 	call	45cf8 <__divdf3>
   41930:	1009883a 	mov	r4,r2
   41934:	180b883a 	mov	r5,r3
   41938:	2005883a 	mov	r2,r4
   4193c:	2807883a 	mov	r3,r5
   41940:	1009883a 	mov	r4,r2
   41944:	180b883a 	mov	r5,r3
   41948:	000d883a 	mov	r6,zero
   4194c:	01d02434 	movhi	r7,16528
   41950:	0045cf80 	call	45cf8 <__divdf3>
   41954:	1009883a 	mov	r4,r2
   41958:	180b883a 	mov	r5,r3
   4195c:	2005883a 	mov	r2,r4
   41960:	2807883a 	mov	r3,r5
   41964:	1009883a 	mov	r4,r2
   41968:	180b883a 	mov	r5,r3
   4196c:	00467880 	call	46788 <__truncdfsf2>
   41970:	1007883a 	mov	r3,r2
   41974:	e0ff7815 	stw	r3,-544(fp)
    } 
    
    printf("\n--------speed:%f---------\n",fMegaBytePerSec);       
   41978:	e13f7817 	ldw	r4,-544(fp)
   4197c:	00466780 	call	46678 <__extendsfdf2>
   41980:	100d883a 	mov	r6,r2
   41984:	180f883a 	mov	r7,r3
   41988:	010001b4 	movhi	r4,6
   4198c:	2122d704 	addi	r4,r4,-29860
   41990:	300b883a 	mov	r5,r6
   41994:	380d883a 	mov	r6,r7
   41998:	00473dc0 	call	473dc <printf>
    return fMegaBytePerSec;
   4199c:	e0bf7817 	ldw	r2,-544(fp)
   419a0:	1007883a 	mov	r3,r2
    
   
}
   419a4:	1805883a 	mov	r2,r3
   419a8:	e6ffff04 	addi	sp,fp,-4
   419ac:	dfc00217 	ldw	ra,8(sp)
   419b0:	df000117 	ldw	fp,4(sp)
   419b4:	dc000017 	ldw	r16,0(sp)
   419b8:	dec00304 	addi	sp,sp,12
   419bc:	f800283a 	ret

000419c0 <fat16ClusterType>:
//extern VOLUME_INFO gVolumeInfo;




CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
   419c0:	defffd04 	addi	sp,sp,-12
   419c4:	df000215 	stw	fp,8(sp)
   419c8:	df000204 	addi	fp,sp,8
   419cc:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
   419d0:	e0bfff17 	ldw	r2,-4(fp)
   419d4:	10bfffcc 	andi	r2,r2,65535
   419d8:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFF0)
   419dc:	e0bfff17 	ldw	r2,-4(fp)
   419e0:	10000626 	beq	r2,zero,419fc <fat16ClusterType+0x3c>
   419e4:	e0bfff17 	ldw	r2,-4(fp)
   419e8:	10bffc28 	cmpgeui	r2,r2,65520
   419ec:	1000031e 	bne	r2,zero,419fc <fat16ClusterType+0x3c>
        Type = CLUSTER_NEXT_INFILE;
   419f0:	00800104 	movi	r2,4
   419f4:	e0bffe15 	stw	r2,-8(fp)
   419f8:	00001806 	br	41a5c <fat16ClusterType+0x9c>
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
   419fc:	e0bfff17 	ldw	r2,-4(fp)
   41a00:	10bffe30 	cmpltui	r2,r2,65528
   41a04:	1000031e 	bne	r2,zero,41a14 <fat16ClusterType+0x54>
        Type = CLUSTER_LAST_INFILE;
   41a08:	008000c4 	movi	r2,3
   41a0c:	e0bffe15 	stw	r2,-8(fp)
   41a10:	00001206 	br	41a5c <fat16ClusterType+0x9c>
    else if (Fat == (alt_u16)0x00)
   41a14:	e0bfff17 	ldw	r2,-4(fp)
   41a18:	1000021e 	bne	r2,zero,41a24 <fat16ClusterType+0x64>
        Type = CLUSTER_UNUSED;
   41a1c:	e03ffe15 	stw	zero,-8(fp)
   41a20:	00000e06 	br	41a5c <fat16ClusterType+0x9c>
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
   41a24:	e0bfff17 	ldw	r2,-4(fp)
   41a28:	10bffc30 	cmpltui	r2,r2,65520
   41a2c:	1000061e 	bne	r2,zero,41a48 <fat16ClusterType+0x88>
   41a30:	e0bfff17 	ldw	r2,-4(fp)
   41a34:	10bffde8 	cmpgeui	r2,r2,65527
   41a38:	1000031e 	bne	r2,zero,41a48 <fat16ClusterType+0x88>
        Type = CLUSTER_RESERVED;
   41a3c:	00800044 	movi	r2,1
   41a40:	e0bffe15 	stw	r2,-8(fp)
   41a44:	00000506 	br	41a5c <fat16ClusterType+0x9c>
    else if (Fat == 0xFFF7)
   41a48:	e0ffff17 	ldw	r3,-4(fp)
   41a4c:	00bffdd4 	movui	r2,65527
   41a50:	1880021e 	bne	r3,r2,41a5c <fat16ClusterType+0x9c>
        Type = CLUSTER_BAD;
   41a54:	00800084 	movi	r2,2
   41a58:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
   41a5c:	e0bffe17 	ldw	r2,-8(fp)
         
}
   41a60:	e037883a 	mov	sp,fp
   41a64:	df000017 	ldw	fp,0(sp)
   41a68:	dec00104 	addi	sp,sp,4
   41a6c:	f800283a 	ret

00041a70 <fat32ClusterType>:

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
   41a70:	defffd04 	addi	sp,sp,-12
   41a74:	df000215 	stw	fp,8(sp)
   41a78:	df000204 	addi	fp,sp,8
   41a7c:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
   41a80:	e0ffff17 	ldw	r3,-4(fp)
   41a84:	00840034 	movhi	r2,4096
   41a88:	10bfffc4 	addi	r2,r2,-1
   41a8c:	1884703a 	and	r2,r3,r2
   41a90:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
   41a94:	e0bfff17 	ldw	r2,-4(fp)
   41a98:	10000726 	beq	r2,zero,41ab8 <fat32ClusterType+0x48>
   41a9c:	e0ffff17 	ldw	r3,-4(fp)
   41aa0:	00840034 	movhi	r2,4096
   41aa4:	10bffbc4 	addi	r2,r2,-17
   41aa8:	10c00336 	bltu	r2,r3,41ab8 <fat32ClusterType+0x48>
        Type = CLUSTER_NEXT_INFILE;
   41aac:	00800104 	movi	r2,4
   41ab0:	e0bffe15 	stw	r2,-8(fp)
   41ab4:	00001c06 	br	41b28 <fat32ClusterType+0xb8>
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
   41ab8:	e0ffff17 	ldw	r3,-4(fp)
   41abc:	00840034 	movhi	r2,4096
   41ac0:	10bffdc4 	addi	r2,r2,-9
   41ac4:	10c0032e 	bgeu	r2,r3,41ad4 <fat32ClusterType+0x64>
        Type = CLUSTER_LAST_INFILE;
   41ac8:	008000c4 	movi	r2,3
   41acc:	e0bffe15 	stw	r2,-8(fp)
   41ad0:	00001506 	br	41b28 <fat32ClusterType+0xb8>
    else if (Fat == (alt_u32)0x00)
   41ad4:	e0bfff17 	ldw	r2,-4(fp)
   41ad8:	1000021e 	bne	r2,zero,41ae4 <fat32ClusterType+0x74>
        Type = CLUSTER_UNUSED;
   41adc:	e03ffe15 	stw	zero,-8(fp)
   41ae0:	00001106 	br	41b28 <fat32ClusterType+0xb8>
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
   41ae4:	e0ffff17 	ldw	r3,-4(fp)
   41ae8:	00840034 	movhi	r2,4096
   41aec:	10bffbc4 	addi	r2,r2,-17
   41af0:	10c0072e 	bgeu	r2,r3,41b10 <fat32ClusterType+0xa0>
   41af4:	e0ffff17 	ldw	r3,-4(fp)
   41af8:	00840034 	movhi	r2,4096
   41afc:	10bffd84 	addi	r2,r2,-10
   41b00:	10c00336 	bltu	r2,r3,41b10 <fat32ClusterType+0xa0>
        Type = CLUSTER_RESERVED;
   41b04:	00800044 	movi	r2,1
   41b08:	e0bffe15 	stw	r2,-8(fp)
   41b0c:	00000606 	br	41b28 <fat32ClusterType+0xb8>
    else if (Fat == 0xFFFFFF7)
   41b10:	e0ffff17 	ldw	r3,-4(fp)
   41b14:	00840034 	movhi	r2,4096
   41b18:	10bffdc4 	addi	r2,r2,-9
   41b1c:	1880021e 	bne	r3,r2,41b28 <fat32ClusterType+0xb8>
        Type = CLUSTER_BAD;
   41b20:	00800084 	movi	r2,2
   41b24:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
   41b28:	e0bffe17 	ldw	r2,-8(fp)
         
}
   41b2c:	e037883a 	mov	sp,fp
   41b30:	df000017 	ldw	fp,0(sp)
   41b34:	dec00104 	addi	sp,sp,4
   41b38:	f800283a 	ret

00041b3c <fatNextCluster>:

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
   41b3c:	defff604 	addi	sp,sp,-40
   41b40:	dfc00915 	stw	ra,36(sp)
   41b44:	df000815 	stw	fp,32(sp)
   41b48:	dc000715 	stw	r16,28(sp)
   41b4c:	df000804 	addi	fp,sp,32
   41b50:	e13ffd15 	stw	r4,-12(fp)
   41b54:	e17ffe15 	stw	r5,-8(fp)
    if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
        NextCluster = 0;  // invalid cluster
    }        
#else
    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
   41b58:	e0bffd17 	ldw	r2,-12(fp)
   41b5c:	10800317 	ldw	r2,12(r2)
   41b60:	108002d8 	cmpnei	r2,r2,11
   41b64:	1000021e 	bne	r2,zero,41b70 <fatNextCluster+0x34>
   41b68:	00800104 	movi	r2,4
   41b6c:	00000106 	br	41b74 <fatNextCluster+0x38>
   41b70:	00800084 	movi	r2,2
   41b74:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
   41b78:	e0bffd17 	ldw	r2,-12(fp)
   41b7c:	10c00617 	ldw	r3,24(r2)
   41b80:	e0bffa17 	ldw	r2,-24(fp)
   41b84:	1809883a 	mov	r4,r3
   41b88:	100b883a 	mov	r5,r2
   41b8c:	00453100 	call	45310 <__udivsi3>
   41b90:	e0bffb15 	stw	r2,-20(fp)
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
   41b94:	e0bffd17 	ldw	r2,-12(fp)
   41b98:	14000d17 	ldw	r16,52(r2)
   41b9c:	e0bffa17 	ldw	r2,-24(fp)
   41ba0:	1009883a 	mov	r4,r2
   41ba4:	e17ffe17 	ldw	r5,-8(fp)
   41ba8:	00453200 	call	45320 <__mulsi3>
   41bac:	1007883a 	mov	r3,r2
   41bb0:	e0bffd17 	ldw	r2,-12(fp)
   41bb4:	10800617 	ldw	r2,24(r2)
   41bb8:	1809883a 	mov	r4,r3
   41bbc:	100b883a 	mov	r5,r2
   41bc0:	00453100 	call	45310 <__udivsi3>
   41bc4:	8085883a 	add	r2,r16,r2
   41bc8:	e0bffc15 	stw	r2,-16(fp)
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
   41bcc:	e13ffd17 	ldw	r4,-12(fp)
   41bd0:	e17ffc17 	ldw	r5,-16(fp)
   41bd4:	00424480 	call	42448 <fatReadSecter>
   41bd8:	10003126 	beq	r2,zero,41ca0 <fatNextCluster+0x164>
        if (pVol->Partition_Type == PARTITION_FAT32){
   41bdc:	e0bffd17 	ldw	r2,-12(fp)
   41be0:	10800317 	ldw	r2,12(r2)
   41be4:	108002d8 	cmpnei	r2,r2,11
   41be8:	1000131e 	bne	r2,zero,41c38 <fatNextCluster+0xfc>
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
   41bec:	e0bffb17 	ldw	r2,-20(fp)
   41bf0:	e0fffe17 	ldw	r3,-8(fp)
   41bf4:	1809883a 	mov	r4,r3
   41bf8:	100b883a 	mov	r5,r2
   41bfc:	00453180 	call	45318 <__umodsi3>
   41c00:	1007883a 	mov	r3,r2
   41c04:	e0bffa17 	ldw	r2,-24(fp)
   41c08:	1809883a 	mov	r4,r3
   41c0c:	100b883a 	mov	r5,r2
   41c10:	00453200 	call	45320 <__mulsi3>
   41c14:	10801004 	addi	r2,r2,64
   41c18:	e0fffd17 	ldw	r3,-12(fp)
   41c1c:	1885883a 	add	r2,r3,r2
   41c20:	10800017 	ldw	r2,0(r2)
   41c24:	e0bff915 	stw	r2,-28(fp)
            ClusterType = fat32ClusterType(NextCluster);
   41c28:	e13ff917 	ldw	r4,-28(fp)
   41c2c:	0041a700 	call	41a70 <fat32ClusterType>
   41c30:	e0bff815 	stw	r2,-32(fp)
   41c34:	00001306 	br	41c84 <fatNextCluster+0x148>
        }else{
            NextCluster = *(alt_u16 *)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
   41c38:	e0bffb17 	ldw	r2,-20(fp)
   41c3c:	e0fffe17 	ldw	r3,-8(fp)
   41c40:	1809883a 	mov	r4,r3
   41c44:	100b883a 	mov	r5,r2
   41c48:	00453180 	call	45318 <__umodsi3>
   41c4c:	1007883a 	mov	r3,r2
   41c50:	e0bffa17 	ldw	r2,-24(fp)
   41c54:	1809883a 	mov	r4,r3
   41c58:	100b883a 	mov	r5,r2
   41c5c:	00453200 	call	45320 <__mulsi3>
   41c60:	10801004 	addi	r2,r2,64
   41c64:	e0fffd17 	ldw	r3,-12(fp)
   41c68:	1885883a 	add	r2,r3,r2
   41c6c:	1080000b 	ldhu	r2,0(r2)
   41c70:	10bfffcc 	andi	r2,r2,65535
   41c74:	e0bff915 	stw	r2,-28(fp)
            ClusterType = fat16ClusterType(NextCluster);
   41c78:	e13ff917 	ldw	r4,-28(fp)
   41c7c:	00419c00 	call	419c0 <fat16ClusterType>
   41c80:	e0bff815 	stw	r2,-32(fp)
        }    
        if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE)
   41c84:	e0bff817 	ldw	r2,-32(fp)
   41c88:	10800120 	cmpeqi	r2,r2,4
   41c8c:	1000041e 	bne	r2,zero,41ca0 <fatNextCluster+0x164>
   41c90:	e0bff817 	ldw	r2,-32(fp)
   41c94:	108000e0 	cmpeqi	r2,r2,3
   41c98:	1000011e 	bne	r2,zero,41ca0 <fatNextCluster+0x164>
            NextCluster = 0;  // invalid cluster
   41c9c:	e03ff915 	stw	zero,-28(fp)
    }                
    
    
    return NextCluster;
   41ca0:	e0bff917 	ldw	r2,-28(fp)

#endif    
    
    return NextCluster;
}
   41ca4:	e6ffff04 	addi	sp,fp,-4
   41ca8:	dfc00217 	ldw	ra,8(sp)
   41cac:	df000117 	ldw	fp,4(sp)
   41cb0:	dc000017 	ldw	r16,0(sp)
   41cb4:	dec00304 	addi	sp,sp,12
   41cb8:	f800283a 	ret

00041cbc <fatFindUnusedCluster>:

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
   41cbc:	defff304 	addi	sp,sp,-52
   41cc0:	dfc00c15 	stw	ra,48(sp)
   41cc4:	df000b15 	stw	fp,44(sp)
   41cc8:	dc000a15 	stw	r16,40(sp)
   41ccc:	df000b04 	addi	fp,sp,44
   41cd0:	e13ffe15 	stw	r4,-8(fp)
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
   41cd4:	00bfffc4 	movi	r2,-1
   41cd8:	e0bff615 	stw	r2,-40(fp)
   41cdc:	00800084 	movi	r2,2
   41ce0:	e0bff715 	stw	r2,-36(fp)
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
   41ce4:	e0bffe17 	ldw	r2,-8(fp)
   41ce8:	10800317 	ldw	r2,12(r2)
   41cec:	108002d8 	cmpnei	r2,r2,11
   41cf0:	1000021e 	bne	r2,zero,41cfc <fatFindUnusedCluster+0x40>
   41cf4:	00800104 	movi	r2,4
   41cf8:	00000106 	br	41d00 <fatFindUnusedCluster+0x44>
   41cfc:	00800084 	movi	r2,2
   41d00:	e0bff915 	stw	r2,-28(fp)
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
   41d04:	e0bffe17 	ldw	r2,-8(fp)
   41d08:	10c00617 	ldw	r3,24(r2)
   41d0c:	e0bff917 	ldw	r2,-28(fp)
   41d10:	1809883a 	mov	r4,r3
   41d14:	100b883a 	mov	r5,r2
   41d18:	00453100 	call	45310 <__udivsi3>
   41d1c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 Secter;
    bool bDone = FALSE;
   41d20:	e03ff815 	stw	zero,-32(fp)

    while(!bDone){     
   41d24:	00003e06 	br	41e20 <fatFindUnusedCluster+0x164>
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
   41d28:	e0bffe17 	ldw	r2,-8(fp)
   41d2c:	14000d17 	ldw	r16,52(r2)
   41d30:	e0bff917 	ldw	r2,-28(fp)
   41d34:	1009883a 	mov	r4,r2
   41d38:	e17ff717 	ldw	r5,-36(fp)
   41d3c:	00453200 	call	45320 <__mulsi3>
   41d40:	1007883a 	mov	r3,r2
   41d44:	e0bffe17 	ldw	r2,-8(fp)
   41d48:	10800617 	ldw	r2,24(r2)
   41d4c:	1809883a 	mov	r4,r3
   41d50:	100b883a 	mov	r5,r2
   41d54:	00453100 	call	45310 <__udivsi3>
   41d58:	8085883a 	add	r2,r16,r2
   41d5c:	e0bffb15 	stw	r2,-20(fp)
        if (fatReadSecter(pVol, Secter)){
   41d60:	e13ffe17 	ldw	r4,-8(fp)
   41d64:	e17ffb17 	ldw	r5,-20(fp)
   41d68:	00424480 	call	42448 <fatReadSecter>
   41d6c:	10002726 	beq	r2,zero,41e0c <fatFindUnusedCluster+0x150>
            pFatEntry = (pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize);
   41d70:	e0bffa17 	ldw	r2,-24(fp)
   41d74:	e0fff717 	ldw	r3,-36(fp)
   41d78:	1809883a 	mov	r4,r3
   41d7c:	100b883a 	mov	r5,r2
   41d80:	00453180 	call	45318 <__umodsi3>
   41d84:	1007883a 	mov	r3,r2
   41d88:	e0bff917 	ldw	r2,-28(fp)
   41d8c:	1809883a 	mov	r4,r3
   41d90:	100b883a 	mov	r5,r2
   41d94:	00453200 	call	45320 <__mulsi3>
   41d98:	10801004 	addi	r2,r2,64
   41d9c:	e0fffe17 	ldw	r3,-8(fp)
   41da0:	1885883a 	add	r2,r3,r2
   41da4:	e0bffc15 	stw	r2,-16(fp)
            if (pVol->Partition_Type == PARTITION_FAT32){
   41da8:	e0bffe17 	ldw	r2,-8(fp)
   41dac:	10800317 	ldw	r2,12(r2)
   41db0:	108002d8 	cmpnei	r2,r2,11
   41db4:	1000071e 	bne	r2,zero,41dd4 <fatFindUnusedCluster+0x118>
                ClusterEntryValue = *(alt_u32*)pFatEntry; 
   41db8:	e0bffc17 	ldw	r2,-16(fp)
   41dbc:	10800017 	ldw	r2,0(r2)
   41dc0:	e0bffd15 	stw	r2,-12(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
   41dc4:	e13ffd17 	ldw	r4,-12(fp)
   41dc8:	0041a700 	call	41a70 <fat32ClusterType>
   41dcc:	e0bff515 	stw	r2,-44(fp)
   41dd0:	00000706 	br	41df0 <fatFindUnusedCluster+0x134>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntry; 
   41dd4:	e0bffc17 	ldw	r2,-16(fp)
   41dd8:	1080000b 	ldhu	r2,0(r2)
   41ddc:	10bfffcc 	andi	r2,r2,65535
   41de0:	e0bffd15 	stw	r2,-12(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
   41de4:	e13ffd17 	ldw	r4,-12(fp)
   41de8:	00419c00 	call	419c0 <fat16ClusterType>
   41dec:	e0bff515 	stw	r2,-44(fp)
            }    
            if (ClusterType == CLUSTER_UNUSED){
   41df0:	e0bff517 	ldw	r2,-44(fp)
   41df4:	1000071e 	bne	r2,zero,41e14 <fatFindUnusedCluster+0x158>
                UnusedCluster = ThisCluster;  // invalid cluster
   41df8:	e0bff717 	ldw	r2,-36(fp)
   41dfc:	e0bff615 	stw	r2,-40(fp)
                bDone = TRUE;
   41e00:	00800044 	movi	r2,1
   41e04:	e0bff815 	stw	r2,-32(fp)
   41e08:	00000206 	br	41e14 <fatFindUnusedCluster+0x158>
            }    
        }else{
            bDone = TRUE;
   41e0c:	00800044 	movi	r2,1
   41e10:	e0bff815 	stw	r2,-32(fp)
        }     
        ThisCluster++;           
   41e14:	e0bff717 	ldw	r2,-36(fp)
   41e18:	10800044 	addi	r2,r2,1
   41e1c:	e0bff715 	stw	r2,-36(fp)
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    alt_u32 Secter;
    bool bDone = FALSE;

    while(!bDone){     
   41e20:	e0bff817 	ldw	r2,-32(fp)
   41e24:	103fc026 	beq	r2,zero,41d28 <__alt_data_end+0xfffdd338>
            bDone = TRUE;
        }     
        ThisCluster++;           
    }                
    
    return UnusedCluster;
   41e28:	e0bff617 	ldw	r2,-40(fp)

}
   41e2c:	e6ffff04 	addi	sp,fp,-4
   41e30:	dfc00217 	ldw	ra,8(sp)
   41e34:	df000117 	ldw	fp,4(sp)
   41e38:	dc000017 	ldw	r16,0(sp)
   41e3c:	dec00304 	addi	sp,sp,12
   41e40:	f800283a 	ret

00041e44 <fatDelClusterList>:


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
   41e44:	defff204 	addi	sp,sp,-56
   41e48:	dfc00d15 	stw	ra,52(sp)
   41e4c:	df000c15 	stw	fp,48(sp)
   41e50:	dc000b15 	stw	r16,44(sp)
   41e54:	df000c04 	addi	fp,sp,48
   41e58:	e13ffd15 	stw	r4,-12(fp)
   41e5c:	e17ffe15 	stw	r5,-8(fp)
    CLUSTER_TYPE ClusterType;
    bool bSuccess = TRUE;
   41e60:	00800044 	movi	r2,1
   41e64:	e0bff515 	stw	r2,-44(fp)
    bool bDone = FALSE;
   41e68:	e03ff615 	stw	zero,-40(fp)
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
   41e6c:	e0bffd17 	ldw	r2,-12(fp)
   41e70:	10800317 	ldw	r2,12(r2)
   41e74:	108002d8 	cmpnei	r2,r2,11
   41e78:	1000021e 	bne	r2,zero,41e84 <fatDelClusterList+0x40>
   41e7c:	00800104 	movi	r2,4
   41e80:	00000106 	br	41e88 <fatDelClusterList+0x44>
   41e84:	00800084 	movi	r2,2
   41e88:	e0bff715 	stw	r2,-36(fp)
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
   41e8c:	e0bffd17 	ldw	r2,-12(fp)
   41e90:	10c00617 	ldw	r3,24(r2)
   41e94:	e0bff717 	ldw	r2,-36(fp)
   41e98:	1809883a 	mov	r4,r3
   41e9c:	100b883a 	mov	r5,r2
   41ea0:	00453100 	call	45310 <__udivsi3>
   41ea4:	e0bff815 	stw	r2,-32(fp)
     
    ClusterIndex = StartCluster;
   41ea8:	e0bffe17 	ldw	r2,-8(fp)
   41eac:	e0bff915 	stw	r2,-28(fp)
    while(bSuccess && !bDone){
   41eb0:	00005706 	br	42010 <fatDelClusterList+0x1cc>
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
   41eb4:	e0bffd17 	ldw	r2,-12(fp)
   41eb8:	14000d17 	ldw	r16,52(r2)
   41ebc:	e0bff717 	ldw	r2,-36(fp)
   41ec0:	1009883a 	mov	r4,r2
   41ec4:	e17ff917 	ldw	r5,-28(fp)
   41ec8:	00453200 	call	45320 <__mulsi3>
   41ecc:	1007883a 	mov	r3,r2
   41ed0:	e0bffd17 	ldw	r2,-12(fp)
   41ed4:	10800617 	ldw	r2,24(r2)
   41ed8:	1809883a 	mov	r4,r3
   41edc:	100b883a 	mov	r5,r2
   41ee0:	00453100 	call	45310 <__udivsi3>
   41ee4:	8085883a 	add	r2,r16,r2
   41ee8:	e0bffa15 	stw	r2,-24(fp)
        bSuccess = fatReadSecter(pVol, Secter);
   41eec:	e13ffd17 	ldw	r4,-12(fp)
   41ef0:	e17ffa17 	ldw	r5,-24(fp)
   41ef4:	00424480 	call	42448 <fatReadSecter>
   41ef8:	e0bff515 	stw	r2,-44(fp)
        if (bSuccess){
   41efc:	e0bff517 	ldw	r2,-44(fp)
   41f00:	10004326 	beq	r2,zero,42010 <fatDelClusterList+0x1cc>
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
   41f04:	e0bff817 	ldw	r2,-32(fp)
   41f08:	e0fff917 	ldw	r3,-28(fp)
   41f0c:	1809883a 	mov	r4,r3
   41f10:	100b883a 	mov	r5,r2
   41f14:	00453180 	call	45318 <__umodsi3>
   41f18:	1007883a 	mov	r3,r2
   41f1c:	e0bff717 	ldw	r2,-36(fp)
   41f20:	1809883a 	mov	r4,r3
   41f24:	100b883a 	mov	r5,r2
   41f28:	00453200 	call	45320 <__mulsi3>
   41f2c:	10801004 	addi	r2,r2,64
   41f30:	e0fffd17 	ldw	r3,-12(fp)
   41f34:	1885883a 	add	r2,r3,r2
   41f38:	e0bffb15 	stw	r2,-20(fp)
            if (pVol->Partition_Type == PARTITION_FAT32){
   41f3c:	e0bffd17 	ldw	r2,-12(fp)
   41f40:	10800317 	ldw	r2,12(r2)
   41f44:	108002d8 	cmpnei	r2,r2,11
   41f48:	1000071e 	bne	r2,zero,41f68 <fatDelClusterList+0x124>
                ClusterEntryValue = *(alt_u32 *)pFatEntryValue; 
   41f4c:	e0bffb17 	ldw	r2,-20(fp)
   41f50:	10800017 	ldw	r2,0(r2)
   41f54:	e0bffc15 	stw	r2,-16(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
   41f58:	e13ffc17 	ldw	r4,-16(fp)
   41f5c:	0041a700 	call	41a70 <fat32ClusterType>
   41f60:	e0bff415 	stw	r2,-48(fp)
   41f64:	00000706 	br	41f84 <fatDelClusterList+0x140>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
   41f68:	e0bffb17 	ldw	r2,-20(fp)
   41f6c:	1080000b 	ldhu	r2,0(r2)
   41f70:	10bfffcc 	andi	r2,r2,65535
   41f74:	e0bffc15 	stw	r2,-16(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
   41f78:	e13ffc17 	ldw	r4,-16(fp)
   41f7c:	00419c00 	call	419c0 <fat16ClusterType>
   41f80:	e0bff415 	stw	r2,-48(fp)
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
   41f84:	e0bff417 	ldw	r2,-48(fp)
   41f88:	10800120 	cmpeqi	r2,r2,4
   41f8c:	1000071e 	bne	r2,zero,41fac <fatDelClusterList+0x168>
   41f90:	e0bff417 	ldw	r2,-48(fp)
   41f94:	108000e0 	cmpeqi	r2,r2,3
   41f98:	1000041e 	bne	r2,zero,41fac <fatDelClusterList+0x168>
                bDone = TRUE;
   41f9c:	00800044 	movi	r2,1
   41fa0:	e0bff615 	stw	r2,-40(fp)
                bSuccess = FALSE;
   41fa4:	e03ff515 	stw	zero,-44(fp)
   41fa8:	00001906 	br	42010 <fatDelClusterList+0x1cc>
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
   41fac:	e0bff417 	ldw	r2,-48(fp)
   41fb0:	108000d8 	cmpnei	r2,r2,3
   41fb4:	1000021e 	bne	r2,zero,41fc0 <fatDelClusterList+0x17c>
                    bDone = TRUE; // the last cluster
   41fb8:	00800044 	movi	r2,1
   41fbc:	e0bff615 	stw	r2,-40(fp)
                // update
                if (pVol->Partition_Type == PARTITION_FAT32)
   41fc0:	e0bffd17 	ldw	r2,-12(fp)
   41fc4:	10800317 	ldw	r2,12(r2)
   41fc8:	108002d8 	cmpnei	r2,r2,11
   41fcc:	1000031e 	bne	r2,zero,41fdc <fatDelClusterList+0x198>
                    *(alt_u32 *)pFatEntryValue = CLUSTER_UNUSED;
   41fd0:	e0bffb17 	ldw	r2,-20(fp)
   41fd4:	10000015 	stw	zero,0(r2)
   41fd8:	00000206 	br	41fe4 <fatDelClusterList+0x1a0>
                else 
                    *(alt_u16 *)pFatEntryValue = CLUSTER_UNUSED;
   41fdc:	e0bffb17 	ldw	r2,-20(fp)
   41fe0:	1000000d 	sth	zero,0(r2)
                //write back FAT Table
                bSuccess = pVol->WriteBlock512(pVol->DiskHandle, pVol->Secter_Index, pVol->Secter_Data);
   41fe4:	e0bffd17 	ldw	r2,-12(fp)
   41fe8:	10800217 	ldw	r2,8(r2)
   41fec:	e0fffd17 	ldw	r3,-12(fp)
   41ff0:	19000017 	ldw	r4,0(r3)
   41ff4:	e0fffd17 	ldw	r3,-12(fp)
   41ff8:	19409017 	ldw	r5,576(r3)
   41ffc:	e0fffd17 	ldw	r3,-12(fp)
   42000:	18c01004 	addi	r3,r3,64
   42004:	180d883a 	mov	r6,r3
   42008:	103ee83a 	callr	r2
   4200c:	e0bff515 	stw	r2,-44(fp)
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
   42010:	e0bff517 	ldw	r2,-44(fp)
   42014:	10000226 	beq	r2,zero,42020 <fatDelClusterList+0x1dc>
   42018:	e0bff617 	ldw	r2,-40(fp)
   4201c:	103fa526 	beq	r2,zero,41eb4 <__alt_data_end+0xfffdd4c4>
            }    
        }                
    }  // while                
    
    
    return bSuccess;
   42020:	e0bff517 	ldw	r2,-44(fp)

}
   42024:	e6ffff04 	addi	sp,fp,-4
   42028:	dfc00217 	ldw	ra,8(sp)
   4202c:	df000117 	ldw	fp,4(sp)
   42030:	dc000017 	ldw	r16,0(sp)
   42034:	dec00304 	addi	sp,sp,12
   42038:	f800283a 	ret

0004203c <fatDumpDate>:


void fatDumpDate(unsigned short Date){
   4203c:	defffb04 	addi	sp,sp,-20
   42040:	df000415 	stw	fp,16(sp)
   42044:	df000404 	addi	fp,sp,16
   42048:	2005883a 	mov	r2,r4
   4204c:	e0bfff0d 	sth	r2,-4(fp)
    int Year, Month, Day;
    Year = ((Date >> 9) & 0x1F) + 1980;
   42050:	e0bfff0b 	ldhu	r2,-4(fp)
   42054:	1004d27a 	srli	r2,r2,9
   42058:	10bfffcc 	andi	r2,r2,65535
   4205c:	108007cc 	andi	r2,r2,31
   42060:	1081ef04 	addi	r2,r2,1980
   42064:	e0bffc15 	stw	r2,-16(fp)
    Month = ((Date >> 5) & 0xF);
   42068:	e0bfff0b 	ldhu	r2,-4(fp)
   4206c:	1004d17a 	srli	r2,r2,5
   42070:	10bfffcc 	andi	r2,r2,65535
   42074:	108003cc 	andi	r2,r2,15
   42078:	e0bffd15 	stw	r2,-12(fp)
    Day = ((Date >> 0) & 0x1F);
   4207c:	e0bfff0b 	ldhu	r2,-4(fp)
   42080:	108007cc 	andi	r2,r2,31
   42084:	e0bffe15 	stw	r2,-8(fp)
    FAT_DEBUG(("%d,%d,%d", Year, Month, Day)); 
}
   42088:	e037883a 	mov	sp,fp
   4208c:	df000017 	ldw	fp,0(sp)
   42090:	dec00104 	addi	sp,sp,4
   42094:	f800283a 	ret

00042098 <fatDumpTime>:

void fatDumpTime(unsigned short Date){
   42098:	defffb04 	addi	sp,sp,-20
   4209c:	df000415 	stw	fp,16(sp)
   420a0:	df000404 	addi	fp,sp,16
   420a4:	2005883a 	mov	r2,r4
   420a8:	e0bfff0d 	sth	r2,-4(fp)
    int H,M,S;
    H = ((Date >> 9) & 0x1F);
   420ac:	e0bfff0b 	ldhu	r2,-4(fp)
   420b0:	1004d27a 	srli	r2,r2,9
   420b4:	10bfffcc 	andi	r2,r2,65535
   420b8:	108007cc 	andi	r2,r2,31
   420bc:	e0bffc15 	stw	r2,-16(fp)
    M = ((Date >> 5) & 0x3F);
   420c0:	e0bfff0b 	ldhu	r2,-4(fp)
   420c4:	1004d17a 	srli	r2,r2,5
   420c8:	10bfffcc 	andi	r2,r2,65535
   420cc:	10800fcc 	andi	r2,r2,63
   420d0:	e0bffd15 	stw	r2,-12(fp)
    S = ((Date >> 0) & 0x1F)*2;
   420d4:	e0bfff0b 	ldhu	r2,-4(fp)
   420d8:	108007cc 	andi	r2,r2,31
   420dc:	1085883a 	add	r2,r2,r2
   420e0:	e0bffe15 	stw	r2,-8(fp)
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
}
   420e4:	e037883a 	mov	sp,fp
   420e8:	df000017 	ldw	fp,0(sp)
   420ec:	dec00104 	addi	sp,sp,4
   420f0:	f800283a 	ret

000420f4 <fatIsLastDir>:

bool fatIsLastDir(FAT_DIRECTORY *pDir){
   420f4:	defffe04 	addi	sp,sp,-8
   420f8:	df000115 	stw	fp,4(sp)
   420fc:	df000104 	addi	fp,sp,4
   42100:	e13fff15 	stw	r4,-4(fp)
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
   42104:	e0bfff17 	ldw	r2,-4(fp)
   42108:	10800003 	ldbu	r2,0(r2)
   4210c:	10803fcc 	andi	r2,r2,255
   42110:	1080201c 	xori	r2,r2,128
   42114:	10bfe004 	addi	r2,r2,-128
   42118:	1000021e 	bne	r2,zero,42124 <fatIsLastDir+0x30>
        return TRUE;
   4211c:	00800044 	movi	r2,1
   42120:	00000106 	br	42128 <fatIsLastDir+0x34>
    return FALSE;        
   42124:	0005883a 	mov	r2,zero
}
   42128:	e037883a 	mov	sp,fp
   4212c:	df000017 	ldw	fp,0(sp)
   42130:	dec00104 	addi	sp,sp,4
   42134:	f800283a 	ret

00042138 <fatIsValidDir>:


bool fatIsValidDir(FAT_DIRECTORY *pDir){
   42138:	defff704 	addi	sp,sp,-36
   4213c:	dfc00815 	stw	ra,32(sp)
   42140:	df000715 	stw	fp,28(sp)
   42144:	df000704 	addi	fp,sp,28
   42148:	e13fff15 	stw	r4,-4(fp)
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
   4214c:	008001b4 	movhi	r2,6
   42150:	10a2de04 	addi	r2,r2,-29832
   42154:	e0fffa04 	addi	r3,fp,-24
   42158:	100b883a 	mov	r5,r2
   4215c:	00800444 	movi	r2,17
   42160:	1809883a 	mov	r4,r3
   42164:	100d883a 	mov	r6,r2
   42168:	00471540 	call	47154 <memcpy>
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
   4216c:	e03ff915 	stw	zero,-28(fp)
   42170:	00001206 	br	421bc <fatIsValidDir+0x84>
        if (pDir->Name[0] == szTest[i]){
   42174:	e0bfff17 	ldw	r2,-4(fp)
   42178:	11000003 	ldbu	r4,0(r2)
   4217c:	e0fffa04 	addi	r3,fp,-24
   42180:	e0bff917 	ldw	r2,-28(fp)
   42184:	1885883a 	add	r2,r3,r2
   42188:	10800003 	ldbu	r2,0(r2)
   4218c:	20c03fcc 	andi	r3,r4,255
   42190:	18c0201c 	xori	r3,r3,128
   42194:	18ffe004 	addi	r3,r3,-128
   42198:	10803fcc 	andi	r2,r2,255
   4219c:	1080201c 	xori	r2,r2,128
   421a0:	10bfe004 	addi	r2,r2,-128
   421a4:	1880021e 	bne	r3,r2,421b0 <fatIsValidDir+0x78>
            return FALSE;
   421a8:	0005883a 	mov	r2,zero
   421ac:	00000706 	br	421cc <fatIsValidDir+0x94>

bool fatIsValidDir(FAT_DIRECTORY *pDir){
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
   421b0:	e0bff917 	ldw	r2,-28(fp)
   421b4:	10800044 	addi	r2,r2,1
   421b8:	e0bff915 	stw	r2,-28(fp)
   421bc:	e0bff917 	ldw	r2,-28(fp)
   421c0:	10800470 	cmpltui	r2,r2,17
   421c4:	103feb1e 	bne	r2,zero,42174 <__alt_data_end+0xfffdd784>
        if (pDir->Name[0] == szTest[i]){
            return FALSE;
        }
    }    
    return TRUE;
   421c8:	00800044 	movi	r2,1
    
}
   421cc:	e037883a 	mov	sp,fp
   421d0:	dfc00117 	ldw	ra,4(sp)
   421d4:	df000017 	ldw	fp,0(sp)
   421d8:	dec00204 	addi	sp,sp,8
   421dc:	f800283a 	ret

000421e0 <fatIsUnusedDir>:

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
   421e0:	defffe04 	addi	sp,sp,-8
   421e4:	df000115 	stw	fp,4(sp)
   421e8:	df000104 	addi	fp,sp,4
   421ec:	e13fff15 	stw	r4,-4(fp)
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
   421f0:	e0bfff17 	ldw	r2,-4(fp)
   421f4:	10800003 	ldbu	r2,0(r2)
   421f8:	10803fcc 	andi	r2,r2,255
   421fc:	1080201c 	xori	r2,r2,128
   42200:	10bfe004 	addi	r2,r2,-128
   42204:	10bff958 	cmpnei	r2,r2,-27
   42208:	1000021e 	bne	r2,zero,42214 <fatIsUnusedDir+0x34>
        return TRUE;
   4220c:	00800044 	movi	r2,1
   42210:	00000106 	br	42218 <fatIsUnusedDir+0x38>
    return FALSE; 
   42214:	0005883a 	mov	r2,zero
}
   42218:	e037883a 	mov	sp,fp
   4221c:	df000017 	ldw	fp,0(sp)
   42220:	dec00104 	addi	sp,sp,4
   42224:	f800283a 	ret

00042228 <fatDump>:

// debug
void fatDump(FAT_DIRECTORY *pDir){
   42228:	defff804 	addi	sp,sp,-32
   4222c:	dfc00715 	stw	ra,28(sp)
   42230:	df000615 	stw	fp,24(sp)
   42234:	df000604 	addi	fp,sp,24
   42238:	e13fff15 	stw	r4,-4(fp)
    char szInvalidName[] = {0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
   4223c:	008001b4 	movhi	r2,6
   42240:	10a2e244 	addi	r2,r2,-29815
   42244:	e0fffb04 	addi	r3,fp,-20
   42248:	100b883a 	mov	r5,r2
   4224c:	008003c4 	movi	r2,15
   42250:	1809883a 	mov	r4,r3
   42254:	100d883a 	mov	r6,r2
   42258:	00471540 	call	47154 <memcpy>
    int i;
    if (pDir->Name[0] == (char)0xE5){
   4225c:	e0bfff17 	ldw	r2,-4(fp)
   42260:	10800003 	ldbu	r2,0(r2)
   42264:	10803fcc 	andi	r2,r2,255
   42268:	1080201c 	xori	r2,r2,128
   4226c:	10bfe004 	addi	r2,r2,-128
   42270:	10bff958 	cmpnei	r2,r2,-27
   42274:	1000011e 	bne	r2,zero,4227c <fatDump+0x54>
        FAT_DEBUG(("the directory entry is free.\n"));
        return;
   42278:	00004c06 	br	423ac <fatDump+0x184>
    }
    if (pDir->Name[0] == 0x00){
   4227c:	e0bfff17 	ldw	r2,-4(fp)
   42280:	10800003 	ldbu	r2,0(r2)
   42284:	10803fcc 	andi	r2,r2,255
   42288:	1080201c 	xori	r2,r2,128
   4228c:	10bfe004 	addi	r2,r2,-128
   42290:	1000011e 	bne	r2,zero,42298 <fatDump+0x70>
        FAT_DEBUG(("the directory entry is free, and there are no allocated directory entries after tis one.\n"));
        return;
   42294:	00004506 	br	423ac <fatDump+0x184>
    }
    
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
   42298:	e0bfff17 	ldw	r2,-4(fp)
   4229c:	10800003 	ldbu	r2,0(r2)
   422a0:	10803fcc 	andi	r2,r2,255
   422a4:	1080201c 	xori	r2,r2,128
   422a8:	10bfe004 	addi	r2,r2,-128
   422ac:	10800848 	cmpgei	r2,r2,33
   422b0:	1000081e 	bne	r2,zero,422d4 <fatDump+0xac>
   422b4:	e0bfff17 	ldw	r2,-4(fp)
   422b8:	10800003 	ldbu	r2,0(r2)
   422bc:	10803fcc 	andi	r2,r2,255
   422c0:	1080201c 	xori	r2,r2,128
   422c4:	10bfe004 	addi	r2,r2,-128
   422c8:	10800160 	cmpeqi	r2,r2,5
   422cc:	1000011e 	bne	r2,zero,422d4 <fatDump+0xac>
        FAT_DEBUG(("Invalid file name.\n"));
        return;
   422d0:	00003606 	br	423ac <fatDump+0x184>
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
   422d4:	e03ffa15 	stw	zero,-24(fp)
   422d8:	00001106 	br	42320 <fatDump+0xf8>
        if (pDir->Name[0] == szInvalidName[i]){
   422dc:	e0bfff17 	ldw	r2,-4(fp)
   422e0:	11000003 	ldbu	r4,0(r2)
   422e4:	e0fffb04 	addi	r3,fp,-20
   422e8:	e0bffa17 	ldw	r2,-24(fp)
   422ec:	1885883a 	add	r2,r3,r2
   422f0:	10800003 	ldbu	r2,0(r2)
   422f4:	20c03fcc 	andi	r3,r4,255
   422f8:	18c0201c 	xori	r3,r3,128
   422fc:	18ffe004 	addi	r3,r3,-128
   42300:	10803fcc 	andi	r2,r2,255
   42304:	1080201c 	xori	r2,r2,128
   42308:	10bfe004 	addi	r2,r2,-128
   4230c:	1880011e 	bne	r3,r2,42314 <fatDump+0xec>
            FAT_DEBUG(("Invalid file name.\n"));
            return;
   42310:	00002606 	br	423ac <fatDump+0x184>
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
        FAT_DEBUG(("Invalid file name.\n"));
        return;
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
   42314:	e0bffa17 	ldw	r2,-24(fp)
   42318:	10800044 	addi	r2,r2,1
   4231c:	e0bffa15 	stw	r2,-24(fp)
   42320:	e0bffa17 	ldw	r2,-24(fp)
   42324:	108003f0 	cmpltui	r2,r2,15
   42328:	103fec1e 	bne	r2,zero,422dc <__alt_data_end+0xfffdd8ec>
        FAT_DEBUG(("  Directory\n"));
    if (pDir->Attribute & ATTR_ARCHIVE)
        FAT_DEBUG(("  Archive\n"));
    if (pDir->Attribute & ATTR_LONG_NAME)
        FAT_DEBUG(("  Long Name\n"));
    FAT_DEBUG(("CreateTime:")); fatDumpTime(pDir->CreateTime);FAT_DEBUG(("\n"));
   4232c:	e0bfff17 	ldw	r2,-4(fp)
   42330:	10c00383 	ldbu	r3,14(r2)
   42334:	108003c3 	ldbu	r2,15(r2)
   42338:	1004923a 	slli	r2,r2,8
   4233c:	10c4b03a 	or	r2,r2,r3
   42340:	10bfffcc 	andi	r2,r2,65535
   42344:	1009883a 	mov	r4,r2
   42348:	00420980 	call	42098 <fatDumpTime>
    FAT_DEBUG(("CreateDate:")); fatDumpDate(pDir->LastAccessDate);FAT_DEBUG(("\n"));
   4234c:	e0bfff17 	ldw	r2,-4(fp)
   42350:	10c00483 	ldbu	r3,18(r2)
   42354:	108004c3 	ldbu	r2,19(r2)
   42358:	1004923a 	slli	r2,r2,8
   4235c:	10c4b03a 	or	r2,r2,r3
   42360:	10bfffcc 	andi	r2,r2,65535
   42364:	1009883a 	mov	r4,r2
   42368:	004203c0 	call	4203c <fatDumpDate>
    FAT_DEBUG(("ClusterHi:%04Xh\n", pDir->FirstLogicalClusterHi));
    FAT_DEBUG(("LastWriteTime:")); fatDumpTime(pDir->LastWriteTime);FAT_DEBUG(("\n"));
   4236c:	e0bfff17 	ldw	r2,-4(fp)
   42370:	10c00583 	ldbu	r3,22(r2)
   42374:	108005c3 	ldbu	r2,23(r2)
   42378:	1004923a 	slli	r2,r2,8
   4237c:	10c4b03a 	or	r2,r2,r3
   42380:	10bfffcc 	andi	r2,r2,65535
   42384:	1009883a 	mov	r4,r2
   42388:	00420980 	call	42098 <fatDumpTime>
    FAT_DEBUG(("LastWriteDate:")); fatDumpDate(pDir->LastWriteDate);FAT_DEBUG(("\n"));
   4238c:	e0bfff17 	ldw	r2,-4(fp)
   42390:	10c00603 	ldbu	r3,24(r2)
   42394:	10800643 	ldbu	r2,25(r2)
   42398:	1004923a 	slli	r2,r2,8
   4239c:	10c4b03a 	or	r2,r2,r3
   423a0:	10bfffcc 	andi	r2,r2,65535
   423a4:	1009883a 	mov	r4,r2
   423a8:	004203c0 	call	4203c <fatDumpDate>
    FAT_DEBUG(("Cluster:%04Xh(%d)\n", pDir->FirstLogicalCluster,pDir->FirstLogicalCluster));
    FAT_DEBUG(("File Size:%08Xh(%ld)\n", pDir->FileSize, (long)pDir->FileSize));
}
   423ac:	e037883a 	mov	sp,fp
   423b0:	dfc00117 	ldw	ra,4(sp)
   423b4:	df000017 	ldw	fp,0(sp)
   423b8:	dec00204 	addi	sp,sp,8
   423bc:	f800283a 	ret

000423c0 <fatArray2Value>:


unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
   423c0:	defffa04 	addi	sp,sp,-24
   423c4:	df000515 	stw	fp,20(sp)
   423c8:	df000504 	addi	fp,sp,20
   423cc:	e13ffe15 	stw	r4,-8(fp)
   423d0:	e17fff15 	stw	r5,-4(fp)
    alt_u8 *pMSB = (pValue + nNum - 1);
   423d4:	e0bfff17 	ldw	r2,-4(fp)
   423d8:	10bfffc4 	addi	r2,r2,-1
   423dc:	e0fffe17 	ldw	r3,-8(fp)
   423e0:	1885883a 	add	r2,r3,r2
   423e4:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
   423e8:	e03ffd15 	stw	zero,-12(fp)
   423ec:	00000e06 	br	42428 <fatArray2Value+0x68>
        nValue <<= 8;
   423f0:	e0bffc17 	ldw	r2,-16(fp)
   423f4:	1004923a 	slli	r2,r2,8
   423f8:	e0bffc15 	stw	r2,-16(fp)
        nValue |= *pMSB--;
   423fc:	e0bffb17 	ldw	r2,-20(fp)
   42400:	10ffffc4 	addi	r3,r2,-1
   42404:	e0fffb15 	stw	r3,-20(fp)
   42408:	10800003 	ldbu	r2,0(r2)
   4240c:	10803fcc 	andi	r2,r2,255
   42410:	e0fffc17 	ldw	r3,-16(fp)
   42414:	1884b03a 	or	r2,r3,r2
   42418:	e0bffc15 	stw	r2,-16(fp)

unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
   4241c:	e0bffd17 	ldw	r2,-12(fp)
   42420:	10800044 	addi	r2,r2,1
   42424:	e0bffd15 	stw	r2,-12(fp)
   42428:	e0fffd17 	ldw	r3,-12(fp)
   4242c:	e0bfff17 	ldw	r2,-4(fp)
   42430:	18bfef36 	bltu	r3,r2,423f0 <__alt_data_end+0xfffdda00>
        nValue <<= 8;
        nValue |= *pMSB--;
        
    }
    
    return nValue;
   42434:	e0bffc17 	ldw	r2,-16(fp)
}
   42438:	e037883a 	mov	sp,fp
   4243c:	df000017 	ldw	fp,0(sp)
   42440:	dec00104 	addi	sp,sp,4
   42444:	f800283a 	ret

00042448 <fatReadSecter>:

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
   42448:	defffb04 	addi	sp,sp,-20
   4244c:	dfc00415 	stw	ra,16(sp)
   42450:	df000315 	stw	fp,12(sp)
   42454:	df000304 	addi	fp,sp,12
   42458:	e13ffe15 	stw	r4,-8(fp)
   4245c:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
   42460:	00800044 	movi	r2,1
   42464:	e0bffd15 	stw	r2,-12(fp)
    if (nSecter != pVol->Secter_Index){
   42468:	e0bffe17 	ldw	r2,-8(fp)
   4246c:	10c09017 	ldw	r3,576(r2)
   42470:	e0bfff17 	ldw	r2,-4(fp)
   42474:	18801226 	beq	r3,r2,424c0 <fatReadSecter+0x78>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
   42478:	e0bffe17 	ldw	r2,-8(fp)
   4247c:	10800117 	ldw	r2,4(r2)
   42480:	e0fffe17 	ldw	r3,-8(fp)
   42484:	19000017 	ldw	r4,0(r3)
   42488:	e0fffe17 	ldw	r3,-8(fp)
   4248c:	18c01004 	addi	r3,r3,64
   42490:	e17fff17 	ldw	r5,-4(fp)
   42494:	180d883a 	mov	r6,r3
   42498:	103ee83a 	callr	r2
   4249c:	1000051e 	bne	r2,zero,424b4 <fatReadSecter+0x6c>
            pVol->Secter_Index = -1;
   424a0:	e0bffe17 	ldw	r2,-8(fp)
   424a4:	00ffffc4 	movi	r3,-1
   424a8:	10c09015 	stw	r3,576(r2)
            bSuccess = FALSE;
   424ac:	e03ffd15 	stw	zero,-12(fp)
   424b0:	00000306 	br	424c0 <fatReadSecter+0x78>
        }else{
            pVol->Secter_Index = nSecter;
   424b4:	e0bffe17 	ldw	r2,-8(fp)
   424b8:	e0ffff17 	ldw	r3,-4(fp)
   424bc:	10c09015 	stw	r3,576(r2)
        }
    }
    return bSuccess;          
   424c0:	e0bffd17 	ldw	r2,-12(fp)
}     
   424c4:	e037883a 	mov	sp,fp
   424c8:	dfc00117 	ldw	ra,4(sp)
   424cc:	df000017 	ldw	fp,0(sp)
   424d0:	dec00204 	addi	sp,sp,8
   424d4:	f800283a 	ret

000424d8 <fatFindDirectory>:

//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
   424d8:	defff804 	addi	sp,sp,-32
   424dc:	dfc00715 	stw	ra,28(sp)
   424e0:	df000615 	stw	fp,24(sp)
   424e4:	df000604 	addi	fp,sp,24
   424e8:	e13ffe15 	stw	r4,-8(fp)
   424ec:	e17fff15 	stw	r5,-4(fp)
    FAT_DIRECTORY *pDir=NULL;
   424f0:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
   424f4:	e0bfff17 	ldw	r2,-4(fp)
   424f8:	1006917a 	slli	r3,r2,5
   424fc:	e0bffe17 	ldw	r2,-8(fp)
   42500:	10800617 	ldw	r2,24(r2)
   42504:	1809883a 	mov	r4,r3
   42508:	100b883a 	mov	r5,r2
   4250c:	00453100 	call	45310 <__udivsi3>
   42510:	e0bffb15 	stw	r2,-20(fp)
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
   42514:	e0bffe17 	ldw	r2,-8(fp)
   42518:	10c00e17 	ldw	r3,56(r2)
   4251c:	e0bffb17 	ldw	r2,-20(fp)
   42520:	1885883a 	add	r2,r3,r2
   42524:	e0bffc15 	stw	r2,-16(fp)
        // read sector
    if (fatReadSecter(pVol, nSecter)){
   42528:	e13ffe17 	ldw	r4,-8(fp)
   4252c:	e17ffc17 	ldw	r5,-16(fp)
   42530:	00424480 	call	42448 <fatReadSecter>
   42534:	10000d26 	beq	r2,zero,4256c <fatFindDirectory+0x94>
        nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
   42538:	e0bfff17 	ldw	r2,-4(fp)
   4253c:	1006917a 	slli	r3,r2,5
   42540:	e0bffe17 	ldw	r2,-8(fp)
   42544:	10800617 	ldw	r2,24(r2)
   42548:	1809883a 	mov	r4,r3
   4254c:	100b883a 	mov	r5,r2
   42550:	00453180 	call	45318 <__umodsi3>
   42554:	e0bffd15 	stw	r2,-12(fp)
        pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
   42558:	e0bffd17 	ldw	r2,-12(fp)
   4255c:	10801004 	addi	r2,r2,64
   42560:	e0fffe17 	ldw	r3,-8(fp)
   42564:	1885883a 	add	r2,r3,r2
   42568:	e0bffa15 	stw	r2,-24(fp)
    }        
        
    return pDir;        
   4256c:	e0bffa17 	ldw	r2,-24(fp)
}
   42570:	e037883a 	mov	sp,fp
   42574:	dfc00117 	ldw	ra,4(sp)
   42578:	df000017 	ldw	fp,0(sp)
   4257c:	dec00204 	addi	sp,sp,8
   42580:	f800283a 	ret

00042584 <fatFindUnusedDirectory>:

//=================================================================================
//// add in v2.0
alt_u32 fatFindUnusedDirectory(VOLUME_INFO *pVol){
   42584:	defff604 	addi	sp,sp,-40
   42588:	dfc00915 	stw	ra,36(sp)
   4258c:	df000815 	stw	fp,32(sp)
   42590:	df000804 	addi	fp,sp,32
   42594:	e13fff15 	stw	r4,-4(fp)
    alt_u32 Dir = -1;
   42598:	00bfffc4 	movi	r2,-1
   4259c:	e0bff815 	stw	r2,-32(fp)
    FAT_DIRECTORY *pDir=NULL;
   425a0:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
   425a4:	00800084 	movi	r2,2
   425a8:	e0bff915 	stw	r2,-28(fp)
    bool bDone = FALSE;
   425ac:	e03ffa15 	stw	zero,-24(fp)
             
    while(!bDone){             
   425b0:	00003006 	br	42674 <fatFindUnusedDirectory+0xf0>
        nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
   425b4:	e0bff917 	ldw	r2,-28(fp)
   425b8:	1006917a 	slli	r3,r2,5
   425bc:	e0bfff17 	ldw	r2,-4(fp)
   425c0:	10800617 	ldw	r2,24(r2)
   425c4:	1809883a 	mov	r4,r3
   425c8:	100b883a 	mov	r5,r2
   425cc:	00453100 	call	45310 <__udivsi3>
   425d0:	e0bffc15 	stw	r2,-16(fp)
        nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
   425d4:	e0bfff17 	ldw	r2,-4(fp)
   425d8:	10c00e17 	ldw	r3,56(r2)
   425dc:	e0bffc17 	ldw	r2,-16(fp)
   425e0:	1885883a 	add	r2,r3,r2
   425e4:	e0bffd15 	stw	r2,-12(fp)
            // read sector
        if (fatReadSecter(pVol, nSecter)){
   425e8:	e13fff17 	ldw	r4,-4(fp)
   425ec:	e17ffd17 	ldw	r5,-12(fp)
   425f0:	00424480 	call	42448 <fatReadSecter>
   425f4:	10001e26 	beq	r2,zero,42670 <fatFindUnusedDirectory+0xec>
            nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
   425f8:	e0bff917 	ldw	r2,-28(fp)
   425fc:	1006917a 	slli	r3,r2,5
   42600:	e0bfff17 	ldw	r2,-4(fp)
   42604:	10800617 	ldw	r2,24(r2)
   42608:	1809883a 	mov	r4,r3
   4260c:	100b883a 	mov	r5,r2
   42610:	00453180 	call	45318 <__umodsi3>
   42614:	e0bffe15 	stw	r2,-8(fp)
            pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
   42618:	e0bffe17 	ldw	r2,-8(fp)
   4261c:	10801004 	addi	r2,r2,64
   42620:	e0ffff17 	ldw	r3,-4(fp)
   42624:	1885883a 	add	r2,r3,r2
   42628:	e0bffb15 	stw	r2,-20(fp)
            if (fatIsLastDir(pDir) || fatIsUnusedDir(pDir)){
   4262c:	e13ffb17 	ldw	r4,-20(fp)
   42630:	00420f40 	call	420f4 <fatIsLastDir>
   42634:	1000031e 	bne	r2,zero,42644 <fatFindUnusedDirectory+0xc0>
   42638:	e13ffb17 	ldw	r4,-20(fp)
   4263c:	00421e00 	call	421e0 <fatIsUnusedDir>
   42640:	10000726 	beq	r2,zero,42660 <fatFindUnusedDirectory+0xdc>
                bDone = TRUE;
   42644:	00800044 	movi	r2,1
   42648:	e0bffa15 	stw	r2,-24(fp)
                if (fatIsUnusedDir(pDir))
   4264c:	e13ffb17 	ldw	r4,-20(fp)
   42650:	00421e00 	call	421e0 <fatIsUnusedDir>
   42654:	10000226 	beq	r2,zero,42660 <fatFindUnusedDirectory+0xdc>
                    Dir = nDirectoryIndex;
   42658:	e0bff917 	ldw	r2,-28(fp)
   4265c:	e0bff815 	stw	r2,-32(fp)
            }
            nDirectoryIndex++;        
   42660:	e0bff917 	ldw	r2,-28(fp)
   42664:	10800044 	addi	r2,r2,1
   42668:	e0bff915 	stw	r2,-28(fp)
   4266c:	00000106 	br	42674 <fatFindUnusedDirectory+0xf0>
        }else{
                bDone = FALSE;
   42670:	e03ffa15 	stw	zero,-24(fp)
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
    bool bDone = FALSE;
             
    while(!bDone){             
   42674:	e0bffa17 	ldw	r2,-24(fp)
   42678:	103fce26 	beq	r2,zero,425b4 <__alt_data_end+0xfffddbc4>
        }else{
                bDone = FALSE;
        }
    }             
    
    return Dir;      
   4267c:	e0bff817 	ldw	r2,-32(fp)
}
   42680:	e037883a 	mov	sp,fp
   42684:	dfc00117 	ldw	ra,4(sp)
   42688:	df000017 	ldw	fp,0(sp)
   4268c:	dec00204 	addi	sp,sp,8
   42690:	f800283a 	ret

00042694 <fatMount>:

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
   42694:	deff7604 	addi	sp,sp,-552
   42698:	dfc08915 	stw	ra,548(sp)
   4269c:	df008815 	stw	fp,544(sp)
   426a0:	dc008715 	stw	r16,540(sp)
   426a4:	df008804 	addi	fp,sp,544
   426a8:	e13ffe15 	stw	r4,-8(fp)
    bool bSuccess = TRUE;
   426ac:	00800044 	movi	r2,1
   426b0:	e0bf7815 	stw	r2,-544(fp)
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
   426b4:	e0bffe17 	ldw	r2,-8(fp)
   426b8:	10800117 	ldw	r2,4(r2)
   426bc:	e0fffe17 	ldw	r3,-8(fp)
   426c0:	19000017 	ldw	r4,0(r3)
   426c4:	e0ff7e04 	addi	r3,fp,-520
   426c8:	000b883a 	mov	r5,zero
   426cc:	180d883a 	mov	r6,r3
   426d0:	103ee83a 	callr	r2
   426d4:	1000021e 	bne	r2,zero,426e0 <fatMount+0x4c>
        FAT_DEBUG(("Read section 0 error.\n"));
        return FALSE;
   426d8:	0005883a 	mov	r2,zero
   426dc:	0000ae06 	br	42998 <fatMount+0x304>
        return FALSE;
    }
    */
        
    // check file system 
    FirstPartitionEntry = 0x1BE;
   426e0:	00806f84 	movi	r2,446
   426e4:	e0bf7915 	stw	r2,-540(fp)
    //PartitionType = szBlock[FirstPartitionEntry + 4];
    PartitionType = szBlock[0x01C2];
   426e8:	e0bfee83 	ldbu	r2,-70(fp)
   426ec:	10803fcc 	andi	r2,r2,255
   426f0:	e0bf7a15 	stw	r2,-536(fp)
    if (PartitionType == PARTITION_FAT16){
   426f4:	e0bf7a17 	ldw	r2,-536(fp)
   426f8:	108001a0 	cmpeqi	r2,r2,6
   426fc:	1000051e 	bne	r2,zero,42714 <fatMount+0x80>
        FAT_DEBUG(("FAT16\n"));
    }else if (PartitionType == PARTITION_FAT32){
   42700:	e0bf7a17 	ldw	r2,-536(fp)
   42704:	108002e0 	cmpeqi	r2,r2,11
   42708:	1000021e 	bne	r2,zero,42714 <fatMount+0x80>
        FAT_DEBUG(("FAT32\n"));
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
   4270c:	0005883a 	mov	r2,zero
   42710:	0000a106 	br	42998 <fatMount+0x304>
    }       
    pVol->Partition_Type = PartitionType; 
   42714:	e0ff7a17 	ldw	r3,-536(fp)
   42718:	e0bffe17 	ldw	r2,-8(fp)
   4271c:	10c00315 	stw	r3,12(r2)
    // 2.2 Find the first section of partition 1                    
    FirstSectionInVolume1 = fatArray2Value(&szBlock[FirstPartitionEntry + 8],4);
   42720:	e0bf7917 	ldw	r2,-540(fp)
   42724:	10800204 	addi	r2,r2,8
   42728:	e0ff7e04 	addi	r3,fp,-520
   4272c:	1885883a 	add	r2,r3,r2
   42730:	1009883a 	mov	r4,r2
   42734:	01400104 	movi	r5,4
   42738:	00423c00 	call	423c0 <fatArray2Value>
   4273c:	e0bf7b15 	stw	r2,-532(fp)
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
   42740:	e0bffe17 	ldw	r2,-8(fp)
   42744:	10800117 	ldw	r2,4(r2)
   42748:	e0fffe17 	ldw	r3,-8(fp)
   4274c:	19000017 	ldw	r4,0(r3)
   42750:	e17f7b17 	ldw	r5,-532(fp)
   42754:	e0ff7e04 	addi	r3,fp,-520
   42758:	180d883a 	mov	r6,r3
   4275c:	103ee83a 	callr	r2
   42760:	1000021e 	bne	r2,zero,4276c <fatMount+0xd8>
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
   42764:	0005883a 	mov	r2,zero
   42768:	00008b06 	br	42998 <fatMount+0x304>
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
   4276c:	e0ff7b17 	ldw	r3,-532(fp)
   42770:	e0bffe17 	ldw	r2,-8(fp)
   42774:	10c00515 	stw	r3,20(r2)
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
   42778:	e0bf8103 	ldbu	r2,-508(fp)
   4277c:	10803fcc 	andi	r2,r2,255
   42780:	1006923a 	slli	r3,r2,8
   42784:	e0bf80c3 	ldbu	r2,-509(fp)
   42788:	10803fcc 	andi	r2,r2,255
   4278c:	1885883a 	add	r2,r3,r2
   42790:	1007883a 	mov	r3,r2
   42794:	e0bffe17 	ldw	r2,-8(fp)
   42798:	10c00615 	stw	r3,24(r2)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
   4279c:	e0bf8143 	ldbu	r2,-507(fp)
   427a0:	10c03fcc 	andi	r3,r2,255
   427a4:	e0bffe17 	ldw	r2,-8(fp)
   427a8:	10c00715 	stw	r3,28(r2)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
   427ac:	e0bf81c3 	ldbu	r2,-505(fp)
   427b0:	10803fcc 	andi	r2,r2,255
   427b4:	1006923a 	slli	r3,r2,8
   427b8:	e0bf8183 	ldbu	r2,-506(fp)
   427bc:	10803fcc 	andi	r2,r2,255
   427c0:	1885883a 	add	r2,r3,r2
   427c4:	1007883a 	mov	r3,r2
   427c8:	e0bffe17 	ldw	r2,-8(fp)
   427cc:	10c00815 	stw	r3,32(r2)
    pVol->BPB_NumFATs = szBlock[0x10];
   427d0:	e0bf8203 	ldbu	r2,-504(fp)
   427d4:	10c03fcc 	andi	r3,r2,255
   427d8:	e0bffe17 	ldw	r2,-8(fp)
   427dc:	10c00915 	stw	r3,36(r2)
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
   427e0:	e0bf8283 	ldbu	r2,-502(fp)
   427e4:	10803fcc 	andi	r2,r2,255
   427e8:	1006923a 	slli	r3,r2,8
   427ec:	e0bf8243 	ldbu	r2,-503(fp)
   427f0:	10803fcc 	andi	r2,r2,255
   427f4:	1885883a 	add	r2,r3,r2
   427f8:	1007883a 	mov	r3,r2
   427fc:	e0bffe17 	ldw	r2,-8(fp)
   42800:	10c00a15 	stw	r3,40(r2)
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
   42804:	e0bf83c3 	ldbu	r2,-497(fp)
   42808:	10803fcc 	andi	r2,r2,255
   4280c:	1006923a 	slli	r3,r2,8
   42810:	e0bf8383 	ldbu	r2,-498(fp)
   42814:	10803fcc 	andi	r2,r2,255
   42818:	1885883a 	add	r2,r3,r2
   4281c:	1007883a 	mov	r3,r2
   42820:	e0bffe17 	ldw	r2,-8(fp)
   42824:	10c00b15 	stw	r3,44(r2)
    
    // add for v2.0
    pVol->Secter_Index = -1;
   42828:	e0bffe17 	ldw	r2,-8(fp)
   4282c:	00ffffc4 	movi	r3,-1
   42830:	10c09015 	stw	r3,576(r2)
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
   42834:	e0bffe17 	ldw	r2,-8(fp)
   42838:	10801004 	addi	r2,r2,64
   4283c:	1009883a 	mov	r4,r2
   42840:	000b883a 	mov	r5,zero
   42844:	01808004 	movi	r6,512
   42848:	004728c0 	call	4728c <memset>
    
    if (pVol->Partition_Type == PARTITION_FAT32){
   4284c:	e0bffe17 	ldw	r2,-8(fp)
   42850:	10800317 	ldw	r2,12(r2)
   42854:	108002d8 	cmpnei	r2,r2,11
   42858:	1000081e 	bne	r2,zero,4287c <fatMount+0x1e8>
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
   4285c:	e0bf7e04 	addi	r2,fp,-520
   42860:	10800904 	addi	r2,r2,36
   42864:	1009883a 	mov	r4,r2
   42868:	01400104 	movi	r5,4
   4286c:	00423c00 	call	423c0 <fatArray2Value>
   42870:	1007883a 	mov	r3,r2
   42874:	e0bffe17 	ldw	r2,-8(fp)
   42878:	10c00b15 	stw	r3,44(r2)
        //pVol->BPB_RootEntCnt = fatArray2Value(&szBlock[0x2C], 4);  // BPB_RootClus            
    }
    
    if (pVol->BPB_BytsPerSec != MY_SECTER_SIZE){
   4287c:	e0bffe17 	ldw	r2,-8(fp)
   42880:	10800617 	ldw	r2,24(r2)
   42884:	10808020 	cmpeqi	r2,r2,512
   42888:	1000021e 	bne	r2,zero,42894 <fatMount+0x200>
        FAT_DEBUG(("This program only supports FAT BPB_BytsPerSec == %d\n", MY_SECTER_SIZE));
        return FALSE; // only support FAT16 in this example
   4288c:	0005883a 	mov	r2,zero
   42890:	00004106 	br	42998 <fatMount+0x304>
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", gVolumeInfo.BPB_NumFATs, gVolumeInfo.BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", gVolumeInfo.BPB_RootEntCnt, gVolumeInfo.BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", gVolumeInfo.BPB_FATSz, gVolumeInfo.BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
   42894:	e0bffe17 	ldw	r2,-8(fp)
   42898:	10c00517 	ldw	r3,20(r2)
   4289c:	e0bffe17 	ldw	r2,-8(fp)
   428a0:	10800817 	ldw	r2,32(r2)
   428a4:	1887883a 	add	r3,r3,r2
   428a8:	e0bffe17 	ldw	r2,-8(fp)
   428ac:	10c00d15 	stw	r3,52(r2)
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
   428b0:	e0bffe17 	ldw	r2,-8(fp)
   428b4:	14000d17 	ldw	r16,52(r2)
   428b8:	e0bffe17 	ldw	r2,-8(fp)
   428bc:	10c00917 	ldw	r3,36(r2)
   428c0:	e0bffe17 	ldw	r2,-8(fp)
   428c4:	10800b17 	ldw	r2,44(r2)
   428c8:	1809883a 	mov	r4,r3
   428cc:	100b883a 	mov	r5,r2
   428d0:	00453200 	call	45320 <__mulsi3>
   428d4:	8087883a 	add	r3,r16,r2
   428d8:	e0bffe17 	ldw	r2,-8(fp)
   428dc:	10c00e15 	stw	r3,56(r2)
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
   428e0:	e0bffe17 	ldw	r2,-8(fp)
   428e4:	14000e17 	ldw	r16,56(r2)
   428e8:	e0bffe17 	ldw	r2,-8(fp)
   428ec:	10800a17 	ldw	r2,40(r2)
   428f0:	1006917a 	slli	r3,r2,5
   428f4:	e0bffe17 	ldw	r2,-8(fp)
   428f8:	10800617 	ldw	r2,24(r2)
   428fc:	1885883a 	add	r2,r3,r2
   42900:	10ffffc4 	addi	r3,r2,-1
   42904:	e0bffe17 	ldw	r2,-8(fp)
   42908:	10800617 	ldw	r2,24(r2)
   4290c:	1809883a 	mov	r4,r3
   42910:	100b883a 	mov	r5,r2
   42914:	00453100 	call	45310 <__udivsi3>
   42918:	8087883a 	add	r3,r16,r2
   4291c:	e0bffe17 	ldw	r2,-8(fp)
   42920:	10c00f15 	stw	r3,60(r2)
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
   42924:	e0bffe17 	ldw	r2,-8(fp)
   42928:	10c00617 	ldw	r3,24(r2)
   4292c:	e0bffe17 	ldw	r2,-8(fp)
   42930:	10800717 	ldw	r2,28(r2)
   42934:	1809883a 	mov	r4,r3
   42938:	100b883a 	mov	r5,r2
   4293c:	00453200 	call	45320 <__mulsi3>
   42940:	1007883a 	mov	r3,r2
   42944:	e0bffe17 	ldw	r2,-8(fp)
   42948:	10c00c15 	stw	r3,48(r2)
    nFatTableSecterNum = pVol->BPB_NumFATs * pVol->BPB_FATSz;
   4294c:	e0bffe17 	ldw	r2,-8(fp)
   42950:	10c00917 	ldw	r3,36(r2)
   42954:	e0bffe17 	ldw	r2,-8(fp)
   42958:	10800b17 	ldw	r2,44(r2)
   4295c:	1809883a 	mov	r4,r3
   42960:	100b883a 	mov	r5,r2
   42964:	00453200 	call	45320 <__mulsi3>
   42968:	e0bf7c15 	stw	r2,-528(fp)
    nFatTableSize = nFatTableSecterNum * pVol->BPB_BytsPerSec;
   4296c:	e0bffe17 	ldw	r2,-8(fp)
   42970:	10c00617 	ldw	r3,24(r2)
   42974:	e0bf7c17 	ldw	r2,-528(fp)
   42978:	1809883a 	mov	r4,r3
   4297c:	100b883a 	mov	r5,r2
   42980:	00453200 	call	45320 <__mulsi3>
   42984:	e0bf7d15 	stw	r2,-524(fp)
    if (bSuccess){
        FAT_DEBUG(("Fat_Mount success\n"));
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    }        
    pVol->bMount = bSuccess;
   42988:	e0bffe17 	ldw	r2,-8(fp)
   4298c:	e0ff7817 	ldw	r3,-544(fp)
   42990:	10c00415 	stw	r3,16(r2)
    return bSuccess;   
   42994:	e0bf7817 	ldw	r2,-544(fp)
    

}
   42998:	e6ffff04 	addi	sp,fp,-4
   4299c:	dfc00217 	ldw	ra,8(sp)
   429a0:	df000117 	ldw	fp,4(sp)
   429a4:	dc000017 	ldw	r16,0(sp)
   429a8:	dec00304 	addi	sp,sp,12
   429ac:	f800283a 	ret

000429b0 <SD_ReadBlock512>:

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
   429b0:	defffb04 	addi	sp,sp,-20
   429b4:	dfc00415 	stw	ra,16(sp)
   429b8:	df000315 	stw	fp,12(sp)
   429bc:	df000304 	addi	fp,sp,12
   429c0:	e13ffd15 	stw	r4,-12(fp)
   429c4:	e17ffe15 	stw	r5,-8(fp)
   429c8:	e1bfff15 	stw	r6,-4(fp)
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
   429cc:	e13ffe17 	ldw	r4,-8(fp)
   429d0:	e17fff17 	ldw	r5,-4(fp)
   429d4:	0043a500 	call	43a50 <SDLIB_ReadBlock512>
}
   429d8:	e037883a 	mov	sp,fp
   429dc:	dfc00117 	ldw	ra,4(sp)
   429e0:	df000017 	ldw	fp,0(sp)
   429e4:	dec00204 	addi	sp,sp,8
   429e8:	f800283a 	ret

000429ec <SD_WriteBlock512>:

bool SD_WriteBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
   429ec:	defffb04 	addi	sp,sp,-20
   429f0:	dfc00415 	stw	ra,16(sp)
   429f4:	df000315 	stw	fp,12(sp)
   429f8:	df000304 	addi	fp,sp,12
   429fc:	e13ffd15 	stw	r4,-12(fp)
   42a00:	e17ffe15 	stw	r5,-8(fp)
   42a04:	e1bfff15 	stw	r6,-4(fp)
    return SDLIB_WriteBlock512(PysicalSelector, szBuf);
   42a08:	e13ffe17 	ldw	r4,-8(fp)
   42a0c:	e17fff17 	ldw	r5,-4(fp)
   42a10:	0043ad00 	call	43ad0 <SDLIB_WriteBlock512>
}
   42a14:	e037883a 	mov	sp,fp
   42a18:	dfc00117 	ldw	ra,4(sp)
   42a1c:	df000017 	ldw	fp,0(sp)
   42a20:	dec00204 	addi	sp,sp,8
   42a24:	f800283a 	ret

00042a28 <fatMountSdcard>:

FAT_HANDLE fatMountSdcard(void){
   42a28:	defff804 	addi	sp,sp,-32
   42a2c:	dfc00715 	stw	ra,28(sp)
   42a30:	df000615 	stw	fp,24(sp)
   42a34:	df000604 	addi	fp,sp,24
    FAT_HANDLE hFat = 0;
   42a38:	e03ffa15 	stw	zero,-24(fp)
    VOLUME_INFO *pVol;
    const int nMaxTry=10;
   42a3c:	00800284 	movi	r2,10
   42a40:	e0bffd15 	stw	r2,-12(fp)
    bool bFind = FALSE;
   42a44:	e03ffb15 	stw	zero,-20(fp)
    int nTry=0;
   42a48:	e03ffc15 	stw	zero,-16(fp)
    bool bSuccess = TRUE;
   42a4c:	00800044 	movi	r2,1
   42a50:	e0bffe15 	stw	r2,-8(fp)
    
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
   42a54:	00000706 	br	42a74 <fatMountSdcard+0x4c>
        bFind = SDLIB_Init();
   42a58:	004371c0 	call	4371c <SDLIB_Init>
   42a5c:	e0bffb15 	stw	r2,-20(fp)
        if (!bFind)
   42a60:	e0bffb17 	ldw	r2,-20(fp)
   42a64:	1000031e 	bne	r2,zero,42a74 <fatMountSdcard+0x4c>
            usleep(100*1000);
   42a68:	010000b4 	movhi	r4,2
   42a6c:	2121a804 	addi	r4,r4,-31072
   42a70:	0056a0c0 	call	56a0c <usleep>
    int nTry=0;
    bool bSuccess = TRUE;
    
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
   42a74:	e0bffb17 	ldw	r2,-20(fp)
   42a78:	1000051e 	bne	r2,zero,42a90 <fatMountSdcard+0x68>
   42a7c:	e0bffc17 	ldw	r2,-16(fp)
   42a80:	10c00044 	addi	r3,r2,1
   42a84:	e0fffc15 	stw	r3,-16(fp)
   42a88:	e0fffd17 	ldw	r3,-12(fp)
   42a8c:	10fff216 	blt	r2,r3,42a58 <__alt_data_end+0xfffde068>
        bFind = SDLIB_Init();
        if (!bFind)
            usleep(100*1000);
    }
    if (!bFind){
   42a90:	e0bffb17 	ldw	r2,-20(fp)
   42a94:	1000021e 	bne	r2,zero,42aa0 <fatMountSdcard+0x78>
        FAT_DEBUG(("Cannot find SD card.\n"));
        return hFat;
   42a98:	e0bffa17 	ldw	r2,-24(fp)
   42a9c:	00001a06 	br	42b08 <fatMountSdcard+0xe0>
    }    
    
    hFat = malloc(sizeof(VOLUME_INFO));
   42aa0:	01009104 	movi	r4,580
   42aa4:	00469840 	call	46984 <malloc>
   42aa8:	e0bffa15 	stw	r2,-24(fp)
    pVol = (VOLUME_INFO *)hFat;
   42aac:	e0bffa17 	ldw	r2,-24(fp)
   42ab0:	e0bfff15 	stw	r2,-4(fp)
    pVol->ReadBlock512 = SD_ReadBlock512;
   42ab4:	e0ffff17 	ldw	r3,-4(fp)
   42ab8:	00800134 	movhi	r2,4
   42abc:	108a6c04 	addi	r2,r2,10672
   42ac0:	18800115 	stw	r2,4(r3)
    pVol->WriteBlock512 = SD_WriteBlock512;
   42ac4:	e0ffff17 	ldw	r3,-4(fp)
   42ac8:	00800134 	movhi	r2,4
   42acc:	108a7b04 	addi	r2,r2,10732
   42ad0:	18800215 	stw	r2,8(r3)
    bSuccess = fatMount(pVol);
   42ad4:	e13fff17 	ldw	r4,-4(fp)
   42ad8:	00426940 	call	42694 <fatMount>
   42adc:	e0bffe15 	stw	r2,-8(fp)
        
    
  
    if (bSuccess){
   42ae0:	e0bffe17 	ldw	r2,-8(fp)
   42ae4:	10000426 	beq	r2,zero,42af8 <fatMountSdcard+0xd0>
        FAT_DEBUG(("Fat_Mount success\n"));
        pVol->bMount = TRUE;
   42ae8:	e0bfff17 	ldw	r2,-4(fp)
   42aec:	00c00044 	movi	r3,1
   42af0:	10c00415 	stw	r3,16(r2)
   42af4:	00000306 	br	42b04 <fatMountSdcard+0xdc>
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
        free((void *)hFat);
   42af8:	e13ffa17 	ldw	r4,-24(fp)
   42afc:	00469980 	call	46998 <free>
        hFat = 0;
   42b00:	e03ffa15 	stw	zero,-24(fp)
    }        

    return hFat;   
   42b04:	e0bffa17 	ldw	r2,-24(fp)
}
   42b08:	e037883a 	mov	sp,fp
   42b0c:	dfc00117 	ldw	ra,4(sp)
   42b10:	df000017 	ldw	fp,0(sp)
   42b14:	dec00204 	addi	sp,sp,8
   42b18:	f800283a 	ret

00042b1c <LED_AllOn>:
#include "LED.h"

#define LED_INIT_MASK   (0x01 << 24)


void LED_AllOn(void){
   42b1c:	defffe04 	addi	sp,sp,-8
   42b20:	dfc00115 	stw	ra,4(sp)
   42b24:	df000015 	stw	fp,0(sp)
   42b28:	d839883a 	mov	fp,sp
    LED_Display(0xFFFFFFFF);       
   42b2c:	013fffc4 	movi	r4,-1
   42b30:	0042b740 	call	42b74 <LED_Display>
}
   42b34:	e037883a 	mov	sp,fp
   42b38:	dfc00117 	ldw	ra,4(sp)
   42b3c:	df000017 	ldw	fp,0(sp)
   42b40:	dec00204 	addi	sp,sp,8
   42b44:	f800283a 	ret

00042b48 <LED_AllOff>:

void LED_AllOff(void){
   42b48:	defffe04 	addi	sp,sp,-8
   42b4c:	dfc00115 	stw	ra,4(sp)
   42b50:	df000015 	stw	fp,0(sp)
   42b54:	d839883a 	mov	fp,sp
    LED_Display(0x00);       
   42b58:	0009883a 	mov	r4,zero
   42b5c:	0042b740 	call	42b74 <LED_Display>
}
   42b60:	e037883a 	mov	sp,fp
   42b64:	dfc00117 	ldw	ra,4(sp)
   42b68:	df000017 	ldw	fp,0(sp)
   42b6c:	dec00204 	addi	sp,sp,8
   42b70:	f800283a 	ret

00042b74 <LED_Display>:

void LED_Display(alt_u32 Mask){ // 1: light, 0:unlight
   42b74:	defffd04 	addi	sp,sp,-12
   42b78:	df000215 	stw	fp,8(sp)
   42b7c:	df000204 	addi	fp,sp,8
   42b80:	e13fff15 	stw	r4,-4(fp)
    alt_u32 ThisMask;
    ThisMask = Mask;//~(Mask & 0x7FFFFFF);
   42b84:	e0bfff17 	ldw	r2,-4(fp)
   42b88:	e0bffe15 	stw	r2,-8(fp)
    IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, ThisMask >> 9);  //0:ligh, 1:unlight
   42b8c:	e0bffe17 	ldw	r2,-8(fp)
   42b90:	1004d27a 	srli	r2,r2,9
   42b94:	1007883a 	mov	r3,r2
   42b98:	00800234 	movhi	r2,8
   42b9c:	10841c04 	addi	r2,r2,4208
   42ba0:	10c00035 	stwio	r3,0(r2)
    
}
   42ba4:	e037883a 	mov	sp,fp
   42ba8:	df000017 	ldw	fp,0(sp)
   42bac:	dec00104 	addi	sp,sp,4
   42bb0:	f800283a 	ret

00042bb4 <LED_LightCount>:

void LED_LightCount(alt_u8 LightCount){ // 1: light, 0:unlight
   42bb4:	defffc04 	addi	sp,sp,-16
   42bb8:	df000315 	stw	fp,12(sp)
   42bbc:	df000304 	addi	fp,sp,12
   42bc0:	2005883a 	mov	r2,r4
   42bc4:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 Mask = 0;
   42bc8:	e03ffd15 	stw	zero,-12(fp)
    int i;
    for(i=0;i<LightCount;i++){
   42bcc:	e03ffe15 	stw	zero,-8(fp)
   42bd0:	00000906 	br	42bf8 <LED_LightCount+0x44>
        Mask <<= 1;
   42bd4:	e0bffd17 	ldw	r2,-12(fp)
   42bd8:	1085883a 	add	r2,r2,r2
   42bdc:	e0bffd15 	stw	r2,-12(fp)
        Mask |= 0x01;
   42be0:	e0bffd17 	ldw	r2,-12(fp)
   42be4:	10800054 	ori	r2,r2,1
   42be8:	e0bffd15 	stw	r2,-12(fp)
}

void LED_LightCount(alt_u8 LightCount){ // 1: light, 0:unlight
    alt_u32 Mask = 0;
    int i;
    for(i=0;i<LightCount;i++){
   42bec:	e0bffe17 	ldw	r2,-8(fp)
   42bf0:	10800044 	addi	r2,r2,1
   42bf4:	e0bffe15 	stw	r2,-8(fp)
   42bf8:	e0bfff03 	ldbu	r2,-4(fp)
   42bfc:	e0fffe17 	ldw	r3,-8(fp)
   42c00:	18bff416 	blt	r3,r2,42bd4 <__alt_data_end+0xfffde1e4>
        Mask <<= 1;
        Mask |= 0x01;
    }
    IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, Mask >> 8);  //0:ligh, 1:unlight
   42c04:	e0bffd17 	ldw	r2,-12(fp)
   42c08:	1004d23a 	srli	r2,r2,8
   42c0c:	1007883a 	mov	r3,r2
   42c10:	00800234 	movhi	r2,8
   42c14:	10841c04 	addi	r2,r2,4208
   42c18:	10c00035 	stwio	r3,0(r2)
    
}
   42c1c:	e037883a 	mov	sp,fp
   42c20:	df000017 	ldw	fp,0(sp)
   42c24:	dec00104 	addi	sp,sp,4
   42c28:	f800283a 	ret

00042c2c <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
   42c2c:	defffd04 	addi	sp,sp,-12
   42c30:	dfc00215 	stw	ra,8(sp)
   42c34:	df000115 	stw	fp,4(sp)
   42c38:	df000104 	addi	fp,sp,4
   42c3c:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
   42c40:	e13fff17 	ldw	r4,-4(fp)
   42c44:	00473dc0 	call	473dc <printf>
}
   42c48:	e037883a 	mov	sp,fp
   42c4c:	dfc00117 	ldw	ra,4(sp)
   42c50:	df000017 	ldw	fp,0(sp)
   42c54:	dec00204 	addi	sp,sp,8
   42c58:	f800283a 	ret

00042c5c <myprintf>:





int myprintf(char *format, ...){
   42c5c:	deff7804 	addi	sp,sp,-544
   42c60:	dfc08415 	stw	ra,528(sp)
   42c64:	df008315 	stw	fp,524(sp)
   42c68:	df008304 	addi	fp,sp,524
   42c6c:	e1400215 	stw	r5,8(fp)
   42c70:	e1800315 	stw	r6,12(fp)
   42c74:	e1c00415 	stw	r7,16(fp)
   42c78:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
   42c7c:	e0800204 	addi	r2,fp,8
   42c80:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
   42c84:	e0bffe17 	ldw	r2,-8(fp)
   42c88:	e0ff7e04 	addi	r3,fp,-520
   42c8c:	1809883a 	mov	r4,r3
   42c90:	01408004 	movi	r5,512
   42c94:	e1bfff17 	ldw	r6,-4(fp)
   42c98:	100f883a 	mov	r7,r2
   42c9c:	004ba480 	call	4ba48 <vsnprintf>
   42ca0:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
   42ca4:	e0bf7e04 	addi	r2,fp,-520
   42ca8:	1009883a 	mov	r4,r2
   42cac:	0042c2c0 	call	42c2c <debug_output>

    return rc;    
   42cb0:	e0bf7d17 	ldw	r2,-524(fp)
}
   42cb4:	e037883a 	mov	sp,fp
   42cb8:	dfc00117 	ldw	ra,4(sp)
   42cbc:	df000017 	ldw	fp,0(sp)
   42cc0:	dec00504 	addi	sp,sp,20
   42cc4:	f800283a 	ret

00042cc8 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
   42cc8:	defff704 	addi	sp,sp,-36
   42ccc:	dfc00815 	stw	ra,32(sp)
   42cd0:	df000715 	stw	fp,28(sp)
   42cd4:	df000704 	addi	fp,sp,28
   42cd8:	e13ffe15 	stw	r4,-8(fp)
   42cdc:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   42ce0:	e03ff915 	stw	zero,-28(fp)
   42ce4:	00001106 	br	42d2c <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
   42ce8:	e0bff917 	ldw	r2,-28(fp)
   42cec:	e0fffe17 	ldw	r3,-8(fp)
   42cf0:	1885883a 	add	r2,r3,r2
   42cf4:	10800003 	ldbu	r2,0(r2)
   42cf8:	10803fcc 	andi	r2,r2,255
   42cfc:	e0fffa04 	addi	r3,fp,-24
   42d00:	1809883a 	mov	r4,r3
   42d04:	014001b4 	movhi	r5,6
   42d08:	2962e604 	addi	r5,r5,-29800
   42d0c:	100d883a 	mov	r6,r2
   42d10:	00475b00 	call	475b0 <sprintf>
        DEBUG((szText));
   42d14:	e0bffa04 	addi	r2,fp,-24
   42d18:	1009883a 	mov	r4,r2
   42d1c:	0042c5c0 	call	42c5c <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   42d20:	e0bff917 	ldw	r2,-28(fp)
   42d24:	10800044 	addi	r2,r2,1
   42d28:	e0bff915 	stw	r2,-28(fp)
   42d2c:	e0fff917 	ldw	r3,-28(fp)
   42d30:	e0bfff17 	ldw	r2,-4(fp)
   42d34:	18bfec16 	blt	r3,r2,42ce8 <__alt_data_end+0xfffde2f8>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
   42d38:	e0bfff17 	ldw	r2,-4(fp)
}
   42d3c:	e037883a 	mov	sp,fp
   42d40:	dfc00117 	ldw	ra,4(sp)
   42d44:	df000017 	ldw	fp,0(sp)
   42d48:	dec00204 	addi	sp,sp,8
   42d4c:	f800283a 	ret

00042d50 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
   42d50:	defff704 	addi	sp,sp,-36
   42d54:	dfc00815 	stw	ra,32(sp)
   42d58:	df000715 	stw	fp,28(sp)
   42d5c:	df000704 	addi	fp,sp,28
   42d60:	e13ffe15 	stw	r4,-8(fp)
   42d64:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   42d68:	e03ff915 	stw	zero,-28(fp)
   42d6c:	00001306 	br	42dbc <myprintf_dwordarray+0x6c>
        sprintf(szText, "[%08X]", *(pArray+i));
   42d70:	e0bff917 	ldw	r2,-28(fp)
   42d74:	1085883a 	add	r2,r2,r2
   42d78:	1085883a 	add	r2,r2,r2
   42d7c:	1007883a 	mov	r3,r2
   42d80:	e0bffe17 	ldw	r2,-8(fp)
   42d84:	10c5883a 	add	r2,r2,r3
   42d88:	10800017 	ldw	r2,0(r2)
   42d8c:	e0fffa04 	addi	r3,fp,-24
   42d90:	1809883a 	mov	r4,r3
   42d94:	014001b4 	movhi	r5,6
   42d98:	2962e804 	addi	r5,r5,-29792
   42d9c:	100d883a 	mov	r6,r2
   42da0:	00475b00 	call	475b0 <sprintf>
        DEBUG((szText));
   42da4:	e0bffa04 	addi	r2,fp,-24
   42da8:	1009883a 	mov	r4,r2
   42dac:	0042c5c0 	call	42c5c <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   42db0:	e0bff917 	ldw	r2,-28(fp)
   42db4:	10800044 	addi	r2,r2,1
   42db8:	e0bff915 	stw	r2,-28(fp)
   42dbc:	e0fff917 	ldw	r3,-28(fp)
   42dc0:	e0bfff17 	ldw	r2,-4(fp)
   42dc4:	18bfea16 	blt	r3,r2,42d70 <__alt_data_end+0xfffde380>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
   42dc8:	e0bfff17 	ldw	r2,-4(fp)
}
   42dcc:	e037883a 	mov	sp,fp
   42dd0:	dfc00117 	ldw	ra,4(sp)
   42dd4:	df000017 	ldw	fp,0(sp)
   42dd8:	dec00204 	addi	sp,sp,8
   42ddc:	f800283a 	ret

00042de0 <crc16>:
    0x7c26,0x6c07,0x5c64,0x4c45,0x3ca2,0x2c83,0x1ce0,0x0cc1,
    0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8,
    0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0
};
  
alt_u16 crc16(const alt_u8 *buffer, int len){
   42de0:	defffb04 	addi	sp,sp,-20
   42de4:	df000415 	stw	fp,16(sp)
   42de8:	df000404 	addi	fp,sp,16
   42dec:	e13ffe15 	stw	r4,-8(fp)
   42df0:	e17fff15 	stw	r5,-4(fp)

    int counter;
    alt_u16 crc = 0;
   42df4:	e03ffd0d 	sth	zero,-12(fp)
    for( counter = 0; counter < len; counter++)
   42df8:	e03ffc15 	stw	zero,-16(fp)
   42dfc:	00001906 	br	42e64 <crc16+0x84>
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buffer++)&0x00FF];
   42e00:	e0bffd0b 	ldhu	r2,-12(fp)
   42e04:	1004923a 	slli	r2,r2,8
   42e08:	100b883a 	mov	r5,r2
   42e0c:	e0bffd0b 	ldhu	r2,-12(fp)
   42e10:	1004d23a 	srli	r2,r2,8
   42e14:	10ffffcc 	andi	r3,r2,65535
   42e18:	e0bffe17 	ldw	r2,-8(fp)
   42e1c:	11000044 	addi	r4,r2,1
   42e20:	e13ffe15 	stw	r4,-8(fp)
   42e24:	10800003 	ldbu	r2,0(r2)
   42e28:	10803fcc 	andi	r2,r2,255
   42e2c:	1080201c 	xori	r2,r2,128
   42e30:	10bfe004 	addi	r2,r2,-128
   42e34:	1884f03a 	xor	r2,r3,r2
   42e38:	10c03fcc 	andi	r3,r2,255
   42e3c:	008001b4 	movhi	r2,6
   42e40:	10a2ea04 	addi	r2,r2,-29784
   42e44:	18c7883a 	add	r3,r3,r3
   42e48:	10c5883a 	add	r2,r2,r3
   42e4c:	1080000b 	ldhu	r2,0(r2)
   42e50:	2884f03a 	xor	r2,r5,r2
   42e54:	e0bffd0d 	sth	r2,-12(fp)
  
alt_u16 crc16(const alt_u8 *buffer, int len){

    int counter;
    alt_u16 crc = 0;
    for( counter = 0; counter < len; counter++)
   42e58:	e0bffc17 	ldw	r2,-16(fp)
   42e5c:	10800044 	addi	r2,r2,1
   42e60:	e0bffc15 	stw	r2,-16(fp)
   42e64:	e0fffc17 	ldw	r3,-16(fp)
   42e68:	e0bfff17 	ldw	r2,-4(fp)
   42e6c:	18bfe416 	blt	r3,r2,42e00 <__alt_data_end+0xfffde410>
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buffer++)&0x00FF];
    return crc;
   42e70:	e0bffd0b 	ldhu	r2,-12(fp)
}
   42e74:	e037883a 	mov	sp,fp
   42e78:	df000017 	ldw	fp,0(sp)
   42e7c:	dec00104 	addi	sp,sp,4
   42e80:	f800283a 	ret

00042e84 <crc7_byte>:
      0x0e, 0x07, 0x1c, 0x15, 0x2a, 0x23, 0x38, 0x31,
      0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};

alt_u8 crc7_byte(alt_u8 crc, alt_u8 data)
{
   42e84:	defffd04 	addi	sp,sp,-12
   42e88:	df000215 	stw	fp,8(sp)
   42e8c:	df000204 	addi	fp,sp,8
   42e90:	2007883a 	mov	r3,r4
   42e94:	2805883a 	mov	r2,r5
   42e98:	e0fffe05 	stb	r3,-8(fp)
   42e9c:	e0bfff05 	stb	r2,-4(fp)
        return crc7_syndrome_table[(crc << 1) ^ data];
   42ea0:	e0bffe03 	ldbu	r2,-8(fp)
   42ea4:	1085883a 	add	r2,r2,r2
   42ea8:	1007883a 	mov	r3,r2
   42eac:	e0bfff03 	ldbu	r2,-4(fp)
   42eb0:	1886f03a 	xor	r3,r3,r2
   42eb4:	008001b4 	movhi	r2,6
   42eb8:	10a36a04 	addi	r2,r2,-29272
   42ebc:	10c5883a 	add	r2,r2,r3
   42ec0:	10800003 	ldbu	r2,0(r2)
}
   42ec4:	e037883a 	mov	sp,fp
   42ec8:	df000017 	ldw	fp,0(sp)
   42ecc:	dec00104 	addi	sp,sp,4
   42ed0:	f800283a 	ret

00042ed4 <crc7>:
 * Context: any
 *
 * Returns the updated CRC7 value.
 */
alt_u8 crc7(alt_u8 crc, const alt_u8 *buffer, int len)
{
   42ed4:	defffb04 	addi	sp,sp,-20
   42ed8:	dfc00415 	stw	ra,16(sp)
   42edc:	df000315 	stw	fp,12(sp)
   42ee0:	df000304 	addi	fp,sp,12
   42ee4:	2005883a 	mov	r2,r4
   42ee8:	e17ffe15 	stw	r5,-8(fp)
   42eec:	e1bfff15 	stw	r6,-4(fp)
   42ef0:	e0bffd05 	stb	r2,-12(fp)
      while (len--)
   42ef4:	00000906 	br	42f1c <crc7+0x48>
            crc = crc7_byte(crc, *buffer++);
   42ef8:	e13ffd03 	ldbu	r4,-12(fp)
   42efc:	e0bffe17 	ldw	r2,-8(fp)
   42f00:	10c00044 	addi	r3,r2,1
   42f04:	e0fffe15 	stw	r3,-8(fp)
   42f08:	10800003 	ldbu	r2,0(r2)
   42f0c:	10803fcc 	andi	r2,r2,255
   42f10:	100b883a 	mov	r5,r2
   42f14:	0042e840 	call	42e84 <crc7_byte>
   42f18:	e0bffd05 	stb	r2,-12(fp)
 *
 * Returns the updated CRC7 value.
 */
alt_u8 crc7(alt_u8 crc, const alt_u8 *buffer, int len)
{
      while (len--)
   42f1c:	e0bfff17 	ldw	r2,-4(fp)
   42f20:	10ffffc4 	addi	r3,r2,-1
   42f24:	e0ffff15 	stw	r3,-4(fp)
   42f28:	103ff31e 	bne	r2,zero,42ef8 <__alt_data_end+0xfffde508>
            crc = crc7_byte(crc, *buffer++);
      return crc;
   42f2c:	e0bffd03 	ldbu	r2,-12(fp)
}
   42f30:	e037883a 	mov	sp,fp
   42f34:	dfc00117 	ldw	ra,4(sp)
   42f38:	df000017 	ldw	fp,0(sp)
   42f3c:	dec00204 	addi	sp,sp,8
   42f40:	f800283a 	ret

00042f44 <SDHAL_IsSupport4Bits>:
#include "sd_hal.h"
#include "sd_hw.h"
#include "crc16.h"


bool SDHAL_IsSupport4Bits(void){
   42f44:	defffe04 	addi	sp,sp,-8
   42f48:	df000115 	stw	fp,4(sp)
   42f4c:	df000104 	addi	fp,sp,4
    bool bYes = FALSE;
   42f50:	e03fff15 	stw	zero,-4(fp)
#ifdef SD_4BIT_MODE
    bYes = TRUE;
   42f54:	00800044 	movi	r2,1
   42f58:	e0bfff15 	stw	r2,-4(fp)
#endif    
    return bYes;
   42f5c:	e0bfff17 	ldw	r2,-4(fp)
}
   42f60:	e037883a 	mov	sp,fp
   42f64:	df000017 	ldw	fp,0(sp)
   42f68:	dec00104 	addi	sp,sp,4
   42f6c:	f800283a 	ret

00042f70 <SDHAL_Init>:

void SDHAL_Init(void){
   42f70:	deffff04 	addi	sp,sp,-4
   42f74:	df000015 	stw	fp,0(sp)
   42f78:	d839883a 	mov	fp,sp
    SD_CMD_OUT;
   42f7c:	00c00044 	movi	r3,1
   42f80:	00800234 	movhi	r2,8
   42f84:	10842504 	addi	r2,r2,4244
   42f88:	10c00035 	stwio	r3,0(r2)
   42f8c:	00c00044 	movi	r3,1
   42f90:	00800234 	movhi	r2,8
   42f94:	10840c04 	addi	r2,r2,4144
   42f98:	10c00035 	stwio	r3,0(r2)
    SD_DAT_IN;
   42f9c:	0007883a 	mov	r3,zero
   42fa0:	00800234 	movhi	r2,8
   42fa4:	10842104 	addi	r2,r2,4228
   42fa8:	10c00035 	stwio	r3,0(r2)
   42fac:	0007883a 	mov	r3,zero
   42fb0:	00800234 	movhi	r2,8
   42fb4:	10841404 	addi	r2,r2,4176
   42fb8:	10c00035 	stwio	r3,0(r2)
   42fbc:	0007883a 	mov	r3,zero
   42fc0:	00800234 	movhi	r2,8
   42fc4:	10841004 	addi	r2,r2,4160
   42fc8:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
   42fcc:	00c00044 	movi	r3,1
   42fd0:	00800234 	movhi	r2,8
   42fd4:	10842804 	addi	r2,r2,4256
   42fd8:	10c00035 	stwio	r3,0(r2)
    SD_CMD_HIGH;
   42fdc:	00c00044 	movi	r3,1
   42fe0:	00800234 	movhi	r2,8
   42fe4:	10842404 	addi	r2,r2,4240
   42fe8:	10c00035 	stwio	r3,0(r2)
    SD_DAT_LOW;    
   42fec:	0007883a 	mov	r3,zero
   42ff0:	00800234 	movhi	r2,8
   42ff4:	10842004 	addi	r2,r2,4224
   42ff8:	10c00035 	stwio	r3,0(r2)
}
   42ffc:	e037883a 	mov	sp,fp
   43000:	df000017 	ldw	fp,0(sp)
   43004:	dec00104 	addi	sp,sp,4
   43008:	f800283a 	ret

0004300c <SDHAL_SendCmd>:

void SDHAL_SendCmd(alt_u8 szCommand[6], int nCmdLen){
   4300c:	defffa04 	addi	sp,sp,-24
   43010:	df000515 	stw	fp,20(sp)
   43014:	df000504 	addi	fp,sp,20
   43018:	e13ffe15 	stw	r4,-8(fp)
   4301c:	e17fff15 	stw	r5,-4(fp)

    int i, k;
    alt_u8 Mask, Data;
    
    SD_CMD_OUT;
   43020:	00c00044 	movi	r3,1
   43024:	00800234 	movhi	r2,8
   43028:	10842504 	addi	r2,r2,4244
   4302c:	10c00035 	stwio	r3,0(r2)
   43030:	00c00044 	movi	r3,1
   43034:	00800234 	movhi	r2,8
   43038:	10840c04 	addi	r2,r2,4144
   4303c:	10c00035 	stwio	r3,0(r2)
    for(i=0;i<nCmdLen;i++){
   43040:	e03ffb15 	stw	zero,-20(fp)
   43044:	00002b06 	br	430f4 <SDHAL_SendCmd+0xe8>
        Mask = 0x80;
   43048:	00bfe004 	movi	r2,-128
   4304c:	e0bffd05 	stb	r2,-12(fp)
        Data = szCommand[i];
   43050:	e0bffb17 	ldw	r2,-20(fp)
   43054:	e0fffe17 	ldw	r3,-8(fp)
   43058:	1885883a 	add	r2,r3,r2
   4305c:	10800003 	ldbu	r2,0(r2)
   43060:	e0bffd45 	stb	r2,-11(fp)
        for(k=0;k<8;k++){
   43064:	e03ffc15 	stw	zero,-16(fp)
   43068:	00001c06 	br	430dc <SDHAL_SendCmd+0xd0>
            SD_CLK_LOW;
   4306c:	0007883a 	mov	r3,zero
   43070:	00800234 	movhi	r2,8
   43074:	10842804 	addi	r2,r2,4256
   43078:	10c00035 	stwio	r3,0(r2)
            if (Data & Mask)
   4307c:	e0fffd43 	ldbu	r3,-11(fp)
   43080:	e0bffd03 	ldbu	r2,-12(fp)
   43084:	1884703a 	and	r2,r3,r2
   43088:	10803fcc 	andi	r2,r2,255
   4308c:	10000526 	beq	r2,zero,430a4 <SDHAL_SendCmd+0x98>
                SD_CMD_HIGH;
   43090:	00c00044 	movi	r3,1
   43094:	00800234 	movhi	r2,8
   43098:	10842404 	addi	r2,r2,4240
   4309c:	10c00035 	stwio	r3,0(r2)
   430a0:	00000406 	br	430b4 <SDHAL_SendCmd+0xa8>
            else
                SD_CMD_LOW;
   430a4:	0007883a 	mov	r3,zero
   430a8:	00800234 	movhi	r2,8
   430ac:	10842404 	addi	r2,r2,4240
   430b0:	10c00035 	stwio	r3,0(r2)
            SD_CLK_HIGH;    
   430b4:	00c00044 	movi	r3,1
   430b8:	00800234 	movhi	r2,8
   430bc:	10842804 	addi	r2,r2,4256
   430c0:	10c00035 	stwio	r3,0(r2)
            //    
            Mask >>= 1;
   430c4:	e0bffd03 	ldbu	r2,-12(fp)
   430c8:	1004d07a 	srli	r2,r2,1
   430cc:	e0bffd05 	stb	r2,-12(fp)
    
    SD_CMD_OUT;
    for(i=0;i<nCmdLen;i++){
        Mask = 0x80;
        Data = szCommand[i];
        for(k=0;k<8;k++){
   430d0:	e0bffc17 	ldw	r2,-16(fp)
   430d4:	10800044 	addi	r2,r2,1
   430d8:	e0bffc15 	stw	r2,-16(fp)
   430dc:	e0bffc17 	ldw	r2,-16(fp)
   430e0:	10800210 	cmplti	r2,r2,8
   430e4:	103fe11e 	bne	r2,zero,4306c <__alt_data_end+0xfffde67c>

    int i, k;
    alt_u8 Mask, Data;
    
    SD_CMD_OUT;
    for(i=0;i<nCmdLen;i++){
   430e8:	e0bffb17 	ldw	r2,-20(fp)
   430ec:	10800044 	addi	r2,r2,1
   430f0:	e0bffb15 	stw	r2,-20(fp)
   430f4:	e0fffb17 	ldw	r3,-20(fp)
   430f8:	e0bfff17 	ldw	r2,-4(fp)
   430fc:	18bfd216 	blt	r3,r2,43048 <__alt_data_end+0xfffde658>
            //    
            Mask >>= 1;
           // usleep(1);
        }
    }
}
   43100:	e037883a 	mov	sp,fp
   43104:	df000017 	ldw	fp,0(sp)
   43108:	dec00104 	addi	sp,sp,4
   4310c:	f800283a 	ret

00043110 <SDHAL_GetResponse>:




bool SDHAL_GetResponse(alt_u8 szResponse[], int nLen){
   43110:	defff504 	addi	sp,sp,-44
   43114:	dfc00a15 	stw	ra,40(sp)
   43118:	df000915 	stw	fp,36(sp)
   4311c:	df000904 	addi	fp,sp,36
   43120:	e13ffe15 	stw	r4,-8(fp)
   43124:	e17fff15 	stw	r5,-4(fp)
    bool bDone, bTimeout;
    const int nMaxCnt = 20; // !!!! Note. the value should be large than 8
   43128:	00800504 	movi	r2,20
   4312c:	e0bffc15 	stw	r2,-16(fp)
    int nCnt, nBitCnt, nIndex;
    alt_u8 Value;
    

    SD_CMD_IN;
   43130:	0007883a 	mov	r3,zero
   43134:	00800234 	movhi	r2,8
   43138:	10842504 	addi	r2,r2,4244
   4313c:	10c00035 	stwio	r3,0(r2)
   43140:	0007883a 	mov	r3,zero
   43144:	00800234 	movhi	r2,8
   43148:	10840c04 	addi	r2,r2,4144
   4314c:	10c00035 	stwio	r3,0(r2)
    
    //===== check start bit == 0
    nCnt = 0;
   43150:	e03ff915 	stw	zero,-28(fp)
    bDone = FALSE;
   43154:	e03ff715 	stw	zero,-36(fp)
    bTimeout = FALSE;
   43158:	e03ff815 	stw	zero,-32(fp)
    while(!bDone && !bTimeout){
   4315c:	00001606 	br	431b8 <SDHAL_GetResponse+0xa8>
        SD_CLK_LOW;
   43160:	0007883a 	mov	r3,zero
   43164:	00800234 	movhi	r2,8
   43168:	10842804 	addi	r2,r2,4256
   4316c:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
   43170:	00c00044 	movi	r3,1
   43174:	00800234 	movhi	r2,8
   43178:	10842804 	addi	r2,r2,4256
   4317c:	10c00035 	stwio	r3,0(r2)
        if(!(SD_TEST_CMD))
   43180:	00800234 	movhi	r2,8
   43184:	10842404 	addi	r2,r2,4240
   43188:	10800037 	ldwio	r2,0(r2)
   4318c:	1000031e 	bne	r2,zero,4319c <SDHAL_GetResponse+0x8c>
            bDone = TRUE;
   43190:	00800044 	movi	r2,1
   43194:	e0bff715 	stw	r2,-36(fp)
   43198:	00000706 	br	431b8 <SDHAL_GetResponse+0xa8>
        else if(nCnt++ > nMaxCnt)
   4319c:	e0bff917 	ldw	r2,-28(fp)
   431a0:	10c00044 	addi	r3,r2,1
   431a4:	e0fff915 	stw	r3,-28(fp)
   431a8:	e0fffc17 	ldw	r3,-16(fp)
   431ac:	1880020e 	bge	r3,r2,431b8 <SDHAL_GetResponse+0xa8>
            bTimeout = TRUE;
   431b0:	00800044 	movi	r2,1
   431b4:	e0bff815 	stw	r2,-32(fp)
    
    //===== check start bit == 0
    nCnt = 0;
    bDone = FALSE;
    bTimeout = FALSE;
    while(!bDone && !bTimeout){
   431b8:	e0bff717 	ldw	r2,-36(fp)
   431bc:	1000021e 	bne	r2,zero,431c8 <SDHAL_GetResponse+0xb8>
   431c0:	e0bff817 	ldw	r2,-32(fp)
   431c4:	103fe626 	beq	r2,zero,43160 <__alt_data_end+0xfffde770>
            bDone = TRUE;
        else if(nCnt++ > nMaxCnt)
            bTimeout = TRUE;
    }
    
    if (!bDone || bTimeout)
   431c8:	e0bff717 	ldw	r2,-36(fp)
   431cc:	10000226 	beq	r2,zero,431d8 <SDHAL_GetResponse+0xc8>
   431d0:	e0bff817 	ldw	r2,-32(fp)
   431d4:	10000226 	beq	r2,zero,431e0 <SDHAL_GetResponse+0xd0>
        return FALSE;
   431d8:	0005883a 	mov	r2,zero
   431dc:	00005006 	br	43320 <SDHAL_GetResponse+0x210>
  
    //===== check transmitter bit == 0

    SD_CLK_LOW;
   431e0:	0007883a 	mov	r3,zero
   431e4:	00800234 	movhi	r2,8
   431e8:	10842804 	addi	r2,r2,4256
   431ec:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
   431f0:	00c00044 	movi	r3,1
   431f4:	00800234 	movhi	r2,8
   431f8:	10842804 	addi	r2,r2,4256
   431fc:	10c00035 	stwio	r3,0(r2)
    if (SD_TEST_CMD)
   43200:	00800234 	movhi	r2,8
   43204:	10842404 	addi	r2,r2,4240
   43208:	10800037 	ldwio	r2,0(r2)
   4320c:	10000226 	beq	r2,zero,43218 <SDHAL_GetResponse+0x108>
        return FALSE;   // 0 is expected
   43210:	0005883a 	mov	r2,zero
   43214:	00004206 	br	43320 <SDHAL_GetResponse+0x210>

    
    //===== read content + CRC + end-bits ======
    nIndex = 2;
   43218:	00800084 	movi	r2,2
   4321c:	e0bffa15 	stw	r2,-24(fp)
    nBitCnt = nLen*8;
   43220:	e0bfff17 	ldw	r2,-4(fp)
   43224:	100490fa 	slli	r2,r2,3
   43228:	e0bffd15 	stw	r2,-12(fp)
    bDone = FALSE;
   4322c:	e03ff715 	stw	zero,-36(fp)
    Value = 0;
   43230:	e03ffb05 	stb	zero,-20(fp)
    while(nIndex < nBitCnt){
   43234:	00003406 	br	43308 <SDHAL_GetResponse+0x1f8>
        SD_CLK_LOW;
   43238:	0007883a 	mov	r3,zero
   4323c:	00800234 	movhi	r2,8
   43240:	10842804 	addi	r2,r2,4256
   43244:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
   43248:	00c00044 	movi	r3,1
   4324c:	00800234 	movhi	r2,8
   43250:	10842804 	addi	r2,r2,4256
   43254:	10c00035 	stwio	r3,0(r2)
        if (SD_TEST_CMD){
   43258:	00800234 	movhi	r2,8
   4325c:	10842404 	addi	r2,r2,4240
   43260:	10800037 	ldwio	r2,0(r2)
   43264:	10001026 	beq	r2,zero,432a8 <SDHAL_GetResponse+0x198>
            Value |= 0x80 >> (nIndex % 8);
   43268:	e0fffa17 	ldw	r3,-24(fp)
   4326c:	00a00034 	movhi	r2,32768
   43270:	108001c4 	addi	r2,r2,7
   43274:	1884703a 	and	r2,r3,r2
   43278:	1000040e 	bge	r2,zero,4328c <SDHAL_GetResponse+0x17c>
   4327c:	10bfffc4 	addi	r2,r2,-1
   43280:	00fffe04 	movi	r3,-8
   43284:	10c4b03a 	or	r2,r2,r3
   43288:	10800044 	addi	r2,r2,1
   4328c:	1007883a 	mov	r3,r2
   43290:	00802004 	movi	r2,128
   43294:	10c5d83a 	sra	r2,r2,r3
   43298:	1007883a 	mov	r3,r2
   4329c:	e0bffb03 	ldbu	r2,-20(fp)
   432a0:	1884b03a 	or	r2,r3,r2
   432a4:	e0bffb05 	stb	r2,-20(fp)
        }
        if (nIndex%8 == 7){
   432a8:	e0fffa17 	ldw	r3,-24(fp)
   432ac:	00a00034 	movhi	r2,32768
   432b0:	108001c4 	addi	r2,r2,7
   432b4:	1884703a 	and	r2,r3,r2
   432b8:	1000040e 	bge	r2,zero,432cc <SDHAL_GetResponse+0x1bc>
   432bc:	10bfffc4 	addi	r2,r2,-1
   432c0:	00fffe04 	movi	r3,-8
   432c4:	10c4b03a 	or	r2,r2,r3
   432c8:	10800044 	addi	r2,r2,1
   432cc:	108001d8 	cmpnei	r2,r2,7
   432d0:	10000a1e 	bne	r2,zero,432fc <SDHAL_GetResponse+0x1ec>
            szResponse[nIndex/8] = Value;
   432d4:	e0bffa17 	ldw	r2,-24(fp)
   432d8:	1000010e 	bge	r2,zero,432e0 <SDHAL_GetResponse+0x1d0>
   432dc:	108001c4 	addi	r2,r2,7
   432e0:	1005d0fa 	srai	r2,r2,3
   432e4:	1007883a 	mov	r3,r2
   432e8:	e0bffe17 	ldw	r2,-8(fp)
   432ec:	10c5883a 	add	r2,r2,r3
   432f0:	e0fffb03 	ldbu	r3,-20(fp)
   432f4:	10c00005 	stb	r3,0(r2)
            Value = 0;
   432f8:	e03ffb05 	stb	zero,-20(fp)
        }
        nIndex++;
   432fc:	e0bffa17 	ldw	r2,-24(fp)
   43300:	10800044 	addi	r2,r2,1
   43304:	e0bffa15 	stw	r2,-24(fp)
    //===== read content + CRC + end-bits ======
    nIndex = 2;
    nBitCnt = nLen*8;
    bDone = FALSE;
    Value = 0;
    while(nIndex < nBitCnt){
   43308:	e0fffa17 	ldw	r3,-24(fp)
   4330c:	e0bffd17 	ldw	r2,-12(fp)
   43310:	18bfc916 	blt	r3,r2,43238 <__alt_data_end+0xfffde848>
        }
        nIndex++;
    } 
    
    // A command with response. 8 clocks after the card response end bit.
    SDHAL_DummyClock(8);
   43314:	01000204 	movi	r4,8
   43318:	00436bc0 	call	436bc <SDHAL_DummyClock>
    
    return TRUE;
   4331c:	00800044 	movi	r2,1
}
   43320:	e037883a 	mov	sp,fp
   43324:	dfc00117 	ldw	ra,4(sp)
   43328:	df000017 	ldw	fp,0(sp)
   4332c:	dec00204 	addi	sp,sp,8
   43330:	f800283a 	ret

00043334 <SDHAL_ReadData>:


bool SDHAL_ReadData(alt_u8 szBuf[], int nBufLen){
   43334:	defff704 	addi	sp,sp,-36
   43338:	df000815 	stw	fp,32(sp)
   4333c:	df000804 	addi	fp,sp,32
   43340:	e13ffe15 	stw	r4,-8(fp)
   43344:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
   43348:	00800044 	movi	r2,1
   4334c:	e0bffc15 	stw	r2,-16(fp)
    int nTry = 0;
   43350:	e03ff815 	stw	zero,-32(fp)
    const  int nMaxTry = 9000;
   43354:	0088ca04 	movi	r2,9000
   43358:	e0bffd15 	stw	r2,-12(fp)
    alt_u8 Data8;
#ifndef SD_4BIT_MODE     
    alt_u16 DataCrc16, MyCrc16;
#endif    
    
    SD_DAT_IN;
   4335c:	0007883a 	mov	r3,zero
   43360:	00800234 	movhi	r2,8
   43364:	10842104 	addi	r2,r2,4228
   43368:	10c00035 	stwio	r3,0(r2)
   4336c:	0007883a 	mov	r3,zero
   43370:	00800234 	movhi	r2,8
   43374:	10841404 	addi	r2,r2,4176
   43378:	10c00035 	stwio	r3,0(r2)
   4337c:	0007883a 	mov	r3,zero
   43380:	00800234 	movhi	r2,8
   43384:	10841004 	addi	r2,r2,4160
   43388:	10c00035 	stwio	r3,0(r2)
    
    // wait start bits (zero)
    while(1){
      SD_CLK_LOW;
   4338c:	0007883a 	mov	r3,zero
   43390:	00800234 	movhi	r2,8
   43394:	10842804 	addi	r2,r2,4256
   43398:	10c00035 	stwio	r3,0(r2)
      SD_CLK_HIGH;
   4339c:	00c00044 	movi	r3,1
   433a0:	00800234 	movhi	r2,8
   433a4:	10842804 	addi	r2,r2,4256
   433a8:	10c00035 	stwio	r3,0(r2)
#ifdef SD_4BIT_MODE
      if((SD_TEST_DAT & 0x0F) == 0x00) // check start bits (zero is expected)
   433ac:	00800234 	movhi	r2,8
   433b0:	10842004 	addi	r2,r2,4224
   433b4:	10800037 	ldwio	r2,0(r2)
   433b8:	108003cc 	andi	r2,r2,15
   433bc:	1000031e 	bne	r2,zero,433cc <SDHAL_ReadData+0x98>
#else      
      if((SD_TEST_DAT & 0x01) == 0x00) // check start bits (zero is expected)
#endif      
        break;
   433c0:	0001883a 	nop
      if (nTry++ > nMaxTry)
        return FALSE;        
    }    
    
    // read data (512byte = 1 block)
    for(i=0;i<nBufLen;i++)
   433c4:	e03ff915 	stw	zero,-28(fp)
   433c8:	00002c06 	br	4347c <SDHAL_ReadData+0x148>
      if((SD_TEST_DAT & 0x0F) == 0x00) // check start bits (zero is expected)
#else      
      if((SD_TEST_DAT & 0x01) == 0x00) // check start bits (zero is expected)
#endif      
        break;
      if (nTry++ > nMaxTry)
   433cc:	e0bff817 	ldw	r2,-32(fp)
   433d0:	10c00044 	addi	r3,r2,1
   433d4:	e0fff815 	stw	r3,-32(fp)
   433d8:	e0fffd17 	ldw	r3,-12(fp)
   433dc:	1880020e 	bge	r3,r2,433e8 <SDHAL_ReadData+0xb4>
        return FALSE;        
   433e0:	0005883a 	mov	r2,zero
   433e4:	00002906 	br	4348c <SDHAL_ReadData+0x158>
    }    
   433e8:	003fe806 	br	4338c <__alt_data_end+0xfffde99c>
    
    // read data (512byte = 1 block)
    for(i=0;i<nBufLen;i++)
    {
      Data8 = 0;
   433ec:	e03ffb05 	stb	zero,-20(fp)
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
   433f0:	e03ffa15 	stw	zero,-24(fp)
   433f4:	00001606 	br	43450 <SDHAL_ReadData+0x11c>
      {
        SD_CLK_LOW;
   433f8:	0007883a 	mov	r3,zero
   433fc:	00800234 	movhi	r2,8
   43400:	10842804 	addi	r2,r2,4256
   43404:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
   43408:	00c00044 	movi	r3,1
   4340c:	00800234 	movhi	r2,8
   43410:	10842804 	addi	r2,r2,4256
   43414:	10c00035 	stwio	r3,0(r2)
        Data8 <<= 4; 
   43418:	e0bffb03 	ldbu	r2,-20(fp)
   4341c:	1004913a 	slli	r2,r2,4
   43420:	e0bffb05 	stb	r2,-20(fp)
        Data8 |= (SD_TEST_DAT & 0x0F);
   43424:	00800234 	movhi	r2,8
   43428:	10842004 	addi	r2,r2,4224
   4342c:	10800037 	ldwio	r2,0(r2)
   43430:	108003cc 	andi	r2,r2,15
   43434:	1007883a 	mov	r3,r2
   43438:	e0bffb03 	ldbu	r2,-20(fp)
   4343c:	1884b03a 	or	r2,r3,r2
   43440:	e0bffb05 	stb	r2,-20(fp)
    // read data (512byte = 1 block)
    for(i=0;i<nBufLen;i++)
    {
      Data8 = 0;
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
   43444:	e0bffa17 	ldw	r2,-24(fp)
   43448:	10800044 	addi	r2,r2,1
   4344c:	e0bffa15 	stw	r2,-24(fp)
   43450:	e0bffa17 	ldw	r2,-24(fp)
   43454:	10800090 	cmplti	r2,r2,2
   43458:	103fe71e 	bne	r2,zero,433f8 <__alt_data_end+0xfffdea08>
        if(SD_TEST_DAT & 0x01)  // check bit0
            Data8 |= 0x01;
      } 
#endif  

      szBuf[i]=Data8;
   4345c:	e0bff917 	ldw	r2,-28(fp)
   43460:	e0fffe17 	ldw	r3,-8(fp)
   43464:	1885883a 	add	r2,r3,r2
   43468:	e0fffb03 	ldbu	r3,-20(fp)
   4346c:	10c00005 	stb	r3,0(r2)
      if (nTry++ > nMaxTry)
        return FALSE;        
    }    
    
    // read data (512byte = 1 block)
    for(i=0;i<nBufLen;i++)
   43470:	e0bff917 	ldw	r2,-28(fp)
   43474:	10800044 	addi	r2,r2,1
   43478:	e0bff915 	stw	r2,-28(fp)
   4347c:	e0fff917 	ldw	r3,-28(fp)
   43480:	e0bfff17 	ldw	r2,-4(fp)
   43484:	18bfd916 	blt	r3,r2,433ec <__alt_data_end+0xfffde9fc>
    }            
    
#endif

    
    return bSuccess;
   43488:	e0bffc17 	ldw	r2,-16(fp)
    
}
   4348c:	e037883a 	mov	sp,fp
   43490:	df000017 	ldw	fp,0(sp)
   43494:	dec00104 	addi	sp,sp,4
   43498:	f800283a 	ret

0004349c <SDHAL_WriteData>:

bool SDHAL_WriteData(alt_u8 szDataWrite[], int nDataLen){
   4349c:	defff604 	addi	sp,sp,-40
   434a0:	dfc00915 	stw	ra,36(sp)
   434a4:	df000815 	stw	fp,32(sp)
   434a8:	df000804 	addi	fp,sp,32
   434ac:	e13ffe15 	stw	r4,-8(fp)
   434b0:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
   434b4:	00800044 	movi	r2,1
   434b8:	e0bff815 	stw	r2,-32(fp)
  //  const int nMaxTry = 5000; 
    int i, j;   
    alt_u8 Data8;
    alt_u16 DataCrc16;
    
    DataCrc16 = crc16(szDataWrite, nDataLen);
   434bc:	e13ffe17 	ldw	r4,-8(fp)
   434c0:	e17fff17 	ldw	r5,-4(fp)
   434c4:	0042de00 	call	42de0 <crc16>
   434c8:	e0bffd0d 	sth	r2,-12(fp)
        break;
      if (nTry++ > nMaxTry)
        return FALSE;        
    } */    
    
    SD_DAT_OUT;
   434cc:	00c00044 	movi	r3,1
   434d0:	00800234 	movhi	r2,8
   434d4:	10842104 	addi	r2,r2,4228
   434d8:	10c00035 	stwio	r3,0(r2)
   434dc:	00c00044 	movi	r3,1
   434e0:	00800234 	movhi	r2,8
   434e4:	10841404 	addi	r2,r2,4176
   434e8:	10c00035 	stwio	r3,0(r2)
   434ec:	00c00044 	movi	r3,1
   434f0:	00800234 	movhi	r2,8
   434f4:	10841004 	addi	r2,r2,4160
   434f8:	10c00035 	stwio	r3,0(r2)
    // start bits (zero value)
    SD_CLK_LOW;
   434fc:	0007883a 	mov	r3,zero
   43500:	00800234 	movhi	r2,8
   43504:	10842804 	addi	r2,r2,4256
   43508:	10c00035 	stwio	r3,0(r2)
    SD_DAT_WRITE(0x00);  
   4350c:	0007883a 	mov	r3,zero
   43510:	00800234 	movhi	r2,8
   43514:	10842004 	addi	r2,r2,4224
   43518:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
   4351c:	00c00044 	movi	r3,1
   43520:	00800234 	movhi	r2,8
   43524:	10842804 	addi	r2,r2,4256
   43528:	10c00035 	stwio	r3,0(r2)
    
    // write data (512byte = 1 block)
    for(i=0;i<nDataLen;i++)
   4352c:	e03ff915 	stw	zero,-28(fp)
   43530:	00002206 	br	435bc <SDHAL_WriteData+0x120>
    {
      Data8 = szDataWrite[i];
   43534:	e0bff917 	ldw	r2,-28(fp)
   43538:	e0fffe17 	ldw	r3,-8(fp)
   4353c:	1885883a 	add	r2,r3,r2
   43540:	10800003 	ldbu	r2,0(r2)
   43544:	e0bffb05 	stb	r2,-20(fp)
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
   43548:	e03ffa15 	stw	zero,-24(fp)
   4354c:	00001506 	br	435a4 <SDHAL_WriteData+0x108>
      {
        SD_CLK_LOW;
   43550:	0007883a 	mov	r3,zero
   43554:	00800234 	movhi	r2,8
   43558:	10842804 	addi	r2,r2,4256
   4355c:	10c00035 	stwio	r3,0(r2)
        //
        SD_DAT_WRITE((Data8 >> 4) & 0x0F);
   43560:	e0bffb03 	ldbu	r2,-20(fp)
   43564:	1004d13a 	srli	r2,r2,4
   43568:	10803fcc 	andi	r2,r2,255
   4356c:	10c003cc 	andi	r3,r2,15
   43570:	00800234 	movhi	r2,8
   43574:	10842004 	addi	r2,r2,4224
   43578:	10c00035 	stwio	r3,0(r2)
        //            
        SD_CLK_HIGH;
   4357c:	00c00044 	movi	r3,1
   43580:	00800234 	movhi	r2,8
   43584:	10842804 	addi	r2,r2,4256
   43588:	10c00035 	stwio	r3,0(r2)
        Data8 <<= 4; 
   4358c:	e0bffb03 	ldbu	r2,-20(fp)
   43590:	1004913a 	slli	r2,r2,4
   43594:	e0bffb05 	stb	r2,-20(fp)
    // write data (512byte = 1 block)
    for(i=0;i<nDataLen;i++)
    {
      Data8 = szDataWrite[i];
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
   43598:	e0bffa17 	ldw	r2,-24(fp)
   4359c:	10800044 	addi	r2,r2,1
   435a0:	e0bffa15 	stw	r2,-24(fp)
   435a4:	e0bffa17 	ldw	r2,-24(fp)
   435a8:	10800090 	cmplti	r2,r2,2
   435ac:	103fe81e 	bne	r2,zero,43550 <__alt_data_end+0xfffdeb60>
    SD_CLK_LOW;
    SD_DAT_WRITE(0x00);  
    SD_CLK_HIGH;
    
    // write data (512byte = 1 block)
    for(i=0;i<nDataLen;i++)
   435b0:	e0bff917 	ldw	r2,-28(fp)
   435b4:	10800044 	addi	r2,r2,1
   435b8:	e0bff915 	stw	r2,-28(fp)
   435bc:	e0fff917 	ldw	r3,-28(fp)
   435c0:	e0bfff17 	ldw	r2,-4(fp)
   435c4:	18bfdb16 	blt	r3,r2,43534 <__alt_data_end+0xfffdeb44>

    
#endif    

    // stop bits (value 'one')
    SD_CLK_LOW;
   435c8:	0007883a 	mov	r3,zero
   435cc:	00800234 	movhi	r2,8
   435d0:	10842804 	addi	r2,r2,4256
   435d4:	10c00035 	stwio	r3,0(r2)
#ifdef SD_4BIT_MODE
    SD_DAT_WRITE(0x0F);
   435d8:	00c003c4 	movi	r3,15
   435dc:	00800234 	movhi	r2,8
   435e0:	10842004 	addi	r2,r2,4224
   435e4:	10c00035 	stwio	r3,0(r2)
#else    
    SD_DAT_HIGH;
#endif     
    SD_CLK_HIGH;
   435e8:	00c00044 	movi	r3,1
   435ec:	00800234 	movhi	r2,8
   435f0:	10842804 	addi	r2,r2,4256
   435f4:	10c00035 	stwio	r3,0(r2)
    
    //===== check busy bits (data0 only)
    SD_DAT_IN;
   435f8:	0007883a 	mov	r3,zero
   435fc:	00800234 	movhi	r2,8
   43600:	10842104 	addi	r2,r2,4228
   43604:	10c00035 	stwio	r3,0(r2)
   43608:	0007883a 	mov	r3,zero
   4360c:	00800234 	movhi	r2,8
   43610:	10841404 	addi	r2,r2,4176
   43614:	10c00035 	stwio	r3,0(r2)
   43618:	0007883a 	mov	r3,zero
   4361c:	00800234 	movhi	r2,8
   43620:	10841004 	addi	r2,r2,4160
   43624:	10c00035 	stwio	r3,0(r2)
bool bWriteSuccess = FALSE;    
   43628:	e03ffc15 	stw	zero,-16(fp)
for(i=0;i<32 && !bWriteSuccess;i++){        
   4362c:	e03ff915 	stw	zero,-28(fp)
   43630:	00001206 	br	4367c <SDHAL_WriteData+0x1e0>
    SD_CLK_LOW;
   43634:	0007883a 	mov	r3,zero
   43638:	00800234 	movhi	r2,8
   4363c:	10842804 	addi	r2,r2,4256
   43640:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
   43644:	00c00044 	movi	r3,1
   43648:	00800234 	movhi	r2,8
   4364c:	10842804 	addi	r2,r2,4256
   43650:	10c00035 	stwio	r3,0(r2)
    if ((SD_TEST_DAT & 0x01) == 0x01) // (DAT0==LOW: busy indicate
   43654:	00800234 	movhi	r2,8
   43658:	10842004 	addi	r2,r2,4224
   4365c:	10800037 	ldwio	r2,0(r2)
   43660:	1080004c 	andi	r2,r2,1
   43664:	10000226 	beq	r2,zero,43670 <SDHAL_WriteData+0x1d4>
        bWriteSuccess = TRUE;
   43668:	00800044 	movi	r2,1
   4366c:	e0bffc15 	stw	r2,-16(fp)
    SD_CLK_HIGH;
    
    //===== check busy bits (data0 only)
    SD_DAT_IN;
bool bWriteSuccess = FALSE;    
for(i=0;i<32 && !bWriteSuccess;i++){        
   43670:	e0bff917 	ldw	r2,-28(fp)
   43674:	10800044 	addi	r2,r2,1
   43678:	e0bff915 	stw	r2,-28(fp)
   4367c:	e0bff917 	ldw	r2,-28(fp)
   43680:	10800808 	cmpgei	r2,r2,32
   43684:	1000021e 	bne	r2,zero,43690 <SDHAL_WriteData+0x1f4>
   43688:	e0bffc17 	ldw	r2,-16(fp)
   4368c:	103fe926 	beq	r2,zero,43634 <__alt_data_end+0xfffdec44>
    SD_CLK_LOW;
    SD_CLK_HIGH;
    if ((SD_TEST_DAT & 0x01) == 0x01) // (DAT0==LOW: busy indicate
        bWriteSuccess = TRUE;
}
    if (!bWriteSuccess)
   43690:	e0bffc17 	ldw	r2,-16(fp)
   43694:	1000011e 	bne	r2,zero,4369c <SDHAL_WriteData+0x200>
        bSuccess = FALSE;
   43698:	e03ff815 	stw	zero,-32(fp)
                
    // to provide8 (eight) clock cycles for the card to complete the operation before shutting down the clock 
    SDHAL_DummyClock(8);     
   4369c:	01000204 	movi	r4,8
   436a0:	00436bc0 	call	436bc <SDHAL_DummyClock>
    for(i=0; i<16; i++){
        SD_CLK_LOW;
        SD_CLK_HIGH;
    }*/
    
    return bSuccess;
   436a4:	e0bff817 	ldw	r2,-32(fp)
    
}
   436a8:	e037883a 	mov	sp,fp
   436ac:	dfc00117 	ldw	ra,4(sp)
   436b0:	df000017 	ldw	fp,0(sp)
   436b4:	dec00204 	addi	sp,sp,8
   436b8:	f800283a 	ret

000436bc <SDHAL_DummyClock>:


void SDHAL_DummyClock(int nClockCnt){
   436bc:	defffd04 	addi	sp,sp,-12
   436c0:	df000215 	stw	fp,8(sp)
   436c4:	df000204 	addi	fp,sp,8
   436c8:	e13fff15 	stw	r4,-4(fp)
    int i;
    for(i=0;i<nClockCnt;i++){
   436cc:	e03ffe15 	stw	zero,-8(fp)
   436d0:	00000b06 	br	43700 <SDHAL_DummyClock+0x44>
        SD_CLK_LOW;
   436d4:	0007883a 	mov	r3,zero
   436d8:	00800234 	movhi	r2,8
   436dc:	10842804 	addi	r2,r2,4256
   436e0:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
   436e4:	00c00044 	movi	r3,1
   436e8:	00800234 	movhi	r2,8
   436ec:	10842804 	addi	r2,r2,4256
   436f0:	10c00035 	stwio	r3,0(r2)
}


void SDHAL_DummyClock(int nClockCnt){
    int i;
    for(i=0;i<nClockCnt;i++){
   436f4:	e0bffe17 	ldw	r2,-8(fp)
   436f8:	10800044 	addi	r2,r2,1
   436fc:	e0bffe15 	stw	r2,-8(fp)
   43700:	e0fffe17 	ldw	r3,-8(fp)
   43704:	e0bfff17 	ldw	r2,-4(fp)
   43708:	18bff216 	blt	r3,r2,436d4 <__alt_data_end+0xfffdece4>
        SD_CLK_LOW;
        SD_CLK_HIGH;
    }
}
   4370c:	e037883a 	mov	sp,fp
   43710:	df000017 	ldw	fp,0(sp)
   43714:	dec00104 	addi	sp,sp,4
   43718:	f800283a 	ret

0004371c <SDLIB_Init>:
static SD_INFO gSdInfo;


//-------------------------------------------------------------------------
bool SDLIB_Init(void)
{
   4371c:	defff604 	addi	sp,sp,-40
   43720:	dfc00915 	stw	ra,36(sp)
   43724:	df000815 	stw	fp,32(sp)
   43728:	df000804 	addi	fp,sp,32
    bool bSuccess = FALSE, bTimeout = FALSE;
   4372c:	e03ff815 	stw	zero,-32(fp)
   43730:	e03ff915 	stw	zero,-28(fp)
   43734:	008001b4 	movhi	r2,6
   43738:	10b29a04 	addi	r2,r2,-13720
   4373c:	10800017 	ldw	r2,0(r2)
    alt_u8  szThisCID[16];
    const int nTimeout = alt_ticks_per_second();
   43740:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 TimeStart;

    
   // alt_u8 x,y;
    memset(&gSdInfo, 0, sizeof(gSdInfo));
   43744:	010001b4 	movhi	r4,6
   43748:	21329e04 	addi	r4,r4,-13704
   4374c:	000b883a 	mov	r5,zero
   43750:	01800e04 	movi	r6,56
   43754:	004728c0 	call	4728c <memset>
    gSdInfo.bSupport4Bits = SD_IsSupport4Bits();
   43758:	0043b780 	call	43b78 <SD_IsSupport4Bits>
   4375c:	1007883a 	mov	r3,r2
   43760:	008001b4 	movhi	r2,6
   43764:	10b29e04 	addi	r2,r2,-13704
   43768:	10c00015 	stw	r3,0(r2)

    SDCARD_DEBUG(("--- Power On, Card Identification Mode, Idle State\r\n"));
    SDCARD_DEBUG(("sd %d-bit mode\r\n", gSdInfo.bSupport4Bits?4:1));
  
    usleep(74*10);
   4376c:	0100b904 	movi	r4,740
   43770:	0056a0c0 	call	56a0c <usleep>
    
    SD_Init();
   43774:	0043b500 	call	43b50 <SD_Init>

    
    //========================== CMD0 (None Response) ========
    // Reset all cards to idle state
    SD_CMD0();
   43778:	0043ba00 	call	43ba0 <SD_CMD0>
    usleep(100*1000);
   4377c:	010000b4 	movhi	r4,2
   43780:	2121a804 	addi	r4,r4,-31072
   43784:	0056a0c0 	call	56a0c <usleep>
    
    //========================== CMD8 (Response R7) ==========
    //Sends SD Memory Card interface condition (Added in SDHC 2.0)
    if (SD_CMD8(SD_VHS_2V7_3V6, CMD8_DEFAULT_TEST_PATTERN)){
   43788:	01000044 	movi	r4,1
   4378c:	01402a84 	movi	r5,170
   43790:	0043c280 	call	43c28 <SD_CMD8>
   43794:	10000e26 	beq	r2,zero,437d0 <SDLIB_Init+0xb4>
        // OCR: Operation Condistions Register
        //gSdInfo.HostOCR32 = 0x01 << 30; //argument=0x40FF8000; // support HC
        gSdInfo.HostOCR32 = 0x40FF8000;
   43798:	008001b4 	movhi	r2,6
   4379c:	10b29e04 	addi	r2,r2,-13704
   437a0:	00d04034 	movhi	r3,16640
   437a4:	18e00004 	addi	r3,r3,-32768
   437a8:	10c00315 	stw	r3,12(r2)
        gSdInfo.bVer2 = TRUE;
   437ac:	008001b4 	movhi	r2,6
   437b0:	10b29e04 	addi	r2,r2,-13704
   437b4:	00c00044 	movi	r3,1
   437b8:	10c00115 	stw	r3,4(r2)
        gSdInfo.bSDHC = TRUE;
   437bc:	008001b4 	movhi	r2,6
   437c0:	10b29e04 	addi	r2,r2,-13704
   437c4:	00c00044 	movi	r3,1
   437c8:	10c00215 	stw	r3,8(r2)
   437cc:	00000806 	br	437f0 <SDLIB_Init+0xd4>
        SDCARD_DEBUG((" 2.0 \r\n"));
    }else{
        gSdInfo.HostOCR32 = 0x00040000;   
   437d0:	008001b4 	movhi	r2,6
   437d4:	10b29e04 	addi	r2,r2,-13704
   437d8:	00c00134 	movhi	r3,4
   437dc:	10c00315 	stw	r3,12(r2)
        SDCARD_TRACE(("CMD8 not supported\r\n"));
        
        // Reset cards to idle state
        SD_CMD0();
   437e0:	0043ba00 	call	43ba0 <SD_CMD0>
        usleep(100*1000);        
   437e4:	010000b4 	movhi	r4,2
   437e8:	2121a804 	addi	r4,r4,-31072
   437ec:	0056a0c0 	call	56a0c <usleep>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   437f0:	008001b4 	movhi	r2,6
   437f4:	10b29b04 	addi	r2,r2,-13716
   437f8:	10800017 	ldw	r2,0(r2)
    }
    //========================== ACMD41 (CMD55) ==============
    TimeStart = alt_nticks();
   437fc:	e0bffb15 	stw	r2,-20(fp)
    while(!bSuccess && !bTimeout){
   43800:	00002e06 	br	438bc <SDLIB_Init+0x1a0>
        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_IDLE)){  // execute cmd55 before execute and ACMD
   43804:	008001b4 	movhi	r2,6
   43808:	10b29e04 	addi	r2,r2,-13704
   4380c:	1080050b 	ldhu	r2,20(r2)
   43810:	10bfffcc 	andi	r2,r2,65535
   43814:	1009883a 	mov	r4,r2
   43818:	000b883a 	mov	r5,zero
   4381c:	0043db40 	call	43db4 <SD_CMD55>
   43820:	1000021e 	bne	r2,zero,4382c <SDLIB_Init+0x110>
            SDCARD_ERROR(("CMD55 NG\r\n"));
            return FALSE;
   43824:	0005883a 	mov	r2,zero
   43828:	00008406 	br	43a3c <SDLIB_Init+0x320>
        }else{    
            bSuccess = SD_ACMD41(gSdInfo.HostOCR32, &gSdInfo.OCR32);
   4382c:	008001b4 	movhi	r2,6
   43830:	10b29e04 	addi	r2,r2,-13704
   43834:	10800317 	ldw	r2,12(r2)
   43838:	1009883a 	mov	r4,r2
   4383c:	014001b4 	movhi	r5,6
   43840:	2972a204 	addi	r5,r5,-13688
   43844:	0043f340 	call	43f34 <SD_ACMD41>
   43848:	e0bff815 	stw	r2,-32(fp)
            if (bSuccess && gSdInfo.bSDHC && ((gSdInfo.OCR32 & 0x40000000) == 0x00)){
   4384c:	e0bff817 	ldw	r2,-32(fp)
   43850:	10000c26 	beq	r2,zero,43884 <SDLIB_Init+0x168>
   43854:	008001b4 	movhi	r2,6
   43858:	10b29e04 	addi	r2,r2,-13704
   4385c:	10800217 	ldw	r2,8(r2)
   43860:	10000826 	beq	r2,zero,43884 <SDLIB_Init+0x168>
   43864:	008001b4 	movhi	r2,6
   43868:	10b29e04 	addi	r2,r2,-13704
   4386c:	10800417 	ldw	r2,16(r2)
   43870:	1090002c 	andhi	r2,r2,16384
   43874:	1000031e 	bne	r2,zero,43884 <SDLIB_Init+0x168>
                gSdInfo.bSDHC = FALSE;
   43878:	008001b4 	movhi	r2,6
   4387c:	10b29e04 	addi	r2,r2,-13704
   43880:	10000215 	stw	zero,8(r2)
            }    
            // check timeout
            if (!bSuccess){
   43884:	e0bff817 	ldw	r2,-32(fp)
   43888:	10000c1e 	bne	r2,zero,438bc <SDLIB_Init+0x1a0>
   4388c:	008001b4 	movhi	r2,6
   43890:	10b29b04 	addi	r2,r2,-13716
   43894:	10c00017 	ldw	r3,0(r2)
                if ((alt_nticks() - TimeStart) > nTimeout){
   43898:	e0bffb17 	ldw	r2,-20(fp)
   4389c:	1885c83a 	sub	r2,r3,r2
   438a0:	e0fffa17 	ldw	r3,-24(fp)
   438a4:	1880032e 	bgeu	r3,r2,438b4 <SDLIB_Init+0x198>
                    SDCARD_ERROR(("ACMD41[SD_APP_OP_COND] fail\r\n"));
                    bTimeout = TRUE;
   438a8:	00800044 	movi	r2,1
   438ac:	e0bff915 	stw	r2,-28(fp)
   438b0:	00000206 	br	438bc <SDLIB_Init+0x1a0>
                }else{
                    usleep(10*1000);
   438b4:	0109c404 	movi	r4,10000
   438b8:	0056a0c0 	call	56a0c <usleep>
        SD_CMD0();
        usleep(100*1000);        
    }
    //========================== ACMD41 (CMD55) ==============
    TimeStart = alt_nticks();
    while(!bSuccess && !bTimeout){
   438bc:	e0bff817 	ldw	r2,-32(fp)
   438c0:	1000021e 	bne	r2,zero,438cc <SDLIB_Init+0x1b0>
   438c4:	e0bff917 	ldw	r2,-28(fp)
   438c8:	103fce26 	beq	r2,zero,43804 <__alt_data_end+0xfffdee14>
                    usleep(10*1000);
                }    
            }
        }
    }
    if (!bSuccess){
   438cc:	e0bff817 	ldw	r2,-32(fp)
   438d0:	1000021e 	bne	r2,zero,438dc <SDLIB_Init+0x1c0>
        return FALSE;
   438d4:	0005883a 	mov	r2,zero
   438d8:	00005806 	br	43a3c <SDLIB_Init+0x320>
    }
   
    //========================== CMD2 ========================    
    // issue cmd2 & wait response 
    // ALL_SEND_CID (CMD2): Asks any card to send the CID numbers on the CMD line
    if (!SD_CMD2(gSdInfo.szCID, sizeof(gSdInfo.szCID))){
   438dc:	010001b4 	movhi	r4,6
   438e0:	2132a384 	addi	r4,r4,-13682
   438e4:	01400444 	movi	r5,17
   438e8:	00440d00 	call	440d0 <SD_CMD2>
   438ec:	1000021e 	bne	r2,zero,438f8 <SDLIB_Init+0x1dc>
        SDCARD_ERROR(("CMD2 fail\r\n"));
        return FALSE;
   438f0:	0005883a 	mov	r2,zero
   438f4:	00005106 	br	43a3c <SDLIB_Init+0x320>
    SDCARD_TRACE(("--- Power On, Card Identification Mode, Identification State\r\n"));

    //========================== CMD3 ========================        
    // issue cmd3 & wait response, finally get RCA
    // CMD3 (SEND_RELATIVE_ADDR): Ask the card to publish a new relative address (RCA)
    if (!SD_CMD3(&gSdInfo.RCA16)){
   438f8:	010001b4 	movhi	r4,6
   438fc:	2132a304 	addi	r4,r4,-13684
   43900:	00442680 	call	44268 <SD_CMD3>
   43904:	1000021e 	bne	r2,zero,43910 <SDLIB_Init+0x1f4>
        SDCARD_ERROR(("CMD3 fail\r\n"));
        return FALSE;
   43908:	0005883a 	mov	r2,zero
   4390c:	00004b06 	br	43a3c <SDLIB_Init+0x320>
    //### Standby-by state in Data-transfer mode
    
    //========================== CMD9 ========================
    SDCARD_DEBUG(("--- enter data-transfer mode, Standby state\r\n"));
    // issue cmd9 with given RCA & wait response 
    if (!SD_CMD9(gSdInfo.RCA16, gSdInfo.szCSD, sizeof(gSdInfo.szCSD))){
   43910:	008001b4 	movhi	r2,6
   43914:	10b29e04 	addi	r2,r2,-13704
   43918:	1080050b 	ldhu	r2,20(r2)
   4391c:	10bfffcc 	andi	r2,r2,65535
   43920:	1009883a 	mov	r4,r2
   43924:	014001b4 	movhi	r5,6
   43928:	2972a7c4 	addi	r5,r5,-13665
   4392c:	01800444 	movi	r6,17
   43930:	00444040 	call	44404 <SD_CMD9>
   43934:	1000021e 	bne	r2,zero,43940 <SDLIB_Init+0x224>
        SDCARD_DEBUG(("CMD9 fail\r\n"));
        return FALSE;
   43938:	0005883a 	mov	r2,zero
   4393c:	00003f06 	br	43a3c <SDLIB_Init+0x320>
    }
    
    //========================== CMD10 ========================
    // richard add  (query card identification)  
    if (!SD_CMD10(gSdInfo.RCA16, szThisCID, sizeof(szThisCID))){
   43940:	008001b4 	movhi	r2,6
   43944:	10b29e04 	addi	r2,r2,-13704
   43948:	1080050b 	ldhu	r2,20(r2)
   4394c:	10ffffcc 	andi	r3,r2,65535
   43950:	e0bffc04 	addi	r2,fp,-16
   43954:	1809883a 	mov	r4,r3
   43958:	100b883a 	mov	r5,r2
   4395c:	01800404 	movi	r6,16
   43960:	00445c40 	call	445c4 <SD_CMD10>
   43964:	1000021e 	bne	r2,zero,43970 <SDLIB_Init+0x254>
        SDCARD_DEBUG(("CMD10 fail\r\n"));
        return FALSE;
   43968:	0005883a 	mov	r2,zero
   4396c:	00003306 	br	43a3c <SDLIB_Init+0x320>
    // issue cmd9 with given RCA & wait response
    
    //========================== CMD7 ========================
    // richard: issue cmd7 to enter transfer state
    // cmd7: toggle between Standy-by and Trasfer State
    if (!SD_CMD7(gSdInfo.RCA16)){
   43970:	008001b4 	movhi	r2,6
   43974:	10b29e04 	addi	r2,r2,-13704
   43978:	1080050b 	ldhu	r2,20(r2)
   4397c:	10bfffcc 	andi	r2,r2,65535
   43980:	1009883a 	mov	r4,r2
   43984:	00447840 	call	44784 <SD_CMD7>
   43988:	1000021e 	bne	r2,zero,43994 <SDLIB_Init+0x278>
        SDCARD_DEBUG(("CMD7 fail\r\n"));
        return FALSE;
   4398c:	0005883a 	mov	r2,zero
   43990:	00002a06 	br	43a3c <SDLIB_Init+0x320>
    //### Transfer state in Data-transfer mode     
    SDCARD_DEBUG(("--- enter data-transfer mode, Transfer state\r\n"));
       
    //========================== CMD16 ========================   
    // issue cmd16 (select a block length) & wait response
    if (!SD_CMD16(512)){  // 512 bytes
   43994:	01008004 	movi	r4,512
   43998:	00449040 	call	44904 <SD_CMD16>
   4399c:	1000021e 	bne	r2,zero,439a8 <SDLIB_Init+0x28c>
        SDCARD_DEBUG(("CMD16 fail\r\n"));
        return FALSE;
   439a0:	0005883a 	mov	r2,zero
   439a4:	00002506 	br	43a3c <SDLIB_Init+0x320>
    }       
    
    if (gSdInfo.bSupport4Bits){ 
   439a8:	008001b4 	movhi	r2,6
   439ac:	10b29e04 	addi	r2,r2,-13704
   439b0:	10800017 	ldw	r2,0(r2)
   439b4:	10002026 	beq	r2,zero,43a38 <SDLIB_Init+0x31c>
        // richard add: set bus width
        // Note. This command is valid only in "transfer state", i.e. after CMD7 is issued

        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_TRAN)){  // execute cmd55 before execute and ACMD, RCA = 0
   439b8:	008001b4 	movhi	r2,6
   439bc:	10b29e04 	addi	r2,r2,-13704
   439c0:	1080050b 	ldhu	r2,20(r2)
   439c4:	10bfffcc 	andi	r2,r2,65535
   439c8:	1009883a 	mov	r4,r2
   439cc:	01400104 	movi	r5,4
   439d0:	0043db40 	call	43db4 <SD_CMD55>
   439d4:	1000021e 	bne	r2,zero,439e0 <SDLIB_Init+0x2c4>
            SDCARD_DEBUG(("CMD55 NG\r\n"));
            return FALSE;
   439d8:	0005883a 	mov	r2,zero
   439dc:	00001706 	br	43a3c <SDLIB_Init+0x320>
        }       
    
        SDCARD_DEBUG(("ACMD6[SET_BUS_WIDTH], 4-bit\r\n"));
        if (!SD_ACMD6(TRUE, SD_STATE_TRAN)){  // 4-bit mode
   439e0:	01000044 	movi	r4,1
   439e4:	01400104 	movi	r5,4
   439e8:	0044aa40 	call	44aa4 <SD_ACMD6>
   439ec:	1000021e 	bne	r2,zero,439f8 <SDLIB_Init+0x2dc>
            SDCARD_DEBUG(("ACMD6 NG\r\n"));
            return FALSE;
   439f0:	0005883a 	mov	r2,zero
   439f4:	00001106 	br	43a3c <SDLIB_Init+0x320>
        }         
    
    
        //
        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_TRAN)){  // execute cmd55 before execute and ACMD, RCA = 0
   439f8:	008001b4 	movhi	r2,6
   439fc:	10b29e04 	addi	r2,r2,-13704
   43a00:	1080050b 	ldhu	r2,20(r2)
   43a04:	10bfffcc 	andi	r2,r2,65535
   43a08:	1009883a 	mov	r4,r2
   43a0c:	01400104 	movi	r5,4
   43a10:	0043db40 	call	43db4 <SD_CMD55>
   43a14:	1000021e 	bne	r2,zero,43a20 <SDLIB_Init+0x304>
            SDCARD_DEBUG(("CMD55 NG\r\n"));
            return FALSE;
   43a18:	0005883a 	mov	r2,zero
   43a1c:	00000706 	br	43a3c <SDLIB_Init+0x320>
        }    
    
       
        SDCARD_DEBUG(("ACMD42[SET_CLR_CARD_DETECT], connect card\r\n"));
        if (!SD_ACMD42(TRUE, SD_STATE_TRAN)){  // connect card
   43a20:	01000044 	movi	r4,1
   43a24:	01400104 	movi	r5,4
   43a28:	0044c300 	call	44c30 <SD_ACMD42>
   43a2c:	1000021e 	bne	r2,zero,43a38 <SDLIB_Init+0x31c>
            SDCARD_DEBUG(("ACMD42 NG\r\n"));
            return FALSE;
   43a30:	0005883a 	mov	r2,zero
   43a34:	00000106 	br	43a3c <SDLIB_Init+0x320>
        printf("!!!!!write ng\r\n");
#endif
     
    SDCARD_DEBUG(("SDLIB_Init success\r\n"));
    
    return TRUE;
   43a38:	00800044 	movi	r2,1
}
   43a3c:	e037883a 	mov	sp,fp
   43a40:	dfc00117 	ldw	ra,4(sp)
   43a44:	df000017 	ldw	fp,0(sp)
   43a48:	dec00204 	addi	sp,sp,8
   43a4c:	f800283a 	ret

00043a50 <SDLIB_ReadBlock512>:


bool SDLIB_ReadBlock512(alt_u32 block_number, alt_u8 *buff)
{
   43a50:	defffa04 	addi	sp,sp,-24
   43a54:	dfc00515 	stw	ra,20(sp)
   43a58:	df000415 	stw	fp,16(sp)
   43a5c:	df000404 	addi	fp,sp,16
   43a60:	e13ffe15 	stw	r4,-8(fp)
   43a64:	e17fff15 	stw	r5,-4(fp)
    // buffer size muse be 512 byte
    bool bSuccess;  
    alt_u32  addr;
  
    // issue cmd17 for 'Single Block Read'. parameter: block address
    if (gSdInfo.bSDHC)
   43a68:	008001b4 	movhi	r2,6
   43a6c:	10b29e04 	addi	r2,r2,-13704
   43a70:	10800217 	ldw	r2,8(r2)
   43a74:	10000326 	beq	r2,zero,43a84 <SDLIB_ReadBlock512+0x34>
        addr = block_number; // note. for SDHC, argument for addr of CMD7 is block number
   43a78:	e0bffe17 	ldw	r2,-8(fp)
   43a7c:	e0bffc15 	stw	r2,-16(fp)
   43a80:	00000306 	br	43a90 <SDLIB_ReadBlock512+0x40>
    else 
        addr = block_number * 512;
   43a84:	e0bffe17 	ldw	r2,-8(fp)
   43a88:	1004927a 	slli	r2,r2,9
   43a8c:	e0bffc15 	stw	r2,-16(fp)
    if (!SD_CMD17(addr, SD_STATE_TRAN)){  // 4-bit mode
   43a90:	e13ffc17 	ldw	r4,-16(fp)
   43a94:	01400104 	movi	r5,4
   43a98:	0044db00 	call	44db0 <SD_CMD17>
   43a9c:	1000021e 	bne	r2,zero,43aa8 <SDLIB_ReadBlock512+0x58>
        SDCARD_DEBUG(("CMD17 NG\r\n"));
        return FALSE;
   43aa0:	0005883a 	mov	r2,zero
   43aa4:	00000506 	br	43abc <SDLIB_ReadBlock512+0x6c>
    }
    //

    bSuccess = SD_ReadData(buff, 512);  // read 512 bytes
   43aa8:	e13fff17 	ldw	r4,-4(fp)
   43aac:	01408004 	movi	r5,512
   43ab0:	00451000 	call	45100 <SD_ReadData>
   43ab4:	e0bffd15 	stw	r2,-12(fp)
    
    //
    return bSuccess;
   43ab8:	e0bffd17 	ldw	r2,-12(fp)
}
   43abc:	e037883a 	mov	sp,fp
   43ac0:	dfc00117 	ldw	ra,4(sp)
   43ac4:	df000017 	ldw	fp,0(sp)
   43ac8:	dec00204 	addi	sp,sp,8
   43acc:	f800283a 	ret

00043ad0 <SDLIB_WriteBlock512>:

bool SDLIB_WriteBlock512(alt_u32 block_number, alt_u8 *szDataWrite)
{
   43ad0:	defffa04 	addi	sp,sp,-24
   43ad4:	dfc00515 	stw	ra,20(sp)
   43ad8:	df000415 	stw	fp,16(sp)
   43adc:	df000404 	addi	fp,sp,16
   43ae0:	e13ffe15 	stw	r4,-8(fp)
   43ae4:	e17fff15 	stw	r5,-4(fp)
    // buffer size muse be 512 byte
    bool bSuccess;  
    alt_u32  addr;
  
    // issue cmd24 for 'Single Block write'. parameter: block address
    if (gSdInfo.bSDHC)
   43ae8:	008001b4 	movhi	r2,6
   43aec:	10b29e04 	addi	r2,r2,-13704
   43af0:	10800217 	ldw	r2,8(r2)
   43af4:	10000326 	beq	r2,zero,43b04 <SDLIB_WriteBlock512+0x34>
        addr = block_number; // note. for SDHC, argument for addr of CMD7 is block number
   43af8:	e0bffe17 	ldw	r2,-8(fp)
   43afc:	e0bffc15 	stw	r2,-16(fp)
   43b00:	00000306 	br	43b10 <SDLIB_WriteBlock512+0x40>
    else 
        addr = block_number * 512;
   43b04:	e0bffe17 	ldw	r2,-8(fp)
   43b08:	1004927a 	slli	r2,r2,9
   43b0c:	e0bffc15 	stw	r2,-16(fp)
    if (!SD_CMD24(addr, SD_STATE_TRAN)){ 
   43b10:	e13ffc17 	ldw	r4,-16(fp)
   43b14:	01400104 	movi	r5,4
   43b18:	0044f580 	call	44f58 <SD_CMD24>
   43b1c:	1000021e 	bne	r2,zero,43b28 <SDLIB_WriteBlock512+0x58>
        SDCARD_DEBUG(("CMD24 NG\r\n"));
        return FALSE;
   43b20:	0005883a 	mov	r2,zero
   43b24:	00000506 	br	43b3c <SDLIB_WriteBlock512+0x6c>
    }
    //

    bSuccess = SD_WriteData(szDataWrite, 512);  // Write 512 bytes
   43b28:	e13fff17 	ldw	r4,-4(fp)
   43b2c:	01408004 	movi	r5,512
   43b30:	00451400 	call	45140 <SD_WriteData>
   43b34:	e0bffd15 	stw	r2,-12(fp)
    
    //
    return bSuccess;
   43b38:	e0bffd17 	ldw	r2,-12(fp)
}
   43b3c:	e037883a 	mov	sp,fp
   43b40:	dfc00117 	ldw	ra,4(sp)
   43b44:	df000017 	ldw	fp,0(sp)
   43b48:	dec00204 	addi	sp,sp,8
   43b4c:	f800283a 	ret

00043b50 <SD_Init>:
// internal function
alt_u32 ArrayToU32(alt_u8 szData[]);

//============================================================

void SD_Init(void){
   43b50:	defffe04 	addi	sp,sp,-8
   43b54:	dfc00115 	stw	ra,4(sp)
   43b58:	df000015 	stw	fp,0(sp)
   43b5c:	d839883a 	mov	fp,sp
    SDHAL_Init();
   43b60:	0042f700 	call	42f70 <SDHAL_Init>
}
   43b64:	e037883a 	mov	sp,fp
   43b68:	dfc00117 	ldw	ra,4(sp)
   43b6c:	df000017 	ldw	fp,0(sp)
   43b70:	dec00204 	addi	sp,sp,8
   43b74:	f800283a 	ret

00043b78 <SD_IsSupport4Bits>:

bool SD_IsSupport4Bits(void){
   43b78:	defffe04 	addi	sp,sp,-8
   43b7c:	dfc00115 	stw	ra,4(sp)
   43b80:	df000015 	stw	fp,0(sp)
   43b84:	d839883a 	mov	fp,sp
    return SDHAL_IsSupport4Bits();
   43b88:	0042f440 	call	42f44 <SDHAL_IsSupport4Bits>
}
   43b8c:	e037883a 	mov	sp,fp
   43b90:	dfc00117 	ldw	ra,4(sp)
   43b94:	df000017 	ldw	fp,0(sp)
   43b98:	dec00204 	addi	sp,sp,8
   43b9c:	f800283a 	ret

00043ba0 <SD_CMD0>:



void SD_CMD0(void){
   43ba0:	defffc04 	addi	sp,sp,-16
   43ba4:	dfc00315 	stw	ra,12(sp)
   43ba8:	df000215 	stw	fp,8(sp)
   43bac:	df000204 	addi	fp,sp,8
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   43bb0:	00801004 	movi	r2,64
   43bb4:	e0bffe45 	stb	r2,-7(fp)
   43bb8:	e03ffe85 	stb	zero,-6(fp)
   43bbc:	e03ffec5 	stb	zero,-5(fp)
   43bc0:	e03fff05 	stb	zero,-4(fp)
   43bc4:	e03fff45 	stb	zero,-3(fp)
   43bc8:	e03fff85 	stb	zero,-2(fp)

    SDCARD_TRACE(("CMD0\r\n"));
    // build packet    
    szCmd[0] |= 0X00;
   43bcc:	e0bffe43 	ldbu	r2,-7(fp)
   43bd0:	e0bffe45 	stb	r2,-7(fp)
    crc = crc7(0, szCmd, 5);
   43bd4:	e0bffe44 	addi	r2,fp,-7
   43bd8:	0009883a 	mov	r4,zero
   43bdc:	100b883a 	mov	r5,r2
   43be0:	01800144 	movi	r6,5
   43be4:	0042ed40 	call	42ed4 <crc7>
   43be8:	e0bffe05 	stb	r2,-8(fp)
    szCmd[5] = (crc << 1) | 0x01;
   43bec:	e0bffe03 	ldbu	r2,-8(fp)
   43bf0:	1085883a 	add	r2,r2,r2
   43bf4:	10800054 	ori	r2,r2,1
   43bf8:	e0bfff85 	stb	r2,-2(fp)
    
    // Tx 100 clock for power on sequence 
   // SDHAL_DummyClock(100);
    //
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   43bfc:	e0bffe44 	addi	r2,fp,-7
   43c00:	1009883a 	mov	r4,r2
   43c04:	01400184 	movi	r5,6
   43c08:	004300c0 	call	4300c <SDHAL_SendCmd>
    
    // A command with no response. 8 clocks after the host command end bit.
    // !!!!!!!!!! Note. Remember to add dummy clock here
    SDHAL_DummyClock(8);
   43c0c:	01000204 	movi	r4,8
   43c10:	00436bc0 	call	436bc <SDHAL_DummyClock>
    
}
   43c14:	e037883a 	mov	sp,fp
   43c18:	dfc00117 	ldw	ra,4(sp)
   43c1c:	df000017 	ldw	fp,0(sp)
   43c20:	dec00204 	addi	sp,sp,8
   43c24:	f800283a 	ret

00043c28 <SD_CMD8>:


bool SD_CMD8(alt_u8 VolId, alt_u8 TestPattern){
   43c28:	defff704 	addi	sp,sp,-36
   43c2c:	dfc00815 	stw	ra,32(sp)
   43c30:	df000715 	stw	fp,28(sp)
   43c34:	df000704 	addi	fp,sp,28
   43c38:	2007883a 	mov	r3,r4
   43c3c:	2805883a 	mov	r2,r5
   43c40:	e0fffe05 	stb	r3,-8(fp)
   43c44:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 8;
   43c48:	00800204 	movi	r2,8
   43c4c:	e0bffa05 	stb	r2,-24(fp)
   // int x;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   43c50:	00801004 	movi	r2,64
   43c54:	e0bffc45 	stb	r2,-15(fp)
   43c58:	e03ffc85 	stb	zero,-14(fp)
   43c5c:	e03ffcc5 	stb	zero,-13(fp)
   43c60:	e03ffd05 	stb	zero,-12(fp)
   43c64:	e03ffd45 	stb	zero,-11(fp)
   43c68:	e03ffd85 	stb	zero,-10(fp)

    SDCARD_TRACE(("CMD8\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   43c6c:	e0fffc43 	ldbu	r3,-15(fp)
   43c70:	e0bffa03 	ldbu	r2,-24(fp)
   43c74:	1884b03a 	or	r2,r3,r2
   43c78:	e0bffc45 	stb	r2,-15(fp)
    szCmd[3] |= (VolId & 0x0F);
   43c7c:	e0bffd03 	ldbu	r2,-12(fp)
   43c80:	1007883a 	mov	r3,r2
   43c84:	e0bffe03 	ldbu	r2,-8(fp)
   43c88:	108003cc 	andi	r2,r2,15
   43c8c:	1884b03a 	or	r2,r3,r2
   43c90:	e0bffd05 	stb	r2,-12(fp)
    szCmd[4] = TestPattern;
   43c94:	e0bfff03 	ldbu	r2,-4(fp)
   43c98:	e0bffd45 	stb	r2,-11(fp)
    crc = crc7(0, szCmd, 5);
   43c9c:	e0bffc44 	addi	r2,fp,-15
   43ca0:	0009883a 	mov	r4,zero
   43ca4:	100b883a 	mov	r5,r2
   43ca8:	01800144 	movi	r6,5
   43cac:	0042ed40 	call	42ed4 <crc7>
   43cb0:	e0bffa45 	stb	r2,-23(fp)
    szCmd[5] = (crc << 1) | 0x01;
   43cb4:	e0bffa43 	ldbu	r2,-23(fp)
   43cb8:	1085883a 	add	r2,r2,r2
   43cbc:	10800054 	ori	r2,r2,1
   43cc0:	e0bffd85 	stb	r2,-10(fp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   43cc4:	e0bffc44 	addi	r2,fp,-15
   43cc8:	1009883a 	mov	r4,r2
   43ccc:	01400184 	movi	r5,6
   43cd0:	004300c0 	call	4300c <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   43cd4:	e0bffac4 	addi	r2,fp,-21
   43cd8:	1009883a 	mov	r4,r2
   43cdc:	01400184 	movi	r5,6
   43ce0:	00431100 	call	43110 <SDHAL_GetResponse>
   43ce4:	e0bff915 	stw	r2,-28(fp)
    
    // check response content
    if (bSuccess){
   43ce8:	e0bff917 	ldw	r2,-28(fp)
   43cec:	10002b26 	beq	r2,zero,43d9c <SD_CMD8+0x174>
        // check command
        if (bSuccess && szResponse[0] != Cmd){
   43cf0:	e0bff917 	ldw	r2,-28(fp)
   43cf4:	10000526 	beq	r2,zero,43d0c <SD_CMD8+0xe4>
   43cf8:	e0bffac3 	ldbu	r2,-21(fp)
   43cfc:	10c03fcc 	andi	r3,r2,255
   43d00:	e0bffa03 	ldbu	r2,-24(fp)
   43d04:	18800126 	beq	r3,r2,43d0c <SD_CMD8+0xe4>
            SDCARD_DEBUG(("CMD%d Response: Invalid command index\r\n", Cmd));
            bSuccess = FALSE;
   43d08:	e03ff915 	stw	zero,-28(fp)
        }
        
        // check voltage supplied        
        if (bSuccess && szResponse[3] != VolId){
   43d0c:	e0bff917 	ldw	r2,-28(fp)
   43d10:	10000526 	beq	r2,zero,43d28 <SD_CMD8+0x100>
   43d14:	e0bffb83 	ldbu	r2,-18(fp)
   43d18:	10c03fcc 	andi	r3,r2,255
   43d1c:	e0bffe03 	ldbu	r2,-8(fp)
   43d20:	18800126 	beq	r3,r2,43d28 <SD_CMD8+0x100>
            SDCARD_DEBUG(("CMD%d Response: Invalid Void Id\r\n", Cmd));
            bSuccess = FALSE;
   43d24:	e03ff915 	stw	zero,-28(fp)
        }        

        // check test pattern        
        if (bSuccess && szResponse[4] != TestPattern){
   43d28:	e0bff917 	ldw	r2,-28(fp)
   43d2c:	10000526 	beq	r2,zero,43d44 <SD_CMD8+0x11c>
   43d30:	e0bffbc3 	ldbu	r2,-17(fp)
   43d34:	10c03fcc 	andi	r3,r2,255
   43d38:	e0bfff03 	ldbu	r2,-4(fp)
   43d3c:	18800126 	beq	r3,r2,43d44 <SD_CMD8+0x11c>
            SDCARD_DEBUG(("CMD%d Response: Invalid Test pattern\r\n", Cmd));
            bSuccess = FALSE;
   43d40:	e03ff915 	stw	zero,-28(fp)
        }
        
        // check crc
        if (bSuccess){
   43d44:	e0bff917 	ldw	r2,-28(fp)
   43d48:	10000d26 	beq	r2,zero,43d80 <SD_CMD8+0x158>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   43d4c:	e0bffac4 	addi	r2,fp,-21
   43d50:	0009883a 	mov	r4,zero
   43d54:	100b883a 	mov	r5,r2
   43d58:	01800144 	movi	r6,5
   43d5c:	0042ed40 	call	42ed4 <crc7>
   43d60:	e0bffa85 	stb	r2,-22(fp)
            if (crc != (szResponse[5] >> 1)){
   43d64:	e0bffc03 	ldbu	r2,-16(fp)
   43d68:	10803fcc 	andi	r2,r2,255
   43d6c:	1004d07a 	srli	r2,r2,1
   43d70:	10c03fcc 	andi	r3,r2,255
   43d74:	e0bffa83 	ldbu	r2,-22(fp)
   43d78:	18800126 	beq	r3,r2,43d80 <SD_CMD8+0x158>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   43d7c:	e03ff915 	stw	zero,-28(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   43d80:	e0bff917 	ldw	r2,-28(fp)
   43d84:	10000526 	beq	r2,zero,43d9c <SD_CMD8+0x174>
   43d88:	e0bffc03 	ldbu	r2,-16(fp)
   43d8c:	10803fcc 	andi	r2,r2,255
   43d90:	1080004c 	andi	r2,r2,1
   43d94:	1000011e 	bne	r2,zero,43d9c <SD_CMD8+0x174>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   43d98:	e03ff915 	stw	zero,-28(fp)
        }
        
         
    }
    
    return bSuccess;
   43d9c:	e0bff917 	ldw	r2,-28(fp)
    
}
   43da0:	e037883a 	mov	sp,fp
   43da4:	dfc00117 	ldw	ra,4(sp)
   43da8:	df000017 	ldw	fp,0(sp)
   43dac:	dec00204 	addi	sp,sp,8
   43db0:	f800283a 	ret

00043db4 <SD_CMD55>:

bool SD_CMD55(alt_u16 RCA16, alt_u8 ExpectedState){
   43db4:	defff404 	addi	sp,sp,-48
   43db8:	dfc00b15 	stw	ra,44(sp)
   43dbc:	df000a15 	stw	fp,40(sp)
   43dc0:	df000a04 	addi	fp,sp,40
   43dc4:	2007883a 	mov	r3,r4
   43dc8:	2805883a 	mov	r2,r5
   43dcc:	e0fffe0d 	sth	r3,-8(fp)
   43dd0:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 55;
   43dd4:	00800dc4 	movi	r2,55
   43dd8:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   43ddc:	00801004 	movi	r2,64
   43de0:	e0bffbc5 	stb	r2,-17(fp)
   43de4:	e03ffc05 	stb	zero,-16(fp)
   43de8:	e03ffc45 	stb	zero,-15(fp)
   43dec:	e03ffc85 	stb	zero,-14(fp)
   43df0:	e03ffcc5 	stb	zero,-13(fp)
   43df4:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("CMD55\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   43df8:	e0fffbc3 	ldbu	r3,-17(fp)
   43dfc:	e0bff703 	ldbu	r2,-36(fp)
   43e00:	1884b03a 	or	r2,r3,r2
   43e04:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[1] = RCA16 >> 8;
   43e08:	e0bffe0b 	ldhu	r2,-8(fp)
   43e0c:	1004d23a 	srli	r2,r2,8
   43e10:	e0bffc05 	stb	r2,-16(fp)
    szCmd[2] = RCA16 & 0xFF;
   43e14:	e0bffe0b 	ldhu	r2,-8(fp)
   43e18:	e0bffc45 	stb	r2,-15(fp)
    crc = crc7(0, szCmd, 5);
   43e1c:	e0bffbc4 	addi	r2,fp,-17
   43e20:	0009883a 	mov	r4,zero
   43e24:	100b883a 	mov	r5,r2
   43e28:	01800144 	movi	r6,5
   43e2c:	0042ed40 	call	42ed4 <crc7>
   43e30:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   43e34:	e0bff743 	ldbu	r2,-35(fp)
   43e38:	1085883a 	add	r2,r2,r2
   43e3c:	10800054 	ori	r2,r2,1
   43e40:	e0bffd05 	stb	r2,-12(fp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   43e44:	e0bffbc4 	addi	r2,fp,-17
   43e48:	1009883a 	mov	r4,r2
   43e4c:	01400184 	movi	r5,6
   43e50:	004300c0 	call	4300c <SDHAL_SendCmd>
  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   43e54:	e0bffa44 	addi	r2,fp,-23
   43e58:	1009883a 	mov	r4,r2
   43e5c:	01400184 	movi	r5,6
   43e60:	00431100 	call	43110 <SDHAL_GetResponse>
   43e64:	e0bff615 	stw	r2,-40(fp)
    
    // check response content
    if (bSuccess){
   43e68:	e0bff617 	ldw	r2,-40(fp)
   43e6c:	10002b26 	beq	r2,zero,43f1c <SD_CMD55+0x168>
        alt_u32 CardStatus, ExpectedStatus;  // define in 4.10
        // check command
        if (bSuccess && szResponse[0] != Cmd){
   43e70:	e0bff617 	ldw	r2,-40(fp)
   43e74:	10000526 	beq	r2,zero,43e8c <SD_CMD55+0xd8>
   43e78:	e0bffa43 	ldbu	r2,-23(fp)
   43e7c:	10c03fcc 	andi	r3,r2,255
   43e80:	e0bff703 	ldbu	r2,-36(fp)
   43e84:	18800126 	beq	r3,r2,43e8c <SD_CMD55+0xd8>
            SDCARD_DEBUG(("CMD%d Response: Invalid command index\r\n", Cmd));
            bSuccess = FALSE;
   43e88:	e03ff615 	stw	zero,-40(fp)
        }
        
        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
   43e8c:	e0bffa44 	addi	r2,fp,-23
   43e90:	10800044 	addi	r2,r2,1
   43e94:	1009883a 	mov	r4,r2
   43e98:	00451800 	call	45180 <ArrayToU32>
   43e9c:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
   43ea0:	e0bfff03 	ldbu	r2,-4(fp)
   43ea4:	108003cc 	andi	r2,r2,15
   43ea8:	1004927a 	slli	r2,r2,9
   43eac:	10804814 	ori	r2,r2,288
   43eb0:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
   43eb4:	e0fff817 	ldw	r3,-32(fp)
   43eb8:	e0bff917 	ldw	r2,-28(fp)
   43ebc:	18800126 	beq	r3,r2,43ec4 <SD_CMD55+0x110>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   43ec0:	e03ff615 	stw	zero,-40(fp)
        }
        
        // check crc
        if (bSuccess){
   43ec4:	e0bff617 	ldw	r2,-40(fp)
   43ec8:	10000d26 	beq	r2,zero,43f00 <SD_CMD55+0x14c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   43ecc:	e0bffa44 	addi	r2,fp,-23
   43ed0:	0009883a 	mov	r4,zero
   43ed4:	100b883a 	mov	r5,r2
   43ed8:	01800144 	movi	r6,5
   43edc:	0042ed40 	call	42ed4 <crc7>
   43ee0:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
   43ee4:	e0bffb83 	ldbu	r2,-18(fp)
   43ee8:	10803fcc 	andi	r2,r2,255
   43eec:	1004d07a 	srli	r2,r2,1
   43ef0:	10c03fcc 	andi	r3,r2,255
   43ef4:	e0bffa03 	ldbu	r2,-24(fp)
   43ef8:	18800126 	beq	r3,r2,43f00 <SD_CMD55+0x14c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   43efc:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   43f00:	e0bff617 	ldw	r2,-40(fp)
   43f04:	10000526 	beq	r2,zero,43f1c <SD_CMD55+0x168>
   43f08:	e0bffb83 	ldbu	r2,-18(fp)
   43f0c:	10803fcc 	andi	r2,r2,255
   43f10:	1080004c 	andi	r2,r2,1
   43f14:	1000011e 	bne	r2,zero,43f1c <SD_CMD55+0x168>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   43f18:	e03ff615 	stw	zero,-40(fp)
        }
          
    }
    
    return bSuccess;
   43f1c:	e0bff617 	ldw	r2,-40(fp)
    
}
   43f20:	e037883a 	mov	sp,fp
   43f24:	dfc00117 	ldw	ra,4(sp)
   43f28:	df000017 	ldw	fp,0(sp)
   43f2c:	dec00204 	addi	sp,sp,8
   43f30:	f800283a 	ret

00043f34 <SD_ACMD41>:

// Response: R3
bool SD_ACMD41(alt_u32 HostOCR32, alt_u32 *pOCR32){
   43f34:	defff504 	addi	sp,sp,-44
   43f38:	dfc00a15 	stw	ra,40(sp)
   43f3c:	df000915 	stw	fp,36(sp)
   43f40:	df000904 	addi	fp,sp,36
   43f44:	e13ffe15 	stw	r4,-8(fp)
   43f48:	e17fff15 	stw	r5,-4(fp)
    alt_u32 OCR;
    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 41;
   43f4c:	00800a44 	movi	r2,41
   43f50:	e0bffa05 	stb	r2,-24(fp)
    //alt_u8 szCmd[6]  = {0x40,0x0f,0xf0,0x00,0x00, 0x00}, crc;
    //alt_u8 szCmd[6]  = {0x40,0x00,0xff,0x80,0x00, 0x00}, crc;  // 2.7~3.6V
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;  
   43f54:	00801004 	movi	r2,64
   43f58:	e0bffc05 	stb	r2,-16(fp)
   43f5c:	e03ffc45 	stb	zero,-15(fp)
   43f60:	e03ffc85 	stb	zero,-14(fp)
   43f64:	e03ffcc5 	stb	zero,-13(fp)
   43f68:	e03ffd05 	stb	zero,-12(fp)
   43f6c:	e03ffd45 	stb	zero,-11(fp)
    
    SDCARD_TRACE(("ACMD41\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   43f70:	e0fffc03 	ldbu	r3,-16(fp)
   43f74:	e0bffa03 	ldbu	r2,-24(fp)
   43f78:	1884b03a 	or	r2,r3,r2
   43f7c:	e0bffc05 	stb	r2,-16(fp)
    szCmd[1] |= (HostOCR32>> 24) & 0x40;
   43f80:	e0bffc43 	ldbu	r2,-15(fp)
   43f84:	e0fffe17 	ldw	r3,-8(fp)
   43f88:	1806d63a 	srli	r3,r3,24
   43f8c:	18c0100c 	andi	r3,r3,64
   43f90:	10c4b03a 	or	r2,r2,r3
   43f94:	e0bffc45 	stb	r2,-15(fp)
    szCmd[2] = (HostOCR32 >> 16) & 0xFF;
   43f98:	e0bffe17 	ldw	r2,-8(fp)
   43f9c:	1004d43a 	srli	r2,r2,16
   43fa0:	e0bffc85 	stb	r2,-14(fp)
    szCmd[3] = (HostOCR32 >> 8) & 0xFF;
   43fa4:	e0bffe17 	ldw	r2,-8(fp)
   43fa8:	1004d23a 	srli	r2,r2,8
   43fac:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[4] = HostOCR32 & 0xFF;
   43fb0:	e0bffe17 	ldw	r2,-8(fp)
   43fb4:	e0bffd05 	stb	r2,-12(fp)
    /*szCmd[0] = 0x69;
    szCmd[1] = 0x40;
    szCmd[2] = 0xFF;
    szCmd[3] = 0x80;
    szCmd[4] = 0x00;*/
    crc = crc7(0, szCmd, 5);
   43fb8:	e0bffc04 	addi	r2,fp,-16
   43fbc:	0009883a 	mov	r4,zero
   43fc0:	100b883a 	mov	r5,r2
   43fc4:	01800144 	movi	r6,5
   43fc8:	0042ed40 	call	42ed4 <crc7>
   43fcc:	e0bffa45 	stb	r2,-23(fp)
    szCmd[5] = (crc << 1) | 0x01;
   43fd0:	e0bffa43 	ldbu	r2,-23(fp)
   43fd4:	1085883a 	add	r2,r2,r2
   43fd8:	10800054 	ori	r2,r2,1
   43fdc:	e0bffd45 	stb	r2,-11(fp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   43fe0:	e0bffc04 	addi	r2,fp,-16
   43fe4:	1009883a 	mov	r4,r2
   43fe8:	01400184 	movi	r5,6
   43fec:	004300c0 	call	4300c <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   43ff0:	e0bffa84 	addi	r2,fp,-22
   43ff4:	1009883a 	mov	r4,r2
   43ff8:	01400184 	movi	r5,6
   43ffc:	00431100 	call	43110 <SDHAL_GetResponse>
   44000:	e0bff815 	stw	r2,-32(fp)
    
    if (bSuccess){
   44004:	e0bff817 	ldw	r2,-32(fp)
   44008:	10002626 	beq	r2,zero,440a4 <SD_ACMD41+0x170>
        int i;
        // check command
        if (bSuccess && szResponse[0] != 0x3F){
   4400c:	e0bff817 	ldw	r2,-32(fp)
   44010:	10000526 	beq	r2,zero,44028 <SD_ACMD41+0xf4>
   44014:	e0bffa83 	ldbu	r2,-22(fp)
   44018:	10803fcc 	andi	r2,r2,255
   4401c:	10800fe0 	cmpeqi	r2,r2,63
   44020:	1000011e 	bne	r2,zero,44028 <SD_ACMD41+0xf4>
            SDCARD_DEBUG(("ACMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
   44024:	e03ff815 	stw	zero,-32(fp)
        }
        
        // [1]~[4]: 32-bits OCR (exampe: 0xFF8000)
        OCR = 0;
   44028:	e03ff715 	stw	zero,-36(fp)
        for(i=0;i<4;i++){
   4402c:	e03ff915 	stw	zero,-28(fp)
   44030:	00000f06 	br	44070 <SD_ACMD41+0x13c>
            OCR <<= 8;
   44034:	e0bff717 	ldw	r2,-36(fp)
   44038:	1004923a 	slli	r2,r2,8
   4403c:	e0bff715 	stw	r2,-36(fp)
            OCR |= szResponse[i+1];
   44040:	e0bff917 	ldw	r2,-28(fp)
   44044:	10800044 	addi	r2,r2,1
   44048:	e0fffa84 	addi	r3,fp,-22
   4404c:	1885883a 	add	r2,r3,r2
   44050:	10800003 	ldbu	r2,0(r2)
   44054:	10803fcc 	andi	r2,r2,255
   44058:	e0fff717 	ldw	r3,-36(fp)
   4405c:	1884b03a 	or	r2,r3,r2
   44060:	e0bff715 	stw	r2,-36(fp)
            bSuccess = FALSE;
        }
        
        // [1]~[4]: 32-bits OCR (exampe: 0xFF8000)
        OCR = 0;
        for(i=0;i<4;i++){
   44064:	e0bff917 	ldw	r2,-28(fp)
   44068:	10800044 	addi	r2,r2,1
   4406c:	e0bff915 	stw	r2,-28(fp)
   44070:	e0bff917 	ldw	r2,-28(fp)
   44074:	10800110 	cmplti	r2,r2,4
   44078:	103fee1e 	bne	r2,zero,44034 <__alt_data_end+0xfffdf644>
            OCR <<= 8;
            OCR |= szResponse[i+1];
        }           
        
        //!!!!!!!!!! note. bit31(Card power up status bit) is LOW when the card is busy.
        if ((OCR & 0x80000000) != 0x80000000){
   4407c:	e0bff717 	ldw	r2,-36(fp)
   44080:	10000116 	blt	r2,zero,44088 <SD_ACMD41+0x154>
            // busy
            SDCARD_DEBUG(("ACMD%d Response: card is busy\r\n", Cmd));
            bSuccess = FALSE;
   44084:	e03ff815 	stw	zero,-32(fp)
        } 
        
        // check reserved bits and end-bits
        if (bSuccess && (szResponse[5] != 0xFF)){
   44088:	e0bff817 	ldw	r2,-32(fp)
   4408c:	10000526 	beq	r2,zero,440a4 <SD_ACMD41+0x170>
   44090:	e0bffbc3 	ldbu	r2,-17(fp)
   44094:	10803fcc 	andi	r2,r2,255
   44098:	10803fe0 	cmpeqi	r2,r2,255
   4409c:	1000011e 	bne	r2,zero,440a4 <SD_ACMD41+0x170>
            SDCARD_DEBUG(("ACMD%d Response: Invalid reserved & end-bits\r\n", Cmd));
            bSuccess = FALSE;
   440a0:	e03ff815 	stw	zero,-32(fp)
        }
          
    }      
    
   if (bSuccess)
   440a4:	e0bff817 	ldw	r2,-32(fp)
   440a8:	10000326 	beq	r2,zero,440b8 <SD_ACMD41+0x184>
      *pOCR32 = OCR;  
   440ac:	e0bfff17 	ldw	r2,-4(fp)
   440b0:	e0fff717 	ldw	r3,-36(fp)
   440b4:	10c00015 	stw	r3,0(r2)

    return bSuccess;
   440b8:	e0bff817 	ldw	r2,-32(fp)
}
   440bc:	e037883a 	mov	sp,fp
   440c0:	dfc00117 	ldw	ra,4(sp)
   440c4:	df000017 	ldw	fp,0(sp)
   440c8:	dec00204 	addi	sp,sp,8
   440cc:	f800283a 	ret

000440d0 <SD_CMD2>:

// function: Asks any card to send the CID numbers on the CMD line (4.7.4)
// response: 4.9.3 R2 (CMD2 & CMD10)
// CID(Card IDentification): 128 bits = 128/8 = 16 bytes
bool SD_CMD2(alt_u8 szCID[], int nBufLen){
   440d0:	defff204 	addi	sp,sp,-56
   440d4:	dfc00d15 	stw	ra,52(sp)
   440d8:	df000c15 	stw	fp,48(sp)
   440dc:	df000c04 	addi	fp,sp,48
   440e0:	e13ffe15 	stw	r4,-8(fp)
   440e4:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[17];  // 136/8 = 17
    const alt_u8 Cmd = 2;
   440e8:	00800084 	movi	r2,2
   440ec:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   440f0:	00801004 	movi	r2,64
   440f4:	e0bffc05 	stb	r2,-16(fp)
   440f8:	e03ffc45 	stb	zero,-15(fp)
   440fc:	e03ffc85 	stb	zero,-14(fp)
   44100:	e03ffcc5 	stb	zero,-13(fp)
   44104:	e03ffd05 	stb	zero,-12(fp)
   44108:	e03ffd45 	stb	zero,-11(fp)

    SDCARD_TRACE(("CMD2\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   4410c:	e0fffc03 	ldbu	r3,-16(fp)
   44110:	e0bff703 	ldbu	r2,-36(fp)
   44114:	1884b03a 	or	r2,r3,r2
   44118:	e0bffc05 	stb	r2,-16(fp)
    crc = crc7(0, szCmd, 5);
   4411c:	e0bffc04 	addi	r2,fp,-16
   44120:	0009883a 	mov	r4,zero
   44124:	100b883a 	mov	r5,r2
   44128:	01800144 	movi	r6,5
   4412c:	0042ed40 	call	42ed4 <crc7>
   44130:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   44134:	e0bff743 	ldbu	r2,-35(fp)
   44138:	1085883a 	add	r2,r2,r2
   4413c:	10800054 	ori	r2,r2,1
   44140:	e0bffd45 	stb	r2,-11(fp)
    
    //
 //   sd_Ncc();
    //for(x=0;x<40;x++)
    //    sd_Ncr();
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   44144:	e0bffc04 	addi	r2,fp,-16
   44148:	1009883a 	mov	r4,r2
   4414c:	01400184 	movi	r5,6
   44150:	004300c0 	call	4300c <SDHAL_SendCmd>
  //  sd_Ncr();
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   44154:	e0bff7c4 	addi	r2,fp,-33
   44158:	1009883a 	mov	r4,r2
   4415c:	01400444 	movi	r5,17
   44160:	00431100 	call	43110 <SDHAL_GetResponse>
   44164:	e0bff415 	stw	r2,-48(fp)
    
    // check response content
    if (bSuccess){
   44168:	e0bff417 	ldw	r2,-48(fp)
   4416c:	10001e26 	beq	r2,zero,441e8 <SD_CMD2+0x118>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
   44170:	e0bff417 	ldw	r2,-48(fp)
   44174:	10000526 	beq	r2,zero,4418c <SD_CMD2+0xbc>
   44178:	e0bff7c3 	ldbu	r2,-33(fp)
   4417c:	10803fcc 	andi	r2,r2,255
   44180:	10800fe0 	cmpeqi	r2,r2,63
   44184:	1000011e 	bne	r2,zero,4418c <SD_CMD2+0xbc>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   44188:	e03ff415 	stw	zero,-48(fp)
        }
        
        
        // check crc
        if (bSuccess){
   4418c:	e0bff417 	ldw	r2,-48(fp)
   44190:	10000e26 	beq	r2,zero,441cc <SD_CMD2+0xfc>
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
   44194:	e0bff7c4 	addi	r2,fp,-33
   44198:	10800044 	addi	r2,r2,1
   4419c:	0009883a 	mov	r4,zero
   441a0:	100b883a 	mov	r5,r2
   441a4:	018003c4 	movi	r6,15
   441a8:	0042ed40 	call	42ed4 <crc7>
   441ac:	e0bff785 	stb	r2,-34(fp)
            if (crc != (szResponse[16] >> 1)){
   441b0:	e0bffbc3 	ldbu	r2,-17(fp)
   441b4:	10803fcc 	andi	r2,r2,255
   441b8:	1004d07a 	srli	r2,r2,1
   441bc:	10c03fcc 	andi	r3,r2,255
   441c0:	e0bff783 	ldbu	r2,-34(fp)
   441c4:	18800126 	beq	r3,r2,441cc <SD_CMD2+0xfc>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   441c8:	e03ff415 	stw	zero,-48(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
   441cc:	e0bff417 	ldw	r2,-48(fp)
   441d0:	10000526 	beq	r2,zero,441e8 <SD_CMD2+0x118>
   441d4:	e0bffbc3 	ldbu	r2,-17(fp)
   441d8:	10803fcc 	andi	r2,r2,255
   441dc:	1080004c 	andi	r2,r2,1
   441e0:	1000011e 	bne	r2,zero,441e8 <SD_CMD2+0x118>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   441e4:	e03ff415 	stw	zero,-48(fp)
        }
          
    }
    
    if (bSuccess){
   441e8:	e0bff417 	ldw	r2,-48(fp)
   441ec:	10001826 	beq	r2,zero,44250 <SD_CMD2+0x180>
        int nCopyLen, x;
        // [1]~[16]: CIS or CSD register
        nCopyLen = nBufLen;
   441f0:	e0bfff17 	ldw	r2,-4(fp)
   441f4:	e0bff515 	stw	r2,-44(fp)
        if (nCopyLen > 16)
   441f8:	e0bff517 	ldw	r2,-44(fp)
   441fc:	10800450 	cmplti	r2,r2,17
   44200:	1000021e 	bne	r2,zero,4420c <SD_CMD2+0x13c>
            nCopyLen = 16;
   44204:	00800404 	movi	r2,16
   44208:	e0bff515 	stw	r2,-44(fp)
        for(x=0;x<nCopyLen;x++)
   4420c:	e03ff615 	stw	zero,-40(fp)
   44210:	00000c06 	br	44244 <SD_CMD2+0x174>
            szCID[x] = szResponse[x+1];
   44214:	e0bff617 	ldw	r2,-40(fp)
   44218:	e0fffe17 	ldw	r3,-8(fp)
   4421c:	1885883a 	add	r2,r3,r2
   44220:	e0fff617 	ldw	r3,-40(fp)
   44224:	18c00044 	addi	r3,r3,1
   44228:	e13ff7c4 	addi	r4,fp,-33
   4422c:	20c7883a 	add	r3,r4,r3
   44230:	18c00003 	ldbu	r3,0(r3)
   44234:	10c00005 	stb	r3,0(r2)
        int nCopyLen, x;
        // [1]~[16]: CIS or CSD register
        nCopyLen = nBufLen;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
   44238:	e0bff617 	ldw	r2,-40(fp)
   4423c:	10800044 	addi	r2,r2,1
   44240:	e0bff615 	stw	r2,-40(fp)
   44244:	e0fff617 	ldw	r3,-40(fp)
   44248:	e0bff517 	ldw	r2,-44(fp)
   4424c:	18bff116 	blt	r3,r2,44214 <__alt_data_end+0xfffdf824>
            szCID[x] = szResponse[x+1];
        
    }
    
    return bSuccess;
   44250:	e0bff417 	ldw	r2,-48(fp)
    
}
   44254:	e037883a 	mov	sp,fp
   44258:	dfc00117 	ldw	ra,4(sp)
   4425c:	df000017 	ldw	fp,0(sp)
   44260:	dec00204 	addi	sp,sp,8
   44264:	f800283a 	ret

00044268 <SD_CMD3>:

//
bool SD_CMD3(alt_u16 *pRCA16){
   44268:	defff704 	addi	sp,sp,-36
   4426c:	dfc00815 	stw	ra,32(sp)
   44270:	df000715 	stw	fp,28(sp)
   44274:	df000704 	addi	fp,sp,28
   44278:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 RCA16;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 3;
   4427c:	008000c4 	movi	r2,3
   44280:	e0bffa85 	stb	r2,-22(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   44284:	00801004 	movi	r2,64
   44288:	e0bffd85 	stb	r2,-10(fp)
   4428c:	e03ffdc5 	stb	zero,-9(fp)
   44290:	e03ffe05 	stb	zero,-8(fp)
   44294:	e03ffe45 	stb	zero,-7(fp)
   44298:	e03ffe85 	stb	zero,-6(fp)
   4429c:	e03ffec5 	stb	zero,-5(fp)

    SDCARD_TRACE(("CMD3\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   442a0:	e0fffd83 	ldbu	r3,-10(fp)
   442a4:	e0bffa83 	ldbu	r2,-22(fp)
   442a8:	1884b03a 	or	r2,r3,r2
   442ac:	e0bffd85 	stb	r2,-10(fp)
    crc = crc7(0, szCmd, 5);
   442b0:	e0bffd84 	addi	r2,fp,-10
   442b4:	0009883a 	mov	r4,zero
   442b8:	100b883a 	mov	r5,r2
   442bc:	01800144 	movi	r6,5
   442c0:	0042ed40 	call	42ed4 <crc7>
   442c4:	e0bffac5 	stb	r2,-21(fp)
    szCmd[5] = (crc << 1) | 0x01;
   442c8:	e0bffac3 	ldbu	r2,-21(fp)
   442cc:	1085883a 	add	r2,r2,r2
   442d0:	10800054 	ori	r2,r2,1
   442d4:	e0bffec5 	stb	r2,-5(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   442d8:	e0bffd84 	addi	r2,fp,-10
   442dc:	1009883a 	mov	r4,r2
   442e0:	01400184 	movi	r5,6
   442e4:	004300c0 	call	4300c <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   442e8:	e0bffc04 	addi	r2,fp,-16
   442ec:	1009883a 	mov	r4,r2
   442f0:	01400184 	movi	r5,6
   442f4:	00431100 	call	43110 <SDHAL_GetResponse>
   442f8:	e0bff915 	stw	r2,-28(fp)
    
    // check response content
    if (bSuccess){
   442fc:	e0bff917 	ldw	r2,-28(fp)
   44300:	10003526 	beq	r2,zero,443d8 <SD_CMD3+0x170>
        alt_u16 Status16;
        alt_u8  State8;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
   44304:	e0bff917 	ldw	r2,-28(fp)
   44308:	10000526 	beq	r2,zero,44320 <SD_CMD3+0xb8>
   4430c:	e0bffc03 	ldbu	r2,-16(fp)
   44310:	10c03fcc 	andi	r3,r2,255
   44314:	e0bffa83 	ldbu	r2,-22(fp)
   44318:	18800126 	beq	r3,r2,44320 <SD_CMD3+0xb8>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   4431c:	e03ff915 	stw	zero,-28(fp)
        }
        
        // New published RCA[31:16] of the card
        RCA16 = (szResponse[1] << 8) | szResponse[2];
   44320:	e0bffc43 	ldbu	r2,-15(fp)
   44324:	10803fcc 	andi	r2,r2,255
   44328:	1004923a 	slli	r2,r2,8
   4432c:	1007883a 	mov	r3,r2
   44330:	e0bffc83 	ldbu	r2,-14(fp)
   44334:	10803fcc 	andi	r2,r2,255
   44338:	1884b03a 	or	r2,r3,r2
   4433c:	e0bffa0d 	sth	r2,-24(fp)
        
        // [15:0] card status bits (16 bits: 23, 22, 19, 12~0) 0x500   
        Status16 = (szResponse[3] << 8) | szResponse[4];
   44340:	e0bffcc3 	ldbu	r2,-13(fp)
   44344:	10803fcc 	andi	r2,r2,255
   44348:	1004923a 	slli	r2,r2,8
   4434c:	1007883a 	mov	r3,r2
   44350:	e0bffd03 	ldbu	r2,-12(fp)
   44354:	10803fcc 	andi	r2,r2,255
   44358:	1884b03a 	or	r2,r3,r2
   4435c:	e0bffb0d 	sth	r2,-20(fp)
        State8 = SD_CURRENT_STATE_DECODE(Status16);
   44360:	e0bffb0b 	ldhu	r2,-20(fp)
   44364:	1004d27a 	srli	r2,r2,9
   44368:	108003cc 	andi	r2,r2,15
   4436c:	e0bffb85 	stb	r2,-18(fp)
        if (State8 != SD_STATE_IDENT){
   44370:	e0bffb83 	ldbu	r2,-18(fp)
   44374:	108000a0 	cmpeqi	r2,r2,2
   44378:	1000011e 	bne	r2,zero,44380 <SD_CMD3+0x118>
           SDCARD_DEBUG(("CMD%d Response: Unexpected CURRENT_STATE\r\n", Cmd));
           bSuccess = FALSE;
   4437c:	e03ff915 	stw	zero,-28(fp)
        }
        
        // check crc
        if (bSuccess){
   44380:	e0bff917 	ldw	r2,-28(fp)
   44384:	10000d26 	beq	r2,zero,443bc <SD_CMD3+0x154>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   44388:	e0bffc04 	addi	r2,fp,-16
   4438c:	0009883a 	mov	r4,zero
   44390:	100b883a 	mov	r5,r2
   44394:	01800144 	movi	r6,5
   44398:	0042ed40 	call	42ed4 <crc7>
   4439c:	e0bffbc5 	stb	r2,-17(fp)
            if (crc != (szResponse[5] >> 1)){
   443a0:	e0bffd43 	ldbu	r2,-11(fp)
   443a4:	10803fcc 	andi	r2,r2,255
   443a8:	1004d07a 	srli	r2,r2,1
   443ac:	10c03fcc 	andi	r3,r2,255
   443b0:	e0bffbc3 	ldbu	r2,-17(fp)
   443b4:	18800126 	beq	r3,r2,443bc <SD_CMD3+0x154>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   443b8:	e03ff915 	stw	zero,-28(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   443bc:	e0bff917 	ldw	r2,-28(fp)
   443c0:	10000526 	beq	r2,zero,443d8 <SD_CMD3+0x170>
   443c4:	e0bffd43 	ldbu	r2,-11(fp)
   443c8:	10803fcc 	andi	r2,r2,255
   443cc:	1080004c 	andi	r2,r2,1
   443d0:	1000011e 	bne	r2,zero,443d8 <SD_CMD3+0x170>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   443d4:	e03ff915 	stw	zero,-28(fp)
        }
          
    }
    
    if (bSuccess)
   443d8:	e0bff917 	ldw	r2,-28(fp)
   443dc:	10000326 	beq	r2,zero,443ec <SD_CMD3+0x184>
        *pRCA16 = RCA16;
   443e0:	e0bfff17 	ldw	r2,-4(fp)
   443e4:	e0fffa0b 	ldhu	r3,-24(fp)
   443e8:	10c0000d 	sth	r3,0(r2)
    
    return bSuccess;
   443ec:	e0bff917 	ldw	r2,-28(fp)
    
}
   443f0:	e037883a 	mov	sp,fp
   443f4:	dfc00117 	ldw	ra,4(sp)
   443f8:	df000017 	ldw	fp,0(sp)
   443fc:	dec00204 	addi	sp,sp,8
   44400:	f800283a 	ret

00044404 <SD_CMD9>:

bool SD_CMD9(alt_u16 RCA16, alt_u8 szCSD[], int nBufLen){
   44404:	defff104 	addi	sp,sp,-60
   44408:	dfc00e15 	stw	ra,56(sp)
   4440c:	df000d15 	stw	fp,52(sp)
   44410:	df000d04 	addi	fp,sp,52
   44414:	2005883a 	mov	r2,r4
   44418:	e17ffe15 	stw	r5,-8(fp)
   4441c:	e1bfff15 	stw	r6,-4(fp)
   44420:	e0bffd0d 	sth	r2,-12(fp)
    bool bSuccess;
    alt_u8 szResponse[17];
    const alt_u8 Cmd = 9;
   44424:	00800244 	movi	r2,9
   44428:	e0bff605 	stb	r2,-40(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   4442c:	00801004 	movi	r2,64
   44430:	e0bffb05 	stb	r2,-20(fp)
   44434:	e03ffb45 	stb	zero,-19(fp)
   44438:	e03ffb85 	stb	zero,-18(fp)
   4443c:	e03ffbc5 	stb	zero,-17(fp)
   44440:	e03ffc05 	stb	zero,-16(fp)
   44444:	e03ffc45 	stb	zero,-15(fp)

    SDCARD_TRACE(("CMD9\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   44448:	e0fffb03 	ldbu	r3,-20(fp)
   4444c:	e0bff603 	ldbu	r2,-40(fp)
   44450:	1884b03a 	or	r2,r3,r2
   44454:	e0bffb05 	stb	r2,-20(fp)
    szCmd[1] |= RCA16 >> 8;
   44458:	e0bffb43 	ldbu	r2,-19(fp)
   4445c:	e0fffd0b 	ldhu	r3,-12(fp)
   44460:	1806d23a 	srli	r3,r3,8
   44464:	10c4b03a 	or	r2,r2,r3
   44468:	e0bffb45 	stb	r2,-19(fp)
    szCmd[2] |= RCA16 & 0xFF;
   4446c:	e0bffb83 	ldbu	r2,-18(fp)
   44470:	1007883a 	mov	r3,r2
   44474:	e0bffd0b 	ldhu	r2,-12(fp)
   44478:	1884b03a 	or	r2,r3,r2
   4447c:	e0bffb85 	stb	r2,-18(fp)
    crc = crc7(0, szCmd, 5);
   44480:	e0bffb04 	addi	r2,fp,-20
   44484:	0009883a 	mov	r4,zero
   44488:	100b883a 	mov	r5,r2
   4448c:	01800144 	movi	r6,5
   44490:	0042ed40 	call	42ed4 <crc7>
   44494:	e0bff645 	stb	r2,-39(fp)
    szCmd[5] = (crc << 1) | 0x01;
   44498:	e0bff643 	ldbu	r2,-39(fp)
   4449c:	1085883a 	add	r2,r2,r2
   444a0:	10800054 	ori	r2,r2,1
   444a4:	e0bffc45 	stb	r2,-15(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   444a8:	e0bffb04 	addi	r2,fp,-20
   444ac:	1009883a 	mov	r4,r2
   444b0:	01400184 	movi	r5,6
   444b4:	004300c0 	call	4300c <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   444b8:	e0bff6c4 	addi	r2,fp,-37
   444bc:	1009883a 	mov	r4,r2
   444c0:	01400444 	movi	r5,17
   444c4:	00431100 	call	43110 <SDHAL_GetResponse>
   444c8:	e0bff315 	stw	r2,-52(fp)
    
    // check response content
    if (bSuccess){
   444cc:	e0bff317 	ldw	r2,-52(fp)
   444d0:	10001e26 	beq	r2,zero,4454c <SD_CMD9+0x148>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
   444d4:	e0bff317 	ldw	r2,-52(fp)
   444d8:	10000526 	beq	r2,zero,444f0 <SD_CMD9+0xec>
   444dc:	e0bff6c3 	ldbu	r2,-37(fp)
   444e0:	10803fcc 	andi	r2,r2,255
   444e4:	10800fe0 	cmpeqi	r2,r2,63
   444e8:	1000011e 	bne	r2,zero,444f0 <SD_CMD9+0xec>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   444ec:	e03ff315 	stw	zero,-52(fp)
        }
        
        // check crc
        if (bSuccess){
   444f0:	e0bff317 	ldw	r2,-52(fp)
   444f4:	10000e26 	beq	r2,zero,44530 <SD_CMD9+0x12c>
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
   444f8:	e0bff6c4 	addi	r2,fp,-37
   444fc:	10800044 	addi	r2,r2,1
   44500:	0009883a 	mov	r4,zero
   44504:	100b883a 	mov	r5,r2
   44508:	018003c4 	movi	r6,15
   4450c:	0042ed40 	call	42ed4 <crc7>
   44510:	e0bff685 	stb	r2,-38(fp)
            if (crc != (szResponse[16] >> 1)){
   44514:	e0bffac3 	ldbu	r2,-21(fp)
   44518:	10803fcc 	andi	r2,r2,255
   4451c:	1004d07a 	srli	r2,r2,1
   44520:	10c03fcc 	andi	r3,r2,255
   44524:	e0bff683 	ldbu	r2,-38(fp)
   44528:	18800126 	beq	r3,r2,44530 <SD_CMD9+0x12c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   4452c:	e03ff315 	stw	zero,-52(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
   44530:	e0bff317 	ldw	r2,-52(fp)
   44534:	10000526 	beq	r2,zero,4454c <SD_CMD9+0x148>
   44538:	e0bffac3 	ldbu	r2,-21(fp)
   4453c:	10803fcc 	andi	r2,r2,255
   44540:	1080004c 	andi	r2,r2,1
   44544:	1000011e 	bne	r2,zero,4454c <SD_CMD9+0x148>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   44548:	e03ff315 	stw	zero,-52(fp)
        }
          
    }
    
    if (bSuccess){
   4454c:	e0bff317 	ldw	r2,-52(fp)
   44550:	10001626 	beq	r2,zero,445ac <SD_CMD9+0x1a8>
        int nCopyLen, x;
        if (nCopyLen > 16)
   44554:	e0bff417 	ldw	r2,-48(fp)
   44558:	10800450 	cmplti	r2,r2,17
   4455c:	1000021e 	bne	r2,zero,44568 <SD_CMD9+0x164>
            nCopyLen = 16;
   44560:	00800404 	movi	r2,16
   44564:	e0bff415 	stw	r2,-48(fp)
        for(x=0;x<nCopyLen;x++)
   44568:	e03ff515 	stw	zero,-44(fp)
   4456c:	00000c06 	br	445a0 <SD_CMD9+0x19c>
            szCSD[x] = szResponse[x+1];           
   44570:	e0bff517 	ldw	r2,-44(fp)
   44574:	e0fffe17 	ldw	r3,-8(fp)
   44578:	1885883a 	add	r2,r3,r2
   4457c:	e0fff517 	ldw	r3,-44(fp)
   44580:	18c00044 	addi	r3,r3,1
   44584:	e13ff6c4 	addi	r4,fp,-37
   44588:	20c7883a 	add	r3,r4,r3
   4458c:	18c00003 	ldbu	r3,0(r3)
   44590:	10c00005 	stb	r3,0(r2)
    
    if (bSuccess){
        int nCopyLen, x;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
   44594:	e0bff517 	ldw	r2,-44(fp)
   44598:	10800044 	addi	r2,r2,1
   4459c:	e0bff515 	stw	r2,-44(fp)
   445a0:	e0fff517 	ldw	r3,-44(fp)
   445a4:	e0bff417 	ldw	r2,-48(fp)
   445a8:	18bff116 	blt	r3,r2,44570 <__alt_data_end+0xfffdfb80>
            szCSD[x] = szResponse[x+1];           
    }        
    
    return bSuccess;
   445ac:	e0bff317 	ldw	r2,-52(fp)
}
   445b0:	e037883a 	mov	sp,fp
   445b4:	dfc00117 	ldw	ra,4(sp)
   445b8:	df000017 	ldw	fp,0(sp)
   445bc:	dec00204 	addi	sp,sp,8
   445c0:	f800283a 	ret

000445c4 <SD_CMD10>:

bool SD_CMD10(alt_u16 RCA16, alt_u8 szCID[], int nBufLen){
   445c4:	defff104 	addi	sp,sp,-60
   445c8:	dfc00e15 	stw	ra,56(sp)
   445cc:	df000d15 	stw	fp,52(sp)
   445d0:	df000d04 	addi	fp,sp,52
   445d4:	2005883a 	mov	r2,r4
   445d8:	e17ffe15 	stw	r5,-8(fp)
   445dc:	e1bfff15 	stw	r6,-4(fp)
   445e0:	e0bffd0d 	sth	r2,-12(fp)
    bool bSuccess;
    alt_u8 szResponse[17];
    const alt_u8 Cmd = 10;
   445e4:	00800284 	movi	r2,10
   445e8:	e0bff605 	stb	r2,-40(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   445ec:	00801004 	movi	r2,64
   445f0:	e0bffb05 	stb	r2,-20(fp)
   445f4:	e03ffb45 	stb	zero,-19(fp)
   445f8:	e03ffb85 	stb	zero,-18(fp)
   445fc:	e03ffbc5 	stb	zero,-17(fp)
   44600:	e03ffc05 	stb	zero,-16(fp)
   44604:	e03ffc45 	stb	zero,-15(fp)

    SDCARD_TRACE(("CMD10\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   44608:	e0fffb03 	ldbu	r3,-20(fp)
   4460c:	e0bff603 	ldbu	r2,-40(fp)
   44610:	1884b03a 	or	r2,r3,r2
   44614:	e0bffb05 	stb	r2,-20(fp)
    szCmd[1] |= RCA16 >> 8;
   44618:	e0bffb43 	ldbu	r2,-19(fp)
   4461c:	e0fffd0b 	ldhu	r3,-12(fp)
   44620:	1806d23a 	srli	r3,r3,8
   44624:	10c4b03a 	or	r2,r2,r3
   44628:	e0bffb45 	stb	r2,-19(fp)
    szCmd[2] |= RCA16 & 0xFF;
   4462c:	e0bffb83 	ldbu	r2,-18(fp)
   44630:	1007883a 	mov	r3,r2
   44634:	e0bffd0b 	ldhu	r2,-12(fp)
   44638:	1884b03a 	or	r2,r3,r2
   4463c:	e0bffb85 	stb	r2,-18(fp)
    crc = crc7(0, szCmd, 5);
   44640:	e0bffb04 	addi	r2,fp,-20
   44644:	0009883a 	mov	r4,zero
   44648:	100b883a 	mov	r5,r2
   4464c:	01800144 	movi	r6,5
   44650:	0042ed40 	call	42ed4 <crc7>
   44654:	e0bff645 	stb	r2,-39(fp)
    szCmd[5] = (crc << 1) | 0x01;
   44658:	e0bff643 	ldbu	r2,-39(fp)
   4465c:	1085883a 	add	r2,r2,r2
   44660:	10800054 	ori	r2,r2,1
   44664:	e0bffc45 	stb	r2,-15(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   44668:	e0bffb04 	addi	r2,fp,-20
   4466c:	1009883a 	mov	r4,r2
   44670:	01400184 	movi	r5,6
   44674:	004300c0 	call	4300c <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   44678:	e0bff6c4 	addi	r2,fp,-37
   4467c:	1009883a 	mov	r4,r2
   44680:	01400444 	movi	r5,17
   44684:	00431100 	call	43110 <SDHAL_GetResponse>
   44688:	e0bff315 	stw	r2,-52(fp)
    
    // check response content
    if (bSuccess){
   4468c:	e0bff317 	ldw	r2,-52(fp)
   44690:	10001e26 	beq	r2,zero,4470c <SD_CMD10+0x148>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
   44694:	e0bff317 	ldw	r2,-52(fp)
   44698:	10000526 	beq	r2,zero,446b0 <SD_CMD10+0xec>
   4469c:	e0bff6c3 	ldbu	r2,-37(fp)
   446a0:	10803fcc 	andi	r2,r2,255
   446a4:	10800fe0 	cmpeqi	r2,r2,63
   446a8:	1000011e 	bne	r2,zero,446b0 <SD_CMD10+0xec>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   446ac:	e03ff315 	stw	zero,-52(fp)
        }
        
        // check crc
        if (bSuccess){
   446b0:	e0bff317 	ldw	r2,-52(fp)
   446b4:	10000e26 	beq	r2,zero,446f0 <SD_CMD10+0x12c>
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
   446b8:	e0bff6c4 	addi	r2,fp,-37
   446bc:	10800044 	addi	r2,r2,1
   446c0:	0009883a 	mov	r4,zero
   446c4:	100b883a 	mov	r5,r2
   446c8:	018003c4 	movi	r6,15
   446cc:	0042ed40 	call	42ed4 <crc7>
   446d0:	e0bff685 	stb	r2,-38(fp)
            if (crc != (szResponse[16] >> 1)){
   446d4:	e0bffac3 	ldbu	r2,-21(fp)
   446d8:	10803fcc 	andi	r2,r2,255
   446dc:	1004d07a 	srli	r2,r2,1
   446e0:	10c03fcc 	andi	r3,r2,255
   446e4:	e0bff683 	ldbu	r2,-38(fp)
   446e8:	18800126 	beq	r3,r2,446f0 <SD_CMD10+0x12c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   446ec:	e03ff315 	stw	zero,-52(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
   446f0:	e0bff317 	ldw	r2,-52(fp)
   446f4:	10000526 	beq	r2,zero,4470c <SD_CMD10+0x148>
   446f8:	e0bffac3 	ldbu	r2,-21(fp)
   446fc:	10803fcc 	andi	r2,r2,255
   44700:	1080004c 	andi	r2,r2,1
   44704:	1000011e 	bne	r2,zero,4470c <SD_CMD10+0x148>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   44708:	e03ff315 	stw	zero,-52(fp)
        }
          
    }
    
    if (bSuccess){
   4470c:	e0bff317 	ldw	r2,-52(fp)
   44710:	10001626 	beq	r2,zero,4476c <SD_CMD10+0x1a8>
        int nCopyLen, x;
        if (nCopyLen > 16)
   44714:	e0bff417 	ldw	r2,-48(fp)
   44718:	10800450 	cmplti	r2,r2,17
   4471c:	1000021e 	bne	r2,zero,44728 <SD_CMD10+0x164>
            nCopyLen = 16;
   44720:	00800404 	movi	r2,16
   44724:	e0bff415 	stw	r2,-48(fp)
        for(x=0;x<nCopyLen;x++)
   44728:	e03ff515 	stw	zero,-44(fp)
   4472c:	00000c06 	br	44760 <SD_CMD10+0x19c>
            szCID[x] = szResponse[x+1];           
   44730:	e0bff517 	ldw	r2,-44(fp)
   44734:	e0fffe17 	ldw	r3,-8(fp)
   44738:	1885883a 	add	r2,r3,r2
   4473c:	e0fff517 	ldw	r3,-44(fp)
   44740:	18c00044 	addi	r3,r3,1
   44744:	e13ff6c4 	addi	r4,fp,-37
   44748:	20c7883a 	add	r3,r4,r3
   4474c:	18c00003 	ldbu	r3,0(r3)
   44750:	10c00005 	stb	r3,0(r2)
    
    if (bSuccess){
        int nCopyLen, x;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
   44754:	e0bff517 	ldw	r2,-44(fp)
   44758:	10800044 	addi	r2,r2,1
   4475c:	e0bff515 	stw	r2,-44(fp)
   44760:	e0fff517 	ldw	r3,-44(fp)
   44764:	e0bff417 	ldw	r2,-48(fp)
   44768:	18bff116 	blt	r3,r2,44730 <__alt_data_end+0xfffdfd40>
            szCID[x] = szResponse[x+1];           
    }        
    
    return bSuccess;
   4476c:	e0bff317 	ldw	r2,-52(fp)
}
   44770:	e037883a 	mov	sp,fp
   44774:	dfc00117 	ldw	ra,4(sp)
   44778:	df000017 	ldw	fp,0(sp)
   4477c:	dec00204 	addi	sp,sp,8
   44780:	f800283a 	ret

00044784 <SD_CMD7>:


bool SD_CMD7(alt_u16 RCA16){
   44784:	defff504 	addi	sp,sp,-44
   44788:	dfc00a15 	stw	ra,40(sp)
   4478c:	df000915 	stw	fp,36(sp)
   44790:	df000904 	addi	fp,sp,36
   44794:	2005883a 	mov	r2,r4
   44798:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 7;
   4479c:	008001c4 	movi	r2,7
   447a0:	e0bff805 	stb	r2,-32(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   447a4:	00801004 	movi	r2,64
   447a8:	e0bffcc5 	stb	r2,-13(fp)
   447ac:	e03ffd05 	stb	zero,-12(fp)
   447b0:	e03ffd45 	stb	zero,-11(fp)
   447b4:	e03ffd85 	stb	zero,-10(fp)
   447b8:	e03ffdc5 	stb	zero,-9(fp)
   447bc:	e03ffe05 	stb	zero,-8(fp)

    SDCARD_TRACE(("CMD7\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   447c0:	e0fffcc3 	ldbu	r3,-13(fp)
   447c4:	e0bff803 	ldbu	r2,-32(fp)
   447c8:	1884b03a 	or	r2,r3,r2
   447cc:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[1] |= RCA16 >> 8;
   447d0:	e0bffd03 	ldbu	r2,-12(fp)
   447d4:	e0ffff0b 	ldhu	r3,-4(fp)
   447d8:	1806d23a 	srli	r3,r3,8
   447dc:	10c4b03a 	or	r2,r2,r3
   447e0:	e0bffd05 	stb	r2,-12(fp)
    szCmd[2] |= RCA16 & 0xFF;
   447e4:	e0bffd43 	ldbu	r2,-11(fp)
   447e8:	1007883a 	mov	r3,r2
   447ec:	e0bfff0b 	ldhu	r2,-4(fp)
   447f0:	1884b03a 	or	r2,r3,r2
   447f4:	e0bffd45 	stb	r2,-11(fp)
    crc = crc7(0, szCmd, 5);
   447f8:	e0bffcc4 	addi	r2,fp,-13
   447fc:	0009883a 	mov	r4,zero
   44800:	100b883a 	mov	r5,r2
   44804:	01800144 	movi	r6,5
   44808:	0042ed40 	call	42ed4 <crc7>
   4480c:	e0bff845 	stb	r2,-31(fp)
    szCmd[5] = (crc << 1) | 0x01;
   44810:	e0bff843 	ldbu	r2,-31(fp)
   44814:	1085883a 	add	r2,r2,r2
   44818:	10800054 	ori	r2,r2,1
   4481c:	e0bffe05 	stb	r2,-8(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   44820:	e0bffcc4 	addi	r2,fp,-13
   44824:	1009883a 	mov	r4,r2
   44828:	01400184 	movi	r5,6
   4482c:	004300c0 	call	4300c <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   44830:	e0bffb44 	addi	r2,fp,-19
   44834:	1009883a 	mov	r4,r2
   44838:	01400184 	movi	r5,6
   4483c:	00431100 	call	43110 <SDHAL_GetResponse>
   44840:	e0bff715 	stw	r2,-36(fp)
    
    // check response content
    if (bSuccess){
   44844:	e0bff717 	ldw	r2,-36(fp)
   44848:	10002826 	beq	r2,zero,448ec <SD_CMD7+0x168>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
   4484c:	e0bff717 	ldw	r2,-36(fp)
   44850:	10000526 	beq	r2,zero,44868 <SD_CMD7+0xe4>
   44854:	e0bffb43 	ldbu	r2,-19(fp)
   44858:	10c03fcc 	andi	r3,r2,255
   4485c:	e0bff803 	ldbu	r2,-32(fp)
   44860:	18800126 	beq	r3,r2,44868 <SD_CMD7+0xe4>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   44864:	e03ff715 	stw	zero,-36(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
   44868:	e0bffb44 	addi	r2,fp,-19
   4486c:	10800044 	addi	r2,r2,1
   44870:	1009883a 	mov	r4,r2
   44874:	00451800 	call	45180 <ArrayToU32>
   44878:	e0bff915 	stw	r2,-28(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_STBY);
   4487c:	0081c004 	movi	r2,1792
   44880:	e0bffa15 	stw	r2,-24(fp)
        if (CardStatus != ExpectedStatus){
   44884:	e0fff917 	ldw	r3,-28(fp)
   44888:	e0bffa17 	ldw	r2,-24(fp)
   4488c:	18800126 	beq	r3,r2,44894 <SD_CMD7+0x110>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   44890:	e03ff715 	stw	zero,-36(fp)
        }        
        
        // check crc
        if (bSuccess){
   44894:	e0bff717 	ldw	r2,-36(fp)
   44898:	10000d26 	beq	r2,zero,448d0 <SD_CMD7+0x14c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   4489c:	e0bffb44 	addi	r2,fp,-19
   448a0:	0009883a 	mov	r4,zero
   448a4:	100b883a 	mov	r5,r2
   448a8:	01800144 	movi	r6,5
   448ac:	0042ed40 	call	42ed4 <crc7>
   448b0:	e0bffb05 	stb	r2,-20(fp)
            if (crc != (szResponse[5] >> 1)){
   448b4:	e0bffc83 	ldbu	r2,-14(fp)
   448b8:	10803fcc 	andi	r2,r2,255
   448bc:	1004d07a 	srli	r2,r2,1
   448c0:	10c03fcc 	andi	r3,r2,255
   448c4:	e0bffb03 	ldbu	r2,-20(fp)
   448c8:	18800126 	beq	r3,r2,448d0 <SD_CMD7+0x14c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   448cc:	e03ff715 	stw	zero,-36(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   448d0:	e0bff717 	ldw	r2,-36(fp)
   448d4:	10000526 	beq	r2,zero,448ec <SD_CMD7+0x168>
   448d8:	e0bffc83 	ldbu	r2,-14(fp)
   448dc:	10803fcc 	andi	r2,r2,255
   448e0:	1080004c 	andi	r2,r2,1
   448e4:	1000011e 	bne	r2,zero,448ec <SD_CMD7+0x168>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   448e8:	e03ff715 	stw	zero,-36(fp)
          
    }
    
     
    
    return bSuccess;
   448ec:	e0bff717 	ldw	r2,-36(fp)
}
   448f0:	e037883a 	mov	sp,fp
   448f4:	dfc00117 	ldw	ra,4(sp)
   448f8:	df000017 	ldw	fp,0(sp)
   448fc:	dec00204 	addi	sp,sp,8
   44900:	f800283a 	ret

00044904 <SD_CMD16>:

bool SD_CMD16(alt_u32 BlockSize){
   44904:	defff504 	addi	sp,sp,-44
   44908:	dfc00a15 	stw	ra,40(sp)
   4490c:	df000915 	stw	fp,36(sp)
   44910:	df000904 	addi	fp,sp,36
   44914:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 16;
   44918:	00800404 	movi	r2,16
   4491c:	e0bff805 	stb	r2,-32(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   44920:	00801004 	movi	r2,64
   44924:	e0bffcc5 	stb	r2,-13(fp)
   44928:	e03ffd05 	stb	zero,-12(fp)
   4492c:	e03ffd45 	stb	zero,-11(fp)
   44930:	e03ffd85 	stb	zero,-10(fp)
   44934:	e03ffdc5 	stb	zero,-9(fp)
   44938:	e03ffe05 	stb	zero,-8(fp)

    SDCARD_TRACE(("CMD16\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   4493c:	e0fffcc3 	ldbu	r3,-13(fp)
   44940:	e0bff803 	ldbu	r2,-32(fp)
   44944:	1884b03a 	or	r2,r3,r2
   44948:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[1] |= BlockSize >> 24;
   4494c:	e0bffd03 	ldbu	r2,-12(fp)
   44950:	e0ffff17 	ldw	r3,-4(fp)
   44954:	1806d63a 	srli	r3,r3,24
   44958:	10c4b03a 	or	r2,r2,r3
   4495c:	e0bffd05 	stb	r2,-12(fp)
    szCmd[2] |= BlockSize >> 16;
   44960:	e0bffd43 	ldbu	r2,-11(fp)
   44964:	e0ffff17 	ldw	r3,-4(fp)
   44968:	1806d43a 	srli	r3,r3,16
   4496c:	10c4b03a 	or	r2,r2,r3
   44970:	e0bffd45 	stb	r2,-11(fp)
    szCmd[3] |= BlockSize >> 8;
   44974:	e0bffd83 	ldbu	r2,-10(fp)
   44978:	e0ffff17 	ldw	r3,-4(fp)
   4497c:	1806d23a 	srli	r3,r3,8
   44980:	10c4b03a 	or	r2,r2,r3
   44984:	e0bffd85 	stb	r2,-10(fp)
    szCmd[4] |= BlockSize & 0xFF;
   44988:	e0bffdc3 	ldbu	r2,-9(fp)
   4498c:	e0ffff17 	ldw	r3,-4(fp)
   44990:	10c4b03a 	or	r2,r2,r3
   44994:	e0bffdc5 	stb	r2,-9(fp)
    crc = crc7(0, szCmd, 5);
   44998:	e0bffcc4 	addi	r2,fp,-13
   4499c:	0009883a 	mov	r4,zero
   449a0:	100b883a 	mov	r5,r2
   449a4:	01800144 	movi	r6,5
   449a8:	0042ed40 	call	42ed4 <crc7>
   449ac:	e0bff845 	stb	r2,-31(fp)
    szCmd[5] = (crc << 1) | 0x01;
   449b0:	e0bff843 	ldbu	r2,-31(fp)
   449b4:	1085883a 	add	r2,r2,r2
   449b8:	10800054 	ori	r2,r2,1
   449bc:	e0bffe05 	stb	r2,-8(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   449c0:	e0bffcc4 	addi	r2,fp,-13
   449c4:	1009883a 	mov	r4,r2
   449c8:	01400184 	movi	r5,6
   449cc:	004300c0 	call	4300c <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   449d0:	e0bffb44 	addi	r2,fp,-19
   449d4:	1009883a 	mov	r4,r2
   449d8:	01400184 	movi	r5,6
   449dc:	00431100 	call	43110 <SDHAL_GetResponse>
   449e0:	e0bff715 	stw	r2,-36(fp)
    
    // check response content
    if (bSuccess){
   449e4:	e0bff717 	ldw	r2,-36(fp)
   449e8:	10002826 	beq	r2,zero,44a8c <SD_CMD16+0x188>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
   449ec:	e0bff717 	ldw	r2,-36(fp)
   449f0:	10000526 	beq	r2,zero,44a08 <SD_CMD16+0x104>
   449f4:	e0bffb43 	ldbu	r2,-19(fp)
   449f8:	10c03fcc 	andi	r3,r2,255
   449fc:	e0bff803 	ldbu	r2,-32(fp)
   44a00:	18800126 	beq	r3,r2,44a08 <SD_CMD16+0x104>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   44a04:	e03ff715 	stw	zero,-36(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
   44a08:	e0bffb44 	addi	r2,fp,-19
   44a0c:	10800044 	addi	r2,r2,1
   44a10:	1009883a 	mov	r4,r2
   44a14:	00451800 	call	45180 <ArrayToU32>
   44a18:	e0bff915 	stw	r2,-28(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
   44a1c:	00824004 	movi	r2,2304
   44a20:	e0bffa15 	stw	r2,-24(fp)
        if (CardStatus != ExpectedStatus){
   44a24:	e0fff917 	ldw	r3,-28(fp)
   44a28:	e0bffa17 	ldw	r2,-24(fp)
   44a2c:	18800126 	beq	r3,r2,44a34 <SD_CMD16+0x130>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   44a30:	e03ff715 	stw	zero,-36(fp)
        }        
        
        // check crc
        if (bSuccess){
   44a34:	e0bff717 	ldw	r2,-36(fp)
   44a38:	10000d26 	beq	r2,zero,44a70 <SD_CMD16+0x16c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   44a3c:	e0bffb44 	addi	r2,fp,-19
   44a40:	0009883a 	mov	r4,zero
   44a44:	100b883a 	mov	r5,r2
   44a48:	01800144 	movi	r6,5
   44a4c:	0042ed40 	call	42ed4 <crc7>
   44a50:	e0bffb05 	stb	r2,-20(fp)
            if (crc != (szResponse[5] >> 1)){
   44a54:	e0bffc83 	ldbu	r2,-14(fp)
   44a58:	10803fcc 	andi	r2,r2,255
   44a5c:	1004d07a 	srli	r2,r2,1
   44a60:	10c03fcc 	andi	r3,r2,255
   44a64:	e0bffb03 	ldbu	r2,-20(fp)
   44a68:	18800126 	beq	r3,r2,44a70 <SD_CMD16+0x16c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   44a6c:	e03ff715 	stw	zero,-36(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   44a70:	e0bff717 	ldw	r2,-36(fp)
   44a74:	10000526 	beq	r2,zero,44a8c <SD_CMD16+0x188>
   44a78:	e0bffc83 	ldbu	r2,-14(fp)
   44a7c:	10803fcc 	andi	r2,r2,255
   44a80:	1080004c 	andi	r2,r2,1
   44a84:	1000011e 	bne	r2,zero,44a8c <SD_CMD16+0x188>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   44a88:	e03ff715 	stw	zero,-36(fp)
          
    }
    
     
    
    return bSuccess;
   44a8c:	e0bff717 	ldw	r2,-36(fp)
}
   44a90:	e037883a 	mov	sp,fp
   44a94:	dfc00117 	ldw	ra,4(sp)
   44a98:	df000017 	ldw	fp,0(sp)
   44a9c:	dec00204 	addi	sp,sp,8
   44aa0:	f800283a 	ret

00044aa4 <SD_ACMD6>:

// SET_BUS_WIDTH
// Response: R1
bool SD_ACMD6(bool b4BitsBus, alt_u8 ExpectedState){
   44aa4:	defff404 	addi	sp,sp,-48
   44aa8:	dfc00b15 	stw	ra,44(sp)
   44aac:	df000a15 	stw	fp,40(sp)
   44ab0:	df000a04 	addi	fp,sp,40
   44ab4:	e13ffe15 	stw	r4,-8(fp)
   44ab8:	2805883a 	mov	r2,r5
   44abc:	e0bfff05 	stb	r2,-4(fp)

    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 6;
   44ac0:	00800184 	movi	r2,6
   44ac4:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc; 
   44ac8:	00801004 	movi	r2,64
   44acc:	e0bffbc5 	stb	r2,-17(fp)
   44ad0:	e03ffc05 	stb	zero,-16(fp)
   44ad4:	e03ffc45 	stb	zero,-15(fp)
   44ad8:	e03ffc85 	stb	zero,-14(fp)
   44adc:	e03ffcc5 	stb	zero,-13(fp)
   44ae0:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("ACMD6\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   44ae4:	e0fffbc3 	ldbu	r3,-17(fp)
   44ae8:	e0bff703 	ldbu	r2,-36(fp)
   44aec:	1884b03a 	or	r2,r3,r2
   44af0:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[4] |= b4BitsBus?2:0;
   44af4:	e0bffcc3 	ldbu	r2,-13(fp)
   44af8:	1007883a 	mov	r3,r2
   44afc:	e0bffe17 	ldw	r2,-8(fp)
   44b00:	10000226 	beq	r2,zero,44b0c <SD_ACMD6+0x68>
   44b04:	00800084 	movi	r2,2
   44b08:	00000106 	br	44b10 <SD_ACMD6+0x6c>
   44b0c:	0005883a 	mov	r2,zero
   44b10:	1884b03a 	or	r2,r3,r2
   44b14:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
   44b18:	e0bffbc4 	addi	r2,fp,-17
   44b1c:	0009883a 	mov	r4,zero
   44b20:	100b883a 	mov	r5,r2
   44b24:	01800144 	movi	r6,5
   44b28:	0042ed40 	call	42ed4 <crc7>
   44b2c:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   44b30:	e0bff743 	ldbu	r2,-35(fp)
   44b34:	1085883a 	add	r2,r2,r2
   44b38:	10800054 	ori	r2,r2,1
   44b3c:	e0bffd05 	stb	r2,-12(fp)
    
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   44b40:	e0bffbc4 	addi	r2,fp,-17
   44b44:	1009883a 	mov	r4,r2
   44b48:	01400184 	movi	r5,6
   44b4c:	004300c0 	call	4300c <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   44b50:	e0bffa44 	addi	r2,fp,-23
   44b54:	1009883a 	mov	r4,r2
   44b58:	01400184 	movi	r5,6
   44b5c:	00431100 	call	43110 <SDHAL_GetResponse>
   44b60:	e0bff615 	stw	r2,-40(fp)
    
    if (bSuccess){
   44b64:	e0bff617 	ldw	r2,-40(fp)
   44b68:	10002b26 	beq	r2,zero,44c18 <SD_ACMD6+0x174>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){
   44b6c:	e0bff617 	ldw	r2,-40(fp)
   44b70:	10000526 	beq	r2,zero,44b88 <SD_ACMD6+0xe4>
   44b74:	e0bffa43 	ldbu	r2,-23(fp)
   44b78:	10c03fcc 	andi	r3,r2,255
   44b7c:	e0bff703 	ldbu	r2,-36(fp)
   44b80:	18800126 	beq	r3,r2,44b88 <SD_ACMD6+0xe4>
            SDCARD_DEBUG(("CMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
   44b84:	e03ff615 	stw	zero,-40(fp)
        }
        
        // [1]~[4]: CardStatus
        CardStatus = ArrayToU32(&szResponse[1]);
   44b88:	e0bffa44 	addi	r2,fp,-23
   44b8c:	10800044 	addi	r2,r2,1
   44b90:	1009883a 	mov	r4,r2
   44b94:	00451800 	call	45180 <ArrayToU32>
   44b98:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
   44b9c:	e0bfff03 	ldbu	r2,-4(fp)
   44ba0:	108003cc 	andi	r2,r2,15
   44ba4:	1004927a 	slli	r2,r2,9
   44ba8:	10804814 	ori	r2,r2,288
   44bac:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
   44bb0:	e0fff817 	ldw	r3,-32(fp)
   44bb4:	e0bff917 	ldw	r2,-28(fp)
   44bb8:	18800126 	beq	r3,r2,44bc0 <SD_ACMD6+0x11c>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   44bbc:	e03ff615 	stw	zero,-40(fp)
        }
                
        // check crc
        if (bSuccess){
   44bc0:	e0bff617 	ldw	r2,-40(fp)
   44bc4:	10000d26 	beq	r2,zero,44bfc <SD_ACMD6+0x158>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   44bc8:	e0bffa44 	addi	r2,fp,-23
   44bcc:	0009883a 	mov	r4,zero
   44bd0:	100b883a 	mov	r5,r2
   44bd4:	01800144 	movi	r6,5
   44bd8:	0042ed40 	call	42ed4 <crc7>
   44bdc:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
   44be0:	e0bffb83 	ldbu	r2,-18(fp)
   44be4:	10803fcc 	andi	r2,r2,255
   44be8:	1004d07a 	srli	r2,r2,1
   44bec:	10c03fcc 	andi	r3,r2,255
   44bf0:	e0bffa03 	ldbu	r2,-24(fp)
   44bf4:	18800126 	beq	r3,r2,44bfc <SD_ACMD6+0x158>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   44bf8:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   44bfc:	e0bff617 	ldw	r2,-40(fp)
   44c00:	10000526 	beq	r2,zero,44c18 <SD_ACMD6+0x174>
   44c04:	e0bffb83 	ldbu	r2,-18(fp)
   44c08:	10803fcc 	andi	r2,r2,255
   44c0c:	1080004c 	andi	r2,r2,1
   44c10:	1000011e 	bne	r2,zero,44c18 <SD_ACMD6+0x174>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   44c14:	e03ff615 	stw	zero,-40(fp)
        }
          
    }      
    

    return bSuccess;
   44c18:	e0bff617 	ldw	r2,-40(fp)
}
   44c1c:	e037883a 	mov	sp,fp
   44c20:	dfc00117 	ldw	ra,4(sp)
   44c24:	df000017 	ldw	fp,0(sp)
   44c28:	dec00204 	addi	sp,sp,8
   44c2c:	f800283a 	ret

00044c30 <SD_ACMD42>:

// SET_CLR_CARD_DETECT
// Response: R1
bool SD_ACMD42(bool b4BitsBus, alt_u8 ExpectedState){
   44c30:	defff404 	addi	sp,sp,-48
   44c34:	dfc00b15 	stw	ra,44(sp)
   44c38:	df000a15 	stw	fp,40(sp)
   44c3c:	df000a04 	addi	fp,sp,40
   44c40:	e13ffe15 	stw	r4,-8(fp)
   44c44:	2805883a 	mov	r2,r5
   44c48:	e0bfff05 	stb	r2,-4(fp)

    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 42;
   44c4c:	00800a84 	movi	r2,42
   44c50:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc; 
   44c54:	00801004 	movi	r2,64
   44c58:	e0bffbc5 	stb	r2,-17(fp)
   44c5c:	e03ffc05 	stb	zero,-16(fp)
   44c60:	e03ffc45 	stb	zero,-15(fp)
   44c64:	e03ffc85 	stb	zero,-14(fp)
   44c68:	e03ffcc5 	stb	zero,-13(fp)
   44c6c:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("ACMD42\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
   44c70:	e0fffbc3 	ldbu	r3,-17(fp)
   44c74:	e0bff703 	ldbu	r2,-36(fp)
   44c78:	1884b03a 	or	r2,r3,r2
   44c7c:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[4] |= b4BitsBus?1:0;
   44c80:	e0bffcc3 	ldbu	r2,-13(fp)
   44c84:	1007883a 	mov	r3,r2
   44c88:	e0bffe17 	ldw	r2,-8(fp)
   44c8c:	1004c03a 	cmpne	r2,r2,zero
   44c90:	1884b03a 	or	r2,r3,r2
   44c94:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
   44c98:	e0bffbc4 	addi	r2,fp,-17
   44c9c:	0009883a 	mov	r4,zero
   44ca0:	100b883a 	mov	r5,r2
   44ca4:	01800144 	movi	r6,5
   44ca8:	0042ed40 	call	42ed4 <crc7>
   44cac:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   44cb0:	e0bff743 	ldbu	r2,-35(fp)
   44cb4:	1085883a 	add	r2,r2,r2
   44cb8:	10800054 	ori	r2,r2,1
   44cbc:	e0bffd05 	stb	r2,-12(fp)
    
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   44cc0:	e0bffbc4 	addi	r2,fp,-17
   44cc4:	1009883a 	mov	r4,r2
   44cc8:	01400184 	movi	r5,6
   44ccc:	004300c0 	call	4300c <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   44cd0:	e0bffa44 	addi	r2,fp,-23
   44cd4:	1009883a 	mov	r4,r2
   44cd8:	01400184 	movi	r5,6
   44cdc:	00431100 	call	43110 <SDHAL_GetResponse>
   44ce0:	e0bff615 	stw	r2,-40(fp)
    
    if (bSuccess){
   44ce4:	e0bff617 	ldw	r2,-40(fp)
   44ce8:	10002b26 	beq	r2,zero,44d98 <SD_ACMD42+0x168>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){
   44cec:	e0bff617 	ldw	r2,-40(fp)
   44cf0:	10000526 	beq	r2,zero,44d08 <SD_ACMD42+0xd8>
   44cf4:	e0bffa43 	ldbu	r2,-23(fp)
   44cf8:	10c03fcc 	andi	r3,r2,255
   44cfc:	e0bff703 	ldbu	r2,-36(fp)
   44d00:	18800126 	beq	r3,r2,44d08 <SD_ACMD42+0xd8>
            SDCARD_DEBUG(("CMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
   44d04:	e03ff615 	stw	zero,-40(fp)
        }
        
        // [1]~[4]: CardStatus
        CardStatus = ArrayToU32(&szResponse[1]);
   44d08:	e0bffa44 	addi	r2,fp,-23
   44d0c:	10800044 	addi	r2,r2,1
   44d10:	1009883a 	mov	r4,r2
   44d14:	00451800 	call	45180 <ArrayToU32>
   44d18:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
   44d1c:	e0bfff03 	ldbu	r2,-4(fp)
   44d20:	108003cc 	andi	r2,r2,15
   44d24:	1004927a 	slli	r2,r2,9
   44d28:	10804814 	ori	r2,r2,288
   44d2c:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
   44d30:	e0fff817 	ldw	r3,-32(fp)
   44d34:	e0bff917 	ldw	r2,-28(fp)
   44d38:	18800126 	beq	r3,r2,44d40 <SD_ACMD42+0x110>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   44d3c:	e03ff615 	stw	zero,-40(fp)
        }
                
        // check crc
        if (bSuccess){
   44d40:	e0bff617 	ldw	r2,-40(fp)
   44d44:	10000d26 	beq	r2,zero,44d7c <SD_ACMD42+0x14c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   44d48:	e0bffa44 	addi	r2,fp,-23
   44d4c:	0009883a 	mov	r4,zero
   44d50:	100b883a 	mov	r5,r2
   44d54:	01800144 	movi	r6,5
   44d58:	0042ed40 	call	42ed4 <crc7>
   44d5c:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
   44d60:	e0bffb83 	ldbu	r2,-18(fp)
   44d64:	10803fcc 	andi	r2,r2,255
   44d68:	1004d07a 	srli	r2,r2,1
   44d6c:	10c03fcc 	andi	r3,r2,255
   44d70:	e0bffa03 	ldbu	r2,-24(fp)
   44d74:	18800126 	beq	r3,r2,44d7c <SD_ACMD42+0x14c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   44d78:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   44d7c:	e0bff617 	ldw	r2,-40(fp)
   44d80:	10000526 	beq	r2,zero,44d98 <SD_ACMD42+0x168>
   44d84:	e0bffb83 	ldbu	r2,-18(fp)
   44d88:	10803fcc 	andi	r2,r2,255
   44d8c:	1080004c 	andi	r2,r2,1
   44d90:	1000011e 	bne	r2,zero,44d98 <SD_ACMD42+0x168>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   44d94:	e03ff615 	stw	zero,-40(fp)
        }
          
    }      
    

    return bSuccess;
   44d98:	e0bff617 	ldw	r2,-40(fp)
}
   44d9c:	e037883a 	mov	sp,fp
   44da0:	dfc00117 	ldw	ra,4(sp)
   44da4:	df000017 	ldw	fp,0(sp)
   44da8:	dec00204 	addi	sp,sp,8
   44dac:	f800283a 	ret

00044db0 <SD_CMD17>:


// READ_SINGLE_BLOCK
// Response R1
bool SD_CMD17(alt_u32 Addr, alt_u8 ExpectedStatus){
   44db0:	defff404 	addi	sp,sp,-48
   44db4:	dfc00b15 	stw	ra,44(sp)
   44db8:	df000a15 	stw	fp,40(sp)
   44dbc:	df000a04 	addi	fp,sp,40
   44dc0:	e13ffe15 	stw	r4,-8(fp)
   44dc4:	2805883a 	mov	r2,r5
   44dc8:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 17;
   44dcc:	00800444 	movi	r2,17
   44dd0:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   44dd4:	00801004 	movi	r2,64
   44dd8:	e0bffbc5 	stb	r2,-17(fp)
   44ddc:	e03ffc05 	stb	zero,-16(fp)
   44de0:	e03ffc45 	stb	zero,-15(fp)
   44de4:	e03ffc85 	stb	zero,-14(fp)
   44de8:	e03ffcc5 	stb	zero,-13(fp)
   44dec:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("CMD17\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   44df0:	e0fffbc3 	ldbu	r3,-17(fp)
   44df4:	e0bff703 	ldbu	r2,-36(fp)
   44df8:	1884b03a 	or	r2,r3,r2
   44dfc:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[1] |= (Addr >> 24) & 0xFF;
   44e00:	e0bffc03 	ldbu	r2,-16(fp)
   44e04:	e0fffe17 	ldw	r3,-8(fp)
   44e08:	1806d63a 	srli	r3,r3,24
   44e0c:	10c4b03a 	or	r2,r2,r3
   44e10:	e0bffc05 	stb	r2,-16(fp)
    szCmd[2] |= (Addr >> 16) & 0xFF;
   44e14:	e0bffc43 	ldbu	r2,-15(fp)
   44e18:	e0fffe17 	ldw	r3,-8(fp)
   44e1c:	1806d43a 	srli	r3,r3,16
   44e20:	10c4b03a 	or	r2,r2,r3
   44e24:	e0bffc45 	stb	r2,-15(fp)
    szCmd[3] |= (Addr >> 8) & 0xFF;
   44e28:	e0bffc83 	ldbu	r2,-14(fp)
   44e2c:	e0fffe17 	ldw	r3,-8(fp)
   44e30:	1806d23a 	srli	r3,r3,8
   44e34:	10c4b03a 	or	r2,r2,r3
   44e38:	e0bffc85 	stb	r2,-14(fp)
    szCmd[4] |= Addr & 0xFF;
   44e3c:	e0bffcc3 	ldbu	r2,-13(fp)
   44e40:	e0fffe17 	ldw	r3,-8(fp)
   44e44:	10c4b03a 	or	r2,r2,r3
   44e48:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
   44e4c:	e0bffbc4 	addi	r2,fp,-17
   44e50:	0009883a 	mov	r4,zero
   44e54:	100b883a 	mov	r5,r2
   44e58:	01800144 	movi	r6,5
   44e5c:	0042ed40 	call	42ed4 <crc7>
   44e60:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   44e64:	e0bff743 	ldbu	r2,-35(fp)
   44e68:	1085883a 	add	r2,r2,r2
   44e6c:	10800054 	ori	r2,r2,1
   44e70:	e0bffd05 	stb	r2,-12(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   44e74:	e0bffbc4 	addi	r2,fp,-17
   44e78:	1009883a 	mov	r4,r2
   44e7c:	01400184 	movi	r5,6
   44e80:	004300c0 	call	4300c <SDHAL_SendCmd>
  

    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   44e84:	e0bffa44 	addi	r2,fp,-23
   44e88:	1009883a 	mov	r4,r2
   44e8c:	01400184 	movi	r5,6
   44e90:	00431100 	call	43110 <SDHAL_GetResponse>
   44e94:	e0bff615 	stw	r2,-40(fp)
    
    // check response content
    if (bSuccess){
   44e98:	e0bff617 	ldw	r2,-40(fp)
   44e9c:	10002826 	beq	r2,zero,44f40 <SD_CMD17+0x190>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
   44ea0:	e0bff617 	ldw	r2,-40(fp)
   44ea4:	10000526 	beq	r2,zero,44ebc <SD_CMD17+0x10c>
   44ea8:	e0bffa43 	ldbu	r2,-23(fp)
   44eac:	10c03fcc 	andi	r3,r2,255
   44eb0:	e0bff703 	ldbu	r2,-36(fp)
   44eb4:	18800126 	beq	r3,r2,44ebc <SD_CMD17+0x10c>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   44eb8:	e03ff615 	stw	zero,-40(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
   44ebc:	e0bffa44 	addi	r2,fp,-23
   44ec0:	10800044 	addi	r2,r2,1
   44ec4:	1009883a 	mov	r4,r2
   44ec8:	00451800 	call	45180 <ArrayToU32>
   44ecc:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
   44ed0:	00824004 	movi	r2,2304
   44ed4:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
   44ed8:	e0fff817 	ldw	r3,-32(fp)
   44edc:	e0bff917 	ldw	r2,-28(fp)
   44ee0:	18800126 	beq	r3,r2,44ee8 <SD_CMD17+0x138>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   44ee4:	e03ff615 	stw	zero,-40(fp)
        }        
        
        // check crc
        if (bSuccess){
   44ee8:	e0bff617 	ldw	r2,-40(fp)
   44eec:	10000d26 	beq	r2,zero,44f24 <SD_CMD17+0x174>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   44ef0:	e0bffa44 	addi	r2,fp,-23
   44ef4:	0009883a 	mov	r4,zero
   44ef8:	100b883a 	mov	r5,r2
   44efc:	01800144 	movi	r6,5
   44f00:	0042ed40 	call	42ed4 <crc7>
   44f04:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
   44f08:	e0bffb83 	ldbu	r2,-18(fp)
   44f0c:	10803fcc 	andi	r2,r2,255
   44f10:	1004d07a 	srli	r2,r2,1
   44f14:	10c03fcc 	andi	r3,r2,255
   44f18:	e0bffa03 	ldbu	r2,-24(fp)
   44f1c:	18800126 	beq	r3,r2,44f24 <SD_CMD17+0x174>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   44f20:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   44f24:	e0bff617 	ldw	r2,-40(fp)
   44f28:	10000526 	beq	r2,zero,44f40 <SD_CMD17+0x190>
   44f2c:	e0bffb83 	ldbu	r2,-18(fp)
   44f30:	10803fcc 	andi	r2,r2,255
   44f34:	1080004c 	andi	r2,r2,1
   44f38:	1000011e 	bne	r2,zero,44f40 <SD_CMD17+0x190>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   44f3c:	e03ff615 	stw	zero,-40(fp)
          
    }
    
     
    
    return bSuccess;
   44f40:	e0bff617 	ldw	r2,-40(fp)
}
   44f44:	e037883a 	mov	sp,fp
   44f48:	dfc00117 	ldw	ra,4(sp)
   44f4c:	df000017 	ldw	fp,0(sp)
   44f50:	dec00204 	addi	sp,sp,8
   44f54:	f800283a 	ret

00044f58 <SD_CMD24>:

// WRITE_BLOCK (Single)
// Response R1
bool SD_CMD24(alt_u32 Addr, alt_u8 ExpectedStatus){
   44f58:	defff404 	addi	sp,sp,-48
   44f5c:	dfc00b15 	stw	ra,44(sp)
   44f60:	df000a15 	stw	fp,40(sp)
   44f64:	df000a04 	addi	fp,sp,40
   44f68:	e13ffe15 	stw	r4,-8(fp)
   44f6c:	2805883a 	mov	r2,r5
   44f70:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 24;
   44f74:	00800604 	movi	r2,24
   44f78:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
   44f7c:	00801004 	movi	r2,64
   44f80:	e0bffbc5 	stb	r2,-17(fp)
   44f84:	e03ffc05 	stb	zero,-16(fp)
   44f88:	e03ffc45 	stb	zero,-15(fp)
   44f8c:	e03ffc85 	stb	zero,-14(fp)
   44f90:	e03ffcc5 	stb	zero,-13(fp)
   44f94:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("CMD24\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
   44f98:	e0fffbc3 	ldbu	r3,-17(fp)
   44f9c:	e0bff703 	ldbu	r2,-36(fp)
   44fa0:	1884b03a 	or	r2,r3,r2
   44fa4:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[1] |= (Addr >> 24) & 0xFF;
   44fa8:	e0bffc03 	ldbu	r2,-16(fp)
   44fac:	e0fffe17 	ldw	r3,-8(fp)
   44fb0:	1806d63a 	srli	r3,r3,24
   44fb4:	10c4b03a 	or	r2,r2,r3
   44fb8:	e0bffc05 	stb	r2,-16(fp)
    szCmd[2] |= (Addr >> 16) & 0xFF;
   44fbc:	e0bffc43 	ldbu	r2,-15(fp)
   44fc0:	e0fffe17 	ldw	r3,-8(fp)
   44fc4:	1806d43a 	srli	r3,r3,16
   44fc8:	10c4b03a 	or	r2,r2,r3
   44fcc:	e0bffc45 	stb	r2,-15(fp)
    szCmd[3] |= (Addr >> 8) & 0xFF;
   44fd0:	e0bffc83 	ldbu	r2,-14(fp)
   44fd4:	e0fffe17 	ldw	r3,-8(fp)
   44fd8:	1806d23a 	srli	r3,r3,8
   44fdc:	10c4b03a 	or	r2,r2,r3
   44fe0:	e0bffc85 	stb	r2,-14(fp)
    szCmd[4] |= Addr & 0xFF;
   44fe4:	e0bffcc3 	ldbu	r2,-13(fp)
   44fe8:	e0fffe17 	ldw	r3,-8(fp)
   44fec:	10c4b03a 	or	r2,r2,r3
   44ff0:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
   44ff4:	e0bffbc4 	addi	r2,fp,-17
   44ff8:	0009883a 	mov	r4,zero
   44ffc:	100b883a 	mov	r5,r2
   45000:	01800144 	movi	r6,5
   45004:	0042ed40 	call	42ed4 <crc7>
   45008:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
   4500c:	e0bff743 	ldbu	r2,-35(fp)
   45010:	1085883a 	add	r2,r2,r2
   45014:	10800054 	ori	r2,r2,1
   45018:	e0bffd05 	stb	r2,-12(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
   4501c:	e0bffbc4 	addi	r2,fp,-17
   45020:	1009883a 	mov	r4,r2
   45024:	01400184 	movi	r5,6
   45028:	004300c0 	call	4300c <SDHAL_SendCmd>
  

    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
   4502c:	e0bffa44 	addi	r2,fp,-23
   45030:	1009883a 	mov	r4,r2
   45034:	01400184 	movi	r5,6
   45038:	00431100 	call	43110 <SDHAL_GetResponse>
   4503c:	e0bff615 	stw	r2,-40(fp)
    
    // check response content
    if (bSuccess){
   45040:	e0bff617 	ldw	r2,-40(fp)
   45044:	10002826 	beq	r2,zero,450e8 <SD_CMD24+0x190>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
   45048:	e0bff617 	ldw	r2,-40(fp)
   4504c:	10000526 	beq	r2,zero,45064 <SD_CMD24+0x10c>
   45050:	e0bffa43 	ldbu	r2,-23(fp)
   45054:	10c03fcc 	andi	r3,r2,255
   45058:	e0bff703 	ldbu	r2,-36(fp)
   4505c:	18800126 	beq	r3,r2,45064 <SD_CMD24+0x10c>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
   45060:	e03ff615 	stw	zero,-40(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
   45064:	e0bffa44 	addi	r2,fp,-23
   45068:	10800044 	addi	r2,r2,1
   4506c:	1009883a 	mov	r4,r2
   45070:	00451800 	call	45180 <ArrayToU32>
   45074:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
   45078:	00824004 	movi	r2,2304
   4507c:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
   45080:	e0fff817 	ldw	r3,-32(fp)
   45084:	e0bff917 	ldw	r2,-28(fp)
   45088:	18800126 	beq	r3,r2,45090 <SD_CMD24+0x138>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
   4508c:	e03ff615 	stw	zero,-40(fp)
        }        
        
        // check crc
        if (bSuccess){
   45090:	e0bff617 	ldw	r2,-40(fp)
   45094:	10000d26 	beq	r2,zero,450cc <SD_CMD24+0x174>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
   45098:	e0bffa44 	addi	r2,fp,-23
   4509c:	0009883a 	mov	r4,zero
   450a0:	100b883a 	mov	r5,r2
   450a4:	01800144 	movi	r6,5
   450a8:	0042ed40 	call	42ed4 <crc7>
   450ac:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
   450b0:	e0bffb83 	ldbu	r2,-18(fp)
   450b4:	10803fcc 	andi	r2,r2,255
   450b8:	1004d07a 	srli	r2,r2,1
   450bc:	10c03fcc 	andi	r3,r2,255
   450c0:	e0bffa03 	ldbu	r2,-24(fp)
   450c4:	18800126 	beq	r3,r2,450cc <SD_CMD24+0x174>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
   450c8:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
   450cc:	e0bff617 	ldw	r2,-40(fp)
   450d0:	10000526 	beq	r2,zero,450e8 <SD_CMD24+0x190>
   450d4:	e0bffb83 	ldbu	r2,-18(fp)
   450d8:	10803fcc 	andi	r2,r2,255
   450dc:	1080004c 	andi	r2,r2,1
   450e0:	1000011e 	bne	r2,zero,450e8 <SD_CMD24+0x190>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
   450e4:	e03ff615 	stw	zero,-40(fp)
          
    }
    
     
    
    return bSuccess;
   450e8:	e0bff617 	ldw	r2,-40(fp)
}
   450ec:	e037883a 	mov	sp,fp
   450f0:	dfc00117 	ldw	ra,4(sp)
   450f4:	df000017 	ldw	fp,0(sp)
   450f8:	dec00204 	addi	sp,sp,8
   450fc:	f800283a 	ret

00045100 <SD_ReadData>:


bool SD_ReadData(alt_u8 szBuf[], int nBufLen){
   45100:	defffb04 	addi	sp,sp,-20
   45104:	dfc00415 	stw	ra,16(sp)
   45108:	df000315 	stw	fp,12(sp)
   4510c:	df000304 	addi	fp,sp,12
   45110:	e13ffe15 	stw	r4,-8(fp)
   45114:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    bSuccess = SDHAL_ReadData(szBuf, nBufLen);
   45118:	e13ffe17 	ldw	r4,-8(fp)
   4511c:	e17fff17 	ldw	r5,-4(fp)
   45120:	00433340 	call	43334 <SDHAL_ReadData>
   45124:	e0bffd15 	stw	r2,-12(fp)
    return bSuccess;
   45128:	e0bffd17 	ldw	r2,-12(fp)
}
   4512c:	e037883a 	mov	sp,fp
   45130:	dfc00117 	ldw	ra,4(sp)
   45134:	df000017 	ldw	fp,0(sp)
   45138:	dec00204 	addi	sp,sp,8
   4513c:	f800283a 	ret

00045140 <SD_WriteData>:

bool SD_WriteData(alt_u8 szDataWrite[], int nDataLen){
   45140:	defffb04 	addi	sp,sp,-20
   45144:	dfc00415 	stw	ra,16(sp)
   45148:	df000315 	stw	fp,12(sp)
   4514c:	df000304 	addi	fp,sp,12
   45150:	e13ffe15 	stw	r4,-8(fp)
   45154:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    bSuccess = SDHAL_WriteData(szDataWrite, nDataLen);
   45158:	e13ffe17 	ldw	r4,-8(fp)
   4515c:	e17fff17 	ldw	r5,-4(fp)
   45160:	004349c0 	call	4349c <SDHAL_WriteData>
   45164:	e0bffd15 	stw	r2,-12(fp)
    return bSuccess;
   45168:	e0bffd17 	ldw	r2,-12(fp)
}
   4516c:	e037883a 	mov	sp,fp
   45170:	dfc00117 	ldw	ra,4(sp)
   45174:	df000017 	ldw	fp,0(sp)
   45178:	dec00204 	addi	sp,sp,8
   4517c:	f800283a 	ret

00045180 <ArrayToU32>:


alt_u32 ArrayToU32(alt_u8 szData[]){
   45180:	defffc04 	addi	sp,sp,-16
   45184:	df000315 	stw	fp,12(sp)
   45188:	df000304 	addi	fp,sp,12
   4518c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 Value32 = 0;
   45190:	e03ffd15 	stw	zero,-12(fp)
    int i;
    
    for(i=0;i<4;i++){
   45194:	e03ffe15 	stw	zero,-8(fp)
   45198:	00000e06 	br	451d4 <ArrayToU32+0x54>
        Value32 <<= 8;
   4519c:	e0bffd17 	ldw	r2,-12(fp)
   451a0:	1004923a 	slli	r2,r2,8
   451a4:	e0bffd15 	stw	r2,-12(fp)
        Value32 |= szData[i];
   451a8:	e0bffe17 	ldw	r2,-8(fp)
   451ac:	e0ffff17 	ldw	r3,-4(fp)
   451b0:	1885883a 	add	r2,r3,r2
   451b4:	10800003 	ldbu	r2,0(r2)
   451b8:	10803fcc 	andi	r2,r2,255
   451bc:	e0fffd17 	ldw	r3,-12(fp)
   451c0:	1884b03a 	or	r2,r3,r2
   451c4:	e0bffd15 	stw	r2,-12(fp)

alt_u32 ArrayToU32(alt_u8 szData[]){
    alt_u32 Value32 = 0;
    int i;
    
    for(i=0;i<4;i++){
   451c8:	e0bffe17 	ldw	r2,-8(fp)
   451cc:	10800044 	addi	r2,r2,1
   451d0:	e0bffe15 	stw	r2,-8(fp)
   451d4:	e0bffe17 	ldw	r2,-8(fp)
   451d8:	10800110 	cmplti	r2,r2,4
   451dc:	103fef1e 	bne	r2,zero,4519c <__alt_data_end+0xfffe07ac>
        Value32 <<= 8;
        Value32 |= szData[i];
    }
    return Value32;
   451e0:	e0bffd17 	ldw	r2,-12(fp)
}
   451e4:	e037883a 	mov	sp,fp
   451e8:	df000017 	ldw	fp,0(sp)
   451ec:	dec00104 	addi	sp,sp,4
   451f0:	f800283a 	ret

000451f4 <udivmodsi4>:
   451f4:	2900182e 	bgeu	r5,r4,45258 <udivmodsi4+0x64>
   451f8:	28001716 	blt	r5,zero,45258 <udivmodsi4+0x64>
   451fc:	00800804 	movi	r2,32
   45200:	00c00044 	movi	r3,1
   45204:	00000206 	br	45210 <udivmodsi4+0x1c>
   45208:	10001126 	beq	r2,zero,45250 <udivmodsi4+0x5c>
   4520c:	28000516 	blt	r5,zero,45224 <udivmodsi4+0x30>
   45210:	294b883a 	add	r5,r5,r5
   45214:	10bfffc4 	addi	r2,r2,-1
   45218:	18c7883a 	add	r3,r3,r3
   4521c:	293ffa36 	bltu	r5,r4,45208 <__alt_data_end+0xfffe0818>
   45220:	18000b26 	beq	r3,zero,45250 <udivmodsi4+0x5c>
   45224:	0005883a 	mov	r2,zero
   45228:	21400236 	bltu	r4,r5,45234 <udivmodsi4+0x40>
   4522c:	2149c83a 	sub	r4,r4,r5
   45230:	10c4b03a 	or	r2,r2,r3
   45234:	1806d07a 	srli	r3,r3,1
   45238:	280ad07a 	srli	r5,r5,1
   4523c:	183ffa1e 	bne	r3,zero,45228 <__alt_data_end+0xfffe0838>
   45240:	3000011e 	bne	r6,zero,45248 <udivmodsi4+0x54>
   45244:	f800283a 	ret
   45248:	2005883a 	mov	r2,r4
   4524c:	f800283a 	ret
   45250:	0005883a 	mov	r2,zero
   45254:	003ffa06 	br	45240 <__alt_data_end+0xfffe0850>
   45258:	00c00044 	movi	r3,1
   4525c:	003ff106 	br	45224 <__alt_data_end+0xfffe0834>

00045260 <__divsi3>:
   45260:	defffe04 	addi	sp,sp,-8
   45264:	dfc00115 	stw	ra,4(sp)
   45268:	dc000015 	stw	r16,0(sp)
   4526c:	20000b16 	blt	r4,zero,4529c <__divsi3+0x3c>
   45270:	0021883a 	mov	r16,zero
   45274:	28000c16 	blt	r5,zero,452a8 <__divsi3+0x48>
   45278:	000d883a 	mov	r6,zero
   4527c:	00451f40 	call	451f4 <udivmodsi4>
   45280:	0407c83a 	sub	r3,zero,r16
   45284:	1884f03a 	xor	r2,r3,r2
   45288:	1405883a 	add	r2,r2,r16
   4528c:	dfc00117 	ldw	ra,4(sp)
   45290:	dc000017 	ldw	r16,0(sp)
   45294:	dec00204 	addi	sp,sp,8
   45298:	f800283a 	ret
   4529c:	0109c83a 	sub	r4,zero,r4
   452a0:	04000044 	movi	r16,1
   452a4:	283ff40e 	bge	r5,zero,45278 <__alt_data_end+0xfffe0888>
   452a8:	014bc83a 	sub	r5,zero,r5
   452ac:	8400005c 	xori	r16,r16,1
   452b0:	003ff106 	br	45278 <__alt_data_end+0xfffe0888>

000452b4 <__modsi3>:
   452b4:	defffd04 	addi	sp,sp,-12
   452b8:	dfc00215 	stw	ra,8(sp)
   452bc:	dc400115 	stw	r17,4(sp)
   452c0:	dc000015 	stw	r16,0(sp)
   452c4:	20000c16 	blt	r4,zero,452f8 <__modsi3+0x44>
   452c8:	0023883a 	mov	r17,zero
   452cc:	0021883a 	mov	r16,zero
   452d0:	28000d16 	blt	r5,zero,45308 <__modsi3+0x54>
   452d4:	01800044 	movi	r6,1
   452d8:	00451f40 	call	451f4 <udivmodsi4>
   452dc:	1404f03a 	xor	r2,r2,r16
   452e0:	8885883a 	add	r2,r17,r2
   452e4:	dfc00217 	ldw	ra,8(sp)
   452e8:	dc400117 	ldw	r17,4(sp)
   452ec:	dc000017 	ldw	r16,0(sp)
   452f0:	dec00304 	addi	sp,sp,12
   452f4:	f800283a 	ret
   452f8:	0109c83a 	sub	r4,zero,r4
   452fc:	04400044 	movi	r17,1
   45300:	043fffc4 	movi	r16,-1
   45304:	283ff30e 	bge	r5,zero,452d4 <__alt_data_end+0xfffe08e4>
   45308:	014bc83a 	sub	r5,zero,r5
   4530c:	003ff106 	br	452d4 <__alt_data_end+0xfffe08e4>

00045310 <__udivsi3>:
   45310:	000d883a 	mov	r6,zero
   45314:	00451f41 	jmpi	451f4 <udivmodsi4>

00045318 <__umodsi3>:
   45318:	01800044 	movi	r6,1
   4531c:	00451f41 	jmpi	451f4 <udivmodsi4>

00045320 <__mulsi3>:
   45320:	0005883a 	mov	r2,zero
   45324:	20000726 	beq	r4,zero,45344 <__mulsi3+0x24>
   45328:	20c0004c 	andi	r3,r4,1
   4532c:	2008d07a 	srli	r4,r4,1
   45330:	18000126 	beq	r3,zero,45338 <__mulsi3+0x18>
   45334:	1145883a 	add	r2,r2,r5
   45338:	294b883a 	add	r5,r5,r5
   4533c:	203ffa1e 	bne	r4,zero,45328 <__alt_data_end+0xfffe0938>
   45340:	f800283a 	ret
   45344:	f800283a 	ret

00045348 <__divsf3>:
   45348:	defff504 	addi	sp,sp,-44
   4534c:	dd000515 	stw	r20,20(sp)
   45350:	2028d5fa 	srli	r20,r4,23
   45354:	dd400615 	stw	r21,24(sp)
   45358:	202ad7fa 	srli	r21,r4,31
   4535c:	00c02034 	movhi	r3,128
   45360:	dcc00415 	stw	r19,16(sp)
   45364:	dc800315 	stw	r18,12(sp)
   45368:	18ffffc4 	addi	r3,r3,-1
   4536c:	dfc00a15 	stw	ra,40(sp)
   45370:	df000915 	stw	fp,36(sp)
   45374:	ddc00815 	stw	r23,32(sp)
   45378:	dd800715 	stw	r22,28(sp)
   4537c:	dc400215 	stw	r17,8(sp)
   45380:	dc000115 	stw	r16,4(sp)
   45384:	a5003fcc 	andi	r20,r20,255
   45388:	1924703a 	and	r18,r3,r4
   4538c:	acc03fcc 	andi	r19,r21,255
   45390:	a0004d26 	beq	r20,zero,454c8 <__divsf3+0x180>
   45394:	00803fc4 	movi	r2,255
   45398:	a0802e26 	beq	r20,r2,45454 <__divsf3+0x10c>
   4539c:	91002034 	orhi	r4,r18,128
   453a0:	202490fa 	slli	r18,r4,3
   453a4:	a53fe044 	addi	r20,r20,-127
   453a8:	0021883a 	mov	r16,zero
   453ac:	002f883a 	mov	r23,zero
   453b0:	2804d5fa 	srli	r2,r5,23
   453b4:	282cd7fa 	srli	r22,r5,31
   453b8:	00c02034 	movhi	r3,128
   453bc:	18ffffc4 	addi	r3,r3,-1
   453c0:	10803fcc 	andi	r2,r2,255
   453c4:	1962703a 	and	r17,r3,r5
   453c8:	b7003fcc 	andi	fp,r22,255
   453cc:	10004526 	beq	r2,zero,454e4 <__divsf3+0x19c>
   453d0:	00c03fc4 	movi	r3,255
   453d4:	10c04026 	beq	r2,r3,454d8 <__divsf3+0x190>
   453d8:	88c02034 	orhi	r3,r17,128
   453dc:	182290fa 	slli	r17,r3,3
   453e0:	10bfe044 	addi	r2,r2,-127
   453e4:	0009883a 	mov	r4,zero
   453e8:	2420b03a 	or	r16,r4,r16
   453ec:	802090ba 	slli	r16,r16,2
   453f0:	01c00134 	movhi	r7,4
   453f4:	39d50504 	addi	r7,r7,21524
   453f8:	81e1883a 	add	r16,r16,r7
   453fc:	80c00017 	ldw	r3,0(r16)
   45400:	ad8af03a 	xor	r5,r21,r22
   45404:	280d883a 	mov	r6,r5
   45408:	a085c83a 	sub	r2,r20,r2
   4540c:	29403fcc 	andi	r5,r5,255
   45410:	1800683a 	jmp	r3
   45414:	00045620 	cmpeqi	zero,zero,4440
   45418:	000455c8 	cmpgei	zero,zero,4439
   4541c:	000455ec 	andhi	zero,zero,4439
   45420:	000455b4 	movhi	zero,4438
   45424:	000455ec 	andhi	zero,zero,4439
   45428:	00045464 	muli	zero,zero,4433
   4542c:	000455ec 	andhi	zero,zero,4439
   45430:	000455b4 	movhi	zero,4438
   45434:	000455c8 	cmpgei	zero,zero,4439
   45438:	000455c8 	cmpgei	zero,zero,4439
   4543c:	00045464 	muli	zero,zero,4433
   45440:	000455b4 	movhi	zero,4438
   45444:	000456b8 	rdprs	zero,zero,4442
   45448:	000456b8 	rdprs	zero,zero,4442
   4544c:	000456b8 	rdprs	zero,zero,4442
   45450:	000455f8 	rdprs	zero,zero,4439
   45454:	9000531e 	bne	r18,zero,455a4 <__divsf3+0x25c>
   45458:	04000204 	movi	r16,8
   4545c:	05c00084 	movi	r23,2
   45460:	003fd306 	br	453b0 <__alt_data_end+0xfffe09c0>
   45464:	00c02034 	movhi	r3,128
   45468:	000d883a 	mov	r6,zero
   4546c:	18ffffc4 	addi	r3,r3,-1
   45470:	013fffc4 	movi	r4,-1
   45474:	21003fcc 	andi	r4,r4,255
   45478:	200895fa 	slli	r4,r4,23
   4547c:	30803fcc 	andi	r2,r6,255
   45480:	01802034 	movhi	r6,128
   45484:	31bfffc4 	addi	r6,r6,-1
   45488:	100497fa 	slli	r2,r2,31
   4548c:	1986703a 	and	r3,r3,r6
   45490:	1906b03a 	or	r3,r3,r4
   45494:	1884b03a 	or	r2,r3,r2
   45498:	dfc00a17 	ldw	ra,40(sp)
   4549c:	df000917 	ldw	fp,36(sp)
   454a0:	ddc00817 	ldw	r23,32(sp)
   454a4:	dd800717 	ldw	r22,28(sp)
   454a8:	dd400617 	ldw	r21,24(sp)
   454ac:	dd000517 	ldw	r20,20(sp)
   454b0:	dcc00417 	ldw	r19,16(sp)
   454b4:	dc800317 	ldw	r18,12(sp)
   454b8:	dc400217 	ldw	r17,8(sp)
   454bc:	dc000117 	ldw	r16,4(sp)
   454c0:	dec00b04 	addi	sp,sp,44
   454c4:	f800283a 	ret
   454c8:	90002b1e 	bne	r18,zero,45578 <__divsf3+0x230>
   454cc:	04000104 	movi	r16,4
   454d0:	05c00044 	movi	r23,1
   454d4:	003fb606 	br	453b0 <__alt_data_end+0xfffe09c0>
   454d8:	8800251e 	bne	r17,zero,45570 <__divsf3+0x228>
   454dc:	01000084 	movi	r4,2
   454e0:	00000206 	br	454ec <__divsf3+0x1a4>
   454e4:	88001a1e 	bne	r17,zero,45550 <__divsf3+0x208>
   454e8:	01000044 	movi	r4,1
   454ec:	2420b03a 	or	r16,r4,r16
   454f0:	802090ba 	slli	r16,r16,2
   454f4:	00c00134 	movhi	r3,4
   454f8:	18d54404 	addi	r3,r3,21776
   454fc:	80e1883a 	add	r16,r16,r3
   45500:	80c00017 	ldw	r3,0(r16)
   45504:	ad8af03a 	xor	r5,r21,r22
   45508:	a085c83a 	sub	r2,r20,r2
   4550c:	1800683a 	jmp	r3
   45510:	000455c8 	cmpgei	zero,zero,4439
   45514:	000455c8 	cmpgei	zero,zero,4439
   45518:	00045718 	cmpnei	zero,zero,4444
   4551c:	000455b0 	cmpltui	zero,zero,4438
   45520:	00045718 	cmpnei	zero,zero,4444
   45524:	00045464 	muli	zero,zero,4433
   45528:	00045718 	cmpnei	zero,zero,4444
   4552c:	000455b0 	cmpltui	zero,zero,4438
   45530:	000455c8 	cmpgei	zero,zero,4439
   45534:	000455c8 	cmpgei	zero,zero,4439
   45538:	00045464 	muli	zero,zero,4433
   4553c:	000455b0 	cmpltui	zero,zero,4438
   45540:	000456b8 	rdprs	zero,zero,4442
   45544:	000456b8 	rdprs	zero,zero,4442
   45548:	000456b8 	rdprs	zero,zero,4442
   4554c:	000456e4 	muli	zero,zero,4443
   45550:	8809883a 	mov	r4,r17
   45554:	00469200 	call	46920 <__clzsi2>
   45558:	10fffec4 	addi	r3,r2,-5
   4555c:	88e2983a 	sll	r17,r17,r3
   45560:	00ffe284 	movi	r3,-118
   45564:	1885c83a 	sub	r2,r3,r2
   45568:	0009883a 	mov	r4,zero
   4556c:	003f9e06 	br	453e8 <__alt_data_end+0xfffe09f8>
   45570:	010000c4 	movi	r4,3
   45574:	003f9c06 	br	453e8 <__alt_data_end+0xfffe09f8>
   45578:	9009883a 	mov	r4,r18
   4557c:	d9400015 	stw	r5,0(sp)
   45580:	00469200 	call	46920 <__clzsi2>
   45584:	10fffec4 	addi	r3,r2,-5
   45588:	053fe284 	movi	r20,-118
   4558c:	90e4983a 	sll	r18,r18,r3
   45590:	a0a9c83a 	sub	r20,r20,r2
   45594:	0021883a 	mov	r16,zero
   45598:	002f883a 	mov	r23,zero
   4559c:	d9400017 	ldw	r5,0(sp)
   455a0:	003f8306 	br	453b0 <__alt_data_end+0xfffe09c0>
   455a4:	04000304 	movi	r16,12
   455a8:	05c000c4 	movi	r23,3
   455ac:	003f8006 	br	453b0 <__alt_data_end+0xfffe09c0>
   455b0:	0023883a 	mov	r17,zero
   455b4:	e027883a 	mov	r19,fp
   455b8:	202f883a 	mov	r23,r4
   455bc:	00c00084 	movi	r3,2
   455c0:	980b883a 	mov	r5,r19
   455c4:	b8c0501e 	bne	r23,r3,45708 <__divsf3+0x3c0>
   455c8:	2980004c 	andi	r6,r5,1
   455cc:	013fffc4 	movi	r4,-1
   455d0:	0007883a 	mov	r3,zero
   455d4:	003fa706 	br	45474 <__alt_data_end+0xfffe0a84>
   455d8:	013fe084 	movi	r4,-126
   455dc:	2089c83a 	sub	r4,r4,r2
   455e0:	00c006c4 	movi	r3,27
   455e4:	1900500e 	bge	r3,r4,45728 <__divsf3+0x3e0>
   455e8:	9980004c 	andi	r6,r19,1
   455ec:	0009883a 	mov	r4,zero
   455f0:	0007883a 	mov	r3,zero
   455f4:	003f9f06 	br	45474 <__alt_data_end+0xfffe0a84>
   455f8:	9080102c 	andhi	r2,r18,64
   455fc:	10000226 	beq	r2,zero,45608 <__divsf3+0x2c0>
   45600:	8880102c 	andhi	r2,r17,64
   45604:	10003a26 	beq	r2,zero,456f0 <__divsf3+0x3a8>
   45608:	00802034 	movhi	r2,128
   4560c:	90c01034 	orhi	r3,r18,64
   45610:	10bfffc4 	addi	r2,r2,-1
   45614:	a80d883a 	mov	r6,r21
   45618:	1886703a 	and	r3,r3,r2
   4561c:	003f9406 	br	45470 <__alt_data_end+0xfffe0a80>
   45620:	9006917a 	slli	r3,r18,5
   45624:	8822917a 	slli	r17,r17,5
   45628:	1c402936 	bltu	r3,r17,456d0 <__divsf3+0x388>
   4562c:	1c47c83a 	sub	r3,r3,r17
   45630:	2827883a 	mov	r19,r5
   45634:	01800684 	movi	r6,26
   45638:	01000044 	movi	r4,1
   4563c:	180f883a 	mov	r7,r3
   45640:	2109883a 	add	r4,r4,r4
   45644:	18c7883a 	add	r3,r3,r3
   45648:	38000116 	blt	r7,zero,45650 <__divsf3+0x308>
   4564c:	1c400236 	bltu	r3,r17,45658 <__divsf3+0x310>
   45650:	1c47c83a 	sub	r3,r3,r17
   45654:	21000054 	ori	r4,r4,1
   45658:	31bfffc4 	addi	r6,r6,-1
   4565c:	303ff71e 	bne	r6,zero,4563c <__alt_data_end+0xfffe0c4c>
   45660:	1806c03a 	cmpne	r3,r3,zero
   45664:	1922b03a 	or	r17,r3,r4
   45668:	11001fc4 	addi	r4,r2,127
   4566c:	013fda0e 	bge	zero,r4,455d8 <__alt_data_end+0xfffe0be8>
   45670:	88c001cc 	andi	r3,r17,7
   45674:	18000426 	beq	r3,zero,45688 <__divsf3+0x340>
   45678:	894003cc 	andi	r5,r17,15
   4567c:	00c00104 	movi	r3,4
   45680:	28c00126 	beq	r5,r3,45688 <__divsf3+0x340>
   45684:	88e3883a 	add	r17,r17,r3
   45688:	88c2002c 	andhi	r3,r17,2048
   4568c:	18000426 	beq	r3,zero,456a0 <__divsf3+0x358>
   45690:	11002004 	addi	r4,r2,128
   45694:	00be0034 	movhi	r2,63488
   45698:	10bfffc4 	addi	r2,r2,-1
   4569c:	88a2703a 	and	r17,r17,r2
   456a0:	00803f84 	movi	r2,254
   456a4:	1100060e 	bge	r2,r4,456c0 <__divsf3+0x378>
   456a8:	9980004c 	andi	r6,r19,1
   456ac:	013fffc4 	movi	r4,-1
   456b0:	0007883a 	mov	r3,zero
   456b4:	003f6f06 	br	45474 <__alt_data_end+0xfffe0a84>
   456b8:	9023883a 	mov	r17,r18
   456bc:	003fbf06 	br	455bc <__alt_data_end+0xfffe0bcc>
   456c0:	880691ba 	slli	r3,r17,6
   456c4:	9980004c 	andi	r6,r19,1
   456c8:	1806d27a 	srli	r3,r3,9
   456cc:	003f6906 	br	45474 <__alt_data_end+0xfffe0a84>
   456d0:	10bfffc4 	addi	r2,r2,-1
   456d4:	2827883a 	mov	r19,r5
   456d8:	018006c4 	movi	r6,27
   456dc:	0009883a 	mov	r4,zero
   456e0:	003fd606 	br	4563c <__alt_data_end+0xfffe0c4c>
   456e4:	9080102c 	andhi	r2,r18,64
   456e8:	0023883a 	mov	r17,zero
   456ec:	103fc626 	beq	r2,zero,45608 <__alt_data_end+0xfffe0c18>
   456f0:	00802034 	movhi	r2,128
   456f4:	88c01034 	orhi	r3,r17,64
   456f8:	10bfffc4 	addi	r2,r2,-1
   456fc:	b00d883a 	mov	r6,r22
   45700:	1886703a 	and	r3,r3,r2
   45704:	003f5a06 	br	45470 <__alt_data_end+0xfffe0a80>
   45708:	00c000c4 	movi	r3,3
   4570c:	b8c01c26 	beq	r23,r3,45780 <__divsf3+0x438>
   45710:	00c00044 	movi	r3,1
   45714:	b8ffd41e 	bne	r23,r3,45668 <__alt_data_end+0xfffe0c78>
   45718:	2980004c 	andi	r6,r5,1
   4571c:	0009883a 	mov	r4,zero
   45720:	0007883a 	mov	r3,zero
   45724:	003f5306 	br	45474 <__alt_data_end+0xfffe0a84>
   45728:	10802784 	addi	r2,r2,158
   4572c:	8884983a 	sll	r2,r17,r2
   45730:	8908d83a 	srl	r4,r17,r4
   45734:	1022c03a 	cmpne	r17,r2,zero
   45738:	8908b03a 	or	r4,r17,r4
   4573c:	208001cc 	andi	r2,r4,7
   45740:	10000426 	beq	r2,zero,45754 <__divsf3+0x40c>
   45744:	20c003cc 	andi	r3,r4,15
   45748:	00800104 	movi	r2,4
   4574c:	18800126 	beq	r3,r2,45754 <__divsf3+0x40c>
   45750:	2089883a 	add	r4,r4,r2
   45754:	2081002c 	andhi	r2,r4,1024
   45758:	10000426 	beq	r2,zero,4576c <__divsf3+0x424>
   4575c:	9980004c 	andi	r6,r19,1
   45760:	01000044 	movi	r4,1
   45764:	0007883a 	mov	r3,zero
   45768:	003f4206 	br	45474 <__alt_data_end+0xfffe0a84>
   4576c:	200691ba 	slli	r3,r4,6
   45770:	9980004c 	andi	r6,r19,1
   45774:	0009883a 	mov	r4,zero
   45778:	1806d27a 	srli	r3,r3,9
   4577c:	003f3d06 	br	45474 <__alt_data_end+0xfffe0a84>
   45780:	00802034 	movhi	r2,128
   45784:	88c01034 	orhi	r3,r17,64
   45788:	10bfffc4 	addi	r2,r2,-1
   4578c:	9980004c 	andi	r6,r19,1
   45790:	1886703a 	and	r3,r3,r2
   45794:	003f3606 	br	45470 <__alt_data_end+0xfffe0a80>

00045798 <__mulsf3>:
   45798:	defff504 	addi	sp,sp,-44
   4579c:	dc400215 	stw	r17,8(sp)
   457a0:	2022d5fa 	srli	r17,r4,23
   457a4:	dd400615 	stw	r21,24(sp)
   457a8:	202ad7fa 	srli	r21,r4,31
   457ac:	dc000115 	stw	r16,4(sp)
   457b0:	04002034 	movhi	r16,128
   457b4:	df000915 	stw	fp,36(sp)
   457b8:	dd000515 	stw	r20,20(sp)
   457bc:	843fffc4 	addi	r16,r16,-1
   457c0:	dfc00a15 	stw	ra,40(sp)
   457c4:	ddc00815 	stw	r23,32(sp)
   457c8:	dd800715 	stw	r22,28(sp)
   457cc:	dcc00415 	stw	r19,16(sp)
   457d0:	dc800315 	stw	r18,12(sp)
   457d4:	8c403fcc 	andi	r17,r17,255
   457d8:	8120703a 	and	r16,r16,r4
   457dc:	a829883a 	mov	r20,r21
   457e0:	af003fcc 	andi	fp,r21,255
   457e4:	88005026 	beq	r17,zero,45928 <__mulsf3+0x190>
   457e8:	00803fc4 	movi	r2,255
   457ec:	88802f26 	beq	r17,r2,458ac <__mulsf3+0x114>
   457f0:	84002034 	orhi	r16,r16,128
   457f4:	802090fa 	slli	r16,r16,3
   457f8:	8c7fe044 	addi	r17,r17,-127
   457fc:	0025883a 	mov	r18,zero
   45800:	002f883a 	mov	r23,zero
   45804:	2804d5fa 	srli	r2,r5,23
   45808:	282cd7fa 	srli	r22,r5,31
   4580c:	01002034 	movhi	r4,128
   45810:	213fffc4 	addi	r4,r4,-1
   45814:	10803fcc 	andi	r2,r2,255
   45818:	2166703a 	and	r19,r4,r5
   4581c:	b1803fcc 	andi	r6,r22,255
   45820:	10004926 	beq	r2,zero,45948 <__mulsf3+0x1b0>
   45824:	00c03fc4 	movi	r3,255
   45828:	10c04326 	beq	r2,r3,45938 <__mulsf3+0x1a0>
   4582c:	99402034 	orhi	r5,r19,128
   45830:	282690fa 	slli	r19,r5,3
   45834:	10bfe044 	addi	r2,r2,-127
   45838:	000b883a 	mov	r5,zero
   4583c:	88a3883a 	add	r17,r17,r2
   45840:	2c86b03a 	or	r3,r5,r18
   45844:	008003c4 	movi	r2,15
   45848:	adaaf03a 	xor	r21,r21,r22
   4584c:	8c800044 	addi	r18,r17,1
   45850:	10c06536 	bltu	r2,r3,459e8 <__mulsf3+0x250>
   45854:	180690ba 	slli	r3,r3,2
   45858:	01000134 	movhi	r4,4
   4585c:	21161b04 	addi	r4,r4,22636
   45860:	1907883a 	add	r3,r3,r4
   45864:	18800017 	ldw	r2,0(r3)
   45868:	1000683a 	jmp	r2
   4586c:	000459e8 	cmpgeui	zero,zero,4455
   45870:	00045ae0 	cmpeqi	zero,zero,4459
   45874:	00045ae0 	cmpeqi	zero,zero,4459
   45878:	00045af0 	cmpltui	zero,zero,4459
   4587c:	000458bc 	xorhi	zero,zero,4450
   45880:	000458bc 	xorhi	zero,zero,4450
   45884:	000459d4 	movui	zero,4455
   45888:	00045af0 	cmpltui	zero,zero,4459
   4588c:	000458bc 	xorhi	zero,zero,4450
   45890:	000459d4 	movui	zero,4455
   45894:	000458bc 	xorhi	zero,zero,4450
   45898:	00045af0 	cmpltui	zero,zero,4459
   4589c:	000458c0 	call	458c <__reset-0x3ba74>
   458a0:	000458c0 	call	458c <__reset-0x3ba74>
   458a4:	000458c0 	call	458c <__reset-0x3ba74>
   458a8:	00045b00 	call	45b0 <__reset-0x3ba50>
   458ac:	8000311e 	bne	r16,zero,45974 <__mulsf3+0x1dc>
   458b0:	04800204 	movi	r18,8
   458b4:	05c00084 	movi	r23,2
   458b8:	003fd206 	br	45804 <__alt_data_end+0xfffe0e14>
   458bc:	a839883a 	mov	fp,r21
   458c0:	00800084 	movi	r2,2
   458c4:	b880231e 	bne	r23,r2,45954 <__mulsf3+0x1bc>
   458c8:	e500004c 	andi	r20,fp,1
   458cc:	00ffffc4 	movi	r3,-1
   458d0:	0009883a 	mov	r4,zero
   458d4:	18c03fcc 	andi	r3,r3,255
   458d8:	180695fa 	slli	r3,r3,23
   458dc:	a0803fcc 	andi	r2,r20,255
   458e0:	04002034 	movhi	r16,128
   458e4:	100497fa 	slli	r2,r2,31
   458e8:	843fffc4 	addi	r16,r16,-1
   458ec:	2420703a 	and	r16,r4,r16
   458f0:	80e0b03a 	or	r16,r16,r3
   458f4:	8084b03a 	or	r2,r16,r2
   458f8:	dfc00a17 	ldw	ra,40(sp)
   458fc:	df000917 	ldw	fp,36(sp)
   45900:	ddc00817 	ldw	r23,32(sp)
   45904:	dd800717 	ldw	r22,28(sp)
   45908:	dd400617 	ldw	r21,24(sp)
   4590c:	dd000517 	ldw	r20,20(sp)
   45910:	dcc00417 	ldw	r19,16(sp)
   45914:	dc800317 	ldw	r18,12(sp)
   45918:	dc400217 	ldw	r17,8(sp)
   4591c:	dc000117 	ldw	r16,4(sp)
   45920:	dec00b04 	addi	sp,sp,44
   45924:	f800283a 	ret
   45928:	8000151e 	bne	r16,zero,45980 <__mulsf3+0x1e8>
   4592c:	04800104 	movi	r18,4
   45930:	05c00044 	movi	r23,1
   45934:	003fb306 	br	45804 <__alt_data_end+0xfffe0e14>
   45938:	980b003a 	cmpeq	r5,r19,zero
   4593c:	00c000c4 	movi	r3,3
   45940:	194bc83a 	sub	r5,r3,r5
   45944:	003fbd06 	br	4583c <__alt_data_end+0xfffe0e4c>
   45948:	9800181e 	bne	r19,zero,459ac <__mulsf3+0x214>
   4594c:	01400044 	movi	r5,1
   45950:	003fba06 	br	4583c <__alt_data_end+0xfffe0e4c>
   45954:	008000c4 	movi	r2,3
   45958:	b8809d26 	beq	r23,r2,45bd0 <__mulsf3+0x438>
   4595c:	00800044 	movi	r2,1
   45960:	b880821e 	bne	r23,r2,45b6c <__mulsf3+0x3d4>
   45964:	e0a8703a 	and	r20,fp,r2
   45968:	0007883a 	mov	r3,zero
   4596c:	0009883a 	mov	r4,zero
   45970:	003fd806 	br	458d4 <__alt_data_end+0xfffe0ee4>
   45974:	04800304 	movi	r18,12
   45978:	05c000c4 	movi	r23,3
   4597c:	003fa106 	br	45804 <__alt_data_end+0xfffe0e14>
   45980:	8009883a 	mov	r4,r16
   45984:	d9400015 	stw	r5,0(sp)
   45988:	00469200 	call	46920 <__clzsi2>
   4598c:	10fffec4 	addi	r3,r2,-5
   45990:	047fe284 	movi	r17,-118
   45994:	80e0983a 	sll	r16,r16,r3
   45998:	88a3c83a 	sub	r17,r17,r2
   4599c:	0025883a 	mov	r18,zero
   459a0:	002f883a 	mov	r23,zero
   459a4:	d9400017 	ldw	r5,0(sp)
   459a8:	003f9606 	br	45804 <__alt_data_end+0xfffe0e14>
   459ac:	9809883a 	mov	r4,r19
   459b0:	d9800015 	stw	r6,0(sp)
   459b4:	00469200 	call	46920 <__clzsi2>
   459b8:	10fffec4 	addi	r3,r2,-5
   459bc:	98e6983a 	sll	r19,r19,r3
   459c0:	00ffe284 	movi	r3,-118
   459c4:	1885c83a 	sub	r2,r3,r2
   459c8:	000b883a 	mov	r5,zero
   459cc:	d9800017 	ldw	r6,0(sp)
   459d0:	003f9a06 	br	4583c <__alt_data_end+0xfffe0e4c>
   459d4:	01002034 	movhi	r4,128
   459d8:	0029883a 	mov	r20,zero
   459dc:	213fffc4 	addi	r4,r4,-1
   459e0:	00ffffc4 	movi	r3,-1
   459e4:	003fbb06 	br	458d4 <__alt_data_end+0xfffe0ee4>
   459e8:	802ed43a 	srli	r23,r16,16
   459ec:	982cd43a 	srli	r22,r19,16
   459f0:	843fffcc 	andi	r16,r16,65535
   459f4:	9cffffcc 	andi	r19,r19,65535
   459f8:	9809883a 	mov	r4,r19
   459fc:	800b883a 	mov	r5,r16
   45a00:	00453200 	call	45320 <__mulsi3>
   45a04:	9809883a 	mov	r4,r19
   45a08:	b80b883a 	mov	r5,r23
   45a0c:	1029883a 	mov	r20,r2
   45a10:	00453200 	call	45320 <__mulsi3>
   45a14:	b80b883a 	mov	r5,r23
   45a18:	b009883a 	mov	r4,r22
   45a1c:	1027883a 	mov	r19,r2
   45a20:	00453200 	call	45320 <__mulsi3>
   45a24:	b009883a 	mov	r4,r22
   45a28:	800b883a 	mov	r5,r16
   45a2c:	102f883a 	mov	r23,r2
   45a30:	00453200 	call	45320 <__mulsi3>
   45a34:	a008d43a 	srli	r4,r20,16
   45a38:	9885883a 	add	r2,r19,r2
   45a3c:	1107883a 	add	r3,r2,r4
   45a40:	1cc0022e 	bgeu	r3,r19,45a4c <__mulsf3+0x2b4>
   45a44:	00800074 	movhi	r2,1
   45a48:	b8af883a 	add	r23,r23,r2
   45a4c:	1820943a 	slli	r16,r3,16
   45a50:	a53fffcc 	andi	r20,r20,65535
   45a54:	1806d43a 	srli	r3,r3,16
   45a58:	8529883a 	add	r20,r16,r20
   45a5c:	a02091ba 	slli	r16,r20,6
   45a60:	b8c7883a 	add	r3,r23,r3
   45a64:	a028d6ba 	srli	r20,r20,26
   45a68:	180691ba 	slli	r3,r3,6
   45a6c:	8020c03a 	cmpne	r16,r16,zero
   45a70:	8520b03a 	or	r16,r16,r20
   45a74:	80e0b03a 	or	r16,r16,r3
   45a78:	8082002c 	andhi	r2,r16,2048
   45a7c:	10000426 	beq	r2,zero,45a90 <__mulsf3+0x2f8>
   45a80:	8004d07a 	srli	r2,r16,1
   45a84:	8400004c 	andi	r16,r16,1
   45a88:	9023883a 	mov	r17,r18
   45a8c:	80a0b03a 	or	r16,r16,r2
   45a90:	88c01fc4 	addi	r3,r17,127
   45a94:	00c02d0e 	bge	zero,r3,45b4c <__mulsf3+0x3b4>
   45a98:	808001cc 	andi	r2,r16,7
   45a9c:	10000426 	beq	r2,zero,45ab0 <__mulsf3+0x318>
   45aa0:	810003cc 	andi	r4,r16,15
   45aa4:	00800104 	movi	r2,4
   45aa8:	20800126 	beq	r4,r2,45ab0 <__mulsf3+0x318>
   45aac:	80a1883a 	add	r16,r16,r2
   45ab0:	8082002c 	andhi	r2,r16,2048
   45ab4:	10000426 	beq	r2,zero,45ac8 <__mulsf3+0x330>
   45ab8:	00be0034 	movhi	r2,63488
   45abc:	10bfffc4 	addi	r2,r2,-1
   45ac0:	88c02004 	addi	r3,r17,128
   45ac4:	80a0703a 	and	r16,r16,r2
   45ac8:	00803f84 	movi	r2,254
   45acc:	10c01b0e 	bge	r2,r3,45b3c <__mulsf3+0x3a4>
   45ad0:	ad00004c 	andi	r20,r21,1
   45ad4:	00ffffc4 	movi	r3,-1
   45ad8:	0009883a 	mov	r4,zero
   45adc:	003f7d06 	br	458d4 <__alt_data_end+0xfffe0ee4>
   45ae0:	9821883a 	mov	r16,r19
   45ae4:	a839883a 	mov	fp,r21
   45ae8:	282f883a 	mov	r23,r5
   45aec:	003f7406 	br	458c0 <__alt_data_end+0xfffe0ed0>
   45af0:	9821883a 	mov	r16,r19
   45af4:	3039883a 	mov	fp,r6
   45af8:	282f883a 	mov	r23,r5
   45afc:	003f7006 	br	458c0 <__alt_data_end+0xfffe0ed0>
   45b00:	8080102c 	andhi	r2,r16,64
   45b04:	10000826 	beq	r2,zero,45b28 <__mulsf3+0x390>
   45b08:	9880102c 	andhi	r2,r19,64
   45b0c:	1000061e 	bne	r2,zero,45b28 <__mulsf3+0x390>
   45b10:	00802034 	movhi	r2,128
   45b14:	99001034 	orhi	r4,r19,64
   45b18:	10bfffc4 	addi	r2,r2,-1
   45b1c:	b029883a 	mov	r20,r22
   45b20:	2088703a 	and	r4,r4,r2
   45b24:	003fae06 	br	459e0 <__alt_data_end+0xfffe0ff0>
   45b28:	00802034 	movhi	r2,128
   45b2c:	81001034 	orhi	r4,r16,64
   45b30:	10bfffc4 	addi	r2,r2,-1
   45b34:	2088703a 	and	r4,r4,r2
   45b38:	003fa906 	br	459e0 <__alt_data_end+0xfffe0ff0>
   45b3c:	802091ba 	slli	r16,r16,6
   45b40:	ad00004c 	andi	r20,r21,1
   45b44:	8008d27a 	srli	r4,r16,9
   45b48:	003f6206 	br	458d4 <__alt_data_end+0xfffe0ee4>
   45b4c:	00ffe084 	movi	r3,-126
   45b50:	1c47c83a 	sub	r3,r3,r17
   45b54:	008006c4 	movi	r2,27
   45b58:	10c0070e 	bge	r2,r3,45b78 <__mulsf3+0x3e0>
   45b5c:	ad00004c 	andi	r20,r21,1
   45b60:	0007883a 	mov	r3,zero
   45b64:	0009883a 	mov	r4,zero
   45b68:	003f5a06 	br	458d4 <__alt_data_end+0xfffe0ee4>
   45b6c:	9023883a 	mov	r17,r18
   45b70:	e02b883a 	mov	r21,fp
   45b74:	003fc606 	br	45a90 <__alt_data_end+0xfffe10a0>
   45b78:	88802784 	addi	r2,r17,158
   45b7c:	8084983a 	sll	r2,r16,r2
   45b80:	80e0d83a 	srl	r16,r16,r3
   45b84:	1004c03a 	cmpne	r2,r2,zero
   45b88:	1404b03a 	or	r2,r2,r16
   45b8c:	10c001cc 	andi	r3,r2,7
   45b90:	18000426 	beq	r3,zero,45ba4 <__mulsf3+0x40c>
   45b94:	110003cc 	andi	r4,r2,15
   45b98:	00c00104 	movi	r3,4
   45b9c:	20c00126 	beq	r4,r3,45ba4 <__mulsf3+0x40c>
   45ba0:	10c5883a 	add	r2,r2,r3
   45ba4:	10c1002c 	andhi	r3,r2,1024
   45ba8:	18000426 	beq	r3,zero,45bbc <__mulsf3+0x424>
   45bac:	ad00004c 	andi	r20,r21,1
   45bb0:	00c00044 	movi	r3,1
   45bb4:	0009883a 	mov	r4,zero
   45bb8:	003f4606 	br	458d4 <__alt_data_end+0xfffe0ee4>
   45bbc:	100491ba 	slli	r2,r2,6
   45bc0:	ad00004c 	andi	r20,r21,1
   45bc4:	0007883a 	mov	r3,zero
   45bc8:	1008d27a 	srli	r4,r2,9
   45bcc:	003f4106 	br	458d4 <__alt_data_end+0xfffe0ee4>
   45bd0:	00802034 	movhi	r2,128
   45bd4:	81001034 	orhi	r4,r16,64
   45bd8:	10bfffc4 	addi	r2,r2,-1
   45bdc:	e500004c 	andi	r20,fp,1
   45be0:	2088703a 	and	r4,r4,r2
   45be4:	003f7e06 	br	459e0 <__alt_data_end+0xfffe0ff0>

00045be8 <__floatunsisf>:
   45be8:	defffe04 	addi	sp,sp,-8
   45bec:	dc000015 	stw	r16,0(sp)
   45bf0:	dfc00115 	stw	ra,4(sp)
   45bf4:	2021883a 	mov	r16,r4
   45bf8:	20002626 	beq	r4,zero,45c94 <__floatunsisf+0xac>
   45bfc:	00469200 	call	46920 <__clzsi2>
   45c00:	00c02784 	movi	r3,158
   45c04:	1887c83a 	sub	r3,r3,r2
   45c08:	01002584 	movi	r4,150
   45c0c:	20c00816 	blt	r4,r3,45c30 <__floatunsisf+0x48>
   45c10:	01000204 	movi	r4,8
   45c14:	2080340e 	bge	r4,r2,45ce8 <__floatunsisf+0x100>
   45c18:	10bffe04 	addi	r2,r2,-8
   45c1c:	8088983a 	sll	r4,r16,r2
   45c20:	00802034 	movhi	r2,128
   45c24:	10bfffc4 	addi	r2,r2,-1
   45c28:	2088703a 	and	r4,r4,r2
   45c2c:	00001b06 	br	45c9c <__floatunsisf+0xb4>
   45c30:	01002644 	movi	r4,153
   45c34:	20c02316 	blt	r4,r3,45cc4 <__floatunsisf+0xdc>
   45c38:	01000144 	movi	r4,5
   45c3c:	2080020e 	bge	r4,r2,45c48 <__floatunsisf+0x60>
   45c40:	113ffec4 	addi	r4,r2,-5
   45c44:	8120983a 	sll	r16,r16,r4
   45c48:	017f0034 	movhi	r5,64512
   45c4c:	297fffc4 	addi	r5,r5,-1
   45c50:	810001cc 	andi	r4,r16,7
   45c54:	814a703a 	and	r5,r16,r5
   45c58:	20000426 	beq	r4,zero,45c6c <__floatunsisf+0x84>
   45c5c:	840003cc 	andi	r16,r16,15
   45c60:	01000104 	movi	r4,4
   45c64:	81000126 	beq	r16,r4,45c6c <__floatunsisf+0x84>
   45c68:	290b883a 	add	r5,r5,r4
   45c6c:	2901002c 	andhi	r4,r5,1024
   45c70:	20000526 	beq	r4,zero,45c88 <__floatunsisf+0xa0>
   45c74:	00c027c4 	movi	r3,159
   45c78:	1887c83a 	sub	r3,r3,r2
   45c7c:	00bf0034 	movhi	r2,64512
   45c80:	10bfffc4 	addi	r2,r2,-1
   45c84:	288a703a 	and	r5,r5,r2
   45c88:	280891ba 	slli	r4,r5,6
   45c8c:	2008d27a 	srli	r4,r4,9
   45c90:	00000206 	br	45c9c <__floatunsisf+0xb4>
   45c94:	0007883a 	mov	r3,zero
   45c98:	0009883a 	mov	r4,zero
   45c9c:	18c03fcc 	andi	r3,r3,255
   45ca0:	180695fa 	slli	r3,r3,23
   45ca4:	00802034 	movhi	r2,128
   45ca8:	10bfffc4 	addi	r2,r2,-1
   45cac:	2084703a 	and	r2,r4,r2
   45cb0:	10c4b03a 	or	r2,r2,r3
   45cb4:	dfc00117 	ldw	ra,4(sp)
   45cb8:	dc000017 	ldw	r16,0(sp)
   45cbc:	dec00204 	addi	sp,sp,8
   45cc0:	f800283a 	ret
   45cc4:	01400144 	movi	r5,5
   45cc8:	110006c4 	addi	r4,r2,27
   45ccc:	8108983a 	sll	r4,r16,r4
   45cd0:	288dc83a 	sub	r6,r5,r2
   45cd4:	81a0d83a 	srl	r16,r16,r6
   45cd8:	2008c03a 	cmpne	r4,r4,zero
   45cdc:	2420b03a 	or	r16,r4,r16
   45ce0:	28bfd90e 	bge	r5,r2,45c48 <__alt_data_end+0xfffe1258>
   45ce4:	003fd606 	br	45c40 <__alt_data_end+0xfffe1250>
   45ce8:	01402034 	movhi	r5,128
   45cec:	297fffc4 	addi	r5,r5,-1
   45cf0:	8148703a 	and	r4,r16,r5
   45cf4:	003fe906 	br	45c9c <__alt_data_end+0xfffe12ac>

00045cf8 <__divdf3>:
   45cf8:	defff004 	addi	sp,sp,-64
   45cfc:	dc800815 	stw	r18,32(sp)
   45d00:	2824d53a 	srli	r18,r5,20
   45d04:	dd800c15 	stw	r22,48(sp)
   45d08:	282cd7fa 	srli	r22,r5,31
   45d0c:	dc000615 	stw	r16,24(sp)
   45d10:	04000434 	movhi	r16,16
   45d14:	df000e15 	stw	fp,56(sp)
   45d18:	dd000a15 	stw	r20,40(sp)
   45d1c:	dcc00915 	stw	r19,36(sp)
   45d20:	dc400715 	stw	r17,28(sp)
   45d24:	843fffc4 	addi	r16,r16,-1
   45d28:	dfc00f15 	stw	ra,60(sp)
   45d2c:	ddc00d15 	stw	r23,52(sp)
   45d30:	dd400b15 	stw	r21,44(sp)
   45d34:	9481ffcc 	andi	r18,r18,2047
   45d38:	2029883a 	mov	r20,r4
   45d3c:	2027883a 	mov	r19,r4
   45d40:	2c22703a 	and	r17,r5,r16
   45d44:	b7003fcc 	andi	fp,r22,255
   45d48:	90005e26 	beq	r18,zero,45ec4 <__divdf3+0x1cc>
   45d4c:	0081ffc4 	movi	r2,2047
   45d50:	90803526 	beq	r18,r2,45e28 <__divdf3+0x130>
   45d54:	8c000434 	orhi	r16,r17,16
   45d58:	2004d77a 	srli	r2,r4,29
   45d5c:	802090fa 	slli	r16,r16,3
   45d60:	202690fa 	slli	r19,r4,3
   45d64:	94bf0044 	addi	r18,r18,-1023
   45d68:	80a2b03a 	or	r17,r16,r2
   45d6c:	0029883a 	mov	r20,zero
   45d70:	0011883a 	mov	r8,zero
   45d74:	380ad53a 	srli	r5,r7,20
   45d78:	382ed7fa 	srli	r23,r7,31
   45d7c:	04000434 	movhi	r16,16
   45d80:	843fffc4 	addi	r16,r16,-1
   45d84:	2941ffcc 	andi	r5,r5,2047
   45d88:	302b883a 	mov	r21,r6
   45d8c:	3c20703a 	and	r16,r7,r16
   45d90:	ba403fcc 	andi	r9,r23,255
   45d94:	28006726 	beq	r5,zero,45f34 <__divdf3+0x23c>
   45d98:	0081ffc4 	movi	r2,2047
   45d9c:	28805f26 	beq	r5,r2,45f1c <__divdf3+0x224>
   45da0:	84000434 	orhi	r16,r16,16
   45da4:	3004d77a 	srli	r2,r6,29
   45da8:	802090fa 	slli	r16,r16,3
   45dac:	302a90fa 	slli	r21,r6,3
   45db0:	297f0044 	addi	r5,r5,-1023
   45db4:	80a0b03a 	or	r16,r16,r2
   45db8:	000f883a 	mov	r7,zero
   45dbc:	3d06b03a 	or	r3,r7,r20
   45dc0:	180690ba 	slli	r3,r3,2
   45dc4:	00800134 	movhi	r2,4
   45dc8:	10977a04 	addi	r2,r2,24040
   45dcc:	1885883a 	add	r2,r3,r2
   45dd0:	10800017 	ldw	r2,0(r2)
   45dd4:	b5c8f03a 	xor	r4,r22,r23
   45dd8:	200d883a 	mov	r6,r4
   45ddc:	25003fcc 	andi	r20,r4,255
   45de0:	9165c83a 	sub	r18,r18,r5
   45de4:	1000683a 	jmp	r2
   45de8:	00046030 	cmpltui	zero,zero,4480
   45dec:	00045e60 	cmpeqi	zero,zero,4473
   45df0:	00045ff4 	movhi	zero,4479
   45df4:	00045e44 	movi	zero,4473
   45df8:	00045ff4 	movhi	zero,4479
   45dfc:	00045fc8 	cmpgei	zero,zero,4479
   45e00:	00045ff4 	movhi	zero,4479
   45e04:	00045e44 	movi	zero,4473
   45e08:	00045e60 	cmpeqi	zero,zero,4473
   45e0c:	00045e60 	cmpeqi	zero,zero,4473
   45e10:	00045fc8 	cmpgei	zero,zero,4479
   45e14:	00045e44 	movi	zero,4473
   45e18:	00045e54 	movui	zero,4473
   45e1c:	00045e54 	movui	zero,4473
   45e20:	00045e54 	movui	zero,4473
   45e24:	00046004 	movi	zero,4480
   45e28:	8904b03a 	or	r2,r17,r4
   45e2c:	1000631e 	bne	r2,zero,45fbc <__divdf3+0x2c4>
   45e30:	05000204 	movi	r20,8
   45e34:	0023883a 	mov	r17,zero
   45e38:	0027883a 	mov	r19,zero
   45e3c:	02000084 	movi	r8,2
   45e40:	003fcc06 	br	45d74 <__alt_data_end+0xfffe1384>
   45e44:	8023883a 	mov	r17,r16
   45e48:	a827883a 	mov	r19,r21
   45e4c:	4839883a 	mov	fp,r9
   45e50:	3811883a 	mov	r8,r7
   45e54:	00800084 	movi	r2,2
   45e58:	4081531e 	bne	r8,r2,463a8 <__divdf3+0x6b0>
   45e5c:	e029883a 	mov	r20,fp
   45e60:	a180004c 	andi	r6,r20,1
   45e64:	0201ffc4 	movi	r8,2047
   45e68:	000b883a 	mov	r5,zero
   45e6c:	0027883a 	mov	r19,zero
   45e70:	4010953a 	slli	r8,r8,20
   45e74:	30c03fcc 	andi	r3,r6,255
   45e78:	04000434 	movhi	r16,16
   45e7c:	180697fa 	slli	r3,r3,31
   45e80:	843fffc4 	addi	r16,r16,-1
   45e84:	2c20703a 	and	r16,r5,r16
   45e88:	8220b03a 	or	r16,r16,r8
   45e8c:	80c6b03a 	or	r3,r16,r3
   45e90:	9805883a 	mov	r2,r19
   45e94:	dfc00f17 	ldw	ra,60(sp)
   45e98:	df000e17 	ldw	fp,56(sp)
   45e9c:	ddc00d17 	ldw	r23,52(sp)
   45ea0:	dd800c17 	ldw	r22,48(sp)
   45ea4:	dd400b17 	ldw	r21,44(sp)
   45ea8:	dd000a17 	ldw	r20,40(sp)
   45eac:	dcc00917 	ldw	r19,36(sp)
   45eb0:	dc800817 	ldw	r18,32(sp)
   45eb4:	dc400717 	ldw	r17,28(sp)
   45eb8:	dc000617 	ldw	r16,24(sp)
   45ebc:	dec01004 	addi	sp,sp,64
   45ec0:	f800283a 	ret
   45ec4:	8904b03a 	or	r2,r17,r4
   45ec8:	10003726 	beq	r2,zero,45fa8 <__divdf3+0x2b0>
   45ecc:	88014d26 	beq	r17,zero,46404 <__divdf3+0x70c>
   45ed0:	8809883a 	mov	r4,r17
   45ed4:	d9800215 	stw	r6,8(sp)
   45ed8:	d9c00515 	stw	r7,20(sp)
   45edc:	00469200 	call	46920 <__clzsi2>
   45ee0:	d9800217 	ldw	r6,8(sp)
   45ee4:	d9c00517 	ldw	r7,20(sp)
   45ee8:	1007883a 	mov	r3,r2
   45eec:	01000a04 	movi	r4,40
   45ef0:	1cfffe04 	addi	r19,r3,-8
   45ef4:	20c9c83a 	sub	r4,r4,r3
   45ef8:	8cca983a 	sll	r5,r17,r19
   45efc:	a108d83a 	srl	r4,r20,r4
   45f00:	a4e6983a 	sll	r19,r20,r19
   45f04:	2162b03a 	or	r17,r4,r5
   45f08:	04bf0344 	movi	r18,-1011
   45f0c:	90e5c83a 	sub	r18,r18,r3
   45f10:	0029883a 	mov	r20,zero
   45f14:	0011883a 	mov	r8,zero
   45f18:	003f9606 	br	45d74 <__alt_data_end+0xfffe1384>
   45f1c:	8184b03a 	or	r2,r16,r6
   45f20:	10001f1e 	bne	r2,zero,45fa0 <__divdf3+0x2a8>
   45f24:	0021883a 	mov	r16,zero
   45f28:	002b883a 	mov	r21,zero
   45f2c:	01c00084 	movi	r7,2
   45f30:	003fa206 	br	45dbc <__alt_data_end+0xfffe13cc>
   45f34:	8184b03a 	or	r2,r16,r6
   45f38:	10001526 	beq	r2,zero,45f90 <__divdf3+0x298>
   45f3c:	80013d26 	beq	r16,zero,46434 <__divdf3+0x73c>
   45f40:	8009883a 	mov	r4,r16
   45f44:	d9800215 	stw	r6,8(sp)
   45f48:	da000315 	stw	r8,12(sp)
   45f4c:	da400415 	stw	r9,16(sp)
   45f50:	00469200 	call	46920 <__clzsi2>
   45f54:	d9800217 	ldw	r6,8(sp)
   45f58:	da000317 	ldw	r8,12(sp)
   45f5c:	da400417 	ldw	r9,16(sp)
   45f60:	1007883a 	mov	r3,r2
   45f64:	01000a04 	movi	r4,40
   45f68:	1d7ffe04 	addi	r21,r3,-8
   45f6c:	20c9c83a 	sub	r4,r4,r3
   45f70:	8560983a 	sll	r16,r16,r21
   45f74:	3108d83a 	srl	r4,r6,r4
   45f78:	356a983a 	sll	r21,r6,r21
   45f7c:	2420b03a 	or	r16,r4,r16
   45f80:	017f0344 	movi	r5,-1011
   45f84:	28cbc83a 	sub	r5,r5,r3
   45f88:	000f883a 	mov	r7,zero
   45f8c:	003f8b06 	br	45dbc <__alt_data_end+0xfffe13cc>
   45f90:	0021883a 	mov	r16,zero
   45f94:	002b883a 	mov	r21,zero
   45f98:	01c00044 	movi	r7,1
   45f9c:	003f8706 	br	45dbc <__alt_data_end+0xfffe13cc>
   45fa0:	01c000c4 	movi	r7,3
   45fa4:	003f8506 	br	45dbc <__alt_data_end+0xfffe13cc>
   45fa8:	05000104 	movi	r20,4
   45fac:	0023883a 	mov	r17,zero
   45fb0:	0027883a 	mov	r19,zero
   45fb4:	02000044 	movi	r8,1
   45fb8:	003f6e06 	br	45d74 <__alt_data_end+0xfffe1384>
   45fbc:	05000304 	movi	r20,12
   45fc0:	020000c4 	movi	r8,3
   45fc4:	003f6b06 	br	45d74 <__alt_data_end+0xfffe1384>
   45fc8:	01400434 	movhi	r5,16
   45fcc:	000d883a 	mov	r6,zero
   45fd0:	297fffc4 	addi	r5,r5,-1
   45fd4:	04ffffc4 	movi	r19,-1
   45fd8:	0201ffc4 	movi	r8,2047
   45fdc:	003fa406 	br	45e70 <__alt_data_end+0xfffe1480>
   45fe0:	043f0084 	movi	r16,-1022
   45fe4:	84a1c83a 	sub	r16,r16,r18
   45fe8:	00800e04 	movi	r2,56
   45fec:	14014d0e 	bge	r2,r16,46524 <__divdf3+0x82c>
   45ff0:	a180004c 	andi	r6,r20,1
   45ff4:	0011883a 	mov	r8,zero
   45ff8:	000b883a 	mov	r5,zero
   45ffc:	0027883a 	mov	r19,zero
   46000:	003f9b06 	br	45e70 <__alt_data_end+0xfffe1480>
   46004:	8880022c 	andhi	r2,r17,8
   46008:	1000f026 	beq	r2,zero,463cc <__divdf3+0x6d4>
   4600c:	8080022c 	andhi	r2,r16,8
   46010:	1000ee1e 	bne	r2,zero,463cc <__divdf3+0x6d4>
   46014:	00800434 	movhi	r2,16
   46018:	81400234 	orhi	r5,r16,8
   4601c:	10bfffc4 	addi	r2,r2,-1
   46020:	b80d883a 	mov	r6,r23
   46024:	288a703a 	and	r5,r5,r2
   46028:	a827883a 	mov	r19,r21
   4602c:	003fea06 	br	45fd8 <__alt_data_end+0xfffe15e8>
   46030:	84411c36 	bltu	r16,r17,464a4 <__divdf3+0x7ac>
   46034:	8c011a26 	beq	r17,r16,464a0 <__divdf3+0x7a8>
   46038:	94bfffc4 	addi	r18,r18,-1
   4603c:	dcc00015 	stw	r19,0(sp)
   46040:	8811883a 	mov	r8,r17
   46044:	002d883a 	mov	r22,zero
   46048:	a80cd63a 	srli	r6,r21,24
   4604c:	8020923a 	slli	r16,r16,8
   46050:	a82a923a 	slli	r21,r21,8
   46054:	4009883a 	mov	r4,r8
   46058:	342eb03a 	or	r23,r6,r16
   4605c:	dd400115 	stw	r21,4(sp)
   46060:	b82ad43a 	srli	r21,r23,16
   46064:	da000315 	stw	r8,12(sp)
   46068:	bcffffcc 	andi	r19,r23,65535
   4606c:	a80b883a 	mov	r5,r21
   46070:	00453100 	call	45310 <__udivsi3>
   46074:	1009883a 	mov	r4,r2
   46078:	980b883a 	mov	r5,r19
   4607c:	1023883a 	mov	r17,r2
   46080:	00453200 	call	45320 <__mulsi3>
   46084:	da000317 	ldw	r8,12(sp)
   46088:	a80b883a 	mov	r5,r21
   4608c:	1039883a 	mov	fp,r2
   46090:	4009883a 	mov	r4,r8
   46094:	00453180 	call	45318 <__umodsi3>
   46098:	d8c00017 	ldw	r3,0(sp)
   4609c:	1004943a 	slli	r2,r2,16
   460a0:	1810d43a 	srli	r8,r3,16
   460a4:	120eb03a 	or	r7,r2,r8
   460a8:	3f00062e 	bgeu	r7,fp,460c4 <__divdf3+0x3cc>
   460ac:	3dcf883a 	add	r7,r7,r23
   460b0:	88bfffc4 	addi	r2,r17,-1
   460b4:	3dc10a36 	bltu	r7,r23,464e0 <__divdf3+0x7e8>
   460b8:	3f01092e 	bgeu	r7,fp,464e0 <__divdf3+0x7e8>
   460bc:	8c7fff84 	addi	r17,r17,-2
   460c0:	3dcf883a 	add	r7,r7,r23
   460c4:	3f39c83a 	sub	fp,r7,fp
   460c8:	e009883a 	mov	r4,fp
   460cc:	a80b883a 	mov	r5,r21
   460d0:	00453100 	call	45310 <__udivsi3>
   460d4:	1009883a 	mov	r4,r2
   460d8:	980b883a 	mov	r5,r19
   460dc:	1021883a 	mov	r16,r2
   460e0:	00453200 	call	45320 <__mulsi3>
   460e4:	e009883a 	mov	r4,fp
   460e8:	a80b883a 	mov	r5,r21
   460ec:	d8800315 	stw	r2,12(sp)
   460f0:	00453180 	call	45318 <__umodsi3>
   460f4:	d9000017 	ldw	r4,0(sp)
   460f8:	1004943a 	slli	r2,r2,16
   460fc:	da000317 	ldw	r8,12(sp)
   46100:	20ffffcc 	andi	r3,r4,65535
   46104:	10ceb03a 	or	r7,r2,r3
   46108:	3a00062e 	bgeu	r7,r8,46124 <__divdf3+0x42c>
   4610c:	3dcf883a 	add	r7,r7,r23
   46110:	80bfffc4 	addi	r2,r16,-1
   46114:	3dc0f036 	bltu	r7,r23,464d8 <__divdf3+0x7e0>
   46118:	3a00ef2e 	bgeu	r7,r8,464d8 <__divdf3+0x7e0>
   4611c:	843fff84 	addi	r16,r16,-2
   46120:	3dcf883a 	add	r7,r7,r23
   46124:	d8c00117 	ldw	r3,4(sp)
   46128:	8822943a 	slli	r17,r17,16
   4612c:	3a0fc83a 	sub	r7,r7,r8
   46130:	1806d43a 	srli	r3,r3,16
   46134:	8462b03a 	or	r17,r16,r17
   46138:	8affffcc 	andi	r11,r17,65535
   4613c:	d8c00015 	stw	r3,0(sp)
   46140:	d8c00117 	ldw	r3,4(sp)
   46144:	8820d43a 	srli	r16,r17,16
   46148:	5809883a 	mov	r4,r11
   4614c:	1f3fffcc 	andi	fp,r3,65535
   46150:	e00b883a 	mov	r5,fp
   46154:	d9c00515 	stw	r7,20(sp)
   46158:	dac00215 	stw	r11,8(sp)
   4615c:	00453200 	call	45320 <__mulsi3>
   46160:	8009883a 	mov	r4,r16
   46164:	e00b883a 	mov	r5,fp
   46168:	d8800415 	stw	r2,16(sp)
   4616c:	00453200 	call	45320 <__mulsi3>
   46170:	d9400017 	ldw	r5,0(sp)
   46174:	8009883a 	mov	r4,r16
   46178:	d8800315 	stw	r2,12(sp)
   4617c:	00453200 	call	45320 <__mulsi3>
   46180:	dac00217 	ldw	r11,8(sp)
   46184:	d9400017 	ldw	r5,0(sp)
   46188:	d8800215 	stw	r2,8(sp)
   4618c:	5809883a 	mov	r4,r11
   46190:	00453200 	call	45320 <__mulsi3>
   46194:	da400417 	ldw	r9,16(sp)
   46198:	da800317 	ldw	r10,12(sp)
   4619c:	d9c00517 	ldw	r7,20(sp)
   461a0:	480ad43a 	srli	r5,r9,16
   461a4:	5085883a 	add	r2,r10,r2
   461a8:	db000217 	ldw	r12,8(sp)
   461ac:	1151883a 	add	r8,r2,r5
   461b0:	4280022e 	bgeu	r8,r10,461bc <__divdf3+0x4c4>
   461b4:	00800074 	movhi	r2,1
   461b8:	6099883a 	add	r12,r12,r2
   461bc:	400ad43a 	srli	r5,r8,16
   461c0:	4010943a 	slli	r8,r8,16
   461c4:	4c3fffcc 	andi	r16,r9,65535
   461c8:	6149883a 	add	r4,r12,r5
   461cc:	4411883a 	add	r8,r8,r16
   461d0:	3900a736 	bltu	r7,r4,46470 <__divdf3+0x778>
   461d4:	3900c426 	beq	r7,r4,464e8 <__divdf3+0x7f0>
   461d8:	3909c83a 	sub	r4,r7,r4
   461dc:	b221c83a 	sub	r16,r22,r8
   461e0:	b42d803a 	cmpltu	r22,r22,r16
   461e4:	25adc83a 	sub	r22,r4,r22
   461e8:	b5c0c626 	beq	r22,r23,46504 <__divdf3+0x80c>
   461ec:	b009883a 	mov	r4,r22
   461f0:	a80b883a 	mov	r5,r21
   461f4:	00453100 	call	45310 <__udivsi3>
   461f8:	1009883a 	mov	r4,r2
   461fc:	980b883a 	mov	r5,r19
   46200:	d8800315 	stw	r2,12(sp)
   46204:	00453200 	call	45320 <__mulsi3>
   46208:	a80b883a 	mov	r5,r21
   4620c:	b009883a 	mov	r4,r22
   46210:	d8800415 	stw	r2,16(sp)
   46214:	00453180 	call	45318 <__umodsi3>
   46218:	1004943a 	slli	r2,r2,16
   4621c:	800ed43a 	srli	r7,r16,16
   46220:	da400417 	ldw	r9,16(sp)
   46224:	da000317 	ldw	r8,12(sp)
   46228:	11cab03a 	or	r5,r2,r7
   4622c:	2a40062e 	bgeu	r5,r9,46248 <__divdf3+0x550>
   46230:	2dcb883a 	add	r5,r5,r23
   46234:	40bfffc4 	addi	r2,r8,-1
   46238:	2dc0b436 	bltu	r5,r23,4650c <__divdf3+0x814>
   4623c:	2a40b32e 	bgeu	r5,r9,4650c <__divdf3+0x814>
   46240:	423fff84 	addi	r8,r8,-2
   46244:	2dcb883a 	add	r5,r5,r23
   46248:	2a6dc83a 	sub	r22,r5,r9
   4624c:	b009883a 	mov	r4,r22
   46250:	a80b883a 	mov	r5,r21
   46254:	da000315 	stw	r8,12(sp)
   46258:	00453100 	call	45310 <__udivsi3>
   4625c:	980b883a 	mov	r5,r19
   46260:	1009883a 	mov	r4,r2
   46264:	d8800415 	stw	r2,16(sp)
   46268:	00453200 	call	45320 <__mulsi3>
   4626c:	b009883a 	mov	r4,r22
   46270:	a80b883a 	mov	r5,r21
   46274:	1027883a 	mov	r19,r2
   46278:	00453180 	call	45318 <__umodsi3>
   4627c:	1004943a 	slli	r2,r2,16
   46280:	843fffcc 	andi	r16,r16,65535
   46284:	da000317 	ldw	r8,12(sp)
   46288:	140eb03a 	or	r7,r2,r16
   4628c:	da400417 	ldw	r9,16(sp)
   46290:	3cc0062e 	bgeu	r7,r19,462ac <__divdf3+0x5b4>
   46294:	3dcf883a 	add	r7,r7,r23
   46298:	48bfffc4 	addi	r2,r9,-1
   4629c:	3dc09d36 	bltu	r7,r23,46514 <__divdf3+0x81c>
   462a0:	3cc09c2e 	bgeu	r7,r19,46514 <__divdf3+0x81c>
   462a4:	4a7fff84 	addi	r9,r9,-2
   462a8:	3dcf883a 	add	r7,r7,r23
   462ac:	4010943a 	slli	r8,r8,16
   462b0:	3cebc83a 	sub	r21,r7,r19
   462b4:	e00b883a 	mov	r5,fp
   462b8:	4a26b03a 	or	r19,r9,r8
   462bc:	99ffffcc 	andi	r7,r19,65535
   462c0:	9820d43a 	srli	r16,r19,16
   462c4:	3809883a 	mov	r4,r7
   462c8:	d9c00515 	stw	r7,20(sp)
   462cc:	00453200 	call	45320 <__mulsi3>
   462d0:	8009883a 	mov	r4,r16
   462d4:	e00b883a 	mov	r5,fp
   462d8:	102d883a 	mov	r22,r2
   462dc:	00453200 	call	45320 <__mulsi3>
   462e0:	d9400017 	ldw	r5,0(sp)
   462e4:	8009883a 	mov	r4,r16
   462e8:	1039883a 	mov	fp,r2
   462ec:	00453200 	call	45320 <__mulsi3>
   462f0:	d9c00517 	ldw	r7,20(sp)
   462f4:	d9400017 	ldw	r5,0(sp)
   462f8:	1021883a 	mov	r16,r2
   462fc:	3809883a 	mov	r4,r7
   46300:	00453200 	call	45320 <__mulsi3>
   46304:	b008d43a 	srli	r4,r22,16
   46308:	e085883a 	add	r2,fp,r2
   4630c:	1109883a 	add	r4,r2,r4
   46310:	2700022e 	bgeu	r4,fp,4631c <__divdf3+0x624>
   46314:	00800074 	movhi	r2,1
   46318:	80a1883a 	add	r16,r16,r2
   4631c:	200ad43a 	srli	r5,r4,16
   46320:	2008943a 	slli	r4,r4,16
   46324:	b5bfffcc 	andi	r22,r22,65535
   46328:	8145883a 	add	r2,r16,r5
   4632c:	2589883a 	add	r4,r4,r22
   46330:	a8802c36 	bltu	r21,r2,463e4 <__divdf3+0x6ec>
   46334:	a880a426 	beq	r21,r2,465c8 <__divdf3+0x8d0>
   46338:	9cc00054 	ori	r19,r19,1
   4633c:	9200ffc4 	addi	r8,r18,1023
   46340:	023f270e 	bge	zero,r8,45fe0 <__alt_data_end+0xfffe15f0>
   46344:	988001cc 	andi	r2,r19,7
   46348:	10000726 	beq	r2,zero,46368 <__divdf3+0x670>
   4634c:	990003cc 	andi	r4,r19,15
   46350:	00800104 	movi	r2,4
   46354:	20800426 	beq	r4,r2,46368 <__divdf3+0x670>
   46358:	9885883a 	add	r2,r19,r2
   4635c:	14e7803a 	cmpltu	r19,r2,r19
   46360:	8ce3883a 	add	r17,r17,r19
   46364:	1027883a 	mov	r19,r2
   46368:	8880402c 	andhi	r2,r17,256
   4636c:	10000426 	beq	r2,zero,46380 <__divdf3+0x688>
   46370:	00bfc034 	movhi	r2,65280
   46374:	10bfffc4 	addi	r2,r2,-1
   46378:	92010004 	addi	r8,r18,1024
   4637c:	88a2703a 	and	r17,r17,r2
   46380:	0081ff84 	movi	r2,2046
   46384:	123eb616 	blt	r2,r8,45e60 <__alt_data_end+0xfffe1470>
   46388:	9826d0fa 	srli	r19,r19,3
   4638c:	8804977a 	slli	r2,r17,29
   46390:	8820927a 	slli	r16,r17,9
   46394:	4201ffcc 	andi	r8,r8,2047
   46398:	14e6b03a 	or	r19,r2,r19
   4639c:	800ad33a 	srli	r5,r16,12
   463a0:	a180004c 	andi	r6,r20,1
   463a4:	003eb206 	br	45e70 <__alt_data_end+0xfffe1480>
   463a8:	008000c4 	movi	r2,3
   463ac:	4080ac26 	beq	r8,r2,46660 <__divdf3+0x968>
   463b0:	00800044 	movi	r2,1
   463b4:	4080591e 	bne	r8,r2,4651c <__divdf3+0x824>
   463b8:	e00d883a 	mov	r6,fp
   463bc:	0011883a 	mov	r8,zero
   463c0:	000b883a 	mov	r5,zero
   463c4:	0027883a 	mov	r19,zero
   463c8:	003ea906 	br	45e70 <__alt_data_end+0xfffe1480>
   463cc:	00800434 	movhi	r2,16
   463d0:	89400234 	orhi	r5,r17,8
   463d4:	10bfffc4 	addi	r2,r2,-1
   463d8:	b00d883a 	mov	r6,r22
   463dc:	288a703a 	and	r5,r5,r2
   463e0:	003efd06 	br	45fd8 <__alt_data_end+0xfffe15e8>
   463e4:	adcf883a 	add	r7,r21,r23
   463e8:	997fffc4 	addi	r5,r19,-1
   463ec:	3dc0412e 	bgeu	r7,r23,464f4 <__divdf3+0x7fc>
   463f0:	2827883a 	mov	r19,r5
   463f4:	38bfd01e 	bne	r7,r2,46338 <__alt_data_end+0xfffe1948>
   463f8:	d8c00117 	ldw	r3,4(sp)
   463fc:	193fce1e 	bne	r3,r4,46338 <__alt_data_end+0xfffe1948>
   46400:	003fce06 	br	4633c <__alt_data_end+0xfffe194c>
   46404:	d9800215 	stw	r6,8(sp)
   46408:	d9c00515 	stw	r7,20(sp)
   4640c:	00469200 	call	46920 <__clzsi2>
   46410:	10c00804 	addi	r3,r2,32
   46414:	010009c4 	movi	r4,39
   46418:	d9800217 	ldw	r6,8(sp)
   4641c:	d9c00517 	ldw	r7,20(sp)
   46420:	20feb20e 	bge	r4,r3,45eec <__alt_data_end+0xfffe14fc>
   46424:	117ffe04 	addi	r5,r2,-8
   46428:	a162983a 	sll	r17,r20,r5
   4642c:	0027883a 	mov	r19,zero
   46430:	003eb506 	br	45f08 <__alt_data_end+0xfffe1518>
   46434:	3009883a 	mov	r4,r6
   46438:	d9800215 	stw	r6,8(sp)
   4643c:	da000315 	stw	r8,12(sp)
   46440:	da400415 	stw	r9,16(sp)
   46444:	00469200 	call	46920 <__clzsi2>
   46448:	10c00804 	addi	r3,r2,32
   4644c:	010009c4 	movi	r4,39
   46450:	d9800217 	ldw	r6,8(sp)
   46454:	da000317 	ldw	r8,12(sp)
   46458:	da400417 	ldw	r9,16(sp)
   4645c:	20fec10e 	bge	r4,r3,45f64 <__alt_data_end+0xfffe1574>
   46460:	10bffe04 	addi	r2,r2,-8
   46464:	a8a0983a 	sll	r16,r21,r2
   46468:	002b883a 	mov	r21,zero
   4646c:	003ec406 	br	45f80 <__alt_data_end+0xfffe1590>
   46470:	d8c00117 	ldw	r3,4(sp)
   46474:	b0ed883a 	add	r22,r22,r3
   46478:	b0c5803a 	cmpltu	r2,r22,r3
   4647c:	15c5883a 	add	r2,r2,r23
   46480:	11cf883a 	add	r7,r2,r7
   46484:	88bfffc4 	addi	r2,r17,-1
   46488:	b9c00d2e 	bgeu	r23,r7,464c0 <__divdf3+0x7c8>
   4648c:	39003f36 	bltu	r7,r4,4658c <__divdf3+0x894>
   46490:	21c06a26 	beq	r4,r7,4663c <__divdf3+0x944>
   46494:	3909c83a 	sub	r4,r7,r4
   46498:	1023883a 	mov	r17,r2
   4649c:	003f4f06 	br	461dc <__alt_data_end+0xfffe17ec>
   464a0:	9d7ee536 	bltu	r19,r21,46038 <__alt_data_end+0xfffe1648>
   464a4:	982ed07a 	srli	r23,r19,1
   464a8:	880497fa 	slli	r2,r17,31
   464ac:	8810d07a 	srli	r8,r17,1
   464b0:	982c97fa 	slli	r22,r19,31
   464b4:	b884b03a 	or	r2,r23,r2
   464b8:	d8800015 	stw	r2,0(sp)
   464bc:	003ee206 	br	46048 <__alt_data_end+0xfffe1658>
   464c0:	3dfff41e 	bne	r7,r23,46494 <__alt_data_end+0xfffe1aa4>
   464c4:	d8c00117 	ldw	r3,4(sp)
   464c8:	b0fff02e 	bgeu	r22,r3,4648c <__alt_data_end+0xfffe1a9c>
   464cc:	b909c83a 	sub	r4,r23,r4
   464d0:	1023883a 	mov	r17,r2
   464d4:	003f4106 	br	461dc <__alt_data_end+0xfffe17ec>
   464d8:	1021883a 	mov	r16,r2
   464dc:	003f1106 	br	46124 <__alt_data_end+0xfffe1734>
   464e0:	1023883a 	mov	r17,r2
   464e4:	003ef706 	br	460c4 <__alt_data_end+0xfffe16d4>
   464e8:	b23fe136 	bltu	r22,r8,46470 <__alt_data_end+0xfffe1a80>
   464ec:	0009883a 	mov	r4,zero
   464f0:	003f3a06 	br	461dc <__alt_data_end+0xfffe17ec>
   464f4:	38802c36 	bltu	r7,r2,465a8 <__divdf3+0x8b0>
   464f8:	11c05326 	beq	r2,r7,46648 <__divdf3+0x950>
   464fc:	2827883a 	mov	r19,r5
   46500:	003f8d06 	br	46338 <__alt_data_end+0xfffe1948>
   46504:	04ffffc4 	movi	r19,-1
   46508:	003f8c06 	br	4633c <__alt_data_end+0xfffe194c>
   4650c:	1011883a 	mov	r8,r2
   46510:	003f4d06 	br	46248 <__alt_data_end+0xfffe1858>
   46514:	1013883a 	mov	r9,r2
   46518:	003f6406 	br	462ac <__alt_data_end+0xfffe18bc>
   4651c:	e029883a 	mov	r20,fp
   46520:	003f8606 	br	4633c <__alt_data_end+0xfffe194c>
   46524:	008007c4 	movi	r2,31
   46528:	14002a16 	blt	r2,r16,465d4 <__divdf3+0x8dc>
   4652c:	91410784 	addi	r5,r18,1054
   46530:	9c0cd83a 	srl	r6,r19,r16
   46534:	8948983a 	sll	r4,r17,r5
   46538:	9944983a 	sll	r2,r19,r5
   4653c:	8c20d83a 	srl	r16,r17,r16
   46540:	3108b03a 	or	r4,r6,r4
   46544:	1004c03a 	cmpne	r2,r2,zero
   46548:	2084b03a 	or	r2,r4,r2
   4654c:	110001cc 	andi	r4,r2,7
   46550:	20000726 	beq	r4,zero,46570 <__divdf3+0x878>
   46554:	114003cc 	andi	r5,r2,15
   46558:	01000104 	movi	r4,4
   4655c:	29000426 	beq	r5,r4,46570 <__divdf3+0x878>
   46560:	11000104 	addi	r4,r2,4
   46564:	2085803a 	cmpltu	r2,r4,r2
   46568:	80a1883a 	add	r16,r16,r2
   4656c:	2005883a 	mov	r2,r4
   46570:	8100202c 	andhi	r4,r16,128
   46574:	20002d26 	beq	r4,zero,4662c <__divdf3+0x934>
   46578:	a180004c 	andi	r6,r20,1
   4657c:	02000044 	movi	r8,1
   46580:	000b883a 	mov	r5,zero
   46584:	0027883a 	mov	r19,zero
   46588:	003e3906 	br	45e70 <__alt_data_end+0xfffe1480>
   4658c:	d8c00117 	ldw	r3,4(sp)
   46590:	8c7fff84 	addi	r17,r17,-2
   46594:	b0ed883a 	add	r22,r22,r3
   46598:	b0c5803a 	cmpltu	r2,r22,r3
   4659c:	15c5883a 	add	r2,r2,r23
   465a0:	11cf883a 	add	r7,r2,r7
   465a4:	003f0c06 	br	461d8 <__alt_data_end+0xfffe17e8>
   465a8:	d8c00117 	ldw	r3,4(sp)
   465ac:	997fff84 	addi	r5,r19,-2
   465b0:	18d1883a 	add	r8,r3,r3
   465b4:	40c7803a 	cmpltu	r3,r8,r3
   465b8:	1dcd883a 	add	r6,r3,r23
   465bc:	398f883a 	add	r7,r7,r6
   465c0:	da000115 	stw	r8,4(sp)
   465c4:	003f8a06 	br	463f0 <__alt_data_end+0xfffe1a00>
   465c8:	203f861e 	bne	r4,zero,463e4 <__alt_data_end+0xfffe19f4>
   465cc:	d8000115 	stw	zero,4(sp)
   465d0:	003f8906 	br	463f8 <__alt_data_end+0xfffe1a08>
   465d4:	00bef884 	movi	r2,-1054
   465d8:	1485c83a 	sub	r2,r2,r18
   465dc:	01000804 	movi	r4,32
   465e0:	8884d83a 	srl	r2,r17,r2
   465e4:	81001c26 	beq	r16,r4,46658 <__divdf3+0x960>
   465e8:	91010f84 	addi	r4,r18,1086
   465ec:	8908983a 	sll	r4,r17,r4
   465f0:	24c8b03a 	or	r4,r4,r19
   465f4:	2008c03a 	cmpne	r4,r4,zero
   465f8:	2084b03a 	or	r2,r4,r2
   465fc:	140001cc 	andi	r16,r2,7
   46600:	8000061e 	bne	r16,zero,4661c <__divdf3+0x924>
   46604:	000b883a 	mov	r5,zero
   46608:	1004d0fa 	srli	r2,r2,3
   4660c:	a180004c 	andi	r6,r20,1
   46610:	0011883a 	mov	r8,zero
   46614:	1426b03a 	or	r19,r2,r16
   46618:	003e1506 	br	45e70 <__alt_data_end+0xfffe1480>
   4661c:	114003cc 	andi	r5,r2,15
   46620:	01000104 	movi	r4,4
   46624:	0021883a 	mov	r16,zero
   46628:	293fcd1e 	bne	r5,r4,46560 <__alt_data_end+0xfffe1b70>
   4662c:	800a927a 	slli	r5,r16,9
   46630:	8020977a 	slli	r16,r16,29
   46634:	280ad33a 	srli	r5,r5,12
   46638:	003ff306 	br	46608 <__alt_data_end+0xfffe1c18>
   4663c:	b23fd336 	bltu	r22,r8,4658c <__alt_data_end+0xfffe1b9c>
   46640:	1023883a 	mov	r17,r2
   46644:	003fa906 	br	464ec <__alt_data_end+0xfffe1afc>
   46648:	d8c00117 	ldw	r3,4(sp)
   4664c:	193fd636 	bltu	r3,r4,465a8 <__alt_data_end+0xfffe1bb8>
   46650:	2827883a 	mov	r19,r5
   46654:	003f6806 	br	463f8 <__alt_data_end+0xfffe1a08>
   46658:	0009883a 	mov	r4,zero
   4665c:	003fe406 	br	465f0 <__alt_data_end+0xfffe1c00>
   46660:	00800434 	movhi	r2,16
   46664:	89400234 	orhi	r5,r17,8
   46668:	10bfffc4 	addi	r2,r2,-1
   4666c:	e00d883a 	mov	r6,fp
   46670:	288a703a 	and	r5,r5,r2
   46674:	003e5806 	br	45fd8 <__alt_data_end+0xfffe15e8>

00046678 <__extendsfdf2>:
   46678:	200ad5fa 	srli	r5,r4,23
   4667c:	defffd04 	addi	sp,sp,-12
   46680:	dc400115 	stw	r17,4(sp)
   46684:	29403fcc 	andi	r5,r5,255
   46688:	29800044 	addi	r6,r5,1
   4668c:	04402034 	movhi	r17,128
   46690:	dc000015 	stw	r16,0(sp)
   46694:	8c7fffc4 	addi	r17,r17,-1
   46698:	dfc00215 	stw	ra,8(sp)
   4669c:	31803fcc 	andi	r6,r6,255
   466a0:	00800044 	movi	r2,1
   466a4:	8922703a 	and	r17,r17,r4
   466a8:	2020d7fa 	srli	r16,r4,31
   466ac:	1180110e 	bge	r2,r6,466f4 <__extendsfdf2+0x7c>
   466b0:	880ed0fa 	srli	r7,r17,3
   466b4:	8822977a 	slli	r17,r17,29
   466b8:	2940e004 	addi	r5,r5,896
   466bc:	2941ffcc 	andi	r5,r5,2047
   466c0:	280c953a 	slli	r6,r5,20
   466c4:	01400434 	movhi	r5,16
   466c8:	800697fa 	slli	r3,r16,31
   466cc:	297fffc4 	addi	r5,r5,-1
   466d0:	394a703a 	and	r5,r7,r5
   466d4:	298ab03a 	or	r5,r5,r6
   466d8:	8805883a 	mov	r2,r17
   466dc:	28c6b03a 	or	r3,r5,r3
   466e0:	dfc00217 	ldw	ra,8(sp)
   466e4:	dc400117 	ldw	r17,4(sp)
   466e8:	dc000017 	ldw	r16,0(sp)
   466ec:	dec00304 	addi	sp,sp,12
   466f0:	f800283a 	ret
   466f4:	2800111e 	bne	r5,zero,4673c <__extendsfdf2+0xc4>
   466f8:	88001c26 	beq	r17,zero,4676c <__extendsfdf2+0xf4>
   466fc:	8809883a 	mov	r4,r17
   46700:	00469200 	call	46920 <__clzsi2>
   46704:	00c00284 	movi	r3,10
   46708:	18801b16 	blt	r3,r2,46778 <__extendsfdf2+0x100>
   4670c:	01c002c4 	movi	r7,11
   46710:	388fc83a 	sub	r7,r7,r2
   46714:	10c00544 	addi	r3,r2,21
   46718:	89ced83a 	srl	r7,r17,r7
   4671c:	88e2983a 	sll	r17,r17,r3
   46720:	0180e244 	movi	r6,905
   46724:	308bc83a 	sub	r5,r6,r2
   46728:	01800434 	movhi	r6,16
   4672c:	31bfffc4 	addi	r6,r6,-1
   46730:	398e703a 	and	r7,r7,r6
   46734:	2941ffcc 	andi	r5,r5,2047
   46738:	003fe006 	br	466bc <__alt_data_end+0xfffe1ccc>
   4673c:	88000826 	beq	r17,zero,46760 <__extendsfdf2+0xe8>
   46740:	880ed0fa 	srli	r7,r17,3
   46744:	00800434 	movhi	r2,16
   46748:	10bfffc4 	addi	r2,r2,-1
   4674c:	39c00234 	orhi	r7,r7,8
   46750:	8822977a 	slli	r17,r17,29
   46754:	388e703a 	and	r7,r7,r2
   46758:	0141ffc4 	movi	r5,2047
   4675c:	003fd706 	br	466bc <__alt_data_end+0xfffe1ccc>
   46760:	0141ffc4 	movi	r5,2047
   46764:	000f883a 	mov	r7,zero
   46768:	003fd406 	br	466bc <__alt_data_end+0xfffe1ccc>
   4676c:	000b883a 	mov	r5,zero
   46770:	000f883a 	mov	r7,zero
   46774:	003fd106 	br	466bc <__alt_data_end+0xfffe1ccc>
   46778:	11fffd44 	addi	r7,r2,-11
   4677c:	89ce983a 	sll	r7,r17,r7
   46780:	0023883a 	mov	r17,zero
   46784:	003fe606 	br	46720 <__alt_data_end+0xfffe1d30>

00046788 <__truncdfsf2>:
   46788:	2810d53a 	srli	r8,r5,20
   4678c:	01c00434 	movhi	r7,16
   46790:	39ffffc4 	addi	r7,r7,-1
   46794:	29ce703a 	and	r7,r5,r7
   46798:	380e90fa 	slli	r7,r7,3
   4679c:	4201ffcc 	andi	r8,r8,2047
   467a0:	200cd77a 	srli	r6,r4,29
   467a4:	42400044 	addi	r9,r8,1
   467a8:	4a41ffcc 	andi	r9,r9,2047
   467ac:	00800044 	movi	r2,1
   467b0:	398cb03a 	or	r6,r7,r6
   467b4:	280ad7fa 	srli	r5,r5,31
   467b8:	200e90fa 	slli	r7,r4,3
   467bc:	1240230e 	bge	r2,r9,4684c <__truncdfsf2+0xc4>
   467c0:	40ff2004 	addi	r3,r8,-896
   467c4:	00803f84 	movi	r2,254
   467c8:	10c01516 	blt	r2,r3,46820 <__truncdfsf2+0x98>
   467cc:	00c02d0e 	bge	zero,r3,46884 <__truncdfsf2+0xfc>
   467d0:	200891ba 	slli	r4,r4,6
   467d4:	300c90fa 	slli	r6,r6,3
   467d8:	380ed77a 	srli	r7,r7,29
   467dc:	2008c03a 	cmpne	r4,r4,zero
   467e0:	310cb03a 	or	r6,r6,r4
   467e4:	31ccb03a 	or	r6,r6,r7
   467e8:	308001cc 	andi	r2,r6,7
   467ec:	10000426 	beq	r2,zero,46800 <__truncdfsf2+0x78>
   467f0:	310003cc 	andi	r4,r6,15
   467f4:	00800104 	movi	r2,4
   467f8:	20800126 	beq	r4,r2,46800 <__truncdfsf2+0x78>
   467fc:	31800104 	addi	r6,r6,4
   46800:	3081002c 	andhi	r2,r6,1024
   46804:	10002326 	beq	r2,zero,46894 <__truncdfsf2+0x10c>
   46808:	18c00044 	addi	r3,r3,1
   4680c:	00803fc4 	movi	r2,255
   46810:	18800326 	beq	r3,r2,46820 <__truncdfsf2+0x98>
   46814:	300c91ba 	slli	r6,r6,6
   46818:	300cd27a 	srli	r6,r6,9
   4681c:	00000206 	br	46828 <__truncdfsf2+0xa0>
   46820:	00ffffc4 	movi	r3,-1
   46824:	000d883a 	mov	r6,zero
   46828:	18c03fcc 	andi	r3,r3,255
   4682c:	180895fa 	slli	r4,r3,23
   46830:	00c02034 	movhi	r3,128
   46834:	280a97fa 	slli	r5,r5,31
   46838:	18ffffc4 	addi	r3,r3,-1
   4683c:	30c6703a 	and	r3,r6,r3
   46840:	1906b03a 	or	r3,r3,r4
   46844:	1944b03a 	or	r2,r3,r5
   46848:	f800283a 	ret
   4684c:	4000071e 	bne	r8,zero,4686c <__truncdfsf2+0xe4>
   46850:	31ccb03a 	or	r6,r6,r7
   46854:	30000d1e 	bne	r6,zero,4688c <__truncdfsf2+0x104>
   46858:	0007883a 	mov	r3,zero
   4685c:	00802034 	movhi	r2,128
   46860:	10bfffc4 	addi	r2,r2,-1
   46864:	308c703a 	and	r6,r6,r2
   46868:	003fef06 	br	46828 <__alt_data_end+0xfffe1e38>
   4686c:	31c8b03a 	or	r4,r6,r7
   46870:	203feb26 	beq	r4,zero,46820 <__alt_data_end+0xfffe1e30>
   46874:	300c90fa 	slli	r6,r6,3
   46878:	00c03fc4 	movi	r3,255
   4687c:	31808034 	orhi	r6,r6,512
   46880:	003fd906 	br	467e8 <__alt_data_end+0xfffe1df8>
   46884:	00bffa44 	movi	r2,-23
   46888:	1880090e 	bge	r3,r2,468b0 <__truncdfsf2+0x128>
   4688c:	01800144 	movi	r6,5
   46890:	0007883a 	mov	r3,zero
   46894:	00803fc4 	movi	r2,255
   46898:	300cd0fa 	srli	r6,r6,3
   4689c:	18bfef1e 	bne	r3,r2,4685c <__alt_data_end+0xfffe1e6c>
   468a0:	303fdf26 	beq	r6,zero,46820 <__alt_data_end+0xfffe1e30>
   468a4:	31801034 	orhi	r6,r6,64
   468a8:	00ffffc4 	movi	r3,-1
   468ac:	003feb06 	br	4685c <__alt_data_end+0xfffe1e6c>
   468b0:	0080e784 	movi	r2,926
   468b4:	1205c83a 	sub	r2,r2,r8
   468b8:	00c007c4 	movi	r3,31
   468bc:	31802034 	orhi	r6,r6,128
   468c0:	18800916 	blt	r3,r2,468e8 <__truncdfsf2+0x160>
   468c4:	423f2084 	addi	r8,r8,-894
   468c8:	3a06983a 	sll	r3,r7,r8
   468cc:	3210983a 	sll	r8,r6,r8
   468d0:	388ed83a 	srl	r7,r7,r2
   468d4:	180cc03a 	cmpne	r6,r3,zero
   468d8:	418cb03a 	or	r6,r8,r6
   468dc:	31ccb03a 	or	r6,r6,r7
   468e0:	0007883a 	mov	r3,zero
   468e4:	003fc006 	br	467e8 <__alt_data_end+0xfffe1df8>
   468e8:	00c0df84 	movi	r3,894
   468ec:	1a07c83a 	sub	r3,r3,r8
   468f0:	01000804 	movi	r4,32
   468f4:	30c6d83a 	srl	r3,r6,r3
   468f8:	11000726 	beq	r2,r4,46918 <__truncdfsf2+0x190>
   468fc:	423f2884 	addi	r8,r8,-862
   46900:	3210983a 	sll	r8,r6,r8
   46904:	41ceb03a 	or	r7,r8,r7
   46908:	380ec03a 	cmpne	r7,r7,zero
   4690c:	38ccb03a 	or	r6,r7,r3
   46910:	0007883a 	mov	r3,zero
   46914:	003fb406 	br	467e8 <__alt_data_end+0xfffe1df8>
   46918:	0011883a 	mov	r8,zero
   4691c:	003ff906 	br	46904 <__alt_data_end+0xfffe1f14>

00046920 <__clzsi2>:
   46920:	00bfffd4 	movui	r2,65535
   46924:	11000b36 	bltu	r2,r4,46954 <__clzsi2+0x34>
   46928:	00803fc4 	movi	r2,255
   4692c:	1100122e 	bgeu	r2,r4,46978 <__clzsi2+0x58>
   46930:	00c00204 	movi	r3,8
   46934:	01400604 	movi	r5,24
   46938:	20c8d83a 	srl	r4,r4,r3
   4693c:	008001b4 	movhi	r2,6
   46940:	10a3aa04 	addi	r2,r2,-29016
   46944:	1109883a 	add	r4,r2,r4
   46948:	20800003 	ldbu	r2,0(r4)
   4694c:	2885c83a 	sub	r2,r5,r2
   46950:	f800283a 	ret
   46954:	00804034 	movhi	r2,256
   46958:	10bfffc4 	addi	r2,r2,-1
   4695c:	11000336 	bltu	r2,r4,4696c <__clzsi2+0x4c>
   46960:	00c00404 	movi	r3,16
   46964:	180b883a 	mov	r5,r3
   46968:	003ff306 	br	46938 <__alt_data_end+0xfffe1f48>
   4696c:	00c00604 	movi	r3,24
   46970:	01400204 	movi	r5,8
   46974:	003ff006 	br	46938 <__alt_data_end+0xfffe1f48>
   46978:	0007883a 	mov	r3,zero
   4697c:	01400804 	movi	r5,32
   46980:	003fed06 	br	46938 <__alt_data_end+0xfffe1f48>

00046984 <malloc>:
   46984:	008001b4 	movhi	r2,6
   46988:	10abc704 	addi	r2,r2,-20708
   4698c:	200b883a 	mov	r5,r4
   46990:	11000017 	ldw	r4,0(r2)
   46994:	00469ac1 	jmpi	469ac <_malloc_r>

00046998 <free>:
   46998:	008001b4 	movhi	r2,6
   4699c:	10abc704 	addi	r2,r2,-20708
   469a0:	200b883a 	mov	r5,r4
   469a4:	11000017 	ldw	r4,0(r2)
   469a8:	004dc381 	jmpi	4dc38 <_free_r>

000469ac <_malloc_r>:
   469ac:	defff504 	addi	sp,sp,-44
   469b0:	dc800315 	stw	r18,12(sp)
   469b4:	dfc00a15 	stw	ra,40(sp)
   469b8:	df000915 	stw	fp,36(sp)
   469bc:	ddc00815 	stw	r23,32(sp)
   469c0:	dd800715 	stw	r22,28(sp)
   469c4:	dd400615 	stw	r21,24(sp)
   469c8:	dd000515 	stw	r20,20(sp)
   469cc:	dcc00415 	stw	r19,16(sp)
   469d0:	dc400215 	stw	r17,8(sp)
   469d4:	dc000115 	stw	r16,4(sp)
   469d8:	288002c4 	addi	r2,r5,11
   469dc:	00c00584 	movi	r3,22
   469e0:	2025883a 	mov	r18,r4
   469e4:	18802a2e 	bgeu	r3,r2,46a90 <_malloc_r+0xe4>
   469e8:	047ffe04 	movi	r17,-8
   469ec:	1462703a 	and	r17,r2,r17
   469f0:	88009e16 	blt	r17,zero,46c6c <_malloc_r+0x2c0>
   469f4:	89409d36 	bltu	r17,r5,46c6c <_malloc_r+0x2c0>
   469f8:	00565ac0 	call	565ac <__malloc_lock>
   469fc:	00807dc4 	movi	r2,503
   46a00:	14402736 	bltu	r2,r17,46aa0 <_malloc_r+0xf4>
   46a04:	8806d0fa 	srli	r3,r17,3
   46a08:	04c001b4 	movhi	r19,6
   46a0c:	9ce51804 	addi	r19,r19,-27552
   46a10:	18c5883a 	add	r2,r3,r3
   46a14:	1085883a 	add	r2,r2,r2
   46a18:	1085883a 	add	r2,r2,r2
   46a1c:	9885883a 	add	r2,r19,r2
   46a20:	14000317 	ldw	r16,12(r2)
   46a24:	80814a26 	beq	r16,r2,46f50 <_malloc_r+0x5a4>
   46a28:	80c00117 	ldw	r3,4(r16)
   46a2c:	81000317 	ldw	r4,12(r16)
   46a30:	00bfff04 	movi	r2,-4
   46a34:	1884703a 	and	r2,r3,r2
   46a38:	81400217 	ldw	r5,8(r16)
   46a3c:	8085883a 	add	r2,r16,r2
   46a40:	10c00117 	ldw	r3,4(r2)
   46a44:	29000315 	stw	r4,12(r5)
   46a48:	21400215 	stw	r5,8(r4)
   46a4c:	18c00054 	ori	r3,r3,1
   46a50:	10c00115 	stw	r3,4(r2)
   46a54:	9009883a 	mov	r4,r18
   46a58:	00565cc0 	call	565cc <__malloc_unlock>
   46a5c:	80800204 	addi	r2,r16,8
   46a60:	dfc00a17 	ldw	ra,40(sp)
   46a64:	df000917 	ldw	fp,36(sp)
   46a68:	ddc00817 	ldw	r23,32(sp)
   46a6c:	dd800717 	ldw	r22,28(sp)
   46a70:	dd400617 	ldw	r21,24(sp)
   46a74:	dd000517 	ldw	r20,20(sp)
   46a78:	dcc00417 	ldw	r19,16(sp)
   46a7c:	dc800317 	ldw	r18,12(sp)
   46a80:	dc400217 	ldw	r17,8(sp)
   46a84:	dc000117 	ldw	r16,4(sp)
   46a88:	dec00b04 	addi	sp,sp,44
   46a8c:	f800283a 	ret
   46a90:	04400404 	movi	r17,16
   46a94:	89407536 	bltu	r17,r5,46c6c <_malloc_r+0x2c0>
   46a98:	00565ac0 	call	565ac <__malloc_lock>
   46a9c:	003fd906 	br	46a04 <__alt_data_end+0xfffe2014>
   46aa0:	8806d27a 	srli	r3,r17,9
   46aa4:	18007526 	beq	r3,zero,46c7c <_malloc_r+0x2d0>
   46aa8:	00800104 	movi	r2,4
   46aac:	10c0ef36 	bltu	r2,r3,46e6c <_malloc_r+0x4c0>
   46ab0:	8806d1ba 	srli	r3,r17,6
   46ab4:	19c00e04 	addi	r7,r3,56
   46ab8:	39cb883a 	add	r5,r7,r7
   46abc:	04c001b4 	movhi	r19,6
   46ac0:	294b883a 	add	r5,r5,r5
   46ac4:	9ce51804 	addi	r19,r19,-27552
   46ac8:	294b883a 	add	r5,r5,r5
   46acc:	994b883a 	add	r5,r19,r5
   46ad0:	2c000317 	ldw	r16,12(r5)
   46ad4:	2c000e26 	beq	r5,r16,46b10 <_malloc_r+0x164>
   46ad8:	80800117 	ldw	r2,4(r16)
   46adc:	01bfff04 	movi	r6,-4
   46ae0:	010003c4 	movi	r4,15
   46ae4:	1184703a 	and	r2,r2,r6
   46ae8:	1447c83a 	sub	r3,r2,r17
   46aec:	20c00716 	blt	r4,r3,46b0c <_malloc_r+0x160>
   46af0:	1800650e 	bge	r3,zero,46c88 <_malloc_r+0x2dc>
   46af4:	84000317 	ldw	r16,12(r16)
   46af8:	2c000526 	beq	r5,r16,46b10 <_malloc_r+0x164>
   46afc:	80800117 	ldw	r2,4(r16)
   46b00:	1184703a 	and	r2,r2,r6
   46b04:	1447c83a 	sub	r3,r2,r17
   46b08:	20fff90e 	bge	r4,r3,46af0 <__alt_data_end+0xfffe2100>
   46b0c:	39ffffc4 	addi	r7,r7,-1
   46b10:	38c00044 	addi	r3,r7,1
   46b14:	018001b4 	movhi	r6,6
   46b18:	9c000417 	ldw	r16,16(r19)
   46b1c:	31a51804 	addi	r6,r6,-27552
   46b20:	32400204 	addi	r9,r6,8
   46b24:	82410326 	beq	r16,r9,46f34 <_malloc_r+0x588>
   46b28:	81000117 	ldw	r4,4(r16)
   46b2c:	00bfff04 	movi	r2,-4
   46b30:	208e703a 	and	r7,r4,r2
   46b34:	3c45c83a 	sub	r2,r7,r17
   46b38:	010003c4 	movi	r4,15
   46b3c:	2080ee16 	blt	r4,r2,46ef8 <_malloc_r+0x54c>
   46b40:	32400515 	stw	r9,20(r6)
   46b44:	32400415 	stw	r9,16(r6)
   46b48:	1000510e 	bge	r2,zero,46c90 <_malloc_r+0x2e4>
   46b4c:	00807fc4 	movi	r2,511
   46b50:	11c0ce36 	bltu	r2,r7,46e8c <_malloc_r+0x4e0>
   46b54:	3808d0fa 	srli	r4,r7,3
   46b58:	01c00044 	movi	r7,1
   46b5c:	30800117 	ldw	r2,4(r6)
   46b60:	210b883a 	add	r5,r4,r4
   46b64:	294b883a 	add	r5,r5,r5
   46b68:	2009d0ba 	srai	r4,r4,2
   46b6c:	294b883a 	add	r5,r5,r5
   46b70:	298b883a 	add	r5,r5,r6
   46b74:	2a000217 	ldw	r8,8(r5)
   46b78:	3908983a 	sll	r4,r7,r4
   46b7c:	81400315 	stw	r5,12(r16)
   46b80:	82000215 	stw	r8,8(r16)
   46b84:	2088b03a 	or	r4,r4,r2
   46b88:	2c000215 	stw	r16,8(r5)
   46b8c:	31000115 	stw	r4,4(r6)
   46b90:	44000315 	stw	r16,12(r8)
   46b94:	1805d0ba 	srai	r2,r3,2
   46b98:	01400044 	movi	r5,1
   46b9c:	288a983a 	sll	r5,r5,r2
   46ba0:	21404336 	bltu	r4,r5,46cb0 <_malloc_r+0x304>
   46ba4:	2144703a 	and	r2,r4,r5
   46ba8:	10000a1e 	bne	r2,zero,46bd4 <_malloc_r+0x228>
   46bac:	00bfff04 	movi	r2,-4
   46bb0:	294b883a 	add	r5,r5,r5
   46bb4:	1886703a 	and	r3,r3,r2
   46bb8:	2144703a 	and	r2,r4,r5
   46bbc:	18c00104 	addi	r3,r3,4
   46bc0:	1000041e 	bne	r2,zero,46bd4 <_malloc_r+0x228>
   46bc4:	294b883a 	add	r5,r5,r5
   46bc8:	2144703a 	and	r2,r4,r5
   46bcc:	18c00104 	addi	r3,r3,4
   46bd0:	103ffc26 	beq	r2,zero,46bc4 <__alt_data_end+0xfffe21d4>
   46bd4:	023fff04 	movi	r8,-4
   46bd8:	01c003c4 	movi	r7,15
   46bdc:	18c5883a 	add	r2,r3,r3
   46be0:	1085883a 	add	r2,r2,r2
   46be4:	1085883a 	add	r2,r2,r2
   46be8:	9895883a 	add	r10,r19,r2
   46bec:	52c00304 	addi	r11,r10,12
   46bf0:	1819883a 	mov	r12,r3
   46bf4:	5c000017 	ldw	r16,0(r11)
   46bf8:	59bffd04 	addi	r6,r11,-12
   46bfc:	8180041e 	bne	r16,r6,46c10 <_malloc_r+0x264>
   46c00:	0000ce06 	br	46f3c <_malloc_r+0x590>
   46c04:	2000d70e 	bge	r4,zero,46f64 <_malloc_r+0x5b8>
   46c08:	84000317 	ldw	r16,12(r16)
   46c0c:	8180cb26 	beq	r16,r6,46f3c <_malloc_r+0x590>
   46c10:	80800117 	ldw	r2,4(r16)
   46c14:	1204703a 	and	r2,r2,r8
   46c18:	1449c83a 	sub	r4,r2,r17
   46c1c:	393ff90e 	bge	r7,r4,46c04 <__alt_data_end+0xfffe2214>
   46c20:	80800317 	ldw	r2,12(r16)
   46c24:	80c00217 	ldw	r3,8(r16)
   46c28:	89400054 	ori	r5,r17,1
   46c2c:	81400115 	stw	r5,4(r16)
   46c30:	18800315 	stw	r2,12(r3)
   46c34:	10c00215 	stw	r3,8(r2)
   46c38:	8463883a 	add	r17,r16,r17
   46c3c:	9c400515 	stw	r17,20(r19)
   46c40:	9c400415 	stw	r17,16(r19)
   46c44:	20800054 	ori	r2,r4,1
   46c48:	88800115 	stw	r2,4(r17)
   46c4c:	8a400315 	stw	r9,12(r17)
   46c50:	8a400215 	stw	r9,8(r17)
   46c54:	8923883a 	add	r17,r17,r4
   46c58:	89000015 	stw	r4,0(r17)
   46c5c:	9009883a 	mov	r4,r18
   46c60:	00565cc0 	call	565cc <__malloc_unlock>
   46c64:	80800204 	addi	r2,r16,8
   46c68:	003f7d06 	br	46a60 <__alt_data_end+0xfffe2070>
   46c6c:	00800304 	movi	r2,12
   46c70:	90800015 	stw	r2,0(r18)
   46c74:	0005883a 	mov	r2,zero
   46c78:	003f7906 	br	46a60 <__alt_data_end+0xfffe2070>
   46c7c:	01401f84 	movi	r5,126
   46c80:	01c00fc4 	movi	r7,63
   46c84:	003f8d06 	br	46abc <__alt_data_end+0xfffe20cc>
   46c88:	81000317 	ldw	r4,12(r16)
   46c8c:	003f6a06 	br	46a38 <__alt_data_end+0xfffe2048>
   46c90:	81c5883a 	add	r2,r16,r7
   46c94:	10c00117 	ldw	r3,4(r2)
   46c98:	9009883a 	mov	r4,r18
   46c9c:	18c00054 	ori	r3,r3,1
   46ca0:	10c00115 	stw	r3,4(r2)
   46ca4:	00565cc0 	call	565cc <__malloc_unlock>
   46ca8:	80800204 	addi	r2,r16,8
   46cac:	003f6c06 	br	46a60 <__alt_data_end+0xfffe2070>
   46cb0:	9c000217 	ldw	r16,8(r19)
   46cb4:	00bfff04 	movi	r2,-4
   46cb8:	85800117 	ldw	r22,4(r16)
   46cbc:	b0ac703a 	and	r22,r22,r2
   46cc0:	b4400336 	bltu	r22,r17,46cd0 <_malloc_r+0x324>
   46cc4:	b445c83a 	sub	r2,r22,r17
   46cc8:	00c003c4 	movi	r3,15
   46ccc:	18805d16 	blt	r3,r2,46e44 <_malloc_r+0x498>
   46cd0:	05c001b4 	movhi	r23,6
   46cd4:	008001b4 	movhi	r2,6
   46cd8:	bdebc304 	addi	r23,r23,-20724
   46cdc:	10b29204 	addi	r2,r2,-13752
   46ce0:	15400017 	ldw	r21,0(r2)
   46ce4:	b9000017 	ldw	r4,0(r23)
   46ce8:	00ffffc4 	movi	r3,-1
   46cec:	858d883a 	add	r6,r16,r22
   46cf0:	8d6b883a 	add	r21,r17,r21
   46cf4:	20c0e426 	beq	r4,r3,47088 <_malloc_r+0x6dc>
   46cf8:	ad4403c4 	addi	r21,r21,4111
   46cfc:	00fc0004 	movi	r3,-4096
   46d00:	a8ea703a 	and	r21,r21,r3
   46d04:	9009883a 	mov	r4,r18
   46d08:	a80b883a 	mov	r5,r21
   46d0c:	d9800015 	stw	r6,0(sp)
   46d10:	00475040 	call	47504 <_sbrk_r>
   46d14:	00ffffc4 	movi	r3,-1
   46d18:	1029883a 	mov	r20,r2
   46d1c:	d9800017 	ldw	r6,0(sp)
   46d20:	10c0a426 	beq	r2,r3,46fb4 <_malloc_r+0x608>
   46d24:	1180a236 	bltu	r2,r6,46fb0 <_malloc_r+0x604>
   46d28:	070001b4 	movhi	fp,6
   46d2c:	e732ac04 	addi	fp,fp,-13648
   46d30:	e0c00017 	ldw	r3,0(fp)
   46d34:	a8c7883a 	add	r3,r21,r3
   46d38:	e0c00015 	stw	r3,0(fp)
   46d3c:	3500da26 	beq	r6,r20,470a8 <_malloc_r+0x6fc>
   46d40:	b9000017 	ldw	r4,0(r23)
   46d44:	00bfffc4 	movi	r2,-1
   46d48:	2080e426 	beq	r4,r2,470dc <_malloc_r+0x730>
   46d4c:	a185c83a 	sub	r2,r20,r6
   46d50:	1885883a 	add	r2,r3,r2
   46d54:	e0800015 	stw	r2,0(fp)
   46d58:	a0c001cc 	andi	r3,r20,7
   46d5c:	1800b526 	beq	r3,zero,47034 <_malloc_r+0x688>
   46d60:	a0e9c83a 	sub	r20,r20,r3
   46d64:	00840204 	movi	r2,4104
   46d68:	a5000204 	addi	r20,r20,8
   46d6c:	10c7c83a 	sub	r3,r2,r3
   46d70:	a545883a 	add	r2,r20,r21
   46d74:	1083ffcc 	andi	r2,r2,4095
   46d78:	18abc83a 	sub	r21,r3,r2
   46d7c:	9009883a 	mov	r4,r18
   46d80:	a80b883a 	mov	r5,r21
   46d84:	00475040 	call	47504 <_sbrk_r>
   46d88:	00ffffc4 	movi	r3,-1
   46d8c:	10c0d026 	beq	r2,r3,470d0 <_malloc_r+0x724>
   46d90:	1507c83a 	sub	r3,r2,r20
   46d94:	a8c7883a 	add	r3,r21,r3
   46d98:	18c00054 	ori	r3,r3,1
   46d9c:	e0800017 	ldw	r2,0(fp)
   46da0:	9d000215 	stw	r20,8(r19)
   46da4:	a0c00115 	stw	r3,4(r20)
   46da8:	a887883a 	add	r3,r21,r2
   46dac:	e0c00015 	stw	r3,0(fp)
   46db0:	84c00e26 	beq	r16,r19,46dec <_malloc_r+0x440>
   46db4:	018003c4 	movi	r6,15
   46db8:	3580a02e 	bgeu	r6,r22,4703c <_malloc_r+0x690>
   46dbc:	81400117 	ldw	r5,4(r16)
   46dc0:	013ffe04 	movi	r4,-8
   46dc4:	b0bffd04 	addi	r2,r22,-12
   46dc8:	1104703a 	and	r2,r2,r4
   46dcc:	2900004c 	andi	r4,r5,1
   46dd0:	1108b03a 	or	r4,r2,r4
   46dd4:	81000115 	stw	r4,4(r16)
   46dd8:	01400144 	movi	r5,5
   46ddc:	8089883a 	add	r4,r16,r2
   46de0:	21400115 	stw	r5,4(r4)
   46de4:	21400215 	stw	r5,8(r4)
   46de8:	3080c036 	bltu	r6,r2,470ec <_malloc_r+0x740>
   46dec:	008001b4 	movhi	r2,6
   46df0:	10b29104 	addi	r2,r2,-13756
   46df4:	11000017 	ldw	r4,0(r2)
   46df8:	20c0012e 	bgeu	r4,r3,46e00 <_malloc_r+0x454>
   46dfc:	10c00015 	stw	r3,0(r2)
   46e00:	008001b4 	movhi	r2,6
   46e04:	10b29004 	addi	r2,r2,-13760
   46e08:	11000017 	ldw	r4,0(r2)
   46e0c:	9c000217 	ldw	r16,8(r19)
   46e10:	20c0012e 	bgeu	r4,r3,46e18 <_malloc_r+0x46c>
   46e14:	10c00015 	stw	r3,0(r2)
   46e18:	80c00117 	ldw	r3,4(r16)
   46e1c:	00bfff04 	movi	r2,-4
   46e20:	1886703a 	and	r3,r3,r2
   46e24:	1c45c83a 	sub	r2,r3,r17
   46e28:	1c400236 	bltu	r3,r17,46e34 <_malloc_r+0x488>
   46e2c:	00c003c4 	movi	r3,15
   46e30:	18800416 	blt	r3,r2,46e44 <_malloc_r+0x498>
   46e34:	9009883a 	mov	r4,r18
   46e38:	00565cc0 	call	565cc <__malloc_unlock>
   46e3c:	0005883a 	mov	r2,zero
   46e40:	003f0706 	br	46a60 <__alt_data_end+0xfffe2070>
   46e44:	88c00054 	ori	r3,r17,1
   46e48:	80c00115 	stw	r3,4(r16)
   46e4c:	8463883a 	add	r17,r16,r17
   46e50:	10800054 	ori	r2,r2,1
   46e54:	9c400215 	stw	r17,8(r19)
   46e58:	88800115 	stw	r2,4(r17)
   46e5c:	9009883a 	mov	r4,r18
   46e60:	00565cc0 	call	565cc <__malloc_unlock>
   46e64:	80800204 	addi	r2,r16,8
   46e68:	003efd06 	br	46a60 <__alt_data_end+0xfffe2070>
   46e6c:	00800504 	movi	r2,20
   46e70:	10c0482e 	bgeu	r2,r3,46f94 <_malloc_r+0x5e8>
   46e74:	00801504 	movi	r2,84
   46e78:	10c06836 	bltu	r2,r3,4701c <_malloc_r+0x670>
   46e7c:	8806d33a 	srli	r3,r17,12
   46e80:	19c01b84 	addi	r7,r3,110
   46e84:	39cb883a 	add	r5,r7,r7
   46e88:	003f0c06 	br	46abc <__alt_data_end+0xfffe20cc>
   46e8c:	3804d27a 	srli	r2,r7,9
   46e90:	01000104 	movi	r4,4
   46e94:	2080422e 	bgeu	r4,r2,46fa0 <_malloc_r+0x5f4>
   46e98:	01000504 	movi	r4,20
   46e9c:	20807c36 	bltu	r4,r2,47090 <_malloc_r+0x6e4>
   46ea0:	110016c4 	addi	r4,r2,91
   46ea4:	210b883a 	add	r5,r4,r4
   46ea8:	294b883a 	add	r5,r5,r5
   46eac:	294b883a 	add	r5,r5,r5
   46eb0:	994b883a 	add	r5,r19,r5
   46eb4:	28800217 	ldw	r2,8(r5)
   46eb8:	020001b4 	movhi	r8,6
   46ebc:	42251804 	addi	r8,r8,-27552
   46ec0:	11406326 	beq	r2,r5,47050 <_malloc_r+0x6a4>
   46ec4:	01bfff04 	movi	r6,-4
   46ec8:	11000117 	ldw	r4,4(r2)
   46ecc:	2188703a 	and	r4,r4,r6
   46ed0:	3900022e 	bgeu	r7,r4,46edc <_malloc_r+0x530>
   46ed4:	10800217 	ldw	r2,8(r2)
   46ed8:	28bffb1e 	bne	r5,r2,46ec8 <__alt_data_end+0xfffe24d8>
   46edc:	11800317 	ldw	r6,12(r2)
   46ee0:	99000117 	ldw	r4,4(r19)
   46ee4:	81800315 	stw	r6,12(r16)
   46ee8:	80800215 	stw	r2,8(r16)
   46eec:	34000215 	stw	r16,8(r6)
   46ef0:	14000315 	stw	r16,12(r2)
   46ef4:	003f2706 	br	46b94 <__alt_data_end+0xfffe21a4>
   46ef8:	88c00054 	ori	r3,r17,1
   46efc:	80c00115 	stw	r3,4(r16)
   46f00:	8463883a 	add	r17,r16,r17
   46f04:	34400515 	stw	r17,20(r6)
   46f08:	34400415 	stw	r17,16(r6)
   46f0c:	10c00054 	ori	r3,r2,1
   46f10:	8a400315 	stw	r9,12(r17)
   46f14:	8a400215 	stw	r9,8(r17)
   46f18:	88c00115 	stw	r3,4(r17)
   46f1c:	88a3883a 	add	r17,r17,r2
   46f20:	88800015 	stw	r2,0(r17)
   46f24:	9009883a 	mov	r4,r18
   46f28:	00565cc0 	call	565cc <__malloc_unlock>
   46f2c:	80800204 	addi	r2,r16,8
   46f30:	003ecb06 	br	46a60 <__alt_data_end+0xfffe2070>
   46f34:	31000117 	ldw	r4,4(r6)
   46f38:	003f1606 	br	46b94 <__alt_data_end+0xfffe21a4>
   46f3c:	63000044 	addi	r12,r12,1
   46f40:	608000cc 	andi	r2,r12,3
   46f44:	5ac00204 	addi	r11,r11,8
   46f48:	103f2a1e 	bne	r2,zero,46bf4 <__alt_data_end+0xfffe2204>
   46f4c:	00002106 	br	46fd4 <_malloc_r+0x628>
   46f50:	80800204 	addi	r2,r16,8
   46f54:	84000517 	ldw	r16,20(r16)
   46f58:	143eb31e 	bne	r2,r16,46a28 <__alt_data_end+0xfffe2038>
   46f5c:	18c00084 	addi	r3,r3,2
   46f60:	003eec06 	br	46b14 <__alt_data_end+0xfffe2124>
   46f64:	8085883a 	add	r2,r16,r2
   46f68:	10c00117 	ldw	r3,4(r2)
   46f6c:	81000317 	ldw	r4,12(r16)
   46f70:	81400217 	ldw	r5,8(r16)
   46f74:	18c00054 	ori	r3,r3,1
   46f78:	10c00115 	stw	r3,4(r2)
   46f7c:	29000315 	stw	r4,12(r5)
   46f80:	21400215 	stw	r5,8(r4)
   46f84:	9009883a 	mov	r4,r18
   46f88:	00565cc0 	call	565cc <__malloc_unlock>
   46f8c:	80800204 	addi	r2,r16,8
   46f90:	003eb306 	br	46a60 <__alt_data_end+0xfffe2070>
   46f94:	19c016c4 	addi	r7,r3,91
   46f98:	39cb883a 	add	r5,r7,r7
   46f9c:	003ec706 	br	46abc <__alt_data_end+0xfffe20cc>
   46fa0:	3804d1ba 	srli	r2,r7,6
   46fa4:	11000e04 	addi	r4,r2,56
   46fa8:	210b883a 	add	r5,r4,r4
   46fac:	003fbe06 	br	46ea8 <__alt_data_end+0xfffe24b8>
   46fb0:	84ff5d26 	beq	r16,r19,46d28 <__alt_data_end+0xfffe2338>
   46fb4:	9c000217 	ldw	r16,8(r19)
   46fb8:	00bfff04 	movi	r2,-4
   46fbc:	80c00117 	ldw	r3,4(r16)
   46fc0:	1886703a 	and	r3,r3,r2
   46fc4:	003f9706 	br	46e24 <__alt_data_end+0xfffe2434>
   46fc8:	52800017 	ldw	r10,0(r10)
   46fcc:	18ffffc4 	addi	r3,r3,-1
   46fd0:	50805c1e 	bne	r10,r2,47144 <_malloc_r+0x798>
   46fd4:	190000cc 	andi	r4,r3,3
   46fd8:	50bffe04 	addi	r2,r10,-8
   46fdc:	203ffa1e 	bne	r4,zero,46fc8 <__alt_data_end+0xfffe25d8>
   46fe0:	98800117 	ldw	r2,4(r19)
   46fe4:	0146303a 	nor	r3,zero,r5
   46fe8:	1884703a 	and	r2,r3,r2
   46fec:	98800115 	stw	r2,4(r19)
   46ff0:	294b883a 	add	r5,r5,r5
   46ff4:	117f2e36 	bltu	r2,r5,46cb0 <__alt_data_end+0xfffe22c0>
   46ff8:	283f2d26 	beq	r5,zero,46cb0 <__alt_data_end+0xfffe22c0>
   46ffc:	1146703a 	and	r3,r2,r5
   47000:	1800521e 	bne	r3,zero,4714c <_malloc_r+0x7a0>
   47004:	6007883a 	mov	r3,r12
   47008:	294b883a 	add	r5,r5,r5
   4700c:	1148703a 	and	r4,r2,r5
   47010:	18c00104 	addi	r3,r3,4
   47014:	203ffc26 	beq	r4,zero,47008 <__alt_data_end+0xfffe2618>
   47018:	003ef006 	br	46bdc <__alt_data_end+0xfffe21ec>
   4701c:	00805504 	movi	r2,340
   47020:	10c01336 	bltu	r2,r3,47070 <_malloc_r+0x6c4>
   47024:	8806d3fa 	srli	r3,r17,15
   47028:	19c01dc4 	addi	r7,r3,119
   4702c:	39cb883a 	add	r5,r7,r7
   47030:	003ea206 	br	46abc <__alt_data_end+0xfffe20cc>
   47034:	00c40004 	movi	r3,4096
   47038:	003f4d06 	br	46d70 <__alt_data_end+0xfffe2380>
   4703c:	00800044 	movi	r2,1
   47040:	a0800115 	stw	r2,4(r20)
   47044:	a021883a 	mov	r16,r20
   47048:	0007883a 	mov	r3,zero
   4704c:	003f7506 	br	46e24 <__alt_data_end+0xfffe2434>
   47050:	200bd0ba 	srai	r5,r4,2
   47054:	01800044 	movi	r6,1
   47058:	41000117 	ldw	r4,4(r8)
   4705c:	314a983a 	sll	r5,r6,r5
   47060:	100d883a 	mov	r6,r2
   47064:	2908b03a 	or	r4,r5,r4
   47068:	41000115 	stw	r4,4(r8)
   4706c:	003f9d06 	br	46ee4 <__alt_data_end+0xfffe24f4>
   47070:	00815504 	movi	r2,1364
   47074:	10c01336 	bltu	r2,r3,470c4 <_malloc_r+0x718>
   47078:	8806d4ba 	srli	r3,r17,18
   4707c:	19c01f04 	addi	r7,r3,124
   47080:	39cb883a 	add	r5,r7,r7
   47084:	003e8d06 	br	46abc <__alt_data_end+0xfffe20cc>
   47088:	ad400404 	addi	r21,r21,16
   4708c:	003f1d06 	br	46d04 <__alt_data_end+0xfffe2314>
   47090:	01001504 	movi	r4,84
   47094:	20801c36 	bltu	r4,r2,47108 <_malloc_r+0x75c>
   47098:	3804d33a 	srli	r2,r7,12
   4709c:	11001b84 	addi	r4,r2,110
   470a0:	210b883a 	add	r5,r4,r4
   470a4:	003f8006 	br	46ea8 <__alt_data_end+0xfffe24b8>
   470a8:	3083ffcc 	andi	r2,r6,4095
   470ac:	103f241e 	bne	r2,zero,46d40 <__alt_data_end+0xfffe2350>
   470b0:	99000217 	ldw	r4,8(r19)
   470b4:	ad85883a 	add	r2,r21,r22
   470b8:	10800054 	ori	r2,r2,1
   470bc:	20800115 	stw	r2,4(r4)
   470c0:	003f4a06 	br	46dec <__alt_data_end+0xfffe23fc>
   470c4:	01403f04 	movi	r5,252
   470c8:	01c01f84 	movi	r7,126
   470cc:	003e7b06 	br	46abc <__alt_data_end+0xfffe20cc>
   470d0:	00c00044 	movi	r3,1
   470d4:	002b883a 	mov	r21,zero
   470d8:	003f3006 	br	46d9c <__alt_data_end+0xfffe23ac>
   470dc:	008001b4 	movhi	r2,6
   470e0:	10abc304 	addi	r2,r2,-20724
   470e4:	15000015 	stw	r20,0(r2)
   470e8:	003f1b06 	br	46d58 <__alt_data_end+0xfffe2368>
   470ec:	9009883a 	mov	r4,r18
   470f0:	81400204 	addi	r5,r16,8
   470f4:	004dc380 	call	4dc38 <_free_r>
   470f8:	008001b4 	movhi	r2,6
   470fc:	10b2ac04 	addi	r2,r2,-13648
   47100:	10c00017 	ldw	r3,0(r2)
   47104:	003f3906 	br	46dec <__alt_data_end+0xfffe23fc>
   47108:	01005504 	movi	r4,340
   4710c:	20800436 	bltu	r4,r2,47120 <_malloc_r+0x774>
   47110:	3804d3fa 	srli	r2,r7,15
   47114:	11001dc4 	addi	r4,r2,119
   47118:	210b883a 	add	r5,r4,r4
   4711c:	003f6206 	br	46ea8 <__alt_data_end+0xfffe24b8>
   47120:	01015504 	movi	r4,1364
   47124:	20800436 	bltu	r4,r2,47138 <_malloc_r+0x78c>
   47128:	3804d4ba 	srli	r2,r7,18
   4712c:	11001f04 	addi	r4,r2,124
   47130:	210b883a 	add	r5,r4,r4
   47134:	003f5c06 	br	46ea8 <__alt_data_end+0xfffe24b8>
   47138:	01403f04 	movi	r5,252
   4713c:	01001f84 	movi	r4,126
   47140:	003f5906 	br	46ea8 <__alt_data_end+0xfffe24b8>
   47144:	98800117 	ldw	r2,4(r19)
   47148:	003fa906 	br	46ff0 <__alt_data_end+0xfffe2600>
   4714c:	6007883a 	mov	r3,r12
   47150:	003ea206 	br	46bdc <__alt_data_end+0xfffe21ec>

00047154 <memcpy>:
   47154:	deffff04 	addi	sp,sp,-4
   47158:	dc000015 	stw	r16,0(sp)
   4715c:	00c003c4 	movi	r3,15
   47160:	2005883a 	mov	r2,r4
   47164:	1980432e 	bgeu	r3,r6,47274 <memcpy+0x120>
   47168:	2146b03a 	or	r3,r4,r5
   4716c:	18c000cc 	andi	r3,r3,3
   47170:	1800421e 	bne	r3,zero,4727c <memcpy+0x128>
   47174:	343ffc04 	addi	r16,r6,-16
   47178:	8020d13a 	srli	r16,r16,4
   4717c:	28c00104 	addi	r3,r5,4
   47180:	23400104 	addi	r13,r4,4
   47184:	801e913a 	slli	r15,r16,4
   47188:	2b000204 	addi	r12,r5,8
   4718c:	22c00204 	addi	r11,r4,8
   47190:	7bc00504 	addi	r15,r15,20
   47194:	2a800304 	addi	r10,r5,12
   47198:	22400304 	addi	r9,r4,12
   4719c:	2bdf883a 	add	r15,r5,r15
   471a0:	2811883a 	mov	r8,r5
   471a4:	200f883a 	mov	r7,r4
   471a8:	41000017 	ldw	r4,0(r8)
   471ac:	39c00404 	addi	r7,r7,16
   471b0:	18c00404 	addi	r3,r3,16
   471b4:	393ffc15 	stw	r4,-16(r7)
   471b8:	1bbffc17 	ldw	r14,-16(r3)
   471bc:	6b400404 	addi	r13,r13,16
   471c0:	5ac00404 	addi	r11,r11,16
   471c4:	6bbffc15 	stw	r14,-16(r13)
   471c8:	63800017 	ldw	r14,0(r12)
   471cc:	4a400404 	addi	r9,r9,16
   471d0:	42000404 	addi	r8,r8,16
   471d4:	5bbffc15 	stw	r14,-16(r11)
   471d8:	53800017 	ldw	r14,0(r10)
   471dc:	63000404 	addi	r12,r12,16
   471e0:	52800404 	addi	r10,r10,16
   471e4:	4bbffc15 	stw	r14,-16(r9)
   471e8:	1bffef1e 	bne	r3,r15,471a8 <__alt_data_end+0xfffe27b8>
   471ec:	81c00044 	addi	r7,r16,1
   471f0:	380e913a 	slli	r7,r7,4
   471f4:	310003cc 	andi	r4,r6,15
   471f8:	02c000c4 	movi	r11,3
   471fc:	11c7883a 	add	r3,r2,r7
   47200:	29cb883a 	add	r5,r5,r7
   47204:	59001f2e 	bgeu	r11,r4,47284 <memcpy+0x130>
   47208:	1813883a 	mov	r9,r3
   4720c:	2811883a 	mov	r8,r5
   47210:	200f883a 	mov	r7,r4
   47214:	42800017 	ldw	r10,0(r8)
   47218:	4a400104 	addi	r9,r9,4
   4721c:	39ffff04 	addi	r7,r7,-4
   47220:	4abfff15 	stw	r10,-4(r9)
   47224:	42000104 	addi	r8,r8,4
   47228:	59fffa36 	bltu	r11,r7,47214 <__alt_data_end+0xfffe2824>
   4722c:	213fff04 	addi	r4,r4,-4
   47230:	2008d0ba 	srli	r4,r4,2
   47234:	318000cc 	andi	r6,r6,3
   47238:	21000044 	addi	r4,r4,1
   4723c:	2109883a 	add	r4,r4,r4
   47240:	2109883a 	add	r4,r4,r4
   47244:	1907883a 	add	r3,r3,r4
   47248:	290b883a 	add	r5,r5,r4
   4724c:	30000626 	beq	r6,zero,47268 <memcpy+0x114>
   47250:	198d883a 	add	r6,r3,r6
   47254:	29c00003 	ldbu	r7,0(r5)
   47258:	18c00044 	addi	r3,r3,1
   4725c:	29400044 	addi	r5,r5,1
   47260:	19ffffc5 	stb	r7,-1(r3)
   47264:	19bffb1e 	bne	r3,r6,47254 <__alt_data_end+0xfffe2864>
   47268:	dc000017 	ldw	r16,0(sp)
   4726c:	dec00104 	addi	sp,sp,4
   47270:	f800283a 	ret
   47274:	2007883a 	mov	r3,r4
   47278:	003ff406 	br	4724c <__alt_data_end+0xfffe285c>
   4727c:	2007883a 	mov	r3,r4
   47280:	003ff306 	br	47250 <__alt_data_end+0xfffe2860>
   47284:	200d883a 	mov	r6,r4
   47288:	003ff006 	br	4724c <__alt_data_end+0xfffe285c>

0004728c <memset>:
   4728c:	20c000cc 	andi	r3,r4,3
   47290:	2005883a 	mov	r2,r4
   47294:	18004326 	beq	r3,zero,473a4 <memset+0x118>
   47298:	31ffffc4 	addi	r7,r6,-1
   4729c:	30004026 	beq	r6,zero,473a0 <memset+0x114>
   472a0:	2813883a 	mov	r9,r5
   472a4:	200d883a 	mov	r6,r4
   472a8:	2007883a 	mov	r3,r4
   472ac:	00000406 	br	472c0 <memset+0x34>
   472b0:	3a3fffc4 	addi	r8,r7,-1
   472b4:	31800044 	addi	r6,r6,1
   472b8:	38003926 	beq	r7,zero,473a0 <memset+0x114>
   472bc:	400f883a 	mov	r7,r8
   472c0:	18c00044 	addi	r3,r3,1
   472c4:	32400005 	stb	r9,0(r6)
   472c8:	1a0000cc 	andi	r8,r3,3
   472cc:	403ff81e 	bne	r8,zero,472b0 <__alt_data_end+0xfffe28c0>
   472d0:	010000c4 	movi	r4,3
   472d4:	21c02d2e 	bgeu	r4,r7,4738c <memset+0x100>
   472d8:	29803fcc 	andi	r6,r5,255
   472dc:	3008923a 	slli	r4,r6,8
   472e0:	218cb03a 	or	r6,r4,r6
   472e4:	3008943a 	slli	r4,r6,16
   472e8:	218cb03a 	or	r6,r4,r6
   472ec:	010003c4 	movi	r4,15
   472f0:	21c0182e 	bgeu	r4,r7,47354 <memset+0xc8>
   472f4:	3b3ffc04 	addi	r12,r7,-16
   472f8:	6018d13a 	srli	r12,r12,4
   472fc:	1a000104 	addi	r8,r3,4
   47300:	1ac00204 	addi	r11,r3,8
   47304:	6008913a 	slli	r4,r12,4
   47308:	1a800304 	addi	r10,r3,12
   4730c:	1813883a 	mov	r9,r3
   47310:	21000504 	addi	r4,r4,20
   47314:	1909883a 	add	r4,r3,r4
   47318:	49800015 	stw	r6,0(r9)
   4731c:	41800015 	stw	r6,0(r8)
   47320:	59800015 	stw	r6,0(r11)
   47324:	51800015 	stw	r6,0(r10)
   47328:	42000404 	addi	r8,r8,16
   4732c:	4a400404 	addi	r9,r9,16
   47330:	5ac00404 	addi	r11,r11,16
   47334:	52800404 	addi	r10,r10,16
   47338:	413ff71e 	bne	r8,r4,47318 <__alt_data_end+0xfffe2928>
   4733c:	63000044 	addi	r12,r12,1
   47340:	6018913a 	slli	r12,r12,4
   47344:	39c003cc 	andi	r7,r7,15
   47348:	010000c4 	movi	r4,3
   4734c:	1b07883a 	add	r3,r3,r12
   47350:	21c00e2e 	bgeu	r4,r7,4738c <memset+0x100>
   47354:	1813883a 	mov	r9,r3
   47358:	3811883a 	mov	r8,r7
   4735c:	010000c4 	movi	r4,3
   47360:	49800015 	stw	r6,0(r9)
   47364:	423fff04 	addi	r8,r8,-4
   47368:	4a400104 	addi	r9,r9,4
   4736c:	223ffc36 	bltu	r4,r8,47360 <__alt_data_end+0xfffe2970>
   47370:	393fff04 	addi	r4,r7,-4
   47374:	2008d0ba 	srli	r4,r4,2
   47378:	39c000cc 	andi	r7,r7,3
   4737c:	21000044 	addi	r4,r4,1
   47380:	2109883a 	add	r4,r4,r4
   47384:	2109883a 	add	r4,r4,r4
   47388:	1907883a 	add	r3,r3,r4
   4738c:	38000426 	beq	r7,zero,473a0 <memset+0x114>
   47390:	19cf883a 	add	r7,r3,r7
   47394:	19400005 	stb	r5,0(r3)
   47398:	18c00044 	addi	r3,r3,1
   4739c:	19fffd1e 	bne	r3,r7,47394 <__alt_data_end+0xfffe29a4>
   473a0:	f800283a 	ret
   473a4:	2007883a 	mov	r3,r4
   473a8:	300f883a 	mov	r7,r6
   473ac:	003fc806 	br	472d0 <__alt_data_end+0xfffe28e0>

000473b0 <_printf_r>:
   473b0:	defffd04 	addi	sp,sp,-12
   473b4:	dfc00015 	stw	ra,0(sp)
   473b8:	d9800115 	stw	r6,4(sp)
   473bc:	d9c00215 	stw	r7,8(sp)
   473c0:	280d883a 	mov	r6,r5
   473c4:	21400217 	ldw	r5,8(r4)
   473c8:	d9c00104 	addi	r7,sp,4
   473cc:	00498380 	call	49838 <___vfprintf_internal_r>
   473d0:	dfc00017 	ldw	ra,0(sp)
   473d4:	dec00304 	addi	sp,sp,12
   473d8:	f800283a 	ret

000473dc <printf>:
   473dc:	defffc04 	addi	sp,sp,-16
   473e0:	dfc00015 	stw	ra,0(sp)
   473e4:	d9400115 	stw	r5,4(sp)
   473e8:	d9800215 	stw	r6,8(sp)
   473ec:	d9c00315 	stw	r7,12(sp)
   473f0:	008001b4 	movhi	r2,6
   473f4:	10abc704 	addi	r2,r2,-20708
   473f8:	10800017 	ldw	r2,0(r2)
   473fc:	200b883a 	mov	r5,r4
   47400:	d9800104 	addi	r6,sp,4
   47404:	11000217 	ldw	r4,8(r2)
   47408:	004b9340 	call	4b934 <__vfprintf_internal>
   4740c:	dfc00017 	ldw	ra,0(sp)
   47410:	dec00404 	addi	sp,sp,16
   47414:	f800283a 	ret

00047418 <_putchar_r>:
   47418:	21800217 	ldw	r6,8(r4)
   4741c:	004fa601 	jmpi	4fa60 <_putc_r>

00047420 <putchar>:
   47420:	008001b4 	movhi	r2,6
   47424:	10abc704 	addi	r2,r2,-20708
   47428:	200b883a 	mov	r5,r4
   4742c:	11000017 	ldw	r4,0(r2)
   47430:	21800217 	ldw	r6,8(r4)
   47434:	004fa601 	jmpi	4fa60 <_putc_r>

00047438 <_puts_r>:
   47438:	defff604 	addi	sp,sp,-40
   4743c:	dc000715 	stw	r16,28(sp)
   47440:	2021883a 	mov	r16,r4
   47444:	2809883a 	mov	r4,r5
   47448:	dc400815 	stw	r17,32(sp)
   4744c:	dfc00915 	stw	ra,36(sp)
   47450:	2823883a 	mov	r17,r5
   47454:	00477300 	call	47730 <strlen>
   47458:	00c001b4 	movhi	r3,6
   4745c:	18ebc704 	addi	r3,r3,-20708
   47460:	18c00017 	ldw	r3,0(r3)
   47464:	11000044 	addi	r4,r2,1
   47468:	d8800115 	stw	r2,4(sp)
   4746c:	18c00217 	ldw	r3,8(r3)
   47470:	014001b4 	movhi	r5,6
   47474:	2963ea04 	addi	r5,r5,-28760
   47478:	1880030b 	ldhu	r2,12(r3)
   4747c:	d9400215 	stw	r5,8(sp)
   47480:	d9000615 	stw	r4,24(sp)
   47484:	01400044 	movi	r5,1
   47488:	01000084 	movi	r4,2
   4748c:	d9000515 	stw	r4,20(sp)
   47490:	dc400015 	stw	r17,0(sp)
   47494:	d9400315 	stw	r5,12(sp)
   47498:	dec00415 	stw	sp,16(sp)
   4749c:	1108000c 	andi	r4,r2,8192
   474a0:	2000061e 	bne	r4,zero,474bc <_puts_r+0x84>
   474a4:	19401917 	ldw	r5,100(r3)
   474a8:	0137ffc4 	movi	r4,-8193
   474ac:	10880014 	ori	r2,r2,8192
   474b0:	2908703a 	and	r4,r5,r4
   474b4:	1880030d 	sth	r2,12(r3)
   474b8:	19001915 	stw	r4,100(r3)
   474bc:	81400217 	ldw	r5,8(r16)
   474c0:	8009883a 	mov	r4,r16
   474c4:	d9800404 	addi	r6,sp,16
   474c8:	004df280 	call	4df28 <__sfvwrite_r>
   474cc:	1000061e 	bne	r2,zero,474e8 <_puts_r+0xb0>
   474d0:	00800284 	movi	r2,10
   474d4:	dfc00917 	ldw	ra,36(sp)
   474d8:	dc400817 	ldw	r17,32(sp)
   474dc:	dc000717 	ldw	r16,28(sp)
   474e0:	dec00a04 	addi	sp,sp,40
   474e4:	f800283a 	ret
   474e8:	00bfffc4 	movi	r2,-1
   474ec:	003ff906 	br	474d4 <__alt_data_end+0xfffe2ae4>

000474f0 <puts>:
   474f0:	008001b4 	movhi	r2,6
   474f4:	10abc704 	addi	r2,r2,-20708
   474f8:	200b883a 	mov	r5,r4
   474fc:	11000017 	ldw	r4,0(r2)
   47500:	00474381 	jmpi	47438 <_puts_r>

00047504 <_sbrk_r>:
   47504:	defffd04 	addi	sp,sp,-12
   47508:	dc000015 	stw	r16,0(sp)
   4750c:	040001b4 	movhi	r16,6
   47510:	dc400115 	stw	r17,4(sp)
   47514:	84329304 	addi	r16,r16,-13748
   47518:	2023883a 	mov	r17,r4
   4751c:	2809883a 	mov	r4,r5
   47520:	dfc00215 	stw	ra,8(sp)
   47524:	80000015 	stw	zero,0(r16)
   47528:	00567c00 	call	567c0 <sbrk>
   4752c:	00ffffc4 	movi	r3,-1
   47530:	10c00526 	beq	r2,r3,47548 <_sbrk_r+0x44>
   47534:	dfc00217 	ldw	ra,8(sp)
   47538:	dc400117 	ldw	r17,4(sp)
   4753c:	dc000017 	ldw	r16,0(sp)
   47540:	dec00304 	addi	sp,sp,12
   47544:	f800283a 	ret
   47548:	80c00017 	ldw	r3,0(r16)
   4754c:	183ff926 	beq	r3,zero,47534 <__alt_data_end+0xfffe2b44>
   47550:	88c00015 	stw	r3,0(r17)
   47554:	003ff706 	br	47534 <__alt_data_end+0xfffe2b44>

00047558 <_sprintf_r>:
   47558:	deffe404 	addi	sp,sp,-112
   4755c:	2807883a 	mov	r3,r5
   47560:	dfc01a15 	stw	ra,104(sp)
   47564:	d9c01b15 	stw	r7,108(sp)
   47568:	00a00034 	movhi	r2,32768
   4756c:	10bfffc4 	addi	r2,r2,-1
   47570:	02008204 	movi	r8,520
   47574:	d8800215 	stw	r2,8(sp)
   47578:	d8800515 	stw	r2,20(sp)
   4757c:	d80b883a 	mov	r5,sp
   47580:	d9c01b04 	addi	r7,sp,108
   47584:	00bfffc4 	movi	r2,-1
   47588:	d8c00015 	stw	r3,0(sp)
   4758c:	d8c00415 	stw	r3,16(sp)
   47590:	da00030d 	sth	r8,12(sp)
   47594:	d880038d 	sth	r2,14(sp)
   47598:	00477c80 	call	477c8 <___svfprintf_internal_r>
   4759c:	d8c00017 	ldw	r3,0(sp)
   475a0:	18000005 	stb	zero,0(r3)
   475a4:	dfc01a17 	ldw	ra,104(sp)
   475a8:	dec01c04 	addi	sp,sp,112
   475ac:	f800283a 	ret

000475b0 <sprintf>:
   475b0:	deffe304 	addi	sp,sp,-116
   475b4:	2007883a 	mov	r3,r4
   475b8:	dfc01a15 	stw	ra,104(sp)
   475bc:	d9801b15 	stw	r6,108(sp)
   475c0:	d9c01c15 	stw	r7,112(sp)
   475c4:	010001b4 	movhi	r4,6
   475c8:	212bc704 	addi	r4,r4,-20708
   475cc:	21000017 	ldw	r4,0(r4)
   475d0:	00a00034 	movhi	r2,32768
   475d4:	10bfffc4 	addi	r2,r2,-1
   475d8:	280d883a 	mov	r6,r5
   475dc:	02008204 	movi	r8,520
   475e0:	d8800215 	stw	r2,8(sp)
   475e4:	d8800515 	stw	r2,20(sp)
   475e8:	d80b883a 	mov	r5,sp
   475ec:	d9c01b04 	addi	r7,sp,108
   475f0:	00bfffc4 	movi	r2,-1
   475f4:	d8c00015 	stw	r3,0(sp)
   475f8:	d8c00415 	stw	r3,16(sp)
   475fc:	da00030d 	sth	r8,12(sp)
   47600:	d880038d 	sth	r2,14(sp)
   47604:	00477c80 	call	477c8 <___svfprintf_internal_r>
   47608:	d8c00017 	ldw	r3,0(sp)
   4760c:	18000005 	stb	zero,0(r3)
   47610:	dfc01a17 	ldw	ra,104(sp)
   47614:	dec01d04 	addi	sp,sp,116
   47618:	f800283a 	ret

0004761c <strcasecmp>:
   4761c:	008001b4 	movhi	r2,6
   47620:	10abc504 	addi	r2,r2,-20716
   47624:	12400017 	ldw	r9,0(r2)
   47628:	02000044 	movi	r8,1
   4762c:	00000a06 	br	47658 <strcasecmp+0x3c>
   47630:	28c00003 	ldbu	r3,0(r5)
   47634:	21000044 	addi	r4,r4,1
   47638:	29400044 	addi	r5,r5,1
   4763c:	48c5883a 	add	r2,r9,r3
   47640:	11800043 	ldbu	r6,1(r2)
   47644:	38c5c83a 	sub	r2,r7,r3
   47648:	318000cc 	andi	r6,r6,3
   4764c:	32000a26 	beq	r6,r8,47678 <strcasecmp+0x5c>
   47650:	10000d1e 	bne	r2,zero,47688 <strcasecmp+0x6c>
   47654:	18000c26 	beq	r3,zero,47688 <strcasecmp+0x6c>
   47658:	20c00003 	ldbu	r3,0(r4)
   4765c:	48c5883a 	add	r2,r9,r3
   47660:	10800043 	ldbu	r2,1(r2)
   47664:	180f883a 	mov	r7,r3
   47668:	108000cc 	andi	r2,r2,3
   4766c:	123ff01e 	bne	r2,r8,47630 <__alt_data_end+0xfffe2c40>
   47670:	19c00804 	addi	r7,r3,32
   47674:	003fee06 	br	47630 <__alt_data_end+0xfffe2c40>
   47678:	18c00804 	addi	r3,r3,32
   4767c:	38c5c83a 	sub	r2,r7,r3
   47680:	103ff526 	beq	r2,zero,47658 <__alt_data_end+0xfffe2c68>
   47684:	f800283a 	ret
   47688:	f800283a 	ret

0004768c <strcmp>:
   4768c:	2144b03a 	or	r2,r4,r5
   47690:	108000cc 	andi	r2,r2,3
   47694:	1000171e 	bne	r2,zero,476f4 <strcmp+0x68>
   47698:	20800017 	ldw	r2,0(r4)
   4769c:	28c00017 	ldw	r3,0(r5)
   476a0:	10c0141e 	bne	r2,r3,476f4 <strcmp+0x68>
   476a4:	027fbff4 	movhi	r9,65279
   476a8:	4a7fbfc4 	addi	r9,r9,-257
   476ac:	0086303a 	nor	r3,zero,r2
   476b0:	02202074 	movhi	r8,32897
   476b4:	1245883a 	add	r2,r2,r9
   476b8:	42202004 	addi	r8,r8,-32640
   476bc:	10c4703a 	and	r2,r2,r3
   476c0:	1204703a 	and	r2,r2,r8
   476c4:	10000226 	beq	r2,zero,476d0 <strcmp+0x44>
   476c8:	00001706 	br	47728 <strcmp+0x9c>
   476cc:	1000161e 	bne	r2,zero,47728 <strcmp+0x9c>
   476d0:	21000104 	addi	r4,r4,4
   476d4:	20c00017 	ldw	r3,0(r4)
   476d8:	29400104 	addi	r5,r5,4
   476dc:	29800017 	ldw	r6,0(r5)
   476e0:	1a4f883a 	add	r7,r3,r9
   476e4:	00c4303a 	nor	r2,zero,r3
   476e8:	3884703a 	and	r2,r7,r2
   476ec:	1204703a 	and	r2,r2,r8
   476f0:	19bff626 	beq	r3,r6,476cc <__alt_data_end+0xfffe2cdc>
   476f4:	20800007 	ldb	r2,0(r4)
   476f8:	1000051e 	bne	r2,zero,47710 <strcmp+0x84>
   476fc:	00000606 	br	47718 <strcmp+0x8c>
   47700:	21000044 	addi	r4,r4,1
   47704:	20800007 	ldb	r2,0(r4)
   47708:	29400044 	addi	r5,r5,1
   4770c:	10000226 	beq	r2,zero,47718 <strcmp+0x8c>
   47710:	28c00007 	ldb	r3,0(r5)
   47714:	10fffa26 	beq	r2,r3,47700 <__alt_data_end+0xfffe2d10>
   47718:	20800003 	ldbu	r2,0(r4)
   4771c:	28c00003 	ldbu	r3,0(r5)
   47720:	10c5c83a 	sub	r2,r2,r3
   47724:	f800283a 	ret
   47728:	0005883a 	mov	r2,zero
   4772c:	f800283a 	ret

00047730 <strlen>:
   47730:	208000cc 	andi	r2,r4,3
   47734:	10002026 	beq	r2,zero,477b8 <strlen+0x88>
   47738:	20800007 	ldb	r2,0(r4)
   4773c:	10002026 	beq	r2,zero,477c0 <strlen+0x90>
   47740:	2005883a 	mov	r2,r4
   47744:	00000206 	br	47750 <strlen+0x20>
   47748:	10c00007 	ldb	r3,0(r2)
   4774c:	18001826 	beq	r3,zero,477b0 <strlen+0x80>
   47750:	10800044 	addi	r2,r2,1
   47754:	10c000cc 	andi	r3,r2,3
   47758:	183ffb1e 	bne	r3,zero,47748 <__alt_data_end+0xfffe2d58>
   4775c:	10c00017 	ldw	r3,0(r2)
   47760:	01ffbff4 	movhi	r7,65279
   47764:	39ffbfc4 	addi	r7,r7,-257
   47768:	00ca303a 	nor	r5,zero,r3
   4776c:	01a02074 	movhi	r6,32897
   47770:	19c7883a 	add	r3,r3,r7
   47774:	31a02004 	addi	r6,r6,-32640
   47778:	1946703a 	and	r3,r3,r5
   4777c:	1986703a 	and	r3,r3,r6
   47780:	1800091e 	bne	r3,zero,477a8 <strlen+0x78>
   47784:	10800104 	addi	r2,r2,4
   47788:	10c00017 	ldw	r3,0(r2)
   4778c:	19cb883a 	add	r5,r3,r7
   47790:	00c6303a 	nor	r3,zero,r3
   47794:	28c6703a 	and	r3,r5,r3
   47798:	1986703a 	and	r3,r3,r6
   4779c:	183ff926 	beq	r3,zero,47784 <__alt_data_end+0xfffe2d94>
   477a0:	00000106 	br	477a8 <strlen+0x78>
   477a4:	10800044 	addi	r2,r2,1
   477a8:	10c00007 	ldb	r3,0(r2)
   477ac:	183ffd1e 	bne	r3,zero,477a4 <__alt_data_end+0xfffe2db4>
   477b0:	1105c83a 	sub	r2,r2,r4
   477b4:	f800283a 	ret
   477b8:	2005883a 	mov	r2,r4
   477bc:	003fe706 	br	4775c <__alt_data_end+0xfffe2d6c>
   477c0:	0005883a 	mov	r2,zero
   477c4:	f800283a 	ret

000477c8 <___svfprintf_internal_r>:
   477c8:	deffb504 	addi	sp,sp,-300
   477cc:	dfc04a15 	stw	ra,296(sp)
   477d0:	dd804715 	stw	r22,284(sp)
   477d4:	d9002f15 	stw	r4,188(sp)
   477d8:	282d883a 	mov	r22,r5
   477dc:	d9802915 	stw	r6,164(sp)
   477e0:	d9c02d15 	stw	r7,180(sp)
   477e4:	df004915 	stw	fp,292(sp)
   477e8:	ddc04815 	stw	r23,288(sp)
   477ec:	dd404615 	stw	r21,280(sp)
   477f0:	dd004515 	stw	r20,276(sp)
   477f4:	dcc04415 	stw	r19,272(sp)
   477f8:	dc804315 	stw	r18,268(sp)
   477fc:	dc404215 	stw	r17,264(sp)
   47800:	dc004115 	stw	r16,260(sp)
   47804:	004e5e80 	call	4e5e8 <_localeconv_r>
   47808:	10800017 	ldw	r2,0(r2)
   4780c:	1009883a 	mov	r4,r2
   47810:	d8803515 	stw	r2,212(sp)
   47814:	00477300 	call	47730 <strlen>
   47818:	d8803915 	stw	r2,228(sp)
   4781c:	b080030b 	ldhu	r2,12(r22)
   47820:	1080200c 	andi	r2,r2,128
   47824:	10000226 	beq	r2,zero,47830 <___svfprintf_internal_r+0x68>
   47828:	b0800417 	ldw	r2,16(r22)
   4782c:	10067426 	beq	r2,zero,49200 <___svfprintf_internal_r+0x1a38>
   47830:	d9001dc4 	addi	r4,sp,119
   47834:	ddc01e04 	addi	r23,sp,120
   47838:	d9400404 	addi	r5,sp,16
   4783c:	050001b4 	movhi	r20,6
   47840:	b905c83a 	sub	r2,r23,r4
   47844:	a523fb84 	addi	r20,r20,-28690
   47848:	d9002815 	stw	r4,160(sp)
   4784c:	d9401e15 	stw	r5,120(sp)
   47850:	d8002015 	stw	zero,128(sp)
   47854:	d8001f15 	stw	zero,124(sp)
   47858:	d8003315 	stw	zero,204(sp)
   4785c:	d8003715 	stw	zero,220(sp)
   47860:	d8003815 	stw	zero,224(sp)
   47864:	d8003b15 	stw	zero,236(sp)
   47868:	d8003a15 	stw	zero,232(sp)
   4786c:	d8003015 	stw	zero,192(sp)
   47870:	2811883a 	mov	r8,r5
   47874:	d8803d15 	stw	r2,244(sp)
   47878:	d8c02917 	ldw	r3,164(sp)
   4787c:	18800007 	ldb	r2,0(r3)
   47880:	1001fa26 	beq	r2,zero,4806c <___svfprintf_internal_r+0x8a4>
   47884:	00c00944 	movi	r3,37
   47888:	dc002917 	ldw	r16,164(sp)
   4788c:	10c0021e 	bne	r2,r3,47898 <___svfprintf_internal_r+0xd0>
   47890:	00001606 	br	478ec <___svfprintf_internal_r+0x124>
   47894:	10c08526 	beq	r2,r3,47aac <___svfprintf_internal_r+0x2e4>
   47898:	84000044 	addi	r16,r16,1
   4789c:	80800007 	ldb	r2,0(r16)
   478a0:	103ffc1e 	bne	r2,zero,47894 <__alt_data_end+0xfffe2ea4>
   478a4:	d9002917 	ldw	r4,164(sp)
   478a8:	8123c83a 	sub	r17,r16,r4
   478ac:	88000f26 	beq	r17,zero,478ec <___svfprintf_internal_r+0x124>
   478b0:	d8802917 	ldw	r2,164(sp)
   478b4:	d8c02017 	ldw	r3,128(sp)
   478b8:	44400115 	stw	r17,4(r8)
   478bc:	40800015 	stw	r2,0(r8)
   478c0:	d8801f17 	ldw	r2,124(sp)
   478c4:	1c47883a 	add	r3,r3,r17
   478c8:	d8c02015 	stw	r3,128(sp)
   478cc:	10800044 	addi	r2,r2,1
   478d0:	d8801f15 	stw	r2,124(sp)
   478d4:	00c001c4 	movi	r3,7
   478d8:	18807716 	blt	r3,r2,47ab8 <___svfprintf_internal_r+0x2f0>
   478dc:	42000204 	addi	r8,r8,8
   478e0:	d8c03017 	ldw	r3,192(sp)
   478e4:	1c47883a 	add	r3,r3,r17
   478e8:	d8c03015 	stw	r3,192(sp)
   478ec:	80800007 	ldb	r2,0(r16)
   478f0:	10007826 	beq	r2,zero,47ad4 <___svfprintf_internal_r+0x30c>
   478f4:	80800044 	addi	r2,r16,1
   478f8:	84000047 	ldb	r16,1(r16)
   478fc:	0027883a 	mov	r19,zero
   47900:	0039883a 	mov	fp,zero
   47904:	dcc02a05 	stb	r19,168(sp)
   47908:	d8002785 	stb	zero,158(sp)
   4790c:	027fffc4 	movi	r9,-1
   47910:	d8002e15 	stw	zero,184(sp)
   47914:	04401604 	movi	r17,88
   47918:	04800244 	movi	r18,9
   4791c:	da002915 	stw	r8,164(sp)
   47920:	e027883a 	mov	r19,fp
   47924:	17000044 	addi	fp,r2,1
   47928:	80bff804 	addi	r2,r16,-32
   4792c:	88830036 	bltu	r17,r2,48530 <___svfprintf_internal_r+0xd68>
   47930:	100490ba 	slli	r2,r2,2
   47934:	01000134 	movhi	r4,4
   47938:	211e5204 	addi	r4,r4,31048
   4793c:	1105883a 	add	r2,r2,r4
   47940:	10800017 	ldw	r2,0(r2)
   47944:	1000683a 	jmp	r2
   47948:	00048374 	movhi	zero,4621
   4794c:	00048530 	cmpltui	zero,zero,4628
   47950:	00048530 	cmpltui	zero,zero,4628
   47954:	00048390 	cmplti	zero,zero,4622
   47958:	00048530 	cmpltui	zero,zero,4628
   4795c:	00048530 	cmpltui	zero,zero,4628
   47960:	00048530 	cmpltui	zero,zero,4628
   47964:	00048530 	cmpltui	zero,zero,4628
   47968:	00048530 	cmpltui	zero,zero,4628
   4796c:	00048530 	cmpltui	zero,zero,4628
   47970:	0004847c 	xorhi	zero,zero,4625
   47974:	000484a4 	muli	zero,zero,4626
   47978:	00048530 	cmpltui	zero,zero,4628
   4797c:	00047b34 	movhi	zero,4588
   47980:	00047b44 	movi	zero,4589
   47984:	00048530 	cmpltui	zero,zero,4628
   47988:	00047b94 	movui	zero,4590
   4798c:	00047ba4 	muli	zero,zero,4590
   47990:	00047ba4 	muli	zero,zero,4590
   47994:	00047ba4 	muli	zero,zero,4590
   47998:	00047ba4 	muli	zero,zero,4590
   4799c:	00047ba4 	muli	zero,zero,4590
   479a0:	00047ba4 	muli	zero,zero,4590
   479a4:	00047ba4 	muli	zero,zero,4590
   479a8:	00047ba4 	muli	zero,zero,4590
   479ac:	00047ba4 	muli	zero,zero,4590
   479b0:	00048530 	cmpltui	zero,zero,4628
   479b4:	00048530 	cmpltui	zero,zero,4628
   479b8:	00048530 	cmpltui	zero,zero,4628
   479bc:	00048530 	cmpltui	zero,zero,4628
   479c0:	00048530 	cmpltui	zero,zero,4628
   479c4:	00048530 	cmpltui	zero,zero,4628
   479c8:	00048530 	cmpltui	zero,zero,4628
   479cc:	00048530 	cmpltui	zero,zero,4628
   479d0:	00048530 	cmpltui	zero,zero,4628
   479d4:	00048530 	cmpltui	zero,zero,4628
   479d8:	00047be8 	cmpgeui	zero,zero,4591
   479dc:	00048074 	movhi	zero,4609
   479e0:	00048530 	cmpltui	zero,zero,4628
   479e4:	00048074 	movhi	zero,4609
   479e8:	00048530 	cmpltui	zero,zero,4628
   479ec:	00048530 	cmpltui	zero,zero,4628
   479f0:	00048530 	cmpltui	zero,zero,4628
   479f4:	00048530 	cmpltui	zero,zero,4628
   479f8:	0004811c 	xori	zero,zero,4612
   479fc:	00048530 	cmpltui	zero,zero,4628
   47a00:	00048530 	cmpltui	zero,zero,4628
   47a04:	0004812c 	andhi	zero,zero,4612
   47a08:	00048530 	cmpltui	zero,zero,4628
   47a0c:	00048530 	cmpltui	zero,zero,4628
   47a10:	00048530 	cmpltui	zero,zero,4628
   47a14:	00048530 	cmpltui	zero,zero,4628
   47a18:	00048530 	cmpltui	zero,zero,4628
   47a1c:	0004816c 	andhi	zero,zero,4613
   47a20:	00048530 	cmpltui	zero,zero,4628
   47a24:	00048530 	cmpltui	zero,zero,4628
   47a28:	000482c0 	call	482c <__reset-0x3b7d4>
   47a2c:	00048530 	cmpltui	zero,zero,4628
   47a30:	00048530 	cmpltui	zero,zero,4628
   47a34:	00048530 	cmpltui	zero,zero,4628
   47a38:	00048530 	cmpltui	zero,zero,4628
   47a3c:	00048530 	cmpltui	zero,zero,4628
   47a40:	00048530 	cmpltui	zero,zero,4628
   47a44:	00048530 	cmpltui	zero,zero,4628
   47a48:	00048530 	cmpltui	zero,zero,4628
   47a4c:	00048530 	cmpltui	zero,zero,4628
   47a50:	00048530 	cmpltui	zero,zero,4628
   47a54:	00048328 	cmpgeui	zero,zero,4620
   47a58:	000481ec 	andhi	zero,zero,4615
   47a5c:	00048074 	movhi	zero,4609
   47a60:	00048074 	movhi	zero,4609
   47a64:	00048074 	movhi	zero,4609
   47a68:	00048258 	cmpnei	zero,zero,4617
   47a6c:	000481ec 	andhi	zero,zero,4615
   47a70:	00048530 	cmpltui	zero,zero,4628
   47a74:	00048530 	cmpltui	zero,zero,4628
   47a78:	00048268 	cmpgeui	zero,zero,4617
   47a7c:	00048530 	cmpltui	zero,zero,4628
   47a80:	00048280 	call	4828 <__reset-0x3b7d8>
   47a84:	000484f4 	movhi	zero,4627
   47a88:	000481a0 	cmpeqi	zero,zero,4614
   47a8c:	0004846c 	andhi	zero,zero,4625
   47a90:	00048530 	cmpltui	zero,zero,4628
   47a94:	000483a0 	cmpeqi	zero,zero,4622
   47a98:	00048530 	cmpltui	zero,zero,4628
   47a9c:	000484b8 	rdprs	zero,zero,4626
   47aa0:	00048530 	cmpltui	zero,zero,4628
   47aa4:	00048530 	cmpltui	zero,zero,4628
   47aa8:	00048420 	cmpeqi	zero,zero,4624
   47aac:	d9402917 	ldw	r5,164(sp)
   47ab0:	8163c83a 	sub	r17,r16,r5
   47ab4:	003f7d06 	br	478ac <__alt_data_end+0xfffe2ebc>
   47ab8:	d9002f17 	ldw	r4,188(sp)
   47abc:	b00b883a 	mov	r5,r22
   47ac0:	b80d883a 	mov	r6,r23
   47ac4:	00503180 	call	50318 <__ssprint_r>
   47ac8:	1000081e 	bne	r2,zero,47aec <___svfprintf_internal_r+0x324>
   47acc:	da000404 	addi	r8,sp,16
   47ad0:	003f8306 	br	478e0 <__alt_data_end+0xfffe2ef0>
   47ad4:	d8802017 	ldw	r2,128(sp)
   47ad8:	10000426 	beq	r2,zero,47aec <___svfprintf_internal_r+0x324>
   47adc:	d9002f17 	ldw	r4,188(sp)
   47ae0:	b00b883a 	mov	r5,r22
   47ae4:	d9801e04 	addi	r6,sp,120
   47ae8:	00503180 	call	50318 <__ssprint_r>
   47aec:	b080030b 	ldhu	r2,12(r22)
   47af0:	1080100c 	andi	r2,r2,64
   47af4:	10000d1e 	bne	r2,zero,47b2c <___svfprintf_internal_r+0x364>
   47af8:	d8803017 	ldw	r2,192(sp)
   47afc:	dfc04a17 	ldw	ra,296(sp)
   47b00:	df004917 	ldw	fp,292(sp)
   47b04:	ddc04817 	ldw	r23,288(sp)
   47b08:	dd804717 	ldw	r22,284(sp)
   47b0c:	dd404617 	ldw	r21,280(sp)
   47b10:	dd004517 	ldw	r20,276(sp)
   47b14:	dcc04417 	ldw	r19,272(sp)
   47b18:	dc804317 	ldw	r18,268(sp)
   47b1c:	dc404217 	ldw	r17,264(sp)
   47b20:	dc004117 	ldw	r16,260(sp)
   47b24:	dec04b04 	addi	sp,sp,300
   47b28:	f800283a 	ret
   47b2c:	00bfffc4 	movi	r2,-1
   47b30:	003ff206 	br	47afc <__alt_data_end+0xfffe310c>
   47b34:	e005883a 	mov	r2,fp
   47b38:	9cc00114 	ori	r19,r19,4
   47b3c:	e4000007 	ldb	r16,0(fp)
   47b40:	003f7806 	br	47924 <__alt_data_end+0xfffe2f34>
   47b44:	e4000007 	ldb	r16,0(fp)
   47b48:	01000a84 	movi	r4,42
   47b4c:	e0800044 	addi	r2,fp,1
   47b50:	81071026 	beq	r16,r4,49794 <___svfprintf_internal_r+0x1fcc>
   47b54:	857ff404 	addi	r21,r16,-48
   47b58:	1039883a 	mov	fp,r2
   47b5c:	0013883a 	mov	r9,zero
   47b60:	957f7136 	bltu	r18,r21,47928 <__alt_data_end+0xfffe2f38>
   47b64:	0009883a 	mov	r4,zero
   47b68:	01400284 	movi	r5,10
   47b6c:	00453200 	call	45320 <__mulsi3>
   47b70:	e4000007 	ldb	r16,0(fp)
   47b74:	a889883a 	add	r4,r21,r2
   47b78:	e7000044 	addi	fp,fp,1
   47b7c:	857ff404 	addi	r21,r16,-48
   47b80:	957ff92e 	bgeu	r18,r21,47b68 <__alt_data_end+0xfffe3178>
   47b84:	2013883a 	mov	r9,r4
   47b88:	203f670e 	bge	r4,zero,47928 <__alt_data_end+0xfffe2f38>
   47b8c:	027fffc4 	movi	r9,-1
   47b90:	003f6506 	br	47928 <__alt_data_end+0xfffe2f38>
   47b94:	9cc02014 	ori	r19,r19,128
   47b98:	e005883a 	mov	r2,fp
   47b9c:	e4000007 	ldb	r16,0(fp)
   47ba0:	003f6006 	br	47924 <__alt_data_end+0xfffe2f34>
   47ba4:	857ff404 	addi	r21,r16,-48
   47ba8:	d8002e15 	stw	zero,184(sp)
   47bac:	e021883a 	mov	r16,fp
   47bb0:	0009883a 	mov	r4,zero
   47bb4:	da402b15 	stw	r9,172(sp)
   47bb8:	01400284 	movi	r5,10
   47bbc:	00453200 	call	45320 <__mulsi3>
   47bc0:	81400007 	ldb	r5,0(r16)
   47bc4:	1549883a 	add	r4,r2,r21
   47bc8:	e7000044 	addi	fp,fp,1
   47bcc:	2d7ff404 	addi	r21,r5,-48
   47bd0:	e021883a 	mov	r16,fp
   47bd4:	957ff82e 	bgeu	r18,r21,47bb8 <__alt_data_end+0xfffe31c8>
   47bd8:	2821883a 	mov	r16,r5
   47bdc:	d9002e15 	stw	r4,184(sp)
   47be0:	da402b17 	ldw	r9,172(sp)
   47be4:	003f5006 	br	47928 <__alt_data_end+0xfffe2f38>
   47be8:	da002917 	ldw	r8,164(sp)
   47bec:	df002915 	stw	fp,164(sp)
   47bf0:	9839883a 	mov	fp,r19
   47bf4:	dcc02a03 	ldbu	r19,168(sp)
   47bf8:	e7000414 	ori	fp,fp,16
   47bfc:	e080080c 	andi	r2,fp,32
   47c00:	dcc02785 	stb	r19,158(sp)
   47c04:	d8c02d17 	ldw	r3,180(sp)
   47c08:	10018026 	beq	r2,zero,4820c <___svfprintf_internal_r+0xa44>
   47c0c:	d9002d17 	ldw	r4,180(sp)
   47c10:	18800117 	ldw	r2,4(r3)
   47c14:	1c800017 	ldw	r18,0(r3)
   47c18:	21000204 	addi	r4,r4,8
   47c1c:	d9002d15 	stw	r4,180(sp)
   47c20:	102b883a 	mov	r21,r2
   47c24:	10018216 	blt	r2,zero,48230 <___svfprintf_internal_r+0xa68>
   47c28:	dcc02783 	ldbu	r19,158(sp)
   47c2c:	da403215 	stw	r9,200(sp)
   47c30:	00800044 	movi	r2,1
   47c34:	9546b03a 	or	r3,r18,r21
   47c38:	48000216 	blt	r9,zero,47c44 <___svfprintf_internal_r+0x47c>
   47c3c:	013fdfc4 	movi	r4,-129
   47c40:	e138703a 	and	fp,fp,r4
   47c44:	1802471e 	bne	r3,zero,48564 <___svfprintf_internal_r+0xd9c>
   47c48:	48035226 	beq	r9,zero,48994 <___svfprintf_internal_r+0x11cc>
   47c4c:	10803fcc 	andi	r2,r2,255
   47c50:	00c00044 	movi	r3,1
   47c54:	10c26626 	beq	r2,r3,485f0 <___svfprintf_internal_r+0xe28>
   47c58:	00c00084 	movi	r3,2
   47c5c:	10c2e826 	beq	r2,r3,48800 <___svfprintf_internal_r+0x1038>
   47c60:	b807883a 	mov	r3,r23
   47c64:	9008d0fa 	srli	r4,r18,3
   47c68:	a80a977a 	slli	r5,r21,29
   47c6c:	a82ad0fa 	srli	r21,r21,3
   47c70:	948001cc 	andi	r18,r18,7
   47c74:	90800c04 	addi	r2,r18,48
   47c78:	18ffffc4 	addi	r3,r3,-1
   47c7c:	2924b03a 	or	r18,r5,r4
   47c80:	18800005 	stb	r2,0(r3)
   47c84:	9548b03a 	or	r4,r18,r21
   47c88:	203ff61e 	bne	r4,zero,47c64 <__alt_data_end+0xfffe3274>
   47c8c:	e100004c 	andi	r4,fp,1
   47c90:	d8c03115 	stw	r3,196(sp)
   47c94:	2002e826 	beq	r4,zero,48838 <___svfprintf_internal_r+0x1070>
   47c98:	10803fcc 	andi	r2,r2,255
   47c9c:	1080201c 	xori	r2,r2,128
   47ca0:	10bfe004 	addi	r2,r2,-128
   47ca4:	01000c04 	movi	r4,48
   47ca8:	11056d26 	beq	r2,r4,49260 <___svfprintf_internal_r+0x1a98>
   47cac:	d9403117 	ldw	r5,196(sp)
   47cb0:	193fffc5 	stb	r4,-1(r3)
   47cb4:	297fffc4 	addi	r5,r5,-1
   47cb8:	d9403115 	stw	r5,196(sp)
   47cbc:	b963c83a 	sub	r17,r23,r5
   47cc0:	8805883a 	mov	r2,r17
   47cc4:	8a40010e 	bge	r17,r9,47ccc <___svfprintf_internal_r+0x504>
   47cc8:	4805883a 	mov	r2,r9
   47ccc:	d8802a15 	stw	r2,168(sp)
   47cd0:	d8003415 	stw	zero,208(sp)
   47cd4:	98803fcc 	andi	r2,r19,255
   47cd8:	1080201c 	xori	r2,r2,128
   47cdc:	10bfe004 	addi	r2,r2,-128
   47ce0:	10000326 	beq	r2,zero,47cf0 <___svfprintf_internal_r+0x528>
   47ce4:	d8c02a17 	ldw	r3,168(sp)
   47ce8:	18c00044 	addi	r3,r3,1
   47cec:	d8c02a15 	stw	r3,168(sp)
   47cf0:	e0c0008c 	andi	r3,fp,2
   47cf4:	d8c02b15 	stw	r3,172(sp)
   47cf8:	18000326 	beq	r3,zero,47d08 <___svfprintf_internal_r+0x540>
   47cfc:	d8c02a17 	ldw	r3,168(sp)
   47d00:	18c00084 	addi	r3,r3,2
   47d04:	d8c02a15 	stw	r3,168(sp)
   47d08:	e0c0210c 	andi	r3,fp,132
   47d0c:	d8c02c15 	stw	r3,176(sp)
   47d10:	1802121e 	bne	r3,zero,4855c <___svfprintf_internal_r+0xd94>
   47d14:	d9002e17 	ldw	r4,184(sp)
   47d18:	d8c02a17 	ldw	r3,168(sp)
   47d1c:	20ebc83a 	sub	r21,r4,r3
   47d20:	05420e0e 	bge	zero,r21,4855c <___svfprintf_internal_r+0xd94>
   47d24:	02400404 	movi	r9,16
   47d28:	d8c02017 	ldw	r3,128(sp)
   47d2c:	d8801f17 	ldw	r2,124(sp)
   47d30:	4d45aa0e 	bge	r9,r21,493dc <___svfprintf_internal_r+0x1c14>
   47d34:	014001b4 	movhi	r5,6
   47d38:	a809883a 	mov	r4,r21
   47d3c:	2963ff84 	addi	r5,r5,-28674
   47d40:	dc003c15 	stw	r16,240(sp)
   47d44:	882b883a 	mov	r21,r17
   47d48:	d9403615 	stw	r5,216(sp)
   47d4c:	4827883a 	mov	r19,r9
   47d50:	048001c4 	movi	r18,7
   47d54:	dc002f17 	ldw	r16,188(sp)
   47d58:	2023883a 	mov	r17,r4
   47d5c:	00000306 	br	47d6c <___svfprintf_internal_r+0x5a4>
   47d60:	8c7ffc04 	addi	r17,r17,-16
   47d64:	42000204 	addi	r8,r8,8
   47d68:	9c40130e 	bge	r19,r17,47db8 <___svfprintf_internal_r+0x5f0>
   47d6c:	010001b4 	movhi	r4,6
   47d70:	18c00404 	addi	r3,r3,16
   47d74:	10800044 	addi	r2,r2,1
   47d78:	2123ff84 	addi	r4,r4,-28674
   47d7c:	41000015 	stw	r4,0(r8)
   47d80:	44c00115 	stw	r19,4(r8)
   47d84:	d8c02015 	stw	r3,128(sp)
   47d88:	d8801f15 	stw	r2,124(sp)
   47d8c:	90bff40e 	bge	r18,r2,47d60 <__alt_data_end+0xfffe3370>
   47d90:	8009883a 	mov	r4,r16
   47d94:	b00b883a 	mov	r5,r22
   47d98:	b80d883a 	mov	r6,r23
   47d9c:	00503180 	call	50318 <__ssprint_r>
   47da0:	103f521e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   47da4:	8c7ffc04 	addi	r17,r17,-16
   47da8:	d8c02017 	ldw	r3,128(sp)
   47dac:	d8801f17 	ldw	r2,124(sp)
   47db0:	da000404 	addi	r8,sp,16
   47db4:	9c7fed16 	blt	r19,r17,47d6c <__alt_data_end+0xfffe337c>
   47db8:	dc003c17 	ldw	r16,240(sp)
   47dbc:	8809883a 	mov	r4,r17
   47dc0:	a823883a 	mov	r17,r21
   47dc4:	202b883a 	mov	r21,r4
   47dc8:	d9403617 	ldw	r5,216(sp)
   47dcc:	a8c7883a 	add	r3,r21,r3
   47dd0:	10800044 	addi	r2,r2,1
   47dd4:	41400015 	stw	r5,0(r8)
   47dd8:	45400115 	stw	r21,4(r8)
   47ddc:	d8c02015 	stw	r3,128(sp)
   47de0:	d8801f15 	stw	r2,124(sp)
   47de4:	010001c4 	movi	r4,7
   47de8:	20834416 	blt	r4,r2,48afc <___svfprintf_internal_r+0x1334>
   47dec:	d8802787 	ldb	r2,158(sp)
   47df0:	42000204 	addi	r8,r8,8
   47df4:	10000c26 	beq	r2,zero,47e28 <___svfprintf_internal_r+0x660>
   47df8:	d8801f17 	ldw	r2,124(sp)
   47dfc:	d9002784 	addi	r4,sp,158
   47e00:	18c00044 	addi	r3,r3,1
   47e04:	10800044 	addi	r2,r2,1
   47e08:	41000015 	stw	r4,0(r8)
   47e0c:	01000044 	movi	r4,1
   47e10:	41000115 	stw	r4,4(r8)
   47e14:	d8c02015 	stw	r3,128(sp)
   47e18:	d8801f15 	stw	r2,124(sp)
   47e1c:	010001c4 	movi	r4,7
   47e20:	2082ee16 	blt	r4,r2,489dc <___svfprintf_internal_r+0x1214>
   47e24:	42000204 	addi	r8,r8,8
   47e28:	d8802b17 	ldw	r2,172(sp)
   47e2c:	10000c26 	beq	r2,zero,47e60 <___svfprintf_internal_r+0x698>
   47e30:	d8801f17 	ldw	r2,124(sp)
   47e34:	d9002704 	addi	r4,sp,156
   47e38:	18c00084 	addi	r3,r3,2
   47e3c:	10800044 	addi	r2,r2,1
   47e40:	41000015 	stw	r4,0(r8)
   47e44:	01000084 	movi	r4,2
   47e48:	41000115 	stw	r4,4(r8)
   47e4c:	d8c02015 	stw	r3,128(sp)
   47e50:	d8801f15 	stw	r2,124(sp)
   47e54:	010001c4 	movi	r4,7
   47e58:	2082e816 	blt	r4,r2,489fc <___svfprintf_internal_r+0x1234>
   47e5c:	42000204 	addi	r8,r8,8
   47e60:	d9002c17 	ldw	r4,176(sp)
   47e64:	00802004 	movi	r2,128
   47e68:	20823126 	beq	r4,r2,48730 <___svfprintf_internal_r+0xf68>
   47e6c:	d9403217 	ldw	r5,200(sp)
   47e70:	2c67c83a 	sub	r19,r5,r17
   47e74:	04c02f0e 	bge	zero,r19,47f34 <___svfprintf_internal_r+0x76c>
   47e78:	05400404 	movi	r21,16
   47e7c:	d8801f17 	ldw	r2,124(sp)
   47e80:	acc4260e 	bge	r21,r19,48f1c <___svfprintf_internal_r+0x1754>
   47e84:	014001b4 	movhi	r5,6
   47e88:	9809883a 	mov	r4,r19
   47e8c:	2963fb84 	addi	r5,r5,-28690
   47e90:	dc002c15 	stw	r16,176(sp)
   47e94:	8827883a 	mov	r19,r17
   47e98:	d9402b15 	stw	r5,172(sp)
   47e9c:	048001c4 	movi	r18,7
   47ea0:	dc002f17 	ldw	r16,188(sp)
   47ea4:	2023883a 	mov	r17,r4
   47ea8:	00000306 	br	47eb8 <___svfprintf_internal_r+0x6f0>
   47eac:	8c7ffc04 	addi	r17,r17,-16
   47eb0:	42000204 	addi	r8,r8,8
   47eb4:	ac40110e 	bge	r21,r17,47efc <___svfprintf_internal_r+0x734>
   47eb8:	18c00404 	addi	r3,r3,16
   47ebc:	10800044 	addi	r2,r2,1
   47ec0:	45000015 	stw	r20,0(r8)
   47ec4:	45400115 	stw	r21,4(r8)
   47ec8:	d8c02015 	stw	r3,128(sp)
   47ecc:	d8801f15 	stw	r2,124(sp)
   47ed0:	90bff60e 	bge	r18,r2,47eac <__alt_data_end+0xfffe34bc>
   47ed4:	8009883a 	mov	r4,r16
   47ed8:	b00b883a 	mov	r5,r22
   47edc:	b80d883a 	mov	r6,r23
   47ee0:	00503180 	call	50318 <__ssprint_r>
   47ee4:	103f011e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   47ee8:	8c7ffc04 	addi	r17,r17,-16
   47eec:	d8c02017 	ldw	r3,128(sp)
   47ef0:	d8801f17 	ldw	r2,124(sp)
   47ef4:	da000404 	addi	r8,sp,16
   47ef8:	ac7fef16 	blt	r21,r17,47eb8 <__alt_data_end+0xfffe34c8>
   47efc:	dc002c17 	ldw	r16,176(sp)
   47f00:	8809883a 	mov	r4,r17
   47f04:	9823883a 	mov	r17,r19
   47f08:	2027883a 	mov	r19,r4
   47f0c:	d9002b17 	ldw	r4,172(sp)
   47f10:	1cc7883a 	add	r3,r3,r19
   47f14:	10800044 	addi	r2,r2,1
   47f18:	41000015 	stw	r4,0(r8)
   47f1c:	44c00115 	stw	r19,4(r8)
   47f20:	d8c02015 	stw	r3,128(sp)
   47f24:	d8801f15 	stw	r2,124(sp)
   47f28:	010001c4 	movi	r4,7
   47f2c:	2082a316 	blt	r4,r2,489bc <___svfprintf_internal_r+0x11f4>
   47f30:	42000204 	addi	r8,r8,8
   47f34:	e080400c 	andi	r2,fp,256
   47f38:	1001b31e 	bne	r2,zero,48608 <___svfprintf_internal_r+0xe40>
   47f3c:	d8801f17 	ldw	r2,124(sp)
   47f40:	d9403117 	ldw	r5,196(sp)
   47f44:	1c47883a 	add	r3,r3,r17
   47f48:	10800044 	addi	r2,r2,1
   47f4c:	41400015 	stw	r5,0(r8)
   47f50:	44400115 	stw	r17,4(r8)
   47f54:	d8c02015 	stw	r3,128(sp)
   47f58:	d8801f15 	stw	r2,124(sp)
   47f5c:	010001c4 	movi	r4,7
   47f60:	20827e16 	blt	r4,r2,4895c <___svfprintf_internal_r+0x1194>
   47f64:	42000204 	addi	r8,r8,8
   47f68:	e080010c 	andi	r2,fp,4
   47f6c:	10003226 	beq	r2,zero,48038 <___svfprintf_internal_r+0x870>
   47f70:	d8802e17 	ldw	r2,184(sp)
   47f74:	d9002a17 	ldw	r4,168(sp)
   47f78:	1121c83a 	sub	r16,r2,r4
   47f7c:	04002e0e 	bge	zero,r16,48038 <___svfprintf_internal_r+0x870>
   47f80:	04400404 	movi	r17,16
   47f84:	d8801f17 	ldw	r2,124(sp)
   47f88:	8c05550e 	bge	r17,r16,494e0 <___svfprintf_internal_r+0x1d18>
   47f8c:	010001b4 	movhi	r4,6
   47f90:	2123ff84 	addi	r4,r4,-28674
   47f94:	d9003615 	stw	r4,216(sp)
   47f98:	048001c4 	movi	r18,7
   47f9c:	dcc02f17 	ldw	r19,188(sp)
   47fa0:	00000306 	br	47fb0 <___svfprintf_internal_r+0x7e8>
   47fa4:	843ffc04 	addi	r16,r16,-16
   47fa8:	42000204 	addi	r8,r8,8
   47fac:	8c00130e 	bge	r17,r16,47ffc <___svfprintf_internal_r+0x834>
   47fb0:	014001b4 	movhi	r5,6
   47fb4:	18c00404 	addi	r3,r3,16
   47fb8:	10800044 	addi	r2,r2,1
   47fbc:	2963ff84 	addi	r5,r5,-28674
   47fc0:	41400015 	stw	r5,0(r8)
   47fc4:	44400115 	stw	r17,4(r8)
   47fc8:	d8c02015 	stw	r3,128(sp)
   47fcc:	d8801f15 	stw	r2,124(sp)
   47fd0:	90bff40e 	bge	r18,r2,47fa4 <__alt_data_end+0xfffe35b4>
   47fd4:	9809883a 	mov	r4,r19
   47fd8:	b00b883a 	mov	r5,r22
   47fdc:	b80d883a 	mov	r6,r23
   47fe0:	00503180 	call	50318 <__ssprint_r>
   47fe4:	103ec11e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   47fe8:	843ffc04 	addi	r16,r16,-16
   47fec:	d8c02017 	ldw	r3,128(sp)
   47ff0:	d8801f17 	ldw	r2,124(sp)
   47ff4:	da000404 	addi	r8,sp,16
   47ff8:	8c3fed16 	blt	r17,r16,47fb0 <__alt_data_end+0xfffe35c0>
   47ffc:	d9003617 	ldw	r4,216(sp)
   48000:	1c07883a 	add	r3,r3,r16
   48004:	10800044 	addi	r2,r2,1
   48008:	41000015 	stw	r4,0(r8)
   4800c:	44000115 	stw	r16,4(r8)
   48010:	d8c02015 	stw	r3,128(sp)
   48014:	d8801f15 	stw	r2,124(sp)
   48018:	010001c4 	movi	r4,7
   4801c:	2080060e 	bge	r4,r2,48038 <___svfprintf_internal_r+0x870>
   48020:	d9002f17 	ldw	r4,188(sp)
   48024:	b00b883a 	mov	r5,r22
   48028:	b80d883a 	mov	r6,r23
   4802c:	00503180 	call	50318 <__ssprint_r>
   48030:	103eae1e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   48034:	d8c02017 	ldw	r3,128(sp)
   48038:	df002a17 	ldw	fp,168(sp)
   4803c:	d9402e17 	ldw	r5,184(sp)
   48040:	e140010e 	bge	fp,r5,48048 <___svfprintf_internal_r+0x880>
   48044:	2839883a 	mov	fp,r5
   48048:	d8803017 	ldw	r2,192(sp)
   4804c:	1705883a 	add	r2,r2,fp
   48050:	d8803015 	stw	r2,192(sp)
   48054:	1802491e 	bne	r3,zero,4897c <___svfprintf_internal_r+0x11b4>
   48058:	d8c02917 	ldw	r3,164(sp)
   4805c:	d8001f15 	stw	zero,124(sp)
   48060:	da000404 	addi	r8,sp,16
   48064:	18800007 	ldb	r2,0(r3)
   48068:	103e061e 	bne	r2,zero,47884 <__alt_data_end+0xfffe2e94>
   4806c:	dc002917 	ldw	r16,164(sp)
   48070:	003e1e06 	br	478ec <__alt_data_end+0xfffe2efc>
   48074:	d9002d17 	ldw	r4,180(sp)
   48078:	d9402d17 	ldw	r5,180(sp)
   4807c:	da002917 	ldw	r8,164(sp)
   48080:	21000017 	ldw	r4,0(r4)
   48084:	29400117 	ldw	r5,4(r5)
   48088:	df002915 	stw	fp,164(sp)
   4808c:	9839883a 	mov	fp,r19
   48090:	dcc02a03 	ldbu	r19,168(sp)
   48094:	d9003715 	stw	r4,220(sp)
   48098:	d9403815 	stw	r5,224(sp)
   4809c:	da004015 	stw	r8,256(sp)
   480a0:	da403f15 	stw	r9,252(sp)
   480a4:	dcc02785 	stb	r19,158(sp)
   480a8:	00501680 	call	50168 <__fpclassifyd>
   480ac:	d8c02d17 	ldw	r3,180(sp)
   480b0:	04400044 	movi	r17,1
   480b4:	da004017 	ldw	r8,256(sp)
   480b8:	1c800204 	addi	r18,r3,8
   480bc:	da403f17 	ldw	r9,252(sp)
   480c0:	d9003717 	ldw	r4,220(sp)
   480c4:	d9403817 	ldw	r5,224(sp)
   480c8:	14433e1e 	bne	r2,r17,48dc4 <___svfprintf_internal_r+0x15fc>
   480cc:	000d883a 	mov	r6,zero
   480d0:	000f883a 	mov	r7,zero
   480d4:	0054bb40 	call	54bb4 <__ledf2>
   480d8:	da004017 	ldw	r8,256(sp)
   480dc:	10050c16 	blt	r2,zero,49510 <___svfprintf_internal_r+0x1d48>
   480e0:	dcc02783 	ldbu	r19,158(sp)
   480e4:	008011c4 	movi	r2,71
   480e8:	1404410e 	bge	r2,r16,491f0 <___svfprintf_internal_r+0x1a28>
   480ec:	014001b4 	movhi	r5,6
   480f0:	2963ec04 	addi	r5,r5,-28752
   480f4:	d9403115 	stw	r5,196(sp)
   480f8:	00c000c4 	movi	r3,3
   480fc:	00bfdfc4 	movi	r2,-129
   48100:	d8c02a15 	stw	r3,168(sp)
   48104:	e0b8703a 	and	fp,fp,r2
   48108:	dc802d15 	stw	r18,180(sp)
   4810c:	1823883a 	mov	r17,r3
   48110:	d8003215 	stw	zero,200(sp)
   48114:	d8003415 	stw	zero,208(sp)
   48118:	003eee06 	br	47cd4 <__alt_data_end+0xfffe32e4>
   4811c:	9cc00214 	ori	r19,r19,8
   48120:	e005883a 	mov	r2,fp
   48124:	e4000007 	ldb	r16,0(fp)
   48128:	003dfe06 	br	47924 <__alt_data_end+0xfffe2f34>
   4812c:	da002917 	ldw	r8,164(sp)
   48130:	df002915 	stw	fp,164(sp)
   48134:	9f000414 	ori	fp,r19,16
   48138:	e080080c 	andi	r2,fp,32
   4813c:	1000f226 	beq	r2,zero,48508 <___svfprintf_internal_r+0xd40>
   48140:	d9402d17 	ldw	r5,180(sp)
   48144:	0005883a 	mov	r2,zero
   48148:	2c800017 	ldw	r18,0(r5)
   4814c:	2d400117 	ldw	r21,4(r5)
   48150:	29400204 	addi	r5,r5,8
   48154:	d9402d15 	stw	r5,180(sp)
   48158:	9546b03a 	or	r3,r18,r21
   4815c:	d8002785 	stb	zero,158(sp)
   48160:	da403215 	stw	r9,200(sp)
   48164:	0027883a 	mov	r19,zero
   48168:	003eb306 	br	47c38 <__alt_data_end+0xfffe3248>
   4816c:	da002917 	ldw	r8,164(sp)
   48170:	df002915 	stw	fp,164(sp)
   48174:	9f000414 	ori	fp,r19,16
   48178:	e080080c 	andi	r2,fp,32
   4817c:	1000d326 	beq	r2,zero,484cc <___svfprintf_internal_r+0xd04>
   48180:	d9002d17 	ldw	r4,180(sp)
   48184:	00800044 	movi	r2,1
   48188:	24800017 	ldw	r18,0(r4)
   4818c:	25400117 	ldw	r21,4(r4)
   48190:	21000204 	addi	r4,r4,8
   48194:	d9002d15 	stw	r4,180(sp)
   48198:	9546b03a 	or	r3,r18,r21
   4819c:	003fef06 	br	4815c <__alt_data_end+0xfffe376c>
   481a0:	d9402d17 	ldw	r5,180(sp)
   481a4:	00800c04 	movi	r2,48
   481a8:	d8802705 	stb	r2,156(sp)
   481ac:	2c800017 	ldw	r18,0(r5)
   481b0:	00801e04 	movi	r2,120
   481b4:	d8802745 	stb	r2,157(sp)
   481b8:	008001b4 	movhi	r2,6
   481bc:	10a3f404 	addi	r2,r2,-28720
   481c0:	29400104 	addi	r5,r5,4
   481c4:	da002917 	ldw	r8,164(sp)
   481c8:	d8803b15 	stw	r2,236(sp)
   481cc:	df002915 	stw	fp,164(sp)
   481d0:	002b883a 	mov	r21,zero
   481d4:	9f000094 	ori	fp,r19,2
   481d8:	d9402d15 	stw	r5,180(sp)
   481dc:	00800084 	movi	r2,2
   481e0:	04001e04 	movi	r16,120
   481e4:	9007883a 	mov	r3,r18
   481e8:	003fdc06 	br	4815c <__alt_data_end+0xfffe376c>
   481ec:	da002917 	ldw	r8,164(sp)
   481f0:	df002915 	stw	fp,164(sp)
   481f4:	9839883a 	mov	fp,r19
   481f8:	dcc02a03 	ldbu	r19,168(sp)
   481fc:	e080080c 	andi	r2,fp,32
   48200:	d8c02d17 	ldw	r3,180(sp)
   48204:	dcc02785 	stb	r19,158(sp)
   48208:	103e801e 	bne	r2,zero,47c0c <__alt_data_end+0xfffe321c>
   4820c:	e080040c 	andi	r2,fp,16
   48210:	10031f26 	beq	r2,zero,48e90 <___svfprintf_internal_r+0x16c8>
   48214:	1c800017 	ldw	r18,0(r3)
   48218:	d9402d17 	ldw	r5,180(sp)
   4821c:	902bd7fa 	srai	r21,r18,31
   48220:	29400104 	addi	r5,r5,4
   48224:	d9402d15 	stw	r5,180(sp)
   48228:	a805883a 	mov	r2,r21
   4822c:	103e7e0e 	bge	r2,zero,47c28 <__alt_data_end+0xfffe3238>
   48230:	04a5c83a 	sub	r18,zero,r18
   48234:	9004c03a 	cmpne	r2,r18,zero
   48238:	056bc83a 	sub	r21,zero,r21
   4823c:	a8abc83a 	sub	r21,r21,r2
   48240:	04c00b44 	movi	r19,45
   48244:	dcc02785 	stb	r19,158(sp)
   48248:	da403215 	stw	r9,200(sp)
   4824c:	00800044 	movi	r2,1
   48250:	9546b03a 	or	r3,r18,r21
   48254:	003e7806 	br	47c38 <__alt_data_end+0xfffe3248>
   48258:	9cc01014 	ori	r19,r19,64
   4825c:	e005883a 	mov	r2,fp
   48260:	e4000007 	ldb	r16,0(fp)
   48264:	003daf06 	br	47924 <__alt_data_end+0xfffe2f34>
   48268:	e4000007 	ldb	r16,0(fp)
   4826c:	00801b04 	movi	r2,108
   48270:	80837726 	beq	r16,r2,49050 <___svfprintf_internal_r+0x1888>
   48274:	9cc00414 	ori	r19,r19,16
   48278:	e005883a 	mov	r2,fp
   4827c:	003da906 	br	47924 <__alt_data_end+0xfffe2f34>
   48280:	da002917 	ldw	r8,164(sp)
   48284:	df002915 	stw	fp,164(sp)
   48288:	9839883a 	mov	fp,r19
   4828c:	dcc02a03 	ldbu	r19,168(sp)
   48290:	e080080c 	andi	r2,fp,32
   48294:	dcc02785 	stb	r19,158(sp)
   48298:	1002f126 	beq	r2,zero,48e60 <___svfprintf_internal_r+0x1698>
   4829c:	d9402d17 	ldw	r5,180(sp)
   482a0:	d9003017 	ldw	r4,192(sp)
   482a4:	28800017 	ldw	r2,0(r5)
   482a8:	2007d7fa 	srai	r3,r4,31
   482ac:	29400104 	addi	r5,r5,4
   482b0:	d9402d15 	stw	r5,180(sp)
   482b4:	11000015 	stw	r4,0(r2)
   482b8:	10c00115 	stw	r3,4(r2)
   482bc:	003d6e06 	br	47878 <__alt_data_end+0xfffe2e88>
   482c0:	da002917 	ldw	r8,164(sp)
   482c4:	df002915 	stw	fp,164(sp)
   482c8:	9839883a 	mov	fp,r19
   482cc:	dcc02a03 	ldbu	r19,168(sp)
   482d0:	014001b4 	movhi	r5,6
   482d4:	2963ef04 	addi	r5,r5,-28740
   482d8:	dcc02785 	stb	r19,158(sp)
   482dc:	d9403b15 	stw	r5,236(sp)
   482e0:	e0c0080c 	andi	r3,fp,32
   482e4:	d8802d17 	ldw	r2,180(sp)
   482e8:	18005826 	beq	r3,zero,4844c <___svfprintf_internal_r+0xc84>
   482ec:	d9402d17 	ldw	r5,180(sp)
   482f0:	14800017 	ldw	r18,0(r2)
   482f4:	15400117 	ldw	r21,4(r2)
   482f8:	29400204 	addi	r5,r5,8
   482fc:	d9402d15 	stw	r5,180(sp)
   48300:	e080004c 	andi	r2,fp,1
   48304:	10020626 	beq	r2,zero,48b20 <___svfprintf_internal_r+0x1358>
   48308:	9546b03a 	or	r3,r18,r21
   4830c:	1802f326 	beq	r3,zero,48edc <___svfprintf_internal_r+0x1714>
   48310:	00800c04 	movi	r2,48
   48314:	d8802705 	stb	r2,156(sp)
   48318:	dc002745 	stb	r16,157(sp)
   4831c:	e7000094 	ori	fp,fp,2
   48320:	00800084 	movi	r2,2
   48324:	003f8d06 	br	4815c <__alt_data_end+0xfffe376c>
   48328:	d8c02d17 	ldw	r3,180(sp)
   4832c:	d9002d17 	ldw	r4,180(sp)
   48330:	da002917 	ldw	r8,164(sp)
   48334:	18800017 	ldw	r2,0(r3)
   48338:	21000104 	addi	r4,r4,4
   4833c:	00c00044 	movi	r3,1
   48340:	df002915 	stw	fp,164(sp)
   48344:	d8c02a15 	stw	r3,168(sp)
   48348:	9839883a 	mov	fp,r19
   4834c:	d8002785 	stb	zero,158(sp)
   48350:	d8801405 	stb	r2,80(sp)
   48354:	d9002d15 	stw	r4,180(sp)
   48358:	1823883a 	mov	r17,r3
   4835c:	d8c01404 	addi	r3,sp,80
   48360:	d8003215 	stw	zero,200(sp)
   48364:	d8003415 	stw	zero,208(sp)
   48368:	d8c03115 	stw	r3,196(sp)
   4836c:	0005883a 	mov	r2,zero
   48370:	003e5f06 	br	47cf0 <__alt_data_end+0xfffe3300>
   48374:	d8802a07 	ldb	r2,168(sp)
   48378:	1002c21e 	bne	r2,zero,48e84 <___svfprintf_internal_r+0x16bc>
   4837c:	00c00804 	movi	r3,32
   48380:	d8c02a05 	stb	r3,168(sp)
   48384:	e005883a 	mov	r2,fp
   48388:	e4000007 	ldb	r16,0(fp)
   4838c:	003d6506 	br	47924 <__alt_data_end+0xfffe2f34>
   48390:	9cc00054 	ori	r19,r19,1
   48394:	e005883a 	mov	r2,fp
   48398:	e4000007 	ldb	r16,0(fp)
   4839c:	003d6106 	br	47924 <__alt_data_end+0xfffe2f34>
   483a0:	d8c02d17 	ldw	r3,180(sp)
   483a4:	d9002d17 	ldw	r4,180(sp)
   483a8:	da002917 	ldw	r8,164(sp)
   483ac:	18c00017 	ldw	r3,0(r3)
   483b0:	df002915 	stw	fp,164(sp)
   483b4:	d8002785 	stb	zero,158(sp)
   483b8:	d8c03115 	stw	r3,196(sp)
   483bc:	9839883a 	mov	fp,r19
   483c0:	24800104 	addi	r18,r4,4
   483c4:	18043526 	beq	r3,zero,4949c <___svfprintf_internal_r+0x1cd4>
   483c8:	d9003117 	ldw	r4,196(sp)
   483cc:	4803e016 	blt	r9,zero,49350 <___svfprintf_internal_r+0x1b88>
   483d0:	480d883a 	mov	r6,r9
   483d4:	000b883a 	mov	r5,zero
   483d8:	da004015 	stw	r8,256(sp)
   483dc:	da403f15 	stw	r9,252(sp)
   483e0:	004e7d40 	call	4e7d4 <memchr>
   483e4:	da004017 	ldw	r8,256(sp)
   483e8:	da403f17 	ldw	r9,252(sp)
   483ec:	10045f26 	beq	r2,zero,4956c <___svfprintf_internal_r+0x1da4>
   483f0:	d8c03117 	ldw	r3,196(sp)
   483f4:	10e3c83a 	sub	r17,r2,r3
   483f8:	4c40010e 	bge	r9,r17,48400 <___svfprintf_internal_r+0xc38>
   483fc:	4823883a 	mov	r17,r9
   48400:	8805883a 	mov	r2,r17
   48404:	8803d716 	blt	r17,zero,49364 <___svfprintf_internal_r+0x1b9c>
   48408:	dcc02783 	ldbu	r19,158(sp)
   4840c:	d8802a15 	stw	r2,168(sp)
   48410:	dc802d15 	stw	r18,180(sp)
   48414:	d8003215 	stw	zero,200(sp)
   48418:	d8003415 	stw	zero,208(sp)
   4841c:	003e2d06 	br	47cd4 <__alt_data_end+0xfffe32e4>
   48420:	da002917 	ldw	r8,164(sp)
   48424:	df002915 	stw	fp,164(sp)
   48428:	9839883a 	mov	fp,r19
   4842c:	dcc02a03 	ldbu	r19,168(sp)
   48430:	010001b4 	movhi	r4,6
   48434:	2123f404 	addi	r4,r4,-28720
   48438:	d9003b15 	stw	r4,236(sp)
   4843c:	dcc02785 	stb	r19,158(sp)
   48440:	e0c0080c 	andi	r3,fp,32
   48444:	d8802d17 	ldw	r2,180(sp)
   48448:	183fa81e 	bne	r3,zero,482ec <__alt_data_end+0xfffe38fc>
   4844c:	e0c0040c 	andi	r3,fp,16
   48450:	18027126 	beq	r3,zero,48e18 <___svfprintf_internal_r+0x1650>
   48454:	d8c02d17 	ldw	r3,180(sp)
   48458:	14800017 	ldw	r18,0(r2)
   4845c:	002b883a 	mov	r21,zero
   48460:	18c00104 	addi	r3,r3,4
   48464:	d8c02d15 	stw	r3,180(sp)
   48468:	003fa506 	br	48300 <__alt_data_end+0xfffe3910>
   4846c:	9cc00814 	ori	r19,r19,32
   48470:	e005883a 	mov	r2,fp
   48474:	e4000007 	ldb	r16,0(fp)
   48478:	003d2a06 	br	47924 <__alt_data_end+0xfffe2f34>
   4847c:	d9002d17 	ldw	r4,180(sp)
   48480:	d9402d17 	ldw	r5,180(sp)
   48484:	21000017 	ldw	r4,0(r4)
   48488:	28c00104 	addi	r3,r5,4
   4848c:	d9002e15 	stw	r4,184(sp)
   48490:	2002e916 	blt	r4,zero,49038 <___svfprintf_internal_r+0x1870>
   48494:	d8c02d15 	stw	r3,180(sp)
   48498:	e005883a 	mov	r2,fp
   4849c:	e4000007 	ldb	r16,0(fp)
   484a0:	003d2006 	br	47924 <__alt_data_end+0xfffe2f34>
   484a4:	00c00ac4 	movi	r3,43
   484a8:	d8c02a05 	stb	r3,168(sp)
   484ac:	e005883a 	mov	r2,fp
   484b0:	e4000007 	ldb	r16,0(fp)
   484b4:	003d1b06 	br	47924 <__alt_data_end+0xfffe2f34>
   484b8:	da002917 	ldw	r8,164(sp)
   484bc:	df002915 	stw	fp,164(sp)
   484c0:	9839883a 	mov	fp,r19
   484c4:	e080080c 	andi	r2,fp,32
   484c8:	103f2d1e 	bne	r2,zero,48180 <__alt_data_end+0xfffe3790>
   484cc:	e080040c 	andi	r2,fp,16
   484d0:	10027826 	beq	r2,zero,48eb4 <___svfprintf_internal_r+0x16ec>
   484d4:	d9402d17 	ldw	r5,180(sp)
   484d8:	002b883a 	mov	r21,zero
   484dc:	00800044 	movi	r2,1
   484e0:	2c800017 	ldw	r18,0(r5)
   484e4:	29400104 	addi	r5,r5,4
   484e8:	d9402d15 	stw	r5,180(sp)
   484ec:	9007883a 	mov	r3,r18
   484f0:	003f1a06 	br	4815c <__alt_data_end+0xfffe376c>
   484f4:	da002917 	ldw	r8,164(sp)
   484f8:	df002915 	stw	fp,164(sp)
   484fc:	9839883a 	mov	fp,r19
   48500:	e080080c 	andi	r2,fp,32
   48504:	103f0e1e 	bne	r2,zero,48140 <__alt_data_end+0xfffe3750>
   48508:	e080040c 	andi	r2,fp,16
   4850c:	10024a26 	beq	r2,zero,48e38 <___svfprintf_internal_r+0x1670>
   48510:	d8802d17 	ldw	r2,180(sp)
   48514:	002b883a 	mov	r21,zero
   48518:	14800017 	ldw	r18,0(r2)
   4851c:	10800104 	addi	r2,r2,4
   48520:	d8802d15 	stw	r2,180(sp)
   48524:	9007883a 	mov	r3,r18
   48528:	0005883a 	mov	r2,zero
   4852c:	003f0b06 	br	4815c <__alt_data_end+0xfffe376c>
   48530:	da002917 	ldw	r8,164(sp)
   48534:	df002915 	stw	fp,164(sp)
   48538:	9839883a 	mov	fp,r19
   4853c:	dcc02a03 	ldbu	r19,168(sp)
   48540:	dcc02785 	stb	r19,158(sp)
   48544:	803d6326 	beq	r16,zero,47ad4 <__alt_data_end+0xfffe30e4>
   48548:	00c00044 	movi	r3,1
   4854c:	d8c02a15 	stw	r3,168(sp)
   48550:	dc001405 	stb	r16,80(sp)
   48554:	d8002785 	stb	zero,158(sp)
   48558:	003f7f06 	br	48358 <__alt_data_end+0xfffe3968>
   4855c:	d8c02017 	ldw	r3,128(sp)
   48560:	003e2406 	br	47df4 <__alt_data_end+0xfffe3404>
   48564:	10803fcc 	andi	r2,r2,255
   48568:	00c00044 	movi	r3,1
   4856c:	10fdba1e 	bne	r2,r3,47c58 <__alt_data_end+0xfffe3268>
   48570:	a800021e 	bne	r21,zero,4857c <___svfprintf_internal_r+0xdb4>
   48574:	00800244 	movi	r2,9
   48578:	14801d2e 	bgeu	r2,r18,485f0 <___svfprintf_internal_r+0xe28>
   4857c:	dc002a15 	stw	r16,168(sp)
   48580:	b823883a 	mov	r17,r23
   48584:	9021883a 	mov	r16,r18
   48588:	da002b15 	stw	r8,172(sp)
   4858c:	a825883a 	mov	r18,r21
   48590:	482b883a 	mov	r21,r9
   48594:	8009883a 	mov	r4,r16
   48598:	900b883a 	mov	r5,r18
   4859c:	01800284 	movi	r6,10
   485a0:	000f883a 	mov	r7,zero
   485a4:	0053b980 	call	53b98 <__umoddi3>
   485a8:	10800c04 	addi	r2,r2,48
   485ac:	8c7fffc4 	addi	r17,r17,-1
   485b0:	8009883a 	mov	r4,r16
   485b4:	900b883a 	mov	r5,r18
   485b8:	01800284 	movi	r6,10
   485bc:	000f883a 	mov	r7,zero
   485c0:	88800005 	stb	r2,0(r17)
   485c4:	00535580 	call	53558 <__udivdi3>
   485c8:	1021883a 	mov	r16,r2
   485cc:	10c4b03a 	or	r2,r2,r3
   485d0:	1825883a 	mov	r18,r3
   485d4:	103fef1e 	bne	r2,zero,48594 <__alt_data_end+0xfffe3ba4>
   485d8:	dc403115 	stw	r17,196(sp)
   485dc:	dc002a17 	ldw	r16,168(sp)
   485e0:	da002b17 	ldw	r8,172(sp)
   485e4:	a813883a 	mov	r9,r21
   485e8:	bc63c83a 	sub	r17,r23,r17
   485ec:	003db406 	br	47cc0 <__alt_data_end+0xfffe32d0>
   485f0:	94800c04 	addi	r18,r18,48
   485f4:	d8c01dc4 	addi	r3,sp,119
   485f8:	dc801dc5 	stb	r18,119(sp)
   485fc:	dc403d17 	ldw	r17,244(sp)
   48600:	d8c03115 	stw	r3,196(sp)
   48604:	003dae06 	br	47cc0 <__alt_data_end+0xfffe32d0>
   48608:	00801944 	movi	r2,101
   4860c:	14008c0e 	bge	r2,r16,48840 <___svfprintf_internal_r+0x1078>
   48610:	d9003717 	ldw	r4,220(sp)
   48614:	d9403817 	ldw	r5,224(sp)
   48618:	000d883a 	mov	r6,zero
   4861c:	000f883a 	mov	r7,zero
   48620:	d8c03e15 	stw	r3,248(sp)
   48624:	da004015 	stw	r8,256(sp)
   48628:	0054a500 	call	54a50 <__eqdf2>
   4862c:	d8c03e17 	ldw	r3,248(sp)
   48630:	da004017 	ldw	r8,256(sp)
   48634:	1000fc1e 	bne	r2,zero,48a28 <___svfprintf_internal_r+0x1260>
   48638:	d8801f17 	ldw	r2,124(sp)
   4863c:	010001b4 	movhi	r4,6
   48640:	2123fb04 	addi	r4,r4,-28692
   48644:	18c00044 	addi	r3,r3,1
   48648:	10800044 	addi	r2,r2,1
   4864c:	41000015 	stw	r4,0(r8)
   48650:	01000044 	movi	r4,1
   48654:	41000115 	stw	r4,4(r8)
   48658:	d8c02015 	stw	r3,128(sp)
   4865c:	d8801f15 	stw	r2,124(sp)
   48660:	010001c4 	movi	r4,7
   48664:	20823116 	blt	r4,r2,48f2c <___svfprintf_internal_r+0x1764>
   48668:	42000204 	addi	r8,r8,8
   4866c:	d8802617 	ldw	r2,152(sp)
   48670:	d9403317 	ldw	r5,204(sp)
   48674:	11400216 	blt	r2,r5,48680 <___svfprintf_internal_r+0xeb8>
   48678:	e080004c 	andi	r2,fp,1
   4867c:	103e3a26 	beq	r2,zero,47f68 <__alt_data_end+0xfffe3578>
   48680:	d8803917 	ldw	r2,228(sp)
   48684:	d9003517 	ldw	r4,212(sp)
   48688:	d9403917 	ldw	r5,228(sp)
   4868c:	1887883a 	add	r3,r3,r2
   48690:	d8801f17 	ldw	r2,124(sp)
   48694:	41000015 	stw	r4,0(r8)
   48698:	41400115 	stw	r5,4(r8)
   4869c:	10800044 	addi	r2,r2,1
   486a0:	d8c02015 	stw	r3,128(sp)
   486a4:	d8801f15 	stw	r2,124(sp)
   486a8:	010001c4 	movi	r4,7
   486ac:	20826c16 	blt	r4,r2,49060 <___svfprintf_internal_r+0x1898>
   486b0:	42000204 	addi	r8,r8,8
   486b4:	d8803317 	ldw	r2,204(sp)
   486b8:	143fffc4 	addi	r16,r2,-1
   486bc:	043e2a0e 	bge	zero,r16,47f68 <__alt_data_end+0xfffe3578>
   486c0:	04400404 	movi	r17,16
   486c4:	d8801f17 	ldw	r2,124(sp)
   486c8:	8c00980e 	bge	r17,r16,4892c <___svfprintf_internal_r+0x1164>
   486cc:	014001b4 	movhi	r5,6
   486d0:	2963fb84 	addi	r5,r5,-28690
   486d4:	d9402b15 	stw	r5,172(sp)
   486d8:	04c001c4 	movi	r19,7
   486dc:	dc802f17 	ldw	r18,188(sp)
   486e0:	00000306 	br	486f0 <___svfprintf_internal_r+0xf28>
   486e4:	42000204 	addi	r8,r8,8
   486e8:	843ffc04 	addi	r16,r16,-16
   486ec:	8c00920e 	bge	r17,r16,48938 <___svfprintf_internal_r+0x1170>
   486f0:	18c00404 	addi	r3,r3,16
   486f4:	10800044 	addi	r2,r2,1
   486f8:	45000015 	stw	r20,0(r8)
   486fc:	44400115 	stw	r17,4(r8)
   48700:	d8c02015 	stw	r3,128(sp)
   48704:	d8801f15 	stw	r2,124(sp)
   48708:	98bff60e 	bge	r19,r2,486e4 <__alt_data_end+0xfffe3cf4>
   4870c:	9009883a 	mov	r4,r18
   48710:	b00b883a 	mov	r5,r22
   48714:	b80d883a 	mov	r6,r23
   48718:	00503180 	call	50318 <__ssprint_r>
   4871c:	103cf31e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   48720:	d8c02017 	ldw	r3,128(sp)
   48724:	d8801f17 	ldw	r2,124(sp)
   48728:	da000404 	addi	r8,sp,16
   4872c:	003fee06 	br	486e8 <__alt_data_end+0xfffe3cf8>
   48730:	d9402e17 	ldw	r5,184(sp)
   48734:	d8802a17 	ldw	r2,168(sp)
   48738:	28a7c83a 	sub	r19,r5,r2
   4873c:	04fdcb0e 	bge	zero,r19,47e6c <__alt_data_end+0xfffe347c>
   48740:	05400404 	movi	r21,16
   48744:	d8801f17 	ldw	r2,124(sp)
   48748:	acc3840e 	bge	r21,r19,4955c <___svfprintf_internal_r+0x1d94>
   4874c:	014001b4 	movhi	r5,6
   48750:	9809883a 	mov	r4,r19
   48754:	2963fb84 	addi	r5,r5,-28690
   48758:	dc002c15 	stw	r16,176(sp)
   4875c:	8827883a 	mov	r19,r17
   48760:	d9402b15 	stw	r5,172(sp)
   48764:	048001c4 	movi	r18,7
   48768:	dc002f17 	ldw	r16,188(sp)
   4876c:	2023883a 	mov	r17,r4
   48770:	00000306 	br	48780 <___svfprintf_internal_r+0xfb8>
   48774:	8c7ffc04 	addi	r17,r17,-16
   48778:	42000204 	addi	r8,r8,8
   4877c:	ac40110e 	bge	r21,r17,487c4 <___svfprintf_internal_r+0xffc>
   48780:	18c00404 	addi	r3,r3,16
   48784:	10800044 	addi	r2,r2,1
   48788:	45000015 	stw	r20,0(r8)
   4878c:	45400115 	stw	r21,4(r8)
   48790:	d8c02015 	stw	r3,128(sp)
   48794:	d8801f15 	stw	r2,124(sp)
   48798:	90bff60e 	bge	r18,r2,48774 <__alt_data_end+0xfffe3d84>
   4879c:	8009883a 	mov	r4,r16
   487a0:	b00b883a 	mov	r5,r22
   487a4:	b80d883a 	mov	r6,r23
   487a8:	00503180 	call	50318 <__ssprint_r>
   487ac:	103ccf1e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   487b0:	8c7ffc04 	addi	r17,r17,-16
   487b4:	d8c02017 	ldw	r3,128(sp)
   487b8:	d8801f17 	ldw	r2,124(sp)
   487bc:	da000404 	addi	r8,sp,16
   487c0:	ac7fef16 	blt	r21,r17,48780 <__alt_data_end+0xfffe3d90>
   487c4:	dc002c17 	ldw	r16,176(sp)
   487c8:	8809883a 	mov	r4,r17
   487cc:	9823883a 	mov	r17,r19
   487d0:	2027883a 	mov	r19,r4
   487d4:	d9002b17 	ldw	r4,172(sp)
   487d8:	1cc7883a 	add	r3,r3,r19
   487dc:	10800044 	addi	r2,r2,1
   487e0:	41000015 	stw	r4,0(r8)
   487e4:	44c00115 	stw	r19,4(r8)
   487e8:	d8c02015 	stw	r3,128(sp)
   487ec:	d8801f15 	stw	r2,124(sp)
   487f0:	010001c4 	movi	r4,7
   487f4:	20816b16 	blt	r4,r2,48da4 <___svfprintf_internal_r+0x15dc>
   487f8:	42000204 	addi	r8,r8,8
   487fc:	003d9b06 	br	47e6c <__alt_data_end+0xfffe347c>
   48800:	d9403b17 	ldw	r5,236(sp)
   48804:	b807883a 	mov	r3,r23
   48808:	908003cc 	andi	r2,r18,15
   4880c:	a808973a 	slli	r4,r21,28
   48810:	2885883a 	add	r2,r5,r2
   48814:	9024d13a 	srli	r18,r18,4
   48818:	10800003 	ldbu	r2,0(r2)
   4881c:	a82ad13a 	srli	r21,r21,4
   48820:	18ffffc4 	addi	r3,r3,-1
   48824:	24a4b03a 	or	r18,r4,r18
   48828:	18800005 	stb	r2,0(r3)
   4882c:	9544b03a 	or	r2,r18,r21
   48830:	103ff51e 	bne	r2,zero,48808 <__alt_data_end+0xfffe3e18>
   48834:	d8c03115 	stw	r3,196(sp)
   48838:	b8e3c83a 	sub	r17,r23,r3
   4883c:	003d2006 	br	47cc0 <__alt_data_end+0xfffe32d0>
   48840:	d9403317 	ldw	r5,204(sp)
   48844:	00800044 	movi	r2,1
   48848:	18c00044 	addi	r3,r3,1
   4884c:	1141360e 	bge	r2,r5,48d28 <___svfprintf_internal_r+0x1560>
   48850:	dc001f17 	ldw	r16,124(sp)
   48854:	d8803117 	ldw	r2,196(sp)
   48858:	d8c02015 	stw	r3,128(sp)
   4885c:	84000044 	addi	r16,r16,1
   48860:	40800015 	stw	r2,0(r8)
   48864:	00800044 	movi	r2,1
   48868:	40800115 	stw	r2,4(r8)
   4886c:	dc001f15 	stw	r16,124(sp)
   48870:	008001c4 	movi	r2,7
   48874:	14013916 	blt	r2,r16,48d5c <___svfprintf_internal_r+0x1594>
   48878:	42000204 	addi	r8,r8,8
   4887c:	d9003917 	ldw	r4,228(sp)
   48880:	d9403517 	ldw	r5,212(sp)
   48884:	84000044 	addi	r16,r16,1
   48888:	1907883a 	add	r3,r3,r4
   4888c:	41400015 	stw	r5,0(r8)
   48890:	41000115 	stw	r4,4(r8)
   48894:	d8c02015 	stw	r3,128(sp)
   48898:	dc001f15 	stw	r16,124(sp)
   4889c:	008001c4 	movi	r2,7
   488a0:	14013716 	blt	r2,r16,48d80 <___svfprintf_internal_r+0x15b8>
   488a4:	44400204 	addi	r17,r8,8
   488a8:	d9003717 	ldw	r4,220(sp)
   488ac:	d9403817 	ldw	r5,224(sp)
   488b0:	000d883a 	mov	r6,zero
   488b4:	000f883a 	mov	r7,zero
   488b8:	d8c03e15 	stw	r3,248(sp)
   488bc:	0054a500 	call	54a50 <__eqdf2>
   488c0:	d8c03e17 	ldw	r3,248(sp)
   488c4:	10009926 	beq	r2,zero,48b2c <___svfprintf_internal_r+0x1364>
   488c8:	d9003317 	ldw	r4,204(sp)
   488cc:	d9403117 	ldw	r5,196(sp)
   488d0:	84000044 	addi	r16,r16,1
   488d4:	20bfffc4 	addi	r2,r4,-1
   488d8:	1887883a 	add	r3,r3,r2
   488dc:	29000044 	addi	r4,r5,1
   488e0:	88800115 	stw	r2,4(r17)
   488e4:	89000015 	stw	r4,0(r17)
   488e8:	d8c02015 	stw	r3,128(sp)
   488ec:	dc001f15 	stw	r16,124(sp)
   488f0:	008001c4 	movi	r2,7
   488f4:	1400b716 	blt	r2,r16,48bd4 <___svfprintf_internal_r+0x140c>
   488f8:	8c400204 	addi	r17,r17,8
   488fc:	d9403a17 	ldw	r5,232(sp)
   48900:	dcc022c4 	addi	r19,sp,139
   48904:	84000044 	addi	r16,r16,1
   48908:	28c7883a 	add	r3,r5,r3
   4890c:	8cc00015 	stw	r19,0(r17)
   48910:	89400115 	stw	r5,4(r17)
   48914:	d8c02015 	stw	r3,128(sp)
   48918:	dc001f15 	stw	r16,124(sp)
   4891c:	008001c4 	movi	r2,7
   48920:	14000e16 	blt	r2,r16,4895c <___svfprintf_internal_r+0x1194>
   48924:	8a000204 	addi	r8,r17,8
   48928:	003d8f06 	br	47f68 <__alt_data_end+0xfffe3578>
   4892c:	010001b4 	movhi	r4,6
   48930:	2123fb84 	addi	r4,r4,-28690
   48934:	d9002b15 	stw	r4,172(sp)
   48938:	d9002b17 	ldw	r4,172(sp)
   4893c:	1c07883a 	add	r3,r3,r16
   48940:	44000115 	stw	r16,4(r8)
   48944:	41000015 	stw	r4,0(r8)
   48948:	10800044 	addi	r2,r2,1
   4894c:	d8c02015 	stw	r3,128(sp)
   48950:	d8801f15 	stw	r2,124(sp)
   48954:	010001c4 	movi	r4,7
   48958:	20bd820e 	bge	r4,r2,47f64 <__alt_data_end+0xfffe3574>
   4895c:	d9002f17 	ldw	r4,188(sp)
   48960:	b00b883a 	mov	r5,r22
   48964:	b80d883a 	mov	r6,r23
   48968:	00503180 	call	50318 <__ssprint_r>
   4896c:	103c5f1e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   48970:	d8c02017 	ldw	r3,128(sp)
   48974:	da000404 	addi	r8,sp,16
   48978:	003d7b06 	br	47f68 <__alt_data_end+0xfffe3578>
   4897c:	d9002f17 	ldw	r4,188(sp)
   48980:	b00b883a 	mov	r5,r22
   48984:	b80d883a 	mov	r6,r23
   48988:	00503180 	call	50318 <__ssprint_r>
   4898c:	103db226 	beq	r2,zero,48058 <__alt_data_end+0xfffe3668>
   48990:	003c5606 	br	47aec <__alt_data_end+0xfffe30fc>
   48994:	10803fcc 	andi	r2,r2,255
   48998:	1000201e 	bne	r2,zero,48a1c <___svfprintf_internal_r+0x1254>
   4899c:	e080004c 	andi	r2,fp,1
   489a0:	10001e26 	beq	r2,zero,48a1c <___svfprintf_internal_r+0x1254>
   489a4:	00800c04 	movi	r2,48
   489a8:	d8c01dc4 	addi	r3,sp,119
   489ac:	d8801dc5 	stb	r2,119(sp)
   489b0:	dc403d17 	ldw	r17,244(sp)
   489b4:	d8c03115 	stw	r3,196(sp)
   489b8:	003cc106 	br	47cc0 <__alt_data_end+0xfffe32d0>
   489bc:	d9002f17 	ldw	r4,188(sp)
   489c0:	b00b883a 	mov	r5,r22
   489c4:	b80d883a 	mov	r6,r23
   489c8:	00503180 	call	50318 <__ssprint_r>
   489cc:	103c471e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   489d0:	d8c02017 	ldw	r3,128(sp)
   489d4:	da000404 	addi	r8,sp,16
   489d8:	003d5606 	br	47f34 <__alt_data_end+0xfffe3544>
   489dc:	d9002f17 	ldw	r4,188(sp)
   489e0:	b00b883a 	mov	r5,r22
   489e4:	b80d883a 	mov	r6,r23
   489e8:	00503180 	call	50318 <__ssprint_r>
   489ec:	103c3f1e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   489f0:	d8c02017 	ldw	r3,128(sp)
   489f4:	da000404 	addi	r8,sp,16
   489f8:	003d0b06 	br	47e28 <__alt_data_end+0xfffe3438>
   489fc:	d9002f17 	ldw	r4,188(sp)
   48a00:	b00b883a 	mov	r5,r22
   48a04:	b80d883a 	mov	r6,r23
   48a08:	00503180 	call	50318 <__ssprint_r>
   48a0c:	103c371e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   48a10:	d8c02017 	ldw	r3,128(sp)
   48a14:	da000404 	addi	r8,sp,16
   48a18:	003d1106 	br	47e60 <__alt_data_end+0xfffe3470>
   48a1c:	0023883a 	mov	r17,zero
   48a20:	ddc03115 	stw	r23,196(sp)
   48a24:	003ca606 	br	47cc0 <__alt_data_end+0xfffe32d0>
   48a28:	dc002617 	ldw	r16,152(sp)
   48a2c:	0401470e 	bge	zero,r16,48f4c <___svfprintf_internal_r+0x1784>
   48a30:	d8803317 	ldw	r2,204(sp)
   48a34:	d9403117 	ldw	r5,196(sp)
   48a38:	d9003417 	ldw	r4,208(sp)
   48a3c:	1023883a 	mov	r17,r2
   48a40:	28a1883a 	add	r16,r5,r2
   48a44:	2080010e 	bge	r4,r2,48a4c <___svfprintf_internal_r+0x1284>
   48a48:	2023883a 	mov	r17,r4
   48a4c:	04400b0e 	bge	zero,r17,48a7c <___svfprintf_internal_r+0x12b4>
   48a50:	d8801f17 	ldw	r2,124(sp)
   48a54:	d9403117 	ldw	r5,196(sp)
   48a58:	1c47883a 	add	r3,r3,r17
   48a5c:	10800044 	addi	r2,r2,1
   48a60:	41400015 	stw	r5,0(r8)
   48a64:	44400115 	stw	r17,4(r8)
   48a68:	d8c02015 	stw	r3,128(sp)
   48a6c:	d8801f15 	stw	r2,124(sp)
   48a70:	010001c4 	movi	r4,7
   48a74:	20825f16 	blt	r4,r2,493f4 <___svfprintf_internal_r+0x1c2c>
   48a78:	42000204 	addi	r8,r8,8
   48a7c:	88025b16 	blt	r17,zero,493ec <___svfprintf_internal_r+0x1c24>
   48a80:	d8803417 	ldw	r2,208(sp)
   48a84:	1463c83a 	sub	r17,r2,r17
   48a88:	0440620e 	bge	zero,r17,48c14 <___svfprintf_internal_r+0x144c>
   48a8c:	04c00404 	movi	r19,16
   48a90:	d8801f17 	ldw	r2,124(sp)
   48a94:	9c41130e 	bge	r19,r17,48ee4 <___svfprintf_internal_r+0x171c>
   48a98:	014001b4 	movhi	r5,6
   48a9c:	2963fb84 	addi	r5,r5,-28690
   48aa0:	d9402b15 	stw	r5,172(sp)
   48aa4:	054001c4 	movi	r21,7
   48aa8:	dc802f17 	ldw	r18,188(sp)
   48aac:	00000306 	br	48abc <___svfprintf_internal_r+0x12f4>
   48ab0:	42000204 	addi	r8,r8,8
   48ab4:	8c7ffc04 	addi	r17,r17,-16
   48ab8:	9c410d0e 	bge	r19,r17,48ef0 <___svfprintf_internal_r+0x1728>
   48abc:	18c00404 	addi	r3,r3,16
   48ac0:	10800044 	addi	r2,r2,1
   48ac4:	45000015 	stw	r20,0(r8)
   48ac8:	44c00115 	stw	r19,4(r8)
   48acc:	d8c02015 	stw	r3,128(sp)
   48ad0:	d8801f15 	stw	r2,124(sp)
   48ad4:	a8bff60e 	bge	r21,r2,48ab0 <__alt_data_end+0xfffe40c0>
   48ad8:	9009883a 	mov	r4,r18
   48adc:	b00b883a 	mov	r5,r22
   48ae0:	b80d883a 	mov	r6,r23
   48ae4:	00503180 	call	50318 <__ssprint_r>
   48ae8:	103c001e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   48aec:	d8c02017 	ldw	r3,128(sp)
   48af0:	d8801f17 	ldw	r2,124(sp)
   48af4:	da000404 	addi	r8,sp,16
   48af8:	003fee06 	br	48ab4 <__alt_data_end+0xfffe40c4>
   48afc:	d9002f17 	ldw	r4,188(sp)
   48b00:	b00b883a 	mov	r5,r22
   48b04:	b80d883a 	mov	r6,r23
   48b08:	00503180 	call	50318 <__ssprint_r>
   48b0c:	103bf71e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   48b10:	d8c02017 	ldw	r3,128(sp)
   48b14:	d8802787 	ldb	r2,158(sp)
   48b18:	da000404 	addi	r8,sp,16
   48b1c:	003cb506 	br	47df4 <__alt_data_end+0xfffe3404>
   48b20:	00800084 	movi	r2,2
   48b24:	9546b03a 	or	r3,r18,r21
   48b28:	003d8c06 	br	4815c <__alt_data_end+0xfffe376c>
   48b2c:	d8803317 	ldw	r2,204(sp)
   48b30:	14ffffc4 	addi	r19,r2,-1
   48b34:	04ff710e 	bge	zero,r19,488fc <__alt_data_end+0xfffe3f0c>
   48b38:	05400404 	movi	r21,16
   48b3c:	acc2f80e 	bge	r21,r19,49720 <___svfprintf_internal_r+0x1f58>
   48b40:	014001b4 	movhi	r5,6
   48b44:	2963fb84 	addi	r5,r5,-28690
   48b48:	d9402b15 	stw	r5,172(sp)
   48b4c:	01c001c4 	movi	r7,7
   48b50:	dc802f17 	ldw	r18,188(sp)
   48b54:	00000306 	br	48b64 <___svfprintf_internal_r+0x139c>
   48b58:	9cfffc04 	addi	r19,r19,-16
   48b5c:	8c400204 	addi	r17,r17,8
   48b60:	acc0130e 	bge	r21,r19,48bb0 <___svfprintf_internal_r+0x13e8>
   48b64:	18c00404 	addi	r3,r3,16
   48b68:	84000044 	addi	r16,r16,1
   48b6c:	8d000015 	stw	r20,0(r17)
   48b70:	8d400115 	stw	r21,4(r17)
   48b74:	d8c02015 	stw	r3,128(sp)
   48b78:	dc001f15 	stw	r16,124(sp)
   48b7c:	3c3ff60e 	bge	r7,r16,48b58 <__alt_data_end+0xfffe4168>
   48b80:	9009883a 	mov	r4,r18
   48b84:	b00b883a 	mov	r5,r22
   48b88:	b80d883a 	mov	r6,r23
   48b8c:	d9c03e15 	stw	r7,248(sp)
   48b90:	00503180 	call	50318 <__ssprint_r>
   48b94:	d9c03e17 	ldw	r7,248(sp)
   48b98:	103bd41e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   48b9c:	9cfffc04 	addi	r19,r19,-16
   48ba0:	d8c02017 	ldw	r3,128(sp)
   48ba4:	dc001f17 	ldw	r16,124(sp)
   48ba8:	dc400404 	addi	r17,sp,16
   48bac:	acffed16 	blt	r21,r19,48b64 <__alt_data_end+0xfffe4174>
   48bb0:	d8802b17 	ldw	r2,172(sp)
   48bb4:	1cc7883a 	add	r3,r3,r19
   48bb8:	84000044 	addi	r16,r16,1
   48bbc:	88800015 	stw	r2,0(r17)
   48bc0:	8cc00115 	stw	r19,4(r17)
   48bc4:	d8c02015 	stw	r3,128(sp)
   48bc8:	dc001f15 	stw	r16,124(sp)
   48bcc:	008001c4 	movi	r2,7
   48bd0:	143f490e 	bge	r2,r16,488f8 <__alt_data_end+0xfffe3f08>
   48bd4:	d9002f17 	ldw	r4,188(sp)
   48bd8:	b00b883a 	mov	r5,r22
   48bdc:	b80d883a 	mov	r6,r23
   48be0:	00503180 	call	50318 <__ssprint_r>
   48be4:	103bc11e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   48be8:	d8c02017 	ldw	r3,128(sp)
   48bec:	dc001f17 	ldw	r16,124(sp)
   48bf0:	dc400404 	addi	r17,sp,16
   48bf4:	003f4106 	br	488fc <__alt_data_end+0xfffe3f0c>
   48bf8:	d9002f17 	ldw	r4,188(sp)
   48bfc:	b00b883a 	mov	r5,r22
   48c00:	b80d883a 	mov	r6,r23
   48c04:	00503180 	call	50318 <__ssprint_r>
   48c08:	103bb81e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   48c0c:	d8c02017 	ldw	r3,128(sp)
   48c10:	da000404 	addi	r8,sp,16
   48c14:	d9403117 	ldw	r5,196(sp)
   48c18:	d9003417 	ldw	r4,208(sp)
   48c1c:	d8802617 	ldw	r2,152(sp)
   48c20:	2923883a 	add	r17,r5,r4
   48c24:	d9403317 	ldw	r5,204(sp)
   48c28:	11400216 	blt	r2,r5,48c34 <___svfprintf_internal_r+0x146c>
   48c2c:	e100004c 	andi	r4,fp,1
   48c30:	20000d26 	beq	r4,zero,48c68 <___svfprintf_internal_r+0x14a0>
   48c34:	d9003917 	ldw	r4,228(sp)
   48c38:	d9403517 	ldw	r5,212(sp)
   48c3c:	1907883a 	add	r3,r3,r4
   48c40:	d9001f17 	ldw	r4,124(sp)
   48c44:	41400015 	stw	r5,0(r8)
   48c48:	d9403917 	ldw	r5,228(sp)
   48c4c:	21000044 	addi	r4,r4,1
   48c50:	d8c02015 	stw	r3,128(sp)
   48c54:	41400115 	stw	r5,4(r8)
   48c58:	d9001f15 	stw	r4,124(sp)
   48c5c:	014001c4 	movi	r5,7
   48c60:	2901ec16 	blt	r5,r4,49414 <___svfprintf_internal_r+0x1c4c>
   48c64:	42000204 	addi	r8,r8,8
   48c68:	d9003317 	ldw	r4,204(sp)
   48c6c:	2085c83a 	sub	r2,r4,r2
   48c70:	8449c83a 	sub	r4,r16,r17
   48c74:	1021883a 	mov	r16,r2
   48c78:	2080010e 	bge	r4,r2,48c80 <___svfprintf_internal_r+0x14b8>
   48c7c:	2021883a 	mov	r16,r4
   48c80:	04000a0e 	bge	zero,r16,48cac <___svfprintf_internal_r+0x14e4>
   48c84:	d9001f17 	ldw	r4,124(sp)
   48c88:	1c07883a 	add	r3,r3,r16
   48c8c:	44400015 	stw	r17,0(r8)
   48c90:	21000044 	addi	r4,r4,1
   48c94:	44000115 	stw	r16,4(r8)
   48c98:	d8c02015 	stw	r3,128(sp)
   48c9c:	d9001f15 	stw	r4,124(sp)
   48ca0:	014001c4 	movi	r5,7
   48ca4:	2901f216 	blt	r5,r4,49470 <___svfprintf_internal_r+0x1ca8>
   48ca8:	42000204 	addi	r8,r8,8
   48cac:	80020a16 	blt	r16,zero,494d8 <___svfprintf_internal_r+0x1d10>
   48cb0:	1421c83a 	sub	r16,r2,r16
   48cb4:	043cac0e 	bge	zero,r16,47f68 <__alt_data_end+0xfffe3578>
   48cb8:	04400404 	movi	r17,16
   48cbc:	d8801f17 	ldw	r2,124(sp)
   48cc0:	8c3f1a0e 	bge	r17,r16,4892c <__alt_data_end+0xfffe3f3c>
   48cc4:	014001b4 	movhi	r5,6
   48cc8:	2963fb84 	addi	r5,r5,-28690
   48ccc:	d9402b15 	stw	r5,172(sp)
   48cd0:	04c001c4 	movi	r19,7
   48cd4:	dc802f17 	ldw	r18,188(sp)
   48cd8:	00000306 	br	48ce8 <___svfprintf_internal_r+0x1520>
   48cdc:	42000204 	addi	r8,r8,8
   48ce0:	843ffc04 	addi	r16,r16,-16
   48ce4:	8c3f140e 	bge	r17,r16,48938 <__alt_data_end+0xfffe3f48>
   48ce8:	18c00404 	addi	r3,r3,16
   48cec:	10800044 	addi	r2,r2,1
   48cf0:	45000015 	stw	r20,0(r8)
   48cf4:	44400115 	stw	r17,4(r8)
   48cf8:	d8c02015 	stw	r3,128(sp)
   48cfc:	d8801f15 	stw	r2,124(sp)
   48d00:	98bff60e 	bge	r19,r2,48cdc <__alt_data_end+0xfffe42ec>
   48d04:	9009883a 	mov	r4,r18
   48d08:	b00b883a 	mov	r5,r22
   48d0c:	b80d883a 	mov	r6,r23
   48d10:	00503180 	call	50318 <__ssprint_r>
   48d14:	103b751e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   48d18:	d8c02017 	ldw	r3,128(sp)
   48d1c:	d8801f17 	ldw	r2,124(sp)
   48d20:	da000404 	addi	r8,sp,16
   48d24:	003fee06 	br	48ce0 <__alt_data_end+0xfffe42f0>
   48d28:	e088703a 	and	r4,fp,r2
   48d2c:	203ec81e 	bne	r4,zero,48850 <__alt_data_end+0xfffe3e60>
   48d30:	dc001f17 	ldw	r16,124(sp)
   48d34:	d9003117 	ldw	r4,196(sp)
   48d38:	40800115 	stw	r2,4(r8)
   48d3c:	84000044 	addi	r16,r16,1
   48d40:	41000015 	stw	r4,0(r8)
   48d44:	d8c02015 	stw	r3,128(sp)
   48d48:	dc001f15 	stw	r16,124(sp)
   48d4c:	008001c4 	movi	r2,7
   48d50:	143fa016 	blt	r2,r16,48bd4 <__alt_data_end+0xfffe41e4>
   48d54:	44400204 	addi	r17,r8,8
   48d58:	003ee806 	br	488fc <__alt_data_end+0xfffe3f0c>
   48d5c:	d9002f17 	ldw	r4,188(sp)
   48d60:	b00b883a 	mov	r5,r22
   48d64:	b80d883a 	mov	r6,r23
   48d68:	00503180 	call	50318 <__ssprint_r>
   48d6c:	103b5f1e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   48d70:	d8c02017 	ldw	r3,128(sp)
   48d74:	dc001f17 	ldw	r16,124(sp)
   48d78:	da000404 	addi	r8,sp,16
   48d7c:	003ebf06 	br	4887c <__alt_data_end+0xfffe3e8c>
   48d80:	d9002f17 	ldw	r4,188(sp)
   48d84:	b00b883a 	mov	r5,r22
   48d88:	b80d883a 	mov	r6,r23
   48d8c:	00503180 	call	50318 <__ssprint_r>
   48d90:	103b561e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   48d94:	d8c02017 	ldw	r3,128(sp)
   48d98:	dc001f17 	ldw	r16,124(sp)
   48d9c:	dc400404 	addi	r17,sp,16
   48da0:	003ec106 	br	488a8 <__alt_data_end+0xfffe3eb8>
   48da4:	d9002f17 	ldw	r4,188(sp)
   48da8:	b00b883a 	mov	r5,r22
   48dac:	b80d883a 	mov	r6,r23
   48db0:	00503180 	call	50318 <__ssprint_r>
   48db4:	103b4d1e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   48db8:	d8c02017 	ldw	r3,128(sp)
   48dbc:	da000404 	addi	r8,sp,16
   48dc0:	003c2a06 	br	47e6c <__alt_data_end+0xfffe347c>
   48dc4:	da004015 	stw	r8,256(sp)
   48dc8:	da403f15 	stw	r9,252(sp)
   48dcc:	00501680 	call	50168 <__fpclassifyd>
   48dd0:	da004017 	ldw	r8,256(sp)
   48dd4:	da403f17 	ldw	r9,252(sp)
   48dd8:	1000a91e 	bne	r2,zero,49080 <___svfprintf_internal_r+0x18b8>
   48ddc:	008011c4 	movi	r2,71
   48de0:	14011016 	blt	r2,r16,49224 <___svfprintf_internal_r+0x1a5c>
   48de4:	010001b4 	movhi	r4,6
   48de8:	2123ed04 	addi	r4,r4,-28748
   48dec:	d9003115 	stw	r4,196(sp)
   48df0:	00c000c4 	movi	r3,3
   48df4:	00bfdfc4 	movi	r2,-129
   48df8:	d8c02a15 	stw	r3,168(sp)
   48dfc:	e0b8703a 	and	fp,fp,r2
   48e00:	dcc02783 	ldbu	r19,158(sp)
   48e04:	dc802d15 	stw	r18,180(sp)
   48e08:	1823883a 	mov	r17,r3
   48e0c:	d8003215 	stw	zero,200(sp)
   48e10:	d8003415 	stw	zero,208(sp)
   48e14:	003baf06 	br	47cd4 <__alt_data_end+0xfffe32e4>
   48e18:	e0c0100c 	andi	r3,fp,64
   48e1c:	18012a26 	beq	r3,zero,492c8 <___svfprintf_internal_r+0x1b00>
   48e20:	d9002d17 	ldw	r4,180(sp)
   48e24:	1480000b 	ldhu	r18,0(r2)
   48e28:	002b883a 	mov	r21,zero
   48e2c:	21000104 	addi	r4,r4,4
   48e30:	d9002d15 	stw	r4,180(sp)
   48e34:	003d3206 	br	48300 <__alt_data_end+0xfffe3910>
   48e38:	e080100c 	andi	r2,fp,64
   48e3c:	10011326 	beq	r2,zero,4928c <___svfprintf_internal_r+0x1ac4>
   48e40:	d8c02d17 	ldw	r3,180(sp)
   48e44:	002b883a 	mov	r21,zero
   48e48:	0005883a 	mov	r2,zero
   48e4c:	1c80000b 	ldhu	r18,0(r3)
   48e50:	18c00104 	addi	r3,r3,4
   48e54:	d8c02d15 	stw	r3,180(sp)
   48e58:	9007883a 	mov	r3,r18
   48e5c:	003cbf06 	br	4815c <__alt_data_end+0xfffe376c>
   48e60:	e080040c 	andi	r2,fp,16
   48e64:	10011e26 	beq	r2,zero,492e0 <___svfprintf_internal_r+0x1b18>
   48e68:	d9402d17 	ldw	r5,180(sp)
   48e6c:	d8c03017 	ldw	r3,192(sp)
   48e70:	28800017 	ldw	r2,0(r5)
   48e74:	29400104 	addi	r5,r5,4
   48e78:	d9402d15 	stw	r5,180(sp)
   48e7c:	10c00015 	stw	r3,0(r2)
   48e80:	003a7d06 	br	47878 <__alt_data_end+0xfffe2e88>
   48e84:	e4000007 	ldb	r16,0(fp)
   48e88:	e005883a 	mov	r2,fp
   48e8c:	003aa506 	br	47924 <__alt_data_end+0xfffe2f34>
   48e90:	e080100c 	andi	r2,fp,64
   48e94:	10010526 	beq	r2,zero,492ac <___svfprintf_internal_r+0x1ae4>
   48e98:	1c80000f 	ldh	r18,0(r3)
   48e9c:	d8802d17 	ldw	r2,180(sp)
   48ea0:	902bd7fa 	srai	r21,r18,31
   48ea4:	10800104 	addi	r2,r2,4
   48ea8:	d8802d15 	stw	r2,180(sp)
   48eac:	a805883a 	mov	r2,r21
   48eb0:	003b5c06 	br	47c24 <__alt_data_end+0xfffe3234>
   48eb4:	e080100c 	andi	r2,fp,64
   48eb8:	1000ec26 	beq	r2,zero,4926c <___svfprintf_internal_r+0x1aa4>
   48ebc:	d8802d17 	ldw	r2,180(sp)
   48ec0:	002b883a 	mov	r21,zero
   48ec4:	1480000b 	ldhu	r18,0(r2)
   48ec8:	10800104 	addi	r2,r2,4
   48ecc:	d8802d15 	stw	r2,180(sp)
   48ed0:	9007883a 	mov	r3,r18
   48ed4:	00800044 	movi	r2,1
   48ed8:	003ca006 	br	4815c <__alt_data_end+0xfffe376c>
   48edc:	00800084 	movi	r2,2
   48ee0:	003c9e06 	br	4815c <__alt_data_end+0xfffe376c>
   48ee4:	010001b4 	movhi	r4,6
   48ee8:	2123fb84 	addi	r4,r4,-28690
   48eec:	d9002b15 	stw	r4,172(sp)
   48ef0:	d9002b17 	ldw	r4,172(sp)
   48ef4:	1c47883a 	add	r3,r3,r17
   48ef8:	10800044 	addi	r2,r2,1
   48efc:	41000015 	stw	r4,0(r8)
   48f00:	44400115 	stw	r17,4(r8)
   48f04:	d8c02015 	stw	r3,128(sp)
   48f08:	d8801f15 	stw	r2,124(sp)
   48f0c:	010001c4 	movi	r4,7
   48f10:	20bf3916 	blt	r4,r2,48bf8 <__alt_data_end+0xfffe4208>
   48f14:	42000204 	addi	r8,r8,8
   48f18:	003f3e06 	br	48c14 <__alt_data_end+0xfffe4224>
   48f1c:	010001b4 	movhi	r4,6
   48f20:	2123fb84 	addi	r4,r4,-28690
   48f24:	d9002b15 	stw	r4,172(sp)
   48f28:	003bf806 	br	47f0c <__alt_data_end+0xfffe351c>
   48f2c:	d9002f17 	ldw	r4,188(sp)
   48f30:	b00b883a 	mov	r5,r22
   48f34:	b80d883a 	mov	r6,r23
   48f38:	00503180 	call	50318 <__ssprint_r>
   48f3c:	103aeb1e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   48f40:	d8c02017 	ldw	r3,128(sp)
   48f44:	da000404 	addi	r8,sp,16
   48f48:	003dc806 	br	4866c <__alt_data_end+0xfffe3c7c>
   48f4c:	d8801f17 	ldw	r2,124(sp)
   48f50:	014001b4 	movhi	r5,6
   48f54:	01000044 	movi	r4,1
   48f58:	18c00044 	addi	r3,r3,1
   48f5c:	10800044 	addi	r2,r2,1
   48f60:	2963fb04 	addi	r5,r5,-28692
   48f64:	41000115 	stw	r4,4(r8)
   48f68:	41400015 	stw	r5,0(r8)
   48f6c:	d8c02015 	stw	r3,128(sp)
   48f70:	d8801f15 	stw	r2,124(sp)
   48f74:	010001c4 	movi	r4,7
   48f78:	2080ae16 	blt	r4,r2,49234 <___svfprintf_internal_r+0x1a6c>
   48f7c:	42000204 	addi	r8,r8,8
   48f80:	8000041e 	bne	r16,zero,48f94 <___svfprintf_internal_r+0x17cc>
   48f84:	d8803317 	ldw	r2,204(sp)
   48f88:	1000021e 	bne	r2,zero,48f94 <___svfprintf_internal_r+0x17cc>
   48f8c:	e080004c 	andi	r2,fp,1
   48f90:	103bf526 	beq	r2,zero,47f68 <__alt_data_end+0xfffe3578>
   48f94:	d9003917 	ldw	r4,228(sp)
   48f98:	d8801f17 	ldw	r2,124(sp)
   48f9c:	d9403517 	ldw	r5,212(sp)
   48fa0:	1907883a 	add	r3,r3,r4
   48fa4:	10800044 	addi	r2,r2,1
   48fa8:	41000115 	stw	r4,4(r8)
   48fac:	41400015 	stw	r5,0(r8)
   48fb0:	d8c02015 	stw	r3,128(sp)
   48fb4:	d8801f15 	stw	r2,124(sp)
   48fb8:	010001c4 	movi	r4,7
   48fbc:	2081ac16 	blt	r4,r2,49670 <___svfprintf_internal_r+0x1ea8>
   48fc0:	42000204 	addi	r8,r8,8
   48fc4:	0421c83a 	sub	r16,zero,r16
   48fc8:	0400d60e 	bge	zero,r16,49324 <___svfprintf_internal_r+0x1b5c>
   48fcc:	04400404 	movi	r17,16
   48fd0:	8c01190e 	bge	r17,r16,49438 <___svfprintf_internal_r+0x1c70>
   48fd4:	014001b4 	movhi	r5,6
   48fd8:	2963fb84 	addi	r5,r5,-28690
   48fdc:	d9402b15 	stw	r5,172(sp)
   48fe0:	04c001c4 	movi	r19,7
   48fe4:	dc802f17 	ldw	r18,188(sp)
   48fe8:	00000306 	br	48ff8 <___svfprintf_internal_r+0x1830>
   48fec:	42000204 	addi	r8,r8,8
   48ff0:	843ffc04 	addi	r16,r16,-16
   48ff4:	8c01130e 	bge	r17,r16,49444 <___svfprintf_internal_r+0x1c7c>
   48ff8:	18c00404 	addi	r3,r3,16
   48ffc:	10800044 	addi	r2,r2,1
   49000:	45000015 	stw	r20,0(r8)
   49004:	44400115 	stw	r17,4(r8)
   49008:	d8c02015 	stw	r3,128(sp)
   4900c:	d8801f15 	stw	r2,124(sp)
   49010:	98bff60e 	bge	r19,r2,48fec <__alt_data_end+0xfffe45fc>
   49014:	9009883a 	mov	r4,r18
   49018:	b00b883a 	mov	r5,r22
   4901c:	b80d883a 	mov	r6,r23
   49020:	00503180 	call	50318 <__ssprint_r>
   49024:	103ab11e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   49028:	d8c02017 	ldw	r3,128(sp)
   4902c:	d8801f17 	ldw	r2,124(sp)
   49030:	da000404 	addi	r8,sp,16
   49034:	003fee06 	br	48ff0 <__alt_data_end+0xfffe4600>
   49038:	d8802e17 	ldw	r2,184(sp)
   4903c:	d8c02d15 	stw	r3,180(sp)
   49040:	0085c83a 	sub	r2,zero,r2
   49044:	d8802e15 	stw	r2,184(sp)
   49048:	e005883a 	mov	r2,fp
   4904c:	003aba06 	br	47b38 <__alt_data_end+0xfffe3148>
   49050:	e0800044 	addi	r2,fp,1
   49054:	9cc00814 	ori	r19,r19,32
   49058:	e4000047 	ldb	r16,1(fp)
   4905c:	003a3106 	br	47924 <__alt_data_end+0xfffe2f34>
   49060:	d9002f17 	ldw	r4,188(sp)
   49064:	b00b883a 	mov	r5,r22
   49068:	b80d883a 	mov	r6,r23
   4906c:	00503180 	call	50318 <__ssprint_r>
   49070:	103a9e1e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   49074:	d8c02017 	ldw	r3,128(sp)
   49078:	da000404 	addi	r8,sp,16
   4907c:	003d8d06 	br	486b4 <__alt_data_end+0xfffe3cc4>
   49080:	04fff7c4 	movi	r19,-33
   49084:	00bfffc4 	movi	r2,-1
   49088:	84e6703a 	and	r19,r16,r19
   4908c:	48807226 	beq	r9,r2,49258 <___svfprintf_internal_r+0x1a90>
   49090:	008011c4 	movi	r2,71
   49094:	98818026 	beq	r19,r2,49698 <___svfprintf_internal_r+0x1ed0>
   49098:	d9003817 	ldw	r4,224(sp)
   4909c:	e0c04014 	ori	r3,fp,256
   490a0:	d8c02d15 	stw	r3,180(sp)
   490a4:	20017f16 	blt	r4,zero,496a4 <___svfprintf_internal_r+0x1edc>
   490a8:	dc403817 	ldw	r17,224(sp)
   490ac:	d8002a05 	stb	zero,168(sp)
   490b0:	00801984 	movi	r2,102
   490b4:	8080ad26 	beq	r16,r2,4936c <___svfprintf_internal_r+0x1ba4>
   490b8:	00801184 	movi	r2,70
   490bc:	8080ab26 	beq	r16,r2,4936c <___svfprintf_internal_r+0x1ba4>
   490c0:	00801144 	movi	r2,69
   490c4:	98818426 	beq	r19,r2,496d8 <___svfprintf_internal_r+0x1f10>
   490c8:	482b883a 	mov	r21,r9
   490cc:	d8802604 	addi	r2,sp,152
   490d0:	d8800115 	stw	r2,4(sp)
   490d4:	d9002f17 	ldw	r4,188(sp)
   490d8:	d8802504 	addi	r2,sp,148
   490dc:	d9403717 	ldw	r5,220(sp)
   490e0:	d8800215 	stw	r2,8(sp)
   490e4:	d8802104 	addi	r2,sp,132
   490e8:	dd400015 	stw	r21,0(sp)
   490ec:	d8800315 	stw	r2,12(sp)
   490f0:	880d883a 	mov	r6,r17
   490f4:	01c00084 	movi	r7,2
   490f8:	da004015 	stw	r8,256(sp)
   490fc:	da403f15 	stw	r9,252(sp)
   49100:	004bde00 	call	4bde0 <_dtoa_r>
   49104:	d8803115 	stw	r2,196(sp)
   49108:	008019c4 	movi	r2,103
   4910c:	da004017 	ldw	r8,256(sp)
   49110:	da403f17 	ldw	r9,252(sp)
   49114:	80800226 	beq	r16,r2,49120 <___svfprintf_internal_r+0x1958>
   49118:	008011c4 	movi	r2,71
   4911c:	8080a51e 	bne	r16,r2,493b4 <___svfprintf_internal_r+0x1bec>
   49120:	e080004c 	andi	r2,fp,1
   49124:	10017226 	beq	r2,zero,496f0 <___svfprintf_internal_r+0x1f28>
   49128:	d8c03117 	ldw	r3,196(sp)
   4912c:	1d55883a 	add	r10,r3,r21
   49130:	d9003717 	ldw	r4,220(sp)
   49134:	880b883a 	mov	r5,r17
   49138:	000d883a 	mov	r6,zero
   4913c:	000f883a 	mov	r7,zero
   49140:	da004015 	stw	r8,256(sp)
   49144:	da403f15 	stw	r9,252(sp)
   49148:	da803e15 	stw	r10,248(sp)
   4914c:	0054a500 	call	54a50 <__eqdf2>
   49150:	da004017 	ldw	r8,256(sp)
   49154:	da403f17 	ldw	r9,252(sp)
   49158:	da803e17 	ldw	r10,248(sp)
   4915c:	1000fd26 	beq	r2,zero,49554 <___svfprintf_internal_r+0x1d8c>
   49160:	d8802117 	ldw	r2,132(sp)
   49164:	1280062e 	bgeu	r2,r10,49180 <___svfprintf_internal_r+0x19b8>
   49168:	01000c04 	movi	r4,48
   4916c:	10c00044 	addi	r3,r2,1
   49170:	d8c02115 	stw	r3,132(sp)
   49174:	11000005 	stb	r4,0(r2)
   49178:	d8802117 	ldw	r2,132(sp)
   4917c:	12bffb36 	bltu	r2,r10,4916c <__alt_data_end+0xfffe477c>
   49180:	d8c03117 	ldw	r3,196(sp)
   49184:	10c5c83a 	sub	r2,r2,r3
   49188:	d8803315 	stw	r2,204(sp)
   4918c:	008011c4 	movi	r2,71
   49190:	9880e226 	beq	r19,r2,4951c <___svfprintf_internal_r+0x1d54>
   49194:	00801944 	movi	r2,101
   49198:	1401a30e 	bge	r2,r16,49828 <___svfprintf_internal_r+0x2060>
   4919c:	d8c02617 	ldw	r3,152(sp)
   491a0:	00801984 	movi	r2,102
   491a4:	d8c03415 	stw	r3,208(sp)
   491a8:	80815326 	beq	r16,r2,496f8 <___svfprintf_internal_r+0x1f30>
   491ac:	d8c03417 	ldw	r3,208(sp)
   491b0:	d9003317 	ldw	r4,204(sp)
   491b4:	19013f16 	blt	r3,r4,496b4 <___svfprintf_internal_r+0x1eec>
   491b8:	e080004c 	andi	r2,fp,1
   491bc:	10014826 	beq	r2,zero,496e0 <___svfprintf_internal_r+0x1f18>
   491c0:	d8c03417 	ldw	r3,208(sp)
   491c4:	1c400044 	addi	r17,r3,1
   491c8:	8839883a 	mov	fp,r17
   491cc:	88014016 	blt	r17,zero,496d0 <___svfprintf_internal_r+0x1f08>
   491d0:	dd402a07 	ldb	r21,168(sp)
   491d4:	a800c61e 	bne	r21,zero,494f0 <___svfprintf_internal_r+0x1d28>
   491d8:	df002a15 	stw	fp,168(sp)
   491dc:	dcc02783 	ldbu	r19,158(sp)
   491e0:	df002d17 	ldw	fp,180(sp)
   491e4:	d8003215 	stw	zero,200(sp)
   491e8:	dc802d15 	stw	r18,180(sp)
   491ec:	003ab906 	br	47cd4 <__alt_data_end+0xfffe32e4>
   491f0:	010001b4 	movhi	r4,6
   491f4:	2123eb04 	addi	r4,r4,-28756
   491f8:	d9003115 	stw	r4,196(sp)
   491fc:	003bbe06 	br	480f8 <__alt_data_end+0xfffe3708>
   49200:	d9002f17 	ldw	r4,188(sp)
   49204:	04001004 	movi	r16,64
   49208:	800b883a 	mov	r5,r16
   4920c:	00469ac0 	call	469ac <_malloc_r>
   49210:	b0800015 	stw	r2,0(r22)
   49214:	b0800415 	stw	r2,16(r22)
   49218:	10017c26 	beq	r2,zero,4980c <___svfprintf_internal_r+0x2044>
   4921c:	b4000515 	stw	r16,20(r22)
   49220:	00398306 	br	47830 <__alt_data_end+0xfffe2e40>
   49224:	014001b4 	movhi	r5,6
   49228:	2963ee04 	addi	r5,r5,-28744
   4922c:	d9403115 	stw	r5,196(sp)
   49230:	003eef06 	br	48df0 <__alt_data_end+0xfffe4400>
   49234:	d9002f17 	ldw	r4,188(sp)
   49238:	b00b883a 	mov	r5,r22
   4923c:	b80d883a 	mov	r6,r23
   49240:	00503180 	call	50318 <__ssprint_r>
   49244:	103a291e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   49248:	dc002617 	ldw	r16,152(sp)
   4924c:	d8c02017 	ldw	r3,128(sp)
   49250:	da000404 	addi	r8,sp,16
   49254:	003f4a06 	br	48f80 <__alt_data_end+0xfffe4590>
   49258:	02400184 	movi	r9,6
   4925c:	003f8e06 	br	49098 <__alt_data_end+0xfffe46a8>
   49260:	d8c03117 	ldw	r3,196(sp)
   49264:	b8e3c83a 	sub	r17,r23,r3
   49268:	003a9506 	br	47cc0 <__alt_data_end+0xfffe32d0>
   4926c:	d8c02d17 	ldw	r3,180(sp)
   49270:	002b883a 	mov	r21,zero
   49274:	00800044 	movi	r2,1
   49278:	1c800017 	ldw	r18,0(r3)
   4927c:	18c00104 	addi	r3,r3,4
   49280:	d8c02d15 	stw	r3,180(sp)
   49284:	9007883a 	mov	r3,r18
   49288:	003bb406 	br	4815c <__alt_data_end+0xfffe376c>
   4928c:	d9002d17 	ldw	r4,180(sp)
   49290:	002b883a 	mov	r21,zero
   49294:	0005883a 	mov	r2,zero
   49298:	24800017 	ldw	r18,0(r4)
   4929c:	21000104 	addi	r4,r4,4
   492a0:	d9002d15 	stw	r4,180(sp)
   492a4:	9007883a 	mov	r3,r18
   492a8:	003bac06 	br	4815c <__alt_data_end+0xfffe376c>
   492ac:	1c800017 	ldw	r18,0(r3)
   492b0:	d8c02d17 	ldw	r3,180(sp)
   492b4:	902bd7fa 	srai	r21,r18,31
   492b8:	18c00104 	addi	r3,r3,4
   492bc:	d8c02d15 	stw	r3,180(sp)
   492c0:	a805883a 	mov	r2,r21
   492c4:	003a5706 	br	47c24 <__alt_data_end+0xfffe3234>
   492c8:	d9402d17 	ldw	r5,180(sp)
   492cc:	14800017 	ldw	r18,0(r2)
   492d0:	002b883a 	mov	r21,zero
   492d4:	29400104 	addi	r5,r5,4
   492d8:	d9402d15 	stw	r5,180(sp)
   492dc:	003c0806 	br	48300 <__alt_data_end+0xfffe3910>
   492e0:	e080100c 	andi	r2,fp,64
   492e4:	10009426 	beq	r2,zero,49538 <___svfprintf_internal_r+0x1d70>
   492e8:	d9002d17 	ldw	r4,180(sp)
   492ec:	d9403017 	ldw	r5,192(sp)
   492f0:	20800017 	ldw	r2,0(r4)
   492f4:	21000104 	addi	r4,r4,4
   492f8:	d9002d15 	stw	r4,180(sp)
   492fc:	1140000d 	sth	r5,0(r2)
   49300:	00395d06 	br	47878 <__alt_data_end+0xfffe2e88>
   49304:	d9002f17 	ldw	r4,188(sp)
   49308:	b00b883a 	mov	r5,r22
   4930c:	b80d883a 	mov	r6,r23
   49310:	00503180 	call	50318 <__ssprint_r>
   49314:	1039f51e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   49318:	d8c02017 	ldw	r3,128(sp)
   4931c:	d8801f17 	ldw	r2,124(sp)
   49320:	da000404 	addi	r8,sp,16
   49324:	d9403317 	ldw	r5,204(sp)
   49328:	d9003117 	ldw	r4,196(sp)
   4932c:	10800044 	addi	r2,r2,1
   49330:	28c7883a 	add	r3,r5,r3
   49334:	41000015 	stw	r4,0(r8)
   49338:	41400115 	stw	r5,4(r8)
   4933c:	d8c02015 	stw	r3,128(sp)
   49340:	d8801f15 	stw	r2,124(sp)
   49344:	010001c4 	movi	r4,7
   49348:	20bb060e 	bge	r4,r2,47f64 <__alt_data_end+0xfffe3574>
   4934c:	003d8306 	br	4895c <__alt_data_end+0xfffe3f6c>
   49350:	da004015 	stw	r8,256(sp)
   49354:	00477300 	call	47730 <strlen>
   49358:	1023883a 	mov	r17,r2
   4935c:	da004017 	ldw	r8,256(sp)
   49360:	883c290e 	bge	r17,zero,48408 <__alt_data_end+0xfffe3a18>
   49364:	0005883a 	mov	r2,zero
   49368:	003c2706 	br	48408 <__alt_data_end+0xfffe3a18>
   4936c:	d8802604 	addi	r2,sp,152
   49370:	d8800115 	stw	r2,4(sp)
   49374:	d9002f17 	ldw	r4,188(sp)
   49378:	d8802504 	addi	r2,sp,148
   4937c:	d9403717 	ldw	r5,220(sp)
   49380:	d8800215 	stw	r2,8(sp)
   49384:	d8802104 	addi	r2,sp,132
   49388:	da400015 	stw	r9,0(sp)
   4938c:	d8800315 	stw	r2,12(sp)
   49390:	880d883a 	mov	r6,r17
   49394:	01c000c4 	movi	r7,3
   49398:	da004015 	stw	r8,256(sp)
   4939c:	da403f15 	stw	r9,252(sp)
   493a0:	004bde00 	call	4bde0 <_dtoa_r>
   493a4:	da403f17 	ldw	r9,252(sp)
   493a8:	da004017 	ldw	r8,256(sp)
   493ac:	d8803115 	stw	r2,196(sp)
   493b0:	482b883a 	mov	r21,r9
   493b4:	d8c03117 	ldw	r3,196(sp)
   493b8:	00801184 	movi	r2,70
   493bc:	1d55883a 	add	r10,r3,r21
   493c0:	98bf5b1e 	bne	r19,r2,49130 <__alt_data_end+0xfffe4740>
   493c4:	19000007 	ldb	r4,0(r3)
   493c8:	00800c04 	movi	r2,48
   493cc:	2080d826 	beq	r4,r2,49730 <___svfprintf_internal_r+0x1f68>
   493d0:	d8c02617 	ldw	r3,152(sp)
   493d4:	50d5883a 	add	r10,r10,r3
   493d8:	003f5506 	br	49130 <__alt_data_end+0xfffe4740>
   493dc:	010001b4 	movhi	r4,6
   493e0:	2123ff84 	addi	r4,r4,-28674
   493e4:	d9003615 	stw	r4,216(sp)
   493e8:	003a7706 	br	47dc8 <__alt_data_end+0xfffe33d8>
   493ec:	0023883a 	mov	r17,zero
   493f0:	003da306 	br	48a80 <__alt_data_end+0xfffe4090>
   493f4:	d9002f17 	ldw	r4,188(sp)
   493f8:	b00b883a 	mov	r5,r22
   493fc:	b80d883a 	mov	r6,r23
   49400:	00503180 	call	50318 <__ssprint_r>
   49404:	1039b91e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   49408:	d8c02017 	ldw	r3,128(sp)
   4940c:	da000404 	addi	r8,sp,16
   49410:	003d9a06 	br	48a7c <__alt_data_end+0xfffe408c>
   49414:	d9002f17 	ldw	r4,188(sp)
   49418:	b00b883a 	mov	r5,r22
   4941c:	b80d883a 	mov	r6,r23
   49420:	00503180 	call	50318 <__ssprint_r>
   49424:	1039b11e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   49428:	d8802617 	ldw	r2,152(sp)
   4942c:	d8c02017 	ldw	r3,128(sp)
   49430:	da000404 	addi	r8,sp,16
   49434:	003e0c06 	br	48c68 <__alt_data_end+0xfffe4278>
   49438:	010001b4 	movhi	r4,6
   4943c:	2123fb84 	addi	r4,r4,-28690
   49440:	d9002b15 	stw	r4,172(sp)
   49444:	d9002b17 	ldw	r4,172(sp)
   49448:	1c07883a 	add	r3,r3,r16
   4944c:	10800044 	addi	r2,r2,1
   49450:	41000015 	stw	r4,0(r8)
   49454:	44000115 	stw	r16,4(r8)
   49458:	d8c02015 	stw	r3,128(sp)
   4945c:	d8801f15 	stw	r2,124(sp)
   49460:	010001c4 	movi	r4,7
   49464:	20bfa716 	blt	r4,r2,49304 <__alt_data_end+0xfffe4914>
   49468:	42000204 	addi	r8,r8,8
   4946c:	003fad06 	br	49324 <__alt_data_end+0xfffe4934>
   49470:	d9002f17 	ldw	r4,188(sp)
   49474:	b00b883a 	mov	r5,r22
   49478:	b80d883a 	mov	r6,r23
   4947c:	00503180 	call	50318 <__ssprint_r>
   49480:	10399a1e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   49484:	d8802617 	ldw	r2,152(sp)
   49488:	d9403317 	ldw	r5,204(sp)
   4948c:	d8c02017 	ldw	r3,128(sp)
   49490:	da000404 	addi	r8,sp,16
   49494:	2885c83a 	sub	r2,r5,r2
   49498:	003e0406 	br	48cac <__alt_data_end+0xfffe42bc>
   4949c:	00800184 	movi	r2,6
   494a0:	1240012e 	bgeu	r2,r9,494a8 <___svfprintf_internal_r+0x1ce0>
   494a4:	1013883a 	mov	r9,r2
   494a8:	4823883a 	mov	r17,r9
   494ac:	4805883a 	mov	r2,r9
   494b0:	4800b616 	blt	r9,zero,4978c <___svfprintf_internal_r+0x1fc4>
   494b4:	014001b4 	movhi	r5,6
   494b8:	2963f904 	addi	r5,r5,-28700
   494bc:	d8802a15 	stw	r2,168(sp)
   494c0:	dc802d15 	stw	r18,180(sp)
   494c4:	d8003215 	stw	zero,200(sp)
   494c8:	d8003415 	stw	zero,208(sp)
   494cc:	d9403115 	stw	r5,196(sp)
   494d0:	0005883a 	mov	r2,zero
   494d4:	003a0606 	br	47cf0 <__alt_data_end+0xfffe3300>
   494d8:	0021883a 	mov	r16,zero
   494dc:	003df406 	br	48cb0 <__alt_data_end+0xfffe42c0>
   494e0:	014001b4 	movhi	r5,6
   494e4:	2963ff84 	addi	r5,r5,-28674
   494e8:	d9403615 	stw	r5,216(sp)
   494ec:	003ac306 	br	47ffc <__alt_data_end+0xfffe360c>
   494f0:	00800b44 	movi	r2,45
   494f4:	d8802785 	stb	r2,158(sp)
   494f8:	df002a15 	stw	fp,168(sp)
   494fc:	d8003215 	stw	zero,200(sp)
   49500:	df002d17 	ldw	fp,180(sp)
   49504:	00800b44 	movi	r2,45
   49508:	dc802d15 	stw	r18,180(sp)
   4950c:	0039f506 	br	47ce4 <__alt_data_end+0xfffe32f4>
   49510:	04c00b44 	movi	r19,45
   49514:	dcc02785 	stb	r19,158(sp)
   49518:	003af206 	br	480e4 <__alt_data_end+0xfffe36f4>
   4951c:	d8c02617 	ldw	r3,152(sp)
   49520:	00bfff44 	movi	r2,-3
   49524:	18801816 	blt	r3,r2,49588 <___svfprintf_internal_r+0x1dc0>
   49528:	48c01716 	blt	r9,r3,49588 <___svfprintf_internal_r+0x1dc0>
   4952c:	d8c03415 	stw	r3,208(sp)
   49530:	040019c4 	movi	r16,103
   49534:	003f1d06 	br	491ac <__alt_data_end+0xfffe47bc>
   49538:	d8c02d17 	ldw	r3,180(sp)
   4953c:	d9003017 	ldw	r4,192(sp)
   49540:	18800017 	ldw	r2,0(r3)
   49544:	18c00104 	addi	r3,r3,4
   49548:	d8c02d15 	stw	r3,180(sp)
   4954c:	11000015 	stw	r4,0(r2)
   49550:	0038c906 	br	47878 <__alt_data_end+0xfffe2e88>
   49554:	5005883a 	mov	r2,r10
   49558:	003f0906 	br	49180 <__alt_data_end+0xfffe4790>
   4955c:	010001b4 	movhi	r4,6
   49560:	2123fb84 	addi	r4,r4,-28690
   49564:	d9002b15 	stw	r4,172(sp)
   49568:	003c9a06 	br	487d4 <__alt_data_end+0xfffe3de4>
   4956c:	da402a15 	stw	r9,168(sp)
   49570:	dcc02783 	ldbu	r19,158(sp)
   49574:	4823883a 	mov	r17,r9
   49578:	dc802d15 	stw	r18,180(sp)
   4957c:	d8003215 	stw	zero,200(sp)
   49580:	d8003415 	stw	zero,208(sp)
   49584:	0039d306 	br	47cd4 <__alt_data_end+0xfffe32e4>
   49588:	843fff84 	addi	r16,r16,-2
   4958c:	1d7fffc4 	addi	r21,r3,-1
   49590:	dd402615 	stw	r21,152(sp)
   49594:	dc0022c5 	stb	r16,139(sp)
   49598:	a8008f16 	blt	r21,zero,497d8 <___svfprintf_internal_r+0x2010>
   4959c:	00800ac4 	movi	r2,43
   495a0:	d8802305 	stb	r2,140(sp)
   495a4:	00800244 	movi	r2,9
   495a8:	1540710e 	bge	r2,r21,49770 <___svfprintf_internal_r+0x1fa8>
   495ac:	dcc022c4 	addi	r19,sp,139
   495b0:	dc002b15 	stw	r16,172(sp)
   495b4:	4023883a 	mov	r17,r8
   495b8:	9821883a 	mov	r16,r19
   495bc:	a809883a 	mov	r4,r21
   495c0:	01400284 	movi	r5,10
   495c4:	00452b40 	call	452b4 <__modsi3>
   495c8:	10800c04 	addi	r2,r2,48
   495cc:	843fffc4 	addi	r16,r16,-1
   495d0:	a809883a 	mov	r4,r21
   495d4:	01400284 	movi	r5,10
   495d8:	80800005 	stb	r2,0(r16)
   495dc:	00452600 	call	45260 <__divsi3>
   495e0:	01000244 	movi	r4,9
   495e4:	102b883a 	mov	r21,r2
   495e8:	20bff416 	blt	r4,r2,495bc <__alt_data_end+0xfffe4bcc>
   495ec:	8811883a 	mov	r8,r17
   495f0:	10800c04 	addi	r2,r2,48
   495f4:	8023883a 	mov	r17,r16
   495f8:	897fffc4 	addi	r5,r17,-1
   495fc:	88bfffc5 	stb	r2,-1(r17)
   49600:	dc002b17 	ldw	r16,172(sp)
   49604:	2cc08a2e 	bgeu	r5,r19,49830 <___svfprintf_internal_r+0x2068>
   49608:	d9802384 	addi	r6,sp,142
   4960c:	344dc83a 	sub	r6,r6,r17
   49610:	d9002344 	addi	r4,sp,141
   49614:	998d883a 	add	r6,r19,r6
   49618:	00000106 	br	49620 <___svfprintf_internal_r+0x1e58>
   4961c:	28800003 	ldbu	r2,0(r5)
   49620:	20800005 	stb	r2,0(r4)
   49624:	21000044 	addi	r4,r4,1
   49628:	29400044 	addi	r5,r5,1
   4962c:	21bffb1e 	bne	r4,r6,4961c <__alt_data_end+0xfffe4c2c>
   49630:	d8802304 	addi	r2,sp,140
   49634:	1445c83a 	sub	r2,r2,r17
   49638:	d9402344 	addi	r5,sp,141
   4963c:	2885883a 	add	r2,r5,r2
   49640:	14e7c83a 	sub	r19,r2,r19
   49644:	d8803317 	ldw	r2,204(sp)
   49648:	d8c03317 	ldw	r3,204(sp)
   4964c:	dcc03a15 	stw	r19,232(sp)
   49650:	14e3883a 	add	r17,r2,r19
   49654:	00800044 	movi	r2,1
   49658:	10c0690e 	bge	r2,r3,49800 <___svfprintf_internal_r+0x2038>
   4965c:	8c400044 	addi	r17,r17,1
   49660:	8839883a 	mov	fp,r17
   49664:	88006416 	blt	r17,zero,497f8 <___svfprintf_internal_r+0x2030>
   49668:	d8003415 	stw	zero,208(sp)
   4966c:	003ed806 	br	491d0 <__alt_data_end+0xfffe47e0>
   49670:	d9002f17 	ldw	r4,188(sp)
   49674:	b00b883a 	mov	r5,r22
   49678:	b80d883a 	mov	r6,r23
   4967c:	00503180 	call	50318 <__ssprint_r>
   49680:	10391a1e 	bne	r2,zero,47aec <__alt_data_end+0xfffe30fc>
   49684:	dc002617 	ldw	r16,152(sp)
   49688:	d8c02017 	ldw	r3,128(sp)
   4968c:	d8801f17 	ldw	r2,124(sp)
   49690:	da000404 	addi	r8,sp,16
   49694:	003e4b06 	br	48fc4 <__alt_data_end+0xfffe45d4>
   49698:	483e7f1e 	bne	r9,zero,49098 <__alt_data_end+0xfffe46a8>
   4969c:	8813883a 	mov	r9,r17
   496a0:	003e7d06 	br	49098 <__alt_data_end+0xfffe46a8>
   496a4:	00c00b44 	movi	r3,45
   496a8:	2460003c 	xorhi	r17,r4,32768
   496ac:	d8c02a05 	stb	r3,168(sp)
   496b0:	003e7f06 	br	490b0 <__alt_data_end+0xfffe46c0>
   496b4:	d8c03417 	ldw	r3,208(sp)
   496b8:	00c03e0e 	bge	zero,r3,497b4 <___svfprintf_internal_r+0x1fec>
   496bc:	04400044 	movi	r17,1
   496c0:	d9003317 	ldw	r4,204(sp)
   496c4:	8923883a 	add	r17,r17,r4
   496c8:	8839883a 	mov	fp,r17
   496cc:	883ec00e 	bge	r17,zero,491d0 <__alt_data_end+0xfffe47e0>
   496d0:	0039883a 	mov	fp,zero
   496d4:	003ebe06 	br	491d0 <__alt_data_end+0xfffe47e0>
   496d8:	4d400044 	addi	r21,r9,1
   496dc:	003e7b06 	br	490cc <__alt_data_end+0xfffe46dc>
   496e0:	1839883a 	mov	fp,r3
   496e4:	18004e16 	blt	r3,zero,49820 <___svfprintf_internal_r+0x2058>
   496e8:	dc403417 	ldw	r17,208(sp)
   496ec:	003eb806 	br	491d0 <__alt_data_end+0xfffe47e0>
   496f0:	d8802117 	ldw	r2,132(sp)
   496f4:	003ea206 	br	49180 <__alt_data_end+0xfffe4790>
   496f8:	00c0310e 	bge	zero,r3,497c0 <___svfprintf_internal_r+0x1ff8>
   496fc:	4800021e 	bne	r9,zero,49708 <___svfprintf_internal_r+0x1f40>
   49700:	e080004c 	andi	r2,fp,1
   49704:	103ff626 	beq	r2,zero,496e0 <__alt_data_end+0xfffe4cf0>
   49708:	d8c03417 	ldw	r3,208(sp)
   4970c:	4a400044 	addi	r9,r9,1
   49710:	1a63883a 	add	r17,r3,r9
   49714:	8839883a 	mov	fp,r17
   49718:	883ead0e 	bge	r17,zero,491d0 <__alt_data_end+0xfffe47e0>
   4971c:	003fec06 	br	496d0 <__alt_data_end+0xfffe4ce0>
   49720:	010001b4 	movhi	r4,6
   49724:	2123fb84 	addi	r4,r4,-28690
   49728:	d9002b15 	stw	r4,172(sp)
   4972c:	003d2006 	br	48bb0 <__alt_data_end+0xfffe41c0>
   49730:	d9003717 	ldw	r4,220(sp)
   49734:	880b883a 	mov	r5,r17
   49738:	000d883a 	mov	r6,zero
   4973c:	000f883a 	mov	r7,zero
   49740:	da004015 	stw	r8,256(sp)
   49744:	da403f15 	stw	r9,252(sp)
   49748:	da803e15 	stw	r10,248(sp)
   4974c:	0054a500 	call	54a50 <__eqdf2>
   49750:	da004017 	ldw	r8,256(sp)
   49754:	da403f17 	ldw	r9,252(sp)
   49758:	da803e17 	ldw	r10,248(sp)
   4975c:	103f1c26 	beq	r2,zero,493d0 <__alt_data_end+0xfffe49e0>
   49760:	00800044 	movi	r2,1
   49764:	1547c83a 	sub	r3,r2,r21
   49768:	d8c02615 	stw	r3,152(sp)
   4976c:	003f1906 	br	493d4 <__alt_data_end+0xfffe49e4>
   49770:	00800c04 	movi	r2,48
   49774:	a8c00c04 	addi	r3,r21,48
   49778:	d8802345 	stb	r2,141(sp)
   4977c:	d8c02385 	stb	r3,142(sp)
   49780:	d88023c4 	addi	r2,sp,143
   49784:	dcc022c4 	addi	r19,sp,139
   49788:	003fad06 	br	49640 <__alt_data_end+0xfffe4c50>
   4978c:	0005883a 	mov	r2,zero
   49790:	003f4806 	br	494b4 <__alt_data_end+0xfffe4ac4>
   49794:	d9402d17 	ldw	r5,180(sp)
   49798:	2a400017 	ldw	r9,0(r5)
   4979c:	28c00104 	addi	r3,r5,4
   497a0:	d8c02d15 	stw	r3,180(sp)
   497a4:	483e2c0e 	bge	r9,zero,49058 <__alt_data_end+0xfffe4668>
   497a8:	027fffc4 	movi	r9,-1
   497ac:	e4000047 	ldb	r16,1(fp)
   497b0:	00385c06 	br	47924 <__alt_data_end+0xfffe2f34>
   497b4:	04400084 	movi	r17,2
   497b8:	88e3c83a 	sub	r17,r17,r3
   497bc:	003fc006 	br	496c0 <__alt_data_end+0xfffe4cd0>
   497c0:	4800091e 	bne	r9,zero,497e8 <___svfprintf_internal_r+0x2020>
   497c4:	e080004c 	andi	r2,fp,1
   497c8:	1000071e 	bne	r2,zero,497e8 <___svfprintf_internal_r+0x2020>
   497cc:	07000044 	movi	fp,1
   497d0:	e023883a 	mov	r17,fp
   497d4:	003e7e06 	br	491d0 <__alt_data_end+0xfffe47e0>
   497d8:	00800b44 	movi	r2,45
   497dc:	056bc83a 	sub	r21,zero,r21
   497e0:	d8802305 	stb	r2,140(sp)
   497e4:	003f6f06 	br	495a4 <__alt_data_end+0xfffe4bb4>
   497e8:	4c400084 	addi	r17,r9,2
   497ec:	8839883a 	mov	fp,r17
   497f0:	883e770e 	bge	r17,zero,491d0 <__alt_data_end+0xfffe47e0>
   497f4:	003fb606 	br	496d0 <__alt_data_end+0xfffe4ce0>
   497f8:	0039883a 	mov	fp,zero
   497fc:	003f9a06 	br	49668 <__alt_data_end+0xfffe4c78>
   49800:	e084703a 	and	r2,fp,r2
   49804:	103f9626 	beq	r2,zero,49660 <__alt_data_end+0xfffe4c70>
   49808:	003f9406 	br	4965c <__alt_data_end+0xfffe4c6c>
   4980c:	d8c02f17 	ldw	r3,188(sp)
   49810:	00800304 	movi	r2,12
   49814:	18800015 	stw	r2,0(r3)
   49818:	00bfffc4 	movi	r2,-1
   4981c:	0038b706 	br	47afc <__alt_data_end+0xfffe310c>
   49820:	0039883a 	mov	fp,zero
   49824:	003fb006 	br	496e8 <__alt_data_end+0xfffe4cf8>
   49828:	d8c02617 	ldw	r3,152(sp)
   4982c:	003f5706 	br	4958c <__alt_data_end+0xfffe4b9c>
   49830:	d8802344 	addi	r2,sp,141
   49834:	003f8206 	br	49640 <__alt_data_end+0xfffe4c50>

00049838 <___vfprintf_internal_r>:
   49838:	defeb604 	addi	sp,sp,-1320
   4983c:	dfc14915 	stw	ra,1316(sp)
   49840:	ddc14715 	stw	r23,1308(sp)
   49844:	dd814615 	stw	r22,1304(sp)
   49848:	202f883a 	mov	r23,r4
   4984c:	282d883a 	mov	r22,r5
   49850:	d9812a15 	stw	r6,1192(sp)
   49854:	d9c12d15 	stw	r7,1204(sp)
   49858:	df014815 	stw	fp,1312(sp)
   4985c:	dd414515 	stw	r21,1300(sp)
   49860:	dd014415 	stw	r20,1296(sp)
   49864:	dcc14315 	stw	r19,1292(sp)
   49868:	dc814215 	stw	r18,1288(sp)
   4986c:	dc414115 	stw	r17,1284(sp)
   49870:	dc014015 	stw	r16,1280(sp)
   49874:	004e5e80 	call	4e5e8 <_localeconv_r>
   49878:	10800017 	ldw	r2,0(r2)
   4987c:	1009883a 	mov	r4,r2
   49880:	d8813515 	stw	r2,1236(sp)
   49884:	00477300 	call	47730 <strlen>
   49888:	d8813815 	stw	r2,1248(sp)
   4988c:	b8000226 	beq	r23,zero,49898 <___vfprintf_internal_r+0x60>
   49890:	b8800e17 	ldw	r2,56(r23)
   49894:	10010526 	beq	r2,zero,49cac <___vfprintf_internal_r+0x474>
   49898:	b0c0030b 	ldhu	r3,12(r22)
   4989c:	1908000c 	andi	r4,r3,8192
   498a0:	1805883a 	mov	r2,r3
   498a4:	2000071e 	bne	r4,zero,498c4 <___vfprintf_internal_r+0x8c>
   498a8:	b1001917 	ldw	r4,100(r22)
   498ac:	18880014 	ori	r2,r3,8192
   498b0:	00f7ffc4 	movi	r3,-8193
   498b4:	20c8703a 	and	r4,r4,r3
   498b8:	b080030d 	sth	r2,12(r22)
   498bc:	1007883a 	mov	r3,r2
   498c0:	b1001915 	stw	r4,100(r22)
   498c4:	1100020c 	andi	r4,r2,8
   498c8:	2000a826 	beq	r4,zero,49b6c <___vfprintf_internal_r+0x334>
   498cc:	b1000417 	ldw	r4,16(r22)
   498d0:	2000a626 	beq	r4,zero,49b6c <___vfprintf_internal_r+0x334>
   498d4:	1080068c 	andi	r2,r2,26
   498d8:	01000284 	movi	r4,10
   498dc:	1100ac26 	beq	r2,r4,49b90 <___vfprintf_internal_r+0x358>
   498e0:	d8c10e04 	addi	r3,sp,1080
   498e4:	d9010dc4 	addi	r4,sp,1079
   498e8:	d9400404 	addi	r5,sp,16
   498ec:	050001b4 	movhi	r20,6
   498f0:	1905c83a 	sub	r2,r3,r4
   498f4:	a5240384 	addi	r20,r20,-28658
   498f8:	d8c12815 	stw	r3,1184(sp)
   498fc:	d9012915 	stw	r4,1188(sp)
   49900:	d9411e15 	stw	r5,1144(sp)
   49904:	d8012015 	stw	zero,1152(sp)
   49908:	d8011f15 	stw	zero,1148(sp)
   4990c:	d8013315 	stw	zero,1228(sp)
   49910:	d8013715 	stw	zero,1244(sp)
   49914:	d8013915 	stw	zero,1252(sp)
   49918:	d8013b15 	stw	zero,1260(sp)
   4991c:	d8013a15 	stw	zero,1256(sp)
   49920:	d8012f15 	stw	zero,1212(sp)
   49924:	2811883a 	mov	r8,r5
   49928:	d8813c15 	stw	r2,1264(sp)
   4992c:	d8c12a17 	ldw	r3,1192(sp)
   49930:	18800007 	ldb	r2,0(r3)
   49934:	10021326 	beq	r2,zero,4a184 <___vfprintf_internal_r+0x94c>
   49938:	00c00944 	movi	r3,37
   4993c:	dc012a17 	ldw	r16,1192(sp)
   49940:	10c0021e 	bne	r2,r3,4994c <___vfprintf_internal_r+0x114>
   49944:	00001606 	br	499a0 <___vfprintf_internal_r+0x168>
   49948:	10c08526 	beq	r2,r3,49b60 <___vfprintf_internal_r+0x328>
   4994c:	84000044 	addi	r16,r16,1
   49950:	80800007 	ldb	r2,0(r16)
   49954:	103ffc1e 	bne	r2,zero,49948 <__alt_data_end+0xfffe4f58>
   49958:	d9012a17 	ldw	r4,1192(sp)
   4995c:	8123c83a 	sub	r17,r16,r4
   49960:	88000f26 	beq	r17,zero,499a0 <___vfprintf_internal_r+0x168>
   49964:	d8812a17 	ldw	r2,1192(sp)
   49968:	d8c12017 	ldw	r3,1152(sp)
   4996c:	44400115 	stw	r17,4(r8)
   49970:	40800015 	stw	r2,0(r8)
   49974:	d8811f17 	ldw	r2,1148(sp)
   49978:	1c47883a 	add	r3,r3,r17
   4997c:	d8c12015 	stw	r3,1152(sp)
   49980:	10800044 	addi	r2,r2,1
   49984:	d8811f15 	stw	r2,1148(sp)
   49988:	00c001c4 	movi	r3,7
   4998c:	1880b516 	blt	r3,r2,49c64 <___vfprintf_internal_r+0x42c>
   49990:	42000204 	addi	r8,r8,8
   49994:	d8c12f17 	ldw	r3,1212(sp)
   49998:	1c47883a 	add	r3,r3,r17
   4999c:	d8c12f15 	stw	r3,1212(sp)
   499a0:	80800007 	ldb	r2,0(r16)
   499a4:	1000b626 	beq	r2,zero,49c80 <___vfprintf_internal_r+0x448>
   499a8:	80800044 	addi	r2,r16,1
   499ac:	84000047 	ldb	r16,1(r16)
   499b0:	0027883a 	mov	r19,zero
   499b4:	0039883a 	mov	fp,zero
   499b8:	dcc12b05 	stb	r19,1196(sp)
   499bc:	d8012785 	stb	zero,1182(sp)
   499c0:	027fffc4 	movi	r9,-1
   499c4:	d8012e15 	stw	zero,1208(sp)
   499c8:	04401604 	movi	r17,88
   499cc:	04800244 	movi	r18,9
   499d0:	da012a15 	stw	r8,1192(sp)
   499d4:	e027883a 	mov	r19,fp
   499d8:	17000044 	addi	fp,r2,1
   499dc:	80bff804 	addi	r2,r16,-32
   499e0:	88831236 	bltu	r17,r2,4a62c <___vfprintf_internal_r+0xdf4>
   499e4:	100490ba 	slli	r2,r2,2
   499e8:	01000174 	movhi	r4,5
   499ec:	21267f04 	addi	r4,r4,-26116
   499f0:	1105883a 	add	r2,r2,r4
   499f4:	10800017 	ldw	r2,0(r2)
   499f8:	1000683a 	jmp	r2
   499fc:	0004a548 	cmpgei	zero,zero,4757
   49a00:	0004a62c 	andhi	zero,zero,4760
   49a04:	0004a62c 	andhi	zero,zero,4760
   49a08:	0004a564 	muli	zero,zero,4757
   49a0c:	0004a62c 	andhi	zero,zero,4760
   49a10:	0004a62c 	andhi	zero,zero,4760
   49a14:	0004a62c 	andhi	zero,zero,4760
   49a18:	0004a62c 	andhi	zero,zero,4760
   49a1c:	0004a62c 	andhi	zero,zero,4760
   49a20:	0004a62c 	andhi	zero,zero,4760
   49a24:	0004a574 	movhi	zero,4757
   49a28:	0004a59c 	xori	zero,zero,4758
   49a2c:	0004a62c 	andhi	zero,zero,4760
   49a30:	00049cb8 	rdprs	zero,zero,4722
   49a34:	00049cc8 	cmpgei	zero,zero,4723
   49a38:	0004a62c 	andhi	zero,zero,4760
   49a3c:	00049d18 	cmpnei	zero,zero,4724
   49a40:	00049d28 	cmpgeui	zero,zero,4724
   49a44:	00049d28 	cmpgeui	zero,zero,4724
   49a48:	00049d28 	cmpgeui	zero,zero,4724
   49a4c:	00049d28 	cmpgeui	zero,zero,4724
   49a50:	00049d28 	cmpgeui	zero,zero,4724
   49a54:	00049d28 	cmpgeui	zero,zero,4724
   49a58:	00049d28 	cmpgeui	zero,zero,4724
   49a5c:	00049d28 	cmpgeui	zero,zero,4724
   49a60:	00049d28 	cmpgeui	zero,zero,4724
   49a64:	0004a62c 	andhi	zero,zero,4760
   49a68:	0004a62c 	andhi	zero,zero,4760
   49a6c:	0004a62c 	andhi	zero,zero,4760
   49a70:	0004a62c 	andhi	zero,zero,4760
   49a74:	0004a62c 	andhi	zero,zero,4760
   49a78:	0004a62c 	andhi	zero,zero,4760
   49a7c:	0004a62c 	andhi	zero,zero,4760
   49a80:	0004a62c 	andhi	zero,zero,4760
   49a84:	0004a62c 	andhi	zero,zero,4760
   49a88:	0004a62c 	andhi	zero,zero,4760
   49a8c:	00049d6c 	andhi	zero,zero,4725
   49a90:	0004a18c 	andi	zero,zero,4742
   49a94:	0004a62c 	andhi	zero,zero,4760
   49a98:	0004a18c 	andi	zero,zero,4742
   49a9c:	0004a62c 	andhi	zero,zero,4760
   49aa0:	0004a62c 	andhi	zero,zero,4760
   49aa4:	0004a62c 	andhi	zero,zero,4760
   49aa8:	0004a62c 	andhi	zero,zero,4760
   49aac:	0004a234 	movhi	zero,4744
   49ab0:	0004a62c 	andhi	zero,zero,4760
   49ab4:	0004a62c 	andhi	zero,zero,4760
   49ab8:	0004a244 	movi	zero,4745
   49abc:	0004a62c 	andhi	zero,zero,4760
   49ac0:	0004a62c 	andhi	zero,zero,4760
   49ac4:	0004a62c 	andhi	zero,zero,4760
   49ac8:	0004a62c 	andhi	zero,zero,4760
   49acc:	0004a62c 	andhi	zero,zero,4760
   49ad0:	0004a288 	cmpgei	zero,zero,4746
   49ad4:	0004a62c 	andhi	zero,zero,4760
   49ad8:	0004a62c 	andhi	zero,zero,4760
   49adc:	0004a2c0 	call	4a2c <__reset-0x3b5d4>
   49ae0:	0004a62c 	andhi	zero,zero,4760
   49ae4:	0004a62c 	andhi	zero,zero,4760
   49ae8:	0004a62c 	andhi	zero,zero,4760
   49aec:	0004a62c 	andhi	zero,zero,4760
   49af0:	0004a62c 	andhi	zero,zero,4760
   49af4:	0004a62c 	andhi	zero,zero,4760
   49af8:	0004a62c 	andhi	zero,zero,4760
   49afc:	0004a62c 	andhi	zero,zero,4760
   49b00:	0004a62c 	andhi	zero,zero,4760
   49b04:	0004a62c 	andhi	zero,zero,4760
   49b08:	0004a4fc 	xorhi	zero,zero,4755
   49b0c:	0004a4a8 	cmpgeui	zero,zero,4754
   49b10:	0004a18c 	andi	zero,zero,4742
   49b14:	0004a18c 	andi	zero,zero,4742
   49b18:	0004a18c 	andi	zero,zero,4742
   49b1c:	0004a4ec 	andhi	zero,zero,4755
   49b20:	0004a4a8 	cmpgeui	zero,zero,4754
   49b24:	0004a62c 	andhi	zero,zero,4760
   49b28:	0004a62c 	andhi	zero,zero,4760
   49b2c:	0004a3c4 	movi	zero,4751
   49b30:	0004a62c 	andhi	zero,zero,4760
   49b34:	0004a3dc 	xori	zero,zero,4751
   49b38:	0004a41c 	xori	zero,zero,4752
   49b3c:	0004a45c 	xori	zero,zero,4753
   49b40:	0004a328 	cmpgeui	zero,zero,4748
   49b44:	0004a62c 	andhi	zero,zero,4760
   49b48:	0004a5b0 	cmpltui	zero,zero,4758
   49b4c:	0004a62c 	andhi	zero,zero,4760
   49b50:	0004a338 	rdprs	zero,zero,4748
   49b54:	0004a62c 	andhi	zero,zero,4760
   49b58:	0004a62c 	andhi	zero,zero,4760
   49b5c:	0004a378 	rdprs	zero,zero,4749
   49b60:	d9412a17 	ldw	r5,1192(sp)
   49b64:	8163c83a 	sub	r17,r16,r5
   49b68:	003f7d06 	br	49960 <__alt_data_end+0xfffe4f70>
   49b6c:	b809883a 	mov	r4,r23
   49b70:	b00b883a 	mov	r5,r22
   49b74:	004ba880 	call	4ba88 <__swsetup_r>
   49b78:	10002d1e 	bne	r2,zero,49c30 <___vfprintf_internal_r+0x3f8>
   49b7c:	b0c0030b 	ldhu	r3,12(r22)
   49b80:	01000284 	movi	r4,10
   49b84:	1805883a 	mov	r2,r3
   49b88:	1080068c 	andi	r2,r2,26
   49b8c:	113f541e 	bne	r2,r4,498e0 <__alt_data_end+0xfffe4ef0>
   49b90:	b080038b 	ldhu	r2,14(r22)
   49b94:	113fffcc 	andi	r4,r2,65535
   49b98:	2120001c 	xori	r4,r4,32768
   49b9c:	21200004 	addi	r4,r4,-32768
   49ba0:	203f4f16 	blt	r4,zero,498e0 <__alt_data_end+0xfffe4ef0>
   49ba4:	b2c01917 	ldw	r11,100(r22)
   49ba8:	b2800717 	ldw	r10,28(r22)
   49bac:	b2400917 	ldw	r9,36(r22)
   49bb0:	d9812a17 	ldw	r6,1192(sp)
   49bb4:	d9c12d17 	ldw	r7,1204(sp)
   49bb8:	02010004 	movi	r8,1024
   49bbc:	18ffff4c 	andi	r3,r3,65533
   49bc0:	d881078d 	sth	r2,1054(sp)
   49bc4:	b809883a 	mov	r4,r23
   49bc8:	d8800404 	addi	r2,sp,16
   49bcc:	d9410404 	addi	r5,sp,1040
   49bd0:	d8c1070d 	sth	r3,1052(sp)
   49bd4:	dac11d15 	stw	r11,1140(sp)
   49bd8:	da810b15 	stw	r10,1068(sp)
   49bdc:	da410d15 	stw	r9,1076(sp)
   49be0:	d8810415 	stw	r2,1040(sp)
   49be4:	d8810815 	stw	r2,1056(sp)
   49be8:	da010615 	stw	r8,1048(sp)
   49bec:	da010915 	stw	r8,1060(sp)
   49bf0:	d8010a15 	stw	zero,1064(sp)
   49bf4:	00498380 	call	49838 <___vfprintf_internal_r>
   49bf8:	1021883a 	mov	r16,r2
   49bfc:	10000416 	blt	r2,zero,49c10 <___vfprintf_internal_r+0x3d8>
   49c00:	b809883a 	mov	r4,r23
   49c04:	d9410404 	addi	r5,sp,1040
   49c08:	004d5080 	call	4d508 <_fflush_r>
   49c0c:	1007301e 	bne	r2,zero,4b8d0 <___vfprintf_internal_r+0x2098>
   49c10:	d881070b 	ldhu	r2,1052(sp)
   49c14:	1080100c 	andi	r2,r2,64
   49c18:	10000326 	beq	r2,zero,49c28 <___vfprintf_internal_r+0x3f0>
   49c1c:	b080030b 	ldhu	r2,12(r22)
   49c20:	10801014 	ori	r2,r2,64
   49c24:	b080030d 	sth	r2,12(r22)
   49c28:	8005883a 	mov	r2,r16
   49c2c:	00000106 	br	49c34 <___vfprintf_internal_r+0x3fc>
   49c30:	00bfffc4 	movi	r2,-1
   49c34:	dfc14917 	ldw	ra,1316(sp)
   49c38:	df014817 	ldw	fp,1312(sp)
   49c3c:	ddc14717 	ldw	r23,1308(sp)
   49c40:	dd814617 	ldw	r22,1304(sp)
   49c44:	dd414517 	ldw	r21,1300(sp)
   49c48:	dd014417 	ldw	r20,1296(sp)
   49c4c:	dcc14317 	ldw	r19,1292(sp)
   49c50:	dc814217 	ldw	r18,1288(sp)
   49c54:	dc414117 	ldw	r17,1284(sp)
   49c58:	dc014017 	ldw	r16,1280(sp)
   49c5c:	dec14a04 	addi	sp,sp,1320
   49c60:	f800283a 	ret
   49c64:	b809883a 	mov	r4,r23
   49c68:	b00b883a 	mov	r5,r22
   49c6c:	d9811e04 	addi	r6,sp,1144
   49c70:	00517ac0 	call	517ac <__sprint_r>
   49c74:	1000081e 	bne	r2,zero,49c98 <___vfprintf_internal_r+0x460>
   49c78:	da000404 	addi	r8,sp,16
   49c7c:	003f4506 	br	49994 <__alt_data_end+0xfffe4fa4>
   49c80:	d8812017 	ldw	r2,1152(sp)
   49c84:	10000426 	beq	r2,zero,49c98 <___vfprintf_internal_r+0x460>
   49c88:	b809883a 	mov	r4,r23
   49c8c:	b00b883a 	mov	r5,r22
   49c90:	d9811e04 	addi	r6,sp,1144
   49c94:	00517ac0 	call	517ac <__sprint_r>
   49c98:	b080030b 	ldhu	r2,12(r22)
   49c9c:	1080100c 	andi	r2,r2,64
   49ca0:	103fe31e 	bne	r2,zero,49c30 <__alt_data_end+0xfffe5240>
   49ca4:	d8812f17 	ldw	r2,1212(sp)
   49ca8:	003fe206 	br	49c34 <__alt_data_end+0xfffe5244>
   49cac:	b809883a 	mov	r4,r23
   49cb0:	004dac40 	call	4dac4 <__sinit>
   49cb4:	003ef806 	br	49898 <__alt_data_end+0xfffe4ea8>
   49cb8:	e005883a 	mov	r2,fp
   49cbc:	9cc00114 	ori	r19,r19,4
   49cc0:	e4000007 	ldb	r16,0(fp)
   49cc4:	003f4406 	br	499d8 <__alt_data_end+0xfffe4fe8>
   49cc8:	e4000007 	ldb	r16,0(fp)
   49ccc:	01000a84 	movi	r4,42
   49cd0:	e0800044 	addi	r2,fp,1
   49cd4:	8106f626 	beq	r16,r4,4b8b0 <___vfprintf_internal_r+0x2078>
   49cd8:	857ff404 	addi	r21,r16,-48
   49cdc:	1039883a 	mov	fp,r2
   49ce0:	0013883a 	mov	r9,zero
   49ce4:	957f3d36 	bltu	r18,r21,499dc <__alt_data_end+0xfffe4fec>
   49ce8:	0009883a 	mov	r4,zero
   49cec:	01400284 	movi	r5,10
   49cf0:	00453200 	call	45320 <__mulsi3>
   49cf4:	e4000007 	ldb	r16,0(fp)
   49cf8:	a889883a 	add	r4,r21,r2
   49cfc:	e7000044 	addi	fp,fp,1
   49d00:	857ff404 	addi	r21,r16,-48
   49d04:	957ff92e 	bgeu	r18,r21,49cec <__alt_data_end+0xfffe52fc>
   49d08:	2013883a 	mov	r9,r4
   49d0c:	203f330e 	bge	r4,zero,499dc <__alt_data_end+0xfffe4fec>
   49d10:	027fffc4 	movi	r9,-1
   49d14:	003f3106 	br	499dc <__alt_data_end+0xfffe4fec>
   49d18:	9cc02014 	ori	r19,r19,128
   49d1c:	e005883a 	mov	r2,fp
   49d20:	e4000007 	ldb	r16,0(fp)
   49d24:	003f2c06 	br	499d8 <__alt_data_end+0xfffe4fe8>
   49d28:	857ff404 	addi	r21,r16,-48
   49d2c:	d8012e15 	stw	zero,1208(sp)
   49d30:	e021883a 	mov	r16,fp
   49d34:	0009883a 	mov	r4,zero
   49d38:	da412c15 	stw	r9,1200(sp)
   49d3c:	01400284 	movi	r5,10
   49d40:	00453200 	call	45320 <__mulsi3>
   49d44:	81400007 	ldb	r5,0(r16)
   49d48:	1549883a 	add	r4,r2,r21
   49d4c:	e7000044 	addi	fp,fp,1
   49d50:	2d7ff404 	addi	r21,r5,-48
   49d54:	e021883a 	mov	r16,fp
   49d58:	957ff82e 	bgeu	r18,r21,49d3c <__alt_data_end+0xfffe534c>
   49d5c:	2821883a 	mov	r16,r5
   49d60:	d9012e15 	stw	r4,1208(sp)
   49d64:	da412c17 	ldw	r9,1200(sp)
   49d68:	003f1c06 	br	499dc <__alt_data_end+0xfffe4fec>
   49d6c:	da012a17 	ldw	r8,1192(sp)
   49d70:	df012a15 	stw	fp,1192(sp)
   49d74:	9839883a 	mov	fp,r19
   49d78:	dcc12b03 	ldbu	r19,1196(sp)
   49d7c:	e7000414 	ori	fp,fp,16
   49d80:	e080080c 	andi	r2,fp,32
   49d84:	dcc12785 	stb	r19,1182(sp)
   49d88:	d8c12d17 	ldw	r3,1204(sp)
   49d8c:	1001ce26 	beq	r2,zero,4a4c8 <___vfprintf_internal_r+0xc90>
   49d90:	d9012d17 	ldw	r4,1204(sp)
   49d94:	18800117 	ldw	r2,4(r3)
   49d98:	1c800017 	ldw	r18,0(r3)
   49d9c:	21000204 	addi	r4,r4,8
   49da0:	d9012d15 	stw	r4,1204(sp)
   49da4:	102b883a 	mov	r21,r2
   49da8:	10044916 	blt	r2,zero,4aed0 <___vfprintf_internal_r+0x1698>
   49dac:	dcc12783 	ldbu	r19,1182(sp)
   49db0:	da413215 	stw	r9,1224(sp)
   49db4:	00800044 	movi	r2,1
   49db8:	9546b03a 	or	r3,r18,r21
   49dbc:	48000216 	blt	r9,zero,49dc8 <___vfprintf_internal_r+0x590>
   49dc0:	013fdfc4 	movi	r4,-129
   49dc4:	e138703a 	and	fp,fp,r4
   49dc8:	1802251e 	bne	r3,zero,4a660 <___vfprintf_internal_r+0xe28>
   49dcc:	48031726 	beq	r9,zero,4aa2c <___vfprintf_internal_r+0x11f4>
   49dd0:	10803fcc 	andi	r2,r2,255
   49dd4:	00c00044 	movi	r3,1
   49dd8:	10c24526 	beq	r2,r3,4a6f0 <___vfprintf_internal_r+0xeb8>
   49ddc:	00c00084 	movi	r3,2
   49de0:	10c33426 	beq	r2,r3,4aab4 <___vfprintf_internal_r+0x127c>
   49de4:	d8c10e04 	addi	r3,sp,1080
   49de8:	9008d0fa 	srli	r4,r18,3
   49dec:	a80a977a 	slli	r5,r21,29
   49df0:	a82ad0fa 	srli	r21,r21,3
   49df4:	948001cc 	andi	r18,r18,7
   49df8:	90800c04 	addi	r2,r18,48
   49dfc:	18ffffc4 	addi	r3,r3,-1
   49e00:	2924b03a 	or	r18,r5,r4
   49e04:	18800005 	stb	r2,0(r3)
   49e08:	9548b03a 	or	r4,r18,r21
   49e0c:	203ff61e 	bne	r4,zero,49de8 <__alt_data_end+0xfffe53f8>
   49e10:	e100004c 	andi	r4,fp,1
   49e14:	d8c13115 	stw	r3,1220(sp)
   49e18:	20039a1e 	bne	r4,zero,4ac84 <___vfprintf_internal_r+0x144c>
   49e1c:	d8812817 	ldw	r2,1184(sp)
   49e20:	10e3c83a 	sub	r17,r2,r3
   49e24:	8805883a 	mov	r2,r17
   49e28:	8a40010e 	bge	r17,r9,49e30 <___vfprintf_internal_r+0x5f8>
   49e2c:	4805883a 	mov	r2,r9
   49e30:	d8812b15 	stw	r2,1196(sp)
   49e34:	d8013415 	stw	zero,1232(sp)
   49e38:	98803fcc 	andi	r2,r19,255
   49e3c:	1080201c 	xori	r2,r2,128
   49e40:	10bfe004 	addi	r2,r2,-128
   49e44:	10000326 	beq	r2,zero,49e54 <___vfprintf_internal_r+0x61c>
   49e48:	d8c12b17 	ldw	r3,1196(sp)
   49e4c:	18c00044 	addi	r3,r3,1
   49e50:	d8c12b15 	stw	r3,1196(sp)
   49e54:	e0c0008c 	andi	r3,fp,2
   49e58:	d8c12c15 	stw	r3,1200(sp)
   49e5c:	18000326 	beq	r3,zero,49e6c <___vfprintf_internal_r+0x634>
   49e60:	d8c12b17 	ldw	r3,1196(sp)
   49e64:	18c00084 	addi	r3,r3,2
   49e68:	d8c12b15 	stw	r3,1196(sp)
   49e6c:	e0c0210c 	andi	r3,fp,132
   49e70:	d8c13015 	stw	r3,1216(sp)
   49e74:	1801f81e 	bne	r3,zero,4a658 <___vfprintf_internal_r+0xe20>
   49e78:	d9012e17 	ldw	r4,1208(sp)
   49e7c:	d8c12b17 	ldw	r3,1196(sp)
   49e80:	20ebc83a 	sub	r21,r4,r3
   49e84:	0541f40e 	bge	zero,r21,4a658 <___vfprintf_internal_r+0xe20>
   49e88:	02400404 	movi	r9,16
   49e8c:	d8c12017 	ldw	r3,1152(sp)
   49e90:	d8811f17 	ldw	r2,1148(sp)
   49e94:	4d45750e 	bge	r9,r21,4b46c <___vfprintf_internal_r+0x1c34>
   49e98:	014001b4 	movhi	r5,6
   49e9c:	29640784 	addi	r5,r5,-28642
   49ea0:	d9413615 	stw	r5,1240(sp)
   49ea4:	4827883a 	mov	r19,r9
   49ea8:	048001c4 	movi	r18,7
   49eac:	00000306 	br	49ebc <___vfprintf_internal_r+0x684>
   49eb0:	ad7ffc04 	addi	r21,r21,-16
   49eb4:	42000204 	addi	r8,r8,8
   49eb8:	9d40130e 	bge	r19,r21,49f08 <___vfprintf_internal_r+0x6d0>
   49ebc:	010001b4 	movhi	r4,6
   49ec0:	18c00404 	addi	r3,r3,16
   49ec4:	10800044 	addi	r2,r2,1
   49ec8:	21240784 	addi	r4,r4,-28642
   49ecc:	41000015 	stw	r4,0(r8)
   49ed0:	44c00115 	stw	r19,4(r8)
   49ed4:	d8c12015 	stw	r3,1152(sp)
   49ed8:	d8811f15 	stw	r2,1148(sp)
   49edc:	90bff40e 	bge	r18,r2,49eb0 <__alt_data_end+0xfffe54c0>
   49ee0:	b809883a 	mov	r4,r23
   49ee4:	b00b883a 	mov	r5,r22
   49ee8:	d9811e04 	addi	r6,sp,1144
   49eec:	00517ac0 	call	517ac <__sprint_r>
   49ef0:	103f691e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   49ef4:	ad7ffc04 	addi	r21,r21,-16
   49ef8:	d8c12017 	ldw	r3,1152(sp)
   49efc:	d8811f17 	ldw	r2,1148(sp)
   49f00:	da000404 	addi	r8,sp,16
   49f04:	9d7fed16 	blt	r19,r21,49ebc <__alt_data_end+0xfffe54cc>
   49f08:	d9413617 	ldw	r5,1240(sp)
   49f0c:	a8c7883a 	add	r3,r21,r3
   49f10:	10800044 	addi	r2,r2,1
   49f14:	41400015 	stw	r5,0(r8)
   49f18:	45400115 	stw	r21,4(r8)
   49f1c:	d8c12015 	stw	r3,1152(sp)
   49f20:	d8811f15 	stw	r2,1148(sp)
   49f24:	010001c4 	movi	r4,7
   49f28:	20832b16 	blt	r4,r2,4abd8 <___vfprintf_internal_r+0x13a0>
   49f2c:	d8812787 	ldb	r2,1182(sp)
   49f30:	42000204 	addi	r8,r8,8
   49f34:	10000c26 	beq	r2,zero,49f68 <___vfprintf_internal_r+0x730>
   49f38:	d8811f17 	ldw	r2,1148(sp)
   49f3c:	d9012784 	addi	r4,sp,1182
   49f40:	18c00044 	addi	r3,r3,1
   49f44:	10800044 	addi	r2,r2,1
   49f48:	41000015 	stw	r4,0(r8)
   49f4c:	01000044 	movi	r4,1
   49f50:	41000115 	stw	r4,4(r8)
   49f54:	d8c12015 	stw	r3,1152(sp)
   49f58:	d8811f15 	stw	r2,1148(sp)
   49f5c:	010001c4 	movi	r4,7
   49f60:	2082c416 	blt	r4,r2,4aa74 <___vfprintf_internal_r+0x123c>
   49f64:	42000204 	addi	r8,r8,8
   49f68:	d8812c17 	ldw	r2,1200(sp)
   49f6c:	10000c26 	beq	r2,zero,49fa0 <___vfprintf_internal_r+0x768>
   49f70:	d8811f17 	ldw	r2,1148(sp)
   49f74:	d9012704 	addi	r4,sp,1180
   49f78:	18c00084 	addi	r3,r3,2
   49f7c:	10800044 	addi	r2,r2,1
   49f80:	41000015 	stw	r4,0(r8)
   49f84:	01000084 	movi	r4,2
   49f88:	41000115 	stw	r4,4(r8)
   49f8c:	d8c12015 	stw	r3,1152(sp)
   49f90:	d8811f15 	stw	r2,1148(sp)
   49f94:	010001c4 	movi	r4,7
   49f98:	2082be16 	blt	r4,r2,4aa94 <___vfprintf_internal_r+0x125c>
   49f9c:	42000204 	addi	r8,r8,8
   49fa0:	d9013017 	ldw	r4,1216(sp)
   49fa4:	00802004 	movi	r2,128
   49fa8:	20822026 	beq	r4,r2,4a82c <___vfprintf_internal_r+0xff4>
   49fac:	d9413217 	ldw	r5,1224(sp)
   49fb0:	2c67c83a 	sub	r19,r5,r17
   49fb4:	04c0260e 	bge	zero,r19,4a050 <___vfprintf_internal_r+0x818>
   49fb8:	05400404 	movi	r21,16
   49fbc:	d8811f17 	ldw	r2,1148(sp)
   49fc0:	acc4720e 	bge	r21,r19,4b18c <___vfprintf_internal_r+0x1954>
   49fc4:	014001b4 	movhi	r5,6
   49fc8:	29640384 	addi	r5,r5,-28658
   49fcc:	d9412c15 	stw	r5,1200(sp)
   49fd0:	048001c4 	movi	r18,7
   49fd4:	00000306 	br	49fe4 <___vfprintf_internal_r+0x7ac>
   49fd8:	9cfffc04 	addi	r19,r19,-16
   49fdc:	42000204 	addi	r8,r8,8
   49fe0:	acc0110e 	bge	r21,r19,4a028 <___vfprintf_internal_r+0x7f0>
   49fe4:	18c00404 	addi	r3,r3,16
   49fe8:	10800044 	addi	r2,r2,1
   49fec:	45000015 	stw	r20,0(r8)
   49ff0:	45400115 	stw	r21,4(r8)
   49ff4:	d8c12015 	stw	r3,1152(sp)
   49ff8:	d8811f15 	stw	r2,1148(sp)
   49ffc:	90bff60e 	bge	r18,r2,49fd8 <__alt_data_end+0xfffe55e8>
   4a000:	b809883a 	mov	r4,r23
   4a004:	b00b883a 	mov	r5,r22
   4a008:	d9811e04 	addi	r6,sp,1144
   4a00c:	00517ac0 	call	517ac <__sprint_r>
   4a010:	103f211e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4a014:	9cfffc04 	addi	r19,r19,-16
   4a018:	d8c12017 	ldw	r3,1152(sp)
   4a01c:	d8811f17 	ldw	r2,1148(sp)
   4a020:	da000404 	addi	r8,sp,16
   4a024:	acffef16 	blt	r21,r19,49fe4 <__alt_data_end+0xfffe55f4>
   4a028:	d9012c17 	ldw	r4,1200(sp)
   4a02c:	1cc7883a 	add	r3,r3,r19
   4a030:	10800044 	addi	r2,r2,1
   4a034:	41000015 	stw	r4,0(r8)
   4a038:	44c00115 	stw	r19,4(r8)
   4a03c:	d8c12015 	stw	r3,1152(sp)
   4a040:	d8811f15 	stw	r2,1148(sp)
   4a044:	010001c4 	movi	r4,7
   4a048:	20828216 	blt	r4,r2,4aa54 <___vfprintf_internal_r+0x121c>
   4a04c:	42000204 	addi	r8,r8,8
   4a050:	e080400c 	andi	r2,fp,256
   4a054:	1001ac1e 	bne	r2,zero,4a708 <___vfprintf_internal_r+0xed0>
   4a058:	d8811f17 	ldw	r2,1148(sp)
   4a05c:	d9413117 	ldw	r5,1220(sp)
   4a060:	1c47883a 	add	r3,r3,r17
   4a064:	10800044 	addi	r2,r2,1
   4a068:	41400015 	stw	r5,0(r8)
   4a06c:	44400115 	stw	r17,4(r8)
   4a070:	d8c12015 	stw	r3,1152(sp)
   4a074:	d8811f15 	stw	r2,1148(sp)
   4a078:	010001c4 	movi	r4,7
   4a07c:	20825d16 	blt	r4,r2,4a9f4 <___vfprintf_internal_r+0x11bc>
   4a080:	42000204 	addi	r8,r8,8
   4a084:	e080010c 	andi	r2,fp,4
   4a088:	10003126 	beq	r2,zero,4a150 <___vfprintf_internal_r+0x918>
   4a08c:	d8812e17 	ldw	r2,1208(sp)
   4a090:	d9012b17 	ldw	r4,1196(sp)
   4a094:	1121c83a 	sub	r16,r2,r4
   4a098:	04002d0e 	bge	zero,r16,4a150 <___vfprintf_internal_r+0x918>
   4a09c:	04400404 	movi	r17,16
   4a0a0:	d8811f17 	ldw	r2,1148(sp)
   4a0a4:	8c05340e 	bge	r17,r16,4b578 <___vfprintf_internal_r+0x1d40>
   4a0a8:	010001b4 	movhi	r4,6
   4a0ac:	21240784 	addi	r4,r4,-28642
   4a0b0:	d9013615 	stw	r4,1240(sp)
   4a0b4:	048001c4 	movi	r18,7
   4a0b8:	00000306 	br	4a0c8 <___vfprintf_internal_r+0x890>
   4a0bc:	843ffc04 	addi	r16,r16,-16
   4a0c0:	42000204 	addi	r8,r8,8
   4a0c4:	8c00130e 	bge	r17,r16,4a114 <___vfprintf_internal_r+0x8dc>
   4a0c8:	014001b4 	movhi	r5,6
   4a0cc:	18c00404 	addi	r3,r3,16
   4a0d0:	10800044 	addi	r2,r2,1
   4a0d4:	29640784 	addi	r5,r5,-28642
   4a0d8:	41400015 	stw	r5,0(r8)
   4a0dc:	44400115 	stw	r17,4(r8)
   4a0e0:	d8c12015 	stw	r3,1152(sp)
   4a0e4:	d8811f15 	stw	r2,1148(sp)
   4a0e8:	90bff40e 	bge	r18,r2,4a0bc <__alt_data_end+0xfffe56cc>
   4a0ec:	b809883a 	mov	r4,r23
   4a0f0:	b00b883a 	mov	r5,r22
   4a0f4:	d9811e04 	addi	r6,sp,1144
   4a0f8:	00517ac0 	call	517ac <__sprint_r>
   4a0fc:	103ee61e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4a100:	843ffc04 	addi	r16,r16,-16
   4a104:	d8c12017 	ldw	r3,1152(sp)
   4a108:	d8811f17 	ldw	r2,1148(sp)
   4a10c:	da000404 	addi	r8,sp,16
   4a110:	8c3fed16 	blt	r17,r16,4a0c8 <__alt_data_end+0xfffe56d8>
   4a114:	d9013617 	ldw	r4,1240(sp)
   4a118:	1c07883a 	add	r3,r3,r16
   4a11c:	10800044 	addi	r2,r2,1
   4a120:	41000015 	stw	r4,0(r8)
   4a124:	44000115 	stw	r16,4(r8)
   4a128:	d8c12015 	stw	r3,1152(sp)
   4a12c:	d8811f15 	stw	r2,1148(sp)
   4a130:	010001c4 	movi	r4,7
   4a134:	2080060e 	bge	r4,r2,4a150 <___vfprintf_internal_r+0x918>
   4a138:	b809883a 	mov	r4,r23
   4a13c:	b00b883a 	mov	r5,r22
   4a140:	d9811e04 	addi	r6,sp,1144
   4a144:	00517ac0 	call	517ac <__sprint_r>
   4a148:	103ed31e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4a14c:	d8c12017 	ldw	r3,1152(sp)
   4a150:	df012b17 	ldw	fp,1196(sp)
   4a154:	d9412e17 	ldw	r5,1208(sp)
   4a158:	e140010e 	bge	fp,r5,4a160 <___vfprintf_internal_r+0x928>
   4a15c:	2839883a 	mov	fp,r5
   4a160:	d8812f17 	ldw	r2,1212(sp)
   4a164:	1705883a 	add	r2,r2,fp
   4a168:	d8812f15 	stw	r2,1212(sp)
   4a16c:	1802291e 	bne	r3,zero,4aa14 <___vfprintf_internal_r+0x11dc>
   4a170:	d8c12a17 	ldw	r3,1192(sp)
   4a174:	d8011f15 	stw	zero,1148(sp)
   4a178:	da000404 	addi	r8,sp,16
   4a17c:	18800007 	ldb	r2,0(r3)
   4a180:	103ded1e 	bne	r2,zero,49938 <__alt_data_end+0xfffe4f48>
   4a184:	dc012a17 	ldw	r16,1192(sp)
   4a188:	003e0506 	br	499a0 <__alt_data_end+0xfffe4fb0>
   4a18c:	d9012d17 	ldw	r4,1204(sp)
   4a190:	d9412d17 	ldw	r5,1204(sp)
   4a194:	da012a17 	ldw	r8,1192(sp)
   4a198:	21000017 	ldw	r4,0(r4)
   4a19c:	29400117 	ldw	r5,4(r5)
   4a1a0:	df012a15 	stw	fp,1192(sp)
   4a1a4:	9839883a 	mov	fp,r19
   4a1a8:	dcc12b03 	ldbu	r19,1196(sp)
   4a1ac:	d9013715 	stw	r4,1244(sp)
   4a1b0:	d9413915 	stw	r5,1252(sp)
   4a1b4:	da013f15 	stw	r8,1276(sp)
   4a1b8:	da413e15 	stw	r9,1272(sp)
   4a1bc:	dcc12785 	stb	r19,1182(sp)
   4a1c0:	00501680 	call	50168 <__fpclassifyd>
   4a1c4:	d8c12d17 	ldw	r3,1204(sp)
   4a1c8:	04400044 	movi	r17,1
   4a1cc:	da013f17 	ldw	r8,1276(sp)
   4a1d0:	1c800204 	addi	r18,r3,8
   4a1d4:	da413e17 	ldw	r9,1272(sp)
   4a1d8:	d9013717 	ldw	r4,1244(sp)
   4a1dc:	d9413917 	ldw	r5,1252(sp)
   4a1e0:	1443451e 	bne	r2,r17,4aef8 <___vfprintf_internal_r+0x16c0>
   4a1e4:	000d883a 	mov	r6,zero
   4a1e8:	000f883a 	mov	r7,zero
   4a1ec:	0054bb40 	call	54bb4 <__ledf2>
   4a1f0:	da013f17 	ldw	r8,1276(sp)
   4a1f4:	1004fe16 	blt	r2,zero,4b5f0 <___vfprintf_internal_r+0x1db8>
   4a1f8:	dcc12783 	ldbu	r19,1182(sp)
   4a1fc:	008011c4 	movi	r2,71
   4a200:	14045d0e 	bge	r2,r16,4b378 <___vfprintf_internal_r+0x1b40>
   4a204:	014001b4 	movhi	r5,6
   4a208:	2963ec04 	addi	r5,r5,-28752
   4a20c:	d9413115 	stw	r5,1220(sp)
   4a210:	00c000c4 	movi	r3,3
   4a214:	00bfdfc4 	movi	r2,-129
   4a218:	d8c12b15 	stw	r3,1196(sp)
   4a21c:	e0b8703a 	and	fp,fp,r2
   4a220:	dc812d15 	stw	r18,1204(sp)
   4a224:	1823883a 	mov	r17,r3
   4a228:	d8013215 	stw	zero,1224(sp)
   4a22c:	d8013415 	stw	zero,1232(sp)
   4a230:	003f0106 	br	49e38 <__alt_data_end+0xfffe5448>
   4a234:	9cc00214 	ori	r19,r19,8
   4a238:	e005883a 	mov	r2,fp
   4a23c:	e4000007 	ldb	r16,0(fp)
   4a240:	003de506 	br	499d8 <__alt_data_end+0xfffe4fe8>
   4a244:	da012a17 	ldw	r8,1192(sp)
   4a248:	df012a15 	stw	fp,1192(sp)
   4a24c:	9f000414 	ori	fp,r19,16
   4a250:	e0c0080c 	andi	r3,fp,32
   4a254:	d8812d17 	ldw	r2,1204(sp)
   4a258:	18007626 	beq	r3,zero,4a434 <___vfprintf_internal_r+0xbfc>
   4a25c:	d9412d17 	ldw	r5,1204(sp)
   4a260:	14800017 	ldw	r18,0(r2)
   4a264:	15400117 	ldw	r21,4(r2)
   4a268:	29400204 	addi	r5,r5,8
   4a26c:	d9412d15 	stw	r5,1204(sp)
   4a270:	0005883a 	mov	r2,zero
   4a274:	9546b03a 	or	r3,r18,r21
   4a278:	d8012785 	stb	zero,1182(sp)
   4a27c:	da413215 	stw	r9,1224(sp)
   4a280:	0027883a 	mov	r19,zero
   4a284:	003ecd06 	br	49dbc <__alt_data_end+0xfffe53cc>
   4a288:	da012a17 	ldw	r8,1192(sp)
   4a28c:	df012a15 	stw	fp,1192(sp)
   4a290:	9f000414 	ori	fp,r19,16
   4a294:	e0c0080c 	andi	r3,fp,32
   4a298:	d8812d17 	ldw	r2,1204(sp)
   4a29c:	18002c26 	beq	r3,zero,4a350 <___vfprintf_internal_r+0xb18>
   4a2a0:	d9012d17 	ldw	r4,1204(sp)
   4a2a4:	14800017 	ldw	r18,0(r2)
   4a2a8:	15400117 	ldw	r21,4(r2)
   4a2ac:	21000204 	addi	r4,r4,8
   4a2b0:	d9012d15 	stw	r4,1204(sp)
   4a2b4:	00800044 	movi	r2,1
   4a2b8:	9546b03a 	or	r3,r18,r21
   4a2bc:	003fee06 	br	4a278 <__alt_data_end+0xfffe5888>
   4a2c0:	da012a17 	ldw	r8,1192(sp)
   4a2c4:	df012a15 	stw	fp,1192(sp)
   4a2c8:	9839883a 	mov	fp,r19
   4a2cc:	dcc12b03 	ldbu	r19,1196(sp)
   4a2d0:	014001b4 	movhi	r5,6
   4a2d4:	2963ef04 	addi	r5,r5,-28740
   4a2d8:	dcc12785 	stb	r19,1182(sp)
   4a2dc:	d9413b15 	stw	r5,1260(sp)
   4a2e0:	e0c0080c 	andi	r3,fp,32
   4a2e4:	d8812d17 	ldw	r2,1204(sp)
   4a2e8:	18002e26 	beq	r3,zero,4a3a4 <___vfprintf_internal_r+0xb6c>
   4a2ec:	d9412d17 	ldw	r5,1204(sp)
   4a2f0:	14800017 	ldw	r18,0(r2)
   4a2f4:	15400117 	ldw	r21,4(r2)
   4a2f8:	29400204 	addi	r5,r5,8
   4a2fc:	d9412d15 	stw	r5,1204(sp)
   4a300:	e080004c 	andi	r2,fp,1
   4a304:	10025c26 	beq	r2,zero,4ac78 <___vfprintf_internal_r+0x1440>
   4a308:	9546b03a 	or	r3,r18,r21
   4a30c:	18038f26 	beq	r3,zero,4b14c <___vfprintf_internal_r+0x1914>
   4a310:	00800c04 	movi	r2,48
   4a314:	d8812705 	stb	r2,1180(sp)
   4a318:	dc012745 	stb	r16,1181(sp)
   4a31c:	e7000094 	ori	fp,fp,2
   4a320:	00800084 	movi	r2,2
   4a324:	003fd406 	br	4a278 <__alt_data_end+0xfffe5888>
   4a328:	9cc00814 	ori	r19,r19,32
   4a32c:	e005883a 	mov	r2,fp
   4a330:	e4000007 	ldb	r16,0(fp)
   4a334:	003da806 	br	499d8 <__alt_data_end+0xfffe4fe8>
   4a338:	da012a17 	ldw	r8,1192(sp)
   4a33c:	df012a15 	stw	fp,1192(sp)
   4a340:	9839883a 	mov	fp,r19
   4a344:	e0c0080c 	andi	r3,fp,32
   4a348:	d8812d17 	ldw	r2,1204(sp)
   4a34c:	183fd41e 	bne	r3,zero,4a2a0 <__alt_data_end+0xfffe58b0>
   4a350:	e0c0040c 	andi	r3,fp,16
   4a354:	18035f26 	beq	r3,zero,4b0d4 <___vfprintf_internal_r+0x189c>
   4a358:	d9412d17 	ldw	r5,1204(sp)
   4a35c:	14800017 	ldw	r18,0(r2)
   4a360:	002b883a 	mov	r21,zero
   4a364:	29400104 	addi	r5,r5,4
   4a368:	d9412d15 	stw	r5,1204(sp)
   4a36c:	00800044 	movi	r2,1
   4a370:	9007883a 	mov	r3,r18
   4a374:	003fc006 	br	4a278 <__alt_data_end+0xfffe5888>
   4a378:	da012a17 	ldw	r8,1192(sp)
   4a37c:	df012a15 	stw	fp,1192(sp)
   4a380:	9839883a 	mov	fp,r19
   4a384:	dcc12b03 	ldbu	r19,1196(sp)
   4a388:	010001b4 	movhi	r4,6
   4a38c:	2123f404 	addi	r4,r4,-28720
   4a390:	d9013b15 	stw	r4,1260(sp)
   4a394:	dcc12785 	stb	r19,1182(sp)
   4a398:	e0c0080c 	andi	r3,fp,32
   4a39c:	d8812d17 	ldw	r2,1204(sp)
   4a3a0:	183fd21e 	bne	r3,zero,4a2ec <__alt_data_end+0xfffe58fc>
   4a3a4:	e0c0040c 	andi	r3,fp,16
   4a3a8:	18035426 	beq	r3,zero,4b0fc <___vfprintf_internal_r+0x18c4>
   4a3ac:	d8c12d17 	ldw	r3,1204(sp)
   4a3b0:	14800017 	ldw	r18,0(r2)
   4a3b4:	002b883a 	mov	r21,zero
   4a3b8:	18c00104 	addi	r3,r3,4
   4a3bc:	d8c12d15 	stw	r3,1204(sp)
   4a3c0:	003fcf06 	br	4a300 <__alt_data_end+0xfffe5910>
   4a3c4:	e4000007 	ldb	r16,0(fp)
   4a3c8:	00801b04 	movi	r2,108
   4a3cc:	8083f726 	beq	r16,r2,4b3ac <___vfprintf_internal_r+0x1b74>
   4a3d0:	9cc00414 	ori	r19,r19,16
   4a3d4:	e005883a 	mov	r2,fp
   4a3d8:	003d7f06 	br	499d8 <__alt_data_end+0xfffe4fe8>
   4a3dc:	da012a17 	ldw	r8,1192(sp)
   4a3e0:	df012a15 	stw	fp,1192(sp)
   4a3e4:	9839883a 	mov	fp,r19
   4a3e8:	dcc12b03 	ldbu	r19,1196(sp)
   4a3ec:	e080080c 	andi	r2,fp,32
   4a3f0:	dcc12785 	stb	r19,1182(sp)
   4a3f4:	10032226 	beq	r2,zero,4b080 <___vfprintf_internal_r+0x1848>
   4a3f8:	d9412d17 	ldw	r5,1204(sp)
   4a3fc:	d9012f17 	ldw	r4,1212(sp)
   4a400:	28800017 	ldw	r2,0(r5)
   4a404:	2007d7fa 	srai	r3,r4,31
   4a408:	29400104 	addi	r5,r5,4
   4a40c:	d9412d15 	stw	r5,1204(sp)
   4a410:	11000015 	stw	r4,0(r2)
   4a414:	10c00115 	stw	r3,4(r2)
   4a418:	003d4406 	br	4992c <__alt_data_end+0xfffe4f3c>
   4a41c:	da012a17 	ldw	r8,1192(sp)
   4a420:	df012a15 	stw	fp,1192(sp)
   4a424:	9839883a 	mov	fp,r19
   4a428:	e0c0080c 	andi	r3,fp,32
   4a42c:	d8812d17 	ldw	r2,1204(sp)
   4a430:	183f8a1e 	bne	r3,zero,4a25c <__alt_data_end+0xfffe586c>
   4a434:	e0c0040c 	andi	r3,fp,16
   4a438:	18031c26 	beq	r3,zero,4b0ac <___vfprintf_internal_r+0x1874>
   4a43c:	14800017 	ldw	r18,0(r2)
   4a440:	d8812d17 	ldw	r2,1204(sp)
   4a444:	002b883a 	mov	r21,zero
   4a448:	9007883a 	mov	r3,r18
   4a44c:	10800104 	addi	r2,r2,4
   4a450:	d8812d15 	stw	r2,1204(sp)
   4a454:	0005883a 	mov	r2,zero
   4a458:	003f8706 	br	4a278 <__alt_data_end+0xfffe5888>
   4a45c:	d9412d17 	ldw	r5,1204(sp)
   4a460:	00800c04 	movi	r2,48
   4a464:	d8812705 	stb	r2,1180(sp)
   4a468:	2c800017 	ldw	r18,0(r5)
   4a46c:	00801e04 	movi	r2,120
   4a470:	d8812745 	stb	r2,1181(sp)
   4a474:	008001b4 	movhi	r2,6
   4a478:	10a3f404 	addi	r2,r2,-28720
   4a47c:	29400104 	addi	r5,r5,4
   4a480:	da012a17 	ldw	r8,1192(sp)
   4a484:	d8813b15 	stw	r2,1260(sp)
   4a488:	df012a15 	stw	fp,1192(sp)
   4a48c:	002b883a 	mov	r21,zero
   4a490:	9f000094 	ori	fp,r19,2
   4a494:	d9412d15 	stw	r5,1204(sp)
   4a498:	00800084 	movi	r2,2
   4a49c:	04001e04 	movi	r16,120
   4a4a0:	9007883a 	mov	r3,r18
   4a4a4:	003f7406 	br	4a278 <__alt_data_end+0xfffe5888>
   4a4a8:	da012a17 	ldw	r8,1192(sp)
   4a4ac:	df012a15 	stw	fp,1192(sp)
   4a4b0:	9839883a 	mov	fp,r19
   4a4b4:	dcc12b03 	ldbu	r19,1196(sp)
   4a4b8:	e080080c 	andi	r2,fp,32
   4a4bc:	d8c12d17 	ldw	r3,1204(sp)
   4a4c0:	dcc12785 	stb	r19,1182(sp)
   4a4c4:	103e321e 	bne	r2,zero,49d90 <__alt_data_end+0xfffe53a0>
   4a4c8:	e080040c 	andi	r2,fp,16
   4a4cc:	10031326 	beq	r2,zero,4b11c <___vfprintf_internal_r+0x18e4>
   4a4d0:	1c800017 	ldw	r18,0(r3)
   4a4d4:	d9412d17 	ldw	r5,1204(sp)
   4a4d8:	902bd7fa 	srai	r21,r18,31
   4a4dc:	29400104 	addi	r5,r5,4
   4a4e0:	d9412d15 	stw	r5,1204(sp)
   4a4e4:	a805883a 	mov	r2,r21
   4a4e8:	003e2f06 	br	49da8 <__alt_data_end+0xfffe53b8>
   4a4ec:	9cc01014 	ori	r19,r19,64
   4a4f0:	e005883a 	mov	r2,fp
   4a4f4:	e4000007 	ldb	r16,0(fp)
   4a4f8:	003d3706 	br	499d8 <__alt_data_end+0xfffe4fe8>
   4a4fc:	d8c12d17 	ldw	r3,1204(sp)
   4a500:	d9012d17 	ldw	r4,1204(sp)
   4a504:	da012a17 	ldw	r8,1192(sp)
   4a508:	18800017 	ldw	r2,0(r3)
   4a50c:	21000104 	addi	r4,r4,4
   4a510:	00c00044 	movi	r3,1
   4a514:	df012a15 	stw	fp,1192(sp)
   4a518:	d8c12b15 	stw	r3,1196(sp)
   4a51c:	9839883a 	mov	fp,r19
   4a520:	d8012785 	stb	zero,1182(sp)
   4a524:	d8810405 	stb	r2,1040(sp)
   4a528:	d9012d15 	stw	r4,1204(sp)
   4a52c:	1823883a 	mov	r17,r3
   4a530:	d8c10404 	addi	r3,sp,1040
   4a534:	d8013215 	stw	zero,1224(sp)
   4a538:	d8013415 	stw	zero,1232(sp)
   4a53c:	d8c13115 	stw	r3,1220(sp)
   4a540:	0005883a 	mov	r2,zero
   4a544:	003e4306 	br	49e54 <__alt_data_end+0xfffe5464>
   4a548:	d8812b07 	ldb	r2,1196(sp)
   4a54c:	1002fc1e 	bne	r2,zero,4b140 <___vfprintf_internal_r+0x1908>
   4a550:	00c00804 	movi	r3,32
   4a554:	d8c12b05 	stb	r3,1196(sp)
   4a558:	e005883a 	mov	r2,fp
   4a55c:	e4000007 	ldb	r16,0(fp)
   4a560:	003d1d06 	br	499d8 <__alt_data_end+0xfffe4fe8>
   4a564:	9cc00054 	ori	r19,r19,1
   4a568:	e005883a 	mov	r2,fp
   4a56c:	e4000007 	ldb	r16,0(fp)
   4a570:	003d1906 	br	499d8 <__alt_data_end+0xfffe4fe8>
   4a574:	d9012d17 	ldw	r4,1204(sp)
   4a578:	d9412d17 	ldw	r5,1204(sp)
   4a57c:	21000017 	ldw	r4,0(r4)
   4a580:	28c00104 	addi	r3,r5,4
   4a584:	d9012e15 	stw	r4,1208(sp)
   4a588:	20038c16 	blt	r4,zero,4b3bc <___vfprintf_internal_r+0x1b84>
   4a58c:	d8c12d15 	stw	r3,1204(sp)
   4a590:	e005883a 	mov	r2,fp
   4a594:	e4000007 	ldb	r16,0(fp)
   4a598:	003d0f06 	br	499d8 <__alt_data_end+0xfffe4fe8>
   4a59c:	00c00ac4 	movi	r3,43
   4a5a0:	d8c12b05 	stb	r3,1196(sp)
   4a5a4:	e005883a 	mov	r2,fp
   4a5a8:	e4000007 	ldb	r16,0(fp)
   4a5ac:	003d0a06 	br	499d8 <__alt_data_end+0xfffe4fe8>
   4a5b0:	d8c12d17 	ldw	r3,1204(sp)
   4a5b4:	d9012d17 	ldw	r4,1204(sp)
   4a5b8:	da012a17 	ldw	r8,1192(sp)
   4a5bc:	18c00017 	ldw	r3,0(r3)
   4a5c0:	df012a15 	stw	fp,1192(sp)
   4a5c4:	d8012785 	stb	zero,1182(sp)
   4a5c8:	d8c13115 	stw	r3,1220(sp)
   4a5cc:	9839883a 	mov	fp,r19
   4a5d0:	24800104 	addi	r18,r4,4
   4a5d4:	1803f726 	beq	r3,zero,4b5b4 <___vfprintf_internal_r+0x1d7c>
   4a5d8:	d9013117 	ldw	r4,1220(sp)
   4a5dc:	48038916 	blt	r9,zero,4b404 <___vfprintf_internal_r+0x1bcc>
   4a5e0:	480d883a 	mov	r6,r9
   4a5e4:	000b883a 	mov	r5,zero
   4a5e8:	da013f15 	stw	r8,1276(sp)
   4a5ec:	da413e15 	stw	r9,1272(sp)
   4a5f0:	004e7d40 	call	4e7d4 <memchr>
   4a5f4:	da013f17 	ldw	r8,1276(sp)
   4a5f8:	da413e17 	ldw	r9,1272(sp)
   4a5fc:	10045926 	beq	r2,zero,4b764 <___vfprintf_internal_r+0x1f2c>
   4a600:	d8c13117 	ldw	r3,1220(sp)
   4a604:	10e3c83a 	sub	r17,r2,r3
   4a608:	4c433516 	blt	r9,r17,4b2e0 <___vfprintf_internal_r+0x1aa8>
   4a60c:	8805883a 	mov	r2,r17
   4a610:	88038116 	blt	r17,zero,4b418 <___vfprintf_internal_r+0x1be0>
   4a614:	dcc12783 	ldbu	r19,1182(sp)
   4a618:	d8812b15 	stw	r2,1196(sp)
   4a61c:	dc812d15 	stw	r18,1204(sp)
   4a620:	d8013215 	stw	zero,1224(sp)
   4a624:	d8013415 	stw	zero,1232(sp)
   4a628:	003e0306 	br	49e38 <__alt_data_end+0xfffe5448>
   4a62c:	da012a17 	ldw	r8,1192(sp)
   4a630:	df012a15 	stw	fp,1192(sp)
   4a634:	9839883a 	mov	fp,r19
   4a638:	dcc12b03 	ldbu	r19,1196(sp)
   4a63c:	dcc12785 	stb	r19,1182(sp)
   4a640:	803d8f26 	beq	r16,zero,49c80 <__alt_data_end+0xfffe5290>
   4a644:	00c00044 	movi	r3,1
   4a648:	d8c12b15 	stw	r3,1196(sp)
   4a64c:	dc010405 	stb	r16,1040(sp)
   4a650:	d8012785 	stb	zero,1182(sp)
   4a654:	003fb506 	br	4a52c <__alt_data_end+0xfffe5b3c>
   4a658:	d8c12017 	ldw	r3,1152(sp)
   4a65c:	003e3506 	br	49f34 <__alt_data_end+0xfffe5544>
   4a660:	10803fcc 	andi	r2,r2,255
   4a664:	00c00044 	movi	r3,1
   4a668:	10fddc1e 	bne	r2,r3,49ddc <__alt_data_end+0xfffe53ec>
   4a66c:	a800021e 	bne	r21,zero,4a678 <___vfprintf_internal_r+0xe40>
   4a670:	00800244 	movi	r2,9
   4a674:	14801e2e 	bgeu	r2,r18,4a6f0 <___vfprintf_internal_r+0xeb8>
   4a678:	dc012b15 	stw	r16,1196(sp)
   4a67c:	dc410e04 	addi	r17,sp,1080
   4a680:	9021883a 	mov	r16,r18
   4a684:	da012c15 	stw	r8,1200(sp)
   4a688:	a825883a 	mov	r18,r21
   4a68c:	482b883a 	mov	r21,r9
   4a690:	8009883a 	mov	r4,r16
   4a694:	900b883a 	mov	r5,r18
   4a698:	01800284 	movi	r6,10
   4a69c:	000f883a 	mov	r7,zero
   4a6a0:	0053b980 	call	53b98 <__umoddi3>
   4a6a4:	10800c04 	addi	r2,r2,48
   4a6a8:	8c7fffc4 	addi	r17,r17,-1
   4a6ac:	8009883a 	mov	r4,r16
   4a6b0:	900b883a 	mov	r5,r18
   4a6b4:	01800284 	movi	r6,10
   4a6b8:	000f883a 	mov	r7,zero
   4a6bc:	88800005 	stb	r2,0(r17)
   4a6c0:	00535580 	call	53558 <__udivdi3>
   4a6c4:	1021883a 	mov	r16,r2
   4a6c8:	10c4b03a 	or	r2,r2,r3
   4a6cc:	1825883a 	mov	r18,r3
   4a6d0:	103fef1e 	bne	r2,zero,4a690 <__alt_data_end+0xfffe5ca0>
   4a6d4:	d9012817 	ldw	r4,1184(sp)
   4a6d8:	dc413115 	stw	r17,1220(sp)
   4a6dc:	dc012b17 	ldw	r16,1196(sp)
   4a6e0:	da012c17 	ldw	r8,1200(sp)
   4a6e4:	a813883a 	mov	r9,r21
   4a6e8:	2463c83a 	sub	r17,r4,r17
   4a6ec:	003dcd06 	br	49e24 <__alt_data_end+0xfffe5434>
   4a6f0:	94800c04 	addi	r18,r18,48
   4a6f4:	d8c10dc4 	addi	r3,sp,1079
   4a6f8:	dc810dc5 	stb	r18,1079(sp)
   4a6fc:	dc413c17 	ldw	r17,1264(sp)
   4a700:	d8c13115 	stw	r3,1220(sp)
   4a704:	003dc706 	br	49e24 <__alt_data_end+0xfffe5434>
   4a708:	00801944 	movi	r2,101
   4a70c:	1400720e 	bge	r2,r16,4a8d8 <___vfprintf_internal_r+0x10a0>
   4a710:	d9013717 	ldw	r4,1244(sp)
   4a714:	d9413917 	ldw	r5,1252(sp)
   4a718:	000d883a 	mov	r6,zero
   4a71c:	000f883a 	mov	r7,zero
   4a720:	d8c13d15 	stw	r3,1268(sp)
   4a724:	da013f15 	stw	r8,1276(sp)
   4a728:	0054a500 	call	54a50 <__eqdf2>
   4a72c:	d8c13d17 	ldw	r3,1268(sp)
   4a730:	da013f17 	ldw	r8,1276(sp)
   4a734:	1000f41e 	bne	r2,zero,4ab08 <___vfprintf_internal_r+0x12d0>
   4a738:	d8811f17 	ldw	r2,1148(sp)
   4a73c:	010001b4 	movhi	r4,6
   4a740:	2123fb04 	addi	r4,r4,-28692
   4a744:	18c00044 	addi	r3,r3,1
   4a748:	10800044 	addi	r2,r2,1
   4a74c:	41000015 	stw	r4,0(r8)
   4a750:	01000044 	movi	r4,1
   4a754:	41000115 	stw	r4,4(r8)
   4a758:	d8c12015 	stw	r3,1152(sp)
   4a75c:	d8811f15 	stw	r2,1148(sp)
   4a760:	010001c4 	movi	r4,7
   4a764:	20828d16 	blt	r4,r2,4b19c <___vfprintf_internal_r+0x1964>
   4a768:	42000204 	addi	r8,r8,8
   4a76c:	d8812617 	ldw	r2,1176(sp)
   4a770:	d9413317 	ldw	r5,1228(sp)
   4a774:	11400216 	blt	r2,r5,4a780 <___vfprintf_internal_r+0xf48>
   4a778:	e080004c 	andi	r2,fp,1
   4a77c:	103e4126 	beq	r2,zero,4a084 <__alt_data_end+0xfffe5694>
   4a780:	d8813817 	ldw	r2,1248(sp)
   4a784:	d9013517 	ldw	r4,1236(sp)
   4a788:	d9413817 	ldw	r5,1248(sp)
   4a78c:	1887883a 	add	r3,r3,r2
   4a790:	d8811f17 	ldw	r2,1148(sp)
   4a794:	41000015 	stw	r4,0(r8)
   4a798:	41400115 	stw	r5,4(r8)
   4a79c:	10800044 	addi	r2,r2,1
   4a7a0:	d8c12015 	stw	r3,1152(sp)
   4a7a4:	d8811f15 	stw	r2,1148(sp)
   4a7a8:	010001c4 	movi	r4,7
   4a7ac:	20830916 	blt	r4,r2,4b3d4 <___vfprintf_internal_r+0x1b9c>
   4a7b0:	42000204 	addi	r8,r8,8
   4a7b4:	d8813317 	ldw	r2,1228(sp)
   4a7b8:	143fffc4 	addi	r16,r2,-1
   4a7bc:	043e310e 	bge	zero,r16,4a084 <__alt_data_end+0xfffe5694>
   4a7c0:	04400404 	movi	r17,16
   4a7c4:	d8811f17 	ldw	r2,1148(sp)
   4a7c8:	8c007e0e 	bge	r17,r16,4a9c4 <___vfprintf_internal_r+0x118c>
   4a7cc:	014001b4 	movhi	r5,6
   4a7d0:	29640384 	addi	r5,r5,-28658
   4a7d4:	d9412c15 	stw	r5,1200(sp)
   4a7d8:	04c001c4 	movi	r19,7
   4a7dc:	00000306 	br	4a7ec <___vfprintf_internal_r+0xfb4>
   4a7e0:	42000204 	addi	r8,r8,8
   4a7e4:	843ffc04 	addi	r16,r16,-16
   4a7e8:	8c00790e 	bge	r17,r16,4a9d0 <___vfprintf_internal_r+0x1198>
   4a7ec:	18c00404 	addi	r3,r3,16
   4a7f0:	10800044 	addi	r2,r2,1
   4a7f4:	45000015 	stw	r20,0(r8)
   4a7f8:	44400115 	stw	r17,4(r8)
   4a7fc:	d8c12015 	stw	r3,1152(sp)
   4a800:	d8811f15 	stw	r2,1148(sp)
   4a804:	98bff60e 	bge	r19,r2,4a7e0 <__alt_data_end+0xfffe5df0>
   4a808:	b809883a 	mov	r4,r23
   4a80c:	b00b883a 	mov	r5,r22
   4a810:	d9811e04 	addi	r6,sp,1144
   4a814:	00517ac0 	call	517ac <__sprint_r>
   4a818:	103d1f1e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4a81c:	d8c12017 	ldw	r3,1152(sp)
   4a820:	d8811f17 	ldw	r2,1148(sp)
   4a824:	da000404 	addi	r8,sp,16
   4a828:	003fee06 	br	4a7e4 <__alt_data_end+0xfffe5df4>
   4a82c:	d9412e17 	ldw	r5,1208(sp)
   4a830:	d8812b17 	ldw	r2,1196(sp)
   4a834:	28a7c83a 	sub	r19,r5,r2
   4a838:	04fddc0e 	bge	zero,r19,49fac <__alt_data_end+0xfffe55bc>
   4a83c:	05400404 	movi	r21,16
   4a840:	d8811f17 	ldw	r2,1148(sp)
   4a844:	acc3870e 	bge	r21,r19,4b664 <___vfprintf_internal_r+0x1e2c>
   4a848:	014001b4 	movhi	r5,6
   4a84c:	29640384 	addi	r5,r5,-28658
   4a850:	d9412c15 	stw	r5,1200(sp)
   4a854:	048001c4 	movi	r18,7
   4a858:	00000306 	br	4a868 <___vfprintf_internal_r+0x1030>
   4a85c:	9cfffc04 	addi	r19,r19,-16
   4a860:	42000204 	addi	r8,r8,8
   4a864:	acc0110e 	bge	r21,r19,4a8ac <___vfprintf_internal_r+0x1074>
   4a868:	18c00404 	addi	r3,r3,16
   4a86c:	10800044 	addi	r2,r2,1
   4a870:	45000015 	stw	r20,0(r8)
   4a874:	45400115 	stw	r21,4(r8)
   4a878:	d8c12015 	stw	r3,1152(sp)
   4a87c:	d8811f15 	stw	r2,1148(sp)
   4a880:	90bff60e 	bge	r18,r2,4a85c <__alt_data_end+0xfffe5e6c>
   4a884:	b809883a 	mov	r4,r23
   4a888:	b00b883a 	mov	r5,r22
   4a88c:	d9811e04 	addi	r6,sp,1144
   4a890:	00517ac0 	call	517ac <__sprint_r>
   4a894:	103d001e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4a898:	9cfffc04 	addi	r19,r19,-16
   4a89c:	d8c12017 	ldw	r3,1152(sp)
   4a8a0:	d8811f17 	ldw	r2,1148(sp)
   4a8a4:	da000404 	addi	r8,sp,16
   4a8a8:	acffef16 	blt	r21,r19,4a868 <__alt_data_end+0xfffe5e78>
   4a8ac:	d9012c17 	ldw	r4,1200(sp)
   4a8b0:	1cc7883a 	add	r3,r3,r19
   4a8b4:	10800044 	addi	r2,r2,1
   4a8b8:	41000015 	stw	r4,0(r8)
   4a8bc:	44c00115 	stw	r19,4(r8)
   4a8c0:	d8c12015 	stw	r3,1152(sp)
   4a8c4:	d8811f15 	stw	r2,1148(sp)
   4a8c8:	010001c4 	movi	r4,7
   4a8cc:	20817816 	blt	r4,r2,4aeb0 <___vfprintf_internal_r+0x1678>
   4a8d0:	42000204 	addi	r8,r8,8
   4a8d4:	003db506 	br	49fac <__alt_data_end+0xfffe55bc>
   4a8d8:	d9413317 	ldw	r5,1228(sp)
   4a8dc:	00800044 	movi	r2,1
   4a8e0:	18c00044 	addi	r3,r3,1
   4a8e4:	11413e0e 	bge	r2,r5,4ade0 <___vfprintf_internal_r+0x15a8>
   4a8e8:	dc011f17 	ldw	r16,1148(sp)
   4a8ec:	d8813117 	ldw	r2,1220(sp)
   4a8f0:	d8c12015 	stw	r3,1152(sp)
   4a8f4:	84000044 	addi	r16,r16,1
   4a8f8:	40800015 	stw	r2,0(r8)
   4a8fc:	00800044 	movi	r2,1
   4a900:	40800115 	stw	r2,4(r8)
   4a904:	dc011f15 	stw	r16,1148(sp)
   4a908:	008001c4 	movi	r2,7
   4a90c:	14015616 	blt	r2,r16,4ae68 <___vfprintf_internal_r+0x1630>
   4a910:	42000204 	addi	r8,r8,8
   4a914:	d9013817 	ldw	r4,1248(sp)
   4a918:	d9413517 	ldw	r5,1236(sp)
   4a91c:	84000044 	addi	r16,r16,1
   4a920:	1907883a 	add	r3,r3,r4
   4a924:	41400015 	stw	r5,0(r8)
   4a928:	41000115 	stw	r4,4(r8)
   4a92c:	d8c12015 	stw	r3,1152(sp)
   4a930:	dc011f15 	stw	r16,1148(sp)
   4a934:	008001c4 	movi	r2,7
   4a938:	14015416 	blt	r2,r16,4ae8c <___vfprintf_internal_r+0x1654>
   4a93c:	44400204 	addi	r17,r8,8
   4a940:	d9013717 	ldw	r4,1244(sp)
   4a944:	d9413917 	ldw	r5,1252(sp)
   4a948:	000d883a 	mov	r6,zero
   4a94c:	000f883a 	mov	r7,zero
   4a950:	d8c13d15 	stw	r3,1268(sp)
   4a954:	0054a500 	call	54a50 <__eqdf2>
   4a958:	d8c13d17 	ldw	r3,1268(sp)
   4a95c:	1000a726 	beq	r2,zero,4abfc <___vfprintf_internal_r+0x13c4>
   4a960:	d9013317 	ldw	r4,1228(sp)
   4a964:	d9413117 	ldw	r5,1220(sp)
   4a968:	84000044 	addi	r16,r16,1
   4a96c:	20bfffc4 	addi	r2,r4,-1
   4a970:	1887883a 	add	r3,r3,r2
   4a974:	29000044 	addi	r4,r5,1
   4a978:	88800115 	stw	r2,4(r17)
   4a97c:	89000015 	stw	r4,0(r17)
   4a980:	d8c12015 	stw	r3,1152(sp)
   4a984:	dc011f15 	stw	r16,1148(sp)
   4a988:	008001c4 	movi	r2,7
   4a98c:	14012d16 	blt	r2,r16,4ae44 <___vfprintf_internal_r+0x160c>
   4a990:	8c400204 	addi	r17,r17,8
   4a994:	d9413a17 	ldw	r5,1256(sp)
   4a998:	dcc122c4 	addi	r19,sp,1163
   4a99c:	84000044 	addi	r16,r16,1
   4a9a0:	28c7883a 	add	r3,r5,r3
   4a9a4:	8cc00015 	stw	r19,0(r17)
   4a9a8:	89400115 	stw	r5,4(r17)
   4a9ac:	d8c12015 	stw	r3,1152(sp)
   4a9b0:	dc011f15 	stw	r16,1148(sp)
   4a9b4:	008001c4 	movi	r2,7
   4a9b8:	14000e16 	blt	r2,r16,4a9f4 <___vfprintf_internal_r+0x11bc>
   4a9bc:	8a000204 	addi	r8,r17,8
   4a9c0:	003db006 	br	4a084 <__alt_data_end+0xfffe5694>
   4a9c4:	010001b4 	movhi	r4,6
   4a9c8:	21240384 	addi	r4,r4,-28658
   4a9cc:	d9012c15 	stw	r4,1200(sp)
   4a9d0:	d9012c17 	ldw	r4,1200(sp)
   4a9d4:	1c07883a 	add	r3,r3,r16
   4a9d8:	44000115 	stw	r16,4(r8)
   4a9dc:	41000015 	stw	r4,0(r8)
   4a9e0:	10800044 	addi	r2,r2,1
   4a9e4:	d8c12015 	stw	r3,1152(sp)
   4a9e8:	d8811f15 	stw	r2,1148(sp)
   4a9ec:	010001c4 	movi	r4,7
   4a9f0:	20bda30e 	bge	r4,r2,4a080 <__alt_data_end+0xfffe5690>
   4a9f4:	b809883a 	mov	r4,r23
   4a9f8:	b00b883a 	mov	r5,r22
   4a9fc:	d9811e04 	addi	r6,sp,1144
   4aa00:	00517ac0 	call	517ac <__sprint_r>
   4aa04:	103ca41e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4aa08:	d8c12017 	ldw	r3,1152(sp)
   4aa0c:	da000404 	addi	r8,sp,16
   4aa10:	003d9c06 	br	4a084 <__alt_data_end+0xfffe5694>
   4aa14:	b809883a 	mov	r4,r23
   4aa18:	b00b883a 	mov	r5,r22
   4aa1c:	d9811e04 	addi	r6,sp,1144
   4aa20:	00517ac0 	call	517ac <__sprint_r>
   4aa24:	103dd226 	beq	r2,zero,4a170 <__alt_data_end+0xfffe5780>
   4aa28:	003c9b06 	br	49c98 <__alt_data_end+0xfffe52a8>
   4aa2c:	10803fcc 	andi	r2,r2,255
   4aa30:	1000311e 	bne	r2,zero,4aaf8 <___vfprintf_internal_r+0x12c0>
   4aa34:	e080004c 	andi	r2,fp,1
   4aa38:	10002f26 	beq	r2,zero,4aaf8 <___vfprintf_internal_r+0x12c0>
   4aa3c:	00800c04 	movi	r2,48
   4aa40:	d8c10dc4 	addi	r3,sp,1079
   4aa44:	d8810dc5 	stb	r2,1079(sp)
   4aa48:	dc413c17 	ldw	r17,1264(sp)
   4aa4c:	d8c13115 	stw	r3,1220(sp)
   4aa50:	003cf406 	br	49e24 <__alt_data_end+0xfffe5434>
   4aa54:	b809883a 	mov	r4,r23
   4aa58:	b00b883a 	mov	r5,r22
   4aa5c:	d9811e04 	addi	r6,sp,1144
   4aa60:	00517ac0 	call	517ac <__sprint_r>
   4aa64:	103c8c1e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4aa68:	d8c12017 	ldw	r3,1152(sp)
   4aa6c:	da000404 	addi	r8,sp,16
   4aa70:	003d7706 	br	4a050 <__alt_data_end+0xfffe5660>
   4aa74:	b809883a 	mov	r4,r23
   4aa78:	b00b883a 	mov	r5,r22
   4aa7c:	d9811e04 	addi	r6,sp,1144
   4aa80:	00517ac0 	call	517ac <__sprint_r>
   4aa84:	103c841e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4aa88:	d8c12017 	ldw	r3,1152(sp)
   4aa8c:	da000404 	addi	r8,sp,16
   4aa90:	003d3506 	br	49f68 <__alt_data_end+0xfffe5578>
   4aa94:	b809883a 	mov	r4,r23
   4aa98:	b00b883a 	mov	r5,r22
   4aa9c:	d9811e04 	addi	r6,sp,1144
   4aaa0:	00517ac0 	call	517ac <__sprint_r>
   4aaa4:	103c7c1e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4aaa8:	d8c12017 	ldw	r3,1152(sp)
   4aaac:	da000404 	addi	r8,sp,16
   4aab0:	003d3b06 	br	49fa0 <__alt_data_end+0xfffe55b0>
   4aab4:	d9413b17 	ldw	r5,1260(sp)
   4aab8:	d8c10e04 	addi	r3,sp,1080
   4aabc:	908003cc 	andi	r2,r18,15
   4aac0:	a808973a 	slli	r4,r21,28
   4aac4:	2885883a 	add	r2,r5,r2
   4aac8:	9024d13a 	srli	r18,r18,4
   4aacc:	10800003 	ldbu	r2,0(r2)
   4aad0:	a82ad13a 	srli	r21,r21,4
   4aad4:	18ffffc4 	addi	r3,r3,-1
   4aad8:	24a4b03a 	or	r18,r4,r18
   4aadc:	18800005 	stb	r2,0(r3)
   4aae0:	9544b03a 	or	r2,r18,r21
   4aae4:	103ff51e 	bne	r2,zero,4aabc <__alt_data_end+0xfffe60cc>
   4aae8:	d9412817 	ldw	r5,1184(sp)
   4aaec:	d8c13115 	stw	r3,1220(sp)
   4aaf0:	28e3c83a 	sub	r17,r5,r3
   4aaf4:	003ccb06 	br	49e24 <__alt_data_end+0xfffe5434>
   4aaf8:	d8c10e04 	addi	r3,sp,1080
   4aafc:	0023883a 	mov	r17,zero
   4ab00:	d8c13115 	stw	r3,1220(sp)
   4ab04:	003cc706 	br	49e24 <__alt_data_end+0xfffe5434>
   4ab08:	dc012617 	ldw	r16,1176(sp)
   4ab0c:	0401ab0e 	bge	zero,r16,4b1bc <___vfprintf_internal_r+0x1984>
   4ab10:	d8813317 	ldw	r2,1228(sp)
   4ab14:	d9413117 	ldw	r5,1220(sp)
   4ab18:	d9013417 	ldw	r4,1232(sp)
   4ab1c:	1023883a 	mov	r17,r2
   4ab20:	28a1883a 	add	r16,r5,r2
   4ab24:	2080010e 	bge	r4,r2,4ab2c <___vfprintf_internal_r+0x12f4>
   4ab28:	2023883a 	mov	r17,r4
   4ab2c:	04400b0e 	bge	zero,r17,4ab5c <___vfprintf_internal_r+0x1324>
   4ab30:	d8811f17 	ldw	r2,1148(sp)
   4ab34:	d9413117 	ldw	r5,1220(sp)
   4ab38:	1c47883a 	add	r3,r3,r17
   4ab3c:	10800044 	addi	r2,r2,1
   4ab40:	41400015 	stw	r5,0(r8)
   4ab44:	44400115 	stw	r17,4(r8)
   4ab48:	d8c12015 	stw	r3,1152(sp)
   4ab4c:	d8811f15 	stw	r2,1148(sp)
   4ab50:	010001c4 	movi	r4,7
   4ab54:	20826716 	blt	r4,r2,4b4f4 <___vfprintf_internal_r+0x1cbc>
   4ab58:	42000204 	addi	r8,r8,8
   4ab5c:	88026316 	blt	r17,zero,4b4ec <___vfprintf_internal_r+0x1cb4>
   4ab60:	d8813417 	ldw	r2,1232(sp)
   4ab64:	1463c83a 	sub	r17,r2,r17
   4ab68:	0440590e 	bge	zero,r17,4acd0 <___vfprintf_internal_r+0x1498>
   4ab6c:	04c00404 	movi	r19,16
   4ab70:	d8811f17 	ldw	r2,1148(sp)
   4ab74:	9c41770e 	bge	r19,r17,4b154 <___vfprintf_internal_r+0x191c>
   4ab78:	014001b4 	movhi	r5,6
   4ab7c:	29640384 	addi	r5,r5,-28658
   4ab80:	d9412c15 	stw	r5,1200(sp)
   4ab84:	054001c4 	movi	r21,7
   4ab88:	00000306 	br	4ab98 <___vfprintf_internal_r+0x1360>
   4ab8c:	42000204 	addi	r8,r8,8
   4ab90:	8c7ffc04 	addi	r17,r17,-16
   4ab94:	9c41720e 	bge	r19,r17,4b160 <___vfprintf_internal_r+0x1928>
   4ab98:	18c00404 	addi	r3,r3,16
   4ab9c:	10800044 	addi	r2,r2,1
   4aba0:	45000015 	stw	r20,0(r8)
   4aba4:	44c00115 	stw	r19,4(r8)
   4aba8:	d8c12015 	stw	r3,1152(sp)
   4abac:	d8811f15 	stw	r2,1148(sp)
   4abb0:	a8bff60e 	bge	r21,r2,4ab8c <__alt_data_end+0xfffe619c>
   4abb4:	b809883a 	mov	r4,r23
   4abb8:	b00b883a 	mov	r5,r22
   4abbc:	d9811e04 	addi	r6,sp,1144
   4abc0:	00517ac0 	call	517ac <__sprint_r>
   4abc4:	103c341e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4abc8:	d8c12017 	ldw	r3,1152(sp)
   4abcc:	d8811f17 	ldw	r2,1148(sp)
   4abd0:	da000404 	addi	r8,sp,16
   4abd4:	003fee06 	br	4ab90 <__alt_data_end+0xfffe61a0>
   4abd8:	b809883a 	mov	r4,r23
   4abdc:	b00b883a 	mov	r5,r22
   4abe0:	d9811e04 	addi	r6,sp,1144
   4abe4:	00517ac0 	call	517ac <__sprint_r>
   4abe8:	103c2b1e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4abec:	d8c12017 	ldw	r3,1152(sp)
   4abf0:	d8812787 	ldb	r2,1182(sp)
   4abf4:	da000404 	addi	r8,sp,16
   4abf8:	003cce06 	br	49f34 <__alt_data_end+0xfffe5544>
   4abfc:	d8813317 	ldw	r2,1228(sp)
   4ac00:	14ffffc4 	addi	r19,r2,-1
   4ac04:	04ff630e 	bge	zero,r19,4a994 <__alt_data_end+0xfffe5fa4>
   4ac08:	05400404 	movi	r21,16
   4ac0c:	acc0810e 	bge	r21,r19,4ae14 <___vfprintf_internal_r+0x15dc>
   4ac10:	014001b4 	movhi	r5,6
   4ac14:	29640384 	addi	r5,r5,-28658
   4ac18:	d9412c15 	stw	r5,1200(sp)
   4ac1c:	01c001c4 	movi	r7,7
   4ac20:	00000306 	br	4ac30 <___vfprintf_internal_r+0x13f8>
   4ac24:	8c400204 	addi	r17,r17,8
   4ac28:	9cfffc04 	addi	r19,r19,-16
   4ac2c:	acc07c0e 	bge	r21,r19,4ae20 <___vfprintf_internal_r+0x15e8>
   4ac30:	18c00404 	addi	r3,r3,16
   4ac34:	84000044 	addi	r16,r16,1
   4ac38:	8d000015 	stw	r20,0(r17)
   4ac3c:	8d400115 	stw	r21,4(r17)
   4ac40:	d8c12015 	stw	r3,1152(sp)
   4ac44:	dc011f15 	stw	r16,1148(sp)
   4ac48:	3c3ff60e 	bge	r7,r16,4ac24 <__alt_data_end+0xfffe6234>
   4ac4c:	b809883a 	mov	r4,r23
   4ac50:	b00b883a 	mov	r5,r22
   4ac54:	d9811e04 	addi	r6,sp,1144
   4ac58:	d9c13d15 	stw	r7,1268(sp)
   4ac5c:	00517ac0 	call	517ac <__sprint_r>
   4ac60:	d9c13d17 	ldw	r7,1268(sp)
   4ac64:	103c0c1e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4ac68:	d8c12017 	ldw	r3,1152(sp)
   4ac6c:	dc011f17 	ldw	r16,1148(sp)
   4ac70:	dc400404 	addi	r17,sp,16
   4ac74:	003fec06 	br	4ac28 <__alt_data_end+0xfffe6238>
   4ac78:	00800084 	movi	r2,2
   4ac7c:	9546b03a 	or	r3,r18,r21
   4ac80:	003d7d06 	br	4a278 <__alt_data_end+0xfffe5888>
   4ac84:	10803fcc 	andi	r2,r2,255
   4ac88:	1080201c 	xori	r2,r2,128
   4ac8c:	10bfe004 	addi	r2,r2,-128
   4ac90:	01000c04 	movi	r4,48
   4ac94:	1101d726 	beq	r2,r4,4b3f4 <___vfprintf_internal_r+0x1bbc>
   4ac98:	d9413117 	ldw	r5,1220(sp)
   4ac9c:	d8812817 	ldw	r2,1184(sp)
   4aca0:	193fffc5 	stb	r4,-1(r3)
   4aca4:	297fffc4 	addi	r5,r5,-1
   4aca8:	d9413115 	stw	r5,1220(sp)
   4acac:	1163c83a 	sub	r17,r2,r5
   4acb0:	003c5c06 	br	49e24 <__alt_data_end+0xfffe5434>
   4acb4:	b809883a 	mov	r4,r23
   4acb8:	b00b883a 	mov	r5,r22
   4acbc:	d9811e04 	addi	r6,sp,1144
   4acc0:	00517ac0 	call	517ac <__sprint_r>
   4acc4:	103bf41e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4acc8:	d8c12017 	ldw	r3,1152(sp)
   4accc:	da000404 	addi	r8,sp,16
   4acd0:	d9413117 	ldw	r5,1220(sp)
   4acd4:	d9013417 	ldw	r4,1232(sp)
   4acd8:	d8812617 	ldw	r2,1176(sp)
   4acdc:	2923883a 	add	r17,r5,r4
   4ace0:	d9413317 	ldw	r5,1228(sp)
   4ace4:	11400216 	blt	r2,r5,4acf0 <___vfprintf_internal_r+0x14b8>
   4ace8:	e100004c 	andi	r4,fp,1
   4acec:	20000d26 	beq	r4,zero,4ad24 <___vfprintf_internal_r+0x14ec>
   4acf0:	d9013817 	ldw	r4,1248(sp)
   4acf4:	d9413517 	ldw	r5,1236(sp)
   4acf8:	1907883a 	add	r3,r3,r4
   4acfc:	d9011f17 	ldw	r4,1148(sp)
   4ad00:	41400015 	stw	r5,0(r8)
   4ad04:	d9413817 	ldw	r5,1248(sp)
   4ad08:	21000044 	addi	r4,r4,1
   4ad0c:	d8c12015 	stw	r3,1152(sp)
   4ad10:	41400115 	stw	r5,4(r8)
   4ad14:	d9011f15 	stw	r4,1148(sp)
   4ad18:	014001c4 	movi	r5,7
   4ad1c:	2901fd16 	blt	r5,r4,4b514 <___vfprintf_internal_r+0x1cdc>
   4ad20:	42000204 	addi	r8,r8,8
   4ad24:	d9013317 	ldw	r4,1228(sp)
   4ad28:	2085c83a 	sub	r2,r4,r2
   4ad2c:	8449c83a 	sub	r4,r16,r17
   4ad30:	1021883a 	mov	r16,r2
   4ad34:	2080010e 	bge	r4,r2,4ad3c <___vfprintf_internal_r+0x1504>
   4ad38:	2021883a 	mov	r16,r4
   4ad3c:	04000a0e 	bge	zero,r16,4ad68 <___vfprintf_internal_r+0x1530>
   4ad40:	d9011f17 	ldw	r4,1148(sp)
   4ad44:	1c07883a 	add	r3,r3,r16
   4ad48:	44400015 	stw	r17,0(r8)
   4ad4c:	21000044 	addi	r4,r4,1
   4ad50:	44000115 	stw	r16,4(r8)
   4ad54:	d8c12015 	stw	r3,1152(sp)
   4ad58:	d9011f15 	stw	r4,1148(sp)
   4ad5c:	014001c4 	movi	r5,7
   4ad60:	29020916 	blt	r5,r4,4b588 <___vfprintf_internal_r+0x1d50>
   4ad64:	42000204 	addi	r8,r8,8
   4ad68:	80020116 	blt	r16,zero,4b570 <___vfprintf_internal_r+0x1d38>
   4ad6c:	1421c83a 	sub	r16,r2,r16
   4ad70:	043cc40e 	bge	zero,r16,4a084 <__alt_data_end+0xfffe5694>
   4ad74:	04400404 	movi	r17,16
   4ad78:	d8811f17 	ldw	r2,1148(sp)
   4ad7c:	8c3f110e 	bge	r17,r16,4a9c4 <__alt_data_end+0xfffe5fd4>
   4ad80:	014001b4 	movhi	r5,6
   4ad84:	29640384 	addi	r5,r5,-28658
   4ad88:	d9412c15 	stw	r5,1200(sp)
   4ad8c:	04c001c4 	movi	r19,7
   4ad90:	00000306 	br	4ada0 <___vfprintf_internal_r+0x1568>
   4ad94:	42000204 	addi	r8,r8,8
   4ad98:	843ffc04 	addi	r16,r16,-16
   4ad9c:	8c3f0c0e 	bge	r17,r16,4a9d0 <__alt_data_end+0xfffe5fe0>
   4ada0:	18c00404 	addi	r3,r3,16
   4ada4:	10800044 	addi	r2,r2,1
   4ada8:	45000015 	stw	r20,0(r8)
   4adac:	44400115 	stw	r17,4(r8)
   4adb0:	d8c12015 	stw	r3,1152(sp)
   4adb4:	d8811f15 	stw	r2,1148(sp)
   4adb8:	98bff60e 	bge	r19,r2,4ad94 <__alt_data_end+0xfffe63a4>
   4adbc:	b809883a 	mov	r4,r23
   4adc0:	b00b883a 	mov	r5,r22
   4adc4:	d9811e04 	addi	r6,sp,1144
   4adc8:	00517ac0 	call	517ac <__sprint_r>
   4adcc:	103bb21e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4add0:	d8c12017 	ldw	r3,1152(sp)
   4add4:	d8811f17 	ldw	r2,1148(sp)
   4add8:	da000404 	addi	r8,sp,16
   4addc:	003fee06 	br	4ad98 <__alt_data_end+0xfffe63a8>
   4ade0:	e088703a 	and	r4,fp,r2
   4ade4:	203ec01e 	bne	r4,zero,4a8e8 <__alt_data_end+0xfffe5ef8>
   4ade8:	dc011f17 	ldw	r16,1148(sp)
   4adec:	d9013117 	ldw	r4,1220(sp)
   4adf0:	40800115 	stw	r2,4(r8)
   4adf4:	84000044 	addi	r16,r16,1
   4adf8:	41000015 	stw	r4,0(r8)
   4adfc:	d8c12015 	stw	r3,1152(sp)
   4ae00:	dc011f15 	stw	r16,1148(sp)
   4ae04:	008001c4 	movi	r2,7
   4ae08:	14000e16 	blt	r2,r16,4ae44 <___vfprintf_internal_r+0x160c>
   4ae0c:	44400204 	addi	r17,r8,8
   4ae10:	003ee006 	br	4a994 <__alt_data_end+0xfffe5fa4>
   4ae14:	010001b4 	movhi	r4,6
   4ae18:	21240384 	addi	r4,r4,-28658
   4ae1c:	d9012c15 	stw	r4,1200(sp)
   4ae20:	d8812c17 	ldw	r2,1200(sp)
   4ae24:	1cc7883a 	add	r3,r3,r19
   4ae28:	84000044 	addi	r16,r16,1
   4ae2c:	88800015 	stw	r2,0(r17)
   4ae30:	8cc00115 	stw	r19,4(r17)
   4ae34:	d8c12015 	stw	r3,1152(sp)
   4ae38:	dc011f15 	stw	r16,1148(sp)
   4ae3c:	008001c4 	movi	r2,7
   4ae40:	143ed30e 	bge	r2,r16,4a990 <__alt_data_end+0xfffe5fa0>
   4ae44:	b809883a 	mov	r4,r23
   4ae48:	b00b883a 	mov	r5,r22
   4ae4c:	d9811e04 	addi	r6,sp,1144
   4ae50:	00517ac0 	call	517ac <__sprint_r>
   4ae54:	103b901e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4ae58:	d8c12017 	ldw	r3,1152(sp)
   4ae5c:	dc011f17 	ldw	r16,1148(sp)
   4ae60:	dc400404 	addi	r17,sp,16
   4ae64:	003ecb06 	br	4a994 <__alt_data_end+0xfffe5fa4>
   4ae68:	b809883a 	mov	r4,r23
   4ae6c:	b00b883a 	mov	r5,r22
   4ae70:	d9811e04 	addi	r6,sp,1144
   4ae74:	00517ac0 	call	517ac <__sprint_r>
   4ae78:	103b871e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4ae7c:	d8c12017 	ldw	r3,1152(sp)
   4ae80:	dc011f17 	ldw	r16,1148(sp)
   4ae84:	da000404 	addi	r8,sp,16
   4ae88:	003ea206 	br	4a914 <__alt_data_end+0xfffe5f24>
   4ae8c:	b809883a 	mov	r4,r23
   4ae90:	b00b883a 	mov	r5,r22
   4ae94:	d9811e04 	addi	r6,sp,1144
   4ae98:	00517ac0 	call	517ac <__sprint_r>
   4ae9c:	103b7e1e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4aea0:	d8c12017 	ldw	r3,1152(sp)
   4aea4:	dc011f17 	ldw	r16,1148(sp)
   4aea8:	dc400404 	addi	r17,sp,16
   4aeac:	003ea406 	br	4a940 <__alt_data_end+0xfffe5f50>
   4aeb0:	b809883a 	mov	r4,r23
   4aeb4:	b00b883a 	mov	r5,r22
   4aeb8:	d9811e04 	addi	r6,sp,1144
   4aebc:	00517ac0 	call	517ac <__sprint_r>
   4aec0:	103b751e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4aec4:	d8c12017 	ldw	r3,1152(sp)
   4aec8:	da000404 	addi	r8,sp,16
   4aecc:	003c3706 	br	49fac <__alt_data_end+0xfffe55bc>
   4aed0:	04a5c83a 	sub	r18,zero,r18
   4aed4:	9004c03a 	cmpne	r2,r18,zero
   4aed8:	056bc83a 	sub	r21,zero,r21
   4aedc:	a8abc83a 	sub	r21,r21,r2
   4aee0:	04c00b44 	movi	r19,45
   4aee4:	dcc12785 	stb	r19,1182(sp)
   4aee8:	da413215 	stw	r9,1224(sp)
   4aeec:	00800044 	movi	r2,1
   4aef0:	9546b03a 	or	r3,r18,r21
   4aef4:	003bb106 	br	49dbc <__alt_data_end+0xfffe53cc>
   4aef8:	da013f15 	stw	r8,1276(sp)
   4aefc:	da413e15 	stw	r9,1272(sp)
   4af00:	00501680 	call	50168 <__fpclassifyd>
   4af04:	da013f17 	ldw	r8,1276(sp)
   4af08:	da413e17 	ldw	r9,1272(sp)
   4af0c:	1000e526 	beq	r2,zero,4b2a4 <___vfprintf_internal_r+0x1a6c>
   4af10:	04fff7c4 	movi	r19,-33
   4af14:	00bfffc4 	movi	r2,-1
   4af18:	84e6703a 	and	r19,r16,r19
   4af1c:	48822926 	beq	r9,r2,4b7c4 <___vfprintf_internal_r+0x1f8c>
   4af20:	008011c4 	movi	r2,71
   4af24:	98821626 	beq	r19,r2,4b780 <___vfprintf_internal_r+0x1f48>
   4af28:	d9013917 	ldw	r4,1252(sp)
   4af2c:	e0c04014 	ori	r3,fp,256
   4af30:	d8c12d15 	stw	r3,1204(sp)
   4af34:	20021f16 	blt	r4,zero,4b7b4 <___vfprintf_internal_r+0x1f7c>
   4af38:	dc413917 	ldw	r17,1252(sp)
   4af3c:	d8012b05 	stb	zero,1196(sp)
   4af40:	00801984 	movi	r2,102
   4af44:	80814d26 	beq	r16,r2,4b47c <___vfprintf_internal_r+0x1c44>
   4af48:	00801184 	movi	r2,70
   4af4c:	80814b26 	beq	r16,r2,4b47c <___vfprintf_internal_r+0x1c44>
   4af50:	00801144 	movi	r2,69
   4af54:	98821d26 	beq	r19,r2,4b7cc <___vfprintf_internal_r+0x1f94>
   4af58:	482b883a 	mov	r21,r9
   4af5c:	d8812604 	addi	r2,sp,1176
   4af60:	d8800115 	stw	r2,4(sp)
   4af64:	d9413717 	ldw	r5,1244(sp)
   4af68:	d8812504 	addi	r2,sp,1172
   4af6c:	d8800215 	stw	r2,8(sp)
   4af70:	d8812104 	addi	r2,sp,1156
   4af74:	dd400015 	stw	r21,0(sp)
   4af78:	d8800315 	stw	r2,12(sp)
   4af7c:	b809883a 	mov	r4,r23
   4af80:	880d883a 	mov	r6,r17
   4af84:	01c00084 	movi	r7,2
   4af88:	da013f15 	stw	r8,1276(sp)
   4af8c:	da413e15 	stw	r9,1272(sp)
   4af90:	004bde00 	call	4bde0 <_dtoa_r>
   4af94:	d8813115 	stw	r2,1220(sp)
   4af98:	008019c4 	movi	r2,103
   4af9c:	da013f17 	ldw	r8,1276(sp)
   4afa0:	da413e17 	ldw	r9,1272(sp)
   4afa4:	80800226 	beq	r16,r2,4afb0 <___vfprintf_internal_r+0x1778>
   4afa8:	008011c4 	movi	r2,71
   4afac:	8081451e 	bne	r16,r2,4b4c4 <___vfprintf_internal_r+0x1c8c>
   4afb0:	e080004c 	andi	r2,fp,1
   4afb4:	10021e26 	beq	r2,zero,4b830 <___vfprintf_internal_r+0x1ff8>
   4afb8:	d8c13117 	ldw	r3,1220(sp)
   4afbc:	1d55883a 	add	r10,r3,r21
   4afc0:	d9013717 	ldw	r4,1244(sp)
   4afc4:	880b883a 	mov	r5,r17
   4afc8:	000d883a 	mov	r6,zero
   4afcc:	000f883a 	mov	r7,zero
   4afd0:	da013f15 	stw	r8,1276(sp)
   4afd4:	da413e15 	stw	r9,1272(sp)
   4afd8:	da813d15 	stw	r10,1268(sp)
   4afdc:	0054a500 	call	54a50 <__eqdf2>
   4afe0:	da013f17 	ldw	r8,1276(sp)
   4afe4:	da413e17 	ldw	r9,1272(sp)
   4afe8:	da813d17 	ldw	r10,1268(sp)
   4afec:	1001a126 	beq	r2,zero,4b674 <___vfprintf_internal_r+0x1e3c>
   4aff0:	d8812117 	ldw	r2,1156(sp)
   4aff4:	1280062e 	bgeu	r2,r10,4b010 <___vfprintf_internal_r+0x17d8>
   4aff8:	01000c04 	movi	r4,48
   4affc:	10c00044 	addi	r3,r2,1
   4b000:	d8c12115 	stw	r3,1156(sp)
   4b004:	11000005 	stb	r4,0(r2)
   4b008:	d8812117 	ldw	r2,1156(sp)
   4b00c:	12bffb36 	bltu	r2,r10,4affc <__alt_data_end+0xfffe660c>
   4b010:	d8c13117 	ldw	r3,1220(sp)
   4b014:	10c5c83a 	sub	r2,r2,r3
   4b018:	d8813315 	stw	r2,1228(sp)
   4b01c:	008011c4 	movi	r2,71
   4b020:	98818926 	beq	r19,r2,4b648 <___vfprintf_internal_r+0x1e10>
   4b024:	00801944 	movi	r2,101
   4b028:	14023c0e 	bge	r2,r16,4b91c <___vfprintf_internal_r+0x20e4>
   4b02c:	d8c12617 	ldw	r3,1176(sp)
   4b030:	00801984 	movi	r2,102
   4b034:	d8c13415 	stw	r3,1232(sp)
   4b038:	8081ef26 	beq	r16,r2,4b7f8 <___vfprintf_internal_r+0x1fc0>
   4b03c:	d8c13417 	ldw	r3,1232(sp)
   4b040:	d9013317 	ldw	r4,1228(sp)
   4b044:	1901e316 	blt	r3,r4,4b7d4 <___vfprintf_internal_r+0x1f9c>
   4b048:	e080004c 	andi	r2,fp,1
   4b04c:	1001f426 	beq	r2,zero,4b820 <___vfprintf_internal_r+0x1fe8>
   4b050:	d8c13417 	ldw	r3,1232(sp)
   4b054:	1c400044 	addi	r17,r3,1
   4b058:	8839883a 	mov	fp,r17
   4b05c:	8801e416 	blt	r17,zero,4b7f0 <___vfprintf_internal_r+0x1fb8>
   4b060:	dd412b07 	ldb	r21,1196(sp)
   4b064:	a801701e 	bne	r21,zero,4b628 <___vfprintf_internal_r+0x1df0>
   4b068:	df012b15 	stw	fp,1196(sp)
   4b06c:	dcc12783 	ldbu	r19,1182(sp)
   4b070:	df012d17 	ldw	fp,1204(sp)
   4b074:	d8013215 	stw	zero,1224(sp)
   4b078:	dc812d15 	stw	r18,1204(sp)
   4b07c:	003b6e06 	br	49e38 <__alt_data_end+0xfffe5448>
   4b080:	e080040c 	andi	r2,fp,16
   4b084:	1000b51e 	bne	r2,zero,4b35c <___vfprintf_internal_r+0x1b24>
   4b088:	e080100c 	andi	r2,fp,64
   4b08c:	10015b26 	beq	r2,zero,4b5fc <___vfprintf_internal_r+0x1dc4>
   4b090:	d9012d17 	ldw	r4,1204(sp)
   4b094:	d9412f17 	ldw	r5,1212(sp)
   4b098:	20800017 	ldw	r2,0(r4)
   4b09c:	21000104 	addi	r4,r4,4
   4b0a0:	d9012d15 	stw	r4,1204(sp)
   4b0a4:	1140000d 	sth	r5,0(r2)
   4b0a8:	003a2006 	br	4992c <__alt_data_end+0xfffe4f3c>
   4b0ac:	e0c0100c 	andi	r3,fp,64
   4b0b0:	1800a226 	beq	r3,zero,4b33c <___vfprintf_internal_r+0x1b04>
   4b0b4:	d8c12d17 	ldw	r3,1204(sp)
   4b0b8:	1480000b 	ldhu	r18,0(r2)
   4b0bc:	002b883a 	mov	r21,zero
   4b0c0:	18c00104 	addi	r3,r3,4
   4b0c4:	d8c12d15 	stw	r3,1204(sp)
   4b0c8:	0005883a 	mov	r2,zero
   4b0cc:	9007883a 	mov	r3,r18
   4b0d0:	003c6906 	br	4a278 <__alt_data_end+0xfffe5888>
   4b0d4:	e0c0100c 	andi	r3,fp,64
   4b0d8:	18009026 	beq	r3,zero,4b31c <___vfprintf_internal_r+0x1ae4>
   4b0dc:	1480000b 	ldhu	r18,0(r2)
   4b0e0:	d8812d17 	ldw	r2,1204(sp)
   4b0e4:	002b883a 	mov	r21,zero
   4b0e8:	9007883a 	mov	r3,r18
   4b0ec:	10800104 	addi	r2,r2,4
   4b0f0:	d8812d15 	stw	r2,1204(sp)
   4b0f4:	00800044 	movi	r2,1
   4b0f8:	003c5f06 	br	4a278 <__alt_data_end+0xfffe5888>
   4b0fc:	e0c0100c 	andi	r3,fp,64
   4b100:	18008026 	beq	r3,zero,4b304 <___vfprintf_internal_r+0x1acc>
   4b104:	d9012d17 	ldw	r4,1204(sp)
   4b108:	1480000b 	ldhu	r18,0(r2)
   4b10c:	002b883a 	mov	r21,zero
   4b110:	21000104 	addi	r4,r4,4
   4b114:	d9012d15 	stw	r4,1204(sp)
   4b118:	003c7906 	br	4a300 <__alt_data_end+0xfffe5910>
   4b11c:	e080100c 	andi	r2,fp,64
   4b120:	10007126 	beq	r2,zero,4b2e8 <___vfprintf_internal_r+0x1ab0>
   4b124:	1c80000f 	ldh	r18,0(r3)
   4b128:	d8812d17 	ldw	r2,1204(sp)
   4b12c:	902bd7fa 	srai	r21,r18,31
   4b130:	10800104 	addi	r2,r2,4
   4b134:	d8812d15 	stw	r2,1204(sp)
   4b138:	a805883a 	mov	r2,r21
   4b13c:	003b1a06 	br	49da8 <__alt_data_end+0xfffe53b8>
   4b140:	e4000007 	ldb	r16,0(fp)
   4b144:	e005883a 	mov	r2,fp
   4b148:	003a2306 	br	499d8 <__alt_data_end+0xfffe4fe8>
   4b14c:	00800084 	movi	r2,2
   4b150:	003c4906 	br	4a278 <__alt_data_end+0xfffe5888>
   4b154:	010001b4 	movhi	r4,6
   4b158:	21240384 	addi	r4,r4,-28658
   4b15c:	d9012c15 	stw	r4,1200(sp)
   4b160:	d9012c17 	ldw	r4,1200(sp)
   4b164:	1c47883a 	add	r3,r3,r17
   4b168:	10800044 	addi	r2,r2,1
   4b16c:	41000015 	stw	r4,0(r8)
   4b170:	44400115 	stw	r17,4(r8)
   4b174:	d8c12015 	stw	r3,1152(sp)
   4b178:	d8811f15 	stw	r2,1148(sp)
   4b17c:	010001c4 	movi	r4,7
   4b180:	20becc16 	blt	r4,r2,4acb4 <__alt_data_end+0xfffe62c4>
   4b184:	42000204 	addi	r8,r8,8
   4b188:	003ed106 	br	4acd0 <__alt_data_end+0xfffe62e0>
   4b18c:	010001b4 	movhi	r4,6
   4b190:	21240384 	addi	r4,r4,-28658
   4b194:	d9012c15 	stw	r4,1200(sp)
   4b198:	003ba306 	br	4a028 <__alt_data_end+0xfffe5638>
   4b19c:	b809883a 	mov	r4,r23
   4b1a0:	b00b883a 	mov	r5,r22
   4b1a4:	d9811e04 	addi	r6,sp,1144
   4b1a8:	00517ac0 	call	517ac <__sprint_r>
   4b1ac:	103aba1e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4b1b0:	d8c12017 	ldw	r3,1152(sp)
   4b1b4:	da000404 	addi	r8,sp,16
   4b1b8:	003d6c06 	br	4a76c <__alt_data_end+0xfffe5d7c>
   4b1bc:	d8811f17 	ldw	r2,1148(sp)
   4b1c0:	014001b4 	movhi	r5,6
   4b1c4:	01000044 	movi	r4,1
   4b1c8:	18c00044 	addi	r3,r3,1
   4b1cc:	10800044 	addi	r2,r2,1
   4b1d0:	2963fb04 	addi	r5,r5,-28692
   4b1d4:	41000115 	stw	r4,4(r8)
   4b1d8:	41400015 	stw	r5,0(r8)
   4b1dc:	d8c12015 	stw	r3,1152(sp)
   4b1e0:	d8811f15 	stw	r2,1148(sp)
   4b1e4:	010001c4 	movi	r4,7
   4b1e8:	20806716 	blt	r4,r2,4b388 <___vfprintf_internal_r+0x1b50>
   4b1ec:	42000204 	addi	r8,r8,8
   4b1f0:	8000041e 	bne	r16,zero,4b204 <___vfprintf_internal_r+0x19cc>
   4b1f4:	d8813317 	ldw	r2,1228(sp)
   4b1f8:	1000021e 	bne	r2,zero,4b204 <___vfprintf_internal_r+0x19cc>
   4b1fc:	e080004c 	andi	r2,fp,1
   4b200:	103ba026 	beq	r2,zero,4a084 <__alt_data_end+0xfffe5694>
   4b204:	d9013817 	ldw	r4,1248(sp)
   4b208:	d8811f17 	ldw	r2,1148(sp)
   4b20c:	d9413517 	ldw	r5,1236(sp)
   4b210:	1907883a 	add	r3,r3,r4
   4b214:	10800044 	addi	r2,r2,1
   4b218:	41000115 	stw	r4,4(r8)
   4b21c:	41400015 	stw	r5,0(r8)
   4b220:	d8c12015 	stw	r3,1152(sp)
   4b224:	d8811f15 	stw	r2,1148(sp)
   4b228:	010001c4 	movi	r4,7
   4b22c:	20815716 	blt	r4,r2,4b78c <___vfprintf_internal_r+0x1f54>
   4b230:	42000204 	addi	r8,r8,8
   4b234:	0421c83a 	sub	r16,zero,r16
   4b238:	0400810e 	bge	zero,r16,4b440 <___vfprintf_internal_r+0x1c08>
   4b23c:	04400404 	movi	r17,16
   4b240:	8c00bd0e 	bge	r17,r16,4b538 <___vfprintf_internal_r+0x1d00>
   4b244:	014001b4 	movhi	r5,6
   4b248:	29640384 	addi	r5,r5,-28658
   4b24c:	d9412c15 	stw	r5,1200(sp)
   4b250:	04c001c4 	movi	r19,7
   4b254:	00000306 	br	4b264 <___vfprintf_internal_r+0x1a2c>
   4b258:	42000204 	addi	r8,r8,8
   4b25c:	843ffc04 	addi	r16,r16,-16
   4b260:	8c00b80e 	bge	r17,r16,4b544 <___vfprintf_internal_r+0x1d0c>
   4b264:	18c00404 	addi	r3,r3,16
   4b268:	10800044 	addi	r2,r2,1
   4b26c:	45000015 	stw	r20,0(r8)
   4b270:	44400115 	stw	r17,4(r8)
   4b274:	d8c12015 	stw	r3,1152(sp)
   4b278:	d8811f15 	stw	r2,1148(sp)
   4b27c:	98bff60e 	bge	r19,r2,4b258 <__alt_data_end+0xfffe6868>
   4b280:	b809883a 	mov	r4,r23
   4b284:	b00b883a 	mov	r5,r22
   4b288:	d9811e04 	addi	r6,sp,1144
   4b28c:	00517ac0 	call	517ac <__sprint_r>
   4b290:	103a811e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4b294:	d8c12017 	ldw	r3,1152(sp)
   4b298:	d8811f17 	ldw	r2,1148(sp)
   4b29c:	da000404 	addi	r8,sp,16
   4b2a0:	003fee06 	br	4b25c <__alt_data_end+0xfffe686c>
   4b2a4:	008011c4 	movi	r2,71
   4b2a8:	1400db16 	blt	r2,r16,4b618 <___vfprintf_internal_r+0x1de0>
   4b2ac:	010001b4 	movhi	r4,6
   4b2b0:	2123ed04 	addi	r4,r4,-28748
   4b2b4:	d9013115 	stw	r4,1220(sp)
   4b2b8:	00c000c4 	movi	r3,3
   4b2bc:	00bfdfc4 	movi	r2,-129
   4b2c0:	d8c12b15 	stw	r3,1196(sp)
   4b2c4:	e0b8703a 	and	fp,fp,r2
   4b2c8:	dcc12783 	ldbu	r19,1182(sp)
   4b2cc:	dc812d15 	stw	r18,1204(sp)
   4b2d0:	1823883a 	mov	r17,r3
   4b2d4:	d8013215 	stw	zero,1224(sp)
   4b2d8:	d8013415 	stw	zero,1232(sp)
   4b2dc:	003ad606 	br	49e38 <__alt_data_end+0xfffe5448>
   4b2e0:	4823883a 	mov	r17,r9
   4b2e4:	003cc906 	br	4a60c <__alt_data_end+0xfffe5c1c>
   4b2e8:	1c800017 	ldw	r18,0(r3)
   4b2ec:	d8c12d17 	ldw	r3,1204(sp)
   4b2f0:	902bd7fa 	srai	r21,r18,31
   4b2f4:	18c00104 	addi	r3,r3,4
   4b2f8:	d8c12d15 	stw	r3,1204(sp)
   4b2fc:	a805883a 	mov	r2,r21
   4b300:	003aa906 	br	49da8 <__alt_data_end+0xfffe53b8>
   4b304:	d9412d17 	ldw	r5,1204(sp)
   4b308:	14800017 	ldw	r18,0(r2)
   4b30c:	002b883a 	mov	r21,zero
   4b310:	29400104 	addi	r5,r5,4
   4b314:	d9412d15 	stw	r5,1204(sp)
   4b318:	003bf906 	br	4a300 <__alt_data_end+0xfffe5910>
   4b31c:	d8c12d17 	ldw	r3,1204(sp)
   4b320:	14800017 	ldw	r18,0(r2)
   4b324:	002b883a 	mov	r21,zero
   4b328:	18c00104 	addi	r3,r3,4
   4b32c:	d8c12d15 	stw	r3,1204(sp)
   4b330:	00800044 	movi	r2,1
   4b334:	9007883a 	mov	r3,r18
   4b338:	003bcf06 	br	4a278 <__alt_data_end+0xfffe5888>
   4b33c:	d9012d17 	ldw	r4,1204(sp)
   4b340:	14800017 	ldw	r18,0(r2)
   4b344:	002b883a 	mov	r21,zero
   4b348:	21000104 	addi	r4,r4,4
   4b34c:	d9012d15 	stw	r4,1204(sp)
   4b350:	0005883a 	mov	r2,zero
   4b354:	9007883a 	mov	r3,r18
   4b358:	003bc706 	br	4a278 <__alt_data_end+0xfffe5888>
   4b35c:	d9412d17 	ldw	r5,1204(sp)
   4b360:	d8c12f17 	ldw	r3,1212(sp)
   4b364:	28800017 	ldw	r2,0(r5)
   4b368:	29400104 	addi	r5,r5,4
   4b36c:	d9412d15 	stw	r5,1204(sp)
   4b370:	10c00015 	stw	r3,0(r2)
   4b374:	00396d06 	br	4992c <__alt_data_end+0xfffe4f3c>
   4b378:	010001b4 	movhi	r4,6
   4b37c:	2123eb04 	addi	r4,r4,-28756
   4b380:	d9013115 	stw	r4,1220(sp)
   4b384:	003ba206 	br	4a210 <__alt_data_end+0xfffe5820>
   4b388:	b809883a 	mov	r4,r23
   4b38c:	b00b883a 	mov	r5,r22
   4b390:	d9811e04 	addi	r6,sp,1144
   4b394:	00517ac0 	call	517ac <__sprint_r>
   4b398:	103a3f1e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4b39c:	dc012617 	ldw	r16,1176(sp)
   4b3a0:	d8c12017 	ldw	r3,1152(sp)
   4b3a4:	da000404 	addi	r8,sp,16
   4b3a8:	003f9106 	br	4b1f0 <__alt_data_end+0xfffe6800>
   4b3ac:	e0800044 	addi	r2,fp,1
   4b3b0:	9cc00814 	ori	r19,r19,32
   4b3b4:	e4000047 	ldb	r16,1(fp)
   4b3b8:	00398706 	br	499d8 <__alt_data_end+0xfffe4fe8>
   4b3bc:	d8812e17 	ldw	r2,1208(sp)
   4b3c0:	d8c12d15 	stw	r3,1204(sp)
   4b3c4:	0085c83a 	sub	r2,zero,r2
   4b3c8:	d8812e15 	stw	r2,1208(sp)
   4b3cc:	e005883a 	mov	r2,fp
   4b3d0:	003a3a06 	br	49cbc <__alt_data_end+0xfffe52cc>
   4b3d4:	b809883a 	mov	r4,r23
   4b3d8:	b00b883a 	mov	r5,r22
   4b3dc:	d9811e04 	addi	r6,sp,1144
   4b3e0:	00517ac0 	call	517ac <__sprint_r>
   4b3e4:	103a2c1e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4b3e8:	d8c12017 	ldw	r3,1152(sp)
   4b3ec:	da000404 	addi	r8,sp,16
   4b3f0:	003cf006 	br	4a7b4 <__alt_data_end+0xfffe5dc4>
   4b3f4:	d8c12817 	ldw	r3,1184(sp)
   4b3f8:	d9013117 	ldw	r4,1220(sp)
   4b3fc:	1923c83a 	sub	r17,r3,r4
   4b400:	003a8806 	br	49e24 <__alt_data_end+0xfffe5434>
   4b404:	da013f15 	stw	r8,1276(sp)
   4b408:	00477300 	call	47730 <strlen>
   4b40c:	1023883a 	mov	r17,r2
   4b410:	da013f17 	ldw	r8,1276(sp)
   4b414:	883c7f0e 	bge	r17,zero,4a614 <__alt_data_end+0xfffe5c24>
   4b418:	0005883a 	mov	r2,zero
   4b41c:	003c7d06 	br	4a614 <__alt_data_end+0xfffe5c24>
   4b420:	b809883a 	mov	r4,r23
   4b424:	b00b883a 	mov	r5,r22
   4b428:	d9811e04 	addi	r6,sp,1144
   4b42c:	00517ac0 	call	517ac <__sprint_r>
   4b430:	103a191e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4b434:	d8c12017 	ldw	r3,1152(sp)
   4b438:	d8811f17 	ldw	r2,1148(sp)
   4b43c:	da000404 	addi	r8,sp,16
   4b440:	d9413317 	ldw	r5,1228(sp)
   4b444:	d9013117 	ldw	r4,1220(sp)
   4b448:	10800044 	addi	r2,r2,1
   4b44c:	28c7883a 	add	r3,r5,r3
   4b450:	41000015 	stw	r4,0(r8)
   4b454:	41400115 	stw	r5,4(r8)
   4b458:	d8c12015 	stw	r3,1152(sp)
   4b45c:	d8811f15 	stw	r2,1148(sp)
   4b460:	010001c4 	movi	r4,7
   4b464:	20bb060e 	bge	r4,r2,4a080 <__alt_data_end+0xfffe5690>
   4b468:	003d6206 	br	4a9f4 <__alt_data_end+0xfffe6004>
   4b46c:	010001b4 	movhi	r4,6
   4b470:	21240784 	addi	r4,r4,-28642
   4b474:	d9013615 	stw	r4,1240(sp)
   4b478:	003aa306 	br	49f08 <__alt_data_end+0xfffe5518>
   4b47c:	d8812604 	addi	r2,sp,1176
   4b480:	d8800115 	stw	r2,4(sp)
   4b484:	d9413717 	ldw	r5,1244(sp)
   4b488:	d8812504 	addi	r2,sp,1172
   4b48c:	d8800215 	stw	r2,8(sp)
   4b490:	d8812104 	addi	r2,sp,1156
   4b494:	da400015 	stw	r9,0(sp)
   4b498:	d8800315 	stw	r2,12(sp)
   4b49c:	b809883a 	mov	r4,r23
   4b4a0:	880d883a 	mov	r6,r17
   4b4a4:	01c000c4 	movi	r7,3
   4b4a8:	da013f15 	stw	r8,1276(sp)
   4b4ac:	da413e15 	stw	r9,1272(sp)
   4b4b0:	004bde00 	call	4bde0 <_dtoa_r>
   4b4b4:	da413e17 	ldw	r9,1272(sp)
   4b4b8:	da013f17 	ldw	r8,1276(sp)
   4b4bc:	d8813115 	stw	r2,1220(sp)
   4b4c0:	482b883a 	mov	r21,r9
   4b4c4:	d8c13117 	ldw	r3,1220(sp)
   4b4c8:	00801184 	movi	r2,70
   4b4cc:	1d55883a 	add	r10,r3,r21
   4b4d0:	98bebb1e 	bne	r19,r2,4afc0 <__alt_data_end+0xfffe65d0>
   4b4d4:	19000007 	ldb	r4,0(r3)
   4b4d8:	00800c04 	movi	r2,48
   4b4dc:	2080dd26 	beq	r4,r2,4b854 <___vfprintf_internal_r+0x201c>
   4b4e0:	d8c12617 	ldw	r3,1176(sp)
   4b4e4:	50d5883a 	add	r10,r10,r3
   4b4e8:	003eb506 	br	4afc0 <__alt_data_end+0xfffe65d0>
   4b4ec:	0023883a 	mov	r17,zero
   4b4f0:	003d9b06 	br	4ab60 <__alt_data_end+0xfffe6170>
   4b4f4:	b809883a 	mov	r4,r23
   4b4f8:	b00b883a 	mov	r5,r22
   4b4fc:	d9811e04 	addi	r6,sp,1144
   4b500:	00517ac0 	call	517ac <__sprint_r>
   4b504:	1039e41e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4b508:	d8c12017 	ldw	r3,1152(sp)
   4b50c:	da000404 	addi	r8,sp,16
   4b510:	003d9206 	br	4ab5c <__alt_data_end+0xfffe616c>
   4b514:	b809883a 	mov	r4,r23
   4b518:	b00b883a 	mov	r5,r22
   4b51c:	d9811e04 	addi	r6,sp,1144
   4b520:	00517ac0 	call	517ac <__sprint_r>
   4b524:	1039dc1e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4b528:	d8812617 	ldw	r2,1176(sp)
   4b52c:	d8c12017 	ldw	r3,1152(sp)
   4b530:	da000404 	addi	r8,sp,16
   4b534:	003dfb06 	br	4ad24 <__alt_data_end+0xfffe6334>
   4b538:	010001b4 	movhi	r4,6
   4b53c:	21240384 	addi	r4,r4,-28658
   4b540:	d9012c15 	stw	r4,1200(sp)
   4b544:	d9012c17 	ldw	r4,1200(sp)
   4b548:	1c07883a 	add	r3,r3,r16
   4b54c:	10800044 	addi	r2,r2,1
   4b550:	41000015 	stw	r4,0(r8)
   4b554:	44000115 	stw	r16,4(r8)
   4b558:	d8c12015 	stw	r3,1152(sp)
   4b55c:	d8811f15 	stw	r2,1148(sp)
   4b560:	010001c4 	movi	r4,7
   4b564:	20bfae16 	blt	r4,r2,4b420 <__alt_data_end+0xfffe6a30>
   4b568:	42000204 	addi	r8,r8,8
   4b56c:	003fb406 	br	4b440 <__alt_data_end+0xfffe6a50>
   4b570:	0021883a 	mov	r16,zero
   4b574:	003dfd06 	br	4ad6c <__alt_data_end+0xfffe637c>
   4b578:	014001b4 	movhi	r5,6
   4b57c:	29640784 	addi	r5,r5,-28642
   4b580:	d9413615 	stw	r5,1240(sp)
   4b584:	003ae306 	br	4a114 <__alt_data_end+0xfffe5724>
   4b588:	b809883a 	mov	r4,r23
   4b58c:	b00b883a 	mov	r5,r22
   4b590:	d9811e04 	addi	r6,sp,1144
   4b594:	00517ac0 	call	517ac <__sprint_r>
   4b598:	1039bf1e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4b59c:	d8812617 	ldw	r2,1176(sp)
   4b5a0:	d9413317 	ldw	r5,1228(sp)
   4b5a4:	d8c12017 	ldw	r3,1152(sp)
   4b5a8:	da000404 	addi	r8,sp,16
   4b5ac:	2885c83a 	sub	r2,r5,r2
   4b5b0:	003ded06 	br	4ad68 <__alt_data_end+0xfffe6378>
   4b5b4:	00800184 	movi	r2,6
   4b5b8:	1240012e 	bgeu	r2,r9,4b5c0 <___vfprintf_internal_r+0x1d88>
   4b5bc:	1013883a 	mov	r9,r2
   4b5c0:	4823883a 	mov	r17,r9
   4b5c4:	4805883a 	mov	r2,r9
   4b5c8:	4800b216 	blt	r9,zero,4b894 <___vfprintf_internal_r+0x205c>
   4b5cc:	014001b4 	movhi	r5,6
   4b5d0:	2963f904 	addi	r5,r5,-28700
   4b5d4:	d8812b15 	stw	r2,1196(sp)
   4b5d8:	dc812d15 	stw	r18,1204(sp)
   4b5dc:	d8013215 	stw	zero,1224(sp)
   4b5e0:	d8013415 	stw	zero,1232(sp)
   4b5e4:	d9413115 	stw	r5,1220(sp)
   4b5e8:	0005883a 	mov	r2,zero
   4b5ec:	003a1906 	br	49e54 <__alt_data_end+0xfffe5464>
   4b5f0:	04c00b44 	movi	r19,45
   4b5f4:	dcc12785 	stb	r19,1182(sp)
   4b5f8:	003b0006 	br	4a1fc <__alt_data_end+0xfffe580c>
   4b5fc:	d8c12d17 	ldw	r3,1204(sp)
   4b600:	d9012f17 	ldw	r4,1212(sp)
   4b604:	18800017 	ldw	r2,0(r3)
   4b608:	18c00104 	addi	r3,r3,4
   4b60c:	d8c12d15 	stw	r3,1204(sp)
   4b610:	11000015 	stw	r4,0(r2)
   4b614:	0038c506 	br	4992c <__alt_data_end+0xfffe4f3c>
   4b618:	014001b4 	movhi	r5,6
   4b61c:	2963ee04 	addi	r5,r5,-28744
   4b620:	d9413115 	stw	r5,1220(sp)
   4b624:	003f2406 	br	4b2b8 <__alt_data_end+0xfffe68c8>
   4b628:	00800b44 	movi	r2,45
   4b62c:	d8812785 	stb	r2,1182(sp)
   4b630:	df012b15 	stw	fp,1196(sp)
   4b634:	d8013215 	stw	zero,1224(sp)
   4b638:	df012d17 	ldw	fp,1204(sp)
   4b63c:	00800b44 	movi	r2,45
   4b640:	dc812d15 	stw	r18,1204(sp)
   4b644:	003a0006 	br	49e48 <__alt_data_end+0xfffe5458>
   4b648:	d8c12617 	ldw	r3,1176(sp)
   4b64c:	00bfff44 	movi	r2,-3
   4b650:	18800a16 	blt	r3,r2,4b67c <___vfprintf_internal_r+0x1e44>
   4b654:	48c00916 	blt	r9,r3,4b67c <___vfprintf_internal_r+0x1e44>
   4b658:	d8c13415 	stw	r3,1232(sp)
   4b65c:	040019c4 	movi	r16,103
   4b660:	003e7606 	br	4b03c <__alt_data_end+0xfffe664c>
   4b664:	010001b4 	movhi	r4,6
   4b668:	21240384 	addi	r4,r4,-28658
   4b66c:	d9012c15 	stw	r4,1200(sp)
   4b670:	003c8e06 	br	4a8ac <__alt_data_end+0xfffe5ebc>
   4b674:	5005883a 	mov	r2,r10
   4b678:	003e6506 	br	4b010 <__alt_data_end+0xfffe6620>
   4b67c:	843fff84 	addi	r16,r16,-2
   4b680:	1d7fffc4 	addi	r21,r3,-1
   4b684:	dd412615 	stw	r21,1176(sp)
   4b688:	dc0122c5 	stb	r16,1163(sp)
   4b68c:	a8009216 	blt	r21,zero,4b8d8 <___vfprintf_internal_r+0x20a0>
   4b690:	00800ac4 	movi	r2,43
   4b694:	d8812305 	stb	r2,1164(sp)
   4b698:	00800244 	movi	r2,9
   4b69c:	1540660e 	bge	r2,r21,4b838 <___vfprintf_internal_r+0x2000>
   4b6a0:	dcc122c4 	addi	r19,sp,1163
   4b6a4:	dc012c15 	stw	r16,1200(sp)
   4b6a8:	4023883a 	mov	r17,r8
   4b6ac:	9821883a 	mov	r16,r19
   4b6b0:	a809883a 	mov	r4,r21
   4b6b4:	01400284 	movi	r5,10
   4b6b8:	00452b40 	call	452b4 <__modsi3>
   4b6bc:	10800c04 	addi	r2,r2,48
   4b6c0:	843fffc4 	addi	r16,r16,-1
   4b6c4:	a809883a 	mov	r4,r21
   4b6c8:	01400284 	movi	r5,10
   4b6cc:	80800005 	stb	r2,0(r16)
   4b6d0:	00452600 	call	45260 <__divsi3>
   4b6d4:	01000244 	movi	r4,9
   4b6d8:	102b883a 	mov	r21,r2
   4b6dc:	20bff416 	blt	r4,r2,4b6b0 <__alt_data_end+0xfffe6cc0>
   4b6e0:	8811883a 	mov	r8,r17
   4b6e4:	10800c04 	addi	r2,r2,48
   4b6e8:	8023883a 	mov	r17,r16
   4b6ec:	897fffc4 	addi	r5,r17,-1
   4b6f0:	88bfffc5 	stb	r2,-1(r17)
   4b6f4:	dc012c17 	ldw	r16,1200(sp)
   4b6f8:	2cc08a2e 	bgeu	r5,r19,4b924 <___vfprintf_internal_r+0x20ec>
   4b6fc:	d9812384 	addi	r6,sp,1166
   4b700:	344dc83a 	sub	r6,r6,r17
   4b704:	d9012344 	addi	r4,sp,1165
   4b708:	998d883a 	add	r6,r19,r6
   4b70c:	00000106 	br	4b714 <___vfprintf_internal_r+0x1edc>
   4b710:	28800003 	ldbu	r2,0(r5)
   4b714:	20800005 	stb	r2,0(r4)
   4b718:	21000044 	addi	r4,r4,1
   4b71c:	29400044 	addi	r5,r5,1
   4b720:	21bffb1e 	bne	r4,r6,4b710 <__alt_data_end+0xfffe6d20>
   4b724:	d8812304 	addi	r2,sp,1164
   4b728:	1445c83a 	sub	r2,r2,r17
   4b72c:	d9412344 	addi	r5,sp,1165
   4b730:	2885883a 	add	r2,r5,r2
   4b734:	14e7c83a 	sub	r19,r2,r19
   4b738:	d8813317 	ldw	r2,1228(sp)
   4b73c:	d8c13317 	ldw	r3,1228(sp)
   4b740:	dcc13a15 	stw	r19,1256(sp)
   4b744:	14e3883a 	add	r17,r2,r19
   4b748:	00800044 	movi	r2,1
   4b74c:	10c0550e 	bge	r2,r3,4b8a4 <___vfprintf_internal_r+0x206c>
   4b750:	8c400044 	addi	r17,r17,1
   4b754:	8839883a 	mov	fp,r17
   4b758:	88005016 	blt	r17,zero,4b89c <___vfprintf_internal_r+0x2064>
   4b75c:	d8013415 	stw	zero,1232(sp)
   4b760:	003e3f06 	br	4b060 <__alt_data_end+0xfffe6670>
   4b764:	da412b15 	stw	r9,1196(sp)
   4b768:	dcc12783 	ldbu	r19,1182(sp)
   4b76c:	4823883a 	mov	r17,r9
   4b770:	dc812d15 	stw	r18,1204(sp)
   4b774:	d8013215 	stw	zero,1224(sp)
   4b778:	d8013415 	stw	zero,1232(sp)
   4b77c:	0039ae06 	br	49e38 <__alt_data_end+0xfffe5448>
   4b780:	483de91e 	bne	r9,zero,4af28 <__alt_data_end+0xfffe6538>
   4b784:	8813883a 	mov	r9,r17
   4b788:	003de706 	br	4af28 <__alt_data_end+0xfffe6538>
   4b78c:	b809883a 	mov	r4,r23
   4b790:	b00b883a 	mov	r5,r22
   4b794:	d9811e04 	addi	r6,sp,1144
   4b798:	00517ac0 	call	517ac <__sprint_r>
   4b79c:	10393e1e 	bne	r2,zero,49c98 <__alt_data_end+0xfffe52a8>
   4b7a0:	dc012617 	ldw	r16,1176(sp)
   4b7a4:	d8c12017 	ldw	r3,1152(sp)
   4b7a8:	d8811f17 	ldw	r2,1148(sp)
   4b7ac:	da000404 	addi	r8,sp,16
   4b7b0:	003ea006 	br	4b234 <__alt_data_end+0xfffe6844>
   4b7b4:	00c00b44 	movi	r3,45
   4b7b8:	2460003c 	xorhi	r17,r4,32768
   4b7bc:	d8c12b05 	stb	r3,1196(sp)
   4b7c0:	003ddf06 	br	4af40 <__alt_data_end+0xfffe6550>
   4b7c4:	02400184 	movi	r9,6
   4b7c8:	003dd706 	br	4af28 <__alt_data_end+0xfffe6538>
   4b7cc:	4d400044 	addi	r21,r9,1
   4b7d0:	003de206 	br	4af5c <__alt_data_end+0xfffe656c>
   4b7d4:	d8c13417 	ldw	r3,1232(sp)
   4b7d8:	00c0490e 	bge	zero,r3,4b900 <___vfprintf_internal_r+0x20c8>
   4b7dc:	04400044 	movi	r17,1
   4b7e0:	d9013317 	ldw	r4,1228(sp)
   4b7e4:	8923883a 	add	r17,r17,r4
   4b7e8:	8839883a 	mov	fp,r17
   4b7ec:	883e1c0e 	bge	r17,zero,4b060 <__alt_data_end+0xfffe6670>
   4b7f0:	0039883a 	mov	fp,zero
   4b7f4:	003e1a06 	br	4b060 <__alt_data_end+0xfffe6670>
   4b7f8:	00c03b0e 	bge	zero,r3,4b8e8 <___vfprintf_internal_r+0x20b0>
   4b7fc:	4800021e 	bne	r9,zero,4b808 <___vfprintf_internal_r+0x1fd0>
   4b800:	e080004c 	andi	r2,fp,1
   4b804:	10000626 	beq	r2,zero,4b820 <___vfprintf_internal_r+0x1fe8>
   4b808:	d8c13417 	ldw	r3,1232(sp)
   4b80c:	4a400044 	addi	r9,r9,1
   4b810:	1a63883a 	add	r17,r3,r9
   4b814:	8839883a 	mov	fp,r17
   4b818:	883e110e 	bge	r17,zero,4b060 <__alt_data_end+0xfffe6670>
   4b81c:	003ff406 	br	4b7f0 <__alt_data_end+0xfffe6e00>
   4b820:	1839883a 	mov	fp,r3
   4b824:	18004116 	blt	r3,zero,4b92c <___vfprintf_internal_r+0x20f4>
   4b828:	dc413417 	ldw	r17,1232(sp)
   4b82c:	003e0c06 	br	4b060 <__alt_data_end+0xfffe6670>
   4b830:	d8812117 	ldw	r2,1156(sp)
   4b834:	003df606 	br	4b010 <__alt_data_end+0xfffe6620>
   4b838:	00800c04 	movi	r2,48
   4b83c:	a8c00c04 	addi	r3,r21,48
   4b840:	d8812345 	stb	r2,1165(sp)
   4b844:	d8c12385 	stb	r3,1166(sp)
   4b848:	d88123c4 	addi	r2,sp,1167
   4b84c:	dcc122c4 	addi	r19,sp,1163
   4b850:	003fb806 	br	4b734 <__alt_data_end+0xfffe6d44>
   4b854:	d9013717 	ldw	r4,1244(sp)
   4b858:	880b883a 	mov	r5,r17
   4b85c:	000d883a 	mov	r6,zero
   4b860:	000f883a 	mov	r7,zero
   4b864:	da013f15 	stw	r8,1276(sp)
   4b868:	da413e15 	stw	r9,1272(sp)
   4b86c:	da813d15 	stw	r10,1268(sp)
   4b870:	0054a500 	call	54a50 <__eqdf2>
   4b874:	da013f17 	ldw	r8,1276(sp)
   4b878:	da413e17 	ldw	r9,1272(sp)
   4b87c:	da813d17 	ldw	r10,1268(sp)
   4b880:	103f1726 	beq	r2,zero,4b4e0 <__alt_data_end+0xfffe6af0>
   4b884:	00800044 	movi	r2,1
   4b888:	1547c83a 	sub	r3,r2,r21
   4b88c:	d8c12615 	stw	r3,1176(sp)
   4b890:	003f1406 	br	4b4e4 <__alt_data_end+0xfffe6af4>
   4b894:	0005883a 	mov	r2,zero
   4b898:	003f4c06 	br	4b5cc <__alt_data_end+0xfffe6bdc>
   4b89c:	0039883a 	mov	fp,zero
   4b8a0:	003fae06 	br	4b75c <__alt_data_end+0xfffe6d6c>
   4b8a4:	e084703a 	and	r2,fp,r2
   4b8a8:	103faa26 	beq	r2,zero,4b754 <__alt_data_end+0xfffe6d64>
   4b8ac:	003fa806 	br	4b750 <__alt_data_end+0xfffe6d60>
   4b8b0:	d9412d17 	ldw	r5,1204(sp)
   4b8b4:	2a400017 	ldw	r9,0(r5)
   4b8b8:	28c00104 	addi	r3,r5,4
   4b8bc:	d8c12d15 	stw	r3,1204(sp)
   4b8c0:	483ebc0e 	bge	r9,zero,4b3b4 <__alt_data_end+0xfffe69c4>
   4b8c4:	027fffc4 	movi	r9,-1
   4b8c8:	e4000047 	ldb	r16,1(fp)
   4b8cc:	00384206 	br	499d8 <__alt_data_end+0xfffe4fe8>
   4b8d0:	043fffc4 	movi	r16,-1
   4b8d4:	0038ce06 	br	49c10 <__alt_data_end+0xfffe5220>
   4b8d8:	00800b44 	movi	r2,45
   4b8dc:	056bc83a 	sub	r21,zero,r21
   4b8e0:	d8812305 	stb	r2,1164(sp)
   4b8e4:	003f6c06 	br	4b698 <__alt_data_end+0xfffe6ca8>
   4b8e8:	4800081e 	bne	r9,zero,4b90c <___vfprintf_internal_r+0x20d4>
   4b8ec:	e080004c 	andi	r2,fp,1
   4b8f0:	1000061e 	bne	r2,zero,4b90c <___vfprintf_internal_r+0x20d4>
   4b8f4:	07000044 	movi	fp,1
   4b8f8:	e023883a 	mov	r17,fp
   4b8fc:	003dd806 	br	4b060 <__alt_data_end+0xfffe6670>
   4b900:	04400084 	movi	r17,2
   4b904:	88e3c83a 	sub	r17,r17,r3
   4b908:	003fb506 	br	4b7e0 <__alt_data_end+0xfffe6df0>
   4b90c:	4c400084 	addi	r17,r9,2
   4b910:	8839883a 	mov	fp,r17
   4b914:	883dd20e 	bge	r17,zero,4b060 <__alt_data_end+0xfffe6670>
   4b918:	003fb506 	br	4b7f0 <__alt_data_end+0xfffe6e00>
   4b91c:	d8c12617 	ldw	r3,1176(sp)
   4b920:	003f5706 	br	4b680 <__alt_data_end+0xfffe6c90>
   4b924:	d8812344 	addi	r2,sp,1165
   4b928:	003f8206 	br	4b734 <__alt_data_end+0xfffe6d44>
   4b92c:	0039883a 	mov	fp,zero
   4b930:	003fbd06 	br	4b828 <__alt_data_end+0xfffe6e38>

0004b934 <__vfprintf_internal>:
   4b934:	2007883a 	mov	r3,r4
   4b938:	010001b4 	movhi	r4,6
   4b93c:	212bc704 	addi	r4,r4,-20708
   4b940:	21000017 	ldw	r4,0(r4)
   4b944:	2805883a 	mov	r2,r5
   4b948:	300f883a 	mov	r7,r6
   4b94c:	180b883a 	mov	r5,r3
   4b950:	100d883a 	mov	r6,r2
   4b954:	00498381 	jmpi	49838 <___vfprintf_internal_r>

0004b958 <_vsnprintf_r>:
   4b958:	3005883a 	mov	r2,r6
   4b95c:	30003616 	blt	r6,zero,4ba38 <_vsnprintf_r+0xe0>
   4b960:	deffe404 	addi	sp,sp,-112
   4b964:	00c08204 	movi	r3,520
   4b968:	dc001a15 	stw	r16,104(sp)
   4b96c:	dfc01b15 	stw	ra,108(sp)
   4b970:	d8c0030d 	sth	r3,12(sp)
   4b974:	d9400015 	stw	r5,0(sp)
   4b978:	d9400415 	stw	r5,16(sp)
   4b97c:	380d883a 	mov	r6,r7
   4b980:	2021883a 	mov	r16,r4
   4b984:	10001326 	beq	r2,zero,4b9d4 <_vsnprintf_r+0x7c>
   4b988:	00c001b4 	movhi	r3,6
   4b98c:	18ebc704 	addi	r3,r3,-20708
   4b990:	19000017 	ldw	r4,0(r3)
   4b994:	d9c01c17 	ldw	r7,112(sp)
   4b998:	10bfffc4 	addi	r2,r2,-1
   4b99c:	d8800215 	stw	r2,8(sp)
   4b9a0:	d8800515 	stw	r2,20(sp)
   4b9a4:	d80b883a 	mov	r5,sp
   4b9a8:	00bfffc4 	movi	r2,-1
   4b9ac:	d880038d 	sth	r2,14(sp)
   4b9b0:	00477c80 	call	477c8 <___svfprintf_internal_r>
   4b9b4:	00ffffc4 	movi	r3,-1
   4b9b8:	10c01c16 	blt	r2,r3,4ba2c <_vsnprintf_r+0xd4>
   4b9bc:	d8c00017 	ldw	r3,0(sp)
   4b9c0:	18000005 	stb	zero,0(r3)
   4b9c4:	dfc01b17 	ldw	ra,108(sp)
   4b9c8:	dc001a17 	ldw	r16,104(sp)
   4b9cc:	dec01c04 	addi	sp,sp,112
   4b9d0:	f800283a 	ret
   4b9d4:	008001b4 	movhi	r2,6
   4b9d8:	10abc704 	addi	r2,r2,-20708
   4b9dc:	11000017 	ldw	r4,0(r2)
   4b9e0:	d9c01c17 	ldw	r7,112(sp)
   4b9e4:	00bfffc4 	movi	r2,-1
   4b9e8:	d80b883a 	mov	r5,sp
   4b9ec:	d8000215 	stw	zero,8(sp)
   4b9f0:	d8000515 	stw	zero,20(sp)
   4b9f4:	d880038d 	sth	r2,14(sp)
   4b9f8:	00477c80 	call	477c8 <___svfprintf_internal_r>
   4b9fc:	00ffffc4 	movi	r3,-1
   4ba00:	10c00416 	blt	r2,r3,4ba14 <_vsnprintf_r+0xbc>
   4ba04:	dfc01b17 	ldw	ra,108(sp)
   4ba08:	dc001a17 	ldw	r16,104(sp)
   4ba0c:	dec01c04 	addi	sp,sp,112
   4ba10:	f800283a 	ret
   4ba14:	00c022c4 	movi	r3,139
   4ba18:	80c00015 	stw	r3,0(r16)
   4ba1c:	dfc01b17 	ldw	ra,108(sp)
   4ba20:	dc001a17 	ldw	r16,104(sp)
   4ba24:	dec01c04 	addi	sp,sp,112
   4ba28:	f800283a 	ret
   4ba2c:	00c022c4 	movi	r3,139
   4ba30:	80c00015 	stw	r3,0(r16)
   4ba34:	003fe106 	br	4b9bc <__alt_data_end+0xfffe6fcc>
   4ba38:	008022c4 	movi	r2,139
   4ba3c:	20800015 	stw	r2,0(r4)
   4ba40:	00bfffc4 	movi	r2,-1
   4ba44:	f800283a 	ret

0004ba48 <vsnprintf>:
   4ba48:	008001b4 	movhi	r2,6
   4ba4c:	10abc704 	addi	r2,r2,-20708
   4ba50:	2011883a 	mov	r8,r4
   4ba54:	11000017 	ldw	r4,0(r2)
   4ba58:	defffe04 	addi	sp,sp,-8
   4ba5c:	2807883a 	mov	r3,r5
   4ba60:	3005883a 	mov	r2,r6
   4ba64:	d9c00015 	stw	r7,0(sp)
   4ba68:	400b883a 	mov	r5,r8
   4ba6c:	180d883a 	mov	r6,r3
   4ba70:	100f883a 	mov	r7,r2
   4ba74:	dfc00115 	stw	ra,4(sp)
   4ba78:	004b9580 	call	4b958 <_vsnprintf_r>
   4ba7c:	dfc00117 	ldw	ra,4(sp)
   4ba80:	dec00204 	addi	sp,sp,8
   4ba84:	f800283a 	ret

0004ba88 <__swsetup_r>:
   4ba88:	008001b4 	movhi	r2,6
   4ba8c:	defffd04 	addi	sp,sp,-12
   4ba90:	10abc704 	addi	r2,r2,-20708
   4ba94:	dc400115 	stw	r17,4(sp)
   4ba98:	2023883a 	mov	r17,r4
   4ba9c:	11000017 	ldw	r4,0(r2)
   4baa0:	dc000015 	stw	r16,0(sp)
   4baa4:	dfc00215 	stw	ra,8(sp)
   4baa8:	2821883a 	mov	r16,r5
   4baac:	20000226 	beq	r4,zero,4bab8 <__swsetup_r+0x30>
   4bab0:	20c00e17 	ldw	r3,56(r4)
   4bab4:	18002e26 	beq	r3,zero,4bb70 <__swsetup_r+0xe8>
   4bab8:	8080030b 	ldhu	r2,12(r16)
   4babc:	10c0020c 	andi	r3,r2,8
   4bac0:	100d883a 	mov	r6,r2
   4bac4:	18000f26 	beq	r3,zero,4bb04 <__swsetup_r+0x7c>
   4bac8:	80c00417 	ldw	r3,16(r16)
   4bacc:	18001526 	beq	r3,zero,4bb24 <__swsetup_r+0x9c>
   4bad0:	1100004c 	andi	r4,r2,1
   4bad4:	20001c1e 	bne	r4,zero,4bb48 <__swsetup_r+0xc0>
   4bad8:	1080008c 	andi	r2,r2,2
   4badc:	1000261e 	bne	r2,zero,4bb78 <__swsetup_r+0xf0>
   4bae0:	80800517 	ldw	r2,20(r16)
   4bae4:	80800215 	stw	r2,8(r16)
   4bae8:	18001c26 	beq	r3,zero,4bb5c <__swsetup_r+0xd4>
   4baec:	0005883a 	mov	r2,zero
   4baf0:	dfc00217 	ldw	ra,8(sp)
   4baf4:	dc400117 	ldw	r17,4(sp)
   4baf8:	dc000017 	ldw	r16,0(sp)
   4bafc:	dec00304 	addi	sp,sp,12
   4bb00:	f800283a 	ret
   4bb04:	3080040c 	andi	r2,r6,16
   4bb08:	10001726 	beq	r2,zero,4bb68 <__swsetup_r+0xe0>
   4bb0c:	3080010c 	andi	r2,r6,4
   4bb10:	10001b1e 	bne	r2,zero,4bb80 <__swsetup_r+0xf8>
   4bb14:	80c00417 	ldw	r3,16(r16)
   4bb18:	30800214 	ori	r2,r6,8
   4bb1c:	8080030d 	sth	r2,12(r16)
   4bb20:	183feb1e 	bne	r3,zero,4bad0 <__alt_data_end+0xfffe70e0>
   4bb24:	1140a00c 	andi	r5,r2,640
   4bb28:	01008004 	movi	r4,512
   4bb2c:	293fe826 	beq	r5,r4,4bad0 <__alt_data_end+0xfffe70e0>
   4bb30:	8809883a 	mov	r4,r17
   4bb34:	800b883a 	mov	r5,r16
   4bb38:	004e61c0 	call	4e61c <__smakebuf_r>
   4bb3c:	8080030b 	ldhu	r2,12(r16)
   4bb40:	80c00417 	ldw	r3,16(r16)
   4bb44:	003fe206 	br	4bad0 <__alt_data_end+0xfffe70e0>
   4bb48:	80800517 	ldw	r2,20(r16)
   4bb4c:	80000215 	stw	zero,8(r16)
   4bb50:	0085c83a 	sub	r2,zero,r2
   4bb54:	80800615 	stw	r2,24(r16)
   4bb58:	183fe41e 	bne	r3,zero,4baec <__alt_data_end+0xfffe70fc>
   4bb5c:	8080030b 	ldhu	r2,12(r16)
   4bb60:	1080200c 	andi	r2,r2,128
   4bb64:	103fe226 	beq	r2,zero,4baf0 <__alt_data_end+0xfffe7100>
   4bb68:	00bfffc4 	movi	r2,-1
   4bb6c:	003fe006 	br	4baf0 <__alt_data_end+0xfffe7100>
   4bb70:	004dac40 	call	4dac4 <__sinit>
   4bb74:	003fd006 	br	4bab8 <__alt_data_end+0xfffe70c8>
   4bb78:	0005883a 	mov	r2,zero
   4bb7c:	003fd906 	br	4bae4 <__alt_data_end+0xfffe70f4>
   4bb80:	81400c17 	ldw	r5,48(r16)
   4bb84:	28000626 	beq	r5,zero,4bba0 <__swsetup_r+0x118>
   4bb88:	80801004 	addi	r2,r16,64
   4bb8c:	28800326 	beq	r5,r2,4bb9c <__swsetup_r+0x114>
   4bb90:	8809883a 	mov	r4,r17
   4bb94:	004dc380 	call	4dc38 <_free_r>
   4bb98:	8180030b 	ldhu	r6,12(r16)
   4bb9c:	80000c15 	stw	zero,48(r16)
   4bba0:	80c00417 	ldw	r3,16(r16)
   4bba4:	00bff6c4 	movi	r2,-37
   4bba8:	118c703a 	and	r6,r2,r6
   4bbac:	80000115 	stw	zero,4(r16)
   4bbb0:	80c00015 	stw	r3,0(r16)
   4bbb4:	003fd806 	br	4bb18 <__alt_data_end+0xfffe7128>

0004bbb8 <quorem>:
   4bbb8:	defff204 	addi	sp,sp,-56
   4bbbc:	ddc00b15 	stw	r23,44(sp)
   4bbc0:	20800417 	ldw	r2,16(r4)
   4bbc4:	2dc00417 	ldw	r23,16(r5)
   4bbc8:	dfc00d15 	stw	ra,52(sp)
   4bbcc:	df000c15 	stw	fp,48(sp)
   4bbd0:	dd800a15 	stw	r22,40(sp)
   4bbd4:	dd400915 	stw	r21,36(sp)
   4bbd8:	dd000815 	stw	r20,32(sp)
   4bbdc:	dcc00715 	stw	r19,28(sp)
   4bbe0:	dc800615 	stw	r18,24(sp)
   4bbe4:	dc400515 	stw	r17,20(sp)
   4bbe8:	dc000415 	stw	r16,16(sp)
   4bbec:	15c07a16 	blt	r2,r23,4bdd8 <quorem+0x220>
   4bbf0:	bdffffc4 	addi	r23,r23,-1
   4bbf4:	bde9883a 	add	r20,r23,r23
   4bbf8:	28c00504 	addi	r3,r5,20
   4bbfc:	a529883a 	add	r20,r20,r20
   4bc00:	1d39883a 	add	fp,r3,r20
   4bc04:	24c00504 	addi	r19,r4,20
   4bc08:	d9400215 	stw	r5,8(sp)
   4bc0c:	9d29883a 	add	r20,r19,r20
   4bc10:	e1400017 	ldw	r5,0(fp)
   4bc14:	d9000015 	stw	r4,0(sp)
   4bc18:	a1000017 	ldw	r4,0(r20)
   4bc1c:	29400044 	addi	r5,r5,1
   4bc20:	d8c00115 	stw	r3,4(sp)
   4bc24:	dd000315 	stw	r20,12(sp)
   4bc28:	00453100 	call	45310 <__udivsi3>
   4bc2c:	1025883a 	mov	r18,r2
   4bc30:	10003026 	beq	r2,zero,4bcf4 <quorem+0x13c>
   4bc34:	dc400117 	ldw	r17,4(sp)
   4bc38:	9829883a 	mov	r20,r19
   4bc3c:	002d883a 	mov	r22,zero
   4bc40:	0021883a 	mov	r16,zero
   4bc44:	8d400017 	ldw	r21,0(r17)
   4bc48:	900b883a 	mov	r5,r18
   4bc4c:	8c400104 	addi	r17,r17,4
   4bc50:	a93fffcc 	andi	r4,r21,65535
   4bc54:	00453200 	call	45320 <__mulsi3>
   4bc58:	a808d43a 	srli	r4,r21,16
   4bc5c:	900b883a 	mov	r5,r18
   4bc60:	b0ad883a 	add	r22,r22,r2
   4bc64:	00453200 	call	45320 <__mulsi3>
   4bc68:	a1000017 	ldw	r4,0(r20)
   4bc6c:	b00cd43a 	srli	r6,r22,16
   4bc70:	b0ffffcc 	andi	r3,r22,65535
   4bc74:	217fffcc 	andi	r5,r4,65535
   4bc78:	2c21883a 	add	r16,r5,r16
   4bc7c:	80c7c83a 	sub	r3,r16,r3
   4bc80:	2008d43a 	srli	r4,r4,16
   4bc84:	3085883a 	add	r2,r6,r2
   4bc88:	1821d43a 	srai	r16,r3,16
   4bc8c:	117fffcc 	andi	r5,r2,65535
   4bc90:	2149c83a 	sub	r4,r4,r5
   4bc94:	2421883a 	add	r16,r4,r16
   4bc98:	8008943a 	slli	r4,r16,16
   4bc9c:	18ffffcc 	andi	r3,r3,65535
   4bca0:	102cd43a 	srli	r22,r2,16
   4bca4:	20c8b03a 	or	r4,r4,r3
   4bca8:	a1000015 	stw	r4,0(r20)
   4bcac:	8021d43a 	srai	r16,r16,16
   4bcb0:	a5000104 	addi	r20,r20,4
   4bcb4:	e47fe32e 	bgeu	fp,r17,4bc44 <__alt_data_end+0xfffe7254>
   4bcb8:	d8c00317 	ldw	r3,12(sp)
   4bcbc:	18800017 	ldw	r2,0(r3)
   4bcc0:	10000c1e 	bne	r2,zero,4bcf4 <quorem+0x13c>
   4bcc4:	18bfff04 	addi	r2,r3,-4
   4bcc8:	9880082e 	bgeu	r19,r2,4bcec <quorem+0x134>
   4bccc:	18ffff17 	ldw	r3,-4(r3)
   4bcd0:	18000326 	beq	r3,zero,4bce0 <quorem+0x128>
   4bcd4:	00000506 	br	4bcec <quorem+0x134>
   4bcd8:	10c00017 	ldw	r3,0(r2)
   4bcdc:	1800031e 	bne	r3,zero,4bcec <quorem+0x134>
   4bce0:	10bfff04 	addi	r2,r2,-4
   4bce4:	bdffffc4 	addi	r23,r23,-1
   4bce8:	98bffb36 	bltu	r19,r2,4bcd8 <__alt_data_end+0xfffe72e8>
   4bcec:	d8c00017 	ldw	r3,0(sp)
   4bcf0:	1dc00415 	stw	r23,16(r3)
   4bcf4:	d9000017 	ldw	r4,0(sp)
   4bcf8:	d9400217 	ldw	r5,8(sp)
   4bcfc:	004f3940 	call	4f394 <__mcmp>
   4bd00:	10002816 	blt	r2,zero,4bda4 <quorem+0x1ec>
   4bd04:	dc400117 	ldw	r17,4(sp)
   4bd08:	94800044 	addi	r18,r18,1
   4bd0c:	980d883a 	mov	r6,r19
   4bd10:	0007883a 	mov	r3,zero
   4bd14:	31000017 	ldw	r4,0(r6)
   4bd18:	89400017 	ldw	r5,0(r17)
   4bd1c:	31800104 	addi	r6,r6,4
   4bd20:	20bfffcc 	andi	r2,r4,65535
   4bd24:	10c7883a 	add	r3,r2,r3
   4bd28:	28bfffcc 	andi	r2,r5,65535
   4bd2c:	1885c83a 	sub	r2,r3,r2
   4bd30:	280ad43a 	srli	r5,r5,16
   4bd34:	2008d43a 	srli	r4,r4,16
   4bd38:	1007d43a 	srai	r3,r2,16
   4bd3c:	10bfffcc 	andi	r2,r2,65535
   4bd40:	2149c83a 	sub	r4,r4,r5
   4bd44:	20c9883a 	add	r4,r4,r3
   4bd48:	200a943a 	slli	r5,r4,16
   4bd4c:	8c400104 	addi	r17,r17,4
   4bd50:	2007d43a 	srai	r3,r4,16
   4bd54:	2884b03a 	or	r2,r5,r2
   4bd58:	30bfff15 	stw	r2,-4(r6)
   4bd5c:	e47fed2e 	bgeu	fp,r17,4bd14 <__alt_data_end+0xfffe7324>
   4bd60:	bdc5883a 	add	r2,r23,r23
   4bd64:	1085883a 	add	r2,r2,r2
   4bd68:	9887883a 	add	r3,r19,r2
   4bd6c:	18800017 	ldw	r2,0(r3)
   4bd70:	10000c1e 	bne	r2,zero,4bda4 <quorem+0x1ec>
   4bd74:	18bfff04 	addi	r2,r3,-4
   4bd78:	9880082e 	bgeu	r19,r2,4bd9c <quorem+0x1e4>
   4bd7c:	18ffff17 	ldw	r3,-4(r3)
   4bd80:	18000326 	beq	r3,zero,4bd90 <quorem+0x1d8>
   4bd84:	00000506 	br	4bd9c <quorem+0x1e4>
   4bd88:	10c00017 	ldw	r3,0(r2)
   4bd8c:	1800031e 	bne	r3,zero,4bd9c <quorem+0x1e4>
   4bd90:	10bfff04 	addi	r2,r2,-4
   4bd94:	bdffffc4 	addi	r23,r23,-1
   4bd98:	98bffb36 	bltu	r19,r2,4bd88 <__alt_data_end+0xfffe7398>
   4bd9c:	d8c00017 	ldw	r3,0(sp)
   4bda0:	1dc00415 	stw	r23,16(r3)
   4bda4:	9005883a 	mov	r2,r18
   4bda8:	dfc00d17 	ldw	ra,52(sp)
   4bdac:	df000c17 	ldw	fp,48(sp)
   4bdb0:	ddc00b17 	ldw	r23,44(sp)
   4bdb4:	dd800a17 	ldw	r22,40(sp)
   4bdb8:	dd400917 	ldw	r21,36(sp)
   4bdbc:	dd000817 	ldw	r20,32(sp)
   4bdc0:	dcc00717 	ldw	r19,28(sp)
   4bdc4:	dc800617 	ldw	r18,24(sp)
   4bdc8:	dc400517 	ldw	r17,20(sp)
   4bdcc:	dc000417 	ldw	r16,16(sp)
   4bdd0:	dec00e04 	addi	sp,sp,56
   4bdd4:	f800283a 	ret
   4bdd8:	0005883a 	mov	r2,zero
   4bddc:	003ff206 	br	4bda8 <__alt_data_end+0xfffe73b8>

0004bde0 <_dtoa_r>:
   4bde0:	20801017 	ldw	r2,64(r4)
   4bde4:	deffde04 	addi	sp,sp,-136
   4bde8:	dd401d15 	stw	r21,116(sp)
   4bdec:	dcc01b15 	stw	r19,108(sp)
   4bdf0:	dc801a15 	stw	r18,104(sp)
   4bdf4:	dc401915 	stw	r17,100(sp)
   4bdf8:	dc001815 	stw	r16,96(sp)
   4bdfc:	dfc02115 	stw	ra,132(sp)
   4be00:	df002015 	stw	fp,128(sp)
   4be04:	ddc01f15 	stw	r23,124(sp)
   4be08:	dd801e15 	stw	r22,120(sp)
   4be0c:	dd001c15 	stw	r20,112(sp)
   4be10:	d9c00315 	stw	r7,12(sp)
   4be14:	2021883a 	mov	r16,r4
   4be18:	302b883a 	mov	r21,r6
   4be1c:	2825883a 	mov	r18,r5
   4be20:	dc402417 	ldw	r17,144(sp)
   4be24:	3027883a 	mov	r19,r6
   4be28:	10000826 	beq	r2,zero,4be4c <_dtoa_r+0x6c>
   4be2c:	21801117 	ldw	r6,68(r4)
   4be30:	00c00044 	movi	r3,1
   4be34:	100b883a 	mov	r5,r2
   4be38:	1986983a 	sll	r3,r3,r6
   4be3c:	11800115 	stw	r6,4(r2)
   4be40:	10c00215 	stw	r3,8(r2)
   4be44:	004eac00 	call	4eac0 <_Bfree>
   4be48:	80001015 	stw	zero,64(r16)
   4be4c:	a8002d16 	blt	r21,zero,4bf04 <_dtoa_r+0x124>
   4be50:	88000015 	stw	zero,0(r17)
   4be54:	a8dffc2c 	andhi	r3,r21,32752
   4be58:	009ffc34 	movhi	r2,32752
   4be5c:	18801b26 	beq	r3,r2,4becc <_dtoa_r+0xec>
   4be60:	9009883a 	mov	r4,r18
   4be64:	980b883a 	mov	r5,r19
   4be68:	000d883a 	mov	r6,zero
   4be6c:	000f883a 	mov	r7,zero
   4be70:	0054a500 	call	54a50 <__eqdf2>
   4be74:	10002a1e 	bne	r2,zero,4bf20 <_dtoa_r+0x140>
   4be78:	d8c02317 	ldw	r3,140(sp)
   4be7c:	d9002517 	ldw	r4,148(sp)
   4be80:	00800044 	movi	r2,1
   4be84:	18800015 	stw	r2,0(r3)
   4be88:	2001a226 	beq	r4,zero,4c514 <_dtoa_r+0x734>
   4be8c:	008001b4 	movhi	r2,6
   4be90:	10a3fb44 	addi	r2,r2,-28691
   4be94:	20800015 	stw	r2,0(r4)
   4be98:	10bfffc4 	addi	r2,r2,-1
   4be9c:	dfc02117 	ldw	ra,132(sp)
   4bea0:	df002017 	ldw	fp,128(sp)
   4bea4:	ddc01f17 	ldw	r23,124(sp)
   4bea8:	dd801e17 	ldw	r22,120(sp)
   4beac:	dd401d17 	ldw	r21,116(sp)
   4beb0:	dd001c17 	ldw	r20,112(sp)
   4beb4:	dcc01b17 	ldw	r19,108(sp)
   4beb8:	dc801a17 	ldw	r18,104(sp)
   4bebc:	dc401917 	ldw	r17,100(sp)
   4bec0:	dc001817 	ldw	r16,96(sp)
   4bec4:	dec02204 	addi	sp,sp,136
   4bec8:	f800283a 	ret
   4becc:	d8c02317 	ldw	r3,140(sp)
   4bed0:	0089c3c4 	movi	r2,9999
   4bed4:	18800015 	stw	r2,0(r3)
   4bed8:	90017c26 	beq	r18,zero,4c4cc <_dtoa_r+0x6ec>
   4bedc:	008001b4 	movhi	r2,6
   4bee0:	10a4af04 	addi	r2,r2,-27972
   4bee4:	d9002517 	ldw	r4,148(sp)
   4bee8:	203fec26 	beq	r4,zero,4be9c <__alt_data_end+0xfffe74ac>
   4beec:	10c000c7 	ldb	r3,3(r2)
   4bef0:	18017d1e 	bne	r3,zero,4c4e8 <_dtoa_r+0x708>
   4bef4:	10c000c4 	addi	r3,r2,3
   4bef8:	d9802517 	ldw	r6,148(sp)
   4befc:	30c00015 	stw	r3,0(r6)
   4bf00:	003fe606 	br	4be9c <__alt_data_end+0xfffe74ac>
   4bf04:	04e00034 	movhi	r19,32768
   4bf08:	9cffffc4 	addi	r19,r19,-1
   4bf0c:	00800044 	movi	r2,1
   4bf10:	ace6703a 	and	r19,r21,r19
   4bf14:	88800015 	stw	r2,0(r17)
   4bf18:	982b883a 	mov	r21,r19
   4bf1c:	003fcd06 	br	4be54 <__alt_data_end+0xfffe7464>
   4bf20:	d8800204 	addi	r2,sp,8
   4bf24:	a822d53a 	srli	r17,r21,20
   4bf28:	d8800015 	stw	r2,0(sp)
   4bf2c:	8009883a 	mov	r4,r16
   4bf30:	900b883a 	mov	r5,r18
   4bf34:	980d883a 	mov	r6,r19
   4bf38:	d9c00104 	addi	r7,sp,4
   4bf3c:	004f7080 	call	4f708 <__d2b>
   4bf40:	1039883a 	mov	fp,r2
   4bf44:	88016a1e 	bne	r17,zero,4c4f0 <_dtoa_r+0x710>
   4bf48:	dd000217 	ldw	r20,8(sp)
   4bf4c:	dc400117 	ldw	r17,4(sp)
   4bf50:	00befbc4 	movi	r2,-1041
   4bf54:	a463883a 	add	r17,r20,r17
   4bf58:	8882ea16 	blt	r17,r2,4cb04 <_dtoa_r+0xd24>
   4bf5c:	00bf0384 	movi	r2,-1010
   4bf60:	1445c83a 	sub	r2,r2,r17
   4bf64:	89010484 	addi	r4,r17,1042
   4bf68:	a8aa983a 	sll	r21,r21,r2
   4bf6c:	9108d83a 	srl	r4,r18,r4
   4bf70:	a908b03a 	or	r4,r21,r4
   4bf74:	0055f280 	call	55f28 <__floatunsidf>
   4bf78:	017f8434 	movhi	r5,65040
   4bf7c:	01800044 	movi	r6,1
   4bf80:	1009883a 	mov	r4,r2
   4bf84:	194b883a 	add	r5,r3,r5
   4bf88:	8c7fffc4 	addi	r17,r17,-1
   4bf8c:	d9800f15 	stw	r6,60(sp)
   4bf90:	000d883a 	mov	r6,zero
   4bf94:	01cffe34 	movhi	r7,16376
   4bf98:	00555000 	call	55500 <__subdf3>
   4bf9c:	0198dbf4 	movhi	r6,25455
   4bfa0:	01cff4f4 	movhi	r7,16339
   4bfa4:	1009883a 	mov	r4,r2
   4bfa8:	180b883a 	mov	r5,r3
   4bfac:	3190d844 	addi	r6,r6,17249
   4bfb0:	39e1e9c4 	addi	r7,r7,-30809
   4bfb4:	0054c940 	call	54c94 <__muldf3>
   4bfb8:	01a2d874 	movhi	r6,35681
   4bfbc:	01cff1f4 	movhi	r7,16327
   4bfc0:	180b883a 	mov	r5,r3
   4bfc4:	31b22cc4 	addi	r6,r6,-14157
   4bfc8:	39e28a04 	addi	r7,r7,-30168
   4bfcc:	1009883a 	mov	r4,r2
   4bfd0:	00541b40 	call	541b4 <__adddf3>
   4bfd4:	8809883a 	mov	r4,r17
   4bfd8:	102d883a 	mov	r22,r2
   4bfdc:	182b883a 	mov	r21,r3
   4bfe0:	0055e580 	call	55e58 <__floatsidf>
   4bfe4:	019427f4 	movhi	r6,20639
   4bfe8:	01cff4f4 	movhi	r7,16339
   4bfec:	1009883a 	mov	r4,r2
   4bff0:	180b883a 	mov	r5,r3
   4bff4:	319e7ec4 	addi	r6,r6,31227
   4bff8:	39d104c4 	addi	r7,r7,17427
   4bffc:	0054c940 	call	54c94 <__muldf3>
   4c000:	b009883a 	mov	r4,r22
   4c004:	a80b883a 	mov	r5,r21
   4c008:	100d883a 	mov	r6,r2
   4c00c:	180f883a 	mov	r7,r3
   4c010:	00541b40 	call	541b4 <__adddf3>
   4c014:	1009883a 	mov	r4,r2
   4c018:	180b883a 	mov	r5,r3
   4c01c:	102d883a 	mov	r22,r2
   4c020:	182b883a 	mov	r21,r3
   4c024:	0055dd00 	call	55dd0 <__fixdfsi>
   4c028:	b009883a 	mov	r4,r22
   4c02c:	a80b883a 	mov	r5,r21
   4c030:	000d883a 	mov	r6,zero
   4c034:	000f883a 	mov	r7,zero
   4c038:	d8800515 	stw	r2,20(sp)
   4c03c:	0054bb40 	call	54bb4 <__ledf2>
   4c040:	10023116 	blt	r2,zero,4c908 <_dtoa_r+0xb28>
   4c044:	d8c00517 	ldw	r3,20(sp)
   4c048:	00800584 	movi	r2,22
   4c04c:	10c21f36 	bltu	r2,r3,4c8cc <_dtoa_r+0xaec>
   4c050:	180490fa 	slli	r2,r3,3
   4c054:	00c001b4 	movhi	r3,6
   4c058:	18e4cb04 	addi	r3,r3,-27860
   4c05c:	1885883a 	add	r2,r3,r2
   4c060:	11000017 	ldw	r4,0(r2)
   4c064:	11400117 	ldw	r5,4(r2)
   4c068:	900d883a 	mov	r6,r18
   4c06c:	980f883a 	mov	r7,r19
   4c070:	0054ad40 	call	54ad4 <__gedf2>
   4c074:	0082a70e 	bge	zero,r2,4cb14 <_dtoa_r+0xd34>
   4c078:	d9000517 	ldw	r4,20(sp)
   4c07c:	d8000c15 	stw	zero,48(sp)
   4c080:	213fffc4 	addi	r4,r4,-1
   4c084:	d9000515 	stw	r4,20(sp)
   4c088:	a463c83a 	sub	r17,r20,r17
   4c08c:	8dbfffc4 	addi	r22,r17,-1
   4c090:	b0021916 	blt	r22,zero,4c8f8 <_dtoa_r+0xb18>
   4c094:	d8000815 	stw	zero,32(sp)
   4c098:	d8800517 	ldw	r2,20(sp)
   4c09c:	10020e16 	blt	r2,zero,4c8d8 <_dtoa_r+0xaf8>
   4c0a0:	b0ad883a 	add	r22,r22,r2
   4c0a4:	d8800a15 	stw	r2,40(sp)
   4c0a8:	d8000915 	stw	zero,36(sp)
   4c0ac:	d8c00317 	ldw	r3,12(sp)
   4c0b0:	00800244 	movi	r2,9
   4c0b4:	10c11a36 	bltu	r2,r3,4c520 <_dtoa_r+0x740>
   4c0b8:	00800144 	movi	r2,5
   4c0bc:	10c4fc0e 	bge	r2,r3,4d4b0 <_dtoa_r+0x16d0>
   4c0c0:	18ffff04 	addi	r3,r3,-4
   4c0c4:	d8c00315 	stw	r3,12(sp)
   4c0c8:	0029883a 	mov	r20,zero
   4c0cc:	d9800317 	ldw	r6,12(sp)
   4c0d0:	008000c4 	movi	r2,3
   4c0d4:	3083bd26 	beq	r6,r2,4cfcc <_dtoa_r+0x11ec>
   4c0d8:	1183670e 	bge	r2,r6,4ce78 <_dtoa_r+0x1098>
   4c0dc:	d8c00317 	ldw	r3,12(sp)
   4c0e0:	00800104 	movi	r2,4
   4c0e4:	1882e726 	beq	r3,r2,4cc84 <_dtoa_r+0xea4>
   4c0e8:	00800144 	movi	r2,5
   4c0ec:	1884f21e 	bne	r3,r2,4d4b8 <_dtoa_r+0x16d8>
   4c0f0:	00800044 	movi	r2,1
   4c0f4:	d8800b15 	stw	r2,44(sp)
   4c0f8:	d8c02217 	ldw	r3,136(sp)
   4c0fc:	d9000517 	ldw	r4,20(sp)
   4c100:	1907883a 	add	r3,r3,r4
   4c104:	19800044 	addi	r6,r3,1
   4c108:	d8c00d15 	stw	r3,52(sp)
   4c10c:	d9800615 	stw	r6,24(sp)
   4c110:	0183c30e 	bge	zero,r6,4d020 <_dtoa_r+0x1240>
   4c114:	d9800617 	ldw	r6,24(sp)
   4c118:	3023883a 	mov	r17,r6
   4c11c:	80001115 	stw	zero,68(r16)
   4c120:	008005c4 	movi	r2,23
   4c124:	1184f62e 	bgeu	r2,r6,4d500 <_dtoa_r+0x1720>
   4c128:	00c00044 	movi	r3,1
   4c12c:	00800104 	movi	r2,4
   4c130:	1085883a 	add	r2,r2,r2
   4c134:	11000504 	addi	r4,r2,20
   4c138:	180b883a 	mov	r5,r3
   4c13c:	18c00044 	addi	r3,r3,1
   4c140:	313ffb2e 	bgeu	r6,r4,4c130 <__alt_data_end+0xfffe7740>
   4c144:	81401115 	stw	r5,68(r16)
   4c148:	8009883a 	mov	r4,r16
   4c14c:	004ea180 	call	4ea18 <_Balloc>
   4c150:	d8800715 	stw	r2,28(sp)
   4c154:	80801015 	stw	r2,64(r16)
   4c158:	00800384 	movi	r2,14
   4c15c:	1440fd36 	bltu	r2,r17,4c554 <_dtoa_r+0x774>
   4c160:	a000fc26 	beq	r20,zero,4c554 <_dtoa_r+0x774>
   4c164:	d8800517 	ldw	r2,20(sp)
   4c168:	0083b90e 	bge	zero,r2,4d050 <_dtoa_r+0x1270>
   4c16c:	d8c00517 	ldw	r3,20(sp)
   4c170:	108003cc 	andi	r2,r2,15
   4c174:	100490fa 	slli	r2,r2,3
   4c178:	182fd13a 	srai	r23,r3,4
   4c17c:	00c001b4 	movhi	r3,6
   4c180:	18e4cb04 	addi	r3,r3,-27860
   4c184:	1885883a 	add	r2,r3,r2
   4c188:	b8c0040c 	andi	r3,r23,16
   4c18c:	12c00017 	ldw	r11,0(r2)
   4c190:	12800117 	ldw	r10,4(r2)
   4c194:	18039726 	beq	r3,zero,4cff4 <_dtoa_r+0x1214>
   4c198:	008001b4 	movhi	r2,6
   4c19c:	10a4c104 	addi	r2,r2,-27900
   4c1a0:	11800817 	ldw	r6,32(r2)
   4c1a4:	11c00917 	ldw	r7,36(r2)
   4c1a8:	9009883a 	mov	r4,r18
   4c1ac:	980b883a 	mov	r5,r19
   4c1b0:	da801615 	stw	r10,88(sp)
   4c1b4:	dac01515 	stw	r11,84(sp)
   4c1b8:	0045cf80 	call	45cf8 <__divdf3>
   4c1bc:	da801617 	ldw	r10,88(sp)
   4c1c0:	dac01517 	ldw	r11,84(sp)
   4c1c4:	bdc003cc 	andi	r23,r23,15
   4c1c8:	044000c4 	movi	r17,3
   4c1cc:	d8800e15 	stw	r2,56(sp)
   4c1d0:	182b883a 	mov	r21,r3
   4c1d4:	b8001126 	beq	r23,zero,4c21c <_dtoa_r+0x43c>
   4c1d8:	050001b4 	movhi	r20,6
   4c1dc:	a524c104 	addi	r20,r20,-27900
   4c1e0:	5805883a 	mov	r2,r11
   4c1e4:	5007883a 	mov	r3,r10
   4c1e8:	b980004c 	andi	r6,r23,1
   4c1ec:	1009883a 	mov	r4,r2
   4c1f0:	b82fd07a 	srai	r23,r23,1
   4c1f4:	180b883a 	mov	r5,r3
   4c1f8:	30000426 	beq	r6,zero,4c20c <_dtoa_r+0x42c>
   4c1fc:	a1800017 	ldw	r6,0(r20)
   4c200:	a1c00117 	ldw	r7,4(r20)
   4c204:	8c400044 	addi	r17,r17,1
   4c208:	0054c940 	call	54c94 <__muldf3>
   4c20c:	a5000204 	addi	r20,r20,8
   4c210:	b83ff51e 	bne	r23,zero,4c1e8 <__alt_data_end+0xfffe77f8>
   4c214:	1017883a 	mov	r11,r2
   4c218:	1815883a 	mov	r10,r3
   4c21c:	d9000e17 	ldw	r4,56(sp)
   4c220:	a80b883a 	mov	r5,r21
   4c224:	580d883a 	mov	r6,r11
   4c228:	500f883a 	mov	r7,r10
   4c22c:	0045cf80 	call	45cf8 <__divdf3>
   4c230:	1029883a 	mov	r20,r2
   4c234:	182b883a 	mov	r21,r3
   4c238:	d9800c17 	ldw	r6,48(sp)
   4c23c:	30000626 	beq	r6,zero,4c258 <_dtoa_r+0x478>
   4c240:	a009883a 	mov	r4,r20
   4c244:	a80b883a 	mov	r5,r21
   4c248:	000d883a 	mov	r6,zero
   4c24c:	01cffc34 	movhi	r7,16368
   4c250:	0054bb40 	call	54bb4 <__ledf2>
   4c254:	10043216 	blt	r2,zero,4d320 <_dtoa_r+0x1540>
   4c258:	8809883a 	mov	r4,r17
   4c25c:	0055e580 	call	55e58 <__floatsidf>
   4c260:	1009883a 	mov	r4,r2
   4c264:	180b883a 	mov	r5,r3
   4c268:	a00d883a 	mov	r6,r20
   4c26c:	a80f883a 	mov	r7,r21
   4c270:	0054c940 	call	54c94 <__muldf3>
   4c274:	000d883a 	mov	r6,zero
   4c278:	1009883a 	mov	r4,r2
   4c27c:	180b883a 	mov	r5,r3
   4c280:	01d00734 	movhi	r7,16412
   4c284:	00541b40 	call	541b4 <__adddf3>
   4c288:	1023883a 	mov	r17,r2
   4c28c:	d9800617 	ldw	r6,24(sp)
   4c290:	00bf3034 	movhi	r2,64704
   4c294:	1885883a 	add	r2,r3,r2
   4c298:	d8800e15 	stw	r2,56(sp)
   4c29c:	30032e26 	beq	r6,zero,4cf58 <_dtoa_r+0x1178>
   4c2a0:	d8c00517 	ldw	r3,20(sp)
   4c2a4:	da800617 	ldw	r10,24(sp)
   4c2a8:	d8c01215 	stw	r3,72(sp)
   4c2ac:	d9000b17 	ldw	r4,44(sp)
   4c2b0:	2003b026 	beq	r4,zero,4d174 <_dtoa_r+0x1394>
   4c2b4:	50bfffc4 	addi	r2,r10,-1
   4c2b8:	100490fa 	slli	r2,r2,3
   4c2bc:	00c001b4 	movhi	r3,6
   4c2c0:	18e4cb04 	addi	r3,r3,-27860
   4c2c4:	1885883a 	add	r2,r3,r2
   4c2c8:	11800017 	ldw	r6,0(r2)
   4c2cc:	11c00117 	ldw	r7,4(r2)
   4c2d0:	d8800717 	ldw	r2,28(sp)
   4c2d4:	0009883a 	mov	r4,zero
   4c2d8:	014ff834 	movhi	r5,16352
   4c2dc:	da801615 	stw	r10,88(sp)
   4c2e0:	15c00044 	addi	r23,r2,1
   4c2e4:	0045cf80 	call	45cf8 <__divdf3>
   4c2e8:	d9c00e17 	ldw	r7,56(sp)
   4c2ec:	880d883a 	mov	r6,r17
   4c2f0:	1009883a 	mov	r4,r2
   4c2f4:	180b883a 	mov	r5,r3
   4c2f8:	00555000 	call	55500 <__subdf3>
   4c2fc:	a80b883a 	mov	r5,r21
   4c300:	a009883a 	mov	r4,r20
   4c304:	d8c01015 	stw	r3,64(sp)
   4c308:	d8800e15 	stw	r2,56(sp)
   4c30c:	0055dd00 	call	55dd0 <__fixdfsi>
   4c310:	1009883a 	mov	r4,r2
   4c314:	d8801715 	stw	r2,92(sp)
   4c318:	0055e580 	call	55e58 <__floatsidf>
   4c31c:	a009883a 	mov	r4,r20
   4c320:	a80b883a 	mov	r5,r21
   4c324:	100d883a 	mov	r6,r2
   4c328:	180f883a 	mov	r7,r3
   4c32c:	00555000 	call	55500 <__subdf3>
   4c330:	da001717 	ldw	r8,92(sp)
   4c334:	1829883a 	mov	r20,r3
   4c338:	d8c00717 	ldw	r3,28(sp)
   4c33c:	d9000e17 	ldw	r4,56(sp)
   4c340:	d9401017 	ldw	r5,64(sp)
   4c344:	42000c04 	addi	r8,r8,48
   4c348:	1023883a 	mov	r17,r2
   4c34c:	1a000005 	stb	r8,0(r3)
   4c350:	880d883a 	mov	r6,r17
   4c354:	a00f883a 	mov	r7,r20
   4c358:	402b883a 	mov	r21,r8
   4c35c:	0054ad40 	call	54ad4 <__gedf2>
   4c360:	00844516 	blt	zero,r2,4d478 <_dtoa_r+0x1698>
   4c364:	0009883a 	mov	r4,zero
   4c368:	014ffc34 	movhi	r5,16368
   4c36c:	880d883a 	mov	r6,r17
   4c370:	a00f883a 	mov	r7,r20
   4c374:	00555000 	call	55500 <__subdf3>
   4c378:	d9000e17 	ldw	r4,56(sp)
   4c37c:	d9401017 	ldw	r5,64(sp)
   4c380:	100d883a 	mov	r6,r2
   4c384:	180f883a 	mov	r7,r3
   4c388:	0054ad40 	call	54ad4 <__gedf2>
   4c38c:	da801617 	ldw	r10,88(sp)
   4c390:	00843616 	blt	zero,r2,4d46c <_dtoa_r+0x168c>
   4c394:	00800044 	movi	r2,1
   4c398:	12806e0e 	bge	r2,r10,4c554 <_dtoa_r+0x774>
   4c39c:	d9000717 	ldw	r4,28(sp)
   4c3a0:	dd801315 	stw	r22,76(sp)
   4c3a4:	dc001115 	stw	r16,68(sp)
   4c3a8:	2295883a 	add	r10,r4,r10
   4c3ac:	dcc01415 	stw	r19,80(sp)
   4c3b0:	502d883a 	mov	r22,r10
   4c3b4:	dcc01017 	ldw	r19,64(sp)
   4c3b8:	b821883a 	mov	r16,r23
   4c3bc:	dc801015 	stw	r18,64(sp)
   4c3c0:	dc800e17 	ldw	r18,56(sp)
   4c3c4:	00000906 	br	4c3ec <_dtoa_r+0x60c>
   4c3c8:	00555000 	call	55500 <__subdf3>
   4c3cc:	1009883a 	mov	r4,r2
   4c3d0:	180b883a 	mov	r5,r3
   4c3d4:	900d883a 	mov	r6,r18
   4c3d8:	980f883a 	mov	r7,r19
   4c3dc:	0054bb40 	call	54bb4 <__ledf2>
   4c3e0:	10040e16 	blt	r2,zero,4d41c <_dtoa_r+0x163c>
   4c3e4:	b821883a 	mov	r16,r23
   4c3e8:	bd841026 	beq	r23,r22,4d42c <_dtoa_r+0x164c>
   4c3ec:	9009883a 	mov	r4,r18
   4c3f0:	980b883a 	mov	r5,r19
   4c3f4:	000d883a 	mov	r6,zero
   4c3f8:	01d00934 	movhi	r7,16420
   4c3fc:	0054c940 	call	54c94 <__muldf3>
   4c400:	000d883a 	mov	r6,zero
   4c404:	01d00934 	movhi	r7,16420
   4c408:	8809883a 	mov	r4,r17
   4c40c:	a00b883a 	mov	r5,r20
   4c410:	1025883a 	mov	r18,r2
   4c414:	1827883a 	mov	r19,r3
   4c418:	0054c940 	call	54c94 <__muldf3>
   4c41c:	180b883a 	mov	r5,r3
   4c420:	1009883a 	mov	r4,r2
   4c424:	1823883a 	mov	r17,r3
   4c428:	1029883a 	mov	r20,r2
   4c42c:	0055dd00 	call	55dd0 <__fixdfsi>
   4c430:	1009883a 	mov	r4,r2
   4c434:	102b883a 	mov	r21,r2
   4c438:	0055e580 	call	55e58 <__floatsidf>
   4c43c:	a009883a 	mov	r4,r20
   4c440:	880b883a 	mov	r5,r17
   4c444:	100d883a 	mov	r6,r2
   4c448:	180f883a 	mov	r7,r3
   4c44c:	00555000 	call	55500 <__subdf3>
   4c450:	ad400c04 	addi	r21,r21,48
   4c454:	1009883a 	mov	r4,r2
   4c458:	180b883a 	mov	r5,r3
   4c45c:	900d883a 	mov	r6,r18
   4c460:	980f883a 	mov	r7,r19
   4c464:	85400005 	stb	r21,0(r16)
   4c468:	1023883a 	mov	r17,r2
   4c46c:	1829883a 	mov	r20,r3
   4c470:	0054bb40 	call	54bb4 <__ledf2>
   4c474:	bdc00044 	addi	r23,r23,1
   4c478:	0009883a 	mov	r4,zero
   4c47c:	014ffc34 	movhi	r5,16368
   4c480:	880d883a 	mov	r6,r17
   4c484:	a00f883a 	mov	r7,r20
   4c488:	103fcf0e 	bge	r2,zero,4c3c8 <__alt_data_end+0xfffe79d8>
   4c48c:	d9801217 	ldw	r6,72(sp)
   4c490:	dc001117 	ldw	r16,68(sp)
   4c494:	d9800515 	stw	r6,20(sp)
   4c498:	8009883a 	mov	r4,r16
   4c49c:	e00b883a 	mov	r5,fp
   4c4a0:	004eac00 	call	4eac0 <_Bfree>
   4c4a4:	d8c00517 	ldw	r3,20(sp)
   4c4a8:	d9002317 	ldw	r4,140(sp)
   4c4ac:	d9802517 	ldw	r6,148(sp)
   4c4b0:	b8000005 	stb	zero,0(r23)
   4c4b4:	18800044 	addi	r2,r3,1
   4c4b8:	20800015 	stw	r2,0(r4)
   4c4bc:	30027226 	beq	r6,zero,4ce88 <_dtoa_r+0x10a8>
   4c4c0:	35c00015 	stw	r23,0(r6)
   4c4c4:	d8800717 	ldw	r2,28(sp)
   4c4c8:	003e7406 	br	4be9c <__alt_data_end+0xfffe74ac>
   4c4cc:	00800434 	movhi	r2,16
   4c4d0:	10bfffc4 	addi	r2,r2,-1
   4c4d4:	a8aa703a 	and	r21,r21,r2
   4c4d8:	a83e801e 	bne	r21,zero,4bedc <__alt_data_end+0xfffe74ec>
   4c4dc:	008001b4 	movhi	r2,6
   4c4e0:	10a4ac04 	addi	r2,r2,-27984
   4c4e4:	003e7f06 	br	4bee4 <__alt_data_end+0xfffe74f4>
   4c4e8:	10c00204 	addi	r3,r2,8
   4c4ec:	003e8206 	br	4bef8 <__alt_data_end+0xfffe7508>
   4c4f0:	01400434 	movhi	r5,16
   4c4f4:	297fffc4 	addi	r5,r5,-1
   4c4f8:	994a703a 	and	r5,r19,r5
   4c4fc:	9009883a 	mov	r4,r18
   4c500:	8c7f0044 	addi	r17,r17,-1023
   4c504:	294ffc34 	orhi	r5,r5,16368
   4c508:	dd000217 	ldw	r20,8(sp)
   4c50c:	d8000f15 	stw	zero,60(sp)
   4c510:	003e9f06 	br	4bf90 <__alt_data_end+0xfffe75a0>
   4c514:	008001b4 	movhi	r2,6
   4c518:	10a3fb04 	addi	r2,r2,-28692
   4c51c:	003e5f06 	br	4be9c <__alt_data_end+0xfffe74ac>
   4c520:	80001115 	stw	zero,68(r16)
   4c524:	8009883a 	mov	r4,r16
   4c528:	000b883a 	mov	r5,zero
   4c52c:	004ea180 	call	4ea18 <_Balloc>
   4c530:	01bfffc4 	movi	r6,-1
   4c534:	d8800715 	stw	r2,28(sp)
   4c538:	80801015 	stw	r2,64(r16)
   4c53c:	00800044 	movi	r2,1
   4c540:	d9800615 	stw	r6,24(sp)
   4c544:	d8800b15 	stw	r2,44(sp)
   4c548:	d8002215 	stw	zero,136(sp)
   4c54c:	d9800d15 	stw	r6,52(sp)
   4c550:	d8000315 	stw	zero,12(sp)
   4c554:	d8800117 	ldw	r2,4(sp)
   4c558:	10008e16 	blt	r2,zero,4c794 <_dtoa_r+0x9b4>
   4c55c:	d9000517 	ldw	r4,20(sp)
   4c560:	00c00384 	movi	r3,14
   4c564:	19008b16 	blt	r3,r4,4c794 <_dtoa_r+0x9b4>
   4c568:	200490fa 	slli	r2,r4,3
   4c56c:	00c001b4 	movhi	r3,6
   4c570:	d9802217 	ldw	r6,136(sp)
   4c574:	18e4cb04 	addi	r3,r3,-27860
   4c578:	1885883a 	add	r2,r3,r2
   4c57c:	14400017 	ldw	r17,0(r2)
   4c580:	15000117 	ldw	r20,4(r2)
   4c584:	3001c716 	blt	r6,zero,4cca4 <_dtoa_r+0xec4>
   4c588:	880d883a 	mov	r6,r17
   4c58c:	a00f883a 	mov	r7,r20
   4c590:	9009883a 	mov	r4,r18
   4c594:	980b883a 	mov	r5,r19
   4c598:	0045cf80 	call	45cf8 <__divdf3>
   4c59c:	180b883a 	mov	r5,r3
   4c5a0:	1009883a 	mov	r4,r2
   4c5a4:	0055dd00 	call	55dd0 <__fixdfsi>
   4c5a8:	1009883a 	mov	r4,r2
   4c5ac:	102d883a 	mov	r22,r2
   4c5b0:	0055e580 	call	55e58 <__floatsidf>
   4c5b4:	1009883a 	mov	r4,r2
   4c5b8:	180b883a 	mov	r5,r3
   4c5bc:	880d883a 	mov	r6,r17
   4c5c0:	a00f883a 	mov	r7,r20
   4c5c4:	0054c940 	call	54c94 <__muldf3>
   4c5c8:	9009883a 	mov	r4,r18
   4c5cc:	980b883a 	mov	r5,r19
   4c5d0:	100d883a 	mov	r6,r2
   4c5d4:	180f883a 	mov	r7,r3
   4c5d8:	00555000 	call	55500 <__subdf3>
   4c5dc:	d9000717 	ldw	r4,28(sp)
   4c5e0:	d9800617 	ldw	r6,24(sp)
   4c5e4:	180b883a 	mov	r5,r3
   4c5e8:	b0c00c04 	addi	r3,r22,48
   4c5ec:	20c00005 	stb	r3,0(r4)
   4c5f0:	25c00044 	addi	r23,r4,1
   4c5f4:	01000044 	movi	r4,1
   4c5f8:	1011883a 	mov	r8,r2
   4c5fc:	2807883a 	mov	r3,r5
   4c600:	31003d26 	beq	r6,r4,4c6f8 <_dtoa_r+0x918>
   4c604:	000d883a 	mov	r6,zero
   4c608:	01d00934 	movhi	r7,16420
   4c60c:	1009883a 	mov	r4,r2
   4c610:	0054c940 	call	54c94 <__muldf3>
   4c614:	1009883a 	mov	r4,r2
   4c618:	180b883a 	mov	r5,r3
   4c61c:	000d883a 	mov	r6,zero
   4c620:	000f883a 	mov	r7,zero
   4c624:	1027883a 	mov	r19,r2
   4c628:	182b883a 	mov	r21,r3
   4c62c:	0054a500 	call	54a50 <__eqdf2>
   4c630:	103f9926 	beq	r2,zero,4c498 <__alt_data_end+0xfffe7aa8>
   4c634:	d8c00617 	ldw	r3,24(sp)
   4c638:	d9000717 	ldw	r4,28(sp)
   4c63c:	b825883a 	mov	r18,r23
   4c640:	18bfffc4 	addi	r2,r3,-1
   4c644:	20ad883a 	add	r22,r4,r2
   4c648:	dc000315 	stw	r16,12(sp)
   4c64c:	00000a06 	br	4c678 <_dtoa_r+0x898>
   4c650:	0054c940 	call	54c94 <__muldf3>
   4c654:	1009883a 	mov	r4,r2
   4c658:	180b883a 	mov	r5,r3
   4c65c:	000d883a 	mov	r6,zero
   4c660:	000f883a 	mov	r7,zero
   4c664:	1027883a 	mov	r19,r2
   4c668:	182b883a 	mov	r21,r3
   4c66c:	b825883a 	mov	r18,r23
   4c670:	0054a500 	call	54a50 <__eqdf2>
   4c674:	10022626 	beq	r2,zero,4cf10 <_dtoa_r+0x1130>
   4c678:	880d883a 	mov	r6,r17
   4c67c:	a00f883a 	mov	r7,r20
   4c680:	9809883a 	mov	r4,r19
   4c684:	a80b883a 	mov	r5,r21
   4c688:	0045cf80 	call	45cf8 <__divdf3>
   4c68c:	180b883a 	mov	r5,r3
   4c690:	1009883a 	mov	r4,r2
   4c694:	0055dd00 	call	55dd0 <__fixdfsi>
   4c698:	1009883a 	mov	r4,r2
   4c69c:	1021883a 	mov	r16,r2
   4c6a0:	0055e580 	call	55e58 <__floatsidf>
   4c6a4:	1009883a 	mov	r4,r2
   4c6a8:	180b883a 	mov	r5,r3
   4c6ac:	880d883a 	mov	r6,r17
   4c6b0:	a00f883a 	mov	r7,r20
   4c6b4:	0054c940 	call	54c94 <__muldf3>
   4c6b8:	9809883a 	mov	r4,r19
   4c6bc:	a80b883a 	mov	r5,r21
   4c6c0:	100d883a 	mov	r6,r2
   4c6c4:	180f883a 	mov	r7,r3
   4c6c8:	00555000 	call	55500 <__subdf3>
   4c6cc:	82000c04 	addi	r8,r16,48
   4c6d0:	92000005 	stb	r8,0(r18)
   4c6d4:	1009883a 	mov	r4,r2
   4c6d8:	180b883a 	mov	r5,r3
   4c6dc:	000d883a 	mov	r6,zero
   4c6e0:	01d00934 	movhi	r7,16420
   4c6e4:	1011883a 	mov	r8,r2
   4c6e8:	bdc00044 	addi	r23,r23,1
   4c6ec:	95bfd81e 	bne	r18,r22,4c650 <__alt_data_end+0xfffe7c60>
   4c6f0:	802d883a 	mov	r22,r16
   4c6f4:	dc000317 	ldw	r16,12(sp)
   4c6f8:	4009883a 	mov	r4,r8
   4c6fc:	180b883a 	mov	r5,r3
   4c700:	400d883a 	mov	r6,r8
   4c704:	180f883a 	mov	r7,r3
   4c708:	00541b40 	call	541b4 <__adddf3>
   4c70c:	8809883a 	mov	r4,r17
   4c710:	a00b883a 	mov	r5,r20
   4c714:	100d883a 	mov	r6,r2
   4c718:	180f883a 	mov	r7,r3
   4c71c:	1027883a 	mov	r19,r2
   4c720:	1825883a 	mov	r18,r3
   4c724:	0054bb40 	call	54bb4 <__ledf2>
   4c728:	10000816 	blt	r2,zero,4c74c <_dtoa_r+0x96c>
   4c72c:	8809883a 	mov	r4,r17
   4c730:	a00b883a 	mov	r5,r20
   4c734:	980d883a 	mov	r6,r19
   4c738:	900f883a 	mov	r7,r18
   4c73c:	0054a500 	call	54a50 <__eqdf2>
   4c740:	103f551e 	bne	r2,zero,4c498 <__alt_data_end+0xfffe7aa8>
   4c744:	b580004c 	andi	r22,r22,1
   4c748:	b03f5326 	beq	r22,zero,4c498 <__alt_data_end+0xfffe7aa8>
   4c74c:	bd7fffc3 	ldbu	r21,-1(r23)
   4c750:	b8bfffc4 	addi	r2,r23,-1
   4c754:	1007883a 	mov	r3,r2
   4c758:	01400e44 	movi	r5,57
   4c75c:	d9800717 	ldw	r6,28(sp)
   4c760:	00000506 	br	4c778 <_dtoa_r+0x998>
   4c764:	18ffffc4 	addi	r3,r3,-1
   4c768:	30825e26 	beq	r6,r2,4d0e4 <_dtoa_r+0x1304>
   4c76c:	1d400003 	ldbu	r21,0(r3)
   4c770:	102f883a 	mov	r23,r2
   4c774:	10bfffc4 	addi	r2,r2,-1
   4c778:	a9003fcc 	andi	r4,r21,255
   4c77c:	2100201c 	xori	r4,r4,128
   4c780:	213fe004 	addi	r4,r4,-128
   4c784:	217ff726 	beq	r4,r5,4c764 <__alt_data_end+0xfffe7d74>
   4c788:	aa000044 	addi	r8,r21,1
   4c78c:	12000005 	stb	r8,0(r2)
   4c790:	003f4106 	br	4c498 <__alt_data_end+0xfffe7aa8>
   4c794:	d8c00b17 	ldw	r3,44(sp)
   4c798:	18006726 	beq	r3,zero,4c938 <_dtoa_r+0xb58>
   4c79c:	d9000317 	ldw	r4,12(sp)
   4c7a0:	00c00044 	movi	r3,1
   4c7a4:	19016a0e 	bge	r3,r4,4cd50 <_dtoa_r+0xf70>
   4c7a8:	d8800617 	ldw	r2,24(sp)
   4c7ac:	d8c00917 	ldw	r3,36(sp)
   4c7b0:	157fffc4 	addi	r21,r2,-1
   4c7b4:	1d420716 	blt	r3,r21,4cfd4 <_dtoa_r+0x11f4>
   4c7b8:	1d6bc83a 	sub	r21,r3,r21
   4c7bc:	d8800617 	ldw	r2,24(sp)
   4c7c0:	1002c716 	blt	r2,zero,4d2e0 <_dtoa_r+0x1500>
   4c7c4:	dd000817 	ldw	r20,32(sp)
   4c7c8:	d8800617 	ldw	r2,24(sp)
   4c7cc:	d9800817 	ldw	r6,32(sp)
   4c7d0:	8009883a 	mov	r4,r16
   4c7d4:	01400044 	movi	r5,1
   4c7d8:	308d883a 	add	r6,r6,r2
   4c7dc:	d9800815 	stw	r6,32(sp)
   4c7e0:	b0ad883a 	add	r22,r22,r2
   4c7e4:	004ee400 	call	4ee40 <__i2b>
   4c7e8:	1023883a 	mov	r17,r2
   4c7ec:	a0000826 	beq	r20,zero,4c810 <_dtoa_r+0xa30>
   4c7f0:	0580070e 	bge	zero,r22,4c810 <_dtoa_r+0xa30>
   4c7f4:	b005883a 	mov	r2,r22
   4c7f8:	a5812016 	blt	r20,r22,4cc7c <_dtoa_r+0xe9c>
   4c7fc:	d8c00817 	ldw	r3,32(sp)
   4c800:	a0a9c83a 	sub	r20,r20,r2
   4c804:	b0adc83a 	sub	r22,r22,r2
   4c808:	1887c83a 	sub	r3,r3,r2
   4c80c:	d8c00815 	stw	r3,32(sp)
   4c810:	d9000917 	ldw	r4,36(sp)
   4c814:	0100140e 	bge	zero,r4,4c868 <_dtoa_r+0xa88>
   4c818:	d9800b17 	ldw	r6,44(sp)
   4c81c:	3001e526 	beq	r6,zero,4cfb4 <_dtoa_r+0x11d4>
   4c820:	05400e0e 	bge	zero,r21,4c85c <_dtoa_r+0xa7c>
   4c824:	880b883a 	mov	r5,r17
   4c828:	8009883a 	mov	r4,r16
   4c82c:	a80d883a 	mov	r6,r21
   4c830:	004f10c0 	call	4f10c <__pow5mult>
   4c834:	e00d883a 	mov	r6,fp
   4c838:	8009883a 	mov	r4,r16
   4c83c:	100b883a 	mov	r5,r2
   4c840:	1023883a 	mov	r17,r2
   4c844:	004ee7c0 	call	4ee7c <__multiply>
   4c848:	102f883a 	mov	r23,r2
   4c84c:	e00b883a 	mov	r5,fp
   4c850:	8009883a 	mov	r4,r16
   4c854:	004eac00 	call	4eac0 <_Bfree>
   4c858:	b839883a 	mov	fp,r23
   4c85c:	d8800917 	ldw	r2,36(sp)
   4c860:	154dc83a 	sub	r6,r2,r21
   4c864:	3001281e 	bne	r6,zero,4cd08 <_dtoa_r+0xf28>
   4c868:	05c00044 	movi	r23,1
   4c86c:	8009883a 	mov	r4,r16
   4c870:	b80b883a 	mov	r5,r23
   4c874:	004ee400 	call	4ee40 <__i2b>
   4c878:	d8c00a17 	ldw	r3,40(sp)
   4c87c:	102b883a 	mov	r21,r2
   4c880:	00c0310e 	bge	zero,r3,4c948 <_dtoa_r+0xb68>
   4c884:	8009883a 	mov	r4,r16
   4c888:	100b883a 	mov	r5,r2
   4c88c:	180d883a 	mov	r6,r3
   4c890:	004f10c0 	call	4f10c <__pow5mult>
   4c894:	d9000317 	ldw	r4,12(sp)
   4c898:	102b883a 	mov	r21,r2
   4c89c:	b9011f0e 	bge	r23,r4,4cd1c <_dtoa_r+0xf3c>
   4c8a0:	0027883a 	mov	r19,zero
   4c8a4:	a8800417 	ldw	r2,16(r21)
   4c8a8:	10800104 	addi	r2,r2,4
   4c8ac:	1085883a 	add	r2,r2,r2
   4c8b0:	1085883a 	add	r2,r2,r2
   4c8b4:	a885883a 	add	r2,r21,r2
   4c8b8:	11000017 	ldw	r4,0(r2)
   4c8bc:	004ed280 	call	4ed28 <__hi0bits>
   4c8c0:	00c00804 	movi	r3,32
   4c8c4:	1885c83a 	sub	r2,r3,r2
   4c8c8:	00002506 	br	4c960 <_dtoa_r+0xb80>
   4c8cc:	01800044 	movi	r6,1
   4c8d0:	d9800c15 	stw	r6,48(sp)
   4c8d4:	003dec06 	br	4c088 <__alt_data_end+0xfffe7698>
   4c8d8:	d8c00817 	ldw	r3,32(sp)
   4c8dc:	d9000517 	ldw	r4,20(sp)
   4c8e0:	d8000a15 	stw	zero,40(sp)
   4c8e4:	1907c83a 	sub	r3,r3,r4
   4c8e8:	010dc83a 	sub	r6,zero,r4
   4c8ec:	d8c00815 	stw	r3,32(sp)
   4c8f0:	d9800915 	stw	r6,36(sp)
   4c8f4:	003ded06 	br	4c0ac <__alt_data_end+0xfffe76bc>
   4c8f8:	05adc83a 	sub	r22,zero,r22
   4c8fc:	dd800815 	stw	r22,32(sp)
   4c900:	002d883a 	mov	r22,zero
   4c904:	003de406 	br	4c098 <__alt_data_end+0xfffe76a8>
   4c908:	d9000517 	ldw	r4,20(sp)
   4c90c:	0055e580 	call	55e58 <__floatsidf>
   4c910:	1009883a 	mov	r4,r2
   4c914:	180b883a 	mov	r5,r3
   4c918:	b00d883a 	mov	r6,r22
   4c91c:	a80f883a 	mov	r7,r21
   4c920:	0054a500 	call	54a50 <__eqdf2>
   4c924:	103dc726 	beq	r2,zero,4c044 <__alt_data_end+0xfffe7654>
   4c928:	d8800517 	ldw	r2,20(sp)
   4c92c:	10bfffc4 	addi	r2,r2,-1
   4c930:	d8800515 	stw	r2,20(sp)
   4c934:	003dc306 	br	4c044 <__alt_data_end+0xfffe7654>
   4c938:	dd400917 	ldw	r21,36(sp)
   4c93c:	dd000817 	ldw	r20,32(sp)
   4c940:	0023883a 	mov	r17,zero
   4c944:	003fa906 	br	4c7ec <__alt_data_end+0xfffe7dfc>
   4c948:	d9800317 	ldw	r6,12(sp)
   4c94c:	b981670e 	bge	r23,r6,4ceec <_dtoa_r+0x110c>
   4c950:	0027883a 	mov	r19,zero
   4c954:	d8c00a17 	ldw	r3,40(sp)
   4c958:	183fd21e 	bne	r3,zero,4c8a4 <__alt_data_end+0xfffe7eb4>
   4c95c:	00800044 	movi	r2,1
   4c960:	1585883a 	add	r2,r2,r22
   4c964:	108007cc 	andi	r2,r2,31
   4c968:	10005f26 	beq	r2,zero,4cae8 <_dtoa_r+0xd08>
   4c96c:	00c00804 	movi	r3,32
   4c970:	1887c83a 	sub	r3,r3,r2
   4c974:	01000104 	movi	r4,4
   4c978:	20c2dd0e 	bge	r4,r3,4d4f0 <_dtoa_r+0x1710>
   4c97c:	d9000817 	ldw	r4,32(sp)
   4c980:	00c00704 	movi	r3,28
   4c984:	1885c83a 	sub	r2,r3,r2
   4c988:	2089883a 	add	r4,r4,r2
   4c98c:	d9000815 	stw	r4,32(sp)
   4c990:	a0a9883a 	add	r20,r20,r2
   4c994:	b0ad883a 	add	r22,r22,r2
   4c998:	d8800817 	ldw	r2,32(sp)
   4c99c:	0080050e 	bge	zero,r2,4c9b4 <_dtoa_r+0xbd4>
   4c9a0:	e00b883a 	mov	r5,fp
   4c9a4:	8009883a 	mov	r4,r16
   4c9a8:	100d883a 	mov	r6,r2
   4c9ac:	004f24c0 	call	4f24c <__lshift>
   4c9b0:	1039883a 	mov	fp,r2
   4c9b4:	0580050e 	bge	zero,r22,4c9cc <_dtoa_r+0xbec>
   4c9b8:	a80b883a 	mov	r5,r21
   4c9bc:	8009883a 	mov	r4,r16
   4c9c0:	b00d883a 	mov	r6,r22
   4c9c4:	004f24c0 	call	4f24c <__lshift>
   4c9c8:	102b883a 	mov	r21,r2
   4c9cc:	d8c00c17 	ldw	r3,48(sp)
   4c9d0:	1801161e 	bne	r3,zero,4ce2c <_dtoa_r+0x104c>
   4c9d4:	d8c00617 	ldw	r3,24(sp)
   4c9d8:	00c12d0e 	bge	zero,r3,4ce90 <_dtoa_r+0x10b0>
   4c9dc:	d8c00b17 	ldw	r3,44(sp)
   4c9e0:	1800571e 	bne	r3,zero,4cb40 <_dtoa_r+0xd60>
   4c9e4:	dc800717 	ldw	r18,28(sp)
   4c9e8:	dcc00617 	ldw	r19,24(sp)
   4c9ec:	9029883a 	mov	r20,r18
   4c9f0:	00000206 	br	4c9fc <_dtoa_r+0xc1c>
   4c9f4:	004eae80 	call	4eae8 <__multadd>
   4c9f8:	1039883a 	mov	fp,r2
   4c9fc:	e009883a 	mov	r4,fp
   4ca00:	a80b883a 	mov	r5,r21
   4ca04:	004bbb80 	call	4bbb8 <quorem>
   4ca08:	10800c04 	addi	r2,r2,48
   4ca0c:	90800005 	stb	r2,0(r18)
   4ca10:	94800044 	addi	r18,r18,1
   4ca14:	9507c83a 	sub	r3,r18,r20
   4ca18:	8009883a 	mov	r4,r16
   4ca1c:	e00b883a 	mov	r5,fp
   4ca20:	01800284 	movi	r6,10
   4ca24:	000f883a 	mov	r7,zero
   4ca28:	1cfff216 	blt	r3,r19,4c9f4 <__alt_data_end+0xfffe8004>
   4ca2c:	1011883a 	mov	r8,r2
   4ca30:	d8800617 	ldw	r2,24(sp)
   4ca34:	00822e0e 	bge	zero,r2,4d2f0 <_dtoa_r+0x1510>
   4ca38:	d9000717 	ldw	r4,28(sp)
   4ca3c:	0025883a 	mov	r18,zero
   4ca40:	20af883a 	add	r23,r4,r2
   4ca44:	e00b883a 	mov	r5,fp
   4ca48:	01800044 	movi	r6,1
   4ca4c:	8009883a 	mov	r4,r16
   4ca50:	da001715 	stw	r8,92(sp)
   4ca54:	004f24c0 	call	4f24c <__lshift>
   4ca58:	1009883a 	mov	r4,r2
   4ca5c:	a80b883a 	mov	r5,r21
   4ca60:	1039883a 	mov	fp,r2
   4ca64:	004f3940 	call	4f394 <__mcmp>
   4ca68:	da001717 	ldw	r8,92(sp)
   4ca6c:	00816e0e 	bge	zero,r2,4d028 <_dtoa_r+0x1248>
   4ca70:	b93fffc3 	ldbu	r4,-1(r23)
   4ca74:	b8bfffc4 	addi	r2,r23,-1
   4ca78:	1007883a 	mov	r3,r2
   4ca7c:	01800e44 	movi	r6,57
   4ca80:	d9c00717 	ldw	r7,28(sp)
   4ca84:	00000506 	br	4ca9c <_dtoa_r+0xcbc>
   4ca88:	18ffffc4 	addi	r3,r3,-1
   4ca8c:	38811926 	beq	r7,r2,4cef4 <_dtoa_r+0x1114>
   4ca90:	19000003 	ldbu	r4,0(r3)
   4ca94:	102f883a 	mov	r23,r2
   4ca98:	10bfffc4 	addi	r2,r2,-1
   4ca9c:	21403fcc 	andi	r5,r4,255
   4caa0:	2940201c 	xori	r5,r5,128
   4caa4:	297fe004 	addi	r5,r5,-128
   4caa8:	29bff726 	beq	r5,r6,4ca88 <__alt_data_end+0xfffe8098>
   4caac:	21000044 	addi	r4,r4,1
   4cab0:	11000005 	stb	r4,0(r2)
   4cab4:	8009883a 	mov	r4,r16
   4cab8:	a80b883a 	mov	r5,r21
   4cabc:	004eac00 	call	4eac0 <_Bfree>
   4cac0:	883e7526 	beq	r17,zero,4c498 <__alt_data_end+0xfffe7aa8>
   4cac4:	90000426 	beq	r18,zero,4cad8 <_dtoa_r+0xcf8>
   4cac8:	94400326 	beq	r18,r17,4cad8 <_dtoa_r+0xcf8>
   4cacc:	8009883a 	mov	r4,r16
   4cad0:	900b883a 	mov	r5,r18
   4cad4:	004eac00 	call	4eac0 <_Bfree>
   4cad8:	8009883a 	mov	r4,r16
   4cadc:	880b883a 	mov	r5,r17
   4cae0:	004eac00 	call	4eac0 <_Bfree>
   4cae4:	003e6c06 	br	4c498 <__alt_data_end+0xfffe7aa8>
   4cae8:	00800704 	movi	r2,28
   4caec:	d9800817 	ldw	r6,32(sp)
   4caf0:	a0a9883a 	add	r20,r20,r2
   4caf4:	b0ad883a 	add	r22,r22,r2
   4caf8:	308d883a 	add	r6,r6,r2
   4cafc:	d9800815 	stw	r6,32(sp)
   4cb00:	003fa506 	br	4c998 <__alt_data_end+0xfffe7fa8>
   4cb04:	013efb84 	movi	r4,-1042
   4cb08:	246bc83a 	sub	r21,r4,r17
   4cb0c:	9548983a 	sll	r4,r18,r21
   4cb10:	003d1806 	br	4bf74 <__alt_data_end+0xfffe7584>
   4cb14:	d8000c15 	stw	zero,48(sp)
   4cb18:	003d5b06 	br	4c088 <__alt_data_end+0xfffe7698>
   4cb1c:	880b883a 	mov	r5,r17
   4cb20:	8009883a 	mov	r4,r16
   4cb24:	01800284 	movi	r6,10
   4cb28:	000f883a 	mov	r7,zero
   4cb2c:	004eae80 	call	4eae8 <__multadd>
   4cb30:	1023883a 	mov	r17,r2
   4cb34:	d8800d17 	ldw	r2,52(sp)
   4cb38:	0082550e 	bge	zero,r2,4d490 <_dtoa_r+0x16b0>
   4cb3c:	d8800615 	stw	r2,24(sp)
   4cb40:	0500050e 	bge	zero,r20,4cb58 <_dtoa_r+0xd78>
   4cb44:	880b883a 	mov	r5,r17
   4cb48:	8009883a 	mov	r4,r16
   4cb4c:	a00d883a 	mov	r6,r20
   4cb50:	004f24c0 	call	4f24c <__lshift>
   4cb54:	1023883a 	mov	r17,r2
   4cb58:	98016a1e 	bne	r19,zero,4d104 <_dtoa_r+0x1324>
   4cb5c:	8829883a 	mov	r20,r17
   4cb60:	d9000617 	ldw	r4,24(sp)
   4cb64:	dcc00717 	ldw	r19,28(sp)
   4cb68:	9480004c 	andi	r18,r18,1
   4cb6c:	20bfffc4 	addi	r2,r4,-1
   4cb70:	9885883a 	add	r2,r19,r2
   4cb74:	d8800415 	stw	r2,16(sp)
   4cb78:	dc800615 	stw	r18,24(sp)
   4cb7c:	e009883a 	mov	r4,fp
   4cb80:	a80b883a 	mov	r5,r21
   4cb84:	004bbb80 	call	4bbb8 <quorem>
   4cb88:	e009883a 	mov	r4,fp
   4cb8c:	880b883a 	mov	r5,r17
   4cb90:	102f883a 	mov	r23,r2
   4cb94:	004f3940 	call	4f394 <__mcmp>
   4cb98:	8009883a 	mov	r4,r16
   4cb9c:	a80b883a 	mov	r5,r21
   4cba0:	a00d883a 	mov	r6,r20
   4cba4:	102d883a 	mov	r22,r2
   4cba8:	004f3f40 	call	4f3f4 <__mdiff>
   4cbac:	1007883a 	mov	r3,r2
   4cbb0:	10800317 	ldw	r2,12(r2)
   4cbb4:	bc800c04 	addi	r18,r23,48
   4cbb8:	1000971e 	bne	r2,zero,4ce18 <_dtoa_r+0x1038>
   4cbbc:	180b883a 	mov	r5,r3
   4cbc0:	e009883a 	mov	r4,fp
   4cbc4:	d8c01515 	stw	r3,84(sp)
   4cbc8:	004f3940 	call	4f394 <__mcmp>
   4cbcc:	d8c01517 	ldw	r3,84(sp)
   4cbd0:	8009883a 	mov	r4,r16
   4cbd4:	d8801515 	stw	r2,84(sp)
   4cbd8:	180b883a 	mov	r5,r3
   4cbdc:	004eac00 	call	4eac0 <_Bfree>
   4cbe0:	d8801517 	ldw	r2,84(sp)
   4cbe4:	1000041e 	bne	r2,zero,4cbf8 <_dtoa_r+0xe18>
   4cbe8:	d9800317 	ldw	r6,12(sp)
   4cbec:	3000021e 	bne	r6,zero,4cbf8 <_dtoa_r+0xe18>
   4cbf0:	d8c00617 	ldw	r3,24(sp)
   4cbf4:	18007626 	beq	r3,zero,4cdd0 <_dtoa_r+0xff0>
   4cbf8:	b0005b16 	blt	r22,zero,4cd68 <_dtoa_r+0xf88>
   4cbfc:	b000041e 	bne	r22,zero,4cc10 <_dtoa_r+0xe30>
   4cc00:	d9000317 	ldw	r4,12(sp)
   4cc04:	2000021e 	bne	r4,zero,4cc10 <_dtoa_r+0xe30>
   4cc08:	d8c00617 	ldw	r3,24(sp)
   4cc0c:	18005626 	beq	r3,zero,4cd68 <_dtoa_r+0xf88>
   4cc10:	00814d16 	blt	zero,r2,4d148 <_dtoa_r+0x1368>
   4cc14:	d8c00417 	ldw	r3,16(sp)
   4cc18:	9d800044 	addi	r22,r19,1
   4cc1c:	9c800005 	stb	r18,0(r19)
   4cc20:	b02f883a 	mov	r23,r22
   4cc24:	98c14c26 	beq	r19,r3,4d158 <_dtoa_r+0x1378>
   4cc28:	e00b883a 	mov	r5,fp
   4cc2c:	8009883a 	mov	r4,r16
   4cc30:	01800284 	movi	r6,10
   4cc34:	000f883a 	mov	r7,zero
   4cc38:	004eae80 	call	4eae8 <__multadd>
   4cc3c:	1039883a 	mov	fp,r2
   4cc40:	8d006d26 	beq	r17,r20,4cdf8 <_dtoa_r+0x1018>
   4cc44:	880b883a 	mov	r5,r17
   4cc48:	01800284 	movi	r6,10
   4cc4c:	000f883a 	mov	r7,zero
   4cc50:	8009883a 	mov	r4,r16
   4cc54:	004eae80 	call	4eae8 <__multadd>
   4cc58:	a00b883a 	mov	r5,r20
   4cc5c:	8009883a 	mov	r4,r16
   4cc60:	01800284 	movi	r6,10
   4cc64:	000f883a 	mov	r7,zero
   4cc68:	1023883a 	mov	r17,r2
   4cc6c:	004eae80 	call	4eae8 <__multadd>
   4cc70:	1029883a 	mov	r20,r2
   4cc74:	b027883a 	mov	r19,r22
   4cc78:	003fc006 	br	4cb7c <__alt_data_end+0xfffe818c>
   4cc7c:	a005883a 	mov	r2,r20
   4cc80:	003ede06 	br	4c7fc <__alt_data_end+0xfffe7e0c>
   4cc84:	01000044 	movi	r4,1
   4cc88:	d9000b15 	stw	r4,44(sp)
   4cc8c:	d9802217 	ldw	r6,136(sp)
   4cc90:	0180dc0e 	bge	zero,r6,4d004 <_dtoa_r+0x1224>
   4cc94:	3023883a 	mov	r17,r6
   4cc98:	d9800d15 	stw	r6,52(sp)
   4cc9c:	d9800615 	stw	r6,24(sp)
   4cca0:	003d1e06 	br	4c11c <__alt_data_end+0xfffe772c>
   4cca4:	d8800617 	ldw	r2,24(sp)
   4cca8:	00be3716 	blt	zero,r2,4c588 <__alt_data_end+0xfffe7b98>
   4ccac:	1000be1e 	bne	r2,zero,4cfa8 <_dtoa_r+0x11c8>
   4ccb0:	8809883a 	mov	r4,r17
   4ccb4:	a00b883a 	mov	r5,r20
   4ccb8:	000d883a 	mov	r6,zero
   4ccbc:	01d00534 	movhi	r7,16404
   4ccc0:	0054c940 	call	54c94 <__muldf3>
   4ccc4:	1009883a 	mov	r4,r2
   4ccc8:	180b883a 	mov	r5,r3
   4cccc:	900d883a 	mov	r6,r18
   4ccd0:	980f883a 	mov	r7,r19
   4ccd4:	0054ad40 	call	54ad4 <__gedf2>
   4ccd8:	002b883a 	mov	r21,zero
   4ccdc:	0023883a 	mov	r17,zero
   4cce0:	10007a16 	blt	r2,zero,4cecc <_dtoa_r+0x10ec>
   4cce4:	d9002217 	ldw	r4,136(sp)
   4cce8:	ddc00717 	ldw	r23,28(sp)
   4ccec:	0108303a 	nor	r4,zero,r4
   4ccf0:	d9000515 	stw	r4,20(sp)
   4ccf4:	8009883a 	mov	r4,r16
   4ccf8:	a80b883a 	mov	r5,r21
   4ccfc:	004eac00 	call	4eac0 <_Bfree>
   4cd00:	883f751e 	bne	r17,zero,4cad8 <__alt_data_end+0xfffe80e8>
   4cd04:	003de406 	br	4c498 <__alt_data_end+0xfffe7aa8>
   4cd08:	e00b883a 	mov	r5,fp
   4cd0c:	8009883a 	mov	r4,r16
   4cd10:	004f10c0 	call	4f10c <__pow5mult>
   4cd14:	1039883a 	mov	fp,r2
   4cd18:	003ed306 	br	4c868 <__alt_data_end+0xfffe7e78>
   4cd1c:	903ee01e 	bne	r18,zero,4c8a0 <__alt_data_end+0xfffe7eb0>
   4cd20:	00800434 	movhi	r2,16
   4cd24:	10bfffc4 	addi	r2,r2,-1
   4cd28:	9884703a 	and	r2,r19,r2
   4cd2c:	103f081e 	bne	r2,zero,4c950 <__alt_data_end+0xfffe7f60>
   4cd30:	9cdffc2c 	andhi	r19,r19,32752
   4cd34:	983f0626 	beq	r19,zero,4c950 <__alt_data_end+0xfffe7f60>
   4cd38:	d8800817 	ldw	r2,32(sp)
   4cd3c:	b5800044 	addi	r22,r22,1
   4cd40:	04c00044 	movi	r19,1
   4cd44:	10800044 	addi	r2,r2,1
   4cd48:	d8800815 	stw	r2,32(sp)
   4cd4c:	003f0106 	br	4c954 <__alt_data_end+0xfffe7f64>
   4cd50:	d9800f17 	ldw	r6,60(sp)
   4cd54:	30016826 	beq	r6,zero,4d2f8 <_dtoa_r+0x1518>
   4cd58:	10810cc4 	addi	r2,r2,1075
   4cd5c:	dd400917 	ldw	r21,36(sp)
   4cd60:	dd000817 	ldw	r20,32(sp)
   4cd64:	003e9906 	br	4c7cc <__alt_data_end+0xfffe7ddc>
   4cd68:	9011883a 	mov	r8,r18
   4cd6c:	4007883a 	mov	r3,r8
   4cd70:	e02d883a 	mov	r22,fp
   4cd74:	0080100e 	bge	zero,r2,4cdb8 <_dtoa_r+0xfd8>
   4cd78:	01800044 	movi	r6,1
   4cd7c:	8009883a 	mov	r4,r16
   4cd80:	e00b883a 	mov	r5,fp
   4cd84:	da001515 	stw	r8,84(sp)
   4cd88:	da001715 	stw	r8,92(sp)
   4cd8c:	004f24c0 	call	4f24c <__lshift>
   4cd90:	1009883a 	mov	r4,r2
   4cd94:	a80b883a 	mov	r5,r21
   4cd98:	102d883a 	mov	r22,r2
   4cd9c:	004f3940 	call	4f394 <__mcmp>
   4cda0:	d8c01517 	ldw	r3,84(sp)
   4cda4:	da001717 	ldw	r8,92(sp)
   4cda8:	0081a50e 	bge	zero,r2,4d440 <_dtoa_r+0x1660>
   4cdac:	00800e44 	movi	r2,57
   4cdb0:	40817b26 	beq	r8,r2,4d3a0 <_dtoa_r+0x15c0>
   4cdb4:	40c00044 	addi	r3,r8,1
   4cdb8:	8825883a 	mov	r18,r17
   4cdbc:	9dc00044 	addi	r23,r19,1
   4cdc0:	98c00005 	stb	r3,0(r19)
   4cdc4:	a023883a 	mov	r17,r20
   4cdc8:	b039883a 	mov	fp,r22
   4cdcc:	003f3906 	br	4cab4 <__alt_data_end+0xfffe80c4>
   4cdd0:	00800e44 	movi	r2,57
   4cdd4:	9011883a 	mov	r8,r18
   4cdd8:	90817226 	beq	r18,r2,4d3a4 <_dtoa_r+0x15c4>
   4cddc:	0580010e 	bge	zero,r22,4cde4 <_dtoa_r+0x1004>
   4cde0:	ba000c44 	addi	r8,r23,49
   4cde4:	8825883a 	mov	r18,r17
   4cde8:	9dc00044 	addi	r23,r19,1
   4cdec:	9a000005 	stb	r8,0(r19)
   4cdf0:	a023883a 	mov	r17,r20
   4cdf4:	003f2f06 	br	4cab4 <__alt_data_end+0xfffe80c4>
   4cdf8:	880b883a 	mov	r5,r17
   4cdfc:	8009883a 	mov	r4,r16
   4ce00:	01800284 	movi	r6,10
   4ce04:	000f883a 	mov	r7,zero
   4ce08:	004eae80 	call	4eae8 <__multadd>
   4ce0c:	1023883a 	mov	r17,r2
   4ce10:	1029883a 	mov	r20,r2
   4ce14:	003f9706 	br	4cc74 <__alt_data_end+0xfffe8284>
   4ce18:	8009883a 	mov	r4,r16
   4ce1c:	180b883a 	mov	r5,r3
   4ce20:	004eac00 	call	4eac0 <_Bfree>
   4ce24:	00800044 	movi	r2,1
   4ce28:	003f7306 	br	4cbf8 <__alt_data_end+0xfffe8208>
   4ce2c:	e009883a 	mov	r4,fp
   4ce30:	a80b883a 	mov	r5,r21
   4ce34:	004f3940 	call	4f394 <__mcmp>
   4ce38:	103ee60e 	bge	r2,zero,4c9d4 <__alt_data_end+0xfffe7fe4>
   4ce3c:	8009883a 	mov	r4,r16
   4ce40:	e00b883a 	mov	r5,fp
   4ce44:	01800284 	movi	r6,10
   4ce48:	000f883a 	mov	r7,zero
   4ce4c:	004eae80 	call	4eae8 <__multadd>
   4ce50:	d9000517 	ldw	r4,20(sp)
   4ce54:	d9800b17 	ldw	r6,44(sp)
   4ce58:	1039883a 	mov	fp,r2
   4ce5c:	213fffc4 	addi	r4,r4,-1
   4ce60:	d9000515 	stw	r4,20(sp)
   4ce64:	303f2d1e 	bne	r6,zero,4cb1c <__alt_data_end+0xfffe812c>
   4ce68:	d9000d17 	ldw	r4,52(sp)
   4ce6c:	0101780e 	bge	zero,r4,4d450 <_dtoa_r+0x1670>
   4ce70:	d9000615 	stw	r4,24(sp)
   4ce74:	003edb06 	br	4c9e4 <__alt_data_end+0xfffe7ff4>
   4ce78:	00800084 	movi	r2,2
   4ce7c:	30818e1e 	bne	r6,r2,4d4b8 <_dtoa_r+0x16d8>
   4ce80:	d8000b15 	stw	zero,44(sp)
   4ce84:	003f8106 	br	4cc8c <__alt_data_end+0xfffe829c>
   4ce88:	d8800717 	ldw	r2,28(sp)
   4ce8c:	003c0306 	br	4be9c <__alt_data_end+0xfffe74ac>
   4ce90:	d9000317 	ldw	r4,12(sp)
   4ce94:	00800084 	movi	r2,2
   4ce98:	113ed00e 	bge	r2,r4,4c9dc <__alt_data_end+0xfffe7fec>
   4ce9c:	d8c00617 	ldw	r3,24(sp)
   4cea0:	183f901e 	bne	r3,zero,4cce4 <__alt_data_end+0xfffe82f4>
   4cea4:	a80b883a 	mov	r5,r21
   4cea8:	8009883a 	mov	r4,r16
   4ceac:	01800144 	movi	r6,5
   4ceb0:	000f883a 	mov	r7,zero
   4ceb4:	004eae80 	call	4eae8 <__multadd>
   4ceb8:	e009883a 	mov	r4,fp
   4cebc:	100b883a 	mov	r5,r2
   4cec0:	102b883a 	mov	r21,r2
   4cec4:	004f3940 	call	4f394 <__mcmp>
   4cec8:	00bf860e 	bge	zero,r2,4cce4 <__alt_data_end+0xfffe82f4>
   4cecc:	d9800717 	ldw	r6,28(sp)
   4ced0:	00800c44 	movi	r2,49
   4ced4:	30800005 	stb	r2,0(r6)
   4ced8:	d8800517 	ldw	r2,20(sp)
   4cedc:	35c00044 	addi	r23,r6,1
   4cee0:	10800044 	addi	r2,r2,1
   4cee4:	d8800515 	stw	r2,20(sp)
   4cee8:	003f8206 	br	4ccf4 <__alt_data_end+0xfffe8304>
   4ceec:	903e981e 	bne	r18,zero,4c950 <__alt_data_end+0xfffe7f60>
   4cef0:	003f8b06 	br	4cd20 <__alt_data_end+0xfffe8330>
   4cef4:	d9800517 	ldw	r6,20(sp)
   4cef8:	d8c00717 	ldw	r3,28(sp)
   4cefc:	00800c44 	movi	r2,49
   4cf00:	31800044 	addi	r6,r6,1
   4cf04:	d9800515 	stw	r6,20(sp)
   4cf08:	18800005 	stb	r2,0(r3)
   4cf0c:	003ee906 	br	4cab4 <__alt_data_end+0xfffe80c4>
   4cf10:	dc000317 	ldw	r16,12(sp)
   4cf14:	003d6006 	br	4c498 <__alt_data_end+0xfffe7aa8>
   4cf18:	8809883a 	mov	r4,r17
   4cf1c:	0055e580 	call	55e58 <__floatsidf>
   4cf20:	a009883a 	mov	r4,r20
   4cf24:	a80b883a 	mov	r5,r21
   4cf28:	100d883a 	mov	r6,r2
   4cf2c:	180f883a 	mov	r7,r3
   4cf30:	0054c940 	call	54c94 <__muldf3>
   4cf34:	1009883a 	mov	r4,r2
   4cf38:	180b883a 	mov	r5,r3
   4cf3c:	000d883a 	mov	r6,zero
   4cf40:	01d00734 	movhi	r7,16412
   4cf44:	00541b40 	call	541b4 <__adddf3>
   4cf48:	1023883a 	mov	r17,r2
   4cf4c:	00bf3034 	movhi	r2,64704
   4cf50:	1885883a 	add	r2,r3,r2
   4cf54:	d8800e15 	stw	r2,56(sp)
   4cf58:	a009883a 	mov	r4,r20
   4cf5c:	a80b883a 	mov	r5,r21
   4cf60:	000d883a 	mov	r6,zero
   4cf64:	01d00534 	movhi	r7,16404
   4cf68:	00555000 	call	55500 <__subdf3>
   4cf6c:	d9c00e17 	ldw	r7,56(sp)
   4cf70:	1009883a 	mov	r4,r2
   4cf74:	180b883a 	mov	r5,r3
   4cf78:	880d883a 	mov	r6,r17
   4cf7c:	102b883a 	mov	r21,r2
   4cf80:	1829883a 	mov	r20,r3
   4cf84:	0054ad40 	call	54ad4 <__gedf2>
   4cf88:	00807716 	blt	zero,r2,4d168 <_dtoa_r+0x1388>
   4cf8c:	d8800e17 	ldw	r2,56(sp)
   4cf90:	a809883a 	mov	r4,r21
   4cf94:	a00b883a 	mov	r5,r20
   4cf98:	11e0003c 	xorhi	r7,r2,32768
   4cf9c:	880d883a 	mov	r6,r17
   4cfa0:	0054bb40 	call	54bb4 <__ledf2>
   4cfa4:	103d6b0e 	bge	r2,zero,4c554 <__alt_data_end+0xfffe7b64>
   4cfa8:	002b883a 	mov	r21,zero
   4cfac:	0023883a 	mov	r17,zero
   4cfb0:	003f4c06 	br	4cce4 <__alt_data_end+0xfffe82f4>
   4cfb4:	d9800917 	ldw	r6,36(sp)
   4cfb8:	e00b883a 	mov	r5,fp
   4cfbc:	8009883a 	mov	r4,r16
   4cfc0:	004f10c0 	call	4f10c <__pow5mult>
   4cfc4:	1039883a 	mov	fp,r2
   4cfc8:	003e2706 	br	4c868 <__alt_data_end+0xfffe7e78>
   4cfcc:	d8000b15 	stw	zero,44(sp)
   4cfd0:	003c4906 	br	4c0f8 <__alt_data_end+0xfffe7708>
   4cfd4:	d9000917 	ldw	r4,36(sp)
   4cfd8:	d9800a17 	ldw	r6,40(sp)
   4cfdc:	dd400915 	stw	r21,36(sp)
   4cfe0:	a905c83a 	sub	r2,r21,r4
   4cfe4:	308d883a 	add	r6,r6,r2
   4cfe8:	d9800a15 	stw	r6,40(sp)
   4cfec:	002b883a 	mov	r21,zero
   4cff0:	003df206 	br	4c7bc <__alt_data_end+0xfffe7dcc>
   4cff4:	dc800e15 	stw	r18,56(sp)
   4cff8:	982b883a 	mov	r21,r19
   4cffc:	04400084 	movi	r17,2
   4d000:	003c7406 	br	4c1d4 <__alt_data_end+0xfffe77e4>
   4d004:	04400044 	movi	r17,1
   4d008:	dc400d15 	stw	r17,52(sp)
   4d00c:	dc400615 	stw	r17,24(sp)
   4d010:	dc402215 	stw	r17,136(sp)
   4d014:	80001115 	stw	zero,68(r16)
   4d018:	000b883a 	mov	r5,zero
   4d01c:	003c4a06 	br	4c148 <__alt_data_end+0xfffe7758>
   4d020:	3023883a 	mov	r17,r6
   4d024:	003ffb06 	br	4d014 <__alt_data_end+0xfffe8624>
   4d028:	1000021e 	bne	r2,zero,4d034 <_dtoa_r+0x1254>
   4d02c:	4200004c 	andi	r8,r8,1
   4d030:	403e8f1e 	bne	r8,zero,4ca70 <__alt_data_end+0xfffe8080>
   4d034:	01000c04 	movi	r4,48
   4d038:	00000106 	br	4d040 <_dtoa_r+0x1260>
   4d03c:	102f883a 	mov	r23,r2
   4d040:	b8bfffc4 	addi	r2,r23,-1
   4d044:	10c00007 	ldb	r3,0(r2)
   4d048:	193ffc26 	beq	r3,r4,4d03c <__alt_data_end+0xfffe864c>
   4d04c:	003e9906 	br	4cab4 <__alt_data_end+0xfffe80c4>
   4d050:	d9000517 	ldw	r4,20(sp)
   4d054:	012fc83a 	sub	r23,zero,r4
   4d058:	b800ad26 	beq	r23,zero,4d310 <_dtoa_r+0x1530>
   4d05c:	b88003cc 	andi	r2,r23,15
   4d060:	100490fa 	slli	r2,r2,3
   4d064:	00c001b4 	movhi	r3,6
   4d068:	18e4cb04 	addi	r3,r3,-27860
   4d06c:	1885883a 	add	r2,r3,r2
   4d070:	11800017 	ldw	r6,0(r2)
   4d074:	11c00117 	ldw	r7,4(r2)
   4d078:	b82fd13a 	srai	r23,r23,4
   4d07c:	9009883a 	mov	r4,r18
   4d080:	980b883a 	mov	r5,r19
   4d084:	0054c940 	call	54c94 <__muldf3>
   4d088:	1029883a 	mov	r20,r2
   4d08c:	182b883a 	mov	r21,r3
   4d090:	b800f426 	beq	r23,zero,4d464 <_dtoa_r+0x1684>
   4d094:	020001b4 	movhi	r8,6
   4d098:	4224c104 	addi	r8,r8,-27900
   4d09c:	8029883a 	mov	r20,r16
   4d0a0:	04400084 	movi	r17,2
   4d0a4:	4021883a 	mov	r16,r8
   4d0a8:	b980004c 	andi	r6,r23,1
   4d0ac:	1009883a 	mov	r4,r2
   4d0b0:	b82fd07a 	srai	r23,r23,1
   4d0b4:	180b883a 	mov	r5,r3
   4d0b8:	30000426 	beq	r6,zero,4d0cc <_dtoa_r+0x12ec>
   4d0bc:	81800017 	ldw	r6,0(r16)
   4d0c0:	81c00117 	ldw	r7,4(r16)
   4d0c4:	8c400044 	addi	r17,r17,1
   4d0c8:	0054c940 	call	54c94 <__muldf3>
   4d0cc:	84000204 	addi	r16,r16,8
   4d0d0:	b83ff51e 	bne	r23,zero,4d0a8 <__alt_data_end+0xfffe86b8>
   4d0d4:	a021883a 	mov	r16,r20
   4d0d8:	182b883a 	mov	r21,r3
   4d0dc:	1029883a 	mov	r20,r2
   4d0e0:	003c5506 	br	4c238 <__alt_data_end+0xfffe7848>
   4d0e4:	d9800517 	ldw	r6,20(sp)
   4d0e8:	d9000717 	ldw	r4,28(sp)
   4d0ec:	00c00c04 	movi	r3,48
   4d0f0:	31800044 	addi	r6,r6,1
   4d0f4:	d9800515 	stw	r6,20(sp)
   4d0f8:	20c00005 	stb	r3,0(r4)
   4d0fc:	02000c44 	movi	r8,49
   4d100:	003da206 	br	4c78c <__alt_data_end+0xfffe7d9c>
   4d104:	89400117 	ldw	r5,4(r17)
   4d108:	8009883a 	mov	r4,r16
   4d10c:	004ea180 	call	4ea18 <_Balloc>
   4d110:	89800417 	ldw	r6,16(r17)
   4d114:	11000304 	addi	r4,r2,12
   4d118:	89400304 	addi	r5,r17,12
   4d11c:	31800084 	addi	r6,r6,2
   4d120:	318d883a 	add	r6,r6,r6
   4d124:	318d883a 	add	r6,r6,r6
   4d128:	1027883a 	mov	r19,r2
   4d12c:	00471540 	call	47154 <memcpy>
   4d130:	8009883a 	mov	r4,r16
   4d134:	980b883a 	mov	r5,r19
   4d138:	01800044 	movi	r6,1
   4d13c:	004f24c0 	call	4f24c <__lshift>
   4d140:	1029883a 	mov	r20,r2
   4d144:	003e8606 	br	4cb60 <__alt_data_end+0xfffe8170>
   4d148:	00800e44 	movi	r2,57
   4d14c:	90809526 	beq	r18,r2,4d3a4 <_dtoa_r+0x15c4>
   4d150:	92000044 	addi	r8,r18,1
   4d154:	003f2306 	br	4cde4 <__alt_data_end+0xfffe83f4>
   4d158:	9011883a 	mov	r8,r18
   4d15c:	8825883a 	mov	r18,r17
   4d160:	a023883a 	mov	r17,r20
   4d164:	003e3706 	br	4ca44 <__alt_data_end+0xfffe8054>
   4d168:	002b883a 	mov	r21,zero
   4d16c:	0023883a 	mov	r17,zero
   4d170:	003f5606 	br	4cecc <__alt_data_end+0xfffe84dc>
   4d174:	51bfffc4 	addi	r6,r10,-1
   4d178:	300490fa 	slli	r2,r6,3
   4d17c:	00c001b4 	movhi	r3,6
   4d180:	18e4cb04 	addi	r3,r3,-27860
   4d184:	1885883a 	add	r2,r3,r2
   4d188:	d9c00e17 	ldw	r7,56(sp)
   4d18c:	11000017 	ldw	r4,0(r2)
   4d190:	11400117 	ldw	r5,4(r2)
   4d194:	d8800717 	ldw	r2,28(sp)
   4d198:	d9801015 	stw	r6,64(sp)
   4d19c:	880d883a 	mov	r6,r17
   4d1a0:	da801615 	stw	r10,88(sp)
   4d1a4:	15c00044 	addi	r23,r2,1
   4d1a8:	0054c940 	call	54c94 <__muldf3>
   4d1ac:	a80b883a 	mov	r5,r21
   4d1b0:	a009883a 	mov	r4,r20
   4d1b4:	d8c01115 	stw	r3,68(sp)
   4d1b8:	d8800e15 	stw	r2,56(sp)
   4d1bc:	0055dd00 	call	55dd0 <__fixdfsi>
   4d1c0:	1009883a 	mov	r4,r2
   4d1c4:	1023883a 	mov	r17,r2
   4d1c8:	0055e580 	call	55e58 <__floatsidf>
   4d1cc:	a009883a 	mov	r4,r20
   4d1d0:	a80b883a 	mov	r5,r21
   4d1d4:	100d883a 	mov	r6,r2
   4d1d8:	180f883a 	mov	r7,r3
   4d1dc:	00555000 	call	55500 <__subdf3>
   4d1e0:	1813883a 	mov	r9,r3
   4d1e4:	d8c00717 	ldw	r3,28(sp)
   4d1e8:	8c400c04 	addi	r17,r17,48
   4d1ec:	1011883a 	mov	r8,r2
   4d1f0:	1c400005 	stb	r17,0(r3)
   4d1f4:	da801617 	ldw	r10,88(sp)
   4d1f8:	00800044 	movi	r2,1
   4d1fc:	50802326 	beq	r10,r2,4d28c <_dtoa_r+0x14ac>
   4d200:	d8800717 	ldw	r2,28(sp)
   4d204:	b82b883a 	mov	r21,r23
   4d208:	dc001315 	stw	r16,76(sp)
   4d20c:	12a9883a 	add	r20,r2,r10
   4d210:	4807883a 	mov	r3,r9
   4d214:	4005883a 	mov	r2,r8
   4d218:	dc801415 	stw	r18,80(sp)
   4d21c:	000d883a 	mov	r6,zero
   4d220:	01d00934 	movhi	r7,16420
   4d224:	1009883a 	mov	r4,r2
   4d228:	180b883a 	mov	r5,r3
   4d22c:	0054c940 	call	54c94 <__muldf3>
   4d230:	180b883a 	mov	r5,r3
   4d234:	1009883a 	mov	r4,r2
   4d238:	1821883a 	mov	r16,r3
   4d23c:	1025883a 	mov	r18,r2
   4d240:	0055dd00 	call	55dd0 <__fixdfsi>
   4d244:	1009883a 	mov	r4,r2
   4d248:	1023883a 	mov	r17,r2
   4d24c:	0055e580 	call	55e58 <__floatsidf>
   4d250:	9009883a 	mov	r4,r18
   4d254:	800b883a 	mov	r5,r16
   4d258:	100d883a 	mov	r6,r2
   4d25c:	180f883a 	mov	r7,r3
   4d260:	8c400c04 	addi	r17,r17,48
   4d264:	00555000 	call	55500 <__subdf3>
   4d268:	ad400044 	addi	r21,r21,1
   4d26c:	ac7fffc5 	stb	r17,-1(r21)
   4d270:	ad3fea1e 	bne	r21,r20,4d21c <__alt_data_end+0xfffe882c>
   4d274:	1813883a 	mov	r9,r3
   4d278:	d8c01017 	ldw	r3,64(sp)
   4d27c:	dc001317 	ldw	r16,76(sp)
   4d280:	dc801417 	ldw	r18,80(sp)
   4d284:	1011883a 	mov	r8,r2
   4d288:	b8ef883a 	add	r23,r23,r3
   4d28c:	d9000e17 	ldw	r4,56(sp)
   4d290:	d9401117 	ldw	r5,68(sp)
   4d294:	000d883a 	mov	r6,zero
   4d298:	01cff834 	movhi	r7,16352
   4d29c:	da001715 	stw	r8,92(sp)
   4d2a0:	da401515 	stw	r9,84(sp)
   4d2a4:	00541b40 	call	541b4 <__adddf3>
   4d2a8:	da001717 	ldw	r8,92(sp)
   4d2ac:	da401517 	ldw	r9,84(sp)
   4d2b0:	1009883a 	mov	r4,r2
   4d2b4:	400d883a 	mov	r6,r8
   4d2b8:	480f883a 	mov	r7,r9
   4d2bc:	180b883a 	mov	r5,r3
   4d2c0:	0054bb40 	call	54bb4 <__ledf2>
   4d2c4:	da001717 	ldw	r8,92(sp)
   4d2c8:	da401517 	ldw	r9,84(sp)
   4d2cc:	10003b0e 	bge	r2,zero,4d3bc <_dtoa_r+0x15dc>
   4d2d0:	d9001217 	ldw	r4,72(sp)
   4d2d4:	bd7fffc3 	ldbu	r21,-1(r23)
   4d2d8:	d9000515 	stw	r4,20(sp)
   4d2dc:	003d1c06 	br	4c750 <__alt_data_end+0xfffe7d60>
   4d2e0:	d8c00817 	ldw	r3,32(sp)
   4d2e4:	18a9c83a 	sub	r20,r3,r2
   4d2e8:	0005883a 	mov	r2,zero
   4d2ec:	003d3706 	br	4c7cc <__alt_data_end+0xfffe7ddc>
   4d2f0:	00800044 	movi	r2,1
   4d2f4:	003dd006 	br	4ca38 <__alt_data_end+0xfffe8048>
   4d2f8:	d8c00217 	ldw	r3,8(sp)
   4d2fc:	00800d84 	movi	r2,54
   4d300:	dd400917 	ldw	r21,36(sp)
   4d304:	10c5c83a 	sub	r2,r2,r3
   4d308:	dd000817 	ldw	r20,32(sp)
   4d30c:	003d2f06 	br	4c7cc <__alt_data_end+0xfffe7ddc>
   4d310:	9029883a 	mov	r20,r18
   4d314:	982b883a 	mov	r21,r19
   4d318:	04400084 	movi	r17,2
   4d31c:	003bc606 	br	4c238 <__alt_data_end+0xfffe7848>
   4d320:	d8800617 	ldw	r2,24(sp)
   4d324:	103efc26 	beq	r2,zero,4cf18 <__alt_data_end+0xfffe8528>
   4d328:	d8c00d17 	ldw	r3,52(sp)
   4d32c:	00fc890e 	bge	zero,r3,4c554 <__alt_data_end+0xfffe7b64>
   4d330:	a80b883a 	mov	r5,r21
   4d334:	a009883a 	mov	r4,r20
   4d338:	000d883a 	mov	r6,zero
   4d33c:	01d00934 	movhi	r7,16420
   4d340:	0054c940 	call	54c94 <__muldf3>
   4d344:	89000044 	addi	r4,r17,1
   4d348:	1029883a 	mov	r20,r2
   4d34c:	182b883a 	mov	r21,r3
   4d350:	0055e580 	call	55e58 <__floatsidf>
   4d354:	a009883a 	mov	r4,r20
   4d358:	a80b883a 	mov	r5,r21
   4d35c:	100d883a 	mov	r6,r2
   4d360:	180f883a 	mov	r7,r3
   4d364:	0054c940 	call	54c94 <__muldf3>
   4d368:	1009883a 	mov	r4,r2
   4d36c:	180b883a 	mov	r5,r3
   4d370:	000d883a 	mov	r6,zero
   4d374:	01d00734 	movhi	r7,16412
   4d378:	00541b40 	call	541b4 <__adddf3>
   4d37c:	d9000517 	ldw	r4,20(sp)
   4d380:	1023883a 	mov	r17,r2
   4d384:	00bf3034 	movhi	r2,64704
   4d388:	213fffc4 	addi	r4,r4,-1
   4d38c:	1885883a 	add	r2,r3,r2
   4d390:	d9001215 	stw	r4,72(sp)
   4d394:	d8800e15 	stw	r2,56(sp)
   4d398:	da800d17 	ldw	r10,52(sp)
   4d39c:	003bc306 	br	4c2ac <__alt_data_end+0xfffe78bc>
   4d3a0:	b039883a 	mov	fp,r22
   4d3a4:	01000e44 	movi	r4,57
   4d3a8:	8825883a 	mov	r18,r17
   4d3ac:	9dc00044 	addi	r23,r19,1
   4d3b0:	99000005 	stb	r4,0(r19)
   4d3b4:	a023883a 	mov	r17,r20
   4d3b8:	003dae06 	br	4ca74 <__alt_data_end+0xfffe8084>
   4d3bc:	d9800e17 	ldw	r6,56(sp)
   4d3c0:	d9c01117 	ldw	r7,68(sp)
   4d3c4:	0009883a 	mov	r4,zero
   4d3c8:	014ff834 	movhi	r5,16352
   4d3cc:	da001715 	stw	r8,92(sp)
   4d3d0:	da401515 	stw	r9,84(sp)
   4d3d4:	00555000 	call	55500 <__subdf3>
   4d3d8:	da001717 	ldw	r8,92(sp)
   4d3dc:	da401517 	ldw	r9,84(sp)
   4d3e0:	1009883a 	mov	r4,r2
   4d3e4:	180b883a 	mov	r5,r3
   4d3e8:	400d883a 	mov	r6,r8
   4d3ec:	480f883a 	mov	r7,r9
   4d3f0:	0054ad40 	call	54ad4 <__gedf2>
   4d3f4:	00bc570e 	bge	zero,r2,4c554 <__alt_data_end+0xfffe7b64>
   4d3f8:	01000c04 	movi	r4,48
   4d3fc:	00000106 	br	4d404 <_dtoa_r+0x1624>
   4d400:	102f883a 	mov	r23,r2
   4d404:	b8bfffc4 	addi	r2,r23,-1
   4d408:	10c00007 	ldb	r3,0(r2)
   4d40c:	193ffc26 	beq	r3,r4,4d400 <__alt_data_end+0xfffe8a10>
   4d410:	d9801217 	ldw	r6,72(sp)
   4d414:	d9800515 	stw	r6,20(sp)
   4d418:	003c1f06 	br	4c498 <__alt_data_end+0xfffe7aa8>
   4d41c:	d8801217 	ldw	r2,72(sp)
   4d420:	dc001117 	ldw	r16,68(sp)
   4d424:	d8800515 	stw	r2,20(sp)
   4d428:	003cc906 	br	4c750 <__alt_data_end+0xfffe7d60>
   4d42c:	dd801317 	ldw	r22,76(sp)
   4d430:	dc001117 	ldw	r16,68(sp)
   4d434:	dcc01417 	ldw	r19,80(sp)
   4d438:	dc801017 	ldw	r18,64(sp)
   4d43c:	003c4506 	br	4c554 <__alt_data_end+0xfffe7b64>
   4d440:	103e5d1e 	bne	r2,zero,4cdb8 <__alt_data_end+0xfffe83c8>
   4d444:	4080004c 	andi	r2,r8,1
   4d448:	103e5b26 	beq	r2,zero,4cdb8 <__alt_data_end+0xfffe83c8>
   4d44c:	003e5706 	br	4cdac <__alt_data_end+0xfffe83bc>
   4d450:	d8c00317 	ldw	r3,12(sp)
   4d454:	00800084 	movi	r2,2
   4d458:	10c00a16 	blt	r2,r3,4d484 <_dtoa_r+0x16a4>
   4d45c:	d9000d17 	ldw	r4,52(sp)
   4d460:	003e8306 	br	4ce70 <__alt_data_end+0xfffe8480>
   4d464:	04400084 	movi	r17,2
   4d468:	003b7306 	br	4c238 <__alt_data_end+0xfffe7848>
   4d46c:	d9801217 	ldw	r6,72(sp)
   4d470:	d9800515 	stw	r6,20(sp)
   4d474:	003cb606 	br	4c750 <__alt_data_end+0xfffe7d60>
   4d478:	d9001217 	ldw	r4,72(sp)
   4d47c:	d9000515 	stw	r4,20(sp)
   4d480:	003c0506 	br	4c498 <__alt_data_end+0xfffe7aa8>
   4d484:	d9800d17 	ldw	r6,52(sp)
   4d488:	d9800615 	stw	r6,24(sp)
   4d48c:	003e8306 	br	4ce9c <__alt_data_end+0xfffe84ac>
   4d490:	d9800317 	ldw	r6,12(sp)
   4d494:	00800084 	movi	r2,2
   4d498:	11800216 	blt	r2,r6,4d4a4 <_dtoa_r+0x16c4>
   4d49c:	d8800d17 	ldw	r2,52(sp)
   4d4a0:	003da606 	br	4cb3c <__alt_data_end+0xfffe814c>
   4d4a4:	d8800d17 	ldw	r2,52(sp)
   4d4a8:	d8800615 	stw	r2,24(sp)
   4d4ac:	003e7b06 	br	4ce9c <__alt_data_end+0xfffe84ac>
   4d4b0:	05000044 	movi	r20,1
   4d4b4:	003b0506 	br	4c0cc <__alt_data_end+0xfffe76dc>
   4d4b8:	8009883a 	mov	r4,r16
   4d4bc:	80001115 	stw	zero,68(r16)
   4d4c0:	000b883a 	mov	r5,zero
   4d4c4:	004ea180 	call	4ea18 <_Balloc>
   4d4c8:	d8800715 	stw	r2,28(sp)
   4d4cc:	d8c00717 	ldw	r3,28(sp)
   4d4d0:	00bfffc4 	movi	r2,-1
   4d4d4:	01000044 	movi	r4,1
   4d4d8:	d8800615 	stw	r2,24(sp)
   4d4dc:	80c01015 	stw	r3,64(r16)
   4d4e0:	d9000b15 	stw	r4,44(sp)
   4d4e4:	d8002215 	stw	zero,136(sp)
   4d4e8:	d8800d15 	stw	r2,52(sp)
   4d4ec:	003c1906 	br	4c554 <__alt_data_end+0xfffe7b64>
   4d4f0:	193d2926 	beq	r3,r4,4c998 <__alt_data_end+0xfffe7fa8>
   4d4f4:	00c00f04 	movi	r3,60
   4d4f8:	1885c83a 	sub	r2,r3,r2
   4d4fc:	003d7b06 	br	4caec <__alt_data_end+0xfffe80fc>
   4d500:	000b883a 	mov	r5,zero
   4d504:	003b1006 	br	4c148 <__alt_data_end+0xfffe7758>

0004d508 <_fflush_r>:
   4d508:	defffb04 	addi	sp,sp,-20
   4d50c:	dcc00315 	stw	r19,12(sp)
   4d510:	dc000015 	stw	r16,0(sp)
   4d514:	dfc00415 	stw	ra,16(sp)
   4d518:	dc800215 	stw	r18,8(sp)
   4d51c:	dc400115 	stw	r17,4(sp)
   4d520:	2027883a 	mov	r19,r4
   4d524:	2821883a 	mov	r16,r5
   4d528:	20000226 	beq	r4,zero,4d534 <_fflush_r+0x2c>
   4d52c:	20800e17 	ldw	r2,56(r4)
   4d530:	10005326 	beq	r2,zero,4d680 <_fflush_r+0x178>
   4d534:	8080030b 	ldhu	r2,12(r16)
   4d538:	10ffffcc 	andi	r3,r2,65535
   4d53c:	18e0001c 	xori	r3,r3,32768
   4d540:	18e00004 	addi	r3,r3,-32768
   4d544:	18002c26 	beq	r3,zero,4d5f8 <_fflush_r+0xf0>
   4d548:	10c0020c 	andi	r3,r2,8
   4d54c:	1800321e 	bne	r3,zero,4d618 <_fflush_r+0x110>
   4d550:	80c00117 	ldw	r3,4(r16)
   4d554:	10820014 	ori	r2,r2,2048
   4d558:	8080030d 	sth	r2,12(r16)
   4d55c:	00c0570e 	bge	zero,r3,4d6bc <_fflush_r+0x1b4>
   4d560:	82000a17 	ldw	r8,40(r16)
   4d564:	40002426 	beq	r8,zero,4d5f8 <_fflush_r+0xf0>
   4d568:	9c400017 	ldw	r17,0(r19)
   4d56c:	10c4000c 	andi	r3,r2,4096
   4d570:	98000015 	stw	zero,0(r19)
   4d574:	18004626 	beq	r3,zero,4d690 <_fflush_r+0x188>
   4d578:	81801417 	ldw	r6,80(r16)
   4d57c:	10c0010c 	andi	r3,r2,4
   4d580:	18000626 	beq	r3,zero,4d59c <_fflush_r+0x94>
   4d584:	80c00117 	ldw	r3,4(r16)
   4d588:	80800c17 	ldw	r2,48(r16)
   4d58c:	30cdc83a 	sub	r6,r6,r3
   4d590:	10000226 	beq	r2,zero,4d59c <_fflush_r+0x94>
   4d594:	80800f17 	ldw	r2,60(r16)
   4d598:	308dc83a 	sub	r6,r6,r2
   4d59c:	81400717 	ldw	r5,28(r16)
   4d5a0:	9809883a 	mov	r4,r19
   4d5a4:	000f883a 	mov	r7,zero
   4d5a8:	403ee83a 	callr	r8
   4d5ac:	00ffffc4 	movi	r3,-1
   4d5b0:	10c04526 	beq	r2,r3,4d6c8 <_fflush_r+0x1c0>
   4d5b4:	80c0030b 	ldhu	r3,12(r16)
   4d5b8:	81000417 	ldw	r4,16(r16)
   4d5bc:	80000115 	stw	zero,4(r16)
   4d5c0:	197dffcc 	andi	r5,r3,63487
   4d5c4:	8140030d 	sth	r5,12(r16)
   4d5c8:	81000015 	stw	r4,0(r16)
   4d5cc:	18c4000c 	andi	r3,r3,4096
   4d5d0:	18000126 	beq	r3,zero,4d5d8 <_fflush_r+0xd0>
   4d5d4:	80801415 	stw	r2,80(r16)
   4d5d8:	81400c17 	ldw	r5,48(r16)
   4d5dc:	9c400015 	stw	r17,0(r19)
   4d5e0:	28000526 	beq	r5,zero,4d5f8 <_fflush_r+0xf0>
   4d5e4:	80801004 	addi	r2,r16,64
   4d5e8:	28800226 	beq	r5,r2,4d5f4 <_fflush_r+0xec>
   4d5ec:	9809883a 	mov	r4,r19
   4d5f0:	004dc380 	call	4dc38 <_free_r>
   4d5f4:	80000c15 	stw	zero,48(r16)
   4d5f8:	0005883a 	mov	r2,zero
   4d5fc:	dfc00417 	ldw	ra,16(sp)
   4d600:	dcc00317 	ldw	r19,12(sp)
   4d604:	dc800217 	ldw	r18,8(sp)
   4d608:	dc400117 	ldw	r17,4(sp)
   4d60c:	dc000017 	ldw	r16,0(sp)
   4d610:	dec00504 	addi	sp,sp,20
   4d614:	f800283a 	ret
   4d618:	84800417 	ldw	r18,16(r16)
   4d61c:	903ff626 	beq	r18,zero,4d5f8 <__alt_data_end+0xfffe8c08>
   4d620:	84400017 	ldw	r17,0(r16)
   4d624:	108000cc 	andi	r2,r2,3
   4d628:	84800015 	stw	r18,0(r16)
   4d62c:	8ca3c83a 	sub	r17,r17,r18
   4d630:	10001526 	beq	r2,zero,4d688 <_fflush_r+0x180>
   4d634:	0005883a 	mov	r2,zero
   4d638:	80800215 	stw	r2,8(r16)
   4d63c:	04400316 	blt	zero,r17,4d64c <_fflush_r+0x144>
   4d640:	003fed06 	br	4d5f8 <__alt_data_end+0xfffe8c08>
   4d644:	90a5883a 	add	r18,r18,r2
   4d648:	047feb0e 	bge	zero,r17,4d5f8 <__alt_data_end+0xfffe8c08>
   4d64c:	80800917 	ldw	r2,36(r16)
   4d650:	81400717 	ldw	r5,28(r16)
   4d654:	880f883a 	mov	r7,r17
   4d658:	900d883a 	mov	r6,r18
   4d65c:	9809883a 	mov	r4,r19
   4d660:	103ee83a 	callr	r2
   4d664:	88a3c83a 	sub	r17,r17,r2
   4d668:	00bff616 	blt	zero,r2,4d644 <__alt_data_end+0xfffe8c54>
   4d66c:	80c0030b 	ldhu	r3,12(r16)
   4d670:	00bfffc4 	movi	r2,-1
   4d674:	18c01014 	ori	r3,r3,64
   4d678:	80c0030d 	sth	r3,12(r16)
   4d67c:	003fdf06 	br	4d5fc <__alt_data_end+0xfffe8c0c>
   4d680:	004dac40 	call	4dac4 <__sinit>
   4d684:	003fab06 	br	4d534 <__alt_data_end+0xfffe8b44>
   4d688:	80800517 	ldw	r2,20(r16)
   4d68c:	003fea06 	br	4d638 <__alt_data_end+0xfffe8c48>
   4d690:	81400717 	ldw	r5,28(r16)
   4d694:	000d883a 	mov	r6,zero
   4d698:	9809883a 	mov	r4,r19
   4d69c:	01c00044 	movi	r7,1
   4d6a0:	403ee83a 	callr	r8
   4d6a4:	100d883a 	mov	r6,r2
   4d6a8:	00bfffc4 	movi	r2,-1
   4d6ac:	30801326 	beq	r6,r2,4d6fc <_fflush_r+0x1f4>
   4d6b0:	8080030b 	ldhu	r2,12(r16)
   4d6b4:	82000a17 	ldw	r8,40(r16)
   4d6b8:	003fb006 	br	4d57c <__alt_data_end+0xfffe8b8c>
   4d6bc:	80c00f17 	ldw	r3,60(r16)
   4d6c0:	00ffa716 	blt	zero,r3,4d560 <__alt_data_end+0xfffe8b70>
   4d6c4:	003fcc06 	br	4d5f8 <__alt_data_end+0xfffe8c08>
   4d6c8:	98c00017 	ldw	r3,0(r19)
   4d6cc:	183fb926 	beq	r3,zero,4d5b4 <__alt_data_end+0xfffe8bc4>
   4d6d0:	01000744 	movi	r4,29
   4d6d4:	19000226 	beq	r3,r4,4d6e0 <_fflush_r+0x1d8>
   4d6d8:	01000584 	movi	r4,22
   4d6dc:	1900101e 	bne	r3,r4,4d720 <_fflush_r+0x218>
   4d6e0:	8080030b 	ldhu	r2,12(r16)
   4d6e4:	80c00417 	ldw	r3,16(r16)
   4d6e8:	80000115 	stw	zero,4(r16)
   4d6ec:	10bdffcc 	andi	r2,r2,63487
   4d6f0:	8080030d 	sth	r2,12(r16)
   4d6f4:	80c00015 	stw	r3,0(r16)
   4d6f8:	003fb706 	br	4d5d8 <__alt_data_end+0xfffe8be8>
   4d6fc:	98800017 	ldw	r2,0(r19)
   4d700:	103feb26 	beq	r2,zero,4d6b0 <__alt_data_end+0xfffe8cc0>
   4d704:	00c00744 	movi	r3,29
   4d708:	10c00226 	beq	r2,r3,4d714 <_fflush_r+0x20c>
   4d70c:	00c00584 	movi	r3,22
   4d710:	10ffd61e 	bne	r2,r3,4d66c <__alt_data_end+0xfffe8c7c>
   4d714:	9c400015 	stw	r17,0(r19)
   4d718:	0005883a 	mov	r2,zero
   4d71c:	003fb706 	br	4d5fc <__alt_data_end+0xfffe8c0c>
   4d720:	80c0030b 	ldhu	r3,12(r16)
   4d724:	18c01014 	ori	r3,r3,64
   4d728:	80c0030d 	sth	r3,12(r16)
   4d72c:	003fb306 	br	4d5fc <__alt_data_end+0xfffe8c0c>

0004d730 <fflush>:
   4d730:	20000526 	beq	r4,zero,4d748 <fflush+0x18>
   4d734:	008001b4 	movhi	r2,6
   4d738:	10abc704 	addi	r2,r2,-20708
   4d73c:	200b883a 	mov	r5,r4
   4d740:	11000017 	ldw	r4,0(r2)
   4d744:	004d5081 	jmpi	4d508 <_fflush_r>
   4d748:	008001b4 	movhi	r2,6
   4d74c:	10abc604 	addi	r2,r2,-20712
   4d750:	11000017 	ldw	r4,0(r2)
   4d754:	01400174 	movhi	r5,5
   4d758:	29754204 	addi	r5,r5,-11000
   4d75c:	004e4841 	jmpi	4e484 <_fwalk_reent>

0004d760 <__fp_lock>:
   4d760:	0005883a 	mov	r2,zero
   4d764:	f800283a 	ret

0004d768 <__fp_unlock>:
   4d768:	0005883a 	mov	r2,zero
   4d76c:	f800283a 	ret

0004d770 <_cleanup_r>:
   4d770:	01400174 	movhi	r5,5
   4d774:	294c0104 	addi	r5,r5,12292
   4d778:	004e3cc1 	jmpi	4e3cc <_fwalk>

0004d77c <__sinit.part.1>:
   4d77c:	defff604 	addi	sp,sp,-40
   4d780:	00c00174 	movhi	r3,5
   4d784:	dfc00915 	stw	ra,36(sp)
   4d788:	df000815 	stw	fp,32(sp)
   4d78c:	ddc00715 	stw	r23,28(sp)
   4d790:	dd800615 	stw	r22,24(sp)
   4d794:	dd400515 	stw	r21,20(sp)
   4d798:	dd000415 	stw	r20,16(sp)
   4d79c:	dcc00315 	stw	r19,12(sp)
   4d7a0:	dc800215 	stw	r18,8(sp)
   4d7a4:	dc400115 	stw	r17,4(sp)
   4d7a8:	dc000015 	stw	r16,0(sp)
   4d7ac:	18f5dc04 	addi	r3,r3,-10384
   4d7b0:	24000117 	ldw	r16,4(r4)
   4d7b4:	20c00f15 	stw	r3,60(r4)
   4d7b8:	07000044 	movi	fp,1
   4d7bc:	00c000c4 	movi	r3,3
   4d7c0:	2080bb04 	addi	r2,r4,748
   4d7c4:	20c0b915 	stw	r3,740(r4)
   4d7c8:	27000e15 	stw	fp,56(r4)
   4d7cc:	2080ba15 	stw	r2,744(r4)
   4d7d0:	2000b815 	stw	zero,736(r4)
   4d7d4:	05c00204 	movi	r23,8
   4d7d8:	00800104 	movi	r2,4
   4d7dc:	2025883a 	mov	r18,r4
   4d7e0:	b80d883a 	mov	r6,r23
   4d7e4:	81001704 	addi	r4,r16,92
   4d7e8:	000b883a 	mov	r5,zero
   4d7ec:	80000015 	stw	zero,0(r16)
   4d7f0:	80000115 	stw	zero,4(r16)
   4d7f4:	80000215 	stw	zero,8(r16)
   4d7f8:	8080030d 	sth	r2,12(r16)
   4d7fc:	80001915 	stw	zero,100(r16)
   4d800:	8000038d 	sth	zero,14(r16)
   4d804:	80000415 	stw	zero,16(r16)
   4d808:	80000515 	stw	zero,20(r16)
   4d80c:	80000615 	stw	zero,24(r16)
   4d810:	004728c0 	call	4728c <memset>
   4d814:	05800174 	movhi	r22,5
   4d818:	94400217 	ldw	r17,8(r18)
   4d81c:	05400174 	movhi	r21,5
   4d820:	05000174 	movhi	r20,5
   4d824:	04c00174 	movhi	r19,5
   4d828:	b5807704 	addi	r22,r22,476
   4d82c:	ad408e04 	addi	r21,r21,568
   4d830:	a500ad04 	addi	r20,r20,692
   4d834:	9cc0c404 	addi	r19,r19,784
   4d838:	85800815 	stw	r22,32(r16)
   4d83c:	85400915 	stw	r21,36(r16)
   4d840:	85000a15 	stw	r20,40(r16)
   4d844:	84c00b15 	stw	r19,44(r16)
   4d848:	84000715 	stw	r16,28(r16)
   4d84c:	00800284 	movi	r2,10
   4d850:	89001704 	addi	r4,r17,92
   4d854:	b80d883a 	mov	r6,r23
   4d858:	000b883a 	mov	r5,zero
   4d85c:	88000015 	stw	zero,0(r17)
   4d860:	88000115 	stw	zero,4(r17)
   4d864:	88000215 	stw	zero,8(r17)
   4d868:	8880030d 	sth	r2,12(r17)
   4d86c:	88001915 	stw	zero,100(r17)
   4d870:	8f00038d 	sth	fp,14(r17)
   4d874:	88000415 	stw	zero,16(r17)
   4d878:	88000515 	stw	zero,20(r17)
   4d87c:	88000615 	stw	zero,24(r17)
   4d880:	004728c0 	call	4728c <memset>
   4d884:	94000317 	ldw	r16,12(r18)
   4d888:	00800484 	movi	r2,18
   4d88c:	8c400715 	stw	r17,28(r17)
   4d890:	8d800815 	stw	r22,32(r17)
   4d894:	8d400915 	stw	r21,36(r17)
   4d898:	8d000a15 	stw	r20,40(r17)
   4d89c:	8cc00b15 	stw	r19,44(r17)
   4d8a0:	8080030d 	sth	r2,12(r16)
   4d8a4:	00800084 	movi	r2,2
   4d8a8:	80000015 	stw	zero,0(r16)
   4d8ac:	80000115 	stw	zero,4(r16)
   4d8b0:	80000215 	stw	zero,8(r16)
   4d8b4:	80001915 	stw	zero,100(r16)
   4d8b8:	8080038d 	sth	r2,14(r16)
   4d8bc:	80000415 	stw	zero,16(r16)
   4d8c0:	80000515 	stw	zero,20(r16)
   4d8c4:	80000615 	stw	zero,24(r16)
   4d8c8:	81001704 	addi	r4,r16,92
   4d8cc:	000b883a 	mov	r5,zero
   4d8d0:	b80d883a 	mov	r6,r23
   4d8d4:	004728c0 	call	4728c <memset>
   4d8d8:	84000715 	stw	r16,28(r16)
   4d8dc:	85800815 	stw	r22,32(r16)
   4d8e0:	85400915 	stw	r21,36(r16)
   4d8e4:	85000a15 	stw	r20,40(r16)
   4d8e8:	84c00b15 	stw	r19,44(r16)
   4d8ec:	dfc00917 	ldw	ra,36(sp)
   4d8f0:	df000817 	ldw	fp,32(sp)
   4d8f4:	ddc00717 	ldw	r23,28(sp)
   4d8f8:	dd800617 	ldw	r22,24(sp)
   4d8fc:	dd400517 	ldw	r21,20(sp)
   4d900:	dd000417 	ldw	r20,16(sp)
   4d904:	dcc00317 	ldw	r19,12(sp)
   4d908:	dc800217 	ldw	r18,8(sp)
   4d90c:	dc400117 	ldw	r17,4(sp)
   4d910:	dc000017 	ldw	r16,0(sp)
   4d914:	dec00a04 	addi	sp,sp,40
   4d918:	f800283a 	ret

0004d91c <__sfmoreglue>:
   4d91c:	defffc04 	addi	sp,sp,-16
   4d920:	dc800215 	stw	r18,8(sp)
   4d924:	2825883a 	mov	r18,r5
   4d928:	dc000015 	stw	r16,0(sp)
   4d92c:	01401a04 	movi	r5,104
   4d930:	2021883a 	mov	r16,r4
   4d934:	9009883a 	mov	r4,r18
   4d938:	dfc00315 	stw	ra,12(sp)
   4d93c:	dc400115 	stw	r17,4(sp)
   4d940:	00453200 	call	45320 <__mulsi3>
   4d944:	8009883a 	mov	r4,r16
   4d948:	11400304 	addi	r5,r2,12
   4d94c:	1023883a 	mov	r17,r2
   4d950:	00469ac0 	call	469ac <_malloc_r>
   4d954:	1021883a 	mov	r16,r2
   4d958:	10000726 	beq	r2,zero,4d978 <__sfmoreglue+0x5c>
   4d95c:	11000304 	addi	r4,r2,12
   4d960:	10000015 	stw	zero,0(r2)
   4d964:	14800115 	stw	r18,4(r2)
   4d968:	11000215 	stw	r4,8(r2)
   4d96c:	000b883a 	mov	r5,zero
   4d970:	880d883a 	mov	r6,r17
   4d974:	004728c0 	call	4728c <memset>
   4d978:	8005883a 	mov	r2,r16
   4d97c:	dfc00317 	ldw	ra,12(sp)
   4d980:	dc800217 	ldw	r18,8(sp)
   4d984:	dc400117 	ldw	r17,4(sp)
   4d988:	dc000017 	ldw	r16,0(sp)
   4d98c:	dec00404 	addi	sp,sp,16
   4d990:	f800283a 	ret

0004d994 <__sfp>:
   4d994:	008001b4 	movhi	r2,6
   4d998:	defffb04 	addi	sp,sp,-20
   4d99c:	10abc604 	addi	r2,r2,-20712
   4d9a0:	dc800215 	stw	r18,8(sp)
   4d9a4:	14800017 	ldw	r18,0(r2)
   4d9a8:	dcc00315 	stw	r19,12(sp)
   4d9ac:	dfc00415 	stw	ra,16(sp)
   4d9b0:	90800e17 	ldw	r2,56(r18)
   4d9b4:	dc400115 	stw	r17,4(sp)
   4d9b8:	dc000015 	stw	r16,0(sp)
   4d9bc:	2027883a 	mov	r19,r4
   4d9c0:	1000021e 	bne	r2,zero,4d9cc <__sfp+0x38>
   4d9c4:	9009883a 	mov	r4,r18
   4d9c8:	004d77c0 	call	4d77c <__sinit.part.1>
   4d9cc:	9480b804 	addi	r18,r18,736
   4d9d0:	047fffc4 	movi	r17,-1
   4d9d4:	91400117 	ldw	r5,4(r18)
   4d9d8:	94000217 	ldw	r16,8(r18)
   4d9dc:	297fffc4 	addi	r5,r5,-1
   4d9e0:	28000a16 	blt	r5,zero,4da0c <__sfp+0x78>
   4d9e4:	8080030f 	ldh	r2,12(r16)
   4d9e8:	10000c26 	beq	r2,zero,4da1c <__sfp+0x88>
   4d9ec:	80c01d04 	addi	r3,r16,116
   4d9f0:	00000206 	br	4d9fc <__sfp+0x68>
   4d9f4:	18bfe60f 	ldh	r2,-104(r3)
   4d9f8:	10000826 	beq	r2,zero,4da1c <__sfp+0x88>
   4d9fc:	297fffc4 	addi	r5,r5,-1
   4da00:	1c3ffd04 	addi	r16,r3,-12
   4da04:	18c01a04 	addi	r3,r3,104
   4da08:	2c7ffa1e 	bne	r5,r17,4d9f4 <__alt_data_end+0xfffe9004>
   4da0c:	90800017 	ldw	r2,0(r18)
   4da10:	10001d26 	beq	r2,zero,4da88 <__sfp+0xf4>
   4da14:	1025883a 	mov	r18,r2
   4da18:	003fee06 	br	4d9d4 <__alt_data_end+0xfffe8fe4>
   4da1c:	00bfffc4 	movi	r2,-1
   4da20:	8080038d 	sth	r2,14(r16)
   4da24:	00800044 	movi	r2,1
   4da28:	8080030d 	sth	r2,12(r16)
   4da2c:	80001915 	stw	zero,100(r16)
   4da30:	80000015 	stw	zero,0(r16)
   4da34:	80000215 	stw	zero,8(r16)
   4da38:	80000115 	stw	zero,4(r16)
   4da3c:	80000415 	stw	zero,16(r16)
   4da40:	80000515 	stw	zero,20(r16)
   4da44:	80000615 	stw	zero,24(r16)
   4da48:	81001704 	addi	r4,r16,92
   4da4c:	000b883a 	mov	r5,zero
   4da50:	01800204 	movi	r6,8
   4da54:	004728c0 	call	4728c <memset>
   4da58:	8005883a 	mov	r2,r16
   4da5c:	80000c15 	stw	zero,48(r16)
   4da60:	80000d15 	stw	zero,52(r16)
   4da64:	80001115 	stw	zero,68(r16)
   4da68:	80001215 	stw	zero,72(r16)
   4da6c:	dfc00417 	ldw	ra,16(sp)
   4da70:	dcc00317 	ldw	r19,12(sp)
   4da74:	dc800217 	ldw	r18,8(sp)
   4da78:	dc400117 	ldw	r17,4(sp)
   4da7c:	dc000017 	ldw	r16,0(sp)
   4da80:	dec00504 	addi	sp,sp,20
   4da84:	f800283a 	ret
   4da88:	9809883a 	mov	r4,r19
   4da8c:	01400104 	movi	r5,4
   4da90:	004d91c0 	call	4d91c <__sfmoreglue>
   4da94:	90800015 	stw	r2,0(r18)
   4da98:	103fde1e 	bne	r2,zero,4da14 <__alt_data_end+0xfffe9024>
   4da9c:	00800304 	movi	r2,12
   4daa0:	98800015 	stw	r2,0(r19)
   4daa4:	0005883a 	mov	r2,zero
   4daa8:	003ff006 	br	4da6c <__alt_data_end+0xfffe907c>

0004daac <_cleanup>:
   4daac:	008001b4 	movhi	r2,6
   4dab0:	10abc604 	addi	r2,r2,-20712
   4dab4:	11000017 	ldw	r4,0(r2)
   4dab8:	01400174 	movhi	r5,5
   4dabc:	294c0104 	addi	r5,r5,12292
   4dac0:	004e3cc1 	jmpi	4e3cc <_fwalk>

0004dac4 <__sinit>:
   4dac4:	20800e17 	ldw	r2,56(r4)
   4dac8:	10000126 	beq	r2,zero,4dad0 <__sinit+0xc>
   4dacc:	f800283a 	ret
   4dad0:	004d77c1 	jmpi	4d77c <__sinit.part.1>

0004dad4 <__sfp_lock_acquire>:
   4dad4:	f800283a 	ret

0004dad8 <__sfp_lock_release>:
   4dad8:	f800283a 	ret

0004dadc <__sinit_lock_acquire>:
   4dadc:	f800283a 	ret

0004dae0 <__sinit_lock_release>:
   4dae0:	f800283a 	ret

0004dae4 <__fp_lock_all>:
   4dae4:	008001b4 	movhi	r2,6
   4dae8:	10abc704 	addi	r2,r2,-20708
   4daec:	11000017 	ldw	r4,0(r2)
   4daf0:	01400174 	movhi	r5,5
   4daf4:	2975d804 	addi	r5,r5,-10400
   4daf8:	004e3cc1 	jmpi	4e3cc <_fwalk>

0004dafc <__fp_unlock_all>:
   4dafc:	008001b4 	movhi	r2,6
   4db00:	10abc704 	addi	r2,r2,-20708
   4db04:	11000017 	ldw	r4,0(r2)
   4db08:	01400174 	movhi	r5,5
   4db0c:	2975da04 	addi	r5,r5,-10392
   4db10:	004e3cc1 	jmpi	4e3cc <_fwalk>

0004db14 <_malloc_trim_r>:
   4db14:	defffb04 	addi	sp,sp,-20
   4db18:	dcc00315 	stw	r19,12(sp)
   4db1c:	04c001b4 	movhi	r19,6
   4db20:	dc800215 	stw	r18,8(sp)
   4db24:	dc400115 	stw	r17,4(sp)
   4db28:	dc000015 	stw	r16,0(sp)
   4db2c:	dfc00415 	stw	ra,16(sp)
   4db30:	2821883a 	mov	r16,r5
   4db34:	9ce51804 	addi	r19,r19,-27552
   4db38:	2025883a 	mov	r18,r4
   4db3c:	00565ac0 	call	565ac <__malloc_lock>
   4db40:	98800217 	ldw	r2,8(r19)
   4db44:	14400117 	ldw	r17,4(r2)
   4db48:	00bfff04 	movi	r2,-4
   4db4c:	88a2703a 	and	r17,r17,r2
   4db50:	8c21c83a 	sub	r16,r17,r16
   4db54:	8403fbc4 	addi	r16,r16,4079
   4db58:	8020d33a 	srli	r16,r16,12
   4db5c:	0083ffc4 	movi	r2,4095
   4db60:	843fffc4 	addi	r16,r16,-1
   4db64:	8020933a 	slli	r16,r16,12
   4db68:	1400060e 	bge	r2,r16,4db84 <_malloc_trim_r+0x70>
   4db6c:	9009883a 	mov	r4,r18
   4db70:	000b883a 	mov	r5,zero
   4db74:	00475040 	call	47504 <_sbrk_r>
   4db78:	98c00217 	ldw	r3,8(r19)
   4db7c:	1c47883a 	add	r3,r3,r17
   4db80:	10c00a26 	beq	r2,r3,4dbac <_malloc_trim_r+0x98>
   4db84:	9009883a 	mov	r4,r18
   4db88:	00565cc0 	call	565cc <__malloc_unlock>
   4db8c:	0005883a 	mov	r2,zero
   4db90:	dfc00417 	ldw	ra,16(sp)
   4db94:	dcc00317 	ldw	r19,12(sp)
   4db98:	dc800217 	ldw	r18,8(sp)
   4db9c:	dc400117 	ldw	r17,4(sp)
   4dba0:	dc000017 	ldw	r16,0(sp)
   4dba4:	dec00504 	addi	sp,sp,20
   4dba8:	f800283a 	ret
   4dbac:	9009883a 	mov	r4,r18
   4dbb0:	040bc83a 	sub	r5,zero,r16
   4dbb4:	00475040 	call	47504 <_sbrk_r>
   4dbb8:	00ffffc4 	movi	r3,-1
   4dbbc:	10c00d26 	beq	r2,r3,4dbf4 <_malloc_trim_r+0xe0>
   4dbc0:	00c001b4 	movhi	r3,6
   4dbc4:	18f2ac04 	addi	r3,r3,-13648
   4dbc8:	18800017 	ldw	r2,0(r3)
   4dbcc:	99000217 	ldw	r4,8(r19)
   4dbd0:	8c23c83a 	sub	r17,r17,r16
   4dbd4:	8c400054 	ori	r17,r17,1
   4dbd8:	1421c83a 	sub	r16,r2,r16
   4dbdc:	24400115 	stw	r17,4(r4)
   4dbe0:	9009883a 	mov	r4,r18
   4dbe4:	1c000015 	stw	r16,0(r3)
   4dbe8:	00565cc0 	call	565cc <__malloc_unlock>
   4dbec:	00800044 	movi	r2,1
   4dbf0:	003fe706 	br	4db90 <__alt_data_end+0xfffe91a0>
   4dbf4:	9009883a 	mov	r4,r18
   4dbf8:	000b883a 	mov	r5,zero
   4dbfc:	00475040 	call	47504 <_sbrk_r>
   4dc00:	99000217 	ldw	r4,8(r19)
   4dc04:	014003c4 	movi	r5,15
   4dc08:	1107c83a 	sub	r3,r2,r4
   4dc0c:	28ffdd0e 	bge	r5,r3,4db84 <__alt_data_end+0xfffe9194>
   4dc10:	014001b4 	movhi	r5,6
   4dc14:	296bc304 	addi	r5,r5,-20724
   4dc18:	29400017 	ldw	r5,0(r5)
   4dc1c:	18c00054 	ori	r3,r3,1
   4dc20:	20c00115 	stw	r3,4(r4)
   4dc24:	00c001b4 	movhi	r3,6
   4dc28:	1145c83a 	sub	r2,r2,r5
   4dc2c:	18f2ac04 	addi	r3,r3,-13648
   4dc30:	18800015 	stw	r2,0(r3)
   4dc34:	003fd306 	br	4db84 <__alt_data_end+0xfffe9194>

0004dc38 <_free_r>:
   4dc38:	28004c26 	beq	r5,zero,4dd6c <_free_r+0x134>
   4dc3c:	defffd04 	addi	sp,sp,-12
   4dc40:	dc400115 	stw	r17,4(sp)
   4dc44:	dc000015 	stw	r16,0(sp)
   4dc48:	2023883a 	mov	r17,r4
   4dc4c:	2821883a 	mov	r16,r5
   4dc50:	dfc00215 	stw	ra,8(sp)
   4dc54:	00565ac0 	call	565ac <__malloc_lock>
   4dc58:	813fff17 	ldw	r4,-4(r16)
   4dc5c:	00bfff84 	movi	r2,-2
   4dc60:	024001b4 	movhi	r9,6
   4dc64:	81bffe04 	addi	r6,r16,-8
   4dc68:	2084703a 	and	r2,r4,r2
   4dc6c:	4a651804 	addi	r9,r9,-27552
   4dc70:	308b883a 	add	r5,r6,r2
   4dc74:	2a000117 	ldw	r8,4(r5)
   4dc78:	49c00217 	ldw	r7,8(r9)
   4dc7c:	00ffff04 	movi	r3,-4
   4dc80:	40c6703a 	and	r3,r8,r3
   4dc84:	39405326 	beq	r7,r5,4ddd4 <_free_r+0x19c>
   4dc88:	28c00115 	stw	r3,4(r5)
   4dc8c:	2100004c 	andi	r4,r4,1
   4dc90:	2000091e 	bne	r4,zero,4dcb8 <_free_r+0x80>
   4dc94:	81fffe17 	ldw	r7,-8(r16)
   4dc98:	4a000204 	addi	r8,r9,8
   4dc9c:	31cdc83a 	sub	r6,r6,r7
   4dca0:	31000217 	ldw	r4,8(r6)
   4dca4:	11c5883a 	add	r2,r2,r7
   4dca8:	22006126 	beq	r4,r8,4de30 <_free_r+0x1f8>
   4dcac:	31c00317 	ldw	r7,12(r6)
   4dcb0:	21c00315 	stw	r7,12(r4)
   4dcb4:	39000215 	stw	r4,8(r7)
   4dcb8:	28c9883a 	add	r4,r5,r3
   4dcbc:	21c00117 	ldw	r7,4(r4)
   4dcc0:	39c0004c 	andi	r7,r7,1
   4dcc4:	38000d1e 	bne	r7,zero,4dcfc <_free_r+0xc4>
   4dcc8:	29000217 	ldw	r4,8(r5)
   4dccc:	10c5883a 	add	r2,r2,r3
   4dcd0:	00c001b4 	movhi	r3,6
   4dcd4:	18e51a04 	addi	r3,r3,-27544
   4dcd8:	20c07526 	beq	r4,r3,4deb0 <_free_r+0x278>
   4dcdc:	29c00317 	ldw	r7,12(r5)
   4dce0:	11400054 	ori	r5,r2,1
   4dce4:	3087883a 	add	r3,r6,r2
   4dce8:	21c00315 	stw	r7,12(r4)
   4dcec:	39000215 	stw	r4,8(r7)
   4dcf0:	31400115 	stw	r5,4(r6)
   4dcf4:	18800015 	stw	r2,0(r3)
   4dcf8:	00000406 	br	4dd0c <_free_r+0xd4>
   4dcfc:	10c00054 	ori	r3,r2,1
   4dd00:	30c00115 	stw	r3,4(r6)
   4dd04:	3087883a 	add	r3,r6,r2
   4dd08:	18800015 	stw	r2,0(r3)
   4dd0c:	00c07fc4 	movi	r3,511
   4dd10:	18801736 	bltu	r3,r2,4dd70 <_free_r+0x138>
   4dd14:	1004d0fa 	srli	r2,r2,3
   4dd18:	01400044 	movi	r5,1
   4dd1c:	49000117 	ldw	r4,4(r9)
   4dd20:	1087883a 	add	r3,r2,r2
   4dd24:	18c7883a 	add	r3,r3,r3
   4dd28:	1005d0ba 	srai	r2,r2,2
   4dd2c:	18c7883a 	add	r3,r3,r3
   4dd30:	1a47883a 	add	r3,r3,r9
   4dd34:	19c00217 	ldw	r7,8(r3)
   4dd38:	2884983a 	sll	r2,r5,r2
   4dd3c:	30c00315 	stw	r3,12(r6)
   4dd40:	31c00215 	stw	r7,8(r6)
   4dd44:	1104b03a 	or	r2,r2,r4
   4dd48:	19800215 	stw	r6,8(r3)
   4dd4c:	48800115 	stw	r2,4(r9)
   4dd50:	39800315 	stw	r6,12(r7)
   4dd54:	8809883a 	mov	r4,r17
   4dd58:	dfc00217 	ldw	ra,8(sp)
   4dd5c:	dc400117 	ldw	r17,4(sp)
   4dd60:	dc000017 	ldw	r16,0(sp)
   4dd64:	dec00304 	addi	sp,sp,12
   4dd68:	00565cc1 	jmpi	565cc <__malloc_unlock>
   4dd6c:	f800283a 	ret
   4dd70:	1006d27a 	srli	r3,r2,9
   4dd74:	01000104 	movi	r4,4
   4dd78:	20c04036 	bltu	r4,r3,4de7c <_free_r+0x244>
   4dd7c:	1006d1ba 	srli	r3,r2,6
   4dd80:	19400e04 	addi	r5,r3,56
   4dd84:	2947883a 	add	r3,r5,r5
   4dd88:	18c7883a 	add	r3,r3,r3
   4dd8c:	18c7883a 	add	r3,r3,r3
   4dd90:	1a49883a 	add	r4,r3,r9
   4dd94:	20c00217 	ldw	r3,8(r4)
   4dd98:	01c001b4 	movhi	r7,6
   4dd9c:	39e51804 	addi	r7,r7,-27552
   4dda0:	19003b26 	beq	r3,r4,4de90 <_free_r+0x258>
   4dda4:	01ffff04 	movi	r7,-4
   4dda8:	19400117 	ldw	r5,4(r3)
   4ddac:	29ca703a 	and	r5,r5,r7
   4ddb0:	1140022e 	bgeu	r2,r5,4ddbc <_free_r+0x184>
   4ddb4:	18c00217 	ldw	r3,8(r3)
   4ddb8:	20fffb1e 	bne	r4,r3,4dda8 <__alt_data_end+0xfffe93b8>
   4ddbc:	18800317 	ldw	r2,12(r3)
   4ddc0:	30800315 	stw	r2,12(r6)
   4ddc4:	30c00215 	stw	r3,8(r6)
   4ddc8:	11800215 	stw	r6,8(r2)
   4ddcc:	19800315 	stw	r6,12(r3)
   4ddd0:	003fe006 	br	4dd54 <__alt_data_end+0xfffe9364>
   4ddd4:	2100004c 	andi	r4,r4,1
   4ddd8:	1885883a 	add	r2,r3,r2
   4dddc:	2000071e 	bne	r4,zero,4ddfc <_free_r+0x1c4>
   4dde0:	817ffe17 	ldw	r5,-8(r16)
   4dde4:	314dc83a 	sub	r6,r6,r5
   4dde8:	30c00317 	ldw	r3,12(r6)
   4ddec:	31000217 	ldw	r4,8(r6)
   4ddf0:	1145883a 	add	r2,r2,r5
   4ddf4:	20c00315 	stw	r3,12(r4)
   4ddf8:	19000215 	stw	r4,8(r3)
   4ddfc:	10c00054 	ori	r3,r2,1
   4de00:	30c00115 	stw	r3,4(r6)
   4de04:	00c001b4 	movhi	r3,6
   4de08:	18ebc404 	addi	r3,r3,-20720
   4de0c:	18c00017 	ldw	r3,0(r3)
   4de10:	49800215 	stw	r6,8(r9)
   4de14:	10ffcf36 	bltu	r2,r3,4dd54 <__alt_data_end+0xfffe9364>
   4de18:	008001b4 	movhi	r2,6
   4de1c:	10b29204 	addi	r2,r2,-13752
   4de20:	11400017 	ldw	r5,0(r2)
   4de24:	8809883a 	mov	r4,r17
   4de28:	004db140 	call	4db14 <_malloc_trim_r>
   4de2c:	003fc906 	br	4dd54 <__alt_data_end+0xfffe9364>
   4de30:	28c9883a 	add	r4,r5,r3
   4de34:	21000117 	ldw	r4,4(r4)
   4de38:	2100004c 	andi	r4,r4,1
   4de3c:	20000a1e 	bne	r4,zero,4de68 <_free_r+0x230>
   4de40:	29000317 	ldw	r4,12(r5)
   4de44:	29400217 	ldw	r5,8(r5)
   4de48:	10c5883a 	add	r2,r2,r3
   4de4c:	10c00054 	ori	r3,r2,1
   4de50:	29000315 	stw	r4,12(r5)
   4de54:	21400215 	stw	r5,8(r4)
   4de58:	30c00115 	stw	r3,4(r6)
   4de5c:	308d883a 	add	r6,r6,r2
   4de60:	30800015 	stw	r2,0(r6)
   4de64:	003fbb06 	br	4dd54 <__alt_data_end+0xfffe9364>
   4de68:	10c00054 	ori	r3,r2,1
   4de6c:	30c00115 	stw	r3,4(r6)
   4de70:	308d883a 	add	r6,r6,r2
   4de74:	30800015 	stw	r2,0(r6)
   4de78:	003fb606 	br	4dd54 <__alt_data_end+0xfffe9364>
   4de7c:	01000504 	movi	r4,20
   4de80:	20c01436 	bltu	r4,r3,4ded4 <_free_r+0x29c>
   4de84:	194016c4 	addi	r5,r3,91
   4de88:	2947883a 	add	r3,r5,r5
   4de8c:	003fbe06 	br	4dd88 <__alt_data_end+0xfffe9398>
   4de90:	280bd0ba 	srai	r5,r5,2
   4de94:	00800044 	movi	r2,1
   4de98:	39000117 	ldw	r4,4(r7)
   4de9c:	114a983a 	sll	r5,r2,r5
   4dea0:	1805883a 	mov	r2,r3
   4dea4:	2908b03a 	or	r4,r5,r4
   4dea8:	39000115 	stw	r4,4(r7)
   4deac:	003fc406 	br	4ddc0 <__alt_data_end+0xfffe93d0>
   4deb0:	49800515 	stw	r6,20(r9)
   4deb4:	49800415 	stw	r6,16(r9)
   4deb8:	10c00054 	ori	r3,r2,1
   4debc:	31000315 	stw	r4,12(r6)
   4dec0:	31000215 	stw	r4,8(r6)
   4dec4:	30c00115 	stw	r3,4(r6)
   4dec8:	308d883a 	add	r6,r6,r2
   4decc:	30800015 	stw	r2,0(r6)
   4ded0:	003fa006 	br	4dd54 <__alt_data_end+0xfffe9364>
   4ded4:	01001504 	movi	r4,84
   4ded8:	20c00436 	bltu	r4,r3,4deec <_free_r+0x2b4>
   4dedc:	1006d33a 	srli	r3,r2,12
   4dee0:	19401b84 	addi	r5,r3,110
   4dee4:	2947883a 	add	r3,r5,r5
   4dee8:	003fa706 	br	4dd88 <__alt_data_end+0xfffe9398>
   4deec:	01005504 	movi	r4,340
   4def0:	20c00436 	bltu	r4,r3,4df04 <_free_r+0x2cc>
   4def4:	1006d3fa 	srli	r3,r2,15
   4def8:	19401dc4 	addi	r5,r3,119
   4defc:	2947883a 	add	r3,r5,r5
   4df00:	003fa106 	br	4dd88 <__alt_data_end+0xfffe9398>
   4df04:	01015504 	movi	r4,1364
   4df08:	20c00436 	bltu	r4,r3,4df1c <_free_r+0x2e4>
   4df0c:	1006d4ba 	srli	r3,r2,18
   4df10:	19401f04 	addi	r5,r3,124
   4df14:	2947883a 	add	r3,r5,r5
   4df18:	003f9b06 	br	4dd88 <__alt_data_end+0xfffe9398>
   4df1c:	00c03f04 	movi	r3,252
   4df20:	01401f84 	movi	r5,126
   4df24:	003f9806 	br	4dd88 <__alt_data_end+0xfffe9398>

0004df28 <__sfvwrite_r>:
   4df28:	30800217 	ldw	r2,8(r6)
   4df2c:	10004526 	beq	r2,zero,4e044 <__sfvwrite_r+0x11c>
   4df30:	28c0030b 	ldhu	r3,12(r5)
   4df34:	defff404 	addi	sp,sp,-48
   4df38:	dd400715 	stw	r21,28(sp)
   4df3c:	dcc00515 	stw	r19,20(sp)
   4df40:	dc000215 	stw	r16,8(sp)
   4df44:	dfc00b15 	stw	ra,44(sp)
   4df48:	df000a15 	stw	fp,40(sp)
   4df4c:	ddc00915 	stw	r23,36(sp)
   4df50:	dd800815 	stw	r22,32(sp)
   4df54:	dd000615 	stw	r20,24(sp)
   4df58:	dc800415 	stw	r18,16(sp)
   4df5c:	dc400315 	stw	r17,12(sp)
   4df60:	1880020c 	andi	r2,r3,8
   4df64:	2821883a 	mov	r16,r5
   4df68:	202b883a 	mov	r21,r4
   4df6c:	3027883a 	mov	r19,r6
   4df70:	10002526 	beq	r2,zero,4e008 <__sfvwrite_r+0xe0>
   4df74:	28800417 	ldw	r2,16(r5)
   4df78:	10002326 	beq	r2,zero,4e008 <__sfvwrite_r+0xe0>
   4df7c:	1880008c 	andi	r2,r3,2
   4df80:	9c400017 	ldw	r17,0(r19)
   4df84:	10003126 	beq	r2,zero,4e04c <__sfvwrite_r+0x124>
   4df88:	0029883a 	mov	r20,zero
   4df8c:	0025883a 	mov	r18,zero
   4df90:	05810004 	movi	r22,1024
   4df94:	a00d883a 	mov	r6,r20
   4df98:	a809883a 	mov	r4,r21
   4df9c:	90002526 	beq	r18,zero,4e034 <__sfvwrite_r+0x10c>
   4dfa0:	900f883a 	mov	r7,r18
   4dfa4:	81400717 	ldw	r5,28(r16)
   4dfa8:	b480012e 	bgeu	r22,r18,4dfb0 <__sfvwrite_r+0x88>
   4dfac:	01c10004 	movi	r7,1024
   4dfb0:	80800917 	ldw	r2,36(r16)
   4dfb4:	103ee83a 	callr	r2
   4dfb8:	0080510e 	bge	zero,r2,4e100 <__sfvwrite_r+0x1d8>
   4dfbc:	98c00217 	ldw	r3,8(r19)
   4dfc0:	a0a9883a 	add	r20,r20,r2
   4dfc4:	90a5c83a 	sub	r18,r18,r2
   4dfc8:	1885c83a 	sub	r2,r3,r2
   4dfcc:	98800215 	stw	r2,8(r19)
   4dfd0:	103ff01e 	bne	r2,zero,4df94 <__alt_data_end+0xfffe95a4>
   4dfd4:	0005883a 	mov	r2,zero
   4dfd8:	dfc00b17 	ldw	ra,44(sp)
   4dfdc:	df000a17 	ldw	fp,40(sp)
   4dfe0:	ddc00917 	ldw	r23,36(sp)
   4dfe4:	dd800817 	ldw	r22,32(sp)
   4dfe8:	dd400717 	ldw	r21,28(sp)
   4dfec:	dd000617 	ldw	r20,24(sp)
   4dff0:	dcc00517 	ldw	r19,20(sp)
   4dff4:	dc800417 	ldw	r18,16(sp)
   4dff8:	dc400317 	ldw	r17,12(sp)
   4dffc:	dc000217 	ldw	r16,8(sp)
   4e000:	dec00c04 	addi	sp,sp,48
   4e004:	f800283a 	ret
   4e008:	a809883a 	mov	r4,r21
   4e00c:	800b883a 	mov	r5,r16
   4e010:	004ba880 	call	4ba88 <__swsetup_r>
   4e014:	80c0030b 	ldhu	r3,12(r16)
   4e018:	103fd826 	beq	r2,zero,4df7c <__alt_data_end+0xfffe958c>
   4e01c:	18c01014 	ori	r3,r3,64
   4e020:	80c0030d 	sth	r3,12(r16)
   4e024:	00c00244 	movi	r3,9
   4e028:	00bfffc4 	movi	r2,-1
   4e02c:	a8c00015 	stw	r3,0(r21)
   4e030:	003fe906 	br	4dfd8 <__alt_data_end+0xfffe95e8>
   4e034:	8d000017 	ldw	r20,0(r17)
   4e038:	8c800117 	ldw	r18,4(r17)
   4e03c:	8c400204 	addi	r17,r17,8
   4e040:	003fd406 	br	4df94 <__alt_data_end+0xfffe95a4>
   4e044:	0005883a 	mov	r2,zero
   4e048:	f800283a 	ret
   4e04c:	1880004c 	andi	r2,r3,1
   4e050:	1000301e 	bne	r2,zero,4e114 <__sfvwrite_r+0x1ec>
   4e054:	002f883a 	mov	r23,zero
   4e058:	0025883a 	mov	r18,zero
   4e05c:	90001c26 	beq	r18,zero,4e0d0 <__sfvwrite_r+0x1a8>
   4e060:	1880800c 	andi	r2,r3,512
   4e064:	85000217 	ldw	r20,8(r16)
   4e068:	10006c26 	beq	r2,zero,4e21c <__sfvwrite_r+0x2f4>
   4e06c:	a02d883a 	mov	r22,r20
   4e070:	95008536 	bltu	r18,r20,4e288 <__sfvwrite_r+0x360>
   4e074:	1881200c 	andi	r2,r3,1152
   4e078:	10009d1e 	bne	r2,zero,4e2f0 <__sfvwrite_r+0x3c8>
   4e07c:	81000017 	ldw	r4,0(r16)
   4e080:	a039883a 	mov	fp,r20
   4e084:	9029883a 	mov	r20,r18
   4e088:	b80b883a 	mov	r5,r23
   4e08c:	b00d883a 	mov	r6,r22
   4e090:	004e8bc0 	call	4e8bc <memmove>
   4e094:	80c00217 	ldw	r3,8(r16)
   4e098:	81000017 	ldw	r4,0(r16)
   4e09c:	9005883a 	mov	r2,r18
   4e0a0:	1f39c83a 	sub	fp,r3,fp
   4e0a4:	258f883a 	add	r7,r4,r22
   4e0a8:	87000215 	stw	fp,8(r16)
   4e0ac:	81c00015 	stw	r7,0(r16)
   4e0b0:	98c00217 	ldw	r3,8(r19)
   4e0b4:	b8af883a 	add	r23,r23,r2
   4e0b8:	90a5c83a 	sub	r18,r18,r2
   4e0bc:	1d05c83a 	sub	r2,r3,r20
   4e0c0:	98800215 	stw	r2,8(r19)
   4e0c4:	103fc326 	beq	r2,zero,4dfd4 <__alt_data_end+0xfffe95e4>
   4e0c8:	80c0030b 	ldhu	r3,12(r16)
   4e0cc:	903fe41e 	bne	r18,zero,4e060 <__alt_data_end+0xfffe9670>
   4e0d0:	8dc00017 	ldw	r23,0(r17)
   4e0d4:	8c800117 	ldw	r18,4(r17)
   4e0d8:	8c400204 	addi	r17,r17,8
   4e0dc:	003fdf06 	br	4e05c <__alt_data_end+0xfffe966c>
   4e0e0:	004fbc80 	call	4fbc8 <_realloc_r>
   4e0e4:	102d883a 	mov	r22,r2
   4e0e8:	1000a01e 	bne	r2,zero,4e36c <__sfvwrite_r+0x444>
   4e0ec:	81400417 	ldw	r5,16(r16)
   4e0f0:	a809883a 	mov	r4,r21
   4e0f4:	004dc380 	call	4dc38 <_free_r>
   4e0f8:	00800304 	movi	r2,12
   4e0fc:	a8800015 	stw	r2,0(r21)
   4e100:	80c0030b 	ldhu	r3,12(r16)
   4e104:	00bfffc4 	movi	r2,-1
   4e108:	18c01014 	ori	r3,r3,64
   4e10c:	80c0030d 	sth	r3,12(r16)
   4e110:	003fb106 	br	4dfd8 <__alt_data_end+0xfffe95e8>
   4e114:	0029883a 	mov	r20,zero
   4e118:	0011883a 	mov	r8,zero
   4e11c:	0039883a 	mov	fp,zero
   4e120:	0025883a 	mov	r18,zero
   4e124:	90001f26 	beq	r18,zero,4e1a4 <__sfvwrite_r+0x27c>
   4e128:	40006826 	beq	r8,zero,4e2cc <__sfvwrite_r+0x3a4>
   4e12c:	a02f883a 	mov	r23,r20
   4e130:	9500012e 	bgeu	r18,r20,4e138 <__sfvwrite_r+0x210>
   4e134:	902f883a 	mov	r23,r18
   4e138:	81000017 	ldw	r4,0(r16)
   4e13c:	80800417 	ldw	r2,16(r16)
   4e140:	b82d883a 	mov	r22,r23
   4e144:	81800217 	ldw	r6,8(r16)
   4e148:	81c00517 	ldw	r7,20(r16)
   4e14c:	1100022e 	bgeu	r2,r4,4e158 <__sfvwrite_r+0x230>
   4e150:	31c7883a 	add	r3,r6,r7
   4e154:	1dc01816 	blt	r3,r23,4e1b8 <__sfvwrite_r+0x290>
   4e158:	b9c03f16 	blt	r23,r7,4e258 <__sfvwrite_r+0x330>
   4e15c:	80800917 	ldw	r2,36(r16)
   4e160:	81400717 	ldw	r5,28(r16)
   4e164:	a809883a 	mov	r4,r21
   4e168:	da000115 	stw	r8,4(sp)
   4e16c:	e00d883a 	mov	r6,fp
   4e170:	103ee83a 	callr	r2
   4e174:	102d883a 	mov	r22,r2
   4e178:	da000117 	ldw	r8,4(sp)
   4e17c:	00bfe00e 	bge	zero,r2,4e100 <__alt_data_end+0xfffe9710>
   4e180:	a5a9c83a 	sub	r20,r20,r22
   4e184:	a0001f26 	beq	r20,zero,4e204 <__sfvwrite_r+0x2dc>
   4e188:	98800217 	ldw	r2,8(r19)
   4e18c:	e5b9883a 	add	fp,fp,r22
   4e190:	95a5c83a 	sub	r18,r18,r22
   4e194:	15adc83a 	sub	r22,r2,r22
   4e198:	9d800215 	stw	r22,8(r19)
   4e19c:	b03f8d26 	beq	r22,zero,4dfd4 <__alt_data_end+0xfffe95e4>
   4e1a0:	903fe11e 	bne	r18,zero,4e128 <__alt_data_end+0xfffe9738>
   4e1a4:	8f000017 	ldw	fp,0(r17)
   4e1a8:	8c800117 	ldw	r18,4(r17)
   4e1ac:	0011883a 	mov	r8,zero
   4e1b0:	8c400204 	addi	r17,r17,8
   4e1b4:	003fdb06 	br	4e124 <__alt_data_end+0xfffe9734>
   4e1b8:	180d883a 	mov	r6,r3
   4e1bc:	e00b883a 	mov	r5,fp
   4e1c0:	da000115 	stw	r8,4(sp)
   4e1c4:	d8c00015 	stw	r3,0(sp)
   4e1c8:	004e8bc0 	call	4e8bc <memmove>
   4e1cc:	d8c00017 	ldw	r3,0(sp)
   4e1d0:	80800017 	ldw	r2,0(r16)
   4e1d4:	a809883a 	mov	r4,r21
   4e1d8:	800b883a 	mov	r5,r16
   4e1dc:	10c5883a 	add	r2,r2,r3
   4e1e0:	80800015 	stw	r2,0(r16)
   4e1e4:	d8c00015 	stw	r3,0(sp)
   4e1e8:	004d5080 	call	4d508 <_fflush_r>
   4e1ec:	d8c00017 	ldw	r3,0(sp)
   4e1f0:	da000117 	ldw	r8,4(sp)
   4e1f4:	103fc21e 	bne	r2,zero,4e100 <__alt_data_end+0xfffe9710>
   4e1f8:	182d883a 	mov	r22,r3
   4e1fc:	a5a9c83a 	sub	r20,r20,r22
   4e200:	a03fe11e 	bne	r20,zero,4e188 <__alt_data_end+0xfffe9798>
   4e204:	a809883a 	mov	r4,r21
   4e208:	800b883a 	mov	r5,r16
   4e20c:	004d5080 	call	4d508 <_fflush_r>
   4e210:	103fbb1e 	bne	r2,zero,4e100 <__alt_data_end+0xfffe9710>
   4e214:	0011883a 	mov	r8,zero
   4e218:	003fdb06 	br	4e188 <__alt_data_end+0xfffe9798>
   4e21c:	81000017 	ldw	r4,0(r16)
   4e220:	80800417 	ldw	r2,16(r16)
   4e224:	1100012e 	bgeu	r2,r4,4e22c <__sfvwrite_r+0x304>
   4e228:	a4805a36 	bltu	r20,r18,4e394 <__sfvwrite_r+0x46c>
   4e22c:	81c00517 	ldw	r7,20(r16)
   4e230:	91c01a36 	bltu	r18,r7,4e29c <__sfvwrite_r+0x374>
   4e234:	80800917 	ldw	r2,36(r16)
   4e238:	81400717 	ldw	r5,28(r16)
   4e23c:	a809883a 	mov	r4,r21
   4e240:	b80d883a 	mov	r6,r23
   4e244:	103ee83a 	callr	r2
   4e248:	1029883a 	mov	r20,r2
   4e24c:	00bfac0e 	bge	zero,r2,4e100 <__alt_data_end+0xfffe9710>
   4e250:	a005883a 	mov	r2,r20
   4e254:	003f9606 	br	4e0b0 <__alt_data_end+0xfffe96c0>
   4e258:	b80d883a 	mov	r6,r23
   4e25c:	e00b883a 	mov	r5,fp
   4e260:	da000115 	stw	r8,4(sp)
   4e264:	004e8bc0 	call	4e8bc <memmove>
   4e268:	80800217 	ldw	r2,8(r16)
   4e26c:	80c00017 	ldw	r3,0(r16)
   4e270:	da000117 	ldw	r8,4(sp)
   4e274:	15c5c83a 	sub	r2,r2,r23
   4e278:	1def883a 	add	r23,r3,r23
   4e27c:	80800215 	stw	r2,8(r16)
   4e280:	85c00015 	stw	r23,0(r16)
   4e284:	003fbe06 	br	4e180 <__alt_data_end+0xfffe9790>
   4e288:	81000017 	ldw	r4,0(r16)
   4e28c:	9039883a 	mov	fp,r18
   4e290:	9029883a 	mov	r20,r18
   4e294:	902d883a 	mov	r22,r18
   4e298:	003f7b06 	br	4e088 <__alt_data_end+0xfffe9698>
   4e29c:	b80b883a 	mov	r5,r23
   4e2a0:	900d883a 	mov	r6,r18
   4e2a4:	004e8bc0 	call	4e8bc <memmove>
   4e2a8:	80c00217 	ldw	r3,8(r16)
   4e2ac:	80800017 	ldw	r2,0(r16)
   4e2b0:	9029883a 	mov	r20,r18
   4e2b4:	1c87c83a 	sub	r3,r3,r18
   4e2b8:	1485883a 	add	r2,r2,r18
   4e2bc:	80800015 	stw	r2,0(r16)
   4e2c0:	80c00215 	stw	r3,8(r16)
   4e2c4:	9005883a 	mov	r2,r18
   4e2c8:	003f7906 	br	4e0b0 <__alt_data_end+0xfffe96c0>
   4e2cc:	e009883a 	mov	r4,fp
   4e2d0:	01400284 	movi	r5,10
   4e2d4:	900d883a 	mov	r6,r18
   4e2d8:	004e7d40 	call	4e7d4 <memchr>
   4e2dc:	10003826 	beq	r2,zero,4e3c0 <__sfvwrite_r+0x498>
   4e2e0:	10800044 	addi	r2,r2,1
   4e2e4:	1729c83a 	sub	r20,r2,fp
   4e2e8:	02000044 	movi	r8,1
   4e2ec:	003f8f06 	br	4e12c <__alt_data_end+0xfffe973c>
   4e2f0:	80800517 	ldw	r2,20(r16)
   4e2f4:	81400417 	ldw	r5,16(r16)
   4e2f8:	87000017 	ldw	fp,0(r16)
   4e2fc:	10a9883a 	add	r20,r2,r2
   4e300:	a085883a 	add	r2,r20,r2
   4e304:	1028d7fa 	srli	r20,r2,31
   4e308:	e179c83a 	sub	fp,fp,r5
   4e30c:	e1000044 	addi	r4,fp,1
   4e310:	a085883a 	add	r2,r20,r2
   4e314:	1029d07a 	srai	r20,r2,1
   4e318:	2485883a 	add	r2,r4,r18
   4e31c:	a00d883a 	mov	r6,r20
   4e320:	a080022e 	bgeu	r20,r2,4e32c <__sfvwrite_r+0x404>
   4e324:	1029883a 	mov	r20,r2
   4e328:	100d883a 	mov	r6,r2
   4e32c:	18c1000c 	andi	r3,r3,1024
   4e330:	a809883a 	mov	r4,r21
   4e334:	183f6a26 	beq	r3,zero,4e0e0 <__alt_data_end+0xfffe96f0>
   4e338:	300b883a 	mov	r5,r6
   4e33c:	00469ac0 	call	469ac <_malloc_r>
   4e340:	102d883a 	mov	r22,r2
   4e344:	103f6c26 	beq	r2,zero,4e0f8 <__alt_data_end+0xfffe9708>
   4e348:	81400417 	ldw	r5,16(r16)
   4e34c:	1009883a 	mov	r4,r2
   4e350:	e00d883a 	mov	r6,fp
   4e354:	00471540 	call	47154 <memcpy>
   4e358:	8080030b 	ldhu	r2,12(r16)
   4e35c:	00fedfc4 	movi	r3,-1153
   4e360:	10c4703a 	and	r2,r2,r3
   4e364:	10802014 	ori	r2,r2,128
   4e368:	8080030d 	sth	r2,12(r16)
   4e36c:	b709883a 	add	r4,r22,fp
   4e370:	a707c83a 	sub	r3,r20,fp
   4e374:	85800415 	stw	r22,16(r16)
   4e378:	85000515 	stw	r20,20(r16)
   4e37c:	81000015 	stw	r4,0(r16)
   4e380:	9039883a 	mov	fp,r18
   4e384:	80c00215 	stw	r3,8(r16)
   4e388:	9029883a 	mov	r20,r18
   4e38c:	902d883a 	mov	r22,r18
   4e390:	003f3d06 	br	4e088 <__alt_data_end+0xfffe9698>
   4e394:	b80b883a 	mov	r5,r23
   4e398:	a00d883a 	mov	r6,r20
   4e39c:	004e8bc0 	call	4e8bc <memmove>
   4e3a0:	80800017 	ldw	r2,0(r16)
   4e3a4:	a809883a 	mov	r4,r21
   4e3a8:	800b883a 	mov	r5,r16
   4e3ac:	1505883a 	add	r2,r2,r20
   4e3b0:	80800015 	stw	r2,0(r16)
   4e3b4:	004d5080 	call	4d508 <_fflush_r>
   4e3b8:	103fa526 	beq	r2,zero,4e250 <__alt_data_end+0xfffe9860>
   4e3bc:	003f5006 	br	4e100 <__alt_data_end+0xfffe9710>
   4e3c0:	95000044 	addi	r20,r18,1
   4e3c4:	02000044 	movi	r8,1
   4e3c8:	003f5806 	br	4e12c <__alt_data_end+0xfffe973c>

0004e3cc <_fwalk>:
   4e3cc:	defff804 	addi	sp,sp,-32
   4e3d0:	dd400515 	stw	r21,20(sp)
   4e3d4:	2540b804 	addi	r21,r4,736
   4e3d8:	dd800615 	stw	r22,24(sp)
   4e3dc:	dd000415 	stw	r20,16(sp)
   4e3e0:	dfc00715 	stw	ra,28(sp)
   4e3e4:	dcc00315 	stw	r19,12(sp)
   4e3e8:	dc800215 	stw	r18,8(sp)
   4e3ec:	dc400115 	stw	r17,4(sp)
   4e3f0:	dc000015 	stw	r16,0(sp)
   4e3f4:	2829883a 	mov	r20,r5
   4e3f8:	002d883a 	mov	r22,zero
   4e3fc:	004dad40 	call	4dad4 <__sfp_lock_acquire>
   4e400:	a8001426 	beq	r21,zero,4e454 <_fwalk+0x88>
   4e404:	04ffffc4 	movi	r19,-1
   4e408:	ac400117 	ldw	r17,4(r21)
   4e40c:	ac800217 	ldw	r18,8(r21)
   4e410:	8c7fffc4 	addi	r17,r17,-1
   4e414:	88000d16 	blt	r17,zero,4e44c <_fwalk+0x80>
   4e418:	94000304 	addi	r16,r18,12
   4e41c:	94800384 	addi	r18,r18,14
   4e420:	80c0000f 	ldh	r3,0(r16)
   4e424:	8c7fffc4 	addi	r17,r17,-1
   4e428:	813ffd04 	addi	r4,r16,-12
   4e42c:	18000426 	beq	r3,zero,4e440 <_fwalk+0x74>
   4e430:	90c0000f 	ldh	r3,0(r18)
   4e434:	1cc00226 	beq	r3,r19,4e440 <_fwalk+0x74>
   4e438:	a03ee83a 	callr	r20
   4e43c:	b0acb03a 	or	r22,r22,r2
   4e440:	84001a04 	addi	r16,r16,104
   4e444:	94801a04 	addi	r18,r18,104
   4e448:	8cfff51e 	bne	r17,r19,4e420 <__alt_data_end+0xfffe9a30>
   4e44c:	ad400017 	ldw	r21,0(r21)
   4e450:	a83fed1e 	bne	r21,zero,4e408 <__alt_data_end+0xfffe9a18>
   4e454:	004dad80 	call	4dad8 <__sfp_lock_release>
   4e458:	b005883a 	mov	r2,r22
   4e45c:	dfc00717 	ldw	ra,28(sp)
   4e460:	dd800617 	ldw	r22,24(sp)
   4e464:	dd400517 	ldw	r21,20(sp)
   4e468:	dd000417 	ldw	r20,16(sp)
   4e46c:	dcc00317 	ldw	r19,12(sp)
   4e470:	dc800217 	ldw	r18,8(sp)
   4e474:	dc400117 	ldw	r17,4(sp)
   4e478:	dc000017 	ldw	r16,0(sp)
   4e47c:	dec00804 	addi	sp,sp,32
   4e480:	f800283a 	ret

0004e484 <_fwalk_reent>:
   4e484:	defff804 	addi	sp,sp,-32
   4e488:	dd400515 	stw	r21,20(sp)
   4e48c:	2540b804 	addi	r21,r4,736
   4e490:	dd800615 	stw	r22,24(sp)
   4e494:	dd000415 	stw	r20,16(sp)
   4e498:	dcc00315 	stw	r19,12(sp)
   4e49c:	dfc00715 	stw	ra,28(sp)
   4e4a0:	dc800215 	stw	r18,8(sp)
   4e4a4:	dc400115 	stw	r17,4(sp)
   4e4a8:	dc000015 	stw	r16,0(sp)
   4e4ac:	2027883a 	mov	r19,r4
   4e4b0:	2829883a 	mov	r20,r5
   4e4b4:	002d883a 	mov	r22,zero
   4e4b8:	004dad40 	call	4dad4 <__sfp_lock_acquire>
   4e4bc:	a8001326 	beq	r21,zero,4e50c <_fwalk_reent+0x88>
   4e4c0:	04bfffc4 	movi	r18,-1
   4e4c4:	ac400117 	ldw	r17,4(r21)
   4e4c8:	ac000217 	ldw	r16,8(r21)
   4e4cc:	8c7fffc4 	addi	r17,r17,-1
   4e4d0:	88000c16 	blt	r17,zero,4e504 <_fwalk_reent+0x80>
   4e4d4:	84000304 	addi	r16,r16,12
   4e4d8:	80c0000f 	ldh	r3,0(r16)
   4e4dc:	8c7fffc4 	addi	r17,r17,-1
   4e4e0:	817ffd04 	addi	r5,r16,-12
   4e4e4:	18000526 	beq	r3,zero,4e4fc <_fwalk_reent+0x78>
   4e4e8:	80c0008f 	ldh	r3,2(r16)
   4e4ec:	9809883a 	mov	r4,r19
   4e4f0:	1c800226 	beq	r3,r18,4e4fc <_fwalk_reent+0x78>
   4e4f4:	a03ee83a 	callr	r20
   4e4f8:	b0acb03a 	or	r22,r22,r2
   4e4fc:	84001a04 	addi	r16,r16,104
   4e500:	8cbff51e 	bne	r17,r18,4e4d8 <__alt_data_end+0xfffe9ae8>
   4e504:	ad400017 	ldw	r21,0(r21)
   4e508:	a83fee1e 	bne	r21,zero,4e4c4 <__alt_data_end+0xfffe9ad4>
   4e50c:	004dad80 	call	4dad8 <__sfp_lock_release>
   4e510:	b005883a 	mov	r2,r22
   4e514:	dfc00717 	ldw	ra,28(sp)
   4e518:	dd800617 	ldw	r22,24(sp)
   4e51c:	dd400517 	ldw	r21,20(sp)
   4e520:	dd000417 	ldw	r20,16(sp)
   4e524:	dcc00317 	ldw	r19,12(sp)
   4e528:	dc800217 	ldw	r18,8(sp)
   4e52c:	dc400117 	ldw	r17,4(sp)
   4e530:	dc000017 	ldw	r16,0(sp)
   4e534:	dec00804 	addi	sp,sp,32
   4e538:	f800283a 	ret

0004e53c <_setlocale_r>:
   4e53c:	30001b26 	beq	r6,zero,4e5ac <_setlocale_r+0x70>
   4e540:	014001b4 	movhi	r5,6
   4e544:	defffe04 	addi	sp,sp,-8
   4e548:	2964b104 	addi	r5,r5,-27964
   4e54c:	3009883a 	mov	r4,r6
   4e550:	dc000015 	stw	r16,0(sp)
   4e554:	dfc00115 	stw	ra,4(sp)
   4e558:	3021883a 	mov	r16,r6
   4e55c:	004768c0 	call	4768c <strcmp>
   4e560:	1000061e 	bne	r2,zero,4e57c <_setlocale_r+0x40>
   4e564:	008001b4 	movhi	r2,6
   4e568:	10a4b004 	addi	r2,r2,-27968
   4e56c:	dfc00117 	ldw	ra,4(sp)
   4e570:	dc000017 	ldw	r16,0(sp)
   4e574:	dec00204 	addi	sp,sp,8
   4e578:	f800283a 	ret
   4e57c:	014001b4 	movhi	r5,6
   4e580:	2964b004 	addi	r5,r5,-27968
   4e584:	8009883a 	mov	r4,r16
   4e588:	004768c0 	call	4768c <strcmp>
   4e58c:	103ff526 	beq	r2,zero,4e564 <__alt_data_end+0xfffe9b74>
   4e590:	014001b4 	movhi	r5,6
   4e594:	2963f304 	addi	r5,r5,-28724
   4e598:	8009883a 	mov	r4,r16
   4e59c:	004768c0 	call	4768c <strcmp>
   4e5a0:	103ff026 	beq	r2,zero,4e564 <__alt_data_end+0xfffe9b74>
   4e5a4:	0005883a 	mov	r2,zero
   4e5a8:	003ff006 	br	4e56c <__alt_data_end+0xfffe9b7c>
   4e5ac:	008001b4 	movhi	r2,6
   4e5b0:	10a4b004 	addi	r2,r2,-27968
   4e5b4:	f800283a 	ret

0004e5b8 <__locale_charset>:
   4e5b8:	008001b4 	movhi	r2,6
   4e5bc:	10a72b04 	addi	r2,r2,-25428
   4e5c0:	f800283a 	ret

0004e5c4 <__locale_mb_cur_max>:
   4e5c4:	008001b4 	movhi	r2,6
   4e5c8:	10abc804 	addi	r2,r2,-20704
   4e5cc:	10800017 	ldw	r2,0(r2)
   4e5d0:	f800283a 	ret

0004e5d4 <__locale_msgcharset>:
   4e5d4:	008001b4 	movhi	r2,6
   4e5d8:	10a72304 	addi	r2,r2,-25460
   4e5dc:	f800283a 	ret

0004e5e0 <__locale_cjk_lang>:
   4e5e0:	0005883a 	mov	r2,zero
   4e5e4:	f800283a 	ret

0004e5e8 <_localeconv_r>:
   4e5e8:	008001b4 	movhi	r2,6
   4e5ec:	10a73304 	addi	r2,r2,-25396
   4e5f0:	f800283a 	ret

0004e5f4 <setlocale>:
   4e5f4:	00c001b4 	movhi	r3,6
   4e5f8:	18ebc704 	addi	r3,r3,-20708
   4e5fc:	2005883a 	mov	r2,r4
   4e600:	19000017 	ldw	r4,0(r3)
   4e604:	280d883a 	mov	r6,r5
   4e608:	100b883a 	mov	r5,r2
   4e60c:	004e53c1 	jmpi	4e53c <_setlocale_r>

0004e610 <localeconv>:
   4e610:	008001b4 	movhi	r2,6
   4e614:	10a73304 	addi	r2,r2,-25396
   4e618:	f800283a 	ret

0004e61c <__smakebuf_r>:
   4e61c:	2880030b 	ldhu	r2,12(r5)
   4e620:	10c0008c 	andi	r3,r2,2
   4e624:	1800401e 	bne	r3,zero,4e728 <__smakebuf_r+0x10c>
   4e628:	deffec04 	addi	sp,sp,-80
   4e62c:	dc000f15 	stw	r16,60(sp)
   4e630:	2821883a 	mov	r16,r5
   4e634:	2940038f 	ldh	r5,14(r5)
   4e638:	dc401015 	stw	r17,64(sp)
   4e63c:	dfc01315 	stw	ra,76(sp)
   4e640:	dcc01215 	stw	r19,72(sp)
   4e644:	dc801115 	stw	r18,68(sp)
   4e648:	2023883a 	mov	r17,r4
   4e64c:	28001b16 	blt	r5,zero,4e6bc <__smakebuf_r+0xa0>
   4e650:	d80d883a 	mov	r6,sp
   4e654:	00531f40 	call	531f4 <_fstat_r>
   4e658:	10001716 	blt	r2,zero,4e6b8 <__smakebuf_r+0x9c>
   4e65c:	d8800117 	ldw	r2,4(sp)
   4e660:	00e00014 	movui	r3,32768
   4e664:	10bc000c 	andi	r2,r2,61440
   4e668:	10c03726 	beq	r2,r3,4e748 <__smakebuf_r+0x12c>
   4e66c:	80c0030b 	ldhu	r3,12(r16)
   4e670:	18c20014 	ori	r3,r3,2048
   4e674:	80c0030d 	sth	r3,12(r16)
   4e678:	00c80004 	movi	r3,8192
   4e67c:	10c03c1e 	bne	r2,r3,4e770 <__smakebuf_r+0x154>
   4e680:	8140038f 	ldh	r5,14(r16)
   4e684:	8809883a 	mov	r4,r17
   4e688:	005324c0 	call	5324c <_isatty_r>
   4e68c:	10004e26 	beq	r2,zero,4e7c8 <__smakebuf_r+0x1ac>
   4e690:	8080030b 	ldhu	r2,12(r16)
   4e694:	04c00044 	movi	r19,1
   4e698:	80c010c4 	addi	r3,r16,67
   4e69c:	14c4b03a 	or	r2,r2,r19
   4e6a0:	8080030d 	sth	r2,12(r16)
   4e6a4:	80c00015 	stw	r3,0(r16)
   4e6a8:	80c00415 	stw	r3,16(r16)
   4e6ac:	84c00515 	stw	r19,20(r16)
   4e6b0:	04810004 	movi	r18,1024
   4e6b4:	00000706 	br	4e6d4 <__smakebuf_r+0xb8>
   4e6b8:	8080030b 	ldhu	r2,12(r16)
   4e6bc:	10c0200c 	andi	r3,r2,128
   4e6c0:	18001f1e 	bne	r3,zero,4e740 <__smakebuf_r+0x124>
   4e6c4:	04810004 	movi	r18,1024
   4e6c8:	10820014 	ori	r2,r2,2048
   4e6cc:	8080030d 	sth	r2,12(r16)
   4e6d0:	0027883a 	mov	r19,zero
   4e6d4:	8809883a 	mov	r4,r17
   4e6d8:	900b883a 	mov	r5,r18
   4e6dc:	00469ac0 	call	469ac <_malloc_r>
   4e6e0:	10002e26 	beq	r2,zero,4e79c <__smakebuf_r+0x180>
   4e6e4:	80c0030b 	ldhu	r3,12(r16)
   4e6e8:	01000174 	movhi	r4,5
   4e6ec:	2135dc04 	addi	r4,r4,-10384
   4e6f0:	89000f15 	stw	r4,60(r17)
   4e6f4:	18c02014 	ori	r3,r3,128
   4e6f8:	80c0030d 	sth	r3,12(r16)
   4e6fc:	80800015 	stw	r2,0(r16)
   4e700:	80800415 	stw	r2,16(r16)
   4e704:	84800515 	stw	r18,20(r16)
   4e708:	98001c1e 	bne	r19,zero,4e77c <__smakebuf_r+0x160>
   4e70c:	dfc01317 	ldw	ra,76(sp)
   4e710:	dcc01217 	ldw	r19,72(sp)
   4e714:	dc801117 	ldw	r18,68(sp)
   4e718:	dc401017 	ldw	r17,64(sp)
   4e71c:	dc000f17 	ldw	r16,60(sp)
   4e720:	dec01404 	addi	sp,sp,80
   4e724:	f800283a 	ret
   4e728:	288010c4 	addi	r2,r5,67
   4e72c:	28800015 	stw	r2,0(r5)
   4e730:	28800415 	stw	r2,16(r5)
   4e734:	00800044 	movi	r2,1
   4e738:	28800515 	stw	r2,20(r5)
   4e73c:	f800283a 	ret
   4e740:	04801004 	movi	r18,64
   4e744:	003fe006 	br	4e6c8 <__alt_data_end+0xfffe9cd8>
   4e748:	81000a17 	ldw	r4,40(r16)
   4e74c:	00c00174 	movhi	r3,5
   4e750:	18c0ad04 	addi	r3,r3,692
   4e754:	20ffc51e 	bne	r4,r3,4e66c <__alt_data_end+0xfffe9c7c>
   4e758:	80c0030b 	ldhu	r3,12(r16)
   4e75c:	01010004 	movi	r4,1024
   4e760:	81001315 	stw	r4,76(r16)
   4e764:	1906b03a 	or	r3,r3,r4
   4e768:	80c0030d 	sth	r3,12(r16)
   4e76c:	003fc206 	br	4e678 <__alt_data_end+0xfffe9c88>
   4e770:	0027883a 	mov	r19,zero
   4e774:	04810004 	movi	r18,1024
   4e778:	003fd606 	br	4e6d4 <__alt_data_end+0xfffe9ce4>
   4e77c:	8140038f 	ldh	r5,14(r16)
   4e780:	8809883a 	mov	r4,r17
   4e784:	005324c0 	call	5324c <_isatty_r>
   4e788:	103fe026 	beq	r2,zero,4e70c <__alt_data_end+0xfffe9d1c>
   4e78c:	8080030b 	ldhu	r2,12(r16)
   4e790:	10800054 	ori	r2,r2,1
   4e794:	8080030d 	sth	r2,12(r16)
   4e798:	003fdc06 	br	4e70c <__alt_data_end+0xfffe9d1c>
   4e79c:	8080030b 	ldhu	r2,12(r16)
   4e7a0:	10c0800c 	andi	r3,r2,512
   4e7a4:	183fd91e 	bne	r3,zero,4e70c <__alt_data_end+0xfffe9d1c>
   4e7a8:	10800094 	ori	r2,r2,2
   4e7ac:	80c010c4 	addi	r3,r16,67
   4e7b0:	8080030d 	sth	r2,12(r16)
   4e7b4:	00800044 	movi	r2,1
   4e7b8:	80c00015 	stw	r3,0(r16)
   4e7bc:	80c00415 	stw	r3,16(r16)
   4e7c0:	80800515 	stw	r2,20(r16)
   4e7c4:	003fd106 	br	4e70c <__alt_data_end+0xfffe9d1c>
   4e7c8:	04c00044 	movi	r19,1
   4e7cc:	04810004 	movi	r18,1024
   4e7d0:	003fc006 	br	4e6d4 <__alt_data_end+0xfffe9ce4>

0004e7d4 <memchr>:
   4e7d4:	208000cc 	andi	r2,r4,3
   4e7d8:	280f883a 	mov	r7,r5
   4e7dc:	10003526 	beq	r2,zero,4e8b4 <memchr+0xe0>
   4e7e0:	30bfffc4 	addi	r2,r6,-1
   4e7e4:	30001b26 	beq	r6,zero,4e854 <memchr+0x80>
   4e7e8:	21800003 	ldbu	r6,0(r4)
   4e7ec:	28c03fcc 	andi	r3,r5,255
   4e7f0:	30c01a26 	beq	r6,r3,4e85c <memchr+0x88>
   4e7f4:	180d883a 	mov	r6,r3
   4e7f8:	00000406 	br	4e80c <memchr+0x38>
   4e7fc:	10001526 	beq	r2,zero,4e854 <memchr+0x80>
   4e800:	20c00003 	ldbu	r3,0(r4)
   4e804:	10bfffc4 	addi	r2,r2,-1
   4e808:	19801426 	beq	r3,r6,4e85c <memchr+0x88>
   4e80c:	21000044 	addi	r4,r4,1
   4e810:	20c000cc 	andi	r3,r4,3
   4e814:	183ff91e 	bne	r3,zero,4e7fc <__alt_data_end+0xfffe9e0c>
   4e818:	024000c4 	movi	r9,3
   4e81c:	48801136 	bltu	r9,r2,4e864 <memchr+0x90>
   4e820:	10000c26 	beq	r2,zero,4e854 <memchr+0x80>
   4e824:	20c00003 	ldbu	r3,0(r4)
   4e828:	29403fcc 	andi	r5,r5,255
   4e82c:	19400b26 	beq	r3,r5,4e85c <memchr+0x88>
   4e830:	20c00044 	addi	r3,r4,1
   4e834:	2085883a 	add	r2,r4,r2
   4e838:	39803fcc 	andi	r6,r7,255
   4e83c:	00000306 	br	4e84c <memchr+0x78>
   4e840:	18c00044 	addi	r3,r3,1
   4e844:	197fffc3 	ldbu	r5,-1(r3)
   4e848:	29800426 	beq	r5,r6,4e85c <memchr+0x88>
   4e84c:	1809883a 	mov	r4,r3
   4e850:	18bffb1e 	bne	r3,r2,4e840 <__alt_data_end+0xfffe9e50>
   4e854:	0005883a 	mov	r2,zero
   4e858:	f800283a 	ret
   4e85c:	2005883a 	mov	r2,r4
   4e860:	f800283a 	ret
   4e864:	28c03fcc 	andi	r3,r5,255
   4e868:	1810923a 	slli	r8,r3,8
   4e86c:	02ffbff4 	movhi	r11,65279
   4e870:	02a02074 	movhi	r10,32897
   4e874:	40c6b03a 	or	r3,r8,r3
   4e878:	1810943a 	slli	r8,r3,16
   4e87c:	5affbfc4 	addi	r11,r11,-257
   4e880:	52a02004 	addi	r10,r10,-32640
   4e884:	40d0b03a 	or	r8,r8,r3
   4e888:	20c00017 	ldw	r3,0(r4)
   4e88c:	40c6f03a 	xor	r3,r8,r3
   4e890:	1acd883a 	add	r6,r3,r11
   4e894:	00c6303a 	nor	r3,zero,r3
   4e898:	30c6703a 	and	r3,r6,r3
   4e89c:	1a86703a 	and	r3,r3,r10
   4e8a0:	183fdf1e 	bne	r3,zero,4e820 <__alt_data_end+0xfffe9e30>
   4e8a4:	10bfff04 	addi	r2,r2,-4
   4e8a8:	21000104 	addi	r4,r4,4
   4e8ac:	48bff636 	bltu	r9,r2,4e888 <__alt_data_end+0xfffe9e98>
   4e8b0:	003fdb06 	br	4e820 <__alt_data_end+0xfffe9e30>
   4e8b4:	3005883a 	mov	r2,r6
   4e8b8:	003fd706 	br	4e818 <__alt_data_end+0xfffe9e28>

0004e8bc <memmove>:
   4e8bc:	2005883a 	mov	r2,r4
   4e8c0:	29000b2e 	bgeu	r5,r4,4e8f0 <memmove+0x34>
   4e8c4:	298f883a 	add	r7,r5,r6
   4e8c8:	21c0092e 	bgeu	r4,r7,4e8f0 <memmove+0x34>
   4e8cc:	2187883a 	add	r3,r4,r6
   4e8d0:	198bc83a 	sub	r5,r3,r6
   4e8d4:	30004b26 	beq	r6,zero,4ea04 <memmove+0x148>
   4e8d8:	39ffffc4 	addi	r7,r7,-1
   4e8dc:	39000003 	ldbu	r4,0(r7)
   4e8e0:	18ffffc4 	addi	r3,r3,-1
   4e8e4:	19000005 	stb	r4,0(r3)
   4e8e8:	197ffb1e 	bne	r3,r5,4e8d8 <__alt_data_end+0xfffe9ee8>
   4e8ec:	f800283a 	ret
   4e8f0:	00c003c4 	movi	r3,15
   4e8f4:	1980412e 	bgeu	r3,r6,4e9fc <memmove+0x140>
   4e8f8:	1146b03a 	or	r3,r2,r5
   4e8fc:	18c000cc 	andi	r3,r3,3
   4e900:	1800411e 	bne	r3,zero,4ea08 <memmove+0x14c>
   4e904:	33fffc04 	addi	r15,r6,-16
   4e908:	781ed13a 	srli	r15,r15,4
   4e90c:	28c00104 	addi	r3,r5,4
   4e910:	13400104 	addi	r13,r2,4
   4e914:	781c913a 	slli	r14,r15,4
   4e918:	2b000204 	addi	r12,r5,8
   4e91c:	12c00204 	addi	r11,r2,8
   4e920:	73800504 	addi	r14,r14,20
   4e924:	2a800304 	addi	r10,r5,12
   4e928:	12400304 	addi	r9,r2,12
   4e92c:	2b9d883a 	add	r14,r5,r14
   4e930:	2811883a 	mov	r8,r5
   4e934:	100f883a 	mov	r7,r2
   4e938:	41000017 	ldw	r4,0(r8)
   4e93c:	39c00404 	addi	r7,r7,16
   4e940:	18c00404 	addi	r3,r3,16
   4e944:	393ffc15 	stw	r4,-16(r7)
   4e948:	193ffc17 	ldw	r4,-16(r3)
   4e94c:	6b400404 	addi	r13,r13,16
   4e950:	5ac00404 	addi	r11,r11,16
   4e954:	693ffc15 	stw	r4,-16(r13)
   4e958:	61000017 	ldw	r4,0(r12)
   4e95c:	4a400404 	addi	r9,r9,16
   4e960:	42000404 	addi	r8,r8,16
   4e964:	593ffc15 	stw	r4,-16(r11)
   4e968:	51000017 	ldw	r4,0(r10)
   4e96c:	63000404 	addi	r12,r12,16
   4e970:	52800404 	addi	r10,r10,16
   4e974:	493ffc15 	stw	r4,-16(r9)
   4e978:	1bbfef1e 	bne	r3,r14,4e938 <__alt_data_end+0xfffe9f48>
   4e97c:	79000044 	addi	r4,r15,1
   4e980:	2008913a 	slli	r4,r4,4
   4e984:	328003cc 	andi	r10,r6,15
   4e988:	02c000c4 	movi	r11,3
   4e98c:	1107883a 	add	r3,r2,r4
   4e990:	290b883a 	add	r5,r5,r4
   4e994:	5a801e2e 	bgeu	r11,r10,4ea10 <memmove+0x154>
   4e998:	1813883a 	mov	r9,r3
   4e99c:	2811883a 	mov	r8,r5
   4e9a0:	500f883a 	mov	r7,r10
   4e9a4:	41000017 	ldw	r4,0(r8)
   4e9a8:	4a400104 	addi	r9,r9,4
   4e9ac:	39ffff04 	addi	r7,r7,-4
   4e9b0:	493fff15 	stw	r4,-4(r9)
   4e9b4:	42000104 	addi	r8,r8,4
   4e9b8:	59fffa36 	bltu	r11,r7,4e9a4 <__alt_data_end+0xfffe9fb4>
   4e9bc:	513fff04 	addi	r4,r10,-4
   4e9c0:	2008d0ba 	srli	r4,r4,2
   4e9c4:	318000cc 	andi	r6,r6,3
   4e9c8:	21000044 	addi	r4,r4,1
   4e9cc:	2109883a 	add	r4,r4,r4
   4e9d0:	2109883a 	add	r4,r4,r4
   4e9d4:	1907883a 	add	r3,r3,r4
   4e9d8:	290b883a 	add	r5,r5,r4
   4e9dc:	30000926 	beq	r6,zero,4ea04 <memmove+0x148>
   4e9e0:	198d883a 	add	r6,r3,r6
   4e9e4:	29c00003 	ldbu	r7,0(r5)
   4e9e8:	18c00044 	addi	r3,r3,1
   4e9ec:	29400044 	addi	r5,r5,1
   4e9f0:	19ffffc5 	stb	r7,-1(r3)
   4e9f4:	19bffb1e 	bne	r3,r6,4e9e4 <__alt_data_end+0xfffe9ff4>
   4e9f8:	f800283a 	ret
   4e9fc:	1007883a 	mov	r3,r2
   4ea00:	003ff606 	br	4e9dc <__alt_data_end+0xfffe9fec>
   4ea04:	f800283a 	ret
   4ea08:	1007883a 	mov	r3,r2
   4ea0c:	003ff406 	br	4e9e0 <__alt_data_end+0xfffe9ff0>
   4ea10:	500d883a 	mov	r6,r10
   4ea14:	003ff106 	br	4e9dc <__alt_data_end+0xfffe9fec>

0004ea18 <_Balloc>:
   4ea18:	20801317 	ldw	r2,76(r4)
   4ea1c:	defffc04 	addi	sp,sp,-16
   4ea20:	dc400115 	stw	r17,4(sp)
   4ea24:	dc000015 	stw	r16,0(sp)
   4ea28:	dfc00315 	stw	ra,12(sp)
   4ea2c:	dc800215 	stw	r18,8(sp)
   4ea30:	2023883a 	mov	r17,r4
   4ea34:	2821883a 	mov	r16,r5
   4ea38:	10000f26 	beq	r2,zero,4ea78 <_Balloc+0x60>
   4ea3c:	8407883a 	add	r3,r16,r16
   4ea40:	18c7883a 	add	r3,r3,r3
   4ea44:	10c7883a 	add	r3,r2,r3
   4ea48:	18800017 	ldw	r2,0(r3)
   4ea4c:	10001126 	beq	r2,zero,4ea94 <_Balloc+0x7c>
   4ea50:	11000017 	ldw	r4,0(r2)
   4ea54:	19000015 	stw	r4,0(r3)
   4ea58:	10000415 	stw	zero,16(r2)
   4ea5c:	10000315 	stw	zero,12(r2)
   4ea60:	dfc00317 	ldw	ra,12(sp)
   4ea64:	dc800217 	ldw	r18,8(sp)
   4ea68:	dc400117 	ldw	r17,4(sp)
   4ea6c:	dc000017 	ldw	r16,0(sp)
   4ea70:	dec00404 	addi	sp,sp,16
   4ea74:	f800283a 	ret
   4ea78:	01400104 	movi	r5,4
   4ea7c:	01800844 	movi	r6,33
   4ea80:	0052e2c0 	call	52e2c <_calloc_r>
   4ea84:	88801315 	stw	r2,76(r17)
   4ea88:	103fec1e 	bne	r2,zero,4ea3c <__alt_data_end+0xfffea04c>
   4ea8c:	0005883a 	mov	r2,zero
   4ea90:	003ff306 	br	4ea60 <__alt_data_end+0xfffea070>
   4ea94:	01400044 	movi	r5,1
   4ea98:	2c24983a 	sll	r18,r5,r16
   4ea9c:	8809883a 	mov	r4,r17
   4eaa0:	91800144 	addi	r6,r18,5
   4eaa4:	318d883a 	add	r6,r6,r6
   4eaa8:	318d883a 	add	r6,r6,r6
   4eaac:	0052e2c0 	call	52e2c <_calloc_r>
   4eab0:	103ff626 	beq	r2,zero,4ea8c <__alt_data_end+0xfffea09c>
   4eab4:	14000115 	stw	r16,4(r2)
   4eab8:	14800215 	stw	r18,8(r2)
   4eabc:	003fe606 	br	4ea58 <__alt_data_end+0xfffea068>

0004eac0 <_Bfree>:
   4eac0:	28000826 	beq	r5,zero,4eae4 <_Bfree+0x24>
   4eac4:	28c00117 	ldw	r3,4(r5)
   4eac8:	20801317 	ldw	r2,76(r4)
   4eacc:	18c7883a 	add	r3,r3,r3
   4ead0:	18c7883a 	add	r3,r3,r3
   4ead4:	10c5883a 	add	r2,r2,r3
   4ead8:	10c00017 	ldw	r3,0(r2)
   4eadc:	28c00015 	stw	r3,0(r5)
   4eae0:	11400015 	stw	r5,0(r2)
   4eae4:	f800283a 	ret

0004eae8 <__multadd>:
   4eae8:	defff704 	addi	sp,sp,-36
   4eaec:	dc800215 	stw	r18,8(sp)
   4eaf0:	2c800417 	ldw	r18,16(r5)
   4eaf4:	ddc00715 	stw	r23,28(sp)
   4eaf8:	dd800615 	stw	r22,24(sp)
   4eafc:	dd000415 	stw	r20,16(sp)
   4eb00:	dcc00315 	stw	r19,12(sp)
   4eb04:	dc400115 	stw	r17,4(sp)
   4eb08:	dc000015 	stw	r16,0(sp)
   4eb0c:	dfc00815 	stw	ra,32(sp)
   4eb10:	dd400515 	stw	r21,20(sp)
   4eb14:	2827883a 	mov	r19,r5
   4eb18:	2029883a 	mov	r20,r4
   4eb1c:	3023883a 	mov	r17,r6
   4eb20:	3821883a 	mov	r16,r7
   4eb24:	2d800504 	addi	r22,r5,20
   4eb28:	002f883a 	mov	r23,zero
   4eb2c:	b5400017 	ldw	r21,0(r22)
   4eb30:	880b883a 	mov	r5,r17
   4eb34:	bdc00044 	addi	r23,r23,1
   4eb38:	a93fffcc 	andi	r4,r21,65535
   4eb3c:	00453200 	call	45320 <__mulsi3>
   4eb40:	1421883a 	add	r16,r2,r16
   4eb44:	a808d43a 	srli	r4,r21,16
   4eb48:	802ad43a 	srli	r21,r16,16
   4eb4c:	880b883a 	mov	r5,r17
   4eb50:	00453200 	call	45320 <__mulsi3>
   4eb54:	a88f883a 	add	r7,r21,r2
   4eb58:	3804943a 	slli	r2,r7,16
   4eb5c:	80ffffcc 	andi	r3,r16,65535
   4eb60:	b5800104 	addi	r22,r22,4
   4eb64:	10c7883a 	add	r3,r2,r3
   4eb68:	b0ffff15 	stw	r3,-4(r22)
   4eb6c:	3820d43a 	srli	r16,r7,16
   4eb70:	bcbfee16 	blt	r23,r18,4eb2c <__alt_data_end+0xfffea13c>
   4eb74:	80000926 	beq	r16,zero,4eb9c <__multadd+0xb4>
   4eb78:	98800217 	ldw	r2,8(r19)
   4eb7c:	9080130e 	bge	r18,r2,4ebcc <__multadd+0xe4>
   4eb80:	90800144 	addi	r2,r18,5
   4eb84:	1085883a 	add	r2,r2,r2
   4eb88:	1085883a 	add	r2,r2,r2
   4eb8c:	9885883a 	add	r2,r19,r2
   4eb90:	14000015 	stw	r16,0(r2)
   4eb94:	94800044 	addi	r18,r18,1
   4eb98:	9c800415 	stw	r18,16(r19)
   4eb9c:	9805883a 	mov	r2,r19
   4eba0:	dfc00817 	ldw	ra,32(sp)
   4eba4:	ddc00717 	ldw	r23,28(sp)
   4eba8:	dd800617 	ldw	r22,24(sp)
   4ebac:	dd400517 	ldw	r21,20(sp)
   4ebb0:	dd000417 	ldw	r20,16(sp)
   4ebb4:	dcc00317 	ldw	r19,12(sp)
   4ebb8:	dc800217 	ldw	r18,8(sp)
   4ebbc:	dc400117 	ldw	r17,4(sp)
   4ebc0:	dc000017 	ldw	r16,0(sp)
   4ebc4:	dec00904 	addi	sp,sp,36
   4ebc8:	f800283a 	ret
   4ebcc:	99400117 	ldw	r5,4(r19)
   4ebd0:	a009883a 	mov	r4,r20
   4ebd4:	29400044 	addi	r5,r5,1
   4ebd8:	004ea180 	call	4ea18 <_Balloc>
   4ebdc:	99800417 	ldw	r6,16(r19)
   4ebe0:	99400304 	addi	r5,r19,12
   4ebe4:	11000304 	addi	r4,r2,12
   4ebe8:	31800084 	addi	r6,r6,2
   4ebec:	318d883a 	add	r6,r6,r6
   4ebf0:	318d883a 	add	r6,r6,r6
   4ebf4:	1023883a 	mov	r17,r2
   4ebf8:	00471540 	call	47154 <memcpy>
   4ebfc:	99000117 	ldw	r4,4(r19)
   4ec00:	a0c01317 	ldw	r3,76(r20)
   4ec04:	2109883a 	add	r4,r4,r4
   4ec08:	2109883a 	add	r4,r4,r4
   4ec0c:	1907883a 	add	r3,r3,r4
   4ec10:	18800017 	ldw	r2,0(r3)
   4ec14:	98800015 	stw	r2,0(r19)
   4ec18:	1cc00015 	stw	r19,0(r3)
   4ec1c:	8827883a 	mov	r19,r17
   4ec20:	003fd706 	br	4eb80 <__alt_data_end+0xfffea190>

0004ec24 <__s2b>:
   4ec24:	defff904 	addi	sp,sp,-28
   4ec28:	dc400115 	stw	r17,4(sp)
   4ec2c:	dc000015 	stw	r16,0(sp)
   4ec30:	2023883a 	mov	r17,r4
   4ec34:	2821883a 	mov	r16,r5
   4ec38:	39000204 	addi	r4,r7,8
   4ec3c:	01400244 	movi	r5,9
   4ec40:	dcc00315 	stw	r19,12(sp)
   4ec44:	dc800215 	stw	r18,8(sp)
   4ec48:	dfc00615 	stw	ra,24(sp)
   4ec4c:	dd400515 	stw	r21,20(sp)
   4ec50:	dd000415 	stw	r20,16(sp)
   4ec54:	3825883a 	mov	r18,r7
   4ec58:	3027883a 	mov	r19,r6
   4ec5c:	00452600 	call	45260 <__divsi3>
   4ec60:	00c00044 	movi	r3,1
   4ec64:	000b883a 	mov	r5,zero
   4ec68:	1880030e 	bge	r3,r2,4ec78 <__s2b+0x54>
   4ec6c:	18c7883a 	add	r3,r3,r3
   4ec70:	29400044 	addi	r5,r5,1
   4ec74:	18bffd16 	blt	r3,r2,4ec6c <__alt_data_end+0xfffea27c>
   4ec78:	8809883a 	mov	r4,r17
   4ec7c:	004ea180 	call	4ea18 <_Balloc>
   4ec80:	d8c00717 	ldw	r3,28(sp)
   4ec84:	10c00515 	stw	r3,20(r2)
   4ec88:	00c00044 	movi	r3,1
   4ec8c:	10c00415 	stw	r3,16(r2)
   4ec90:	00c00244 	movi	r3,9
   4ec94:	1cc0210e 	bge	r3,r19,4ed1c <__s2b+0xf8>
   4ec98:	80eb883a 	add	r21,r16,r3
   4ec9c:	a829883a 	mov	r20,r21
   4eca0:	84e1883a 	add	r16,r16,r19
   4eca4:	a1c00007 	ldb	r7,0(r20)
   4eca8:	8809883a 	mov	r4,r17
   4ecac:	a5000044 	addi	r20,r20,1
   4ecb0:	100b883a 	mov	r5,r2
   4ecb4:	01800284 	movi	r6,10
   4ecb8:	39fff404 	addi	r7,r7,-48
   4ecbc:	004eae80 	call	4eae8 <__multadd>
   4ecc0:	a43ff81e 	bne	r20,r16,4eca4 <__alt_data_end+0xfffea2b4>
   4ecc4:	ace1883a 	add	r16,r21,r19
   4ecc8:	843ffe04 	addi	r16,r16,-8
   4eccc:	9c800a0e 	bge	r19,r18,4ecf8 <__s2b+0xd4>
   4ecd0:	94e5c83a 	sub	r18,r18,r19
   4ecd4:	84a5883a 	add	r18,r16,r18
   4ecd8:	81c00007 	ldb	r7,0(r16)
   4ecdc:	8809883a 	mov	r4,r17
   4ece0:	84000044 	addi	r16,r16,1
   4ece4:	100b883a 	mov	r5,r2
   4ece8:	01800284 	movi	r6,10
   4ecec:	39fff404 	addi	r7,r7,-48
   4ecf0:	004eae80 	call	4eae8 <__multadd>
   4ecf4:	84bff81e 	bne	r16,r18,4ecd8 <__alt_data_end+0xfffea2e8>
   4ecf8:	dfc00617 	ldw	ra,24(sp)
   4ecfc:	dd400517 	ldw	r21,20(sp)
   4ed00:	dd000417 	ldw	r20,16(sp)
   4ed04:	dcc00317 	ldw	r19,12(sp)
   4ed08:	dc800217 	ldw	r18,8(sp)
   4ed0c:	dc400117 	ldw	r17,4(sp)
   4ed10:	dc000017 	ldw	r16,0(sp)
   4ed14:	dec00704 	addi	sp,sp,28
   4ed18:	f800283a 	ret
   4ed1c:	84000284 	addi	r16,r16,10
   4ed20:	1827883a 	mov	r19,r3
   4ed24:	003fe906 	br	4eccc <__alt_data_end+0xfffea2dc>

0004ed28 <__hi0bits>:
   4ed28:	20bfffec 	andhi	r2,r4,65535
   4ed2c:	1000141e 	bne	r2,zero,4ed80 <__hi0bits+0x58>
   4ed30:	2008943a 	slli	r4,r4,16
   4ed34:	00800404 	movi	r2,16
   4ed38:	20ffc02c 	andhi	r3,r4,65280
   4ed3c:	1800021e 	bne	r3,zero,4ed48 <__hi0bits+0x20>
   4ed40:	2008923a 	slli	r4,r4,8
   4ed44:	10800204 	addi	r2,r2,8
   4ed48:	20fc002c 	andhi	r3,r4,61440
   4ed4c:	1800021e 	bne	r3,zero,4ed58 <__hi0bits+0x30>
   4ed50:	2008913a 	slli	r4,r4,4
   4ed54:	10800104 	addi	r2,r2,4
   4ed58:	20f0002c 	andhi	r3,r4,49152
   4ed5c:	1800031e 	bne	r3,zero,4ed6c <__hi0bits+0x44>
   4ed60:	2109883a 	add	r4,r4,r4
   4ed64:	10800084 	addi	r2,r2,2
   4ed68:	2109883a 	add	r4,r4,r4
   4ed6c:	20000316 	blt	r4,zero,4ed7c <__hi0bits+0x54>
   4ed70:	2110002c 	andhi	r4,r4,16384
   4ed74:	2000041e 	bne	r4,zero,4ed88 <__hi0bits+0x60>
   4ed78:	00800804 	movi	r2,32
   4ed7c:	f800283a 	ret
   4ed80:	0005883a 	mov	r2,zero
   4ed84:	003fec06 	br	4ed38 <__alt_data_end+0xfffea348>
   4ed88:	10800044 	addi	r2,r2,1
   4ed8c:	f800283a 	ret

0004ed90 <__lo0bits>:
   4ed90:	20c00017 	ldw	r3,0(r4)
   4ed94:	188001cc 	andi	r2,r3,7
   4ed98:	10000826 	beq	r2,zero,4edbc <__lo0bits+0x2c>
   4ed9c:	1880004c 	andi	r2,r3,1
   4eda0:	1000211e 	bne	r2,zero,4ee28 <__lo0bits+0x98>
   4eda4:	1880008c 	andi	r2,r3,2
   4eda8:	1000211e 	bne	r2,zero,4ee30 <__lo0bits+0xa0>
   4edac:	1806d0ba 	srli	r3,r3,2
   4edb0:	00800084 	movi	r2,2
   4edb4:	20c00015 	stw	r3,0(r4)
   4edb8:	f800283a 	ret
   4edbc:	18bfffcc 	andi	r2,r3,65535
   4edc0:	10001326 	beq	r2,zero,4ee10 <__lo0bits+0x80>
   4edc4:	0005883a 	mov	r2,zero
   4edc8:	19403fcc 	andi	r5,r3,255
   4edcc:	2800021e 	bne	r5,zero,4edd8 <__lo0bits+0x48>
   4edd0:	1806d23a 	srli	r3,r3,8
   4edd4:	10800204 	addi	r2,r2,8
   4edd8:	194003cc 	andi	r5,r3,15
   4eddc:	2800021e 	bne	r5,zero,4ede8 <__lo0bits+0x58>
   4ede0:	1806d13a 	srli	r3,r3,4
   4ede4:	10800104 	addi	r2,r2,4
   4ede8:	194000cc 	andi	r5,r3,3
   4edec:	2800021e 	bne	r5,zero,4edf8 <__lo0bits+0x68>
   4edf0:	1806d0ba 	srli	r3,r3,2
   4edf4:	10800084 	addi	r2,r2,2
   4edf8:	1940004c 	andi	r5,r3,1
   4edfc:	2800081e 	bne	r5,zero,4ee20 <__lo0bits+0x90>
   4ee00:	1806d07a 	srli	r3,r3,1
   4ee04:	1800051e 	bne	r3,zero,4ee1c <__lo0bits+0x8c>
   4ee08:	00800804 	movi	r2,32
   4ee0c:	f800283a 	ret
   4ee10:	1806d43a 	srli	r3,r3,16
   4ee14:	00800404 	movi	r2,16
   4ee18:	003feb06 	br	4edc8 <__alt_data_end+0xfffea3d8>
   4ee1c:	10800044 	addi	r2,r2,1
   4ee20:	20c00015 	stw	r3,0(r4)
   4ee24:	f800283a 	ret
   4ee28:	0005883a 	mov	r2,zero
   4ee2c:	f800283a 	ret
   4ee30:	1806d07a 	srli	r3,r3,1
   4ee34:	00800044 	movi	r2,1
   4ee38:	20c00015 	stw	r3,0(r4)
   4ee3c:	f800283a 	ret

0004ee40 <__i2b>:
   4ee40:	defffd04 	addi	sp,sp,-12
   4ee44:	dc000015 	stw	r16,0(sp)
   4ee48:	04000044 	movi	r16,1
   4ee4c:	dc400115 	stw	r17,4(sp)
   4ee50:	2823883a 	mov	r17,r5
   4ee54:	800b883a 	mov	r5,r16
   4ee58:	dfc00215 	stw	ra,8(sp)
   4ee5c:	004ea180 	call	4ea18 <_Balloc>
   4ee60:	14400515 	stw	r17,20(r2)
   4ee64:	14000415 	stw	r16,16(r2)
   4ee68:	dfc00217 	ldw	ra,8(sp)
   4ee6c:	dc400117 	ldw	r17,4(sp)
   4ee70:	dc000017 	ldw	r16,0(sp)
   4ee74:	dec00304 	addi	sp,sp,12
   4ee78:	f800283a 	ret

0004ee7c <__multiply>:
   4ee7c:	deffef04 	addi	sp,sp,-68
   4ee80:	dc400815 	stw	r17,32(sp)
   4ee84:	dc000715 	stw	r16,28(sp)
   4ee88:	2c400417 	ldw	r17,16(r5)
   4ee8c:	34000417 	ldw	r16,16(r6)
   4ee90:	dd800d15 	stw	r22,52(sp)
   4ee94:	dc800915 	stw	r18,36(sp)
   4ee98:	dfc01015 	stw	ra,64(sp)
   4ee9c:	df000f15 	stw	fp,60(sp)
   4eea0:	ddc00e15 	stw	r23,56(sp)
   4eea4:	dd400c15 	stw	r21,48(sp)
   4eea8:	dd000b15 	stw	r20,44(sp)
   4eeac:	dcc00a15 	stw	r19,40(sp)
   4eeb0:	2825883a 	mov	r18,r5
   4eeb4:	302d883a 	mov	r22,r6
   4eeb8:	8c009116 	blt	r17,r16,4f100 <__multiply+0x284>
   4eebc:	8005883a 	mov	r2,r16
   4eec0:	8821883a 	mov	r16,r17
   4eec4:	1023883a 	mov	r17,r2
   4eec8:	90800217 	ldw	r2,8(r18)
   4eecc:	8447883a 	add	r3,r16,r17
   4eed0:	d8c00215 	stw	r3,8(sp)
   4eed4:	91400117 	ldw	r5,4(r18)
   4eed8:	10c0010e 	bge	r2,r3,4eee0 <__multiply+0x64>
   4eedc:	29400044 	addi	r5,r5,1
   4eee0:	004ea180 	call	4ea18 <_Balloc>
   4eee4:	d8c00217 	ldw	r3,8(sp)
   4eee8:	d8800615 	stw	r2,24(sp)
   4eeec:	18eb883a 	add	r21,r3,r3
   4eef0:	ad6b883a 	add	r21,r21,r21
   4eef4:	10c00504 	addi	r3,r2,20
   4eef8:	1d6b883a 	add	r21,r3,r21
   4eefc:	d8c00115 	stw	r3,4(sp)
   4ef00:	dd400315 	stw	r21,12(sp)
   4ef04:	1805883a 	mov	r2,r3
   4ef08:	1d40042e 	bgeu	r3,r21,4ef1c <__multiply+0xa0>
   4ef0c:	d8c00317 	ldw	r3,12(sp)
   4ef10:	10000015 	stw	zero,0(r2)
   4ef14:	10800104 	addi	r2,r2,4
   4ef18:	10fffc36 	bltu	r2,r3,4ef0c <__alt_data_end+0xfffea51c>
   4ef1c:	8c63883a 	add	r17,r17,r17
   4ef20:	b5800504 	addi	r22,r22,20
   4ef24:	8c63883a 	add	r17,r17,r17
   4ef28:	94800504 	addi	r18,r18,20
   4ef2c:	8421883a 	add	r16,r16,r16
   4ef30:	b463883a 	add	r17,r22,r17
   4ef34:	8421883a 	add	r16,r16,r16
   4ef38:	dd800015 	stw	r22,0(sp)
   4ef3c:	dc800415 	stw	r18,16(sp)
   4ef40:	dc400515 	stw	r17,20(sp)
   4ef44:	9429883a 	add	r20,r18,r16
   4ef48:	b4404f2e 	bgeu	r22,r17,4f088 <__multiply+0x20c>
   4ef4c:	d8c00017 	ldw	r3,0(sp)
   4ef50:	1c800017 	ldw	r18,0(r3)
   4ef54:	943fffcc 	andi	r16,r18,65535
   4ef58:	80001e26 	beq	r16,zero,4efd4 <__multiply+0x158>
   4ef5c:	dd800117 	ldw	r22,4(sp)
   4ef60:	dd400417 	ldw	r21,16(sp)
   4ef64:	0025883a 	mov	r18,zero
   4ef68:	adc00017 	ldw	r23,0(r21)
   4ef6c:	b4c00017 	ldw	r19,0(r22)
   4ef70:	800b883a 	mov	r5,r16
   4ef74:	b93fffcc 	andi	r4,r23,65535
   4ef78:	00453200 	call	45320 <__mulsi3>
   4ef7c:	9c7fffcc 	andi	r17,r19,65535
   4ef80:	8885883a 	add	r2,r17,r2
   4ef84:	b808d43a 	srli	r4,r23,16
   4ef88:	14a3883a 	add	r17,r2,r18
   4ef8c:	9826d43a 	srli	r19,r19,16
   4ef90:	8824d43a 	srli	r18,r17,16
   4ef94:	800b883a 	mov	r5,r16
   4ef98:	00453200 	call	45320 <__mulsi3>
   4ef9c:	9885883a 	add	r2,r19,r2
   4efa0:	14a7883a 	add	r19,r2,r18
   4efa4:	88ffffcc 	andi	r3,r17,65535
   4efa8:	9822943a 	slli	r17,r19,16
   4efac:	ad400104 	addi	r21,r21,4
   4efb0:	b005883a 	mov	r2,r22
   4efb4:	88c6b03a 	or	r3,r17,r3
   4efb8:	b0c00015 	stw	r3,0(r22)
   4efbc:	9824d43a 	srli	r18,r19,16
   4efc0:	b5800104 	addi	r22,r22,4
   4efc4:	ad3fe836 	bltu	r21,r20,4ef68 <__alt_data_end+0xfffea578>
   4efc8:	d8c00017 	ldw	r3,0(sp)
   4efcc:	14800115 	stw	r18,4(r2)
   4efd0:	1c800017 	ldw	r18,0(r3)
   4efd4:	9024d43a 	srli	r18,r18,16
   4efd8:	90002226 	beq	r18,zero,4f064 <__multiply+0x1e8>
   4efdc:	d8c00117 	ldw	r3,4(sp)
   4efe0:	dd800417 	ldw	r22,16(sp)
   4efe4:	002f883a 	mov	r23,zero
   4efe8:	1f000017 	ldw	fp,0(r3)
   4efec:	1823883a 	mov	r17,r3
   4eff0:	182b883a 	mov	r21,r3
   4eff4:	e021883a 	mov	r16,fp
   4eff8:	00000106 	br	4f000 <__multiply+0x184>
   4effc:	982b883a 	mov	r21,r19
   4f000:	b100000b 	ldhu	r4,0(r22)
   4f004:	8020d43a 	srli	r16,r16,16
   4f008:	900b883a 	mov	r5,r18
   4f00c:	00453200 	call	45320 <__mulsi3>
   4f010:	1405883a 	add	r2,r2,r16
   4f014:	15ef883a 	add	r23,r2,r23
   4f018:	b804943a 	slli	r2,r23,16
   4f01c:	e0ffffcc 	andi	r3,fp,65535
   4f020:	8c400104 	addi	r17,r17,4
   4f024:	10c6b03a 	or	r3,r2,r3
   4f028:	88ffff15 	stw	r3,-4(r17)
   4f02c:	b5800104 	addi	r22,r22,4
   4f030:	b13fff17 	ldw	r4,-4(r22)
   4f034:	acc00104 	addi	r19,r21,4
   4f038:	900b883a 	mov	r5,r18
   4f03c:	2008d43a 	srli	r4,r4,16
   4f040:	9c000017 	ldw	r16,0(r19)
   4f044:	00453200 	call	45320 <__mulsi3>
   4f048:	b806d43a 	srli	r3,r23,16
   4f04c:	813fffcc 	andi	r4,r16,65535
   4f050:	1105883a 	add	r2,r2,r4
   4f054:	10f9883a 	add	fp,r2,r3
   4f058:	e02ed43a 	srli	r23,fp,16
   4f05c:	b53fe736 	bltu	r22,r20,4effc <__alt_data_end+0xfffea60c>
   4f060:	af000115 	stw	fp,4(r21)
   4f064:	d8c00017 	ldw	r3,0(sp)
   4f068:	d9000517 	ldw	r4,20(sp)
   4f06c:	18c00104 	addi	r3,r3,4
   4f070:	d8c00015 	stw	r3,0(sp)
   4f074:	d8c00117 	ldw	r3,4(sp)
   4f078:	18c00104 	addi	r3,r3,4
   4f07c:	d8c00115 	stw	r3,4(sp)
   4f080:	d8c00017 	ldw	r3,0(sp)
   4f084:	193fb136 	bltu	r3,r4,4ef4c <__alt_data_end+0xfffea55c>
   4f088:	d8c00217 	ldw	r3,8(sp)
   4f08c:	00c00c0e 	bge	zero,r3,4f0c0 <__multiply+0x244>
   4f090:	d8c00317 	ldw	r3,12(sp)
   4f094:	18bfff17 	ldw	r2,-4(r3)
   4f098:	1d7fff04 	addi	r21,r3,-4
   4f09c:	10000326 	beq	r2,zero,4f0ac <__multiply+0x230>
   4f0a0:	00000706 	br	4f0c0 <__multiply+0x244>
   4f0a4:	a8800017 	ldw	r2,0(r21)
   4f0a8:	1000051e 	bne	r2,zero,4f0c0 <__multiply+0x244>
   4f0ac:	d8c00217 	ldw	r3,8(sp)
   4f0b0:	ad7fff04 	addi	r21,r21,-4
   4f0b4:	18ffffc4 	addi	r3,r3,-1
   4f0b8:	d8c00215 	stw	r3,8(sp)
   4f0bc:	183ff91e 	bne	r3,zero,4f0a4 <__alt_data_end+0xfffea6b4>
   4f0c0:	d8c00617 	ldw	r3,24(sp)
   4f0c4:	d9000217 	ldw	r4,8(sp)
   4f0c8:	1805883a 	mov	r2,r3
   4f0cc:	19000415 	stw	r4,16(r3)
   4f0d0:	dfc01017 	ldw	ra,64(sp)
   4f0d4:	df000f17 	ldw	fp,60(sp)
   4f0d8:	ddc00e17 	ldw	r23,56(sp)
   4f0dc:	dd800d17 	ldw	r22,52(sp)
   4f0e0:	dd400c17 	ldw	r21,48(sp)
   4f0e4:	dd000b17 	ldw	r20,44(sp)
   4f0e8:	dcc00a17 	ldw	r19,40(sp)
   4f0ec:	dc800917 	ldw	r18,36(sp)
   4f0f0:	dc400817 	ldw	r17,32(sp)
   4f0f4:	dc000717 	ldw	r16,28(sp)
   4f0f8:	dec01104 	addi	sp,sp,68
   4f0fc:	f800283a 	ret
   4f100:	3025883a 	mov	r18,r6
   4f104:	282d883a 	mov	r22,r5
   4f108:	003f6f06 	br	4eec8 <__alt_data_end+0xfffea4d8>

0004f10c <__pow5mult>:
   4f10c:	defffa04 	addi	sp,sp,-24
   4f110:	dcc00315 	stw	r19,12(sp)
   4f114:	dc800215 	stw	r18,8(sp)
   4f118:	dc000015 	stw	r16,0(sp)
   4f11c:	dfc00515 	stw	ra,20(sp)
   4f120:	dd000415 	stw	r20,16(sp)
   4f124:	dc400115 	stw	r17,4(sp)
   4f128:	308000cc 	andi	r2,r6,3
   4f12c:	3021883a 	mov	r16,r6
   4f130:	2027883a 	mov	r19,r4
   4f134:	2825883a 	mov	r18,r5
   4f138:	10002e1e 	bne	r2,zero,4f1f4 <__pow5mult+0xe8>
   4f13c:	8021d0ba 	srai	r16,r16,2
   4f140:	80001a26 	beq	r16,zero,4f1ac <__pow5mult+0xa0>
   4f144:	9c401217 	ldw	r17,72(r19)
   4f148:	8800061e 	bne	r17,zero,4f164 <__pow5mult+0x58>
   4f14c:	00003406 	br	4f220 <__pow5mult+0x114>
   4f150:	8021d07a 	srai	r16,r16,1
   4f154:	80001526 	beq	r16,zero,4f1ac <__pow5mult+0xa0>
   4f158:	88800017 	ldw	r2,0(r17)
   4f15c:	10001c26 	beq	r2,zero,4f1d0 <__pow5mult+0xc4>
   4f160:	1023883a 	mov	r17,r2
   4f164:	80c0004c 	andi	r3,r16,1
   4f168:	183ff926 	beq	r3,zero,4f150 <__alt_data_end+0xfffea760>
   4f16c:	900b883a 	mov	r5,r18
   4f170:	880d883a 	mov	r6,r17
   4f174:	9809883a 	mov	r4,r19
   4f178:	004ee7c0 	call	4ee7c <__multiply>
   4f17c:	90001b26 	beq	r18,zero,4f1ec <__pow5mult+0xe0>
   4f180:	91c00117 	ldw	r7,4(r18)
   4f184:	98c01317 	ldw	r3,76(r19)
   4f188:	8021d07a 	srai	r16,r16,1
   4f18c:	39cf883a 	add	r7,r7,r7
   4f190:	39cf883a 	add	r7,r7,r7
   4f194:	19c7883a 	add	r3,r3,r7
   4f198:	19000017 	ldw	r4,0(r3)
   4f19c:	91000015 	stw	r4,0(r18)
   4f1a0:	1c800015 	stw	r18,0(r3)
   4f1a4:	1025883a 	mov	r18,r2
   4f1a8:	803feb1e 	bne	r16,zero,4f158 <__alt_data_end+0xfffea768>
   4f1ac:	9005883a 	mov	r2,r18
   4f1b0:	dfc00517 	ldw	ra,20(sp)
   4f1b4:	dd000417 	ldw	r20,16(sp)
   4f1b8:	dcc00317 	ldw	r19,12(sp)
   4f1bc:	dc800217 	ldw	r18,8(sp)
   4f1c0:	dc400117 	ldw	r17,4(sp)
   4f1c4:	dc000017 	ldw	r16,0(sp)
   4f1c8:	dec00604 	addi	sp,sp,24
   4f1cc:	f800283a 	ret
   4f1d0:	9809883a 	mov	r4,r19
   4f1d4:	880b883a 	mov	r5,r17
   4f1d8:	880d883a 	mov	r6,r17
   4f1dc:	004ee7c0 	call	4ee7c <__multiply>
   4f1e0:	88800015 	stw	r2,0(r17)
   4f1e4:	10000015 	stw	zero,0(r2)
   4f1e8:	003fdd06 	br	4f160 <__alt_data_end+0xfffea770>
   4f1ec:	1025883a 	mov	r18,r2
   4f1f0:	003fd706 	br	4f150 <__alt_data_end+0xfffea760>
   4f1f4:	10bfffc4 	addi	r2,r2,-1
   4f1f8:	1085883a 	add	r2,r2,r2
   4f1fc:	00c001b4 	movhi	r3,6
   4f200:	18e4b404 	addi	r3,r3,-27952
   4f204:	1085883a 	add	r2,r2,r2
   4f208:	1885883a 	add	r2,r3,r2
   4f20c:	11800017 	ldw	r6,0(r2)
   4f210:	000f883a 	mov	r7,zero
   4f214:	004eae80 	call	4eae8 <__multadd>
   4f218:	1025883a 	mov	r18,r2
   4f21c:	003fc706 	br	4f13c <__alt_data_end+0xfffea74c>
   4f220:	05000044 	movi	r20,1
   4f224:	9809883a 	mov	r4,r19
   4f228:	a00b883a 	mov	r5,r20
   4f22c:	004ea180 	call	4ea18 <_Balloc>
   4f230:	1023883a 	mov	r17,r2
   4f234:	00809c44 	movi	r2,625
   4f238:	88800515 	stw	r2,20(r17)
   4f23c:	8d000415 	stw	r20,16(r17)
   4f240:	9c401215 	stw	r17,72(r19)
   4f244:	88000015 	stw	zero,0(r17)
   4f248:	003fc606 	br	4f164 <__alt_data_end+0xfffea774>

0004f24c <__lshift>:
   4f24c:	defff904 	addi	sp,sp,-28
   4f250:	dd000415 	stw	r20,16(sp)
   4f254:	dcc00315 	stw	r19,12(sp)
   4f258:	3029d17a 	srai	r20,r6,5
   4f25c:	2cc00417 	ldw	r19,16(r5)
   4f260:	28800217 	ldw	r2,8(r5)
   4f264:	dd400515 	stw	r21,20(sp)
   4f268:	a4e7883a 	add	r19,r20,r19
   4f26c:	dc800215 	stw	r18,8(sp)
   4f270:	dc400115 	stw	r17,4(sp)
   4f274:	dc000015 	stw	r16,0(sp)
   4f278:	dfc00615 	stw	ra,24(sp)
   4f27c:	9c000044 	addi	r16,r19,1
   4f280:	2823883a 	mov	r17,r5
   4f284:	302b883a 	mov	r21,r6
   4f288:	2025883a 	mov	r18,r4
   4f28c:	29400117 	ldw	r5,4(r5)
   4f290:	1400030e 	bge	r2,r16,4f2a0 <__lshift+0x54>
   4f294:	1085883a 	add	r2,r2,r2
   4f298:	29400044 	addi	r5,r5,1
   4f29c:	143ffd16 	blt	r2,r16,4f294 <__alt_data_end+0xfffea8a4>
   4f2a0:	9009883a 	mov	r4,r18
   4f2a4:	004ea180 	call	4ea18 <_Balloc>
   4f2a8:	11c00504 	addi	r7,r2,20
   4f2ac:	0500090e 	bge	zero,r20,4f2d4 <__lshift+0x88>
   4f2b0:	3811883a 	mov	r8,r7
   4f2b4:	0007883a 	mov	r3,zero
   4f2b8:	40000015 	stw	zero,0(r8)
   4f2bc:	18c00044 	addi	r3,r3,1
   4f2c0:	42000104 	addi	r8,r8,4
   4f2c4:	1d3ffc1e 	bne	r3,r20,4f2b8 <__alt_data_end+0xfffea8c8>
   4f2c8:	18c7883a 	add	r3,r3,r3
   4f2cc:	18c7883a 	add	r3,r3,r3
   4f2d0:	38cf883a 	add	r7,r7,r3
   4f2d4:	89000417 	ldw	r4,16(r17)
   4f2d8:	88c00504 	addi	r3,r17,20
   4f2dc:	a98007cc 	andi	r6,r21,31
   4f2e0:	2109883a 	add	r4,r4,r4
   4f2e4:	2109883a 	add	r4,r4,r4
   4f2e8:	1909883a 	add	r4,r3,r4
   4f2ec:	30002326 	beq	r6,zero,4f37c <__lshift+0x130>
   4f2f0:	01400804 	movi	r5,32
   4f2f4:	298bc83a 	sub	r5,r5,r6
   4f2f8:	0013883a 	mov	r9,zero
   4f2fc:	1a000017 	ldw	r8,0(r3)
   4f300:	3815883a 	mov	r10,r7
   4f304:	39c00104 	addi	r7,r7,4
   4f308:	4190983a 	sll	r8,r8,r6
   4f30c:	18c00104 	addi	r3,r3,4
   4f310:	4a10b03a 	or	r8,r9,r8
   4f314:	3a3fff15 	stw	r8,-4(r7)
   4f318:	1a3fff17 	ldw	r8,-4(r3)
   4f31c:	4152d83a 	srl	r9,r8,r5
   4f320:	193ff636 	bltu	r3,r4,4f2fc <__alt_data_end+0xfffea90c>
   4f324:	52400115 	stw	r9,4(r10)
   4f328:	48000126 	beq	r9,zero,4f330 <__lshift+0xe4>
   4f32c:	9c000084 	addi	r16,r19,2
   4f330:	89000117 	ldw	r4,4(r17)
   4f334:	90c01317 	ldw	r3,76(r18)
   4f338:	843fffc4 	addi	r16,r16,-1
   4f33c:	2109883a 	add	r4,r4,r4
   4f340:	2109883a 	add	r4,r4,r4
   4f344:	1907883a 	add	r3,r3,r4
   4f348:	19000017 	ldw	r4,0(r3)
   4f34c:	14000415 	stw	r16,16(r2)
   4f350:	89000015 	stw	r4,0(r17)
   4f354:	1c400015 	stw	r17,0(r3)
   4f358:	dfc00617 	ldw	ra,24(sp)
   4f35c:	dd400517 	ldw	r21,20(sp)
   4f360:	dd000417 	ldw	r20,16(sp)
   4f364:	dcc00317 	ldw	r19,12(sp)
   4f368:	dc800217 	ldw	r18,8(sp)
   4f36c:	dc400117 	ldw	r17,4(sp)
   4f370:	dc000017 	ldw	r16,0(sp)
   4f374:	dec00704 	addi	sp,sp,28
   4f378:	f800283a 	ret
   4f37c:	19400017 	ldw	r5,0(r3)
   4f380:	39c00104 	addi	r7,r7,4
   4f384:	18c00104 	addi	r3,r3,4
   4f388:	397fff15 	stw	r5,-4(r7)
   4f38c:	193ffb36 	bltu	r3,r4,4f37c <__alt_data_end+0xfffea98c>
   4f390:	003fe706 	br	4f330 <__alt_data_end+0xfffea940>

0004f394 <__mcmp>:
   4f394:	20800417 	ldw	r2,16(r4)
   4f398:	28c00417 	ldw	r3,16(r5)
   4f39c:	10c5c83a 	sub	r2,r2,r3
   4f3a0:	1000111e 	bne	r2,zero,4f3e8 <__mcmp+0x54>
   4f3a4:	18c7883a 	add	r3,r3,r3
   4f3a8:	18c7883a 	add	r3,r3,r3
   4f3ac:	21000504 	addi	r4,r4,20
   4f3b0:	29400504 	addi	r5,r5,20
   4f3b4:	20c5883a 	add	r2,r4,r3
   4f3b8:	28cb883a 	add	r5,r5,r3
   4f3bc:	00000106 	br	4f3c4 <__mcmp+0x30>
   4f3c0:	20800a2e 	bgeu	r4,r2,4f3ec <__mcmp+0x58>
   4f3c4:	10bfff04 	addi	r2,r2,-4
   4f3c8:	297fff04 	addi	r5,r5,-4
   4f3cc:	11800017 	ldw	r6,0(r2)
   4f3d0:	28c00017 	ldw	r3,0(r5)
   4f3d4:	30fffa26 	beq	r6,r3,4f3c0 <__alt_data_end+0xfffea9d0>
   4f3d8:	30c00236 	bltu	r6,r3,4f3e4 <__mcmp+0x50>
   4f3dc:	00800044 	movi	r2,1
   4f3e0:	f800283a 	ret
   4f3e4:	00bfffc4 	movi	r2,-1
   4f3e8:	f800283a 	ret
   4f3ec:	0005883a 	mov	r2,zero
   4f3f0:	f800283a 	ret

0004f3f4 <__mdiff>:
   4f3f4:	defffb04 	addi	sp,sp,-20
   4f3f8:	dc000015 	stw	r16,0(sp)
   4f3fc:	2821883a 	mov	r16,r5
   4f400:	dcc00315 	stw	r19,12(sp)
   4f404:	300b883a 	mov	r5,r6
   4f408:	2027883a 	mov	r19,r4
   4f40c:	8009883a 	mov	r4,r16
   4f410:	dc800215 	stw	r18,8(sp)
   4f414:	dfc00415 	stw	ra,16(sp)
   4f418:	dc400115 	stw	r17,4(sp)
   4f41c:	3025883a 	mov	r18,r6
   4f420:	004f3940 	call	4f394 <__mcmp>
   4f424:	10005226 	beq	r2,zero,4f570 <__mdiff+0x17c>
   4f428:	10004c16 	blt	r2,zero,4f55c <__mdiff+0x168>
   4f42c:	0023883a 	mov	r17,zero
   4f430:	81400117 	ldw	r5,4(r16)
   4f434:	9809883a 	mov	r4,r19
   4f438:	004ea180 	call	4ea18 <_Balloc>
   4f43c:	83400417 	ldw	r13,16(r16)
   4f440:	93800417 	ldw	r14,16(r18)
   4f444:	81000504 	addi	r4,r16,20
   4f448:	6b59883a 	add	r12,r13,r13
   4f44c:	739d883a 	add	r14,r14,r14
   4f450:	6319883a 	add	r12,r12,r12
   4f454:	91800504 	addi	r6,r18,20
   4f458:	739d883a 	add	r14,r14,r14
   4f45c:	14400315 	stw	r17,12(r2)
   4f460:	2319883a 	add	r12,r4,r12
   4f464:	339d883a 	add	r14,r6,r14
   4f468:	12400504 	addi	r9,r2,20
   4f46c:	0007883a 	mov	r3,zero
   4f470:	22000017 	ldw	r8,0(r4)
   4f474:	32800017 	ldw	r10,0(r6)
   4f478:	4ac00104 	addi	r11,r9,4
   4f47c:	41ffffcc 	andi	r7,r8,65535
   4f480:	38c7883a 	add	r3,r7,r3
   4f484:	51ffffcc 	andi	r7,r10,65535
   4f488:	19cfc83a 	sub	r7,r3,r7
   4f48c:	4010d43a 	srli	r8,r8,16
   4f490:	5014d43a 	srli	r10,r10,16
   4f494:	3807d43a 	srai	r3,r7,16
   4f498:	39ffffcc 	andi	r7,r7,65535
   4f49c:	4291c83a 	sub	r8,r8,r10
   4f4a0:	40c7883a 	add	r3,r8,r3
   4f4a4:	1810943a 	slli	r8,r3,16
   4f4a8:	31800104 	addi	r6,r6,4
   4f4ac:	21000104 	addi	r4,r4,4
   4f4b0:	41ceb03a 	or	r7,r8,r7
   4f4b4:	49c00015 	stw	r7,0(r9)
   4f4b8:	1807d43a 	srai	r3,r3,16
   4f4bc:	580b883a 	mov	r5,r11
   4f4c0:	5813883a 	mov	r9,r11
   4f4c4:	33bfea36 	bltu	r6,r14,4f470 <__alt_data_end+0xfffeaa80>
   4f4c8:	2011883a 	mov	r8,r4
   4f4cc:	2300152e 	bgeu	r4,r12,4f524 <__mdiff+0x130>
   4f4d0:	21400017 	ldw	r5,0(r4)
   4f4d4:	4a400104 	addi	r9,r9,4
   4f4d8:	21000104 	addi	r4,r4,4
   4f4dc:	29ffffcc 	andi	r7,r5,65535
   4f4e0:	38c7883a 	add	r3,r7,r3
   4f4e4:	280ad43a 	srli	r5,r5,16
   4f4e8:	180dd43a 	srai	r6,r3,16
   4f4ec:	19ffffcc 	andi	r7,r3,65535
   4f4f0:	3147883a 	add	r3,r6,r5
   4f4f4:	180a943a 	slli	r5,r3,16
   4f4f8:	1807d43a 	srai	r3,r3,16
   4f4fc:	29ceb03a 	or	r7,r5,r7
   4f500:	49ffff15 	stw	r7,-4(r9)
   4f504:	233ff236 	bltu	r4,r12,4f4d0 <__alt_data_end+0xfffeaae0>
   4f508:	0206303a 	nor	r3,zero,r8
   4f50c:	1b07883a 	add	r3,r3,r12
   4f510:	1806d0ba 	srli	r3,r3,2
   4f514:	18c00044 	addi	r3,r3,1
   4f518:	18c7883a 	add	r3,r3,r3
   4f51c:	18c7883a 	add	r3,r3,r3
   4f520:	58cb883a 	add	r5,r11,r3
   4f524:	28ffff04 	addi	r3,r5,-4
   4f528:	3800041e 	bne	r7,zero,4f53c <__mdiff+0x148>
   4f52c:	18ffff04 	addi	r3,r3,-4
   4f530:	19000017 	ldw	r4,0(r3)
   4f534:	6b7fffc4 	addi	r13,r13,-1
   4f538:	203ffc26 	beq	r4,zero,4f52c <__alt_data_end+0xfffeab3c>
   4f53c:	13400415 	stw	r13,16(r2)
   4f540:	dfc00417 	ldw	ra,16(sp)
   4f544:	dcc00317 	ldw	r19,12(sp)
   4f548:	dc800217 	ldw	r18,8(sp)
   4f54c:	dc400117 	ldw	r17,4(sp)
   4f550:	dc000017 	ldw	r16,0(sp)
   4f554:	dec00504 	addi	sp,sp,20
   4f558:	f800283a 	ret
   4f55c:	8005883a 	mov	r2,r16
   4f560:	04400044 	movi	r17,1
   4f564:	9021883a 	mov	r16,r18
   4f568:	1025883a 	mov	r18,r2
   4f56c:	003fb006 	br	4f430 <__alt_data_end+0xfffeaa40>
   4f570:	9809883a 	mov	r4,r19
   4f574:	000b883a 	mov	r5,zero
   4f578:	004ea180 	call	4ea18 <_Balloc>
   4f57c:	00c00044 	movi	r3,1
   4f580:	10c00415 	stw	r3,16(r2)
   4f584:	10000515 	stw	zero,20(r2)
   4f588:	003fed06 	br	4f540 <__alt_data_end+0xfffeab50>

0004f58c <__ulp>:
   4f58c:	295ffc2c 	andhi	r5,r5,32752
   4f590:	00bf3034 	movhi	r2,64704
   4f594:	2887883a 	add	r3,r5,r2
   4f598:	00c0020e 	bge	zero,r3,4f5a4 <__ulp+0x18>
   4f59c:	0005883a 	mov	r2,zero
   4f5a0:	f800283a 	ret
   4f5a4:	00c7c83a 	sub	r3,zero,r3
   4f5a8:	180bd53a 	srai	r5,r3,20
   4f5ac:	008004c4 	movi	r2,19
   4f5b0:	11400a0e 	bge	r2,r5,4f5dc <__ulp+0x50>
   4f5b4:	00800c84 	movi	r2,50
   4f5b8:	0007883a 	mov	r3,zero
   4f5bc:	11400516 	blt	r2,r5,4f5d4 <__ulp+0x48>
   4f5c0:	00800cc4 	movi	r2,51
   4f5c4:	114bc83a 	sub	r5,r2,r5
   4f5c8:	00800044 	movi	r2,1
   4f5cc:	1144983a 	sll	r2,r2,r5
   4f5d0:	f800283a 	ret
   4f5d4:	00800044 	movi	r2,1
   4f5d8:	f800283a 	ret
   4f5dc:	00800234 	movhi	r2,8
   4f5e0:	1147d83a 	sra	r3,r2,r5
   4f5e4:	0005883a 	mov	r2,zero
   4f5e8:	f800283a 	ret

0004f5ec <__b2d>:
   4f5ec:	defffa04 	addi	sp,sp,-24
   4f5f0:	dc000015 	stw	r16,0(sp)
   4f5f4:	24000417 	ldw	r16,16(r4)
   4f5f8:	dc400115 	stw	r17,4(sp)
   4f5fc:	24400504 	addi	r17,r4,20
   4f600:	8421883a 	add	r16,r16,r16
   4f604:	8421883a 	add	r16,r16,r16
   4f608:	8c21883a 	add	r16,r17,r16
   4f60c:	dc800215 	stw	r18,8(sp)
   4f610:	84bfff17 	ldw	r18,-4(r16)
   4f614:	dd000415 	stw	r20,16(sp)
   4f618:	dcc00315 	stw	r19,12(sp)
   4f61c:	9009883a 	mov	r4,r18
   4f620:	2829883a 	mov	r20,r5
   4f624:	dfc00515 	stw	ra,20(sp)
   4f628:	004ed280 	call	4ed28 <__hi0bits>
   4f62c:	00c00804 	movi	r3,32
   4f630:	1887c83a 	sub	r3,r3,r2
   4f634:	a0c00015 	stw	r3,0(r20)
   4f638:	00c00284 	movi	r3,10
   4f63c:	84ffff04 	addi	r19,r16,-4
   4f640:	18801216 	blt	r3,r2,4f68c <__b2d+0xa0>
   4f644:	014002c4 	movi	r5,11
   4f648:	2889c83a 	sub	r4,r5,r2
   4f64c:	9106d83a 	srl	r3,r18,r4
   4f650:	18cffc34 	orhi	r3,r3,16368
   4f654:	8cc0282e 	bgeu	r17,r19,4f6f8 <__b2d+0x10c>
   4f658:	817ffe17 	ldw	r5,-8(r16)
   4f65c:	290ad83a 	srl	r5,r5,r4
   4f660:	10800544 	addi	r2,r2,21
   4f664:	9084983a 	sll	r2,r18,r2
   4f668:	2884b03a 	or	r2,r5,r2
   4f66c:	dfc00517 	ldw	ra,20(sp)
   4f670:	dd000417 	ldw	r20,16(sp)
   4f674:	dcc00317 	ldw	r19,12(sp)
   4f678:	dc800217 	ldw	r18,8(sp)
   4f67c:	dc400117 	ldw	r17,4(sp)
   4f680:	dc000017 	ldw	r16,0(sp)
   4f684:	dec00604 	addi	sp,sp,24
   4f688:	f800283a 	ret
   4f68c:	113ffd44 	addi	r4,r2,-11
   4f690:	8cc00f2e 	bgeu	r17,r19,4f6d0 <__b2d+0xe4>
   4f694:	81bffe04 	addi	r6,r16,-8
   4f698:	817ffe17 	ldw	r5,-8(r16)
   4f69c:	20001326 	beq	r4,zero,4f6ec <__b2d+0x100>
   4f6a0:	00c00ac4 	movi	r3,43
   4f6a4:	1885c83a 	sub	r2,r3,r2
   4f6a8:	2886d83a 	srl	r3,r5,r2
   4f6ac:	9124983a 	sll	r18,r18,r4
   4f6b0:	90e4b03a 	or	r18,r18,r3
   4f6b4:	90cffc34 	orhi	r3,r18,16368
   4f6b8:	8980112e 	bgeu	r17,r6,4f700 <__b2d+0x114>
   4f6bc:	81bffd17 	ldw	r6,-12(r16)
   4f6c0:	308cd83a 	srl	r6,r6,r2
   4f6c4:	2904983a 	sll	r2,r5,r4
   4f6c8:	1184b03a 	or	r2,r2,r6
   4f6cc:	003fe706 	br	4f66c <__alt_data_end+0xfffeac7c>
   4f6d0:	20000526 	beq	r4,zero,4f6e8 <__b2d+0xfc>
   4f6d4:	9124983a 	sll	r18,r18,r4
   4f6d8:	000d883a 	mov	r6,zero
   4f6dc:	000b883a 	mov	r5,zero
   4f6e0:	90cffc34 	orhi	r3,r18,16368
   4f6e4:	003ff706 	br	4f6c4 <__alt_data_end+0xfffeacd4>
   4f6e8:	000b883a 	mov	r5,zero
   4f6ec:	90cffc34 	orhi	r3,r18,16368
   4f6f0:	2805883a 	mov	r2,r5
   4f6f4:	003fdd06 	br	4f66c <__alt_data_end+0xfffeac7c>
   4f6f8:	000b883a 	mov	r5,zero
   4f6fc:	003fd806 	br	4f660 <__alt_data_end+0xfffeac70>
   4f700:	000d883a 	mov	r6,zero
   4f704:	003fef06 	br	4f6c4 <__alt_data_end+0xfffeacd4>

0004f708 <__d2b>:
   4f708:	defff704 	addi	sp,sp,-36
   4f70c:	dc000215 	stw	r16,8(sp)
   4f710:	3021883a 	mov	r16,r6
   4f714:	dc400315 	stw	r17,12(sp)
   4f718:	8022907a 	slli	r17,r16,1
   4f71c:	dd400715 	stw	r21,28(sp)
   4f720:	282b883a 	mov	r21,r5
   4f724:	01400044 	movi	r5,1
   4f728:	dd000615 	stw	r20,24(sp)
   4f72c:	dcc00515 	stw	r19,20(sp)
   4f730:	dc800415 	stw	r18,16(sp)
   4f734:	dfc00815 	stw	ra,32(sp)
   4f738:	3829883a 	mov	r20,r7
   4f73c:	dc800917 	ldw	r18,36(sp)
   4f740:	8822d57a 	srli	r17,r17,21
   4f744:	004ea180 	call	4ea18 <_Balloc>
   4f748:	1027883a 	mov	r19,r2
   4f74c:	00800434 	movhi	r2,16
   4f750:	10bfffc4 	addi	r2,r2,-1
   4f754:	808c703a 	and	r6,r16,r2
   4f758:	88000126 	beq	r17,zero,4f760 <__d2b+0x58>
   4f75c:	31800434 	orhi	r6,r6,16
   4f760:	d9800015 	stw	r6,0(sp)
   4f764:	a8001f26 	beq	r21,zero,4f7e4 <__d2b+0xdc>
   4f768:	d9000104 	addi	r4,sp,4
   4f76c:	dd400115 	stw	r21,4(sp)
   4f770:	004ed900 	call	4ed90 <__lo0bits>
   4f774:	d8c00017 	ldw	r3,0(sp)
   4f778:	1000291e 	bne	r2,zero,4f820 <__d2b+0x118>
   4f77c:	d9000117 	ldw	r4,4(sp)
   4f780:	99000515 	stw	r4,20(r19)
   4f784:	1820c03a 	cmpne	r16,r3,zero
   4f788:	84000044 	addi	r16,r16,1
   4f78c:	98c00615 	stw	r3,24(r19)
   4f790:	9c000415 	stw	r16,16(r19)
   4f794:	88001b1e 	bne	r17,zero,4f804 <__d2b+0xfc>
   4f798:	800690ba 	slli	r3,r16,2
   4f79c:	10bef384 	addi	r2,r2,-1074
   4f7a0:	a0800015 	stw	r2,0(r20)
   4f7a4:	98c5883a 	add	r2,r19,r3
   4f7a8:	11000417 	ldw	r4,16(r2)
   4f7ac:	8020917a 	slli	r16,r16,5
   4f7b0:	004ed280 	call	4ed28 <__hi0bits>
   4f7b4:	8085c83a 	sub	r2,r16,r2
   4f7b8:	90800015 	stw	r2,0(r18)
   4f7bc:	9805883a 	mov	r2,r19
   4f7c0:	dfc00817 	ldw	ra,32(sp)
   4f7c4:	dd400717 	ldw	r21,28(sp)
   4f7c8:	dd000617 	ldw	r20,24(sp)
   4f7cc:	dcc00517 	ldw	r19,20(sp)
   4f7d0:	dc800417 	ldw	r18,16(sp)
   4f7d4:	dc400317 	ldw	r17,12(sp)
   4f7d8:	dc000217 	ldw	r16,8(sp)
   4f7dc:	dec00904 	addi	sp,sp,36
   4f7e0:	f800283a 	ret
   4f7e4:	d809883a 	mov	r4,sp
   4f7e8:	004ed900 	call	4ed90 <__lo0bits>
   4f7ec:	d8c00017 	ldw	r3,0(sp)
   4f7f0:	04000044 	movi	r16,1
   4f7f4:	9c000415 	stw	r16,16(r19)
   4f7f8:	98c00515 	stw	r3,20(r19)
   4f7fc:	10800804 	addi	r2,r2,32
   4f800:	883fe526 	beq	r17,zero,4f798 <__alt_data_end+0xfffeada8>
   4f804:	8c7ef344 	addi	r17,r17,-1075
   4f808:	88a3883a 	add	r17,r17,r2
   4f80c:	00c00d44 	movi	r3,53
   4f810:	a4400015 	stw	r17,0(r20)
   4f814:	1885c83a 	sub	r2,r3,r2
   4f818:	90800015 	stw	r2,0(r18)
   4f81c:	003fe706 	br	4f7bc <__alt_data_end+0xfffeadcc>
   4f820:	01000804 	movi	r4,32
   4f824:	2089c83a 	sub	r4,r4,r2
   4f828:	1908983a 	sll	r4,r3,r4
   4f82c:	d9400117 	ldw	r5,4(sp)
   4f830:	1886d83a 	srl	r3,r3,r2
   4f834:	2148b03a 	or	r4,r4,r5
   4f838:	99000515 	stw	r4,20(r19)
   4f83c:	d8c00015 	stw	r3,0(sp)
   4f840:	003fd006 	br	4f784 <__alt_data_end+0xfffead94>

0004f844 <__ratio>:
   4f844:	defff904 	addi	sp,sp,-28
   4f848:	dc400315 	stw	r17,12(sp)
   4f84c:	2823883a 	mov	r17,r5
   4f850:	d9400104 	addi	r5,sp,4
   4f854:	dfc00615 	stw	ra,24(sp)
   4f858:	dcc00515 	stw	r19,20(sp)
   4f85c:	dc800415 	stw	r18,16(sp)
   4f860:	2027883a 	mov	r19,r4
   4f864:	dc000215 	stw	r16,8(sp)
   4f868:	004f5ec0 	call	4f5ec <__b2d>
   4f86c:	8809883a 	mov	r4,r17
   4f870:	d80b883a 	mov	r5,sp
   4f874:	1025883a 	mov	r18,r2
   4f878:	1821883a 	mov	r16,r3
   4f87c:	004f5ec0 	call	4f5ec <__b2d>
   4f880:	8a400417 	ldw	r9,16(r17)
   4f884:	9a000417 	ldw	r8,16(r19)
   4f888:	100d883a 	mov	r6,r2
   4f88c:	d8800017 	ldw	r2,0(sp)
   4f890:	4251c83a 	sub	r8,r8,r9
   4f894:	4012917a 	slli	r9,r8,5
   4f898:	da000117 	ldw	r8,4(sp)
   4f89c:	4091c83a 	sub	r8,r8,r2
   4f8a0:	4251883a 	add	r8,r8,r9
   4f8a4:	02000d0e 	bge	zero,r8,4f8dc <__ratio+0x98>
   4f8a8:	4010953a 	slli	r8,r8,20
   4f8ac:	4421883a 	add	r16,r8,r16
   4f8b0:	9009883a 	mov	r4,r18
   4f8b4:	800b883a 	mov	r5,r16
   4f8b8:	180f883a 	mov	r7,r3
   4f8bc:	0045cf80 	call	45cf8 <__divdf3>
   4f8c0:	dfc00617 	ldw	ra,24(sp)
   4f8c4:	dcc00517 	ldw	r19,20(sp)
   4f8c8:	dc800417 	ldw	r18,16(sp)
   4f8cc:	dc400317 	ldw	r17,12(sp)
   4f8d0:	dc000217 	ldw	r16,8(sp)
   4f8d4:	dec00704 	addi	sp,sp,28
   4f8d8:	f800283a 	ret
   4f8dc:	4010953a 	slli	r8,r8,20
   4f8e0:	1a07c83a 	sub	r3,r3,r8
   4f8e4:	003ff206 	br	4f8b0 <__alt_data_end+0xfffeaec0>

0004f8e8 <_mprec_log10>:
   4f8e8:	defffe04 	addi	sp,sp,-8
   4f8ec:	dc000015 	stw	r16,0(sp)
   4f8f0:	dfc00115 	stw	ra,4(sp)
   4f8f4:	008005c4 	movi	r2,23
   4f8f8:	2021883a 	mov	r16,r4
   4f8fc:	11000d0e 	bge	r2,r4,4f934 <_mprec_log10+0x4c>
   4f900:	0005883a 	mov	r2,zero
   4f904:	00cffc34 	movhi	r3,16368
   4f908:	843fffc4 	addi	r16,r16,-1
   4f90c:	1009883a 	mov	r4,r2
   4f910:	180b883a 	mov	r5,r3
   4f914:	000d883a 	mov	r6,zero
   4f918:	01d00934 	movhi	r7,16420
   4f91c:	0054c940 	call	54c94 <__muldf3>
   4f920:	803ff91e 	bne	r16,zero,4f908 <__alt_data_end+0xfffeaf18>
   4f924:	dfc00117 	ldw	ra,4(sp)
   4f928:	dc000017 	ldw	r16,0(sp)
   4f92c:	dec00204 	addi	sp,sp,8
   4f930:	f800283a 	ret
   4f934:	202090fa 	slli	r16,r4,3
   4f938:	008001b4 	movhi	r2,6
   4f93c:	10a4cb04 	addi	r2,r2,-27860
   4f940:	1421883a 	add	r16,r2,r16
   4f944:	80800017 	ldw	r2,0(r16)
   4f948:	80c00117 	ldw	r3,4(r16)
   4f94c:	dfc00117 	ldw	ra,4(sp)
   4f950:	dc000017 	ldw	r16,0(sp)
   4f954:	dec00204 	addi	sp,sp,8
   4f958:	f800283a 	ret

0004f95c <__copybits>:
   4f95c:	297fffc4 	addi	r5,r5,-1
   4f960:	280fd17a 	srai	r7,r5,5
   4f964:	30c00417 	ldw	r3,16(r6)
   4f968:	30800504 	addi	r2,r6,20
   4f96c:	39c00044 	addi	r7,r7,1
   4f970:	18c7883a 	add	r3,r3,r3
   4f974:	39cf883a 	add	r7,r7,r7
   4f978:	18c7883a 	add	r3,r3,r3
   4f97c:	39cf883a 	add	r7,r7,r7
   4f980:	10c7883a 	add	r3,r2,r3
   4f984:	21cf883a 	add	r7,r4,r7
   4f988:	10c00d2e 	bgeu	r2,r3,4f9c0 <__copybits+0x64>
   4f98c:	200b883a 	mov	r5,r4
   4f990:	12000017 	ldw	r8,0(r2)
   4f994:	29400104 	addi	r5,r5,4
   4f998:	10800104 	addi	r2,r2,4
   4f99c:	2a3fff15 	stw	r8,-4(r5)
   4f9a0:	10fffb36 	bltu	r2,r3,4f990 <__alt_data_end+0xfffeafa0>
   4f9a4:	1985c83a 	sub	r2,r3,r6
   4f9a8:	10bffac4 	addi	r2,r2,-21
   4f9ac:	1004d0ba 	srli	r2,r2,2
   4f9b0:	10800044 	addi	r2,r2,1
   4f9b4:	1085883a 	add	r2,r2,r2
   4f9b8:	1085883a 	add	r2,r2,r2
   4f9bc:	2089883a 	add	r4,r4,r2
   4f9c0:	21c0032e 	bgeu	r4,r7,4f9d0 <__copybits+0x74>
   4f9c4:	20000015 	stw	zero,0(r4)
   4f9c8:	21000104 	addi	r4,r4,4
   4f9cc:	21fffd36 	bltu	r4,r7,4f9c4 <__alt_data_end+0xfffeafd4>
   4f9d0:	f800283a 	ret

0004f9d4 <__any_on>:
   4f9d4:	20c00417 	ldw	r3,16(r4)
   4f9d8:	2805d17a 	srai	r2,r5,5
   4f9dc:	21000504 	addi	r4,r4,20
   4f9e0:	18800d0e 	bge	r3,r2,4fa18 <__any_on+0x44>
   4f9e4:	18c7883a 	add	r3,r3,r3
   4f9e8:	18c7883a 	add	r3,r3,r3
   4f9ec:	20c7883a 	add	r3,r4,r3
   4f9f0:	20c0192e 	bgeu	r4,r3,4fa58 <__any_on+0x84>
   4f9f4:	18bfff17 	ldw	r2,-4(r3)
   4f9f8:	18ffff04 	addi	r3,r3,-4
   4f9fc:	1000041e 	bne	r2,zero,4fa10 <__any_on+0x3c>
   4fa00:	20c0142e 	bgeu	r4,r3,4fa54 <__any_on+0x80>
   4fa04:	18ffff04 	addi	r3,r3,-4
   4fa08:	19400017 	ldw	r5,0(r3)
   4fa0c:	283ffc26 	beq	r5,zero,4fa00 <__alt_data_end+0xfffeb010>
   4fa10:	00800044 	movi	r2,1
   4fa14:	f800283a 	ret
   4fa18:	10c00a0e 	bge	r2,r3,4fa44 <__any_on+0x70>
   4fa1c:	1085883a 	add	r2,r2,r2
   4fa20:	1085883a 	add	r2,r2,r2
   4fa24:	294007cc 	andi	r5,r5,31
   4fa28:	2087883a 	add	r3,r4,r2
   4fa2c:	283ff026 	beq	r5,zero,4f9f0 <__alt_data_end+0xfffeb000>
   4fa30:	19800017 	ldw	r6,0(r3)
   4fa34:	3144d83a 	srl	r2,r6,r5
   4fa38:	114a983a 	sll	r5,r2,r5
   4fa3c:	29bff41e 	bne	r5,r6,4fa10 <__alt_data_end+0xfffeb020>
   4fa40:	003feb06 	br	4f9f0 <__alt_data_end+0xfffeb000>
   4fa44:	1085883a 	add	r2,r2,r2
   4fa48:	1085883a 	add	r2,r2,r2
   4fa4c:	2087883a 	add	r3,r4,r2
   4fa50:	003fe706 	br	4f9f0 <__alt_data_end+0xfffeb000>
   4fa54:	f800283a 	ret
   4fa58:	0005883a 	mov	r2,zero
   4fa5c:	f800283a 	ret

0004fa60 <_putc_r>:
   4fa60:	defffc04 	addi	sp,sp,-16
   4fa64:	dc000215 	stw	r16,8(sp)
   4fa68:	dfc00315 	stw	ra,12(sp)
   4fa6c:	2021883a 	mov	r16,r4
   4fa70:	20000226 	beq	r4,zero,4fa7c <_putc_r+0x1c>
   4fa74:	20800e17 	ldw	r2,56(r4)
   4fa78:	10001b26 	beq	r2,zero,4fae8 <_putc_r+0x88>
   4fa7c:	30800217 	ldw	r2,8(r6)
   4fa80:	10bfffc4 	addi	r2,r2,-1
   4fa84:	30800215 	stw	r2,8(r6)
   4fa88:	10000a16 	blt	r2,zero,4fab4 <_putc_r+0x54>
   4fa8c:	30800017 	ldw	r2,0(r6)
   4fa90:	11400005 	stb	r5,0(r2)
   4fa94:	30800017 	ldw	r2,0(r6)
   4fa98:	10c00044 	addi	r3,r2,1
   4fa9c:	30c00015 	stw	r3,0(r6)
   4faa0:	10800003 	ldbu	r2,0(r2)
   4faa4:	dfc00317 	ldw	ra,12(sp)
   4faa8:	dc000217 	ldw	r16,8(sp)
   4faac:	dec00404 	addi	sp,sp,16
   4fab0:	f800283a 	ret
   4fab4:	30c00617 	ldw	r3,24(r6)
   4fab8:	10c00616 	blt	r2,r3,4fad4 <_putc_r+0x74>
   4fabc:	30800017 	ldw	r2,0(r6)
   4fac0:	00c00284 	movi	r3,10
   4fac4:	11400005 	stb	r5,0(r2)
   4fac8:	30800017 	ldw	r2,0(r6)
   4facc:	11400003 	ldbu	r5,0(r2)
   4fad0:	28fff11e 	bne	r5,r3,4fa98 <__alt_data_end+0xfffeb0a8>
   4fad4:	8009883a 	mov	r4,r16
   4fad8:	dfc00317 	ldw	ra,12(sp)
   4fadc:	dc000217 	ldw	r16,8(sp)
   4fae0:	dec00404 	addi	sp,sp,16
   4fae4:	0052c0c1 	jmpi	52c0c <__swbuf_r>
   4fae8:	d9400015 	stw	r5,0(sp)
   4faec:	d9800115 	stw	r6,4(sp)
   4faf0:	004dac40 	call	4dac4 <__sinit>
   4faf4:	d9800117 	ldw	r6,4(sp)
   4faf8:	d9400017 	ldw	r5,0(sp)
   4fafc:	003fdf06 	br	4fa7c <__alt_data_end+0xfffeb08c>

0004fb00 <putc>:
   4fb00:	defffc04 	addi	sp,sp,-16
   4fb04:	dc400115 	stw	r17,4(sp)
   4fb08:	044001b4 	movhi	r17,6
   4fb0c:	8c6bc704 	addi	r17,r17,-20708
   4fb10:	dc800215 	stw	r18,8(sp)
   4fb14:	2025883a 	mov	r18,r4
   4fb18:	89000017 	ldw	r4,0(r17)
   4fb1c:	dc000015 	stw	r16,0(sp)
   4fb20:	dfc00315 	stw	ra,12(sp)
   4fb24:	2821883a 	mov	r16,r5
   4fb28:	20000226 	beq	r4,zero,4fb34 <putc+0x34>
   4fb2c:	20c00e17 	ldw	r3,56(r4)
   4fb30:	18001a26 	beq	r3,zero,4fb9c <putc+0x9c>
   4fb34:	80800217 	ldw	r2,8(r16)
   4fb38:	10bfffc4 	addi	r2,r2,-1
   4fb3c:	80800215 	stw	r2,8(r16)
   4fb40:	10000c16 	blt	r2,zero,4fb74 <putc+0x74>
   4fb44:	80800017 	ldw	r2,0(r16)
   4fb48:	14800005 	stb	r18,0(r2)
   4fb4c:	80800017 	ldw	r2,0(r16)
   4fb50:	10c00044 	addi	r3,r2,1
   4fb54:	80c00015 	stw	r3,0(r16)
   4fb58:	10800003 	ldbu	r2,0(r2)
   4fb5c:	dfc00317 	ldw	ra,12(sp)
   4fb60:	dc800217 	ldw	r18,8(sp)
   4fb64:	dc400117 	ldw	r17,4(sp)
   4fb68:	dc000017 	ldw	r16,0(sp)
   4fb6c:	dec00404 	addi	sp,sp,16
   4fb70:	f800283a 	ret
   4fb74:	80c00617 	ldw	r3,24(r16)
   4fb78:	10c00a16 	blt	r2,r3,4fba4 <putc+0xa4>
   4fb7c:	80800017 	ldw	r2,0(r16)
   4fb80:	00c00284 	movi	r3,10
   4fb84:	14800005 	stb	r18,0(r2)
   4fb88:	80800017 	ldw	r2,0(r16)
   4fb8c:	11400003 	ldbu	r5,0(r2)
   4fb90:	28ffef1e 	bne	r5,r3,4fb50 <__alt_data_end+0xfffeb160>
   4fb94:	89000017 	ldw	r4,0(r17)
   4fb98:	00000406 	br	4fbac <putc+0xac>
   4fb9c:	004dac40 	call	4dac4 <__sinit>
   4fba0:	003fe406 	br	4fb34 <__alt_data_end+0xfffeb144>
   4fba4:	89000017 	ldw	r4,0(r17)
   4fba8:	900b883a 	mov	r5,r18
   4fbac:	800d883a 	mov	r6,r16
   4fbb0:	dfc00317 	ldw	ra,12(sp)
   4fbb4:	dc800217 	ldw	r18,8(sp)
   4fbb8:	dc400117 	ldw	r17,4(sp)
   4fbbc:	dc000017 	ldw	r16,0(sp)
   4fbc0:	dec00404 	addi	sp,sp,16
   4fbc4:	0052c0c1 	jmpi	52c0c <__swbuf_r>

0004fbc8 <_realloc_r>:
   4fbc8:	defff604 	addi	sp,sp,-40
   4fbcc:	dcc00315 	stw	r19,12(sp)
   4fbd0:	dc400115 	stw	r17,4(sp)
   4fbd4:	dfc00915 	stw	ra,36(sp)
   4fbd8:	df000815 	stw	fp,32(sp)
   4fbdc:	ddc00715 	stw	r23,28(sp)
   4fbe0:	dd800615 	stw	r22,24(sp)
   4fbe4:	dd400515 	stw	r21,20(sp)
   4fbe8:	dd000415 	stw	r20,16(sp)
   4fbec:	dc800215 	stw	r18,8(sp)
   4fbf0:	dc000015 	stw	r16,0(sp)
   4fbf4:	2827883a 	mov	r19,r5
   4fbf8:	3023883a 	mov	r17,r6
   4fbfc:	2800bf26 	beq	r5,zero,4fefc <_realloc_r+0x334>
   4fc00:	2025883a 	mov	r18,r4
   4fc04:	00565ac0 	call	565ac <__malloc_lock>
   4fc08:	98ffff17 	ldw	r3,-4(r19)
   4fc0c:	01bfff04 	movi	r6,-4
   4fc10:	890002c4 	addi	r4,r17,11
   4fc14:	01c00584 	movi	r7,22
   4fc18:	9d7ffe04 	addi	r21,r19,-8
   4fc1c:	19a0703a 	and	r16,r3,r6
   4fc20:	39003f2e 	bgeu	r7,r4,4fd20 <_realloc_r+0x158>
   4fc24:	053ffe04 	movi	r20,-8
   4fc28:	2528703a 	and	r20,r4,r20
   4fc2c:	a00f883a 	mov	r7,r20
   4fc30:	a0008216 	blt	r20,zero,4fe3c <_realloc_r+0x274>
   4fc34:	a4408136 	bltu	r20,r17,4fe3c <_realloc_r+0x274>
   4fc38:	81c03c0e 	bge	r16,r7,4fd2c <_realloc_r+0x164>
   4fc3c:	070001b4 	movhi	fp,6
   4fc40:	e7251804 	addi	fp,fp,-27552
   4fc44:	e1000217 	ldw	r4,8(fp)
   4fc48:	ac05883a 	add	r2,r21,r16
   4fc4c:	2080bf26 	beq	r4,r2,4ff4c <_realloc_r+0x384>
   4fc50:	11000117 	ldw	r4,4(r2)
   4fc54:	023fff84 	movi	r8,-2
   4fc58:	2210703a 	and	r8,r4,r8
   4fc5c:	1211883a 	add	r8,r2,r8
   4fc60:	41400117 	ldw	r5,4(r8)
   4fc64:	2940004c 	andi	r5,r5,1
   4fc68:	28004a1e 	bne	r5,zero,4fd94 <_realloc_r+0x1cc>
   4fc6c:	017fff04 	movi	r5,-4
   4fc70:	2148703a 	and	r4,r4,r5
   4fc74:	2409883a 	add	r4,r4,r16
   4fc78:	21c0ad0e 	bge	r4,r7,4ff30 <_realloc_r+0x368>
   4fc7c:	18c0004c 	andi	r3,r3,1
   4fc80:	18007f1e 	bne	r3,zero,4fe80 <_realloc_r+0x2b8>
   4fc84:	9dfffe17 	ldw	r23,-8(r19)
   4fc88:	adefc83a 	sub	r23,r21,r23
   4fc8c:	bd800117 	ldw	r22,4(r23)
   4fc90:	b14a703a 	and	r5,r22,r5
   4fc94:	216d883a 	add	r22,r4,r5
   4fc98:	b1c04516 	blt	r22,r7,4fdb0 <_realloc_r+0x1e8>
   4fc9c:	10c00317 	ldw	r3,12(r2)
   4fca0:	10800217 	ldw	r2,8(r2)
   4fca4:	81bfff04 	addi	r6,r16,-4
   4fca8:	bc400204 	addi	r17,r23,8
   4fcac:	10c00315 	stw	r3,12(r2)
   4fcb0:	18800215 	stw	r2,8(r3)
   4fcb4:	b9400217 	ldw	r5,8(r23)
   4fcb8:	b8c00317 	ldw	r3,12(r23)
   4fcbc:	00800904 	movi	r2,36
   4fcc0:	28c00315 	stw	r3,12(r5)
   4fcc4:	19400215 	stw	r5,8(r3)
   4fcc8:	1180ef36 	bltu	r2,r6,50088 <_realloc_r+0x4c0>
   4fccc:	008004c4 	movi	r2,19
   4fcd0:	1180da2e 	bgeu	r2,r6,5003c <_realloc_r+0x474>
   4fcd4:	98800017 	ldw	r2,0(r19)
   4fcd8:	b8800215 	stw	r2,8(r23)
   4fcdc:	98800117 	ldw	r2,4(r19)
   4fce0:	b8800315 	stw	r2,12(r23)
   4fce4:	008006c4 	movi	r2,27
   4fce8:	1180fc2e 	bgeu	r2,r6,500dc <_realloc_r+0x514>
   4fcec:	98800217 	ldw	r2,8(r19)
   4fcf0:	b8800415 	stw	r2,16(r23)
   4fcf4:	98800317 	ldw	r2,12(r19)
   4fcf8:	b8800515 	stw	r2,20(r23)
   4fcfc:	00800904 	movi	r2,36
   4fd00:	3080421e 	bne	r6,r2,4fe0c <_realloc_r+0x244>
   4fd04:	98800417 	ldw	r2,16(r19)
   4fd08:	9cc00604 	addi	r19,r19,24
   4fd0c:	b8c00804 	addi	r3,r23,32
   4fd10:	b8800615 	stw	r2,24(r23)
   4fd14:	98bfff17 	ldw	r2,-4(r19)
   4fd18:	b8800715 	stw	r2,28(r23)
   4fd1c:	00003d06 	br	4fe14 <_realloc_r+0x24c>
   4fd20:	01c00404 	movi	r7,16
   4fd24:	3829883a 	mov	r20,r7
   4fd28:	003fc206 	br	4fc34 <__alt_data_end+0xfffeb244>
   4fd2c:	9823883a 	mov	r17,r19
   4fd30:	850fc83a 	sub	r7,r16,r20
   4fd34:	008003c4 	movi	r2,15
   4fd38:	18c0004c 	andi	r3,r3,1
   4fd3c:	11c04336 	bltu	r2,r7,4fe4c <_realloc_r+0x284>
   4fd40:	1c06b03a 	or	r3,r3,r16
   4fd44:	a8c00115 	stw	r3,4(r21)
   4fd48:	ac21883a 	add	r16,r21,r16
   4fd4c:	80c00117 	ldw	r3,4(r16)
   4fd50:	18c00054 	ori	r3,r3,1
   4fd54:	80c00115 	stw	r3,4(r16)
   4fd58:	9009883a 	mov	r4,r18
   4fd5c:	00565cc0 	call	565cc <__malloc_unlock>
   4fd60:	8805883a 	mov	r2,r17
   4fd64:	dfc00917 	ldw	ra,36(sp)
   4fd68:	df000817 	ldw	fp,32(sp)
   4fd6c:	ddc00717 	ldw	r23,28(sp)
   4fd70:	dd800617 	ldw	r22,24(sp)
   4fd74:	dd400517 	ldw	r21,20(sp)
   4fd78:	dd000417 	ldw	r20,16(sp)
   4fd7c:	dcc00317 	ldw	r19,12(sp)
   4fd80:	dc800217 	ldw	r18,8(sp)
   4fd84:	dc400117 	ldw	r17,4(sp)
   4fd88:	dc000017 	ldw	r16,0(sp)
   4fd8c:	dec00a04 	addi	sp,sp,40
   4fd90:	f800283a 	ret
   4fd94:	18c0004c 	andi	r3,r3,1
   4fd98:	1800391e 	bne	r3,zero,4fe80 <_realloc_r+0x2b8>
   4fd9c:	9dfffe17 	ldw	r23,-8(r19)
   4fda0:	00bfff04 	movi	r2,-4
   4fda4:	adefc83a 	sub	r23,r21,r23
   4fda8:	b9400117 	ldw	r5,4(r23)
   4fdac:	288a703a 	and	r5,r5,r2
   4fdb0:	2c2d883a 	add	r22,r5,r16
   4fdb4:	b1c03216 	blt	r22,r7,4fe80 <_realloc_r+0x2b8>
   4fdb8:	b8800317 	ldw	r2,12(r23)
   4fdbc:	b8c00217 	ldw	r3,8(r23)
   4fdc0:	81bfff04 	addi	r6,r16,-4
   4fdc4:	01000904 	movi	r4,36
   4fdc8:	18800315 	stw	r2,12(r3)
   4fdcc:	10c00215 	stw	r3,8(r2)
   4fdd0:	bc400204 	addi	r17,r23,8
   4fdd4:	2180ac36 	bltu	r4,r6,50088 <_realloc_r+0x4c0>
   4fdd8:	008004c4 	movi	r2,19
   4fddc:	1180972e 	bgeu	r2,r6,5003c <_realloc_r+0x474>
   4fde0:	98800017 	ldw	r2,0(r19)
   4fde4:	b8800215 	stw	r2,8(r23)
   4fde8:	98800117 	ldw	r2,4(r19)
   4fdec:	b8800315 	stw	r2,12(r23)
   4fdf0:	008006c4 	movi	r2,27
   4fdf4:	1180b92e 	bgeu	r2,r6,500dc <_realloc_r+0x514>
   4fdf8:	98800217 	ldw	r2,8(r19)
   4fdfc:	b8800415 	stw	r2,16(r23)
   4fe00:	98800317 	ldw	r2,12(r19)
   4fe04:	b8800515 	stw	r2,20(r23)
   4fe08:	313fbe26 	beq	r6,r4,4fd04 <__alt_data_end+0xfffeb314>
   4fe0c:	b8c00604 	addi	r3,r23,24
   4fe10:	9cc00404 	addi	r19,r19,16
   4fe14:	98800017 	ldw	r2,0(r19)
   4fe18:	b021883a 	mov	r16,r22
   4fe1c:	b82b883a 	mov	r21,r23
   4fe20:	18800015 	stw	r2,0(r3)
   4fe24:	98800117 	ldw	r2,4(r19)
   4fe28:	18800115 	stw	r2,4(r3)
   4fe2c:	98800217 	ldw	r2,8(r19)
   4fe30:	18800215 	stw	r2,8(r3)
   4fe34:	b8c00117 	ldw	r3,4(r23)
   4fe38:	003fbd06 	br	4fd30 <__alt_data_end+0xfffeb340>
   4fe3c:	00800304 	movi	r2,12
   4fe40:	90800015 	stw	r2,0(r18)
   4fe44:	0005883a 	mov	r2,zero
   4fe48:	003fc606 	br	4fd64 <__alt_data_end+0xfffeb374>
   4fe4c:	1d06b03a 	or	r3,r3,r20
   4fe50:	ad0b883a 	add	r5,r21,r20
   4fe54:	a8c00115 	stw	r3,4(r21)
   4fe58:	38800054 	ori	r2,r7,1
   4fe5c:	28800115 	stw	r2,4(r5)
   4fe60:	29cf883a 	add	r7,r5,r7
   4fe64:	38800117 	ldw	r2,4(r7)
   4fe68:	9009883a 	mov	r4,r18
   4fe6c:	29400204 	addi	r5,r5,8
   4fe70:	10800054 	ori	r2,r2,1
   4fe74:	38800115 	stw	r2,4(r7)
   4fe78:	004dc380 	call	4dc38 <_free_r>
   4fe7c:	003fb606 	br	4fd58 <__alt_data_end+0xfffeb368>
   4fe80:	880b883a 	mov	r5,r17
   4fe84:	9009883a 	mov	r4,r18
   4fe88:	00469ac0 	call	469ac <_malloc_r>
   4fe8c:	1023883a 	mov	r17,r2
   4fe90:	1000aa26 	beq	r2,zero,5013c <_realloc_r+0x574>
   4fe94:	98ffff17 	ldw	r3,-4(r19)
   4fe98:	113ffe04 	addi	r4,r2,-8
   4fe9c:	00bfff84 	movi	r2,-2
   4fea0:	1884703a 	and	r2,r3,r2
   4fea4:	a885883a 	add	r2,r21,r2
   4fea8:	20808626 	beq	r4,r2,500c4 <_realloc_r+0x4fc>
   4feac:	81bfff04 	addi	r6,r16,-4
   4feb0:	00800904 	movi	r2,36
   4feb4:	11807036 	bltu	r2,r6,50078 <_realloc_r+0x4b0>
   4feb8:	00c004c4 	movi	r3,19
   4febc:	19805636 	bltu	r3,r6,50018 <_realloc_r+0x450>
   4fec0:	8805883a 	mov	r2,r17
   4fec4:	9807883a 	mov	r3,r19
   4fec8:	19000017 	ldw	r4,0(r3)
   4fecc:	11000015 	stw	r4,0(r2)
   4fed0:	19000117 	ldw	r4,4(r3)
   4fed4:	11000115 	stw	r4,4(r2)
   4fed8:	18c00217 	ldw	r3,8(r3)
   4fedc:	10c00215 	stw	r3,8(r2)
   4fee0:	980b883a 	mov	r5,r19
   4fee4:	9009883a 	mov	r4,r18
   4fee8:	004dc380 	call	4dc38 <_free_r>
   4feec:	9009883a 	mov	r4,r18
   4fef0:	00565cc0 	call	565cc <__malloc_unlock>
   4fef4:	8805883a 	mov	r2,r17
   4fef8:	003f9a06 	br	4fd64 <__alt_data_end+0xfffeb374>
   4fefc:	300b883a 	mov	r5,r6
   4ff00:	dfc00917 	ldw	ra,36(sp)
   4ff04:	df000817 	ldw	fp,32(sp)
   4ff08:	ddc00717 	ldw	r23,28(sp)
   4ff0c:	dd800617 	ldw	r22,24(sp)
   4ff10:	dd400517 	ldw	r21,20(sp)
   4ff14:	dd000417 	ldw	r20,16(sp)
   4ff18:	dcc00317 	ldw	r19,12(sp)
   4ff1c:	dc800217 	ldw	r18,8(sp)
   4ff20:	dc400117 	ldw	r17,4(sp)
   4ff24:	dc000017 	ldw	r16,0(sp)
   4ff28:	dec00a04 	addi	sp,sp,40
   4ff2c:	00469ac1 	jmpi	469ac <_malloc_r>
   4ff30:	11400317 	ldw	r5,12(r2)
   4ff34:	10800217 	ldw	r2,8(r2)
   4ff38:	9823883a 	mov	r17,r19
   4ff3c:	2021883a 	mov	r16,r4
   4ff40:	11400315 	stw	r5,12(r2)
   4ff44:	28800215 	stw	r2,8(r5)
   4ff48:	003f7906 	br	4fd30 <__alt_data_end+0xfffeb340>
   4ff4c:	21000117 	ldw	r4,4(r4)
   4ff50:	00bfff04 	movi	r2,-4
   4ff54:	a1800404 	addi	r6,r20,16
   4ff58:	2088703a 	and	r4,r4,r2
   4ff5c:	2409883a 	add	r4,r4,r16
   4ff60:	2180380e 	bge	r4,r6,50044 <_realloc_r+0x47c>
   4ff64:	18c0004c 	andi	r3,r3,1
   4ff68:	183fc51e 	bne	r3,zero,4fe80 <__alt_data_end+0xfffeb490>
   4ff6c:	9dfffe17 	ldw	r23,-8(r19)
   4ff70:	adefc83a 	sub	r23,r21,r23
   4ff74:	b9400117 	ldw	r5,4(r23)
   4ff78:	288a703a 	and	r5,r5,r2
   4ff7c:	216d883a 	add	r22,r4,r5
   4ff80:	b1bf8b16 	blt	r22,r6,4fdb0 <__alt_data_end+0xfffeb3c0>
   4ff84:	b8800317 	ldw	r2,12(r23)
   4ff88:	b8c00217 	ldw	r3,8(r23)
   4ff8c:	81bfff04 	addi	r6,r16,-4
   4ff90:	01000904 	movi	r4,36
   4ff94:	18800315 	stw	r2,12(r3)
   4ff98:	10c00215 	stw	r3,8(r2)
   4ff9c:	bc400204 	addi	r17,r23,8
   4ffa0:	21805a36 	bltu	r4,r6,5010c <_realloc_r+0x544>
   4ffa4:	008004c4 	movi	r2,19
   4ffa8:	1180562e 	bgeu	r2,r6,50104 <_realloc_r+0x53c>
   4ffac:	98800017 	ldw	r2,0(r19)
   4ffb0:	b8800215 	stw	r2,8(r23)
   4ffb4:	98800117 	ldw	r2,4(r19)
   4ffb8:	b8800315 	stw	r2,12(r23)
   4ffbc:	008006c4 	movi	r2,27
   4ffc0:	11805636 	bltu	r2,r6,5011c <_realloc_r+0x554>
   4ffc4:	b8800404 	addi	r2,r23,16
   4ffc8:	9cc00204 	addi	r19,r19,8
   4ffcc:	98c00017 	ldw	r3,0(r19)
   4ffd0:	10c00015 	stw	r3,0(r2)
   4ffd4:	98c00117 	ldw	r3,4(r19)
   4ffd8:	10c00115 	stw	r3,4(r2)
   4ffdc:	98c00217 	ldw	r3,8(r19)
   4ffe0:	10c00215 	stw	r3,8(r2)
   4ffe4:	bd07883a 	add	r3,r23,r20
   4ffe8:	b505c83a 	sub	r2,r22,r20
   4ffec:	e0c00215 	stw	r3,8(fp)
   4fff0:	10800054 	ori	r2,r2,1
   4fff4:	18800115 	stw	r2,4(r3)
   4fff8:	b8800117 	ldw	r2,4(r23)
   4fffc:	9009883a 	mov	r4,r18
   50000:	1080004c 	andi	r2,r2,1
   50004:	a0a8b03a 	or	r20,r20,r2
   50008:	bd000115 	stw	r20,4(r23)
   5000c:	00565cc0 	call	565cc <__malloc_unlock>
   50010:	8805883a 	mov	r2,r17
   50014:	003f5306 	br	4fd64 <__alt_data_end+0xfffeb374>
   50018:	98c00017 	ldw	r3,0(r19)
   5001c:	88c00015 	stw	r3,0(r17)
   50020:	98c00117 	ldw	r3,4(r19)
   50024:	88c00115 	stw	r3,4(r17)
   50028:	00c006c4 	movi	r3,27
   5002c:	19801d36 	bltu	r3,r6,500a4 <_realloc_r+0x4dc>
   50030:	88800204 	addi	r2,r17,8
   50034:	98c00204 	addi	r3,r19,8
   50038:	003fa306 	br	4fec8 <__alt_data_end+0xfffeb4d8>
   5003c:	8807883a 	mov	r3,r17
   50040:	003f7406 	br	4fe14 <__alt_data_end+0xfffeb424>
   50044:	ad2b883a 	add	r21,r21,r20
   50048:	2505c83a 	sub	r2,r4,r20
   5004c:	e5400215 	stw	r21,8(fp)
   50050:	10800054 	ori	r2,r2,1
   50054:	a8800115 	stw	r2,4(r21)
   50058:	98bfff17 	ldw	r2,-4(r19)
   5005c:	9009883a 	mov	r4,r18
   50060:	1080004c 	andi	r2,r2,1
   50064:	a0a8b03a 	or	r20,r20,r2
   50068:	9d3fff15 	stw	r20,-4(r19)
   5006c:	00565cc0 	call	565cc <__malloc_unlock>
   50070:	9805883a 	mov	r2,r19
   50074:	003f3b06 	br	4fd64 <__alt_data_end+0xfffeb374>
   50078:	8809883a 	mov	r4,r17
   5007c:	980b883a 	mov	r5,r19
   50080:	004e8bc0 	call	4e8bc <memmove>
   50084:	003f9606 	br	4fee0 <__alt_data_end+0xfffeb4f0>
   50088:	8809883a 	mov	r4,r17
   5008c:	980b883a 	mov	r5,r19
   50090:	004e8bc0 	call	4e8bc <memmove>
   50094:	b8c00117 	ldw	r3,4(r23)
   50098:	b021883a 	mov	r16,r22
   5009c:	b82b883a 	mov	r21,r23
   500a0:	003f2306 	br	4fd30 <__alt_data_end+0xfffeb340>
   500a4:	98c00217 	ldw	r3,8(r19)
   500a8:	88c00215 	stw	r3,8(r17)
   500ac:	98c00317 	ldw	r3,12(r19)
   500b0:	88c00315 	stw	r3,12(r17)
   500b4:	30800c26 	beq	r6,r2,500e8 <_realloc_r+0x520>
   500b8:	88800404 	addi	r2,r17,16
   500bc:	98c00404 	addi	r3,r19,16
   500c0:	003f8106 	br	4fec8 <__alt_data_end+0xfffeb4d8>
   500c4:	893fff17 	ldw	r4,-4(r17)
   500c8:	00bfff04 	movi	r2,-4
   500cc:	9823883a 	mov	r17,r19
   500d0:	2084703a 	and	r2,r4,r2
   500d4:	80a1883a 	add	r16,r16,r2
   500d8:	003f1506 	br	4fd30 <__alt_data_end+0xfffeb340>
   500dc:	b8c00404 	addi	r3,r23,16
   500e0:	9cc00204 	addi	r19,r19,8
   500e4:	003f4b06 	br	4fe14 <__alt_data_end+0xfffeb424>
   500e8:	99000417 	ldw	r4,16(r19)
   500ec:	88800604 	addi	r2,r17,24
   500f0:	98c00604 	addi	r3,r19,24
   500f4:	89000415 	stw	r4,16(r17)
   500f8:	99000517 	ldw	r4,20(r19)
   500fc:	89000515 	stw	r4,20(r17)
   50100:	003f7106 	br	4fec8 <__alt_data_end+0xfffeb4d8>
   50104:	8805883a 	mov	r2,r17
   50108:	003fb006 	br	4ffcc <__alt_data_end+0xfffeb5dc>
   5010c:	8809883a 	mov	r4,r17
   50110:	980b883a 	mov	r5,r19
   50114:	004e8bc0 	call	4e8bc <memmove>
   50118:	003fb206 	br	4ffe4 <__alt_data_end+0xfffeb5f4>
   5011c:	98800217 	ldw	r2,8(r19)
   50120:	b8800415 	stw	r2,16(r23)
   50124:	98800317 	ldw	r2,12(r19)
   50128:	b8800515 	stw	r2,20(r23)
   5012c:	31000726 	beq	r6,r4,5014c <_realloc_r+0x584>
   50130:	b8800604 	addi	r2,r23,24
   50134:	9cc00404 	addi	r19,r19,16
   50138:	003fa406 	br	4ffcc <__alt_data_end+0xfffeb5dc>
   5013c:	9009883a 	mov	r4,r18
   50140:	00565cc0 	call	565cc <__malloc_unlock>
   50144:	0005883a 	mov	r2,zero
   50148:	003f0606 	br	4fd64 <__alt_data_end+0xfffeb374>
   5014c:	98c00417 	ldw	r3,16(r19)
   50150:	9cc00604 	addi	r19,r19,24
   50154:	b8800804 	addi	r2,r23,32
   50158:	b8c00615 	stw	r3,24(r23)
   5015c:	98ffff17 	ldw	r3,-4(r19)
   50160:	b8c00715 	stw	r3,28(r23)
   50164:	003f9906 	br	4ffcc <__alt_data_end+0xfffeb5dc>

00050168 <__fpclassifyd>:
   50168:	00a00034 	movhi	r2,32768
   5016c:	10bfffc4 	addi	r2,r2,-1
   50170:	2884703a 	and	r2,r5,r2
   50174:	10000726 	beq	r2,zero,50194 <__fpclassifyd+0x2c>
   50178:	00fffc34 	movhi	r3,65520
   5017c:	019ff834 	movhi	r6,32736
   50180:	28c7883a 	add	r3,r5,r3
   50184:	31bfffc4 	addi	r6,r6,-1
   50188:	30c00536 	bltu	r6,r3,501a0 <__fpclassifyd+0x38>
   5018c:	00800104 	movi	r2,4
   50190:	f800283a 	ret
   50194:	2000021e 	bne	r4,zero,501a0 <__fpclassifyd+0x38>
   50198:	00800084 	movi	r2,2
   5019c:	f800283a 	ret
   501a0:	00dffc34 	movhi	r3,32752
   501a4:	019ff834 	movhi	r6,32736
   501a8:	28cb883a 	add	r5,r5,r3
   501ac:	31bfffc4 	addi	r6,r6,-1
   501b0:	317ff62e 	bgeu	r6,r5,5018c <__alt_data_end+0xfffeb79c>
   501b4:	01400434 	movhi	r5,16
   501b8:	297fffc4 	addi	r5,r5,-1
   501bc:	28800236 	bltu	r5,r2,501c8 <__fpclassifyd+0x60>
   501c0:	008000c4 	movi	r2,3
   501c4:	f800283a 	ret
   501c8:	10c00226 	beq	r2,r3,501d4 <__fpclassifyd+0x6c>
   501cc:	0005883a 	mov	r2,zero
   501d0:	f800283a 	ret
   501d4:	2005003a 	cmpeq	r2,r4,zero
   501d8:	f800283a 	ret

000501dc <__sread>:
   501dc:	defffe04 	addi	sp,sp,-8
   501e0:	dc000015 	stw	r16,0(sp)
   501e4:	2821883a 	mov	r16,r5
   501e8:	2940038f 	ldh	r5,14(r5)
   501ec:	dfc00115 	stw	ra,4(sp)
   501f0:	00532fc0 	call	532fc <_read_r>
   501f4:	10000716 	blt	r2,zero,50214 <__sread+0x38>
   501f8:	80c01417 	ldw	r3,80(r16)
   501fc:	1887883a 	add	r3,r3,r2
   50200:	80c01415 	stw	r3,80(r16)
   50204:	dfc00117 	ldw	ra,4(sp)
   50208:	dc000017 	ldw	r16,0(sp)
   5020c:	dec00204 	addi	sp,sp,8
   50210:	f800283a 	ret
   50214:	80c0030b 	ldhu	r3,12(r16)
   50218:	18fbffcc 	andi	r3,r3,61439
   5021c:	80c0030d 	sth	r3,12(r16)
   50220:	dfc00117 	ldw	ra,4(sp)
   50224:	dc000017 	ldw	r16,0(sp)
   50228:	dec00204 	addi	sp,sp,8
   5022c:	f800283a 	ret

00050230 <__seofread>:
   50230:	0005883a 	mov	r2,zero
   50234:	f800283a 	ret

00050238 <__swrite>:
   50238:	2880030b 	ldhu	r2,12(r5)
   5023c:	defffb04 	addi	sp,sp,-20
   50240:	dcc00315 	stw	r19,12(sp)
   50244:	dc800215 	stw	r18,8(sp)
   50248:	dc400115 	stw	r17,4(sp)
   5024c:	dc000015 	stw	r16,0(sp)
   50250:	dfc00415 	stw	ra,16(sp)
   50254:	10c0400c 	andi	r3,r2,256
   50258:	2821883a 	mov	r16,r5
   5025c:	2027883a 	mov	r19,r4
   50260:	3025883a 	mov	r18,r6
   50264:	3823883a 	mov	r17,r7
   50268:	18000526 	beq	r3,zero,50280 <__swrite+0x48>
   5026c:	2940038f 	ldh	r5,14(r5)
   50270:	000d883a 	mov	r6,zero
   50274:	01c00084 	movi	r7,2
   50278:	00532a00 	call	532a0 <_lseek_r>
   5027c:	8080030b 	ldhu	r2,12(r16)
   50280:	8140038f 	ldh	r5,14(r16)
   50284:	10bbffcc 	andi	r2,r2,61439
   50288:	9809883a 	mov	r4,r19
   5028c:	900d883a 	mov	r6,r18
   50290:	880f883a 	mov	r7,r17
   50294:	8080030d 	sth	r2,12(r16)
   50298:	dfc00417 	ldw	ra,16(sp)
   5029c:	dcc00317 	ldw	r19,12(sp)
   502a0:	dc800217 	ldw	r18,8(sp)
   502a4:	dc400117 	ldw	r17,4(sp)
   502a8:	dc000017 	ldw	r16,0(sp)
   502ac:	dec00504 	addi	sp,sp,20
   502b0:	0052d7c1 	jmpi	52d7c <_write_r>

000502b4 <__sseek>:
   502b4:	defffe04 	addi	sp,sp,-8
   502b8:	dc000015 	stw	r16,0(sp)
   502bc:	2821883a 	mov	r16,r5
   502c0:	2940038f 	ldh	r5,14(r5)
   502c4:	dfc00115 	stw	ra,4(sp)
   502c8:	00532a00 	call	532a0 <_lseek_r>
   502cc:	00ffffc4 	movi	r3,-1
   502d0:	10c00826 	beq	r2,r3,502f4 <__sseek+0x40>
   502d4:	80c0030b 	ldhu	r3,12(r16)
   502d8:	80801415 	stw	r2,80(r16)
   502dc:	18c40014 	ori	r3,r3,4096
   502e0:	80c0030d 	sth	r3,12(r16)
   502e4:	dfc00117 	ldw	ra,4(sp)
   502e8:	dc000017 	ldw	r16,0(sp)
   502ec:	dec00204 	addi	sp,sp,8
   502f0:	f800283a 	ret
   502f4:	80c0030b 	ldhu	r3,12(r16)
   502f8:	18fbffcc 	andi	r3,r3,61439
   502fc:	80c0030d 	sth	r3,12(r16)
   50300:	dfc00117 	ldw	ra,4(sp)
   50304:	dc000017 	ldw	r16,0(sp)
   50308:	dec00204 	addi	sp,sp,8
   5030c:	f800283a 	ret

00050310 <__sclose>:
   50310:	2940038f 	ldh	r5,14(r5)
   50314:	0052dd81 	jmpi	52dd8 <_close_r>

00050318 <__ssprint_r>:
   50318:	30800217 	ldw	r2,8(r6)
   5031c:	defff604 	addi	sp,sp,-40
   50320:	ddc00715 	stw	r23,28(sp)
   50324:	dcc00315 	stw	r19,12(sp)
   50328:	dfc00915 	stw	ra,36(sp)
   5032c:	df000815 	stw	fp,32(sp)
   50330:	dd800615 	stw	r22,24(sp)
   50334:	dd400515 	stw	r21,20(sp)
   50338:	dd000415 	stw	r20,16(sp)
   5033c:	dc800215 	stw	r18,8(sp)
   50340:	dc400115 	stw	r17,4(sp)
   50344:	dc000015 	stw	r16,0(sp)
   50348:	3027883a 	mov	r19,r6
   5034c:	35c00017 	ldw	r23,0(r6)
   50350:	10005526 	beq	r2,zero,504a8 <__ssprint_r+0x190>
   50354:	2029883a 	mov	r20,r4
   50358:	29000017 	ldw	r4,0(r5)
   5035c:	2821883a 	mov	r16,r5
   50360:	0039883a 	mov	fp,zero
   50364:	0023883a 	mov	r17,zero
   50368:	88003926 	beq	r17,zero,50450 <__ssprint_r+0x138>
   5036c:	84800217 	ldw	r18,8(r16)
   50370:	902d883a 	mov	r22,r18
   50374:	8c803a36 	bltu	r17,r18,50460 <__ssprint_r+0x148>
   50378:	80c0030b 	ldhu	r3,12(r16)
   5037c:	1881200c 	andi	r2,r3,1152
   50380:	10002626 	beq	r2,zero,5041c <__ssprint_r+0x104>
   50384:	80800517 	ldw	r2,20(r16)
   50388:	81400417 	ldw	r5,16(r16)
   5038c:	89c00044 	addi	r7,r17,1
   50390:	108d883a 	add	r6,r2,r2
   50394:	3085883a 	add	r2,r6,r2
   50398:	100cd7fa 	srli	r6,r2,31
   5039c:	216dc83a 	sub	r22,r4,r5
   503a0:	3d89883a 	add	r4,r7,r22
   503a4:	3085883a 	add	r2,r6,r2
   503a8:	1025d07a 	srai	r18,r2,1
   503ac:	900d883a 	mov	r6,r18
   503b0:	9100022e 	bgeu	r18,r4,503bc <__ssprint_r+0xa4>
   503b4:	2025883a 	mov	r18,r4
   503b8:	200d883a 	mov	r6,r4
   503bc:	18c1000c 	andi	r3,r3,1024
   503c0:	a009883a 	mov	r4,r20
   503c4:	18002926 	beq	r3,zero,5046c <__ssprint_r+0x154>
   503c8:	300b883a 	mov	r5,r6
   503cc:	00469ac0 	call	469ac <_malloc_r>
   503d0:	102b883a 	mov	r21,r2
   503d4:	10002b26 	beq	r2,zero,50484 <__ssprint_r+0x16c>
   503d8:	81400417 	ldw	r5,16(r16)
   503dc:	1009883a 	mov	r4,r2
   503e0:	b00d883a 	mov	r6,r22
   503e4:	00471540 	call	47154 <memcpy>
   503e8:	8080030b 	ldhu	r2,12(r16)
   503ec:	00fedfc4 	movi	r3,-1153
   503f0:	10c4703a 	and	r2,r2,r3
   503f4:	10802014 	ori	r2,r2,128
   503f8:	8080030d 	sth	r2,12(r16)
   503fc:	ad89883a 	add	r4,r21,r22
   50400:	95adc83a 	sub	r22,r18,r22
   50404:	84800515 	stw	r18,20(r16)
   50408:	85800215 	stw	r22,8(r16)
   5040c:	85400415 	stw	r21,16(r16)
   50410:	81000015 	stw	r4,0(r16)
   50414:	8825883a 	mov	r18,r17
   50418:	882d883a 	mov	r22,r17
   5041c:	e00b883a 	mov	r5,fp
   50420:	b00d883a 	mov	r6,r22
   50424:	004e8bc0 	call	4e8bc <memmove>
   50428:	80c00217 	ldw	r3,8(r16)
   5042c:	81000017 	ldw	r4,0(r16)
   50430:	98800217 	ldw	r2,8(r19)
   50434:	1ca5c83a 	sub	r18,r3,r18
   50438:	2589883a 	add	r4,r4,r22
   5043c:	84800215 	stw	r18,8(r16)
   50440:	81000015 	stw	r4,0(r16)
   50444:	1463c83a 	sub	r17,r2,r17
   50448:	9c400215 	stw	r17,8(r19)
   5044c:	88001626 	beq	r17,zero,504a8 <__ssprint_r+0x190>
   50450:	bf000017 	ldw	fp,0(r23)
   50454:	bc400117 	ldw	r17,4(r23)
   50458:	bdc00204 	addi	r23,r23,8
   5045c:	003fc206 	br	50368 <__alt_data_end+0xfffeb978>
   50460:	8825883a 	mov	r18,r17
   50464:	882d883a 	mov	r22,r17
   50468:	003fec06 	br	5041c <__alt_data_end+0xfffeba2c>
   5046c:	004fbc80 	call	4fbc8 <_realloc_r>
   50470:	102b883a 	mov	r21,r2
   50474:	103fe11e 	bne	r2,zero,503fc <__alt_data_end+0xfffeba0c>
   50478:	81400417 	ldw	r5,16(r16)
   5047c:	a009883a 	mov	r4,r20
   50480:	004dc380 	call	4dc38 <_free_r>
   50484:	80c0030b 	ldhu	r3,12(r16)
   50488:	00800304 	movi	r2,12
   5048c:	a0800015 	stw	r2,0(r20)
   50490:	18c01014 	ori	r3,r3,64
   50494:	80c0030d 	sth	r3,12(r16)
   50498:	00bfffc4 	movi	r2,-1
   5049c:	98000215 	stw	zero,8(r19)
   504a0:	98000115 	stw	zero,4(r19)
   504a4:	00000206 	br	504b0 <__ssprint_r+0x198>
   504a8:	98000115 	stw	zero,4(r19)
   504ac:	0005883a 	mov	r2,zero
   504b0:	dfc00917 	ldw	ra,36(sp)
   504b4:	df000817 	ldw	fp,32(sp)
   504b8:	ddc00717 	ldw	r23,28(sp)
   504bc:	dd800617 	ldw	r22,24(sp)
   504c0:	dd400517 	ldw	r21,20(sp)
   504c4:	dd000417 	ldw	r20,16(sp)
   504c8:	dcc00317 	ldw	r19,12(sp)
   504cc:	dc800217 	ldw	r18,8(sp)
   504d0:	dc400117 	ldw	r17,4(sp)
   504d4:	dc000017 	ldw	r16,0(sp)
   504d8:	dec00a04 	addi	sp,sp,40
   504dc:	f800283a 	ret

000504e0 <___svfiprintf_internal_r>:
   504e0:	2880030b 	ldhu	r2,12(r5)
   504e4:	deffc804 	addi	sp,sp,-224
   504e8:	dd403315 	stw	r21,204(sp)
   504ec:	dfc03715 	stw	ra,220(sp)
   504f0:	df003615 	stw	fp,216(sp)
   504f4:	ddc03515 	stw	r23,212(sp)
   504f8:	dd803415 	stw	r22,208(sp)
   504fc:	dd003215 	stw	r20,200(sp)
   50500:	dcc03115 	stw	r19,196(sp)
   50504:	dc803015 	stw	r18,192(sp)
   50508:	dc402f15 	stw	r17,188(sp)
   5050c:	dc002e15 	stw	r16,184(sp)
   50510:	d9402215 	stw	r5,136(sp)
   50514:	d9002915 	stw	r4,164(sp)
   50518:	1080200c 	andi	r2,r2,128
   5051c:	d9c02415 	stw	r7,144(sp)
   50520:	302b883a 	mov	r21,r6
   50524:	10000226 	beq	r2,zero,50530 <___svfiprintf_internal_r+0x50>
   50528:	28800417 	ldw	r2,16(r5)
   5052c:	10042526 	beq	r2,zero,515c4 <___svfiprintf_internal_r+0x10e4>
   50530:	d8801a04 	addi	r2,sp,104
   50534:	d8c019c4 	addi	r3,sp,103
   50538:	dc402917 	ldw	r17,164(sp)
   5053c:	04c001b4 	movhi	r19,6
   50540:	10c9c83a 	sub	r4,r2,r3
   50544:	9ce4fd04 	addi	r19,r19,-27660
   50548:	d8801e15 	stw	r2,120(sp)
   5054c:	d8c01f15 	stw	r3,124(sp)
   50550:	dec01a15 	stw	sp,104(sp)
   50554:	d8001c15 	stw	zero,112(sp)
   50558:	d8001b15 	stw	zero,108(sp)
   5055c:	d8002a15 	stw	zero,168(sp)
   50560:	d8002615 	stw	zero,152(sp)
   50564:	d811883a 	mov	r8,sp
   50568:	d9002c15 	stw	r4,176(sp)
   5056c:	a8800007 	ldb	r2,0(r21)
   50570:	1002af26 	beq	r2,zero,51030 <___svfiprintf_internal_r+0xb50>
   50574:	01000944 	movi	r4,37
   50578:	1102ad26 	beq	r2,r4,51030 <___svfiprintf_internal_r+0xb50>
   5057c:	a805883a 	mov	r2,r21
   50580:	00000106 	br	50588 <___svfiprintf_internal_r+0xa8>
   50584:	19000326 	beq	r3,r4,50594 <___svfiprintf_internal_r+0xb4>
   50588:	10800044 	addi	r2,r2,1
   5058c:	10c00007 	ldb	r3,0(r2)
   50590:	183ffc1e 	bne	r3,zero,50584 <__alt_data_end+0xfffebb94>
   50594:	1561c83a 	sub	r16,r2,r21
   50598:	1025883a 	mov	r18,r2
   5059c:	80000e26 	beq	r16,zero,505d8 <___svfiprintf_internal_r+0xf8>
   505a0:	d8c01c17 	ldw	r3,112(sp)
   505a4:	d8801b17 	ldw	r2,108(sp)
   505a8:	45400015 	stw	r21,0(r8)
   505ac:	1c07883a 	add	r3,r3,r16
   505b0:	10800044 	addi	r2,r2,1
   505b4:	d8c01c15 	stw	r3,112(sp)
   505b8:	44000115 	stw	r16,4(r8)
   505bc:	d8801b15 	stw	r2,108(sp)
   505c0:	00c001c4 	movi	r3,7
   505c4:	18832616 	blt	r3,r2,51260 <___svfiprintf_internal_r+0xd80>
   505c8:	42000204 	addi	r8,r8,8
   505cc:	d9402617 	ldw	r5,152(sp)
   505d0:	2c0b883a 	add	r5,r5,r16
   505d4:	d9402615 	stw	r5,152(sp)
   505d8:	90800007 	ldb	r2,0(r18)
   505dc:	1002b226 	beq	r2,zero,510a8 <___svfiprintf_internal_r+0xbc8>
   505e0:	00bfffc4 	movi	r2,-1
   505e4:	95400044 	addi	r21,r18,1
   505e8:	91800047 	ldb	r6,1(r18)
   505ec:	d8001d85 	stb	zero,118(sp)
   505f0:	002d883a 	mov	r22,zero
   505f4:	d8802015 	stw	r2,128(sp)
   505f8:	d8002315 	stw	zero,140(sp)
   505fc:	0021883a 	mov	r16,zero
   50600:	04801604 	movi	r18,88
   50604:	05000244 	movi	r20,9
   50608:	402f883a 	mov	r23,r8
   5060c:	ad400044 	addi	r21,r21,1
   50610:	30bff804 	addi	r2,r6,-32
   50614:	9081ae36 	bltu	r18,r2,50cd0 <___svfiprintf_internal_r+0x7f0>
   50618:	100490ba 	slli	r2,r2,2
   5061c:	00c00174 	movhi	r3,5
   50620:	18c18c04 	addi	r3,r3,1584
   50624:	10c5883a 	add	r2,r2,r3
   50628:	10800017 	ldw	r2,0(r2)
   5062c:	1000683a 	jmp	r2
   50630:	000507e0 	cmpeqi	zero,zero,5151
   50634:	00050cd0 	cmplti	zero,zero,5171
   50638:	00050cd0 	cmplti	zero,zero,5171
   5063c:	000507d4 	movui	zero,5151
   50640:	00050cd0 	cmplti	zero,zero,5171
   50644:	00050cd0 	cmplti	zero,zero,5171
   50648:	00050cd0 	cmplti	zero,zero,5171
   5064c:	00050cd0 	cmplti	zero,zero,5171
   50650:	00050cd0 	cmplti	zero,zero,5171
   50654:	00050cd0 	cmplti	zero,zero,5171
   50658:	00050794 	movui	zero,5150
   5065c:	000507c8 	cmpgei	zero,zero,5151
   50660:	00050cd0 	cmplti	zero,zero,5171
   50664:	000507bc 	xorhi	zero,zero,5150
   50668:	00050d04 	movi	zero,5172
   5066c:	00050cd0 	cmplti	zero,zero,5171
   50670:	00050cf8 	rdprs	zero,zero,5171
   50674:	00050c8c 	andi	zero,zero,5170
   50678:	00050c8c 	andi	zero,zero,5170
   5067c:	00050c8c 	andi	zero,zero,5170
   50680:	00050c8c 	andi	zero,zero,5170
   50684:	00050c8c 	andi	zero,zero,5170
   50688:	00050c8c 	andi	zero,zero,5170
   5068c:	00050c8c 	andi	zero,zero,5170
   50690:	00050c8c 	andi	zero,zero,5170
   50694:	00050c8c 	andi	zero,zero,5170
   50698:	00050cd0 	cmplti	zero,zero,5171
   5069c:	00050cd0 	cmplti	zero,zero,5171
   506a0:	00050cd0 	cmplti	zero,zero,5171
   506a4:	00050cd0 	cmplti	zero,zero,5171
   506a8:	00050cd0 	cmplti	zero,zero,5171
   506ac:	00050cd0 	cmplti	zero,zero,5171
   506b0:	00050cd0 	cmplti	zero,zero,5171
   506b4:	00050cd0 	cmplti	zero,zero,5171
   506b8:	00050cd0 	cmplti	zero,zero,5171
   506bc:	00050cd0 	cmplti	zero,zero,5171
   506c0:	00050c20 	cmpeqi	zero,zero,5168
   506c4:	00050cd0 	cmplti	zero,zero,5171
   506c8:	00050cd0 	cmplti	zero,zero,5171
   506cc:	00050cd0 	cmplti	zero,zero,5171
   506d0:	00050cd0 	cmplti	zero,zero,5171
   506d4:	00050cd0 	cmplti	zero,zero,5171
   506d8:	00050cd0 	cmplti	zero,zero,5171
   506dc:	00050cd0 	cmplti	zero,zero,5171
   506e0:	00050cd0 	cmplti	zero,zero,5171
   506e4:	00050cd0 	cmplti	zero,zero,5171
   506e8:	00050cd0 	cmplti	zero,zero,5171
   506ec:	00050d90 	cmplti	zero,zero,5174
   506f0:	00050cd0 	cmplti	zero,zero,5171
   506f4:	00050cd0 	cmplti	zero,zero,5171
   506f8:	00050cd0 	cmplti	zero,zero,5171
   506fc:	00050cd0 	cmplti	zero,zero,5171
   50700:	00050cd0 	cmplti	zero,zero,5171
   50704:	00050d4c 	andi	zero,zero,5173
   50708:	00050cd0 	cmplti	zero,zero,5171
   5070c:	00050cd0 	cmplti	zero,zero,5171
   50710:	00050bd8 	cmpnei	zero,zero,5167
   50714:	00050cd0 	cmplti	zero,zero,5171
   50718:	00050cd0 	cmplti	zero,zero,5171
   5071c:	00050cd0 	cmplti	zero,zero,5171
   50720:	00050cd0 	cmplti	zero,zero,5171
   50724:	00050cd0 	cmplti	zero,zero,5171
   50728:	00050cd0 	cmplti	zero,zero,5171
   5072c:	00050cd0 	cmplti	zero,zero,5171
   50730:	00050cd0 	cmplti	zero,zero,5171
   50734:	00050cd0 	cmplti	zero,zero,5171
   50738:	00050cd0 	cmplti	zero,zero,5171
   5073c:	00050aa0 	cmpeqi	zero,zero,5162
   50740:	00050a44 	movi	zero,5161
   50744:	00050cd0 	cmplti	zero,zero,5171
   50748:	00050cd0 	cmplti	zero,zero,5171
   5074c:	00050cd0 	cmplti	zero,zero,5171
   50750:	00050a38 	rdprs	zero,zero,5160
   50754:	00050a44 	movi	zero,5161
   50758:	00050cd0 	cmplti	zero,zero,5171
   5075c:	00050cd0 	cmplti	zero,zero,5171
   50760:	00050a88 	cmpgei	zero,zero,5162
   50764:	00050cd0 	cmplti	zero,zero,5171
   50768:	00050a04 	movi	zero,5160
   5076c:	000509d4 	movui	zero,5159
   50770:	0005098c 	andi	zero,zero,5158
   50774:	00050980 	call	5098 <__reset-0x3af68>
   50778:	00050cd0 	cmplti	zero,zero,5171
   5077c:	00050918 	cmpnei	zero,zero,5156
   50780:	00050cd0 	cmplti	zero,zero,5171
   50784:	00050848 	cmpgei	zero,zero,5153
   50788:	00050cd0 	cmplti	zero,zero,5171
   5078c:	00050cd0 	cmplti	zero,zero,5171
   50790:	000507fc 	xorhi	zero,zero,5151
   50794:	d9402417 	ldw	r5,144(sp)
   50798:	d8c02417 	ldw	r3,144(sp)
   5079c:	29400017 	ldw	r5,0(r5)
   507a0:	18800104 	addi	r2,r3,4
   507a4:	d9402315 	stw	r5,140(sp)
   507a8:	2802f70e 	bge	r5,zero,51388 <___svfiprintf_internal_r+0xea8>
   507ac:	d9002317 	ldw	r4,140(sp)
   507b0:	d8802415 	stw	r2,144(sp)
   507b4:	0109c83a 	sub	r4,zero,r4
   507b8:	d9002315 	stw	r4,140(sp)
   507bc:	84000114 	ori	r16,r16,4
   507c0:	a9800007 	ldb	r6,0(r21)
   507c4:	003f9106 	br	5060c <__alt_data_end+0xfffebc1c>
   507c8:	05800ac4 	movi	r22,43
   507cc:	a9800007 	ldb	r6,0(r21)
   507d0:	003f8e06 	br	5060c <__alt_data_end+0xfffebc1c>
   507d4:	84000054 	ori	r16,r16,1
   507d8:	a9800007 	ldb	r6,0(r21)
   507dc:	003f8b06 	br	5060c <__alt_data_end+0xfffebc1c>
   507e0:	b0803fcc 	andi	r2,r22,255
   507e4:	1080201c 	xori	r2,r2,128
   507e8:	10bfe004 	addi	r2,r2,-128
   507ec:	1003221e 	bne	r2,zero,51478 <___svfiprintf_internal_r+0xf98>
   507f0:	05800804 	movi	r22,32
   507f4:	a9800007 	ldb	r6,0(r21)
   507f8:	003f8406 	br	5060c <__alt_data_end+0xfffebc1c>
   507fc:	014001b4 	movhi	r5,6
   50800:	2963f404 	addi	r5,r5,-28720
   50804:	d9402a15 	stw	r5,168(sp)
   50808:	dd801d85 	stb	r22,118(sp)
   5080c:	80c0080c 	andi	r3,r16,32
   50810:	b811883a 	mov	r8,r23
   50814:	d8802417 	ldw	r2,144(sp)
   50818:	1800f726 	beq	r3,zero,50bf8 <___svfiprintf_internal_r+0x718>
   5081c:	d8c02417 	ldw	r3,144(sp)
   50820:	14800017 	ldw	r18,0(r2)
   50824:	15800117 	ldw	r22,4(r2)
   50828:	18c00204 	addi	r3,r3,8
   5082c:	d8c02415 	stw	r3,144(sp)
   50830:	8080004c 	andi	r2,r16,1
   50834:	1002bd26 	beq	r2,zero,5132c <___svfiprintf_internal_r+0xe4c>
   50838:	9586b03a 	or	r3,r18,r22
   5083c:	1803081e 	bne	r3,zero,51460 <___svfiprintf_internal_r+0xf80>
   50840:	00800084 	movi	r2,2
   50844:	00000b06 	br	50874 <___svfiprintf_internal_r+0x394>
   50848:	80c0080c 	andi	r3,r16,32
   5084c:	b811883a 	mov	r8,r23
   50850:	d8802417 	ldw	r2,144(sp)
   50854:	18014226 	beq	r3,zero,50d60 <___svfiprintf_internal_r+0x880>
   50858:	d9402417 	ldw	r5,144(sp)
   5085c:	14800017 	ldw	r18,0(r2)
   50860:	15800117 	ldw	r22,4(r2)
   50864:	29400204 	addi	r5,r5,8
   50868:	d9402415 	stw	r5,144(sp)
   5086c:	00800044 	movi	r2,1
   50870:	9586b03a 	or	r3,r18,r22
   50874:	dd002017 	ldw	r20,128(sp)
   50878:	d8001d85 	stb	zero,118(sp)
   5087c:	002f883a 	mov	r23,zero
   50880:	d9002017 	ldw	r4,128(sp)
   50884:	20000216 	blt	r4,zero,50890 <___svfiprintf_internal_r+0x3b0>
   50888:	013fdfc4 	movi	r4,-129
   5088c:	8120703a 	and	r16,r16,r4
   50890:	1801e91e 	bne	r3,zero,51038 <___svfiprintf_internal_r+0xb58>
   50894:	d9402017 	ldw	r5,128(sp)
   50898:	28025f26 	beq	r5,zero,51218 <___svfiprintf_internal_r+0xd38>
   5089c:	10803fcc 	andi	r2,r2,255
   508a0:	00c00044 	movi	r3,1
   508a4:	10c2b226 	beq	r2,r3,51370 <___svfiprintf_internal_r+0xe90>
   508a8:	00c00084 	movi	r3,2
   508ac:	10c27c26 	beq	r2,r3,512a0 <___svfiprintf_internal_r+0xdc0>
   508b0:	d8c01a04 	addi	r3,sp,104
   508b4:	9008d0fa 	srli	r4,r18,3
   508b8:	b00a977a 	slli	r5,r22,29
   508bc:	b02cd0fa 	srli	r22,r22,3
   508c0:	948001cc 	andi	r18,r18,7
   508c4:	90800c04 	addi	r2,r18,48
   508c8:	18ffffc4 	addi	r3,r3,-1
   508cc:	2924b03a 	or	r18,r5,r4
   508d0:	18800005 	stb	r2,0(r3)
   508d4:	9588b03a 	or	r4,r18,r22
   508d8:	203ff61e 	bne	r4,zero,508b4 <__alt_data_end+0xfffebec4>
   508dc:	8100004c 	andi	r4,r16,1
   508e0:	d8c02715 	stw	r3,156(sp)
   508e4:	20029d26 	beq	r4,zero,5135c <___svfiprintf_internal_r+0xe7c>
   508e8:	10803fcc 	andi	r2,r2,255
   508ec:	1080201c 	xori	r2,r2,128
   508f0:	10bfe004 	addi	r2,r2,-128
   508f4:	01000c04 	movi	r4,48
   508f8:	11031826 	beq	r2,r4,5155c <___svfiprintf_internal_r+0x107c>
   508fc:	d9402717 	ldw	r5,156(sp)
   50900:	d8801e17 	ldw	r2,120(sp)
   50904:	193fffc5 	stb	r4,-1(r3)
   50908:	297fffc4 	addi	r5,r5,-1
   5090c:	d9402715 	stw	r5,156(sp)
   50910:	1169c83a 	sub	r20,r2,r5
   50914:	00024606 	br	51230 <___svfiprintf_internal_r+0xd50>
   50918:	d9402417 	ldw	r5,144(sp)
   5091c:	d8802417 	ldw	r2,144(sp)
   50920:	d8001d85 	stb	zero,118(sp)
   50924:	29400017 	ldw	r5,0(r5)
   50928:	b811883a 	mov	r8,r23
   5092c:	15800104 	addi	r22,r2,4
   50930:	d9402715 	stw	r5,156(sp)
   50934:	28031826 	beq	r5,zero,51598 <___svfiprintf_internal_r+0x10b8>
   50938:	d9002017 	ldw	r4,128(sp)
   5093c:	20030b16 	blt	r4,zero,5156c <___svfiprintf_internal_r+0x108c>
   50940:	d9002717 	ldw	r4,156(sp)
   50944:	d9802017 	ldw	r6,128(sp)
   50948:	000b883a 	mov	r5,zero
   5094c:	ddc02d15 	stw	r23,180(sp)
   50950:	004e7d40 	call	4e7d4 <memchr>
   50954:	da002d17 	ldw	r8,180(sp)
   50958:	10033926 	beq	r2,zero,51640 <___svfiprintf_internal_r+0x1160>
   5095c:	d8c02717 	ldw	r3,156(sp)
   50960:	d9002017 	ldw	r4,128(sp)
   50964:	10e9c83a 	sub	r20,r2,r3
   50968:	2500010e 	bge	r4,r20,50970 <___svfiprintf_internal_r+0x490>
   5096c:	2029883a 	mov	r20,r4
   50970:	ddc01d83 	ldbu	r23,118(sp)
   50974:	dd802415 	stw	r22,144(sp)
   50978:	d8002015 	stw	zero,128(sp)
   5097c:	00022c06 	br	51230 <___svfiprintf_internal_r+0xd50>
   50980:	84000814 	ori	r16,r16,32
   50984:	a9800007 	ldb	r6,0(r21)
   50988:	003f2006 	br	5060c <__alt_data_end+0xfffebc1c>
   5098c:	d8802417 	ldw	r2,144(sp)
   50990:	d8c02417 	ldw	r3,144(sp)
   50994:	010001b4 	movhi	r4,6
   50998:	14800017 	ldw	r18,0(r2)
   5099c:	00800c04 	movi	r2,48
   509a0:	18c00104 	addi	r3,r3,4
   509a4:	d8801d05 	stb	r2,116(sp)
   509a8:	2123f404 	addi	r4,r4,-28720
   509ac:	00801e04 	movi	r2,120
   509b0:	d8801d45 	stb	r2,117(sp)
   509b4:	d8c02415 	stw	r3,144(sp)
   509b8:	b811883a 	mov	r8,r23
   509bc:	002d883a 	mov	r22,zero
   509c0:	84000094 	ori	r16,r16,2
   509c4:	d9002a15 	stw	r4,168(sp)
   509c8:	00800084 	movi	r2,2
   509cc:	9007883a 	mov	r3,r18
   509d0:	003fa806 	br	50874 <__alt_data_end+0xfffebe84>
   509d4:	80c0080c 	andi	r3,r16,32
   509d8:	b811883a 	mov	r8,r23
   509dc:	d8802417 	ldw	r2,144(sp)
   509e0:	1800f026 	beq	r3,zero,50da4 <___svfiprintf_internal_r+0x8c4>
   509e4:	14800017 	ldw	r18,0(r2)
   509e8:	15800117 	ldw	r22,4(r2)
   509ec:	d8802417 	ldw	r2,144(sp)
   509f0:	9586b03a 	or	r3,r18,r22
   509f4:	10800204 	addi	r2,r2,8
   509f8:	d8802415 	stw	r2,144(sp)
   509fc:	0005883a 	mov	r2,zero
   50a00:	003f9c06 	br	50874 <__alt_data_end+0xfffebe84>
   50a04:	dd801d85 	stb	r22,118(sp)
   50a08:	8080080c 	andi	r2,r16,32
   50a0c:	b811883a 	mov	r8,r23
   50a10:	10028a1e 	bne	r2,zero,5143c <___svfiprintf_internal_r+0xf5c>
   50a14:	8080040c 	andi	r2,r16,16
   50a18:	1002c726 	beq	r2,zero,51538 <___svfiprintf_internal_r+0x1058>
   50a1c:	d8c02417 	ldw	r3,144(sp)
   50a20:	d9002617 	ldw	r4,152(sp)
   50a24:	18800017 	ldw	r2,0(r3)
   50a28:	18c00104 	addi	r3,r3,4
   50a2c:	d8c02415 	stw	r3,144(sp)
   50a30:	11000015 	stw	r4,0(r2)
   50a34:	003ecd06 	br	5056c <__alt_data_end+0xfffebb7c>
   50a38:	84001014 	ori	r16,r16,64
   50a3c:	a9800007 	ldb	r6,0(r21)
   50a40:	003ef206 	br	5060c <__alt_data_end+0xfffebc1c>
   50a44:	dd801d85 	stb	r22,118(sp)
   50a48:	8080080c 	andi	r2,r16,32
   50a4c:	b811883a 	mov	r8,r23
   50a50:	d8c02417 	ldw	r3,144(sp)
   50a54:	10007826 	beq	r2,zero,50c38 <___svfiprintf_internal_r+0x758>
   50a58:	d9002417 	ldw	r4,144(sp)
   50a5c:	18800117 	ldw	r2,4(r3)
   50a60:	1c800017 	ldw	r18,0(r3)
   50a64:	21000204 	addi	r4,r4,8
   50a68:	d9002415 	stw	r4,144(sp)
   50a6c:	102d883a 	mov	r22,r2
   50a70:	10007c16 	blt	r2,zero,50c64 <___svfiprintf_internal_r+0x784>
   50a74:	ddc01d83 	ldbu	r23,118(sp)
   50a78:	dd002017 	ldw	r20,128(sp)
   50a7c:	00800044 	movi	r2,1
   50a80:	9586b03a 	or	r3,r18,r22
   50a84:	003f7e06 	br	50880 <__alt_data_end+0xfffebe90>
   50a88:	a9800007 	ldb	r6,0(r21)
   50a8c:	01001b04 	movi	r4,108
   50a90:	a805883a 	mov	r2,r21
   50a94:	31027a26 	beq	r6,r4,51480 <___svfiprintf_internal_r+0xfa0>
   50a98:	84000414 	ori	r16,r16,16
   50a9c:	003edb06 	br	5060c <__alt_data_end+0xfffebc1c>
   50aa0:	d9402417 	ldw	r5,144(sp)
   50aa4:	04800044 	movi	r18,1
   50aa8:	d8c01004 	addi	r3,sp,64
   50aac:	28800017 	ldw	r2,0(r5)
   50ab0:	29400104 	addi	r5,r5,4
   50ab4:	b811883a 	mov	r8,r23
   50ab8:	d8001d85 	stb	zero,118(sp)
   50abc:	d8801005 	stb	r2,64(sp)
   50ac0:	d9402415 	stw	r5,144(sp)
   50ac4:	9029883a 	mov	r20,r18
   50ac8:	d8c02715 	stw	r3,156(sp)
   50acc:	d8002015 	stw	zero,128(sp)
   50ad0:	80c0008c 	andi	r3,r16,2
   50ad4:	d8c02115 	stw	r3,132(sp)
   50ad8:	18000126 	beq	r3,zero,50ae0 <___svfiprintf_internal_r+0x600>
   50adc:	94800084 	addi	r18,r18,2
   50ae0:	80c0210c 	andi	r3,r16,132
   50ae4:	d8c02515 	stw	r3,148(sp)
   50ae8:	1800ba1e 	bne	r3,zero,50dd4 <___svfiprintf_internal_r+0x8f4>
   50aec:	d9002317 	ldw	r4,140(sp)
   50af0:	24b9c83a 	sub	fp,r4,r18
   50af4:	0700b70e 	bge	zero,fp,50dd4 <___svfiprintf_internal_r+0x8f4>
   50af8:	02400404 	movi	r9,16
   50afc:	d8c01c17 	ldw	r3,112(sp)
   50b00:	d8801b17 	ldw	r2,108(sp)
   50b04:	4f02c00e 	bge	r9,fp,51608 <___svfiprintf_internal_r+0x1128>
   50b08:	010001b4 	movhi	r4,6
   50b0c:	21250104 	addi	r4,r4,-27644
   50b10:	d9002815 	stw	r4,160(sp)
   50b14:	a809883a 	mov	r4,r21
   50b18:	dc002b15 	stw	r16,172(sp)
   50b1c:	a02b883a 	mov	r21,r20
   50b20:	482f883a 	mov	r23,r9
   50b24:	9029883a 	mov	r20,r18
   50b28:	058001c4 	movi	r22,7
   50b2c:	e025883a 	mov	r18,fp
   50b30:	dc002217 	ldw	r16,136(sp)
   50b34:	2039883a 	mov	fp,r4
   50b38:	00000306 	br	50b48 <___svfiprintf_internal_r+0x668>
   50b3c:	94bffc04 	addi	r18,r18,-16
   50b40:	42000204 	addi	r8,r8,8
   50b44:	bc80130e 	bge	r23,r18,50b94 <___svfiprintf_internal_r+0x6b4>
   50b48:	014001b4 	movhi	r5,6
   50b4c:	18c00404 	addi	r3,r3,16
   50b50:	10800044 	addi	r2,r2,1
   50b54:	29650104 	addi	r5,r5,-27644
   50b58:	41400015 	stw	r5,0(r8)
   50b5c:	45c00115 	stw	r23,4(r8)
   50b60:	d8c01c15 	stw	r3,112(sp)
   50b64:	d8801b15 	stw	r2,108(sp)
   50b68:	b0bff40e 	bge	r22,r2,50b3c <__alt_data_end+0xfffec14c>
   50b6c:	8809883a 	mov	r4,r17
   50b70:	800b883a 	mov	r5,r16
   50b74:	d9801a04 	addi	r6,sp,104
   50b78:	00503180 	call	50318 <__ssprint_r>
   50b7c:	1001501e 	bne	r2,zero,510c0 <___svfiprintf_internal_r+0xbe0>
   50b80:	94bffc04 	addi	r18,r18,-16
   50b84:	d8c01c17 	ldw	r3,112(sp)
   50b88:	d8801b17 	ldw	r2,108(sp)
   50b8c:	d811883a 	mov	r8,sp
   50b90:	bcbfed16 	blt	r23,r18,50b48 <__alt_data_end+0xfffec158>
   50b94:	dc002b17 	ldw	r16,172(sp)
   50b98:	e009883a 	mov	r4,fp
   50b9c:	9039883a 	mov	fp,r18
   50ba0:	a025883a 	mov	r18,r20
   50ba4:	a829883a 	mov	r20,r21
   50ba8:	202b883a 	mov	r21,r4
   50bac:	d9002817 	ldw	r4,160(sp)
   50bb0:	e0c7883a 	add	r3,fp,r3
   50bb4:	10800044 	addi	r2,r2,1
   50bb8:	41000015 	stw	r4,0(r8)
   50bbc:	47000115 	stw	fp,4(r8)
   50bc0:	d8c01c15 	stw	r3,112(sp)
   50bc4:	d8801b15 	stw	r2,108(sp)
   50bc8:	010001c4 	movi	r4,7
   50bcc:	2081da16 	blt	r4,r2,51338 <___svfiprintf_internal_r+0xe58>
   50bd0:	42000204 	addi	r8,r8,8
   50bd4:	00008106 	br	50ddc <___svfiprintf_internal_r+0x8fc>
   50bd8:	010001b4 	movhi	r4,6
   50bdc:	2123ef04 	addi	r4,r4,-28740
   50be0:	dd801d85 	stb	r22,118(sp)
   50be4:	d9002a15 	stw	r4,168(sp)
   50be8:	80c0080c 	andi	r3,r16,32
   50bec:	b811883a 	mov	r8,r23
   50bf0:	d8802417 	ldw	r2,144(sp)
   50bf4:	183f091e 	bne	r3,zero,5081c <__alt_data_end+0xfffebe2c>
   50bf8:	80c0040c 	andi	r3,r16,16
   50bfc:	1801f21e 	bne	r3,zero,513c8 <___svfiprintf_internal_r+0xee8>
   50c00:	80c0100c 	andi	r3,r16,64
   50c04:	18024626 	beq	r3,zero,51520 <___svfiprintf_internal_r+0x1040>
   50c08:	d9402417 	ldw	r5,144(sp)
   50c0c:	1480000b 	ldhu	r18,0(r2)
   50c10:	002d883a 	mov	r22,zero
   50c14:	29400104 	addi	r5,r5,4
   50c18:	d9402415 	stw	r5,144(sp)
   50c1c:	003f0406 	br	50830 <__alt_data_end+0xfffebe40>
   50c20:	84000414 	ori	r16,r16,16
   50c24:	dd801d85 	stb	r22,118(sp)
   50c28:	8080080c 	andi	r2,r16,32
   50c2c:	b811883a 	mov	r8,r23
   50c30:	d8c02417 	ldw	r3,144(sp)
   50c34:	103f881e 	bne	r2,zero,50a58 <__alt_data_end+0xfffec068>
   50c38:	8080040c 	andi	r2,r16,16
   50c3c:	1001f81e 	bne	r2,zero,51420 <___svfiprintf_internal_r+0xf40>
   50c40:	8080100c 	andi	r2,r16,64
   50c44:	10021f26 	beq	r2,zero,514c4 <___svfiprintf_internal_r+0xfe4>
   50c48:	1c80000f 	ldh	r18,0(r3)
   50c4c:	d8802417 	ldw	r2,144(sp)
   50c50:	902dd7fa 	srai	r22,r18,31
   50c54:	10800104 	addi	r2,r2,4
   50c58:	d8802415 	stw	r2,144(sp)
   50c5c:	b005883a 	mov	r2,r22
   50c60:	103f840e 	bge	r2,zero,50a74 <__alt_data_end+0xfffec084>
   50c64:	04a5c83a 	sub	r18,zero,r18
   50c68:	9004c03a 	cmpne	r2,r18,zero
   50c6c:	05adc83a 	sub	r22,zero,r22
   50c70:	b0adc83a 	sub	r22,r22,r2
   50c74:	05c00b44 	movi	r23,45
   50c78:	ddc01d85 	stb	r23,118(sp)
   50c7c:	dd002017 	ldw	r20,128(sp)
   50c80:	00800044 	movi	r2,1
   50c84:	9586b03a 	or	r3,r18,r22
   50c88:	003efd06 	br	50880 <__alt_data_end+0xfffebe90>
   50c8c:	dc002115 	stw	r16,132(sp)
   50c90:	d8002315 	stw	zero,140(sp)
   50c94:	373ff404 	addi	fp,r6,-48
   50c98:	0009883a 	mov	r4,zero
   50c9c:	a821883a 	mov	r16,r21
   50ca0:	01400284 	movi	r5,10
   50ca4:	00453200 	call	45320 <__mulsi3>
   50ca8:	81800007 	ldb	r6,0(r16)
   50cac:	1709883a 	add	r4,r2,fp
   50cb0:	ad400044 	addi	r21,r21,1
   50cb4:	373ff404 	addi	fp,r6,-48
   50cb8:	a821883a 	mov	r16,r21
   50cbc:	a73ff82e 	bgeu	r20,fp,50ca0 <__alt_data_end+0xfffec2b0>
   50cc0:	d9002315 	stw	r4,140(sp)
   50cc4:	30bff804 	addi	r2,r6,-32
   50cc8:	dc002117 	ldw	r16,132(sp)
   50ccc:	90be522e 	bgeu	r18,r2,50618 <__alt_data_end+0xfffebc28>
   50cd0:	dd801d85 	stb	r22,118(sp)
   50cd4:	b811883a 	mov	r8,r23
   50cd8:	3000f326 	beq	r6,zero,510a8 <___svfiprintf_internal_r+0xbc8>
   50cdc:	04800044 	movi	r18,1
   50ce0:	d8c01004 	addi	r3,sp,64
   50ce4:	d9801005 	stb	r6,64(sp)
   50ce8:	d8001d85 	stb	zero,118(sp)
   50cec:	9029883a 	mov	r20,r18
   50cf0:	d8c02715 	stw	r3,156(sp)
   50cf4:	003f7506 	br	50acc <__alt_data_end+0xfffec0dc>
   50cf8:	84002014 	ori	r16,r16,128
   50cfc:	a9800007 	ldb	r6,0(r21)
   50d00:	003e4206 	br	5060c <__alt_data_end+0xfffebc1c>
   50d04:	a9800007 	ldb	r6,0(r21)
   50d08:	01400a84 	movi	r5,42
   50d0c:	a8800044 	addi	r2,r21,1
   50d10:	31425226 	beq	r6,r5,5165c <___svfiprintf_internal_r+0x117c>
   50d14:	373ff404 	addi	fp,r6,-48
   50d18:	102b883a 	mov	r21,r2
   50d1c:	0009883a 	mov	r4,zero
   50d20:	a7024536 	bltu	r20,fp,51638 <___svfiprintf_internal_r+0x1158>
   50d24:	01400284 	movi	r5,10
   50d28:	00453200 	call	45320 <__mulsi3>
   50d2c:	a9800007 	ldb	r6,0(r21)
   50d30:	e089883a 	add	r4,fp,r2
   50d34:	ad400044 	addi	r21,r21,1
   50d38:	373ff404 	addi	fp,r6,-48
   50d3c:	a73ff92e 	bgeu	r20,fp,50d24 <__alt_data_end+0xfffec334>
   50d40:	20021316 	blt	r4,zero,51590 <___svfiprintf_internal_r+0x10b0>
   50d44:	d9002015 	stw	r4,128(sp)
   50d48:	003e3106 	br	50610 <__alt_data_end+0xfffebc20>
   50d4c:	84000414 	ori	r16,r16,16
   50d50:	80c0080c 	andi	r3,r16,32
   50d54:	b811883a 	mov	r8,r23
   50d58:	d8802417 	ldw	r2,144(sp)
   50d5c:	183ebe1e 	bne	r3,zero,50858 <__alt_data_end+0xfffebe68>
   50d60:	80c0040c 	andi	r3,r16,16
   50d64:	18019e1e 	bne	r3,zero,513e0 <___svfiprintf_internal_r+0xf00>
   50d68:	80c0100c 	andi	r3,r16,64
   50d6c:	1801dc26 	beq	r3,zero,514e0 <___svfiprintf_internal_r+0x1000>
   50d70:	d8c02417 	ldw	r3,144(sp)
   50d74:	1480000b 	ldhu	r18,0(r2)
   50d78:	002d883a 	mov	r22,zero
   50d7c:	18c00104 	addi	r3,r3,4
   50d80:	d8c02415 	stw	r3,144(sp)
   50d84:	00800044 	movi	r2,1
   50d88:	9007883a 	mov	r3,r18
   50d8c:	003eb906 	br	50874 <__alt_data_end+0xfffebe84>
   50d90:	84000414 	ori	r16,r16,16
   50d94:	80c0080c 	andi	r3,r16,32
   50d98:	b811883a 	mov	r8,r23
   50d9c:	d8802417 	ldw	r2,144(sp)
   50da0:	183f101e 	bne	r3,zero,509e4 <__alt_data_end+0xfffebff4>
   50da4:	80c0040c 	andi	r3,r16,16
   50da8:	1801951e 	bne	r3,zero,51400 <___svfiprintf_internal_r+0xf20>
   50dac:	80c0100c 	andi	r3,r16,64
   50db0:	1801d326 	beq	r3,zero,51500 <___svfiprintf_internal_r+0x1020>
   50db4:	d9002417 	ldw	r4,144(sp)
   50db8:	1480000b 	ldhu	r18,0(r2)
   50dbc:	002d883a 	mov	r22,zero
   50dc0:	21000104 	addi	r4,r4,4
   50dc4:	d9002415 	stw	r4,144(sp)
   50dc8:	0005883a 	mov	r2,zero
   50dcc:	9007883a 	mov	r3,r18
   50dd0:	003ea806 	br	50874 <__alt_data_end+0xfffebe84>
   50dd4:	d8c01c17 	ldw	r3,112(sp)
   50dd8:	d8801b17 	ldw	r2,108(sp)
   50ddc:	d9001d87 	ldb	r4,118(sp)
   50de0:	20000b26 	beq	r4,zero,50e10 <___svfiprintf_internal_r+0x930>
   50de4:	d9001d84 	addi	r4,sp,118
   50de8:	18c00044 	addi	r3,r3,1
   50dec:	10800044 	addi	r2,r2,1
   50df0:	41000015 	stw	r4,0(r8)
   50df4:	01000044 	movi	r4,1
   50df8:	41000115 	stw	r4,4(r8)
   50dfc:	d8c01c15 	stw	r3,112(sp)
   50e00:	d8801b15 	stw	r2,108(sp)
   50e04:	010001c4 	movi	r4,7
   50e08:	20813616 	blt	r4,r2,512e4 <___svfiprintf_internal_r+0xe04>
   50e0c:	42000204 	addi	r8,r8,8
   50e10:	d9402117 	ldw	r5,132(sp)
   50e14:	28000b26 	beq	r5,zero,50e44 <___svfiprintf_internal_r+0x964>
   50e18:	d9001d04 	addi	r4,sp,116
   50e1c:	18c00084 	addi	r3,r3,2
   50e20:	10800044 	addi	r2,r2,1
   50e24:	41000015 	stw	r4,0(r8)
   50e28:	01000084 	movi	r4,2
   50e2c:	41000115 	stw	r4,4(r8)
   50e30:	d8c01c15 	stw	r3,112(sp)
   50e34:	d8801b15 	stw	r2,108(sp)
   50e38:	010001c4 	movi	r4,7
   50e3c:	20813216 	blt	r4,r2,51308 <___svfiprintf_internal_r+0xe28>
   50e40:	42000204 	addi	r8,r8,8
   50e44:	d9402517 	ldw	r5,148(sp)
   50e48:	01002004 	movi	r4,128
   50e4c:	2900ad26 	beq	r5,r4,51104 <___svfiprintf_internal_r+0xc24>
   50e50:	d9002017 	ldw	r4,128(sp)
   50e54:	252fc83a 	sub	r23,r4,r20
   50e58:	05c0330e 	bge	zero,r23,50f28 <___svfiprintf_internal_r+0xa48>
   50e5c:	01c00404 	movi	r7,16
   50e60:	3dc1940e 	bge	r7,r23,514b4 <___svfiprintf_internal_r+0xfd4>
   50e64:	010001b4 	movhi	r4,6
   50e68:	2124fd04 	addi	r4,r4,-27660
   50e6c:	d9002115 	stw	r4,132(sp)
   50e70:	a809883a 	mov	r4,r21
   50e74:	dc002015 	stw	r16,128(sp)
   50e78:	a02b883a 	mov	r21,r20
   50e7c:	3839883a 	mov	fp,r7
   50e80:	9029883a 	mov	r20,r18
   50e84:	058001c4 	movi	r22,7
   50e88:	b825883a 	mov	r18,r23
   50e8c:	dc002217 	ldw	r16,136(sp)
   50e90:	202f883a 	mov	r23,r4
   50e94:	00000306 	br	50ea4 <___svfiprintf_internal_r+0x9c4>
   50e98:	94bffc04 	addi	r18,r18,-16
   50e9c:	42000204 	addi	r8,r8,8
   50ea0:	e480110e 	bge	fp,r18,50ee8 <___svfiprintf_internal_r+0xa08>
   50ea4:	18c00404 	addi	r3,r3,16
   50ea8:	10800044 	addi	r2,r2,1
   50eac:	44c00015 	stw	r19,0(r8)
   50eb0:	47000115 	stw	fp,4(r8)
   50eb4:	d8c01c15 	stw	r3,112(sp)
   50eb8:	d8801b15 	stw	r2,108(sp)
   50ebc:	b0bff60e 	bge	r22,r2,50e98 <__alt_data_end+0xfffec4a8>
   50ec0:	8809883a 	mov	r4,r17
   50ec4:	800b883a 	mov	r5,r16
   50ec8:	d9801a04 	addi	r6,sp,104
   50ecc:	00503180 	call	50318 <__ssprint_r>
   50ed0:	10007b1e 	bne	r2,zero,510c0 <___svfiprintf_internal_r+0xbe0>
   50ed4:	94bffc04 	addi	r18,r18,-16
   50ed8:	d8c01c17 	ldw	r3,112(sp)
   50edc:	d8801b17 	ldw	r2,108(sp)
   50ee0:	d811883a 	mov	r8,sp
   50ee4:	e4bfef16 	blt	fp,r18,50ea4 <__alt_data_end+0xfffec4b4>
   50ee8:	dc002017 	ldw	r16,128(sp)
   50eec:	b809883a 	mov	r4,r23
   50ef0:	902f883a 	mov	r23,r18
   50ef4:	a025883a 	mov	r18,r20
   50ef8:	a829883a 	mov	r20,r21
   50efc:	202b883a 	mov	r21,r4
   50f00:	d9402117 	ldw	r5,132(sp)
   50f04:	1dc7883a 	add	r3,r3,r23
   50f08:	10800044 	addi	r2,r2,1
   50f0c:	41400015 	stw	r5,0(r8)
   50f10:	45c00115 	stw	r23,4(r8)
   50f14:	d8c01c15 	stw	r3,112(sp)
   50f18:	d8801b15 	stw	r2,108(sp)
   50f1c:	010001c4 	movi	r4,7
   50f20:	2080d616 	blt	r4,r2,5127c <___svfiprintf_internal_r+0xd9c>
   50f24:	42000204 	addi	r8,r8,8
   50f28:	d9002717 	ldw	r4,156(sp)
   50f2c:	a0c7883a 	add	r3,r20,r3
   50f30:	10800044 	addi	r2,r2,1
   50f34:	41000015 	stw	r4,0(r8)
   50f38:	45000115 	stw	r20,4(r8)
   50f3c:	d8c01c15 	stw	r3,112(sp)
   50f40:	d8801b15 	stw	r2,108(sp)
   50f44:	010001c4 	movi	r4,7
   50f48:	2080a516 	blt	r4,r2,511e0 <___svfiprintf_internal_r+0xd00>
   50f4c:	42000204 	addi	r8,r8,8
   50f50:	8400010c 	andi	r16,r16,4
   50f54:	80002b26 	beq	r16,zero,51004 <___svfiprintf_internal_r+0xb24>
   50f58:	d9402317 	ldw	r5,140(sp)
   50f5c:	2ca1c83a 	sub	r16,r5,r18
   50f60:	0400280e 	bge	zero,r16,51004 <___svfiprintf_internal_r+0xb24>
   50f64:	05000404 	movi	r20,16
   50f68:	d8801b17 	ldw	r2,108(sp)
   50f6c:	a401aa0e 	bge	r20,r16,51618 <___svfiprintf_internal_r+0x1138>
   50f70:	014001b4 	movhi	r5,6
   50f74:	29650104 	addi	r5,r5,-27644
   50f78:	d9402815 	stw	r5,160(sp)
   50f7c:	058001c4 	movi	r22,7
   50f80:	ddc02217 	ldw	r23,136(sp)
   50f84:	00000306 	br	50f94 <___svfiprintf_internal_r+0xab4>
   50f88:	843ffc04 	addi	r16,r16,-16
   50f8c:	42000204 	addi	r8,r8,8
   50f90:	a400130e 	bge	r20,r16,50fe0 <___svfiprintf_internal_r+0xb00>
   50f94:	010001b4 	movhi	r4,6
   50f98:	18c00404 	addi	r3,r3,16
   50f9c:	10800044 	addi	r2,r2,1
   50fa0:	21250104 	addi	r4,r4,-27644
   50fa4:	41000015 	stw	r4,0(r8)
   50fa8:	45000115 	stw	r20,4(r8)
   50fac:	d8c01c15 	stw	r3,112(sp)
   50fb0:	d8801b15 	stw	r2,108(sp)
   50fb4:	b0bff40e 	bge	r22,r2,50f88 <__alt_data_end+0xfffec598>
   50fb8:	8809883a 	mov	r4,r17
   50fbc:	b80b883a 	mov	r5,r23
   50fc0:	d9801a04 	addi	r6,sp,104
   50fc4:	00503180 	call	50318 <__ssprint_r>
   50fc8:	10003d1e 	bne	r2,zero,510c0 <___svfiprintf_internal_r+0xbe0>
   50fcc:	843ffc04 	addi	r16,r16,-16
   50fd0:	d8c01c17 	ldw	r3,112(sp)
   50fd4:	d8801b17 	ldw	r2,108(sp)
   50fd8:	d811883a 	mov	r8,sp
   50fdc:	a43fed16 	blt	r20,r16,50f94 <__alt_data_end+0xfffec5a4>
   50fe0:	d9402817 	ldw	r5,160(sp)
   50fe4:	1c07883a 	add	r3,r3,r16
   50fe8:	10800044 	addi	r2,r2,1
   50fec:	41400015 	stw	r5,0(r8)
   50ff0:	44000115 	stw	r16,4(r8)
   50ff4:	d8c01c15 	stw	r3,112(sp)
   50ff8:	d8801b15 	stw	r2,108(sp)
   50ffc:	010001c4 	movi	r4,7
   51000:	2080e416 	blt	r4,r2,51394 <___svfiprintf_internal_r+0xeb4>
   51004:	d8802317 	ldw	r2,140(sp)
   51008:	9080010e 	bge	r18,r2,51010 <___svfiprintf_internal_r+0xb30>
   5100c:	1025883a 	mov	r18,r2
   51010:	d9002617 	ldw	r4,152(sp)
   51014:	2489883a 	add	r4,r4,r18
   51018:	d9002615 	stw	r4,152(sp)
   5101c:	1800781e 	bne	r3,zero,51200 <___svfiprintf_internal_r+0xd20>
   51020:	a8800007 	ldb	r2,0(r21)
   51024:	d8001b15 	stw	zero,108(sp)
   51028:	d811883a 	mov	r8,sp
   5102c:	103d511e 	bne	r2,zero,50574 <__alt_data_end+0xfffebb84>
   51030:	a825883a 	mov	r18,r21
   51034:	003d6806 	br	505d8 <__alt_data_end+0xfffebbe8>
   51038:	10803fcc 	andi	r2,r2,255
   5103c:	00c00044 	movi	r3,1
   51040:	10fe191e 	bne	r2,r3,508a8 <__alt_data_end+0xfffebeb8>
   51044:	b000c826 	beq	r22,zero,51368 <___svfiprintf_internal_r+0xe88>
   51048:	df001a04 	addi	fp,sp,104
   5104c:	4029883a 	mov	r20,r8
   51050:	9009883a 	mov	r4,r18
   51054:	b00b883a 	mov	r5,r22
   51058:	01800284 	movi	r6,10
   5105c:	000f883a 	mov	r7,zero
   51060:	0053b980 	call	53b98 <__umoddi3>
   51064:	10800c04 	addi	r2,r2,48
   51068:	e73fffc4 	addi	fp,fp,-1
   5106c:	9009883a 	mov	r4,r18
   51070:	b00b883a 	mov	r5,r22
   51074:	01800284 	movi	r6,10
   51078:	000f883a 	mov	r7,zero
   5107c:	e0800005 	stb	r2,0(fp)
   51080:	00535580 	call	53558 <__udivdi3>
   51084:	1025883a 	mov	r18,r2
   51088:	10c4b03a 	or	r2,r2,r3
   5108c:	182d883a 	mov	r22,r3
   51090:	103fef1e 	bne	r2,zero,51050 <__alt_data_end+0xfffec660>
   51094:	d9001e17 	ldw	r4,120(sp)
   51098:	a011883a 	mov	r8,r20
   5109c:	df002715 	stw	fp,156(sp)
   510a0:	2729c83a 	sub	r20,r4,fp
   510a4:	00006206 	br	51230 <___svfiprintf_internal_r+0xd50>
   510a8:	d8801c17 	ldw	r2,112(sp)
   510ac:	10000426 	beq	r2,zero,510c0 <___svfiprintf_internal_r+0xbe0>
   510b0:	d9002917 	ldw	r4,164(sp)
   510b4:	d9402217 	ldw	r5,136(sp)
   510b8:	d9801a04 	addi	r6,sp,104
   510bc:	00503180 	call	50318 <__ssprint_r>
   510c0:	d9402217 	ldw	r5,136(sp)
   510c4:	2880030b 	ldhu	r2,12(r5)
   510c8:	1080100c 	andi	r2,r2,64
   510cc:	1000621e 	bne	r2,zero,51258 <___svfiprintf_internal_r+0xd78>
   510d0:	d8802617 	ldw	r2,152(sp)
   510d4:	dfc03717 	ldw	ra,220(sp)
   510d8:	df003617 	ldw	fp,216(sp)
   510dc:	ddc03517 	ldw	r23,212(sp)
   510e0:	dd803417 	ldw	r22,208(sp)
   510e4:	dd403317 	ldw	r21,204(sp)
   510e8:	dd003217 	ldw	r20,200(sp)
   510ec:	dcc03117 	ldw	r19,196(sp)
   510f0:	dc803017 	ldw	r18,192(sp)
   510f4:	dc402f17 	ldw	r17,188(sp)
   510f8:	dc002e17 	ldw	r16,184(sp)
   510fc:	dec03804 	addi	sp,sp,224
   51100:	f800283a 	ret
   51104:	d9002317 	ldw	r4,140(sp)
   51108:	24afc83a 	sub	r23,r4,r18
   5110c:	05ff500e 	bge	zero,r23,50e50 <__alt_data_end+0xfffec460>
   51110:	01c00404 	movi	r7,16
   51114:	3dc1440e 	bge	r7,r23,51628 <___svfiprintf_internal_r+0x1148>
   51118:	010001b4 	movhi	r4,6
   5111c:	2124fd04 	addi	r4,r4,-27660
   51120:	d9002115 	stw	r4,132(sp)
   51124:	a809883a 	mov	r4,r21
   51128:	dc002515 	stw	r16,148(sp)
   5112c:	a02b883a 	mov	r21,r20
   51130:	3839883a 	mov	fp,r7
   51134:	9029883a 	mov	r20,r18
   51138:	058001c4 	movi	r22,7
   5113c:	b825883a 	mov	r18,r23
   51140:	dc002217 	ldw	r16,136(sp)
   51144:	202f883a 	mov	r23,r4
   51148:	00000306 	br	51158 <___svfiprintf_internal_r+0xc78>
   5114c:	94bffc04 	addi	r18,r18,-16
   51150:	42000204 	addi	r8,r8,8
   51154:	e480110e 	bge	fp,r18,5119c <___svfiprintf_internal_r+0xcbc>
   51158:	18c00404 	addi	r3,r3,16
   5115c:	10800044 	addi	r2,r2,1
   51160:	44c00015 	stw	r19,0(r8)
   51164:	47000115 	stw	fp,4(r8)
   51168:	d8c01c15 	stw	r3,112(sp)
   5116c:	d8801b15 	stw	r2,108(sp)
   51170:	b0bff60e 	bge	r22,r2,5114c <__alt_data_end+0xfffec75c>
   51174:	8809883a 	mov	r4,r17
   51178:	800b883a 	mov	r5,r16
   5117c:	d9801a04 	addi	r6,sp,104
   51180:	00503180 	call	50318 <__ssprint_r>
   51184:	103fce1e 	bne	r2,zero,510c0 <__alt_data_end+0xfffec6d0>
   51188:	94bffc04 	addi	r18,r18,-16
   5118c:	d8c01c17 	ldw	r3,112(sp)
   51190:	d8801b17 	ldw	r2,108(sp)
   51194:	d811883a 	mov	r8,sp
   51198:	e4bfef16 	blt	fp,r18,51158 <__alt_data_end+0xfffec768>
   5119c:	dc002517 	ldw	r16,148(sp)
   511a0:	b809883a 	mov	r4,r23
   511a4:	902f883a 	mov	r23,r18
   511a8:	a025883a 	mov	r18,r20
   511ac:	a829883a 	mov	r20,r21
   511b0:	202b883a 	mov	r21,r4
   511b4:	d9402117 	ldw	r5,132(sp)
   511b8:	1dc7883a 	add	r3,r3,r23
   511bc:	10800044 	addi	r2,r2,1
   511c0:	41400015 	stw	r5,0(r8)
   511c4:	45c00115 	stw	r23,4(r8)
   511c8:	d8c01c15 	stw	r3,112(sp)
   511cc:	d8801b15 	stw	r2,108(sp)
   511d0:	010001c4 	movi	r4,7
   511d4:	2080ae16 	blt	r4,r2,51490 <___svfiprintf_internal_r+0xfb0>
   511d8:	42000204 	addi	r8,r8,8
   511dc:	003f1c06 	br	50e50 <__alt_data_end+0xfffec460>
   511e0:	d9402217 	ldw	r5,136(sp)
   511e4:	8809883a 	mov	r4,r17
   511e8:	d9801a04 	addi	r6,sp,104
   511ec:	00503180 	call	50318 <__ssprint_r>
   511f0:	103fb31e 	bne	r2,zero,510c0 <__alt_data_end+0xfffec6d0>
   511f4:	d8c01c17 	ldw	r3,112(sp)
   511f8:	d811883a 	mov	r8,sp
   511fc:	003f5406 	br	50f50 <__alt_data_end+0xfffec560>
   51200:	d9402217 	ldw	r5,136(sp)
   51204:	8809883a 	mov	r4,r17
   51208:	d9801a04 	addi	r6,sp,104
   5120c:	00503180 	call	50318 <__ssprint_r>
   51210:	103f8326 	beq	r2,zero,51020 <__alt_data_end+0xfffec630>
   51214:	003faa06 	br	510c0 <__alt_data_end+0xfffec6d0>
   51218:	10803fcc 	andi	r2,r2,255
   5121c:	1000021e 	bne	r2,zero,51228 <___svfiprintf_internal_r+0xd48>
   51220:	8080004c 	andi	r2,r16,1
   51224:	1000621e 	bne	r2,zero,513b0 <___svfiprintf_internal_r+0xed0>
   51228:	d8c01a04 	addi	r3,sp,104
   5122c:	d8c02715 	stw	r3,156(sp)
   51230:	d9002017 	ldw	r4,128(sp)
   51234:	a025883a 	mov	r18,r20
   51238:	a100010e 	bge	r20,r4,51240 <___svfiprintf_internal_r+0xd60>
   5123c:	2025883a 	mov	r18,r4
   51240:	bdc03fcc 	andi	r23,r23,255
   51244:	bdc0201c 	xori	r23,r23,128
   51248:	bdffe004 	addi	r23,r23,-128
   5124c:	b83e2026 	beq	r23,zero,50ad0 <__alt_data_end+0xfffec0e0>
   51250:	94800044 	addi	r18,r18,1
   51254:	003e1e06 	br	50ad0 <__alt_data_end+0xfffec0e0>
   51258:	00bfffc4 	movi	r2,-1
   5125c:	003f9d06 	br	510d4 <__alt_data_end+0xfffec6e4>
   51260:	d9402217 	ldw	r5,136(sp)
   51264:	8809883a 	mov	r4,r17
   51268:	d9801a04 	addi	r6,sp,104
   5126c:	00503180 	call	50318 <__ssprint_r>
   51270:	103f931e 	bne	r2,zero,510c0 <__alt_data_end+0xfffec6d0>
   51274:	d811883a 	mov	r8,sp
   51278:	003cd406 	br	505cc <__alt_data_end+0xfffebbdc>
   5127c:	d9402217 	ldw	r5,136(sp)
   51280:	8809883a 	mov	r4,r17
   51284:	d9801a04 	addi	r6,sp,104
   51288:	00503180 	call	50318 <__ssprint_r>
   5128c:	103f8c1e 	bne	r2,zero,510c0 <__alt_data_end+0xfffec6d0>
   51290:	d8c01c17 	ldw	r3,112(sp)
   51294:	d8801b17 	ldw	r2,108(sp)
   51298:	d811883a 	mov	r8,sp
   5129c:	003f2206 	br	50f28 <__alt_data_end+0xfffec538>
   512a0:	d9002a17 	ldw	r4,168(sp)
   512a4:	df001a04 	addi	fp,sp,104
   512a8:	908003cc 	andi	r2,r18,15
   512ac:	b006973a 	slli	r3,r22,28
   512b0:	2085883a 	add	r2,r4,r2
   512b4:	9024d13a 	srli	r18,r18,4
   512b8:	10800003 	ldbu	r2,0(r2)
   512bc:	b02cd13a 	srli	r22,r22,4
   512c0:	e73fffc4 	addi	fp,fp,-1
   512c4:	1ca4b03a 	or	r18,r3,r18
   512c8:	e0800005 	stb	r2,0(fp)
   512cc:	9584b03a 	or	r2,r18,r22
   512d0:	103ff51e 	bne	r2,zero,512a8 <__alt_data_end+0xfffec8b8>
   512d4:	d9401e17 	ldw	r5,120(sp)
   512d8:	df002715 	stw	fp,156(sp)
   512dc:	2f29c83a 	sub	r20,r5,fp
   512e0:	003fd306 	br	51230 <__alt_data_end+0xfffec840>
   512e4:	d9402217 	ldw	r5,136(sp)
   512e8:	8809883a 	mov	r4,r17
   512ec:	d9801a04 	addi	r6,sp,104
   512f0:	00503180 	call	50318 <__ssprint_r>
   512f4:	103f721e 	bne	r2,zero,510c0 <__alt_data_end+0xfffec6d0>
   512f8:	d8c01c17 	ldw	r3,112(sp)
   512fc:	d8801b17 	ldw	r2,108(sp)
   51300:	d811883a 	mov	r8,sp
   51304:	003ec206 	br	50e10 <__alt_data_end+0xfffec420>
   51308:	d9402217 	ldw	r5,136(sp)
   5130c:	8809883a 	mov	r4,r17
   51310:	d9801a04 	addi	r6,sp,104
   51314:	00503180 	call	50318 <__ssprint_r>
   51318:	103f691e 	bne	r2,zero,510c0 <__alt_data_end+0xfffec6d0>
   5131c:	d8c01c17 	ldw	r3,112(sp)
   51320:	d8801b17 	ldw	r2,108(sp)
   51324:	d811883a 	mov	r8,sp
   51328:	003ec606 	br	50e44 <__alt_data_end+0xfffec454>
   5132c:	00800084 	movi	r2,2
   51330:	9586b03a 	or	r3,r18,r22
   51334:	003d4f06 	br	50874 <__alt_data_end+0xfffebe84>
   51338:	d9402217 	ldw	r5,136(sp)
   5133c:	8809883a 	mov	r4,r17
   51340:	d9801a04 	addi	r6,sp,104
   51344:	00503180 	call	50318 <__ssprint_r>
   51348:	103f5d1e 	bne	r2,zero,510c0 <__alt_data_end+0xfffec6d0>
   5134c:	d8c01c17 	ldw	r3,112(sp)
   51350:	d8801b17 	ldw	r2,108(sp)
   51354:	d811883a 	mov	r8,sp
   51358:	003ea006 	br	50ddc <__alt_data_end+0xfffec3ec>
   5135c:	d8801e17 	ldw	r2,120(sp)
   51360:	10e9c83a 	sub	r20,r2,r3
   51364:	003fb206 	br	51230 <__alt_data_end+0xfffec840>
   51368:	00800244 	movi	r2,9
   5136c:	14bf3636 	bltu	r2,r18,51048 <__alt_data_end+0xfffec658>
   51370:	94800c04 	addi	r18,r18,48
   51374:	d8c019c4 	addi	r3,sp,103
   51378:	dc8019c5 	stb	r18,103(sp)
   5137c:	dd002c17 	ldw	r20,176(sp)
   51380:	d8c02715 	stw	r3,156(sp)
   51384:	003faa06 	br	51230 <__alt_data_end+0xfffec840>
   51388:	d8802415 	stw	r2,144(sp)
   5138c:	a9800007 	ldb	r6,0(r21)
   51390:	003c9e06 	br	5060c <__alt_data_end+0xfffebc1c>
   51394:	d9402217 	ldw	r5,136(sp)
   51398:	8809883a 	mov	r4,r17
   5139c:	d9801a04 	addi	r6,sp,104
   513a0:	00503180 	call	50318 <__ssprint_r>
   513a4:	103f461e 	bne	r2,zero,510c0 <__alt_data_end+0xfffec6d0>
   513a8:	d8c01c17 	ldw	r3,112(sp)
   513ac:	003f1506 	br	51004 <__alt_data_end+0xfffec614>
   513b0:	00800c04 	movi	r2,48
   513b4:	d8c019c4 	addi	r3,sp,103
   513b8:	d88019c5 	stb	r2,103(sp)
   513bc:	dd002c17 	ldw	r20,176(sp)
   513c0:	d8c02715 	stw	r3,156(sp)
   513c4:	003f9a06 	br	51230 <__alt_data_end+0xfffec840>
   513c8:	d9002417 	ldw	r4,144(sp)
   513cc:	14800017 	ldw	r18,0(r2)
   513d0:	002d883a 	mov	r22,zero
   513d4:	21000104 	addi	r4,r4,4
   513d8:	d9002415 	stw	r4,144(sp)
   513dc:	003d1406 	br	50830 <__alt_data_end+0xfffebe40>
   513e0:	14800017 	ldw	r18,0(r2)
   513e4:	d8802417 	ldw	r2,144(sp)
   513e8:	002d883a 	mov	r22,zero
   513ec:	9007883a 	mov	r3,r18
   513f0:	10800104 	addi	r2,r2,4
   513f4:	d8802415 	stw	r2,144(sp)
   513f8:	00800044 	movi	r2,1
   513fc:	003d1d06 	br	50874 <__alt_data_end+0xfffebe84>
   51400:	d8c02417 	ldw	r3,144(sp)
   51404:	14800017 	ldw	r18,0(r2)
   51408:	002d883a 	mov	r22,zero
   5140c:	18c00104 	addi	r3,r3,4
   51410:	d8c02415 	stw	r3,144(sp)
   51414:	0005883a 	mov	r2,zero
   51418:	9007883a 	mov	r3,r18
   5141c:	003d1506 	br	50874 <__alt_data_end+0xfffebe84>
   51420:	1c800017 	ldw	r18,0(r3)
   51424:	d9402417 	ldw	r5,144(sp)
   51428:	902dd7fa 	srai	r22,r18,31
   5142c:	29400104 	addi	r5,r5,4
   51430:	d9402415 	stw	r5,144(sp)
   51434:	b005883a 	mov	r2,r22
   51438:	003d8d06 	br	50a70 <__alt_data_end+0xfffec080>
   5143c:	d9002417 	ldw	r4,144(sp)
   51440:	d9402617 	ldw	r5,152(sp)
   51444:	20800017 	ldw	r2,0(r4)
   51448:	2807d7fa 	srai	r3,r5,31
   5144c:	21000104 	addi	r4,r4,4
   51450:	d9002415 	stw	r4,144(sp)
   51454:	11400015 	stw	r5,0(r2)
   51458:	10c00115 	stw	r3,4(r2)
   5145c:	003c4306 	br	5056c <__alt_data_end+0xfffebb7c>
   51460:	00800c04 	movi	r2,48
   51464:	d8801d05 	stb	r2,116(sp)
   51468:	d9801d45 	stb	r6,117(sp)
   5146c:	84000094 	ori	r16,r16,2
   51470:	00800084 	movi	r2,2
   51474:	003cff06 	br	50874 <__alt_data_end+0xfffebe84>
   51478:	a9800007 	ldb	r6,0(r21)
   5147c:	003c6306 	br	5060c <__alt_data_end+0xfffebc1c>
   51480:	ad400044 	addi	r21,r21,1
   51484:	84000814 	ori	r16,r16,32
   51488:	11800047 	ldb	r6,1(r2)
   5148c:	003c5f06 	br	5060c <__alt_data_end+0xfffebc1c>
   51490:	d9402217 	ldw	r5,136(sp)
   51494:	8809883a 	mov	r4,r17
   51498:	d9801a04 	addi	r6,sp,104
   5149c:	00503180 	call	50318 <__ssprint_r>
   514a0:	103f071e 	bne	r2,zero,510c0 <__alt_data_end+0xfffec6d0>
   514a4:	d8c01c17 	ldw	r3,112(sp)
   514a8:	d8801b17 	ldw	r2,108(sp)
   514ac:	d811883a 	mov	r8,sp
   514b0:	003e6706 	br	50e50 <__alt_data_end+0xfffec460>
   514b4:	014001b4 	movhi	r5,6
   514b8:	2964fd04 	addi	r5,r5,-27660
   514bc:	d9402115 	stw	r5,132(sp)
   514c0:	003e8f06 	br	50f00 <__alt_data_end+0xfffec510>
   514c4:	1c800017 	ldw	r18,0(r3)
   514c8:	d8c02417 	ldw	r3,144(sp)
   514cc:	902dd7fa 	srai	r22,r18,31
   514d0:	18c00104 	addi	r3,r3,4
   514d4:	d8c02415 	stw	r3,144(sp)
   514d8:	b005883a 	mov	r2,r22
   514dc:	003d6406 	br	50a70 <__alt_data_end+0xfffec080>
   514e0:	d9002417 	ldw	r4,144(sp)
   514e4:	14800017 	ldw	r18,0(r2)
   514e8:	002d883a 	mov	r22,zero
   514ec:	21000104 	addi	r4,r4,4
   514f0:	d9002415 	stw	r4,144(sp)
   514f4:	00800044 	movi	r2,1
   514f8:	9007883a 	mov	r3,r18
   514fc:	003cdd06 	br	50874 <__alt_data_end+0xfffebe84>
   51500:	d9402417 	ldw	r5,144(sp)
   51504:	14800017 	ldw	r18,0(r2)
   51508:	002d883a 	mov	r22,zero
   5150c:	29400104 	addi	r5,r5,4
   51510:	d9402415 	stw	r5,144(sp)
   51514:	0005883a 	mov	r2,zero
   51518:	9007883a 	mov	r3,r18
   5151c:	003cd506 	br	50874 <__alt_data_end+0xfffebe84>
   51520:	14800017 	ldw	r18,0(r2)
   51524:	d8802417 	ldw	r2,144(sp)
   51528:	002d883a 	mov	r22,zero
   5152c:	10800104 	addi	r2,r2,4
   51530:	d8802415 	stw	r2,144(sp)
   51534:	003cbe06 	br	50830 <__alt_data_end+0xfffebe40>
   51538:	8400100c 	andi	r16,r16,64
   5153c:	80002b26 	beq	r16,zero,515ec <___svfiprintf_internal_r+0x110c>
   51540:	d9402417 	ldw	r5,144(sp)
   51544:	d8c02617 	ldw	r3,152(sp)
   51548:	28800017 	ldw	r2,0(r5)
   5154c:	29400104 	addi	r5,r5,4
   51550:	d9402415 	stw	r5,144(sp)
   51554:	10c0000d 	sth	r3,0(r2)
   51558:	003c0406 	br	5056c <__alt_data_end+0xfffebb7c>
   5155c:	d8c01e17 	ldw	r3,120(sp)
   51560:	d9002717 	ldw	r4,156(sp)
   51564:	1929c83a 	sub	r20,r3,r4
   51568:	003f3106 	br	51230 <__alt_data_end+0xfffec840>
   5156c:	d9002717 	ldw	r4,156(sp)
   51570:	ddc02d15 	stw	r23,180(sp)
   51574:	00477300 	call	47730 <strlen>
   51578:	1029883a 	mov	r20,r2
   5157c:	ddc01d83 	ldbu	r23,118(sp)
   51580:	dd802415 	stw	r22,144(sp)
   51584:	d8002015 	stw	zero,128(sp)
   51588:	da002d17 	ldw	r8,180(sp)
   5158c:	003f2806 	br	51230 <__alt_data_end+0xfffec840>
   51590:	013fffc4 	movi	r4,-1
   51594:	003deb06 	br	50d44 <__alt_data_end+0xfffec354>
   51598:	dd002017 	ldw	r20,128(sp)
   5159c:	00800184 	movi	r2,6
   515a0:	1500012e 	bgeu	r2,r20,515a8 <___svfiprintf_internal_r+0x10c8>
   515a4:	1029883a 	mov	r20,r2
   515a8:	a025883a 	mov	r18,r20
   515ac:	a0002916 	blt	r20,zero,51654 <___svfiprintf_internal_r+0x1174>
   515b0:	00c001b4 	movhi	r3,6
   515b4:	18e3f904 	addi	r3,r3,-28700
   515b8:	dd802415 	stw	r22,144(sp)
   515bc:	d8c02715 	stw	r3,156(sp)
   515c0:	003d4206 	br	50acc <__alt_data_end+0xfffec0dc>
   515c4:	04001004 	movi	r16,64
   515c8:	800b883a 	mov	r5,r16
   515cc:	00469ac0 	call	469ac <_malloc_r>
   515d0:	d8c02217 	ldw	r3,136(sp)
   515d4:	18800015 	stw	r2,0(r3)
   515d8:	18800415 	stw	r2,16(r3)
   515dc:	10002b26 	beq	r2,zero,5168c <___svfiprintf_internal_r+0x11ac>
   515e0:	d9402217 	ldw	r5,136(sp)
   515e4:	2c000515 	stw	r16,20(r5)
   515e8:	003bd106 	br	50530 <__alt_data_end+0xfffebb40>
   515ec:	d9002417 	ldw	r4,144(sp)
   515f0:	d9402617 	ldw	r5,152(sp)
   515f4:	20800017 	ldw	r2,0(r4)
   515f8:	21000104 	addi	r4,r4,4
   515fc:	d9002415 	stw	r4,144(sp)
   51600:	11400015 	stw	r5,0(r2)
   51604:	003bd906 	br	5056c <__alt_data_end+0xfffebb7c>
   51608:	014001b4 	movhi	r5,6
   5160c:	29650104 	addi	r5,r5,-27644
   51610:	d9402815 	stw	r5,160(sp)
   51614:	003d6506 	br	50bac <__alt_data_end+0xfffec1bc>
   51618:	010001b4 	movhi	r4,6
   5161c:	21250104 	addi	r4,r4,-27644
   51620:	d9002815 	stw	r4,160(sp)
   51624:	003e6e06 	br	50fe0 <__alt_data_end+0xfffec5f0>
   51628:	014001b4 	movhi	r5,6
   5162c:	2964fd04 	addi	r5,r5,-27660
   51630:	d9402115 	stw	r5,132(sp)
   51634:	003edf06 	br	511b4 <__alt_data_end+0xfffec7c4>
   51638:	d8002015 	stw	zero,128(sp)
   5163c:	003bf406 	br	50610 <__alt_data_end+0xfffebc20>
   51640:	dd002017 	ldw	r20,128(sp)
   51644:	ddc01d83 	ldbu	r23,118(sp)
   51648:	dd802415 	stw	r22,144(sp)
   5164c:	d8002015 	stw	zero,128(sp)
   51650:	003ef706 	br	51230 <__alt_data_end+0xfffec840>
   51654:	0025883a 	mov	r18,zero
   51658:	003fd506 	br	515b0 <__alt_data_end+0xfffecbc0>
   5165c:	d8c02417 	ldw	r3,144(sp)
   51660:	a809883a 	mov	r4,r21
   51664:	102b883a 	mov	r21,r2
   51668:	18c00017 	ldw	r3,0(r3)
   5166c:	d8c02015 	stw	r3,128(sp)
   51670:	d8c02417 	ldw	r3,144(sp)
   51674:	d8802017 	ldw	r2,128(sp)
   51678:	19400104 	addi	r5,r3,4
   5167c:	d9402415 	stw	r5,144(sp)
   51680:	10000716 	blt	r2,zero,516a0 <___svfiprintf_internal_r+0x11c0>
   51684:	21800047 	ldb	r6,1(r4)
   51688:	003be006 	br	5060c <__alt_data_end+0xfffebc1c>
   5168c:	d9002917 	ldw	r4,164(sp)
   51690:	00800304 	movi	r2,12
   51694:	20800015 	stw	r2,0(r4)
   51698:	00bfffc4 	movi	r2,-1
   5169c:	003e8d06 	br	510d4 <__alt_data_end+0xfffec6e4>
   516a0:	00ffffc4 	movi	r3,-1
   516a4:	d8c02015 	stw	r3,128(sp)
   516a8:	21800047 	ldb	r6,1(r4)
   516ac:	003bd706 	br	5060c <__alt_data_end+0xfffebc1c>

000516b0 <__sprint_r.part.0>:
   516b0:	28801917 	ldw	r2,100(r5)
   516b4:	defff604 	addi	sp,sp,-40
   516b8:	dd400515 	stw	r21,20(sp)
   516bc:	dcc00315 	stw	r19,12(sp)
   516c0:	dfc00915 	stw	ra,36(sp)
   516c4:	df000815 	stw	fp,32(sp)
   516c8:	ddc00715 	stw	r23,28(sp)
   516cc:	dd800615 	stw	r22,24(sp)
   516d0:	dd000415 	stw	r20,16(sp)
   516d4:	dc800215 	stw	r18,8(sp)
   516d8:	dc400115 	stw	r17,4(sp)
   516dc:	dc000015 	stw	r16,0(sp)
   516e0:	1088000c 	andi	r2,r2,8192
   516e4:	2827883a 	mov	r19,r5
   516e8:	302b883a 	mov	r21,r6
   516ec:	10002d26 	beq	r2,zero,517a4 <__sprint_r.part.0+0xf4>
   516f0:	30800217 	ldw	r2,8(r6)
   516f4:	35800017 	ldw	r22,0(r6)
   516f8:	10002826 	beq	r2,zero,5179c <__sprint_r.part.0+0xec>
   516fc:	2029883a 	mov	r20,r4
   51700:	b5c00104 	addi	r23,r22,4
   51704:	04bfffc4 	movi	r18,-1
   51708:	bc400017 	ldw	r17,0(r23)
   5170c:	b4000017 	ldw	r16,0(r22)
   51710:	0039883a 	mov	fp,zero
   51714:	8822d0ba 	srli	r17,r17,2
   51718:	04400316 	blt	zero,r17,51728 <__sprint_r.part.0+0x78>
   5171c:	00001706 	br	5177c <__sprint_r.part.0+0xcc>
   51720:	84000104 	addi	r16,r16,4
   51724:	8f001526 	beq	r17,fp,5177c <__sprint_r.part.0+0xcc>
   51728:	81400017 	ldw	r5,0(r16)
   5172c:	a009883a 	mov	r4,r20
   51730:	980d883a 	mov	r6,r19
   51734:	00530180 	call	53018 <_fputwc_r>
   51738:	e7000044 	addi	fp,fp,1
   5173c:	14bff81e 	bne	r2,r18,51720 <__alt_data_end+0xfffecd30>
   51740:	9005883a 	mov	r2,r18
   51744:	a8000215 	stw	zero,8(r21)
   51748:	a8000115 	stw	zero,4(r21)
   5174c:	dfc00917 	ldw	ra,36(sp)
   51750:	df000817 	ldw	fp,32(sp)
   51754:	ddc00717 	ldw	r23,28(sp)
   51758:	dd800617 	ldw	r22,24(sp)
   5175c:	dd400517 	ldw	r21,20(sp)
   51760:	dd000417 	ldw	r20,16(sp)
   51764:	dcc00317 	ldw	r19,12(sp)
   51768:	dc800217 	ldw	r18,8(sp)
   5176c:	dc400117 	ldw	r17,4(sp)
   51770:	dc000017 	ldw	r16,0(sp)
   51774:	dec00a04 	addi	sp,sp,40
   51778:	f800283a 	ret
   5177c:	a8c00217 	ldw	r3,8(r21)
   51780:	8c63883a 	add	r17,r17,r17
   51784:	8c63883a 	add	r17,r17,r17
   51788:	1c45c83a 	sub	r2,r3,r17
   5178c:	a8800215 	stw	r2,8(r21)
   51790:	b5800204 	addi	r22,r22,8
   51794:	bdc00204 	addi	r23,r23,8
   51798:	103fdb1e 	bne	r2,zero,51708 <__alt_data_end+0xfffecd18>
   5179c:	0005883a 	mov	r2,zero
   517a0:	003fe806 	br	51744 <__alt_data_end+0xfffecd54>
   517a4:	004df280 	call	4df28 <__sfvwrite_r>
   517a8:	003fe606 	br	51744 <__alt_data_end+0xfffecd54>

000517ac <__sprint_r>:
   517ac:	30c00217 	ldw	r3,8(r6)
   517b0:	18000126 	beq	r3,zero,517b8 <__sprint_r+0xc>
   517b4:	00516b01 	jmpi	516b0 <__sprint_r.part.0>
   517b8:	30000115 	stw	zero,4(r6)
   517bc:	0005883a 	mov	r2,zero
   517c0:	f800283a 	ret

000517c4 <___vfiprintf_internal_r>:
   517c4:	defeca04 	addi	sp,sp,-1240
   517c8:	dcc12f15 	stw	r19,1212(sp)
   517cc:	dfc13515 	stw	ra,1236(sp)
   517d0:	df013415 	stw	fp,1232(sp)
   517d4:	ddc13315 	stw	r23,1228(sp)
   517d8:	dd813215 	stw	r22,1224(sp)
   517dc:	dd413115 	stw	r21,1220(sp)
   517e0:	dd013015 	stw	r20,1216(sp)
   517e4:	dc812e15 	stw	r18,1208(sp)
   517e8:	dc412d15 	stw	r17,1204(sp)
   517ec:	dc012c15 	stw	r16,1200(sp)
   517f0:	d9012115 	stw	r4,1156(sp)
   517f4:	d9412015 	stw	r5,1152(sp)
   517f8:	d9c12315 	stw	r7,1164(sp)
   517fc:	3027883a 	mov	r19,r6
   51800:	20000226 	beq	r4,zero,5180c <___vfiprintf_internal_r+0x48>
   51804:	20800e17 	ldw	r2,56(r4)
   51808:	1000f726 	beq	r2,zero,51be8 <___vfiprintf_internal_r+0x424>
   5180c:	d8812017 	ldw	r2,1152(sp)
   51810:	10c0030b 	ldhu	r3,12(r2)
   51814:	1908000c 	andi	r4,r3,8192
   51818:	1805883a 	mov	r2,r3
   5181c:	2000081e 	bne	r4,zero,51840 <___vfiprintf_internal_r+0x7c>
   51820:	d9412017 	ldw	r5,1152(sp)
   51824:	18880014 	ori	r2,r3,8192
   51828:	00f7ffc4 	movi	r3,-8193
   5182c:	29001917 	ldw	r4,100(r5)
   51830:	2880030d 	sth	r2,12(r5)
   51834:	20c8703a 	and	r4,r4,r3
   51838:	29001915 	stw	r4,100(r5)
   5183c:	1007883a 	mov	r3,r2
   51840:	1100020c 	andi	r4,r2,8
   51844:	2000a726 	beq	r4,zero,51ae4 <___vfiprintf_internal_r+0x320>
   51848:	d9412017 	ldw	r5,1152(sp)
   5184c:	29000417 	ldw	r4,16(r5)
   51850:	2000a426 	beq	r4,zero,51ae4 <___vfiprintf_internal_r+0x320>
   51854:	1080068c 	andi	r2,r2,26
   51858:	01000284 	movi	r4,10
   5185c:	1100ab26 	beq	r2,r4,51b0c <___vfiprintf_internal_r+0x348>
   51860:	d9010a04 	addi	r4,sp,1064
   51864:	d94109c4 	addi	r5,sp,1063
   51868:	070001b4 	movhi	fp,6
   5186c:	044001b4 	movhi	r17,6
   51870:	2145c83a 	sub	r2,r4,r5
   51874:	e7250904 	addi	fp,fp,-27612
   51878:	8c650504 	addi	r17,r17,-27628
   5187c:	d9011e15 	stw	r4,1144(sp)
   51880:	d9411f15 	stw	r5,1148(sp)
   51884:	dec11a15 	stw	sp,1128(sp)
   51888:	d8011c15 	stw	zero,1136(sp)
   5188c:	d8011b15 	stw	zero,1132(sp)
   51890:	d8012715 	stw	zero,1180(sp)
   51894:	d8012515 	stw	zero,1172(sp)
   51898:	d811883a 	mov	r8,sp
   5189c:	d8812815 	stw	r2,1184(sp)
   518a0:	982f883a 	mov	r23,r19
   518a4:	b8800007 	ldb	r2,0(r23)
   518a8:	1003b026 	beq	r2,zero,5276c <___vfiprintf_internal_r+0xfa8>
   518ac:	01000944 	movi	r4,37
   518b0:	1103ae26 	beq	r2,r4,5276c <___vfiprintf_internal_r+0xfa8>
   518b4:	b805883a 	mov	r2,r23
   518b8:	00000106 	br	518c0 <___vfiprintf_internal_r+0xfc>
   518bc:	19000326 	beq	r3,r4,518cc <___vfiprintf_internal_r+0x108>
   518c0:	10800044 	addi	r2,r2,1
   518c4:	10c00007 	ldb	r3,0(r2)
   518c8:	183ffc1e 	bne	r3,zero,518bc <__alt_data_end+0xfffececc>
   518cc:	15e1c83a 	sub	r16,r2,r23
   518d0:	1029883a 	mov	r20,r2
   518d4:	80001026 	beq	r16,zero,51918 <___vfiprintf_internal_r+0x154>
   518d8:	d8c11c17 	ldw	r3,1136(sp)
   518dc:	d8811b17 	ldw	r2,1132(sp)
   518e0:	45c00015 	stw	r23,0(r8)
   518e4:	80c7883a 	add	r3,r16,r3
   518e8:	10800044 	addi	r2,r2,1
   518ec:	44000115 	stw	r16,4(r8)
   518f0:	d8c11c15 	stw	r3,1136(sp)
   518f4:	d8811b15 	stw	r2,1132(sp)
   518f8:	010001c4 	movi	r4,7
   518fc:	2080740e 	bge	r4,r2,51ad0 <___vfiprintf_internal_r+0x30c>
   51900:	1803a71e 	bne	r3,zero,527a0 <___vfiprintf_internal_r+0xfdc>
   51904:	d8c12517 	ldw	r3,1172(sp)
   51908:	d8011b15 	stw	zero,1132(sp)
   5190c:	d811883a 	mov	r8,sp
   51910:	1c07883a 	add	r3,r3,r16
   51914:	d8c12515 	stw	r3,1172(sp)
   51918:	a0800007 	ldb	r2,0(r20)
   5191c:	1002bf26 	beq	r2,zero,5241c <___vfiprintf_internal_r+0xc58>
   51920:	a5c00044 	addi	r23,r20,1
   51924:	a1800047 	ldb	r6,1(r20)
   51928:	d8011d85 	stb	zero,1142(sp)
   5192c:	d8012205 	stb	zero,1160(sp)
   51930:	043fffc4 	movi	r16,-1
   51934:	d8012415 	stw	zero,1168(sp)
   51938:	0025883a 	mov	r18,zero
   5193c:	05001604 	movi	r20,88
   51940:	05400244 	movi	r21,9
   51944:	4027883a 	mov	r19,r8
   51948:	bdc00044 	addi	r23,r23,1
   5194c:	30bff804 	addi	r2,r6,-32
   51950:	a0825636 	bltu	r20,r2,522ac <___vfiprintf_internal_r+0xae8>
   51954:	100490ba 	slli	r2,r2,2
   51958:	01000174 	movhi	r4,5
   5195c:	21065b04 	addi	r4,r4,6508
   51960:	1105883a 	add	r2,r2,r4
   51964:	10800017 	ldw	r2,0(r2)
   51968:	1000683a 	jmp	r2
   5196c:	0005223c 	xorhi	zero,zero,5256
   51970:	000522ac 	andhi	zero,zero,5258
   51974:	000522ac 	andhi	zero,zero,5258
   51978:	000522a0 	cmpeqi	zero,zero,5258
   5197c:	000522ac 	andhi	zero,zero,5258
   51980:	000522ac 	andhi	zero,zero,5258
   51984:	000522ac 	andhi	zero,zero,5258
   51988:	000522ac 	andhi	zero,zero,5258
   5198c:	000522ac 	andhi	zero,zero,5258
   51990:	000522ac 	andhi	zero,zero,5258
   51994:	0005202c 	andhi	zero,zero,5248
   51998:	00052254 	movui	zero,5257
   5199c:	000522ac 	andhi	zero,zero,5258
   519a0:	00051c00 	call	51c0 <__reset-0x3ae40>
   519a4:	00052050 	cmplti	zero,zero,5249
   519a8:	000522ac 	andhi	zero,zero,5258
   519ac:	00051c0c 	andi	zero,zero,5232
   519b0:	00051c18 	cmpnei	zero,zero,5232
   519b4:	00051c18 	cmpnei	zero,zero,5232
   519b8:	00051c18 	cmpnei	zero,zero,5232
   519bc:	00051c18 	cmpnei	zero,zero,5232
   519c0:	00051c18 	cmpnei	zero,zero,5232
   519c4:	00051c18 	cmpnei	zero,zero,5232
   519c8:	00051c18 	cmpnei	zero,zero,5232
   519cc:	00051c18 	cmpnei	zero,zero,5232
   519d0:	00051c18 	cmpnei	zero,zero,5232
   519d4:	000522ac 	andhi	zero,zero,5258
   519d8:	000522ac 	andhi	zero,zero,5258
   519dc:	000522ac 	andhi	zero,zero,5258
   519e0:	000522ac 	andhi	zero,zero,5258
   519e4:	000522ac 	andhi	zero,zero,5258
   519e8:	000522ac 	andhi	zero,zero,5258
   519ec:	000522ac 	andhi	zero,zero,5258
   519f0:	000522ac 	andhi	zero,zero,5258
   519f4:	000522ac 	andhi	zero,zero,5258
   519f8:	000522ac 	andhi	zero,zero,5258
   519fc:	00051c58 	cmpnei	zero,zero,5233
   51a00:	000522ac 	andhi	zero,zero,5258
   51a04:	000522ac 	andhi	zero,zero,5258
   51a08:	000522ac 	andhi	zero,zero,5258
   51a0c:	000522ac 	andhi	zero,zero,5258
   51a10:	000522ac 	andhi	zero,zero,5258
   51a14:	000522ac 	andhi	zero,zero,5258
   51a18:	000522ac 	andhi	zero,zero,5258
   51a1c:	000522ac 	andhi	zero,zero,5258
   51a20:	000522ac 	andhi	zero,zero,5258
   51a24:	000522ac 	andhi	zero,zero,5258
   51a28:	00051f48 	cmpgei	zero,zero,5245
   51a2c:	000522ac 	andhi	zero,zero,5258
   51a30:	000522ac 	andhi	zero,zero,5258
   51a34:	000522ac 	andhi	zero,zero,5258
   51a38:	000522ac 	andhi	zero,zero,5258
   51a3c:	000522ac 	andhi	zero,zero,5258
   51a40:	00051f88 	cmpgei	zero,zero,5246
   51a44:	000522ac 	andhi	zero,zero,5258
   51a48:	000522ac 	andhi	zero,zero,5258
   51a4c:	00051fcc 	andi	zero,zero,5247
   51a50:	000522ac 	andhi	zero,zero,5258
   51a54:	000522ac 	andhi	zero,zero,5258
   51a58:	000522ac 	andhi	zero,zero,5258
   51a5c:	000522ac 	andhi	zero,zero,5258
   51a60:	000522ac 	andhi	zero,zero,5258
   51a64:	000522ac 	andhi	zero,zero,5258
   51a68:	000522ac 	andhi	zero,zero,5258
   51a6c:	000522ac 	andhi	zero,zero,5258
   51a70:	000522ac 	andhi	zero,zero,5258
   51a74:	000522ac 	andhi	zero,zero,5258
   51a78:	00051f14 	movui	zero,5244
   51a7c:	00052264 	muli	zero,zero,5257
   51a80:	000522ac 	andhi	zero,zero,5258
   51a84:	000522ac 	andhi	zero,zero,5258
   51a88:	000522ac 	andhi	zero,zero,5258
   51a8c:	000520a0 	cmpeqi	zero,zero,5250
   51a90:	00052264 	muli	zero,zero,5257
   51a94:	000522ac 	andhi	zero,zero,5258
   51a98:	000522ac 	andhi	zero,zero,5258
   51a9c:	00051fb8 	rdprs	zero,zero,5246
   51aa0:	000522ac 	andhi	zero,zero,5258
   51aa4:	00052204 	movi	zero,5256
   51aa8:	0005218c 	andi	zero,zero,5254
   51aac:	000521c0 	call	521c <__reset-0x3ade4>
   51ab0:	000520ac 	andhi	zero,zero,5250
   51ab4:	000522ac 	andhi	zero,zero,5258
   51ab8:	000520b8 	rdprs	zero,zero,5250
   51abc:	000522ac 	andhi	zero,zero,5258
   51ac0:	00052114 	movui	zero,5252
   51ac4:	000522ac 	andhi	zero,zero,5258
   51ac8:	000522ac 	andhi	zero,zero,5258
   51acc:	00052148 	cmpgei	zero,zero,5253
   51ad0:	42000204 	addi	r8,r8,8
   51ad4:	d8c12517 	ldw	r3,1172(sp)
   51ad8:	1c07883a 	add	r3,r3,r16
   51adc:	d8c12515 	stw	r3,1172(sp)
   51ae0:	003f8d06 	br	51918 <__alt_data_end+0xfffecf28>
   51ae4:	d9012117 	ldw	r4,1156(sp)
   51ae8:	d9412017 	ldw	r5,1152(sp)
   51aec:	004ba880 	call	4ba88 <__swsetup_r>
   51af0:	1000301e 	bne	r2,zero,51bb4 <___vfiprintf_internal_r+0x3f0>
   51af4:	d8812017 	ldw	r2,1152(sp)
   51af8:	01000284 	movi	r4,10
   51afc:	10c0030b 	ldhu	r3,12(r2)
   51b00:	1805883a 	mov	r2,r3
   51b04:	1080068c 	andi	r2,r2,26
   51b08:	113f551e 	bne	r2,r4,51860 <__alt_data_end+0xfffece70>
   51b0c:	d9012017 	ldw	r4,1152(sp)
   51b10:	2080038b 	ldhu	r2,14(r4)
   51b14:	113fffcc 	andi	r4,r2,65535
   51b18:	2120001c 	xori	r4,r4,32768
   51b1c:	21200004 	addi	r4,r4,-32768
   51b20:	203f4f16 	blt	r4,zero,51860 <__alt_data_end+0xfffece70>
   51b24:	d9412017 	ldw	r5,1152(sp)
   51b28:	d9012117 	ldw	r4,1156(sp)
   51b2c:	d9c12317 	ldw	r7,1164(sp)
   51b30:	2b001917 	ldw	r12,100(r5)
   51b34:	2ac00717 	ldw	r11,28(r5)
   51b38:	2a800917 	ldw	r10,36(r5)
   51b3c:	02010004 	movi	r8,1024
   51b40:	18ffff4c 	andi	r3,r3,65533
   51b44:	da0b883a 	add	r5,sp,r8
   51b48:	980d883a 	mov	r6,r19
   51b4c:	d8c1030d 	sth	r3,1036(sp)
   51b50:	db011915 	stw	r12,1124(sp)
   51b54:	d881038d 	sth	r2,1038(sp)
   51b58:	dac10715 	stw	r11,1052(sp)
   51b5c:	da810915 	stw	r10,1060(sp)
   51b60:	dec10015 	stw	sp,1024(sp)
   51b64:	dec10415 	stw	sp,1040(sp)
   51b68:	da010215 	stw	r8,1032(sp)
   51b6c:	da010515 	stw	r8,1044(sp)
   51b70:	d8010615 	stw	zero,1048(sp)
   51b74:	00517c40 	call	517c4 <___vfiprintf_internal_r>
   51b78:	1021883a 	mov	r16,r2
   51b7c:	10000416 	blt	r2,zero,51b90 <___vfiprintf_internal_r+0x3cc>
   51b80:	d9012117 	ldw	r4,1156(sp)
   51b84:	d9410004 	addi	r5,sp,1024
   51b88:	004d5080 	call	4d508 <_fflush_r>
   51b8c:	10040f1e 	bne	r2,zero,52bcc <___vfiprintf_internal_r+0x1408>
   51b90:	d881030b 	ldhu	r2,1036(sp)
   51b94:	1080100c 	andi	r2,r2,64
   51b98:	10000426 	beq	r2,zero,51bac <___vfiprintf_internal_r+0x3e8>
   51b9c:	d8c12017 	ldw	r3,1152(sp)
   51ba0:	1880030b 	ldhu	r2,12(r3)
   51ba4:	10801014 	ori	r2,r2,64
   51ba8:	1880030d 	sth	r2,12(r3)
   51bac:	8005883a 	mov	r2,r16
   51bb0:	00000106 	br	51bb8 <___vfiprintf_internal_r+0x3f4>
   51bb4:	00bfffc4 	movi	r2,-1
   51bb8:	dfc13517 	ldw	ra,1236(sp)
   51bbc:	df013417 	ldw	fp,1232(sp)
   51bc0:	ddc13317 	ldw	r23,1228(sp)
   51bc4:	dd813217 	ldw	r22,1224(sp)
   51bc8:	dd413117 	ldw	r21,1220(sp)
   51bcc:	dd013017 	ldw	r20,1216(sp)
   51bd0:	dcc12f17 	ldw	r19,1212(sp)
   51bd4:	dc812e17 	ldw	r18,1208(sp)
   51bd8:	dc412d17 	ldw	r17,1204(sp)
   51bdc:	dc012c17 	ldw	r16,1200(sp)
   51be0:	dec13604 	addi	sp,sp,1240
   51be4:	f800283a 	ret
   51be8:	004dac40 	call	4dac4 <__sinit>
   51bec:	003f0706 	br	5180c <__alt_data_end+0xfffece1c>
   51bf0:	d8c12417 	ldw	r3,1168(sp)
   51bf4:	d8812315 	stw	r2,1164(sp)
   51bf8:	00c7c83a 	sub	r3,zero,r3
   51bfc:	d8c12415 	stw	r3,1168(sp)
   51c00:	94800114 	ori	r18,r18,4
   51c04:	b9800007 	ldb	r6,0(r23)
   51c08:	003f4f06 	br	51948 <__alt_data_end+0xfffecf58>
   51c0c:	94802014 	ori	r18,r18,128
   51c10:	b9800007 	ldb	r6,0(r23)
   51c14:	003f4c06 	br	51948 <__alt_data_end+0xfffecf58>
   51c18:	dc012615 	stw	r16,1176(sp)
   51c1c:	d8012415 	stw	zero,1168(sp)
   51c20:	35bff404 	addi	r22,r6,-48
   51c24:	0009883a 	mov	r4,zero
   51c28:	b821883a 	mov	r16,r23
   51c2c:	01400284 	movi	r5,10
   51c30:	00453200 	call	45320 <__mulsi3>
   51c34:	81800007 	ldb	r6,0(r16)
   51c38:	1589883a 	add	r4,r2,r22
   51c3c:	bdc00044 	addi	r23,r23,1
   51c40:	35bff404 	addi	r22,r6,-48
   51c44:	b821883a 	mov	r16,r23
   51c48:	adbff82e 	bgeu	r21,r22,51c2c <__alt_data_end+0xfffed23c>
   51c4c:	d9012415 	stw	r4,1168(sp)
   51c50:	dc012617 	ldw	r16,1176(sp)
   51c54:	003f3d06 	br	5194c <__alt_data_end+0xfffecf5c>
   51c58:	d8c12203 	ldbu	r3,1160(sp)
   51c5c:	94800414 	ori	r18,r18,16
   51c60:	9080080c 	andi	r2,r18,32
   51c64:	d8c11d85 	stb	r3,1142(sp)
   51c68:	9811883a 	mov	r8,r19
   51c6c:	d8c12317 	ldw	r3,1164(sp)
   51c70:	10018226 	beq	r2,zero,5227c <___vfiprintf_internal_r+0xab8>
   51c74:	d9012317 	ldw	r4,1164(sp)
   51c78:	18800117 	ldw	r2,4(r3)
   51c7c:	1cc00017 	ldw	r19,0(r3)
   51c80:	21000204 	addi	r4,r4,8
   51c84:	d9012315 	stw	r4,1164(sp)
   51c88:	102b883a 	mov	r21,r2
   51c8c:	10030016 	blt	r2,zero,52890 <___vfiprintf_internal_r+0x10cc>
   51c90:	dd811d83 	ldbu	r22,1142(sp)
   51c94:	8029883a 	mov	r20,r16
   51c98:	00800044 	movi	r2,1
   51c9c:	9d46b03a 	or	r3,r19,r21
   51ca0:	80000216 	blt	r16,zero,51cac <___vfiprintf_internal_r+0x4e8>
   51ca4:	013fdfc4 	movi	r4,-129
   51ca8:	9124703a 	and	r18,r18,r4
   51cac:	1801b41e 	bne	r3,zero,52380 <___vfiprintf_internal_r+0xbbc>
   51cb0:	80028126 	beq	r16,zero,526b8 <___vfiprintf_internal_r+0xef4>
   51cb4:	10803fcc 	andi	r2,r2,255
   51cb8:	00c00044 	movi	r3,1
   51cbc:	10c1d126 	beq	r2,r3,52404 <___vfiprintf_internal_r+0xc40>
   51cc0:	00c00084 	movi	r3,2
   51cc4:	10c28626 	beq	r2,r3,526e0 <___vfiprintf_internal_r+0xf1c>
   51cc8:	d8c10a04 	addi	r3,sp,1064
   51ccc:	9808d0fa 	srli	r4,r19,3
   51cd0:	a80a977a 	slli	r5,r21,29
   51cd4:	a82ad0fa 	srli	r21,r21,3
   51cd8:	9cc001cc 	andi	r19,r19,7
   51cdc:	98800c04 	addi	r2,r19,48
   51ce0:	18ffffc4 	addi	r3,r3,-1
   51ce4:	2926b03a 	or	r19,r5,r4
   51ce8:	18800005 	stb	r2,0(r3)
   51cec:	9d48b03a 	or	r4,r19,r21
   51cf0:	203ff61e 	bne	r4,zero,51ccc <__alt_data_end+0xfffed2dc>
   51cf4:	9100004c 	andi	r4,r18,1
   51cf8:	d8c12215 	stw	r3,1160(sp)
   51cfc:	2002b31e 	bne	r4,zero,527cc <___vfiprintf_internal_r+0x1008>
   51d00:	d9411e17 	ldw	r5,1144(sp)
   51d04:	28e9c83a 	sub	r20,r5,r3
   51d08:	a02b883a 	mov	r21,r20
   51d0c:	a400010e 	bge	r20,r16,51d14 <___vfiprintf_internal_r+0x550>
   51d10:	802b883a 	mov	r21,r16
   51d14:	b5803fcc 	andi	r22,r22,255
   51d18:	b580201c 	xori	r22,r22,128
   51d1c:	b5bfe004 	addi	r22,r22,-128
   51d20:	b0000126 	beq	r22,zero,51d28 <___vfiprintf_internal_r+0x564>
   51d24:	ad400044 	addi	r21,r21,1
   51d28:	9280008c 	andi	r10,r18,2
   51d2c:	50000126 	beq	r10,zero,51d34 <___vfiprintf_internal_r+0x570>
   51d30:	ad400084 	addi	r21,r21,2
   51d34:	9580210c 	andi	r22,r18,132
   51d38:	b001751e 	bne	r22,zero,52310 <___vfiprintf_internal_r+0xb4c>
   51d3c:	d9012417 	ldw	r4,1168(sp)
   51d40:	2567c83a 	sub	r19,r4,r21
   51d44:	04c1720e 	bge	zero,r19,52310 <___vfiprintf_internal_r+0xb4c>
   51d48:	01c00404 	movi	r7,16
   51d4c:	d8c11c17 	ldw	r3,1136(sp)
   51d50:	3cc36b0e 	bge	r7,r19,52b00 <___vfiprintf_internal_r+0x133c>
   51d54:	008001b4 	movhi	r2,6
   51d58:	10a50904 	addi	r2,r2,-27612
   51d5c:	dc012915 	stw	r16,1188(sp)
   51d60:	d9011b17 	ldw	r4,1132(sp)
   51d64:	9821883a 	mov	r16,r19
   51d68:	d8812615 	stw	r2,1176(sp)
   51d6c:	030001c4 	movi	r12,7
   51d70:	5027883a 	mov	r19,r10
   51d74:	00000506 	br	51d8c <___vfiprintf_internal_r+0x5c8>
   51d78:	21400084 	addi	r5,r4,2
   51d7c:	42000204 	addi	r8,r8,8
   51d80:	1009883a 	mov	r4,r2
   51d84:	843ffc04 	addi	r16,r16,-16
   51d88:	3c000d0e 	bge	r7,r16,51dc0 <___vfiprintf_internal_r+0x5fc>
   51d8c:	18c00404 	addi	r3,r3,16
   51d90:	20800044 	addi	r2,r4,1
   51d94:	47000015 	stw	fp,0(r8)
   51d98:	41c00115 	stw	r7,4(r8)
   51d9c:	d8c11c15 	stw	r3,1136(sp)
   51da0:	d8811b15 	stw	r2,1132(sp)
   51da4:	60bff40e 	bge	r12,r2,51d78 <__alt_data_end+0xfffed388>
   51da8:	18014b1e 	bne	r3,zero,522d8 <___vfiprintf_internal_r+0xb14>
   51dac:	843ffc04 	addi	r16,r16,-16
   51db0:	0009883a 	mov	r4,zero
   51db4:	01400044 	movi	r5,1
   51db8:	d811883a 	mov	r8,sp
   51dbc:	3c3ff316 	blt	r7,r16,51d8c <__alt_data_end+0xfffed39c>
   51dc0:	9815883a 	mov	r10,r19
   51dc4:	8027883a 	mov	r19,r16
   51dc8:	dc012917 	ldw	r16,1188(sp)
   51dcc:	d9012617 	ldw	r4,1176(sp)
   51dd0:	98c7883a 	add	r3,r19,r3
   51dd4:	44c00115 	stw	r19,4(r8)
   51dd8:	41000015 	stw	r4,0(r8)
   51ddc:	d8c11c15 	stw	r3,1136(sp)
   51de0:	d9411b15 	stw	r5,1132(sp)
   51de4:	008001c4 	movi	r2,7
   51de8:	11425116 	blt	r2,r5,52730 <___vfiprintf_internal_r+0xf6c>
   51dec:	d9011d87 	ldb	r4,1142(sp)
   51df0:	42000204 	addi	r8,r8,8
   51df4:	28800044 	addi	r2,r5,1
   51df8:	20014a1e 	bne	r4,zero,52324 <___vfiprintf_internal_r+0xb60>
   51dfc:	50000c26 	beq	r10,zero,51e30 <___vfiprintf_internal_r+0x66c>
   51e00:	d9011d04 	addi	r4,sp,1140
   51e04:	18c00084 	addi	r3,r3,2
   51e08:	41000015 	stw	r4,0(r8)
   51e0c:	01000084 	movi	r4,2
   51e10:	41000115 	stw	r4,4(r8)
   51e14:	d8c11c15 	stw	r3,1136(sp)
   51e18:	d8811b15 	stw	r2,1132(sp)
   51e1c:	010001c4 	movi	r4,7
   51e20:	20822016 	blt	r4,r2,526a4 <___vfiprintf_internal_r+0xee0>
   51e24:	100b883a 	mov	r5,r2
   51e28:	42000204 	addi	r8,r8,8
   51e2c:	10800044 	addi	r2,r2,1
   51e30:	01002004 	movi	r4,128
   51e34:	b101de26 	beq	r22,r4,525b0 <___vfiprintf_internal_r+0xdec>
   51e38:	8521c83a 	sub	r16,r16,r20
   51e3c:	0400230e 	bge	zero,r16,51ecc <___vfiprintf_internal_r+0x708>
   51e40:	04c00404 	movi	r19,16
   51e44:	9c030d0e 	bge	r19,r16,52a7c <___vfiprintf_internal_r+0x12b8>
   51e48:	008001b4 	movhi	r2,6
   51e4c:	10a50504 	addi	r2,r2,-27628
   51e50:	d8812615 	stw	r2,1176(sp)
   51e54:	058001c4 	movi	r22,7
   51e58:	00000506 	br	51e70 <___vfiprintf_internal_r+0x6ac>
   51e5c:	28800084 	addi	r2,r5,2
   51e60:	42000204 	addi	r8,r8,8
   51e64:	200b883a 	mov	r5,r4
   51e68:	843ffc04 	addi	r16,r16,-16
   51e6c:	9c000d0e 	bge	r19,r16,51ea4 <___vfiprintf_internal_r+0x6e0>
   51e70:	18c00404 	addi	r3,r3,16
   51e74:	29000044 	addi	r4,r5,1
   51e78:	44400015 	stw	r17,0(r8)
   51e7c:	44c00115 	stw	r19,4(r8)
   51e80:	d8c11c15 	stw	r3,1136(sp)
   51e84:	d9011b15 	stw	r4,1132(sp)
   51e88:	b13ff40e 	bge	r22,r4,51e5c <__alt_data_end+0xfffed46c>
   51e8c:	1801321e 	bne	r3,zero,52358 <___vfiprintf_internal_r+0xb94>
   51e90:	843ffc04 	addi	r16,r16,-16
   51e94:	000b883a 	mov	r5,zero
   51e98:	00800044 	movi	r2,1
   51e9c:	d811883a 	mov	r8,sp
   51ea0:	9c3ff316 	blt	r19,r16,51e70 <__alt_data_end+0xfffed480>
   51ea4:	d9012617 	ldw	r4,1176(sp)
   51ea8:	1c07883a 	add	r3,r3,r16
   51eac:	44000115 	stw	r16,4(r8)
   51eb0:	41000015 	stw	r4,0(r8)
   51eb4:	d8c11c15 	stw	r3,1136(sp)
   51eb8:	d8811b15 	stw	r2,1132(sp)
   51ebc:	010001c4 	movi	r4,7
   51ec0:	20816216 	blt	r4,r2,5244c <___vfiprintf_internal_r+0xc88>
   51ec4:	42000204 	addi	r8,r8,8
   51ec8:	10800044 	addi	r2,r2,1
   51ecc:	d9012217 	ldw	r4,1160(sp)
   51ed0:	1d07883a 	add	r3,r3,r20
   51ed4:	45000115 	stw	r20,4(r8)
   51ed8:	41000015 	stw	r4,0(r8)
   51edc:	d8c11c15 	stw	r3,1136(sp)
   51ee0:	d8811b15 	stw	r2,1132(sp)
   51ee4:	010001c4 	movi	r4,7
   51ee8:	2081610e 	bge	r4,r2,52470 <___vfiprintf_internal_r+0xcac>
   51eec:	1802211e 	bne	r3,zero,52774 <___vfiprintf_internal_r+0xfb0>
   51ef0:	d8011b15 	stw	zero,1132(sp)
   51ef4:	9480010c 	andi	r18,r18,4
   51ef8:	9002171e 	bne	r18,zero,52758 <___vfiprintf_internal_r+0xf94>
   51efc:	d9412417 	ldw	r5,1168(sp)
   51f00:	a9433716 	blt	r21,r5,52be0 <___vfiprintf_internal_r+0x141c>
   51f04:	d8812517 	ldw	r2,1172(sp)
   51f08:	1545883a 	add	r2,r2,r21
   51f0c:	d8812515 	stw	r2,1172(sp)
   51f10:	00019a06 	br	5257c <___vfiprintf_internal_r+0xdb8>
   51f14:	d8c12317 	ldw	r3,1164(sp)
   51f18:	05400044 	movi	r21,1
   51f1c:	9811883a 	mov	r8,r19
   51f20:	18800017 	ldw	r2,0(r3)
   51f24:	18c00104 	addi	r3,r3,4
   51f28:	d8c12315 	stw	r3,1164(sp)
   51f2c:	d8c10004 	addi	r3,sp,1024
   51f30:	d8011d85 	stb	zero,1142(sp)
   51f34:	d8810005 	stb	r2,1024(sp)
   51f38:	a829883a 	mov	r20,r21
   51f3c:	d8c12215 	stw	r3,1160(sp)
   51f40:	0021883a 	mov	r16,zero
   51f44:	003f7806 	br	51d28 <__alt_data_end+0xfffed338>
   51f48:	94800414 	ori	r18,r18,16
   51f4c:	9080080c 	andi	r2,r18,32
   51f50:	9811883a 	mov	r8,r19
   51f54:	10009026 	beq	r2,zero,52198 <___vfiprintf_internal_r+0x9d4>
   51f58:	d8812317 	ldw	r2,1164(sp)
   51f5c:	d8c12317 	ldw	r3,1164(sp)
   51f60:	14c00017 	ldw	r19,0(r2)
   51f64:	15400117 	ldw	r21,4(r2)
   51f68:	18c00204 	addi	r3,r3,8
   51f6c:	d8c12315 	stw	r3,1164(sp)
   51f70:	0005883a 	mov	r2,zero
   51f74:	9d46b03a 	or	r3,r19,r21
   51f78:	d8011d85 	stb	zero,1142(sp)
   51f7c:	8029883a 	mov	r20,r16
   51f80:	002d883a 	mov	r22,zero
   51f84:	003f4606 	br	51ca0 <__alt_data_end+0xfffed2b0>
   51f88:	94800414 	ori	r18,r18,16
   51f8c:	9080080c 	andi	r2,r18,32
   51f90:	9811883a 	mov	r8,r19
   51f94:	10006226 	beq	r2,zero,52120 <___vfiprintf_internal_r+0x95c>
   51f98:	d9012317 	ldw	r4,1164(sp)
   51f9c:	00800044 	movi	r2,1
   51fa0:	24c00017 	ldw	r19,0(r4)
   51fa4:	25400117 	ldw	r21,4(r4)
   51fa8:	21000204 	addi	r4,r4,8
   51fac:	d9012315 	stw	r4,1164(sp)
   51fb0:	9d46b03a 	or	r3,r19,r21
   51fb4:	003ff006 	br	51f78 <__alt_data_end+0xfffed588>
   51fb8:	b9800007 	ldb	r6,0(r23)
   51fbc:	00801b04 	movi	r2,108
   51fc0:	3082b226 	beq	r6,r2,52a8c <___vfiprintf_internal_r+0x12c8>
   51fc4:	94800414 	ori	r18,r18,16
   51fc8:	003e5f06 	br	51948 <__alt_data_end+0xfffecf58>
   51fcc:	d8c12203 	ldbu	r3,1160(sp)
   51fd0:	010001b4 	movhi	r4,6
   51fd4:	2123ef04 	addi	r4,r4,-28740
   51fd8:	d8c11d85 	stb	r3,1142(sp)
   51fdc:	d9012715 	stw	r4,1180(sp)
   51fe0:	90c0080c 	andi	r3,r18,32
   51fe4:	9811883a 	mov	r8,r19
   51fe8:	d8812317 	ldw	r2,1164(sp)
   51fec:	18005f26 	beq	r3,zero,5216c <___vfiprintf_internal_r+0x9a8>
   51ff0:	d9012317 	ldw	r4,1164(sp)
   51ff4:	14c00017 	ldw	r19,0(r2)
   51ff8:	15400117 	ldw	r21,4(r2)
   51ffc:	21000204 	addi	r4,r4,8
   52000:	d9012315 	stw	r4,1164(sp)
   52004:	9080004c 	andi	r2,r18,1
   52008:	1001e226 	beq	r2,zero,52794 <___vfiprintf_internal_r+0xfd0>
   5200c:	9d46b03a 	or	r3,r19,r21
   52010:	18024e26 	beq	r3,zero,5294c <___vfiprintf_internal_r+0x1188>
   52014:	00800c04 	movi	r2,48
   52018:	d8811d05 	stb	r2,1140(sp)
   5201c:	d9811d45 	stb	r6,1141(sp)
   52020:	94800094 	ori	r18,r18,2
   52024:	00800084 	movi	r2,2
   52028:	003fd306 	br	51f78 <__alt_data_end+0xfffed588>
   5202c:	d9012317 	ldw	r4,1164(sp)
   52030:	d9412317 	ldw	r5,1164(sp)
   52034:	21000017 	ldw	r4,0(r4)
   52038:	28800104 	addi	r2,r5,4
   5203c:	d9012415 	stw	r4,1168(sp)
   52040:	203eeb16 	blt	r4,zero,51bf0 <__alt_data_end+0xfffed200>
   52044:	d8812315 	stw	r2,1164(sp)
   52048:	b9800007 	ldb	r6,0(r23)
   5204c:	003e3e06 	br	51948 <__alt_data_end+0xfffecf58>
   52050:	b9800007 	ldb	r6,0(r23)
   52054:	01000a84 	movi	r4,42
   52058:	b8800044 	addi	r2,r23,1
   5205c:	3102d226 	beq	r6,r4,52ba8 <___vfiprintf_internal_r+0x13e4>
   52060:	35bff404 	addi	r22,r6,-48
   52064:	102f883a 	mov	r23,r2
   52068:	0021883a 	mov	r16,zero
   5206c:	adbe3736 	bltu	r21,r22,5194c <__alt_data_end+0xfffecf5c>
   52070:	0009883a 	mov	r4,zero
   52074:	01400284 	movi	r5,10
   52078:	00453200 	call	45320 <__mulsi3>
   5207c:	b9800007 	ldb	r6,0(r23)
   52080:	b089883a 	add	r4,r22,r2
   52084:	bdc00044 	addi	r23,r23,1
   52088:	35bff404 	addi	r22,r6,-48
   5208c:	adbff92e 	bgeu	r21,r22,52074 <__alt_data_end+0xfffed684>
   52090:	2021883a 	mov	r16,r4
   52094:	203e2d0e 	bge	r4,zero,5194c <__alt_data_end+0xfffecf5c>
   52098:	043fffc4 	movi	r16,-1
   5209c:	003e2b06 	br	5194c <__alt_data_end+0xfffecf5c>
   520a0:	94801014 	ori	r18,r18,64
   520a4:	b9800007 	ldb	r6,0(r23)
   520a8:	003e2706 	br	51948 <__alt_data_end+0xfffecf58>
   520ac:	94800814 	ori	r18,r18,32
   520b0:	b9800007 	ldb	r6,0(r23)
   520b4:	003e2406 	br	51948 <__alt_data_end+0xfffecf58>
   520b8:	d9412317 	ldw	r5,1164(sp)
   520bc:	d8812317 	ldw	r2,1164(sp)
   520c0:	d8011d85 	stb	zero,1142(sp)
   520c4:	29400017 	ldw	r5,0(r5)
   520c8:	9811883a 	mov	r8,r19
   520cc:	14c00104 	addi	r19,r2,4
   520d0:	d9412215 	stw	r5,1160(sp)
   520d4:	28029026 	beq	r5,zero,52b18 <___vfiprintf_internal_r+0x1354>
   520d8:	d9012217 	ldw	r4,1160(sp)
   520dc:	80027616 	blt	r16,zero,52ab8 <___vfiprintf_internal_r+0x12f4>
   520e0:	000b883a 	mov	r5,zero
   520e4:	800d883a 	mov	r6,r16
   520e8:	da012a15 	stw	r8,1192(sp)
   520ec:	004e7d40 	call	4e7d4 <memchr>
   520f0:	da012a17 	ldw	r8,1192(sp)
   520f4:	1002a026 	beq	r2,zero,52b78 <___vfiprintf_internal_r+0x13b4>
   520f8:	d8c12217 	ldw	r3,1160(sp)
   520fc:	10e9c83a 	sub	r20,r2,r3
   52100:	85023816 	blt	r16,r20,529e4 <___vfiprintf_internal_r+0x1220>
   52104:	dd811d83 	ldbu	r22,1142(sp)
   52108:	dcc12315 	stw	r19,1164(sp)
   5210c:	0021883a 	mov	r16,zero
   52110:	003efd06 	br	51d08 <__alt_data_end+0xfffed318>
   52114:	9080080c 	andi	r2,r18,32
   52118:	9811883a 	mov	r8,r19
   5211c:	103f9e1e 	bne	r2,zero,51f98 <__alt_data_end+0xfffed5a8>
   52120:	9080040c 	andi	r2,r18,16
   52124:	10021726 	beq	r2,zero,52984 <___vfiprintf_internal_r+0x11c0>
   52128:	d9412317 	ldw	r5,1164(sp)
   5212c:	002b883a 	mov	r21,zero
   52130:	00800044 	movi	r2,1
   52134:	2cc00017 	ldw	r19,0(r5)
   52138:	29400104 	addi	r5,r5,4
   5213c:	d9412315 	stw	r5,1164(sp)
   52140:	9807883a 	mov	r3,r19
   52144:	003f8c06 	br	51f78 <__alt_data_end+0xfffed588>
   52148:	d8c12203 	ldbu	r3,1160(sp)
   5214c:	010001b4 	movhi	r4,6
   52150:	2123f404 	addi	r4,r4,-28720
   52154:	d8c11d85 	stb	r3,1142(sp)
   52158:	d9012715 	stw	r4,1180(sp)
   5215c:	90c0080c 	andi	r3,r18,32
   52160:	9811883a 	mov	r8,r19
   52164:	d8812317 	ldw	r2,1164(sp)
   52168:	183fa11e 	bne	r3,zero,51ff0 <__alt_data_end+0xfffed600>
   5216c:	90c0040c 	andi	r3,r18,16
   52170:	1801e526 	beq	r3,zero,52908 <___vfiprintf_internal_r+0x1144>
   52174:	d9412317 	ldw	r5,1164(sp)
   52178:	14c00017 	ldw	r19,0(r2)
   5217c:	002b883a 	mov	r21,zero
   52180:	29400104 	addi	r5,r5,4
   52184:	d9412315 	stw	r5,1164(sp)
   52188:	003f9e06 	br	52004 <__alt_data_end+0xfffed614>
   5218c:	9080080c 	andi	r2,r18,32
   52190:	9811883a 	mov	r8,r19
   52194:	103f701e 	bne	r2,zero,51f58 <__alt_data_end+0xfffed568>
   52198:	9080040c 	andi	r2,r18,16
   5219c:	1001ef26 	beq	r2,zero,5295c <___vfiprintf_internal_r+0x1198>
   521a0:	d9012317 	ldw	r4,1164(sp)
   521a4:	002b883a 	mov	r21,zero
   521a8:	0005883a 	mov	r2,zero
   521ac:	24c00017 	ldw	r19,0(r4)
   521b0:	21000104 	addi	r4,r4,4
   521b4:	d9012315 	stw	r4,1164(sp)
   521b8:	9807883a 	mov	r3,r19
   521bc:	003f6e06 	br	51f78 <__alt_data_end+0xfffed588>
   521c0:	d8c12317 	ldw	r3,1164(sp)
   521c4:	9811883a 	mov	r8,r19
   521c8:	00800c04 	movi	r2,48
   521cc:	1cc00017 	ldw	r19,0(r3)
   521d0:	010001b4 	movhi	r4,6
   521d4:	18c00104 	addi	r3,r3,4
   521d8:	d8811d05 	stb	r2,1140(sp)
   521dc:	2123f404 	addi	r4,r4,-28720
   521e0:	00801e04 	movi	r2,120
   521e4:	d8811d45 	stb	r2,1141(sp)
   521e8:	d8c12315 	stw	r3,1164(sp)
   521ec:	002b883a 	mov	r21,zero
   521f0:	94800094 	ori	r18,r18,2
   521f4:	d9012715 	stw	r4,1180(sp)
   521f8:	00800084 	movi	r2,2
   521fc:	9807883a 	mov	r3,r19
   52200:	003f5d06 	br	51f78 <__alt_data_end+0xfffed588>
   52204:	d8c12203 	ldbu	r3,1160(sp)
   52208:	9080080c 	andi	r2,r18,32
   5220c:	9811883a 	mov	r8,r19
   52210:	d8c11d85 	stb	r3,1142(sp)
   52214:	1001b126 	beq	r2,zero,528dc <___vfiprintf_internal_r+0x1118>
   52218:	d9012317 	ldw	r4,1164(sp)
   5221c:	d9412517 	ldw	r5,1172(sp)
   52220:	20800017 	ldw	r2,0(r4)
   52224:	2807d7fa 	srai	r3,r5,31
   52228:	21000104 	addi	r4,r4,4
   5222c:	d9012315 	stw	r4,1164(sp)
   52230:	11400015 	stw	r5,0(r2)
   52234:	10c00115 	stw	r3,4(r2)
   52238:	003d9a06 	br	518a4 <__alt_data_end+0xfffeceb4>
   5223c:	d8812207 	ldb	r2,1160(sp)
   52240:	1001c41e 	bne	r2,zero,52954 <___vfiprintf_internal_r+0x1190>
   52244:	00c00804 	movi	r3,32
   52248:	d8c12205 	stb	r3,1160(sp)
   5224c:	b9800007 	ldb	r6,0(r23)
   52250:	003dbd06 	br	51948 <__alt_data_end+0xfffecf58>
   52254:	00c00ac4 	movi	r3,43
   52258:	d8c12205 	stb	r3,1160(sp)
   5225c:	b9800007 	ldb	r6,0(r23)
   52260:	003db906 	br	51948 <__alt_data_end+0xfffecf58>
   52264:	d8c12203 	ldbu	r3,1160(sp)
   52268:	9080080c 	andi	r2,r18,32
   5226c:	9811883a 	mov	r8,r19
   52270:	d8c11d85 	stb	r3,1142(sp)
   52274:	d8c12317 	ldw	r3,1164(sp)
   52278:	103e7e1e 	bne	r2,zero,51c74 <__alt_data_end+0xfffed284>
   5227c:	9080040c 	andi	r2,r18,16
   52280:	1001a926 	beq	r2,zero,52928 <___vfiprintf_internal_r+0x1164>
   52284:	1cc00017 	ldw	r19,0(r3)
   52288:	d9412317 	ldw	r5,1164(sp)
   5228c:	982bd7fa 	srai	r21,r19,31
   52290:	29400104 	addi	r5,r5,4
   52294:	d9412315 	stw	r5,1164(sp)
   52298:	a805883a 	mov	r2,r21
   5229c:	003e7b06 	br	51c8c <__alt_data_end+0xfffed29c>
   522a0:	94800054 	ori	r18,r18,1
   522a4:	b9800007 	ldb	r6,0(r23)
   522a8:	003da706 	br	51948 <__alt_data_end+0xfffecf58>
   522ac:	d8c12203 	ldbu	r3,1160(sp)
   522b0:	9811883a 	mov	r8,r19
   522b4:	d8c11d85 	stb	r3,1142(sp)
   522b8:	30005826 	beq	r6,zero,5241c <___vfiprintf_internal_r+0xc58>
   522bc:	05400044 	movi	r21,1
   522c0:	d8c10004 	addi	r3,sp,1024
   522c4:	d9810005 	stb	r6,1024(sp)
   522c8:	d8011d85 	stb	zero,1142(sp)
   522cc:	a829883a 	mov	r20,r21
   522d0:	d8c12215 	stw	r3,1160(sp)
   522d4:	003f1a06 	br	51f40 <__alt_data_end+0xfffed550>
   522d8:	d9012117 	ldw	r4,1156(sp)
   522dc:	d9412017 	ldw	r5,1152(sp)
   522e0:	d9811a04 	addi	r6,sp,1128
   522e4:	d9c12a15 	stw	r7,1192(sp)
   522e8:	db012b15 	stw	r12,1196(sp)
   522ec:	00516b00 	call	516b0 <__sprint_r.part.0>
   522f0:	d9c12a17 	ldw	r7,1192(sp)
   522f4:	db012b17 	ldw	r12,1196(sp)
   522f8:	10004e1e 	bne	r2,zero,52434 <___vfiprintf_internal_r+0xc70>
   522fc:	d9011b17 	ldw	r4,1132(sp)
   52300:	d8c11c17 	ldw	r3,1136(sp)
   52304:	d811883a 	mov	r8,sp
   52308:	21400044 	addi	r5,r4,1
   5230c:	003e9d06 	br	51d84 <__alt_data_end+0xfffed394>
   52310:	d9411b17 	ldw	r5,1132(sp)
   52314:	d8c11c17 	ldw	r3,1136(sp)
   52318:	28800044 	addi	r2,r5,1
   5231c:	d9011d87 	ldb	r4,1142(sp)
   52320:	203eb626 	beq	r4,zero,51dfc <__alt_data_end+0xfffed40c>
   52324:	01000044 	movi	r4,1
   52328:	d9411d84 	addi	r5,sp,1142
   5232c:	1907883a 	add	r3,r3,r4
   52330:	41400015 	stw	r5,0(r8)
   52334:	41000115 	stw	r4,4(r8)
   52338:	d8c11c15 	stw	r3,1136(sp)
   5233c:	d8811b15 	stw	r2,1132(sp)
   52340:	014001c4 	movi	r5,7
   52344:	2880ce16 	blt	r5,r2,52680 <___vfiprintf_internal_r+0xebc>
   52348:	100b883a 	mov	r5,r2
   5234c:	42000204 	addi	r8,r8,8
   52350:	10800044 	addi	r2,r2,1
   52354:	003ea906 	br	51dfc <__alt_data_end+0xfffed40c>
   52358:	d9012117 	ldw	r4,1156(sp)
   5235c:	d9412017 	ldw	r5,1152(sp)
   52360:	d9811a04 	addi	r6,sp,1128
   52364:	00516b00 	call	516b0 <__sprint_r.part.0>
   52368:	1000321e 	bne	r2,zero,52434 <___vfiprintf_internal_r+0xc70>
   5236c:	d9411b17 	ldw	r5,1132(sp)
   52370:	d8c11c17 	ldw	r3,1136(sp)
   52374:	d811883a 	mov	r8,sp
   52378:	28800044 	addi	r2,r5,1
   5237c:	003eba06 	br	51e68 <__alt_data_end+0xfffed478>
   52380:	10803fcc 	andi	r2,r2,255
   52384:	00c00044 	movi	r3,1
   52388:	10fe4d1e 	bne	r2,r3,51cc0 <__alt_data_end+0xfffed2d0>
   5238c:	a800021e 	bne	r21,zero,52398 <___vfiprintf_internal_r+0xbd4>
   52390:	00800244 	movi	r2,9
   52394:	14c01b2e 	bgeu	r2,r19,52404 <___vfiprintf_internal_r+0xc40>
   52398:	dc012215 	stw	r16,1160(sp)
   5239c:	dd010a04 	addi	r20,sp,1064
   523a0:	a821883a 	mov	r16,r21
   523a4:	402b883a 	mov	r21,r8
   523a8:	9809883a 	mov	r4,r19
   523ac:	800b883a 	mov	r5,r16
   523b0:	01800284 	movi	r6,10
   523b4:	000f883a 	mov	r7,zero
   523b8:	0053b980 	call	53b98 <__umoddi3>
   523bc:	10800c04 	addi	r2,r2,48
   523c0:	a53fffc4 	addi	r20,r20,-1
   523c4:	9809883a 	mov	r4,r19
   523c8:	800b883a 	mov	r5,r16
   523cc:	01800284 	movi	r6,10
   523d0:	000f883a 	mov	r7,zero
   523d4:	a0800005 	stb	r2,0(r20)
   523d8:	00535580 	call	53558 <__udivdi3>
   523dc:	1027883a 	mov	r19,r2
   523e0:	10c4b03a 	or	r2,r2,r3
   523e4:	1821883a 	mov	r16,r3
   523e8:	103fef1e 	bne	r2,zero,523a8 <__alt_data_end+0xfffed9b8>
   523ec:	d9011e17 	ldw	r4,1144(sp)
   523f0:	dc012217 	ldw	r16,1160(sp)
   523f4:	a811883a 	mov	r8,r21
   523f8:	dd012215 	stw	r20,1160(sp)
   523fc:	2529c83a 	sub	r20,r4,r20
   52400:	003e4106 	br	51d08 <__alt_data_end+0xfffed318>
   52404:	9cc00c04 	addi	r19,r19,48
   52408:	d8c109c4 	addi	r3,sp,1063
   5240c:	dcc109c5 	stb	r19,1063(sp)
   52410:	dd012817 	ldw	r20,1184(sp)
   52414:	d8c12215 	stw	r3,1160(sp)
   52418:	003e3b06 	br	51d08 <__alt_data_end+0xfffed318>
   5241c:	d8811c17 	ldw	r2,1136(sp)
   52420:	10000426 	beq	r2,zero,52434 <___vfiprintf_internal_r+0xc70>
   52424:	d9012117 	ldw	r4,1156(sp)
   52428:	d9412017 	ldw	r5,1152(sp)
   5242c:	d9811a04 	addi	r6,sp,1128
   52430:	00516b00 	call	516b0 <__sprint_r.part.0>
   52434:	d9412017 	ldw	r5,1152(sp)
   52438:	2880030b 	ldhu	r2,12(r5)
   5243c:	1080100c 	andi	r2,r2,64
   52440:	103ddc1e 	bne	r2,zero,51bb4 <__alt_data_end+0xfffed1c4>
   52444:	d8812517 	ldw	r2,1172(sp)
   52448:	003ddb06 	br	51bb8 <__alt_data_end+0xfffed1c8>
   5244c:	1801061e 	bne	r3,zero,52868 <___vfiprintf_internal_r+0x10a4>
   52450:	d8c12217 	ldw	r3,1160(sp)
   52454:	00800044 	movi	r2,1
   52458:	dd000115 	stw	r20,4(sp)
   5245c:	d8c00015 	stw	r3,0(sp)
   52460:	dd011c15 	stw	r20,1136(sp)
   52464:	d8811b15 	stw	r2,1132(sp)
   52468:	a007883a 	mov	r3,r20
   5246c:	d811883a 	mov	r8,sp
   52470:	42000204 	addi	r8,r8,8
   52474:	9480010c 	andi	r18,r18,4
   52478:	90003426 	beq	r18,zero,5254c <___vfiprintf_internal_r+0xd88>
   5247c:	d9412417 	ldw	r5,1168(sp)
   52480:	2d65c83a 	sub	r18,r5,r21
   52484:	0480310e 	bge	zero,r18,5254c <___vfiprintf_internal_r+0xd88>
   52488:	04000404 	movi	r16,16
   5248c:	8481ad0e 	bge	r16,r18,52b44 <___vfiprintf_internal_r+0x1380>
   52490:	014001b4 	movhi	r5,6
   52494:	29650904 	addi	r5,r5,-27612
   52498:	d9011b17 	ldw	r4,1132(sp)
   5249c:	d9412615 	stw	r5,1176(sp)
   524a0:	04c001c4 	movi	r19,7
   524a4:	dd012117 	ldw	r20,1156(sp)
   524a8:	dd812017 	ldw	r22,1152(sp)
   524ac:	00000506 	br	524c4 <___vfiprintf_internal_r+0xd00>
   524b0:	21400084 	addi	r5,r4,2
   524b4:	42000204 	addi	r8,r8,8
   524b8:	1009883a 	mov	r4,r2
   524bc:	94bffc04 	addi	r18,r18,-16
   524c0:	84800d0e 	bge	r16,r18,524f8 <___vfiprintf_internal_r+0xd34>
   524c4:	18c00404 	addi	r3,r3,16
   524c8:	20800044 	addi	r2,r4,1
   524cc:	47000015 	stw	fp,0(r8)
   524d0:	44000115 	stw	r16,4(r8)
   524d4:	d8c11c15 	stw	r3,1136(sp)
   524d8:	d8811b15 	stw	r2,1132(sp)
   524dc:	98bff40e 	bge	r19,r2,524b0 <__alt_data_end+0xfffedac0>
   524e0:	1800291e 	bne	r3,zero,52588 <___vfiprintf_internal_r+0xdc4>
   524e4:	94bffc04 	addi	r18,r18,-16
   524e8:	0009883a 	mov	r4,zero
   524ec:	01400044 	movi	r5,1
   524f0:	d811883a 	mov	r8,sp
   524f4:	84bff316 	blt	r16,r18,524c4 <__alt_data_end+0xfffedad4>
   524f8:	d8812617 	ldw	r2,1176(sp)
   524fc:	1c87883a 	add	r3,r3,r18
   52500:	44800115 	stw	r18,4(r8)
   52504:	40800015 	stw	r2,0(r8)
   52508:	d8c11c15 	stw	r3,1136(sp)
   5250c:	d9411b15 	stw	r5,1132(sp)
   52510:	008001c4 	movi	r2,7
   52514:	11400d0e 	bge	r2,r5,5254c <___vfiprintf_internal_r+0xd88>
   52518:	1800061e 	bne	r3,zero,52534 <___vfiprintf_internal_r+0xd70>
   5251c:	d8c12417 	ldw	r3,1168(sp)
   52520:	a8c12e16 	blt	r21,r3,529dc <___vfiprintf_internal_r+0x1218>
   52524:	d9012517 	ldw	r4,1172(sp)
   52528:	2549883a 	add	r4,r4,r21
   5252c:	d9012515 	stw	r4,1172(sp)
   52530:	00001206 	br	5257c <___vfiprintf_internal_r+0xdb8>
   52534:	d9012117 	ldw	r4,1156(sp)
   52538:	d9412017 	ldw	r5,1152(sp)
   5253c:	d9811a04 	addi	r6,sp,1128
   52540:	00516b00 	call	516b0 <__sprint_r.part.0>
   52544:	103fbb1e 	bne	r2,zero,52434 <__alt_data_end+0xfffeda44>
   52548:	d8c11c17 	ldw	r3,1136(sp)
   5254c:	d8812417 	ldw	r2,1168(sp)
   52550:	a880010e 	bge	r21,r2,52558 <___vfiprintf_internal_r+0xd94>
   52554:	102b883a 	mov	r21,r2
   52558:	d9012517 	ldw	r4,1172(sp)
   5255c:	2549883a 	add	r4,r4,r21
   52560:	d9012515 	stw	r4,1172(sp)
   52564:	18000526 	beq	r3,zero,5257c <___vfiprintf_internal_r+0xdb8>
   52568:	d9012117 	ldw	r4,1156(sp)
   5256c:	d9412017 	ldw	r5,1152(sp)
   52570:	d9811a04 	addi	r6,sp,1128
   52574:	00516b00 	call	516b0 <__sprint_r.part.0>
   52578:	103fae1e 	bne	r2,zero,52434 <__alt_data_end+0xfffeda44>
   5257c:	d8011b15 	stw	zero,1132(sp)
   52580:	d811883a 	mov	r8,sp
   52584:	003cc706 	br	518a4 <__alt_data_end+0xfffeceb4>
   52588:	a009883a 	mov	r4,r20
   5258c:	b00b883a 	mov	r5,r22
   52590:	d9811a04 	addi	r6,sp,1128
   52594:	00516b00 	call	516b0 <__sprint_r.part.0>
   52598:	103fa61e 	bne	r2,zero,52434 <__alt_data_end+0xfffeda44>
   5259c:	d9011b17 	ldw	r4,1132(sp)
   525a0:	d8c11c17 	ldw	r3,1136(sp)
   525a4:	d811883a 	mov	r8,sp
   525a8:	21400044 	addi	r5,r4,1
   525ac:	003fc306 	br	524bc <__alt_data_end+0xfffedacc>
   525b0:	d9012417 	ldw	r4,1168(sp)
   525b4:	256dc83a 	sub	r22,r4,r21
   525b8:	05be1f0e 	bge	zero,r22,51e38 <__alt_data_end+0xfffed448>
   525bc:	04c00404 	movi	r19,16
   525c0:	9d81720e 	bge	r19,r22,52b8c <___vfiprintf_internal_r+0x13c8>
   525c4:	008001b4 	movhi	r2,6
   525c8:	10a50504 	addi	r2,r2,-27628
   525cc:	d8812615 	stw	r2,1176(sp)
   525d0:	028001c4 	movi	r10,7
   525d4:	00000506 	br	525ec <___vfiprintf_internal_r+0xe28>
   525d8:	29000084 	addi	r4,r5,2
   525dc:	42000204 	addi	r8,r8,8
   525e0:	100b883a 	mov	r5,r2
   525e4:	b5bffc04 	addi	r22,r22,-16
   525e8:	9d800d0e 	bge	r19,r22,52620 <___vfiprintf_internal_r+0xe5c>
   525ec:	18c00404 	addi	r3,r3,16
   525f0:	28800044 	addi	r2,r5,1
   525f4:	44400015 	stw	r17,0(r8)
   525f8:	44c00115 	stw	r19,4(r8)
   525fc:	d8c11c15 	stw	r3,1136(sp)
   52600:	d8811b15 	stw	r2,1132(sp)
   52604:	50bff40e 	bge	r10,r2,525d8 <__alt_data_end+0xfffedbe8>
   52608:	1800111e 	bne	r3,zero,52650 <___vfiprintf_internal_r+0xe8c>
   5260c:	b5bffc04 	addi	r22,r22,-16
   52610:	000b883a 	mov	r5,zero
   52614:	01000044 	movi	r4,1
   52618:	d811883a 	mov	r8,sp
   5261c:	9dbff316 	blt	r19,r22,525ec <__alt_data_end+0xfffedbfc>
   52620:	d9412617 	ldw	r5,1176(sp)
   52624:	1d87883a 	add	r3,r3,r22
   52628:	45800115 	stw	r22,4(r8)
   5262c:	41400015 	stw	r5,0(r8)
   52630:	d8c11c15 	stw	r3,1136(sp)
   52634:	d9011b15 	stw	r4,1132(sp)
   52638:	008001c4 	movi	r2,7
   5263c:	11008516 	blt	r2,r4,52854 <___vfiprintf_internal_r+0x1090>
   52640:	42000204 	addi	r8,r8,8
   52644:	20800044 	addi	r2,r4,1
   52648:	200b883a 	mov	r5,r4
   5264c:	003dfa06 	br	51e38 <__alt_data_end+0xfffed448>
   52650:	d9012117 	ldw	r4,1156(sp)
   52654:	d9412017 	ldw	r5,1152(sp)
   52658:	d9811a04 	addi	r6,sp,1128
   5265c:	da812a15 	stw	r10,1192(sp)
   52660:	00516b00 	call	516b0 <__sprint_r.part.0>
   52664:	da812a17 	ldw	r10,1192(sp)
   52668:	103f721e 	bne	r2,zero,52434 <__alt_data_end+0xfffeda44>
   5266c:	d9411b17 	ldw	r5,1132(sp)
   52670:	d8c11c17 	ldw	r3,1136(sp)
   52674:	d811883a 	mov	r8,sp
   52678:	29000044 	addi	r4,r5,1
   5267c:	003fd906 	br	525e4 <__alt_data_end+0xfffedbf4>
   52680:	1800681e 	bne	r3,zero,52824 <___vfiprintf_internal_r+0x1060>
   52684:	50004d26 	beq	r10,zero,527bc <___vfiprintf_internal_r+0xff8>
   52688:	d8811d04 	addi	r2,sp,1140
   5268c:	00c00084 	movi	r3,2
   52690:	d8800015 	stw	r2,0(sp)
   52694:	d8c00115 	stw	r3,4(sp)
   52698:	2005883a 	mov	r2,r4
   5269c:	d811883a 	mov	r8,sp
   526a0:	003de006 	br	51e24 <__alt_data_end+0xfffed434>
   526a4:	1800551e 	bne	r3,zero,527fc <___vfiprintf_internal_r+0x1038>
   526a8:	000b883a 	mov	r5,zero
   526ac:	00800044 	movi	r2,1
   526b0:	d811883a 	mov	r8,sp
   526b4:	003dde06 	br	51e30 <__alt_data_end+0xfffed440>
   526b8:	10803fcc 	andi	r2,r2,255
   526bc:	1000191e 	bne	r2,zero,52724 <___vfiprintf_internal_r+0xf60>
   526c0:	9080004c 	andi	r2,r18,1
   526c4:	10001726 	beq	r2,zero,52724 <___vfiprintf_internal_r+0xf60>
   526c8:	00800c04 	movi	r2,48
   526cc:	d8c109c4 	addi	r3,sp,1063
   526d0:	d88109c5 	stb	r2,1063(sp)
   526d4:	dd012817 	ldw	r20,1184(sp)
   526d8:	d8c12215 	stw	r3,1160(sp)
   526dc:	003d8a06 	br	51d08 <__alt_data_end+0xfffed318>
   526e0:	d9012717 	ldw	r4,1180(sp)
   526e4:	dd010a04 	addi	r20,sp,1064
   526e8:	988003cc 	andi	r2,r19,15
   526ec:	a806973a 	slli	r3,r21,28
   526f0:	2085883a 	add	r2,r4,r2
   526f4:	9826d13a 	srli	r19,r19,4
   526f8:	10800003 	ldbu	r2,0(r2)
   526fc:	a82ad13a 	srli	r21,r21,4
   52700:	a53fffc4 	addi	r20,r20,-1
   52704:	1ce6b03a 	or	r19,r3,r19
   52708:	a0800005 	stb	r2,0(r20)
   5270c:	9d44b03a 	or	r2,r19,r21
   52710:	103ff51e 	bne	r2,zero,526e8 <__alt_data_end+0xfffedcf8>
   52714:	d9411e17 	ldw	r5,1144(sp)
   52718:	dd012215 	stw	r20,1160(sp)
   5271c:	2d29c83a 	sub	r20,r5,r20
   52720:	003d7906 	br	51d08 <__alt_data_end+0xfffed318>
   52724:	d8c10a04 	addi	r3,sp,1064
   52728:	d8c12215 	stw	r3,1160(sp)
   5272c:	003d7606 	br	51d08 <__alt_data_end+0xfffed318>
   52730:	18009e1e 	bne	r3,zero,529ac <___vfiprintf_internal_r+0x11e8>
   52734:	d8811d87 	ldb	r2,1142(sp)
   52738:	10005f26 	beq	r2,zero,528b8 <___vfiprintf_internal_r+0x10f4>
   5273c:	00c00044 	movi	r3,1
   52740:	d9011d84 	addi	r4,sp,1142
   52744:	1805883a 	mov	r2,r3
   52748:	d9000015 	stw	r4,0(sp)
   5274c:	d8c00115 	stw	r3,4(sp)
   52750:	d811883a 	mov	r8,sp
   52754:	003efc06 	br	52348 <__alt_data_end+0xfffed958>
   52758:	d9412417 	ldw	r5,1168(sp)
   5275c:	d811883a 	mov	r8,sp
   52760:	2d65c83a 	sub	r18,r5,r21
   52764:	04bf4816 	blt	zero,r18,52488 <__alt_data_end+0xfffeda98>
   52768:	003f6c06 	br	5251c <__alt_data_end+0xfffedb2c>
   5276c:	b829883a 	mov	r20,r23
   52770:	003c6906 	br	51918 <__alt_data_end+0xfffecf28>
   52774:	d9012117 	ldw	r4,1156(sp)
   52778:	d9412017 	ldw	r5,1152(sp)
   5277c:	d9811a04 	addi	r6,sp,1128
   52780:	00516b00 	call	516b0 <__sprint_r.part.0>
   52784:	103f2b1e 	bne	r2,zero,52434 <__alt_data_end+0xfffeda44>
   52788:	d8c11c17 	ldw	r3,1136(sp)
   5278c:	d811883a 	mov	r8,sp
   52790:	003f3806 	br	52474 <__alt_data_end+0xfffeda84>
   52794:	00800084 	movi	r2,2
   52798:	9d46b03a 	or	r3,r19,r21
   5279c:	003df606 	br	51f78 <__alt_data_end+0xfffed588>
   527a0:	d9012117 	ldw	r4,1156(sp)
   527a4:	d9412017 	ldw	r5,1152(sp)
   527a8:	d9811a04 	addi	r6,sp,1128
   527ac:	00516b00 	call	516b0 <__sprint_r.part.0>
   527b0:	103f201e 	bne	r2,zero,52434 <__alt_data_end+0xfffeda44>
   527b4:	d811883a 	mov	r8,sp
   527b8:	003cc606 	br	51ad4 <__alt_data_end+0xfffed0e4>
   527bc:	000b883a 	mov	r5,zero
   527c0:	2005883a 	mov	r2,r4
   527c4:	d811883a 	mov	r8,sp
   527c8:	003d9906 	br	51e30 <__alt_data_end+0xfffed440>
   527cc:	10803fcc 	andi	r2,r2,255
   527d0:	1080201c 	xori	r2,r2,128
   527d4:	10bfe004 	addi	r2,r2,-128
   527d8:	01000c04 	movi	r4,48
   527dc:	1100b226 	beq	r2,r4,52aa8 <___vfiprintf_internal_r+0x12e4>
   527e0:	d9412217 	ldw	r5,1160(sp)
   527e4:	d8811e17 	ldw	r2,1144(sp)
   527e8:	193fffc5 	stb	r4,-1(r3)
   527ec:	297fffc4 	addi	r5,r5,-1
   527f0:	d9412215 	stw	r5,1160(sp)
   527f4:	1169c83a 	sub	r20,r2,r5
   527f8:	003d4306 	br	51d08 <__alt_data_end+0xfffed318>
   527fc:	d9012117 	ldw	r4,1156(sp)
   52800:	d9412017 	ldw	r5,1152(sp)
   52804:	d9811a04 	addi	r6,sp,1128
   52808:	00516b00 	call	516b0 <__sprint_r.part.0>
   5280c:	103f091e 	bne	r2,zero,52434 <__alt_data_end+0xfffeda44>
   52810:	d9411b17 	ldw	r5,1132(sp)
   52814:	d8c11c17 	ldw	r3,1136(sp)
   52818:	d811883a 	mov	r8,sp
   5281c:	28800044 	addi	r2,r5,1
   52820:	003d8306 	br	51e30 <__alt_data_end+0xfffed440>
   52824:	d9012117 	ldw	r4,1156(sp)
   52828:	d9412017 	ldw	r5,1152(sp)
   5282c:	d9811a04 	addi	r6,sp,1128
   52830:	da812a15 	stw	r10,1192(sp)
   52834:	00516b00 	call	516b0 <__sprint_r.part.0>
   52838:	da812a17 	ldw	r10,1192(sp)
   5283c:	103efd1e 	bne	r2,zero,52434 <__alt_data_end+0xfffeda44>
   52840:	d9411b17 	ldw	r5,1132(sp)
   52844:	d8c11c17 	ldw	r3,1136(sp)
   52848:	d811883a 	mov	r8,sp
   5284c:	28800044 	addi	r2,r5,1
   52850:	003d6a06 	br	51dfc <__alt_data_end+0xfffed40c>
   52854:	1800a01e 	bne	r3,zero,52ad8 <___vfiprintf_internal_r+0x1314>
   52858:	000b883a 	mov	r5,zero
   5285c:	00800044 	movi	r2,1
   52860:	d811883a 	mov	r8,sp
   52864:	003d7406 	br	51e38 <__alt_data_end+0xfffed448>
   52868:	d9012117 	ldw	r4,1156(sp)
   5286c:	d9412017 	ldw	r5,1152(sp)
   52870:	d9811a04 	addi	r6,sp,1128
   52874:	00516b00 	call	516b0 <__sprint_r.part.0>
   52878:	103eee1e 	bne	r2,zero,52434 <__alt_data_end+0xfffeda44>
   5287c:	d8811b17 	ldw	r2,1132(sp)
   52880:	d8c11c17 	ldw	r3,1136(sp)
   52884:	d811883a 	mov	r8,sp
   52888:	10800044 	addi	r2,r2,1
   5288c:	003d8f06 	br	51ecc <__alt_data_end+0xfffed4dc>
   52890:	04e7c83a 	sub	r19,zero,r19
   52894:	9804c03a 	cmpne	r2,r19,zero
   52898:	056bc83a 	sub	r21,zero,r21
   5289c:	a8abc83a 	sub	r21,r21,r2
   528a0:	05800b44 	movi	r22,45
   528a4:	dd811d85 	stb	r22,1142(sp)
   528a8:	8029883a 	mov	r20,r16
   528ac:	00800044 	movi	r2,1
   528b0:	9d46b03a 	or	r3,r19,r21
   528b4:	003cfa06 	br	51ca0 <__alt_data_end+0xfffed2b0>
   528b8:	000b883a 	mov	r5,zero
   528bc:	00800044 	movi	r2,1
   528c0:	d811883a 	mov	r8,sp
   528c4:	503d5a26 	beq	r10,zero,51e30 <__alt_data_end+0xfffed440>
   528c8:	00c00084 	movi	r3,2
   528cc:	d9011d04 	addi	r4,sp,1140
   528d0:	d9000015 	stw	r4,0(sp)
   528d4:	d8c00115 	stw	r3,4(sp)
   528d8:	003d5206 	br	51e24 <__alt_data_end+0xfffed434>
   528dc:	9080040c 	andi	r2,r18,16
   528e0:	1000421e 	bne	r2,zero,529ec <___vfiprintf_internal_r+0x1228>
   528e4:	9480100c 	andi	r18,r18,64
   528e8:	90009c26 	beq	r18,zero,52b5c <___vfiprintf_internal_r+0x1398>
   528ec:	d9412317 	ldw	r5,1164(sp)
   528f0:	d8c12517 	ldw	r3,1172(sp)
   528f4:	28800017 	ldw	r2,0(r5)
   528f8:	29400104 	addi	r5,r5,4
   528fc:	d9412315 	stw	r5,1164(sp)
   52900:	10c0000d 	sth	r3,0(r2)
   52904:	003be706 	br	518a4 <__alt_data_end+0xfffeceb4>
   52908:	90c0100c 	andi	r3,r18,64
   5290c:	18003e26 	beq	r3,zero,52a08 <___vfiprintf_internal_r+0x1244>
   52910:	d8c12317 	ldw	r3,1164(sp)
   52914:	14c0000b 	ldhu	r19,0(r2)
   52918:	002b883a 	mov	r21,zero
   5291c:	18c00104 	addi	r3,r3,4
   52920:	d8c12315 	stw	r3,1164(sp)
   52924:	003db706 	br	52004 <__alt_data_end+0xfffed614>
   52928:	9080100c 	andi	r2,r18,64
   5292c:	10004c26 	beq	r2,zero,52a60 <___vfiprintf_internal_r+0x129c>
   52930:	1cc0000f 	ldh	r19,0(r3)
   52934:	d8812317 	ldw	r2,1164(sp)
   52938:	982bd7fa 	srai	r21,r19,31
   5293c:	10800104 	addi	r2,r2,4
   52940:	d8812315 	stw	r2,1164(sp)
   52944:	a805883a 	mov	r2,r21
   52948:	003cd006 	br	51c8c <__alt_data_end+0xfffed29c>
   5294c:	00800084 	movi	r2,2
   52950:	003d8906 	br	51f78 <__alt_data_end+0xfffed588>
   52954:	b9800007 	ldb	r6,0(r23)
   52958:	003bfb06 	br	51948 <__alt_data_end+0xfffecf58>
   5295c:	9080100c 	andi	r2,r18,64
   52960:	10003726 	beq	r2,zero,52a40 <___vfiprintf_internal_r+0x127c>
   52964:	d9412317 	ldw	r5,1164(sp)
   52968:	002b883a 	mov	r21,zero
   5296c:	0005883a 	mov	r2,zero
   52970:	2cc0000b 	ldhu	r19,0(r5)
   52974:	29400104 	addi	r5,r5,4
   52978:	d9412315 	stw	r5,1164(sp)
   5297c:	9807883a 	mov	r3,r19
   52980:	003d7d06 	br	51f78 <__alt_data_end+0xfffed588>
   52984:	9080100c 	andi	r2,r18,64
   52988:	10002526 	beq	r2,zero,52a20 <___vfiprintf_internal_r+0x125c>
   5298c:	d8812317 	ldw	r2,1164(sp)
   52990:	002b883a 	mov	r21,zero
   52994:	14c0000b 	ldhu	r19,0(r2)
   52998:	10800104 	addi	r2,r2,4
   5299c:	d8812315 	stw	r2,1164(sp)
   529a0:	9807883a 	mov	r3,r19
   529a4:	00800044 	movi	r2,1
   529a8:	003d7306 	br	51f78 <__alt_data_end+0xfffed588>
   529ac:	d9012117 	ldw	r4,1156(sp)
   529b0:	d9412017 	ldw	r5,1152(sp)
   529b4:	d9811a04 	addi	r6,sp,1128
   529b8:	da812a15 	stw	r10,1192(sp)
   529bc:	00516b00 	call	516b0 <__sprint_r.part.0>
   529c0:	da812a17 	ldw	r10,1192(sp)
   529c4:	103e9b1e 	bne	r2,zero,52434 <__alt_data_end+0xfffeda44>
   529c8:	d9411b17 	ldw	r5,1132(sp)
   529cc:	d8c11c17 	ldw	r3,1136(sp)
   529d0:	d811883a 	mov	r8,sp
   529d4:	28800044 	addi	r2,r5,1
   529d8:	003e5006 	br	5231c <__alt_data_end+0xfffed92c>
   529dc:	182b883a 	mov	r21,r3
   529e0:	003ed006 	br	52524 <__alt_data_end+0xfffedb34>
   529e4:	8029883a 	mov	r20,r16
   529e8:	003dc606 	br	52104 <__alt_data_end+0xfffed714>
   529ec:	d8c12317 	ldw	r3,1164(sp)
   529f0:	d9012517 	ldw	r4,1172(sp)
   529f4:	18800017 	ldw	r2,0(r3)
   529f8:	18c00104 	addi	r3,r3,4
   529fc:	d8c12315 	stw	r3,1164(sp)
   52a00:	11000015 	stw	r4,0(r2)
   52a04:	003ba706 	br	518a4 <__alt_data_end+0xfffeceb4>
   52a08:	d9012317 	ldw	r4,1164(sp)
   52a0c:	14c00017 	ldw	r19,0(r2)
   52a10:	002b883a 	mov	r21,zero
   52a14:	21000104 	addi	r4,r4,4
   52a18:	d9012315 	stw	r4,1164(sp)
   52a1c:	003d7906 	br	52004 <__alt_data_end+0xfffed614>
   52a20:	d8c12317 	ldw	r3,1164(sp)
   52a24:	002b883a 	mov	r21,zero
   52a28:	00800044 	movi	r2,1
   52a2c:	1cc00017 	ldw	r19,0(r3)
   52a30:	18c00104 	addi	r3,r3,4
   52a34:	d8c12315 	stw	r3,1164(sp)
   52a38:	9807883a 	mov	r3,r19
   52a3c:	003d4e06 	br	51f78 <__alt_data_end+0xfffed588>
   52a40:	d8812317 	ldw	r2,1164(sp)
   52a44:	002b883a 	mov	r21,zero
   52a48:	14c00017 	ldw	r19,0(r2)
   52a4c:	10800104 	addi	r2,r2,4
   52a50:	d8812315 	stw	r2,1164(sp)
   52a54:	9807883a 	mov	r3,r19
   52a58:	0005883a 	mov	r2,zero
   52a5c:	003d4606 	br	51f78 <__alt_data_end+0xfffed588>
   52a60:	1cc00017 	ldw	r19,0(r3)
   52a64:	d8c12317 	ldw	r3,1164(sp)
   52a68:	982bd7fa 	srai	r21,r19,31
   52a6c:	18c00104 	addi	r3,r3,4
   52a70:	d8c12315 	stw	r3,1164(sp)
   52a74:	a805883a 	mov	r2,r21
   52a78:	003c8406 	br	51c8c <__alt_data_end+0xfffed29c>
   52a7c:	010001b4 	movhi	r4,6
   52a80:	21250504 	addi	r4,r4,-27628
   52a84:	d9012615 	stw	r4,1176(sp)
   52a88:	003d0606 	br	51ea4 <__alt_data_end+0xfffed4b4>
   52a8c:	b9800043 	ldbu	r6,1(r23)
   52a90:	94800814 	ori	r18,r18,32
   52a94:	bdc00044 	addi	r23,r23,1
   52a98:	31803fcc 	andi	r6,r6,255
   52a9c:	3180201c 	xori	r6,r6,128
   52aa0:	31bfe004 	addi	r6,r6,-128
   52aa4:	003ba806 	br	51948 <__alt_data_end+0xfffecf58>
   52aa8:	d8811e17 	ldw	r2,1144(sp)
   52aac:	d8c12217 	ldw	r3,1160(sp)
   52ab0:	10e9c83a 	sub	r20,r2,r3
   52ab4:	003c9406 	br	51d08 <__alt_data_end+0xfffed318>
   52ab8:	da012a15 	stw	r8,1192(sp)
   52abc:	00477300 	call	47730 <strlen>
   52ac0:	1029883a 	mov	r20,r2
   52ac4:	dd811d83 	ldbu	r22,1142(sp)
   52ac8:	dcc12315 	stw	r19,1164(sp)
   52acc:	0021883a 	mov	r16,zero
   52ad0:	da012a17 	ldw	r8,1192(sp)
   52ad4:	003c8c06 	br	51d08 <__alt_data_end+0xfffed318>
   52ad8:	d9012117 	ldw	r4,1156(sp)
   52adc:	d9412017 	ldw	r5,1152(sp)
   52ae0:	d9811a04 	addi	r6,sp,1128
   52ae4:	00516b00 	call	516b0 <__sprint_r.part.0>
   52ae8:	103e521e 	bne	r2,zero,52434 <__alt_data_end+0xfffeda44>
   52aec:	d9411b17 	ldw	r5,1132(sp)
   52af0:	d8c11c17 	ldw	r3,1136(sp)
   52af4:	d811883a 	mov	r8,sp
   52af8:	28800044 	addi	r2,r5,1
   52afc:	003cce06 	br	51e38 <__alt_data_end+0xfffed448>
   52b00:	014001b4 	movhi	r5,6
   52b04:	29650904 	addi	r5,r5,-27612
   52b08:	d9412615 	stw	r5,1176(sp)
   52b0c:	d9411b17 	ldw	r5,1132(sp)
   52b10:	29400044 	addi	r5,r5,1
   52b14:	003cad06 	br	51dcc <__alt_data_end+0xfffed3dc>
   52b18:	00800184 	movi	r2,6
   52b1c:	1400012e 	bgeu	r2,r16,52b24 <___vfiprintf_internal_r+0x1360>
   52b20:	1021883a 	mov	r16,r2
   52b24:	8029883a 	mov	r20,r16
   52b28:	802b883a 	mov	r21,r16
   52b2c:	80001c16 	blt	r16,zero,52ba0 <___vfiprintf_internal_r+0x13dc>
   52b30:	00c001b4 	movhi	r3,6
   52b34:	18e3f904 	addi	r3,r3,-28700
   52b38:	dcc12315 	stw	r19,1164(sp)
   52b3c:	d8c12215 	stw	r3,1160(sp)
   52b40:	003cff06 	br	51f40 <__alt_data_end+0xfffed550>
   52b44:	d9411b17 	ldw	r5,1132(sp)
   52b48:	008001b4 	movhi	r2,6
   52b4c:	10a50904 	addi	r2,r2,-27612
   52b50:	d8812615 	stw	r2,1176(sp)
   52b54:	29400044 	addi	r5,r5,1
   52b58:	003e6706 	br	524f8 <__alt_data_end+0xfffedb08>
   52b5c:	d9012317 	ldw	r4,1164(sp)
   52b60:	d9412517 	ldw	r5,1172(sp)
   52b64:	20800017 	ldw	r2,0(r4)
   52b68:	21000104 	addi	r4,r4,4
   52b6c:	d9012315 	stw	r4,1164(sp)
   52b70:	11400015 	stw	r5,0(r2)
   52b74:	003b4b06 	br	518a4 <__alt_data_end+0xfffeceb4>
   52b78:	8029883a 	mov	r20,r16
   52b7c:	dd811d83 	ldbu	r22,1142(sp)
   52b80:	dcc12315 	stw	r19,1164(sp)
   52b84:	0021883a 	mov	r16,zero
   52b88:	003c5f06 	br	51d08 <__alt_data_end+0xfffed318>
   52b8c:	010001b4 	movhi	r4,6
   52b90:	21250504 	addi	r4,r4,-27628
   52b94:	d9012615 	stw	r4,1176(sp)
   52b98:	1009883a 	mov	r4,r2
   52b9c:	003ea006 	br	52620 <__alt_data_end+0xfffedc30>
   52ba0:	002b883a 	mov	r21,zero
   52ba4:	003fe206 	br	52b30 <__alt_data_end+0xfffee140>
   52ba8:	d9412317 	ldw	r5,1164(sp)
   52bac:	b807883a 	mov	r3,r23
   52bb0:	102f883a 	mov	r23,r2
   52bb4:	2c000017 	ldw	r16,0(r5)
   52bb8:	29000104 	addi	r4,r5,4
   52bbc:	d9012315 	stw	r4,1164(sp)
   52bc0:	80000416 	blt	r16,zero,52bd4 <___vfiprintf_internal_r+0x1410>
   52bc4:	19800047 	ldb	r6,1(r3)
   52bc8:	003b5f06 	br	51948 <__alt_data_end+0xfffecf58>
   52bcc:	043fffc4 	movi	r16,-1
   52bd0:	003bef06 	br	51b90 <__alt_data_end+0xfffed1a0>
   52bd4:	043fffc4 	movi	r16,-1
   52bd8:	19800047 	ldb	r6,1(r3)
   52bdc:	003b5a06 	br	51948 <__alt_data_end+0xfffecf58>
   52be0:	282b883a 	mov	r21,r5
   52be4:	003cc706 	br	51f04 <__alt_data_end+0xfffed514>

00052be8 <__vfiprintf_internal>:
   52be8:	2007883a 	mov	r3,r4
   52bec:	010001b4 	movhi	r4,6
   52bf0:	212bc704 	addi	r4,r4,-20708
   52bf4:	21000017 	ldw	r4,0(r4)
   52bf8:	2805883a 	mov	r2,r5
   52bfc:	300f883a 	mov	r7,r6
   52c00:	180b883a 	mov	r5,r3
   52c04:	100d883a 	mov	r6,r2
   52c08:	00517c41 	jmpi	517c4 <___vfiprintf_internal_r>

00052c0c <__swbuf_r>:
   52c0c:	defffc04 	addi	sp,sp,-16
   52c10:	dc800215 	stw	r18,8(sp)
   52c14:	dc400115 	stw	r17,4(sp)
   52c18:	dc000015 	stw	r16,0(sp)
   52c1c:	dfc00315 	stw	ra,12(sp)
   52c20:	2025883a 	mov	r18,r4
   52c24:	2823883a 	mov	r17,r5
   52c28:	3021883a 	mov	r16,r6
   52c2c:	20000226 	beq	r4,zero,52c38 <__swbuf_r+0x2c>
   52c30:	20800e17 	ldw	r2,56(r4)
   52c34:	10004126 	beq	r2,zero,52d3c <__swbuf_r+0x130>
   52c38:	80c00617 	ldw	r3,24(r16)
   52c3c:	8180030b 	ldhu	r6,12(r16)
   52c40:	80c00215 	stw	r3,8(r16)
   52c44:	30c0020c 	andi	r3,r6,8
   52c48:	18003526 	beq	r3,zero,52d20 <__swbuf_r+0x114>
   52c4c:	80c00417 	ldw	r3,16(r16)
   52c50:	18003326 	beq	r3,zero,52d20 <__swbuf_r+0x114>
   52c54:	3088000c 	andi	r2,r6,8192
   52c58:	8c403fcc 	andi	r17,r17,255
   52c5c:	10001726 	beq	r2,zero,52cbc <__swbuf_r+0xb0>
   52c60:	80800017 	ldw	r2,0(r16)
   52c64:	81000517 	ldw	r4,20(r16)
   52c68:	10c7c83a 	sub	r3,r2,r3
   52c6c:	19001d0e 	bge	r3,r4,52ce4 <__swbuf_r+0xd8>
   52c70:	18c00044 	addi	r3,r3,1
   52c74:	81400217 	ldw	r5,8(r16)
   52c78:	11000044 	addi	r4,r2,1
   52c7c:	81000015 	stw	r4,0(r16)
   52c80:	297fffc4 	addi	r5,r5,-1
   52c84:	81400215 	stw	r5,8(r16)
   52c88:	14400005 	stb	r17,0(r2)
   52c8c:	80800517 	ldw	r2,20(r16)
   52c90:	10c01d26 	beq	r2,r3,52d08 <__swbuf_r+0xfc>
   52c94:	8080030b 	ldhu	r2,12(r16)
   52c98:	1080004c 	andi	r2,r2,1
   52c9c:	1000181e 	bne	r2,zero,52d00 <__swbuf_r+0xf4>
   52ca0:	8805883a 	mov	r2,r17
   52ca4:	dfc00317 	ldw	ra,12(sp)
   52ca8:	dc800217 	ldw	r18,8(sp)
   52cac:	dc400117 	ldw	r17,4(sp)
   52cb0:	dc000017 	ldw	r16,0(sp)
   52cb4:	dec00404 	addi	sp,sp,16
   52cb8:	f800283a 	ret
   52cbc:	81001917 	ldw	r4,100(r16)
   52cc0:	00b7ffc4 	movi	r2,-8193
   52cc4:	31880014 	ori	r6,r6,8192
   52cc8:	2084703a 	and	r2,r4,r2
   52ccc:	80801915 	stw	r2,100(r16)
   52cd0:	80800017 	ldw	r2,0(r16)
   52cd4:	81000517 	ldw	r4,20(r16)
   52cd8:	8180030d 	sth	r6,12(r16)
   52cdc:	10c7c83a 	sub	r3,r2,r3
   52ce0:	193fe316 	blt	r3,r4,52c70 <__alt_data_end+0xfffee280>
   52ce4:	9009883a 	mov	r4,r18
   52ce8:	800b883a 	mov	r5,r16
   52cec:	004d5080 	call	4d508 <_fflush_r>
   52cf0:	1000091e 	bne	r2,zero,52d18 <__swbuf_r+0x10c>
   52cf4:	80800017 	ldw	r2,0(r16)
   52cf8:	00c00044 	movi	r3,1
   52cfc:	003fdd06 	br	52c74 <__alt_data_end+0xfffee284>
   52d00:	00800284 	movi	r2,10
   52d04:	88bfe61e 	bne	r17,r2,52ca0 <__alt_data_end+0xfffee2b0>
   52d08:	9009883a 	mov	r4,r18
   52d0c:	800b883a 	mov	r5,r16
   52d10:	004d5080 	call	4d508 <_fflush_r>
   52d14:	103fe226 	beq	r2,zero,52ca0 <__alt_data_end+0xfffee2b0>
   52d18:	00bfffc4 	movi	r2,-1
   52d1c:	003fe106 	br	52ca4 <__alt_data_end+0xfffee2b4>
   52d20:	9009883a 	mov	r4,r18
   52d24:	800b883a 	mov	r5,r16
   52d28:	004ba880 	call	4ba88 <__swsetup_r>
   52d2c:	1000051e 	bne	r2,zero,52d44 <__swbuf_r+0x138>
   52d30:	8180030b 	ldhu	r6,12(r16)
   52d34:	80c00417 	ldw	r3,16(r16)
   52d38:	003fc606 	br	52c54 <__alt_data_end+0xfffee264>
   52d3c:	004dac40 	call	4dac4 <__sinit>
   52d40:	003fbd06 	br	52c38 <__alt_data_end+0xfffee248>
   52d44:	80c0030b 	ldhu	r3,12(r16)
   52d48:	00bfffc4 	movi	r2,-1
   52d4c:	18c01014 	ori	r3,r3,64
   52d50:	80c0030d 	sth	r3,12(r16)
   52d54:	00c00244 	movi	r3,9
   52d58:	90c00015 	stw	r3,0(r18)
   52d5c:	003fd106 	br	52ca4 <__alt_data_end+0xfffee2b4>

00052d60 <__swbuf>:
   52d60:	00c001b4 	movhi	r3,6
   52d64:	18ebc704 	addi	r3,r3,-20708
   52d68:	2005883a 	mov	r2,r4
   52d6c:	19000017 	ldw	r4,0(r3)
   52d70:	280d883a 	mov	r6,r5
   52d74:	100b883a 	mov	r5,r2
   52d78:	0052c0c1 	jmpi	52c0c <__swbuf_r>

00052d7c <_write_r>:
   52d7c:	defffd04 	addi	sp,sp,-12
   52d80:	dc000015 	stw	r16,0(sp)
   52d84:	040001b4 	movhi	r16,6
   52d88:	dc400115 	stw	r17,4(sp)
   52d8c:	84329304 	addi	r16,r16,-13748
   52d90:	2023883a 	mov	r17,r4
   52d94:	2809883a 	mov	r4,r5
   52d98:	300b883a 	mov	r5,r6
   52d9c:	380d883a 	mov	r6,r7
   52da0:	dfc00215 	stw	ra,8(sp)
   52da4:	80000015 	stw	zero,0(r16)
   52da8:	0056a8c0 	call	56a8c <write>
   52dac:	00ffffc4 	movi	r3,-1
   52db0:	10c00526 	beq	r2,r3,52dc8 <_write_r+0x4c>
   52db4:	dfc00217 	ldw	ra,8(sp)
   52db8:	dc400117 	ldw	r17,4(sp)
   52dbc:	dc000017 	ldw	r16,0(sp)
   52dc0:	dec00304 	addi	sp,sp,12
   52dc4:	f800283a 	ret
   52dc8:	80c00017 	ldw	r3,0(r16)
   52dcc:	183ff926 	beq	r3,zero,52db4 <__alt_data_end+0xfffee3c4>
   52dd0:	88c00015 	stw	r3,0(r17)
   52dd4:	003ff706 	br	52db4 <__alt_data_end+0xfffee3c4>

00052dd8 <_close_r>:
   52dd8:	defffd04 	addi	sp,sp,-12
   52ddc:	dc000015 	stw	r16,0(sp)
   52de0:	040001b4 	movhi	r16,6
   52de4:	dc400115 	stw	r17,4(sp)
   52de8:	84329304 	addi	r16,r16,-13748
   52dec:	2023883a 	mov	r17,r4
   52df0:	2809883a 	mov	r4,r5
   52df4:	dfc00215 	stw	ra,8(sp)
   52df8:	80000015 	stw	zero,0(r16)
   52dfc:	005601c0 	call	5601c <close>
   52e00:	00ffffc4 	movi	r3,-1
   52e04:	10c00526 	beq	r2,r3,52e1c <_close_r+0x44>
   52e08:	dfc00217 	ldw	ra,8(sp)
   52e0c:	dc400117 	ldw	r17,4(sp)
   52e10:	dc000017 	ldw	r16,0(sp)
   52e14:	dec00304 	addi	sp,sp,12
   52e18:	f800283a 	ret
   52e1c:	80c00017 	ldw	r3,0(r16)
   52e20:	183ff926 	beq	r3,zero,52e08 <__alt_data_end+0xfffee418>
   52e24:	88c00015 	stw	r3,0(r17)
   52e28:	003ff706 	br	52e08 <__alt_data_end+0xfffee418>

00052e2c <_calloc_r>:
   52e2c:	defffe04 	addi	sp,sp,-8
   52e30:	dc000015 	stw	r16,0(sp)
   52e34:	2021883a 	mov	r16,r4
   52e38:	2809883a 	mov	r4,r5
   52e3c:	300b883a 	mov	r5,r6
   52e40:	dfc00115 	stw	ra,4(sp)
   52e44:	00453200 	call	45320 <__mulsi3>
   52e48:	8009883a 	mov	r4,r16
   52e4c:	100b883a 	mov	r5,r2
   52e50:	00469ac0 	call	469ac <_malloc_r>
   52e54:	1021883a 	mov	r16,r2
   52e58:	10002826 	beq	r2,zero,52efc <_calloc_r+0xd0>
   52e5c:	11bfff17 	ldw	r6,-4(r2)
   52e60:	00bfff04 	movi	r2,-4
   52e64:	00c00904 	movi	r3,36
   52e68:	308c703a 	and	r6,r6,r2
   52e6c:	308d883a 	add	r6,r6,r2
   52e70:	19801436 	bltu	r3,r6,52ec4 <_calloc_r+0x98>
   52e74:	008004c4 	movi	r2,19
   52e78:	11800936 	bltu	r2,r6,52ea0 <_calloc_r+0x74>
   52e7c:	8005883a 	mov	r2,r16
   52e80:	10000015 	stw	zero,0(r2)
   52e84:	10000115 	stw	zero,4(r2)
   52e88:	10000215 	stw	zero,8(r2)
   52e8c:	8005883a 	mov	r2,r16
   52e90:	dfc00117 	ldw	ra,4(sp)
   52e94:	dc000017 	ldw	r16,0(sp)
   52e98:	dec00204 	addi	sp,sp,8
   52e9c:	f800283a 	ret
   52ea0:	80000015 	stw	zero,0(r16)
   52ea4:	80000115 	stw	zero,4(r16)
   52ea8:	008006c4 	movi	r2,27
   52eac:	11800d2e 	bgeu	r2,r6,52ee4 <_calloc_r+0xb8>
   52eb0:	80000215 	stw	zero,8(r16)
   52eb4:	80000315 	stw	zero,12(r16)
   52eb8:	30c00c26 	beq	r6,r3,52eec <_calloc_r+0xc0>
   52ebc:	80800404 	addi	r2,r16,16
   52ec0:	003fef06 	br	52e80 <__alt_data_end+0xfffee490>
   52ec4:	8009883a 	mov	r4,r16
   52ec8:	000b883a 	mov	r5,zero
   52ecc:	004728c0 	call	4728c <memset>
   52ed0:	8005883a 	mov	r2,r16
   52ed4:	dfc00117 	ldw	ra,4(sp)
   52ed8:	dc000017 	ldw	r16,0(sp)
   52edc:	dec00204 	addi	sp,sp,8
   52ee0:	f800283a 	ret
   52ee4:	80800204 	addi	r2,r16,8
   52ee8:	003fe506 	br	52e80 <__alt_data_end+0xfffee490>
   52eec:	80000415 	stw	zero,16(r16)
   52ef0:	80800604 	addi	r2,r16,24
   52ef4:	80000515 	stw	zero,20(r16)
   52ef8:	003fe106 	br	52e80 <__alt_data_end+0xfffee490>
   52efc:	0005883a 	mov	r2,zero
   52f00:	003fe306 	br	52e90 <__alt_data_end+0xfffee4a0>

00052f04 <_fclose_r>:
   52f04:	28003226 	beq	r5,zero,52fd0 <_fclose_r+0xcc>
   52f08:	defffc04 	addi	sp,sp,-16
   52f0c:	dc400115 	stw	r17,4(sp)
   52f10:	2023883a 	mov	r17,r4
   52f14:	dc000015 	stw	r16,0(sp)
   52f18:	dfc00315 	stw	ra,12(sp)
   52f1c:	dc800215 	stw	r18,8(sp)
   52f20:	2821883a 	mov	r16,r5
   52f24:	004dad40 	call	4dad4 <__sfp_lock_acquire>
   52f28:	88000226 	beq	r17,zero,52f34 <_fclose_r+0x30>
   52f2c:	88800e17 	ldw	r2,56(r17)
   52f30:	10002926 	beq	r2,zero,52fd8 <_fclose_r+0xd4>
   52f34:	8080030f 	ldh	r2,12(r16)
   52f38:	10002226 	beq	r2,zero,52fc4 <_fclose_r+0xc0>
   52f3c:	8809883a 	mov	r4,r17
   52f40:	800b883a 	mov	r5,r16
   52f44:	004d5080 	call	4d508 <_fflush_r>
   52f48:	1025883a 	mov	r18,r2
   52f4c:	80800b17 	ldw	r2,44(r16)
   52f50:	10000426 	beq	r2,zero,52f64 <_fclose_r+0x60>
   52f54:	81400717 	ldw	r5,28(r16)
   52f58:	8809883a 	mov	r4,r17
   52f5c:	103ee83a 	callr	r2
   52f60:	10002616 	blt	r2,zero,52ffc <_fclose_r+0xf8>
   52f64:	8080030b 	ldhu	r2,12(r16)
   52f68:	1080200c 	andi	r2,r2,128
   52f6c:	10001f1e 	bne	r2,zero,52fec <_fclose_r+0xe8>
   52f70:	81400c17 	ldw	r5,48(r16)
   52f74:	28000526 	beq	r5,zero,52f8c <_fclose_r+0x88>
   52f78:	80801004 	addi	r2,r16,64
   52f7c:	28800226 	beq	r5,r2,52f88 <_fclose_r+0x84>
   52f80:	8809883a 	mov	r4,r17
   52f84:	004dc380 	call	4dc38 <_free_r>
   52f88:	80000c15 	stw	zero,48(r16)
   52f8c:	81401117 	ldw	r5,68(r16)
   52f90:	28000326 	beq	r5,zero,52fa0 <_fclose_r+0x9c>
   52f94:	8809883a 	mov	r4,r17
   52f98:	004dc380 	call	4dc38 <_free_r>
   52f9c:	80001115 	stw	zero,68(r16)
   52fa0:	8000030d 	sth	zero,12(r16)
   52fa4:	004dad80 	call	4dad8 <__sfp_lock_release>
   52fa8:	9005883a 	mov	r2,r18
   52fac:	dfc00317 	ldw	ra,12(sp)
   52fb0:	dc800217 	ldw	r18,8(sp)
   52fb4:	dc400117 	ldw	r17,4(sp)
   52fb8:	dc000017 	ldw	r16,0(sp)
   52fbc:	dec00404 	addi	sp,sp,16
   52fc0:	f800283a 	ret
   52fc4:	004dad80 	call	4dad8 <__sfp_lock_release>
   52fc8:	0005883a 	mov	r2,zero
   52fcc:	003ff706 	br	52fac <__alt_data_end+0xfffee5bc>
   52fd0:	0005883a 	mov	r2,zero
   52fd4:	f800283a 	ret
   52fd8:	8809883a 	mov	r4,r17
   52fdc:	004dac40 	call	4dac4 <__sinit>
   52fe0:	8080030f 	ldh	r2,12(r16)
   52fe4:	103fd51e 	bne	r2,zero,52f3c <__alt_data_end+0xfffee54c>
   52fe8:	003ff606 	br	52fc4 <__alt_data_end+0xfffee5d4>
   52fec:	81400417 	ldw	r5,16(r16)
   52ff0:	8809883a 	mov	r4,r17
   52ff4:	004dc380 	call	4dc38 <_free_r>
   52ff8:	003fdd06 	br	52f70 <__alt_data_end+0xfffee580>
   52ffc:	04bfffc4 	movi	r18,-1
   53000:	003fd806 	br	52f64 <__alt_data_end+0xfffee574>

00053004 <fclose>:
   53004:	008001b4 	movhi	r2,6
   53008:	10abc704 	addi	r2,r2,-20708
   5300c:	200b883a 	mov	r5,r4
   53010:	11000017 	ldw	r4,0(r2)
   53014:	0052f041 	jmpi	52f04 <_fclose_r>

00053018 <_fputwc_r>:
   53018:	3080030b 	ldhu	r2,12(r6)
   5301c:	defff804 	addi	sp,sp,-32
   53020:	dcc00415 	stw	r19,16(sp)
   53024:	dc800315 	stw	r18,12(sp)
   53028:	dc000115 	stw	r16,4(sp)
   5302c:	dfc00715 	stw	ra,28(sp)
   53030:	dd400615 	stw	r21,24(sp)
   53034:	dd000515 	stw	r20,20(sp)
   53038:	dc400215 	stw	r17,8(sp)
   5303c:	10c8000c 	andi	r3,r2,8192
   53040:	3021883a 	mov	r16,r6
   53044:	2027883a 	mov	r19,r4
   53048:	2825883a 	mov	r18,r5
   5304c:	1800051e 	bne	r3,zero,53064 <_fputwc_r+0x4c>
   53050:	30c01917 	ldw	r3,100(r6)
   53054:	10880014 	ori	r2,r2,8192
   53058:	3080030d 	sth	r2,12(r6)
   5305c:	18880014 	ori	r2,r3,8192
   53060:	30801915 	stw	r2,100(r6)
   53064:	004e5c40 	call	4e5c4 <__locale_mb_cur_max>
   53068:	00c00044 	movi	r3,1
   5306c:	10c03e26 	beq	r2,r3,53168 <_fputwc_r+0x150>
   53070:	9809883a 	mov	r4,r19
   53074:	d80b883a 	mov	r5,sp
   53078:	900d883a 	mov	r6,r18
   5307c:	81c01704 	addi	r7,r16,92
   53080:	00533580 	call	53358 <_wcrtomb_r>
   53084:	1029883a 	mov	r20,r2
   53088:	00bfffc4 	movi	r2,-1
   5308c:	a0802026 	beq	r20,r2,53110 <_fputwc_r+0xf8>
   53090:	d9400003 	ldbu	r5,0(sp)
   53094:	a0001c26 	beq	r20,zero,53108 <_fputwc_r+0xf0>
   53098:	0023883a 	mov	r17,zero
   5309c:	05400284 	movi	r21,10
   530a0:	00000906 	br	530c8 <_fputwc_r+0xb0>
   530a4:	80800017 	ldw	r2,0(r16)
   530a8:	11400005 	stb	r5,0(r2)
   530ac:	80c00017 	ldw	r3,0(r16)
   530b0:	18c00044 	addi	r3,r3,1
   530b4:	80c00015 	stw	r3,0(r16)
   530b8:	8c400044 	addi	r17,r17,1
   530bc:	dc45883a 	add	r2,sp,r17
   530c0:	8d00112e 	bgeu	r17,r20,53108 <_fputwc_r+0xf0>
   530c4:	11400003 	ldbu	r5,0(r2)
   530c8:	80c00217 	ldw	r3,8(r16)
   530cc:	18ffffc4 	addi	r3,r3,-1
   530d0:	80c00215 	stw	r3,8(r16)
   530d4:	183ff30e 	bge	r3,zero,530a4 <__alt_data_end+0xfffee6b4>
   530d8:	80800617 	ldw	r2,24(r16)
   530dc:	18801916 	blt	r3,r2,53144 <_fputwc_r+0x12c>
   530e0:	80800017 	ldw	r2,0(r16)
   530e4:	11400005 	stb	r5,0(r2)
   530e8:	80800017 	ldw	r2,0(r16)
   530ec:	10c00003 	ldbu	r3,0(r2)
   530f0:	10800044 	addi	r2,r2,1
   530f4:	1d402326 	beq	r3,r21,53184 <_fputwc_r+0x16c>
   530f8:	80800015 	stw	r2,0(r16)
   530fc:	8c400044 	addi	r17,r17,1
   53100:	dc45883a 	add	r2,sp,r17
   53104:	8d3fef36 	bltu	r17,r20,530c4 <__alt_data_end+0xfffee6d4>
   53108:	9005883a 	mov	r2,r18
   5310c:	00000406 	br	53120 <_fputwc_r+0x108>
   53110:	80c0030b 	ldhu	r3,12(r16)
   53114:	a005883a 	mov	r2,r20
   53118:	18c01014 	ori	r3,r3,64
   5311c:	80c0030d 	sth	r3,12(r16)
   53120:	dfc00717 	ldw	ra,28(sp)
   53124:	dd400617 	ldw	r21,24(sp)
   53128:	dd000517 	ldw	r20,20(sp)
   5312c:	dcc00417 	ldw	r19,16(sp)
   53130:	dc800317 	ldw	r18,12(sp)
   53134:	dc400217 	ldw	r17,8(sp)
   53138:	dc000117 	ldw	r16,4(sp)
   5313c:	dec00804 	addi	sp,sp,32
   53140:	f800283a 	ret
   53144:	9809883a 	mov	r4,r19
   53148:	29403fcc 	andi	r5,r5,255
   5314c:	800d883a 	mov	r6,r16
   53150:	0052c0c0 	call	52c0c <__swbuf_r>
   53154:	10bfffe0 	cmpeqi	r2,r2,-1
   53158:	10803fcc 	andi	r2,r2,255
   5315c:	103fd626 	beq	r2,zero,530b8 <__alt_data_end+0xfffee6c8>
   53160:	00bfffc4 	movi	r2,-1
   53164:	003fee06 	br	53120 <__alt_data_end+0xfffee730>
   53168:	90ffffc4 	addi	r3,r18,-1
   5316c:	01003f84 	movi	r4,254
   53170:	20ffbf36 	bltu	r4,r3,53070 <__alt_data_end+0xfffee680>
   53174:	900b883a 	mov	r5,r18
   53178:	dc800005 	stb	r18,0(sp)
   5317c:	1029883a 	mov	r20,r2
   53180:	003fc506 	br	53098 <__alt_data_end+0xfffee6a8>
   53184:	9809883a 	mov	r4,r19
   53188:	a80b883a 	mov	r5,r21
   5318c:	800d883a 	mov	r6,r16
   53190:	0052c0c0 	call	52c0c <__swbuf_r>
   53194:	10bfffe0 	cmpeqi	r2,r2,-1
   53198:	003fef06 	br	53158 <__alt_data_end+0xfffee768>

0005319c <fputwc>:
   5319c:	defffc04 	addi	sp,sp,-16
   531a0:	dc000115 	stw	r16,4(sp)
   531a4:	040001b4 	movhi	r16,6
   531a8:	842bc704 	addi	r16,r16,-20708
   531ac:	dc400215 	stw	r17,8(sp)
   531b0:	2023883a 	mov	r17,r4
   531b4:	81000017 	ldw	r4,0(r16)
   531b8:	dfc00315 	stw	ra,12(sp)
   531bc:	280d883a 	mov	r6,r5
   531c0:	20000626 	beq	r4,zero,531dc <fputwc+0x40>
   531c4:	20800e17 	ldw	r2,56(r4)
   531c8:	1000041e 	bne	r2,zero,531dc <fputwc+0x40>
   531cc:	d9400015 	stw	r5,0(sp)
   531d0:	004dac40 	call	4dac4 <__sinit>
   531d4:	81000017 	ldw	r4,0(r16)
   531d8:	d9800017 	ldw	r6,0(sp)
   531dc:	880b883a 	mov	r5,r17
   531e0:	dfc00317 	ldw	ra,12(sp)
   531e4:	dc400217 	ldw	r17,8(sp)
   531e8:	dc000117 	ldw	r16,4(sp)
   531ec:	dec00404 	addi	sp,sp,16
   531f0:	00530181 	jmpi	53018 <_fputwc_r>

000531f4 <_fstat_r>:
   531f4:	defffd04 	addi	sp,sp,-12
   531f8:	dc000015 	stw	r16,0(sp)
   531fc:	040001b4 	movhi	r16,6
   53200:	dc400115 	stw	r17,4(sp)
   53204:	84329304 	addi	r16,r16,-13748
   53208:	2023883a 	mov	r17,r4
   5320c:	2809883a 	mov	r4,r5
   53210:	300b883a 	mov	r5,r6
   53214:	dfc00215 	stw	ra,8(sp)
   53218:	80000015 	stw	zero,0(r16)
   5321c:	00561700 	call	56170 <fstat>
   53220:	00ffffc4 	movi	r3,-1
   53224:	10c00526 	beq	r2,r3,5323c <_fstat_r+0x48>
   53228:	dfc00217 	ldw	ra,8(sp)
   5322c:	dc400117 	ldw	r17,4(sp)
   53230:	dc000017 	ldw	r16,0(sp)
   53234:	dec00304 	addi	sp,sp,12
   53238:	f800283a 	ret
   5323c:	80c00017 	ldw	r3,0(r16)
   53240:	183ff926 	beq	r3,zero,53228 <__alt_data_end+0xfffee838>
   53244:	88c00015 	stw	r3,0(r17)
   53248:	003ff706 	br	53228 <__alt_data_end+0xfffee838>

0005324c <_isatty_r>:
   5324c:	defffd04 	addi	sp,sp,-12
   53250:	dc000015 	stw	r16,0(sp)
   53254:	040001b4 	movhi	r16,6
   53258:	dc400115 	stw	r17,4(sp)
   5325c:	84329304 	addi	r16,r16,-13748
   53260:	2023883a 	mov	r17,r4
   53264:	2809883a 	mov	r4,r5
   53268:	dfc00215 	stw	ra,8(sp)
   5326c:	80000015 	stw	zero,0(r16)
   53270:	00562780 	call	56278 <isatty>
   53274:	00ffffc4 	movi	r3,-1
   53278:	10c00526 	beq	r2,r3,53290 <_isatty_r+0x44>
   5327c:	dfc00217 	ldw	ra,8(sp)
   53280:	dc400117 	ldw	r17,4(sp)
   53284:	dc000017 	ldw	r16,0(sp)
   53288:	dec00304 	addi	sp,sp,12
   5328c:	f800283a 	ret
   53290:	80c00017 	ldw	r3,0(r16)
   53294:	183ff926 	beq	r3,zero,5327c <__alt_data_end+0xfffee88c>
   53298:	88c00015 	stw	r3,0(r17)
   5329c:	003ff706 	br	5327c <__alt_data_end+0xfffee88c>

000532a0 <_lseek_r>:
   532a0:	defffd04 	addi	sp,sp,-12
   532a4:	dc000015 	stw	r16,0(sp)
   532a8:	040001b4 	movhi	r16,6
   532ac:	dc400115 	stw	r17,4(sp)
   532b0:	84329304 	addi	r16,r16,-13748
   532b4:	2023883a 	mov	r17,r4
   532b8:	2809883a 	mov	r4,r5
   532bc:	300b883a 	mov	r5,r6
   532c0:	380d883a 	mov	r6,r7
   532c4:	dfc00215 	stw	ra,8(sp)
   532c8:	80000015 	stw	zero,0(r16)
   532cc:	00564580 	call	56458 <lseek>
   532d0:	00ffffc4 	movi	r3,-1
   532d4:	10c00526 	beq	r2,r3,532ec <_lseek_r+0x4c>
   532d8:	dfc00217 	ldw	ra,8(sp)
   532dc:	dc400117 	ldw	r17,4(sp)
   532e0:	dc000017 	ldw	r16,0(sp)
   532e4:	dec00304 	addi	sp,sp,12
   532e8:	f800283a 	ret
   532ec:	80c00017 	ldw	r3,0(r16)
   532f0:	183ff926 	beq	r3,zero,532d8 <__alt_data_end+0xfffee8e8>
   532f4:	88c00015 	stw	r3,0(r17)
   532f8:	003ff706 	br	532d8 <__alt_data_end+0xfffee8e8>

000532fc <_read_r>:
   532fc:	defffd04 	addi	sp,sp,-12
   53300:	dc000015 	stw	r16,0(sp)
   53304:	040001b4 	movhi	r16,6
   53308:	dc400115 	stw	r17,4(sp)
   5330c:	84329304 	addi	r16,r16,-13748
   53310:	2023883a 	mov	r17,r4
   53314:	2809883a 	mov	r4,r5
   53318:	300b883a 	mov	r5,r6
   5331c:	380d883a 	mov	r6,r7
   53320:	dfc00215 	stw	ra,8(sp)
   53324:	80000015 	stw	zero,0(r16)
   53328:	005663c0 	call	5663c <read>
   5332c:	00ffffc4 	movi	r3,-1
   53330:	10c00526 	beq	r2,r3,53348 <_read_r+0x4c>
   53334:	dfc00217 	ldw	ra,8(sp)
   53338:	dc400117 	ldw	r17,4(sp)
   5333c:	dc000017 	ldw	r16,0(sp)
   53340:	dec00304 	addi	sp,sp,12
   53344:	f800283a 	ret
   53348:	80c00017 	ldw	r3,0(r16)
   5334c:	183ff926 	beq	r3,zero,53334 <__alt_data_end+0xfffee944>
   53350:	88c00015 	stw	r3,0(r17)
   53354:	003ff706 	br	53334 <__alt_data_end+0xfffee944>

00053358 <_wcrtomb_r>:
   53358:	defff604 	addi	sp,sp,-40
   5335c:	008001b4 	movhi	r2,6
   53360:	dc800815 	stw	r18,32(sp)
   53364:	dc400715 	stw	r17,28(sp)
   53368:	dc000615 	stw	r16,24(sp)
   5336c:	10abc904 	addi	r2,r2,-20700
   53370:	dfc00915 	stw	ra,36(sp)
   53374:	2021883a 	mov	r16,r4
   53378:	3823883a 	mov	r17,r7
   5337c:	14800017 	ldw	r18,0(r2)
   53380:	28001426 	beq	r5,zero,533d4 <_wcrtomb_r+0x7c>
   53384:	d9400415 	stw	r5,16(sp)
   53388:	d9800515 	stw	r6,20(sp)
   5338c:	004e5b80 	call	4e5b8 <__locale_charset>
   53390:	d9400417 	ldw	r5,16(sp)
   53394:	d9800517 	ldw	r6,20(sp)
   53398:	8009883a 	mov	r4,r16
   5339c:	dc400015 	stw	r17,0(sp)
   533a0:	100f883a 	mov	r7,r2
   533a4:	903ee83a 	callr	r18
   533a8:	00ffffc4 	movi	r3,-1
   533ac:	10c0031e 	bne	r2,r3,533bc <_wcrtomb_r+0x64>
   533b0:	88000015 	stw	zero,0(r17)
   533b4:	00c02284 	movi	r3,138
   533b8:	80c00015 	stw	r3,0(r16)
   533bc:	dfc00917 	ldw	ra,36(sp)
   533c0:	dc800817 	ldw	r18,32(sp)
   533c4:	dc400717 	ldw	r17,28(sp)
   533c8:	dc000617 	ldw	r16,24(sp)
   533cc:	dec00a04 	addi	sp,sp,40
   533d0:	f800283a 	ret
   533d4:	004e5b80 	call	4e5b8 <__locale_charset>
   533d8:	8009883a 	mov	r4,r16
   533dc:	dc400015 	stw	r17,0(sp)
   533e0:	d9400104 	addi	r5,sp,4
   533e4:	000d883a 	mov	r6,zero
   533e8:	100f883a 	mov	r7,r2
   533ec:	903ee83a 	callr	r18
   533f0:	003fed06 	br	533a8 <__alt_data_end+0xfffee9b8>

000533f4 <wcrtomb>:
   533f4:	defff504 	addi	sp,sp,-44
   533f8:	dc400515 	stw	r17,20(sp)
   533fc:	dc000415 	stw	r16,16(sp)
   53400:	dfc00a15 	stw	ra,40(sp)
   53404:	dd400915 	stw	r21,36(sp)
   53408:	dd000815 	stw	r20,32(sp)
   5340c:	dcc00715 	stw	r19,28(sp)
   53410:	dc800615 	stw	r18,24(sp)
   53414:	2021883a 	mov	r16,r4
   53418:	3023883a 	mov	r17,r6
   5341c:	20001d26 	beq	r4,zero,53494 <wcrtomb+0xa0>
   53420:	048001b4 	movhi	r18,6
   53424:	94abc704 	addi	r18,r18,-20708
   53428:	008001b4 	movhi	r2,6
   5342c:	95400017 	ldw	r21,0(r18)
   53430:	10abc904 	addi	r2,r2,-20700
   53434:	15000017 	ldw	r20,0(r2)
   53438:	2827883a 	mov	r19,r5
   5343c:	004e5b80 	call	4e5b8 <__locale_charset>
   53440:	a809883a 	mov	r4,r21
   53444:	dc400015 	stw	r17,0(sp)
   53448:	800b883a 	mov	r5,r16
   5344c:	980d883a 	mov	r6,r19
   53450:	100f883a 	mov	r7,r2
   53454:	a03ee83a 	callr	r20
   53458:	00ffffc4 	movi	r3,-1
   5345c:	10c0041e 	bne	r2,r3,53470 <wcrtomb+0x7c>
   53460:	90c00017 	ldw	r3,0(r18)
   53464:	01002284 	movi	r4,138
   53468:	88000015 	stw	zero,0(r17)
   5346c:	19000015 	stw	r4,0(r3)
   53470:	dfc00a17 	ldw	ra,40(sp)
   53474:	dd400917 	ldw	r21,36(sp)
   53478:	dd000817 	ldw	r20,32(sp)
   5347c:	dcc00717 	ldw	r19,28(sp)
   53480:	dc800617 	ldw	r18,24(sp)
   53484:	dc400517 	ldw	r17,20(sp)
   53488:	dc000417 	ldw	r16,16(sp)
   5348c:	dec00b04 	addi	sp,sp,44
   53490:	f800283a 	ret
   53494:	048001b4 	movhi	r18,6
   53498:	94abc704 	addi	r18,r18,-20708
   5349c:	008001b4 	movhi	r2,6
   534a0:	94c00017 	ldw	r19,0(r18)
   534a4:	10abc904 	addi	r2,r2,-20700
   534a8:	14000017 	ldw	r16,0(r2)
   534ac:	004e5b80 	call	4e5b8 <__locale_charset>
   534b0:	9809883a 	mov	r4,r19
   534b4:	dc400015 	stw	r17,0(sp)
   534b8:	d9400104 	addi	r5,sp,4
   534bc:	000d883a 	mov	r6,zero
   534c0:	100f883a 	mov	r7,r2
   534c4:	803ee83a 	callr	r16
   534c8:	003fe306 	br	53458 <__alt_data_end+0xfffeea68>

000534cc <__ascii_wctomb>:
   534cc:	28000526 	beq	r5,zero,534e4 <__ascii_wctomb+0x18>
   534d0:	00803fc4 	movi	r2,255
   534d4:	11800536 	bltu	r2,r6,534ec <__ascii_wctomb+0x20>
   534d8:	29800005 	stb	r6,0(r5)
   534dc:	00800044 	movi	r2,1
   534e0:	f800283a 	ret
   534e4:	0005883a 	mov	r2,zero
   534e8:	f800283a 	ret
   534ec:	00802284 	movi	r2,138
   534f0:	20800015 	stw	r2,0(r4)
   534f4:	00bfffc4 	movi	r2,-1
   534f8:	f800283a 	ret

000534fc <_wctomb_r>:
   534fc:	008001b4 	movhi	r2,6
   53500:	defff904 	addi	sp,sp,-28
   53504:	10abc904 	addi	r2,r2,-20700
   53508:	dfc00615 	stw	ra,24(sp)
   5350c:	dc400515 	stw	r17,20(sp)
   53510:	dc000415 	stw	r16,16(sp)
   53514:	3823883a 	mov	r17,r7
   53518:	14000017 	ldw	r16,0(r2)
   5351c:	d9000115 	stw	r4,4(sp)
   53520:	d9400215 	stw	r5,8(sp)
   53524:	d9800315 	stw	r6,12(sp)
   53528:	004e5b80 	call	4e5b8 <__locale_charset>
   5352c:	d9000117 	ldw	r4,4(sp)
   53530:	d9400217 	ldw	r5,8(sp)
   53534:	d9800317 	ldw	r6,12(sp)
   53538:	dc400015 	stw	r17,0(sp)
   5353c:	100f883a 	mov	r7,r2
   53540:	803ee83a 	callr	r16
   53544:	dfc00617 	ldw	ra,24(sp)
   53548:	dc400517 	ldw	r17,20(sp)
   5354c:	dc000417 	ldw	r16,16(sp)
   53550:	dec00704 	addi	sp,sp,28
   53554:	f800283a 	ret

00053558 <__udivdi3>:
   53558:	defff504 	addi	sp,sp,-44
   5355c:	dcc00415 	stw	r19,16(sp)
   53560:	dc000115 	stw	r16,4(sp)
   53564:	dfc00a15 	stw	ra,40(sp)
   53568:	df000915 	stw	fp,36(sp)
   5356c:	ddc00815 	stw	r23,32(sp)
   53570:	dd800715 	stw	r22,28(sp)
   53574:	dd400615 	stw	r21,24(sp)
   53578:	dd000515 	stw	r20,20(sp)
   5357c:	dc800315 	stw	r18,12(sp)
   53580:	dc400215 	stw	r17,8(sp)
   53584:	2027883a 	mov	r19,r4
   53588:	2821883a 	mov	r16,r5
   5358c:	3800471e 	bne	r7,zero,536ac <__udivdi3+0x154>
   53590:	3025883a 	mov	r18,r6
   53594:	2023883a 	mov	r17,r4
   53598:	2980592e 	bgeu	r5,r6,53700 <__udivdi3+0x1a8>
   5359c:	00bfffd4 	movui	r2,65535
   535a0:	2829883a 	mov	r20,r5
   535a4:	1180b236 	bltu	r2,r6,53870 <__udivdi3+0x318>
   535a8:	00803fc4 	movi	r2,255
   535ac:	1181622e 	bgeu	r2,r6,53b38 <__udivdi3+0x5e0>
   535b0:	00800204 	movi	r2,8
   535b4:	1007883a 	mov	r3,r2
   535b8:	3084d83a 	srl	r2,r6,r2
   535bc:	010001b4 	movhi	r4,6
   535c0:	2123aa04 	addi	r4,r4,-29016
   535c4:	2085883a 	add	r2,r4,r2
   535c8:	11000003 	ldbu	r4,0(r2)
   535cc:	20c9883a 	add	r4,r4,r3
   535d0:	00c00804 	movi	r3,32
   535d4:	1907c83a 	sub	r3,r3,r4
   535d8:	18000526 	beq	r3,zero,535f0 <__udivdi3+0x98>
   535dc:	80e0983a 	sll	r16,r16,r3
   535e0:	9908d83a 	srl	r4,r19,r4
   535e4:	30e4983a 	sll	r18,r6,r3
   535e8:	98e2983a 	sll	r17,r19,r3
   535ec:	8128b03a 	or	r20,r16,r4
   535f0:	902ad43a 	srli	r21,r18,16
   535f4:	a009883a 	mov	r4,r20
   535f8:	95bfffcc 	andi	r22,r18,65535
   535fc:	a80b883a 	mov	r5,r21
   53600:	00453180 	call	45318 <__umodsi3>
   53604:	a009883a 	mov	r4,r20
   53608:	a80b883a 	mov	r5,r21
   5360c:	102f883a 	mov	r23,r2
   53610:	00453100 	call	45310 <__udivsi3>
   53614:	1009883a 	mov	r4,r2
   53618:	b00b883a 	mov	r5,r22
   5361c:	1021883a 	mov	r16,r2
   53620:	00453200 	call	45320 <__mulsi3>
   53624:	b82e943a 	slli	r23,r23,16
   53628:	8808d43a 	srli	r4,r17,16
   5362c:	b906b03a 	or	r3,r23,r4
   53630:	1880052e 	bgeu	r3,r2,53648 <__udivdi3+0xf0>
   53634:	1c87883a 	add	r3,r3,r18
   53638:	813fffc4 	addi	r4,r16,-1
   5363c:	1c800136 	bltu	r3,r18,53644 <__udivdi3+0xec>
   53640:	18815236 	bltu	r3,r2,53b8c <__udivdi3+0x634>
   53644:	2021883a 	mov	r16,r4
   53648:	18a7c83a 	sub	r19,r3,r2
   5364c:	9809883a 	mov	r4,r19
   53650:	a80b883a 	mov	r5,r21
   53654:	00453180 	call	45318 <__umodsi3>
   53658:	1029883a 	mov	r20,r2
   5365c:	9809883a 	mov	r4,r19
   53660:	a80b883a 	mov	r5,r21
   53664:	a028943a 	slli	r20,r20,16
   53668:	00453100 	call	45310 <__udivsi3>
   5366c:	1009883a 	mov	r4,r2
   53670:	b00b883a 	mov	r5,r22
   53674:	8c7fffcc 	andi	r17,r17,65535
   53678:	1027883a 	mov	r19,r2
   5367c:	a462b03a 	or	r17,r20,r17
   53680:	00453200 	call	45320 <__mulsi3>
   53684:	8880052e 	bgeu	r17,r2,5369c <__udivdi3+0x144>
   53688:	8ca3883a 	add	r17,r17,r18
   5368c:	98ffffc4 	addi	r3,r19,-1
   53690:	8c811036 	bltu	r17,r18,53ad4 <__udivdi3+0x57c>
   53694:	88810f2e 	bgeu	r17,r2,53ad4 <__udivdi3+0x57c>
   53698:	9cffff84 	addi	r19,r19,-2
   5369c:	8020943a 	slli	r16,r16,16
   536a0:	0007883a 	mov	r3,zero
   536a4:	9c04b03a 	or	r2,r19,r16
   536a8:	00006006 	br	5382c <__udivdi3+0x2d4>
   536ac:	29c05d36 	bltu	r5,r7,53824 <__udivdi3+0x2cc>
   536b0:	00bfffd4 	movui	r2,65535
   536b4:	11c0692e 	bgeu	r2,r7,5385c <__udivdi3+0x304>
   536b8:	00804034 	movhi	r2,256
   536bc:	10bfffc4 	addi	r2,r2,-1
   536c0:	11c10e2e 	bgeu	r2,r7,53afc <__udivdi3+0x5a4>
   536c4:	01400604 	movi	r5,24
   536c8:	2811883a 	mov	r8,r5
   536cc:	394ad83a 	srl	r5,r7,r5
   536d0:	008001b4 	movhi	r2,6
   536d4:	10a3aa04 	addi	r2,r2,-29016
   536d8:	114b883a 	add	r5,r2,r5
   536dc:	29400003 	ldbu	r5,0(r5)
   536e0:	00c00804 	movi	r3,32
   536e4:	2a0b883a 	add	r5,r5,r8
   536e8:	196fc83a 	sub	r23,r3,r5
   536ec:	b8006b1e 	bne	r23,zero,5389c <__udivdi3+0x344>
   536f0:	3c011436 	bltu	r7,r16,53b44 <__udivdi3+0x5ec>
   536f4:	9985403a 	cmpgeu	r2,r19,r6
   536f8:	0007883a 	mov	r3,zero
   536fc:	00004b06 	br	5382c <__udivdi3+0x2d4>
   53700:	3000041e 	bne	r6,zero,53714 <__udivdi3+0x1bc>
   53704:	01000044 	movi	r4,1
   53708:	000b883a 	mov	r5,zero
   5370c:	00453100 	call	45310 <__udivsi3>
   53710:	1025883a 	mov	r18,r2
   53714:	00bfffd4 	movui	r2,65535
   53718:	14805b2e 	bgeu	r2,r18,53888 <__udivdi3+0x330>
   5371c:	00804034 	movhi	r2,256
   53720:	10bfffc4 	addi	r2,r2,-1
   53724:	1480fe2e 	bgeu	r2,r18,53b20 <__udivdi3+0x5c8>
   53728:	00800604 	movi	r2,24
   5372c:	1007883a 	mov	r3,r2
   53730:	9084d83a 	srl	r2,r18,r2
   53734:	010001b4 	movhi	r4,6
   53738:	2123aa04 	addi	r4,r4,-29016
   5373c:	2085883a 	add	r2,r4,r2
   53740:	11800003 	ldbu	r6,0(r2)
   53744:	01c00804 	movi	r7,32
   53748:	30c7883a 	add	r3,r6,r3
   5374c:	38cfc83a 	sub	r7,r7,r3
   53750:	3800a71e 	bne	r7,zero,539f0 <__udivdi3+0x498>
   53754:	9028d43a 	srli	r20,r18,16
   53758:	84a1c83a 	sub	r16,r16,r18
   5375c:	957fffcc 	andi	r21,r18,65535
   53760:	00c00044 	movi	r3,1
   53764:	8009883a 	mov	r4,r16
   53768:	a00b883a 	mov	r5,r20
   5376c:	d8c00015 	stw	r3,0(sp)
   53770:	00453180 	call	45318 <__umodsi3>
   53774:	8009883a 	mov	r4,r16
   53778:	a00b883a 	mov	r5,r20
   5377c:	102d883a 	mov	r22,r2
   53780:	00453100 	call	45310 <__udivsi3>
   53784:	1009883a 	mov	r4,r2
   53788:	a80b883a 	mov	r5,r21
   5378c:	1021883a 	mov	r16,r2
   53790:	00453200 	call	45320 <__mulsi3>
   53794:	b02c943a 	slli	r22,r22,16
   53798:	880ed43a 	srli	r7,r17,16
   5379c:	d8c00017 	ldw	r3,0(sp)
   537a0:	b1ccb03a 	or	r6,r22,r7
   537a4:	3080052e 	bgeu	r6,r2,537bc <__udivdi3+0x264>
   537a8:	348d883a 	add	r6,r6,r18
   537ac:	813fffc4 	addi	r4,r16,-1
   537b0:	34800136 	bltu	r6,r18,537b8 <__udivdi3+0x260>
   537b4:	3080f236 	bltu	r6,r2,53b80 <__udivdi3+0x628>
   537b8:	2021883a 	mov	r16,r4
   537bc:	30a7c83a 	sub	r19,r6,r2
   537c0:	9809883a 	mov	r4,r19
   537c4:	a00b883a 	mov	r5,r20
   537c8:	d8c00015 	stw	r3,0(sp)
   537cc:	00453180 	call	45318 <__umodsi3>
   537d0:	102d883a 	mov	r22,r2
   537d4:	9809883a 	mov	r4,r19
   537d8:	a00b883a 	mov	r5,r20
   537dc:	b02c943a 	slli	r22,r22,16
   537e0:	00453100 	call	45310 <__udivsi3>
   537e4:	1009883a 	mov	r4,r2
   537e8:	a80b883a 	mov	r5,r21
   537ec:	8c7fffcc 	andi	r17,r17,65535
   537f0:	1027883a 	mov	r19,r2
   537f4:	b462b03a 	or	r17,r22,r17
   537f8:	00453200 	call	45320 <__mulsi3>
   537fc:	d8c00017 	ldw	r3,0(sp)
   53800:	8880052e 	bgeu	r17,r2,53818 <__udivdi3+0x2c0>
   53804:	8ca3883a 	add	r17,r17,r18
   53808:	993fffc4 	addi	r4,r19,-1
   5380c:	8c80af36 	bltu	r17,r18,53acc <__udivdi3+0x574>
   53810:	8880ae2e 	bgeu	r17,r2,53acc <__udivdi3+0x574>
   53814:	9cffff84 	addi	r19,r19,-2
   53818:	8020943a 	slli	r16,r16,16
   5381c:	9c04b03a 	or	r2,r19,r16
   53820:	00000206 	br	5382c <__udivdi3+0x2d4>
   53824:	0007883a 	mov	r3,zero
   53828:	0005883a 	mov	r2,zero
   5382c:	dfc00a17 	ldw	ra,40(sp)
   53830:	df000917 	ldw	fp,36(sp)
   53834:	ddc00817 	ldw	r23,32(sp)
   53838:	dd800717 	ldw	r22,28(sp)
   5383c:	dd400617 	ldw	r21,24(sp)
   53840:	dd000517 	ldw	r20,20(sp)
   53844:	dcc00417 	ldw	r19,16(sp)
   53848:	dc800317 	ldw	r18,12(sp)
   5384c:	dc400217 	ldw	r17,8(sp)
   53850:	dc000117 	ldw	r16,4(sp)
   53854:	dec00b04 	addi	sp,sp,44
   53858:	f800283a 	ret
   5385c:	00803fc4 	movi	r2,255
   53860:	11c0a92e 	bgeu	r2,r7,53b08 <__udivdi3+0x5b0>
   53864:	01400204 	movi	r5,8
   53868:	2811883a 	mov	r8,r5
   5386c:	003f9706 	br	536cc <__alt_data_end+0xfffeecdc>
   53870:	00804034 	movhi	r2,256
   53874:	10bfffc4 	addi	r2,r2,-1
   53878:	1180a62e 	bgeu	r2,r6,53b14 <__udivdi3+0x5bc>
   5387c:	00800604 	movi	r2,24
   53880:	1007883a 	mov	r3,r2
   53884:	003f4c06 	br	535b8 <__alt_data_end+0xfffeebc8>
   53888:	00803fc4 	movi	r2,255
   5388c:	1480a72e 	bgeu	r2,r18,53b2c <__udivdi3+0x5d4>
   53890:	00800204 	movi	r2,8
   53894:	1007883a 	mov	r3,r2
   53898:	003fa506 	br	53730 <__alt_data_end+0xfffeed40>
   5389c:	3178d83a 	srl	fp,r6,r5
   538a0:	3dce983a 	sll	r7,r7,r23
   538a4:	8168d83a 	srl	r20,r16,r5
   538a8:	9950d83a 	srl	r8,r19,r5
   538ac:	3f38b03a 	or	fp,r7,fp
   538b0:	e024d43a 	srli	r18,fp,16
   538b4:	85e0983a 	sll	r16,r16,r23
   538b8:	a009883a 	mov	r4,r20
   538bc:	900b883a 	mov	r5,r18
   538c0:	8220b03a 	or	r16,r16,r8
   538c4:	35ea983a 	sll	r21,r6,r23
   538c8:	00453180 	call	45318 <__umodsi3>
   538cc:	a009883a 	mov	r4,r20
   538d0:	900b883a 	mov	r5,r18
   538d4:	1023883a 	mov	r17,r2
   538d8:	e5bfffcc 	andi	r22,fp,65535
   538dc:	00453100 	call	45310 <__udivsi3>
   538e0:	1009883a 	mov	r4,r2
   538e4:	b00b883a 	mov	r5,r22
   538e8:	1029883a 	mov	r20,r2
   538ec:	00453200 	call	45320 <__mulsi3>
   538f0:	8806943a 	slli	r3,r17,16
   538f4:	8014d43a 	srli	r10,r16,16
   538f8:	1a92b03a 	or	r9,r3,r10
   538fc:	4880042e 	bgeu	r9,r2,53910 <__udivdi3+0x3b8>
   53900:	4f13883a 	add	r9,r9,fp
   53904:	a0ffffc4 	addi	r3,r20,-1
   53908:	4f00952e 	bgeu	r9,fp,53b60 <__udivdi3+0x608>
   5390c:	1829883a 	mov	r20,r3
   53910:	48a3c83a 	sub	r17,r9,r2
   53914:	8809883a 	mov	r4,r17
   53918:	900b883a 	mov	r5,r18
   5391c:	00453180 	call	45318 <__umodsi3>
   53920:	8809883a 	mov	r4,r17
   53924:	900b883a 	mov	r5,r18
   53928:	d8800015 	stw	r2,0(sp)
   5392c:	00453100 	call	45310 <__udivsi3>
   53930:	1009883a 	mov	r4,r2
   53934:	b00b883a 	mov	r5,r22
   53938:	1023883a 	mov	r17,r2
   5393c:	00453200 	call	45320 <__mulsi3>
   53940:	d8c00017 	ldw	r3,0(sp)
   53944:	823fffcc 	andi	r8,r16,65535
   53948:	1806943a 	slli	r3,r3,16
   5394c:	1a20b03a 	or	r16,r3,r8
   53950:	8080042e 	bgeu	r16,r2,53964 <__udivdi3+0x40c>
   53954:	8721883a 	add	r16,r16,fp
   53958:	88ffffc4 	addi	r3,r17,-1
   5395c:	87007c2e 	bgeu	r16,fp,53b50 <__udivdi3+0x5f8>
   53960:	1823883a 	mov	r17,r3
   53964:	a028943a 	slli	r20,r20,16
   53968:	acbfffcc 	andi	r18,r21,65535
   5396c:	900b883a 	mov	r5,r18
   53970:	8d28b03a 	or	r20,r17,r20
   53974:	a022d43a 	srli	r17,r20,16
   53978:	a5bfffcc 	andi	r22,r20,65535
   5397c:	b009883a 	mov	r4,r22
   53980:	a82ad43a 	srli	r21,r21,16
   53984:	80a1c83a 	sub	r16,r16,r2
   53988:	00453200 	call	45320 <__mulsi3>
   5398c:	8809883a 	mov	r4,r17
   53990:	900b883a 	mov	r5,r18
   53994:	1039883a 	mov	fp,r2
   53998:	00453200 	call	45320 <__mulsi3>
   5399c:	8809883a 	mov	r4,r17
   539a0:	a80b883a 	mov	r5,r21
   539a4:	1025883a 	mov	r18,r2
   539a8:	00453200 	call	45320 <__mulsi3>
   539ac:	b009883a 	mov	r4,r22
   539b0:	a80b883a 	mov	r5,r21
   539b4:	1023883a 	mov	r17,r2
   539b8:	00453200 	call	45320 <__mulsi3>
   539bc:	e006d43a 	srli	r3,fp,16
   539c0:	9085883a 	add	r2,r18,r2
   539c4:	10c7883a 	add	r3,r2,r3
   539c8:	1c80022e 	bgeu	r3,r18,539d4 <__udivdi3+0x47c>
   539cc:	00800074 	movhi	r2,1
   539d0:	88a3883a 	add	r17,r17,r2
   539d4:	1808d43a 	srli	r4,r3,16
   539d8:	8909883a 	add	r4,r17,r4
   539dc:	81004436 	bltu	r16,r4,53af0 <__udivdi3+0x598>
   539e0:	81003e26 	beq	r16,r4,53adc <__udivdi3+0x584>
   539e4:	a005883a 	mov	r2,r20
   539e8:	0007883a 	mov	r3,zero
   539ec:	003f8f06 	br	5382c <__alt_data_end+0xfffeee3c>
   539f0:	91e4983a 	sll	r18,r18,r7
   539f4:	80eed83a 	srl	r23,r16,r3
   539f8:	81cc983a 	sll	r6,r16,r7
   539fc:	9028d43a 	srli	r20,r18,16
   53a00:	98c6d83a 	srl	r3,r19,r3
   53a04:	b809883a 	mov	r4,r23
   53a08:	a00b883a 	mov	r5,r20
   53a0c:	30ecb03a 	or	r22,r6,r3
   53a10:	99e2983a 	sll	r17,r19,r7
   53a14:	00453180 	call	45318 <__umodsi3>
   53a18:	b809883a 	mov	r4,r23
   53a1c:	a00b883a 	mov	r5,r20
   53a20:	1021883a 	mov	r16,r2
   53a24:	957fffcc 	andi	r21,r18,65535
   53a28:	00453100 	call	45310 <__udivsi3>
   53a2c:	a80b883a 	mov	r5,r21
   53a30:	1009883a 	mov	r4,r2
   53a34:	102f883a 	mov	r23,r2
   53a38:	00453200 	call	45320 <__mulsi3>
   53a3c:	8020943a 	slli	r16,r16,16
   53a40:	b00ad43a 	srli	r5,r22,16
   53a44:	814cb03a 	or	r6,r16,r5
   53a48:	3080062e 	bgeu	r6,r2,53a64 <__udivdi3+0x50c>
   53a4c:	348d883a 	add	r6,r6,r18
   53a50:	b8ffffc4 	addi	r3,r23,-1
   53a54:	34804836 	bltu	r6,r18,53b78 <__udivdi3+0x620>
   53a58:	3080472e 	bgeu	r6,r2,53b78 <__udivdi3+0x620>
   53a5c:	bdffff84 	addi	r23,r23,-2
   53a60:	348d883a 	add	r6,r6,r18
   53a64:	30a7c83a 	sub	r19,r6,r2
   53a68:	9809883a 	mov	r4,r19
   53a6c:	a00b883a 	mov	r5,r20
   53a70:	00453180 	call	45318 <__umodsi3>
   53a74:	9809883a 	mov	r4,r19
   53a78:	a00b883a 	mov	r5,r20
   53a7c:	1039883a 	mov	fp,r2
   53a80:	00453100 	call	45310 <__udivsi3>
   53a84:	1009883a 	mov	r4,r2
   53a88:	a80b883a 	mov	r5,r21
   53a8c:	e038943a 	slli	fp,fp,16
   53a90:	1027883a 	mov	r19,r2
   53a94:	00453200 	call	45320 <__mulsi3>
   53a98:	b1bfffcc 	andi	r6,r22,65535
   53a9c:	e18cb03a 	or	r6,fp,r6
   53aa0:	3080062e 	bgeu	r6,r2,53abc <__udivdi3+0x564>
   53aa4:	348d883a 	add	r6,r6,r18
   53aa8:	98ffffc4 	addi	r3,r19,-1
   53aac:	34803036 	bltu	r6,r18,53b70 <__udivdi3+0x618>
   53ab0:	30802f2e 	bgeu	r6,r2,53b70 <__udivdi3+0x618>
   53ab4:	9cffff84 	addi	r19,r19,-2
   53ab8:	348d883a 	add	r6,r6,r18
   53abc:	b82e943a 	slli	r23,r23,16
   53ac0:	30a1c83a 	sub	r16,r6,r2
   53ac4:	9dc6b03a 	or	r3,r19,r23
   53ac8:	003f2606 	br	53764 <__alt_data_end+0xfffeed74>
   53acc:	2027883a 	mov	r19,r4
   53ad0:	003f5106 	br	53818 <__alt_data_end+0xfffeee28>
   53ad4:	1827883a 	mov	r19,r3
   53ad8:	003ef006 	br	5369c <__alt_data_end+0xfffeecac>
   53adc:	1808943a 	slli	r4,r3,16
   53ae0:	9dc6983a 	sll	r3,r19,r23
   53ae4:	e73fffcc 	andi	fp,fp,65535
   53ae8:	2709883a 	add	r4,r4,fp
   53aec:	193fbd2e 	bgeu	r3,r4,539e4 <__alt_data_end+0xfffeeff4>
   53af0:	a0bfffc4 	addi	r2,r20,-1
   53af4:	0007883a 	mov	r3,zero
   53af8:	003f4c06 	br	5382c <__alt_data_end+0xfffeee3c>
   53afc:	01400404 	movi	r5,16
   53b00:	2811883a 	mov	r8,r5
   53b04:	003ef106 	br	536cc <__alt_data_end+0xfffeecdc>
   53b08:	000b883a 	mov	r5,zero
   53b0c:	0011883a 	mov	r8,zero
   53b10:	003eee06 	br	536cc <__alt_data_end+0xfffeecdc>
   53b14:	00800404 	movi	r2,16
   53b18:	1007883a 	mov	r3,r2
   53b1c:	003ea606 	br	535b8 <__alt_data_end+0xfffeebc8>
   53b20:	00800404 	movi	r2,16
   53b24:	1007883a 	mov	r3,r2
   53b28:	003f0106 	br	53730 <__alt_data_end+0xfffeed40>
   53b2c:	0005883a 	mov	r2,zero
   53b30:	0007883a 	mov	r3,zero
   53b34:	003efe06 	br	53730 <__alt_data_end+0xfffeed40>
   53b38:	0005883a 	mov	r2,zero
   53b3c:	0007883a 	mov	r3,zero
   53b40:	003e9d06 	br	535b8 <__alt_data_end+0xfffeebc8>
   53b44:	0007883a 	mov	r3,zero
   53b48:	00800044 	movi	r2,1
   53b4c:	003f3706 	br	5382c <__alt_data_end+0xfffeee3c>
   53b50:	80bf832e 	bgeu	r16,r2,53960 <__alt_data_end+0xfffeef70>
   53b54:	8c7fff84 	addi	r17,r17,-2
   53b58:	8721883a 	add	r16,r16,fp
   53b5c:	003f8106 	br	53964 <__alt_data_end+0xfffeef74>
   53b60:	48bf6a2e 	bgeu	r9,r2,5390c <__alt_data_end+0xfffeef1c>
   53b64:	a53fff84 	addi	r20,r20,-2
   53b68:	4f13883a 	add	r9,r9,fp
   53b6c:	003f6806 	br	53910 <__alt_data_end+0xfffeef20>
   53b70:	1827883a 	mov	r19,r3
   53b74:	003fd106 	br	53abc <__alt_data_end+0xfffef0cc>
   53b78:	182f883a 	mov	r23,r3
   53b7c:	003fb906 	br	53a64 <__alt_data_end+0xfffef074>
   53b80:	843fff84 	addi	r16,r16,-2
   53b84:	348d883a 	add	r6,r6,r18
   53b88:	003f0c06 	br	537bc <__alt_data_end+0xfffeedcc>
   53b8c:	843fff84 	addi	r16,r16,-2
   53b90:	1c87883a 	add	r3,r3,r18
   53b94:	003eac06 	br	53648 <__alt_data_end+0xfffeec58>

00053b98 <__umoddi3>:
   53b98:	defff404 	addi	sp,sp,-48
   53b9c:	dd800815 	stw	r22,32(sp)
   53ba0:	dc400315 	stw	r17,12(sp)
   53ba4:	dc000215 	stw	r16,8(sp)
   53ba8:	dfc00b15 	stw	ra,44(sp)
   53bac:	df000a15 	stw	fp,40(sp)
   53bb0:	ddc00915 	stw	r23,36(sp)
   53bb4:	dd400715 	stw	r21,28(sp)
   53bb8:	dd000615 	stw	r20,24(sp)
   53bbc:	dcc00515 	stw	r19,20(sp)
   53bc0:	dc800415 	stw	r18,16(sp)
   53bc4:	2021883a 	mov	r16,r4
   53bc8:	2823883a 	mov	r17,r5
   53bcc:	282d883a 	mov	r22,r5
   53bd0:	38003c1e 	bne	r7,zero,53cc4 <__umoddi3+0x12c>
   53bd4:	3027883a 	mov	r19,r6
   53bd8:	2029883a 	mov	r20,r4
   53bdc:	2980522e 	bgeu	r5,r6,53d28 <__umoddi3+0x190>
   53be0:	00bfffd4 	movui	r2,65535
   53be4:	1180a436 	bltu	r2,r6,53e78 <__umoddi3+0x2e0>
   53be8:	00803fc4 	movi	r2,255
   53bec:	11815e2e 	bgeu	r2,r6,54168 <__umoddi3+0x5d0>
   53bf0:	01400204 	movi	r5,8
   53bf4:	2805883a 	mov	r2,r5
   53bf8:	314ad83a 	srl	r5,r6,r5
   53bfc:	00c001b4 	movhi	r3,6
   53c00:	18e3aa04 	addi	r3,r3,-29016
   53c04:	194b883a 	add	r5,r3,r5
   53c08:	29000003 	ldbu	r4,0(r5)
   53c0c:	2089883a 	add	r4,r4,r2
   53c10:	00800804 	movi	r2,32
   53c14:	1105c83a 	sub	r2,r2,r4
   53c18:	10010c26 	beq	r2,zero,5404c <__umoddi3+0x4b4>
   53c1c:	88a2983a 	sll	r17,r17,r2
   53c20:	8108d83a 	srl	r4,r16,r4
   53c24:	30a6983a 	sll	r19,r6,r2
   53c28:	80a8983a 	sll	r20,r16,r2
   53c2c:	1025883a 	mov	r18,r2
   53c30:	892cb03a 	or	r22,r17,r4
   53c34:	9822d43a 	srli	r17,r19,16
   53c38:	b009883a 	mov	r4,r22
   53c3c:	9d7fffcc 	andi	r21,r19,65535
   53c40:	880b883a 	mov	r5,r17
   53c44:	00453180 	call	45318 <__umodsi3>
   53c48:	b009883a 	mov	r4,r22
   53c4c:	880b883a 	mov	r5,r17
   53c50:	102f883a 	mov	r23,r2
   53c54:	00453100 	call	45310 <__udivsi3>
   53c58:	1009883a 	mov	r4,r2
   53c5c:	a80b883a 	mov	r5,r21
   53c60:	00453200 	call	45320 <__mulsi3>
   53c64:	b82e943a 	slli	r23,r23,16
   53c68:	a008d43a 	srli	r4,r20,16
   53c6c:	b906b03a 	or	r3,r23,r4
   53c70:	1880042e 	bgeu	r3,r2,53c84 <__umoddi3+0xec>
   53c74:	1cc7883a 	add	r3,r3,r19
   53c78:	1cc00236 	bltu	r3,r19,53c84 <__umoddi3+0xec>
   53c7c:	1880012e 	bgeu	r3,r2,53c84 <__umoddi3+0xec>
   53c80:	1cc7883a 	add	r3,r3,r19
   53c84:	18a1c83a 	sub	r16,r3,r2
   53c88:	8009883a 	mov	r4,r16
   53c8c:	880b883a 	mov	r5,r17
   53c90:	00453180 	call	45318 <__umodsi3>
   53c94:	8009883a 	mov	r4,r16
   53c98:	880b883a 	mov	r5,r17
   53c9c:	102d883a 	mov	r22,r2
   53ca0:	00453100 	call	45310 <__udivsi3>
   53ca4:	1009883a 	mov	r4,r2
   53ca8:	a80b883a 	mov	r5,r21
   53cac:	b02c943a 	slli	r22,r22,16
   53cb0:	00453200 	call	45320 <__mulsi3>
   53cb4:	a13fffcc 	andi	r4,r20,65535
   53cb8:	b106b03a 	or	r3,r22,r4
   53cbc:	1880572e 	bgeu	r3,r2,53e1c <__umoddi3+0x284>
   53cc0:	00005206 	br	53e0c <__umoddi3+0x274>
   53cc4:	29c05936 	bltu	r5,r7,53e2c <__umoddi3+0x294>
   53cc8:	00bfffd4 	movui	r2,65535
   53ccc:	11c0652e 	bgeu	r2,r7,53e64 <__umoddi3+0x2cc>
   53cd0:	00804034 	movhi	r2,256
   53cd4:	10bfffc4 	addi	r2,r2,-1
   53cd8:	11c1172e 	bgeu	r2,r7,54138 <__umoddi3+0x5a0>
   53cdc:	01400604 	movi	r5,24
   53ce0:	282b883a 	mov	r21,r5
   53ce4:	394ad83a 	srl	r5,r7,r5
   53ce8:	00c001b4 	movhi	r3,6
   53cec:	18e3aa04 	addi	r3,r3,-29016
   53cf0:	194b883a 	add	r5,r3,r5
   53cf4:	28800003 	ldbu	r2,0(r5)
   53cf8:	00c00804 	movi	r3,32
   53cfc:	156b883a 	add	r21,r2,r21
   53d00:	1d69c83a 	sub	r20,r3,r21
   53d04:	a000671e 	bne	r20,zero,53ea4 <__umoddi3+0x30c>
   53d08:	3c400136 	bltu	r7,r17,53d10 <__umoddi3+0x178>
   53d0c:	81812336 	bltu	r16,r6,5419c <__umoddi3+0x604>
   53d10:	8185c83a 	sub	r2,r16,r6
   53d14:	89e3c83a 	sub	r17,r17,r7
   53d18:	8087803a 	cmpltu	r3,r16,r2
   53d1c:	88edc83a 	sub	r22,r17,r3
   53d20:	b007883a 	mov	r3,r22
   53d24:	00004306 	br	53e34 <__umoddi3+0x29c>
   53d28:	3000041e 	bne	r6,zero,53d3c <__umoddi3+0x1a4>
   53d2c:	01000044 	movi	r4,1
   53d30:	000b883a 	mov	r5,zero
   53d34:	00453100 	call	45310 <__udivsi3>
   53d38:	1027883a 	mov	r19,r2
   53d3c:	00bfffd4 	movui	r2,65535
   53d40:	14c0532e 	bgeu	r2,r19,53e90 <__umoddi3+0x2f8>
   53d44:	00804034 	movhi	r2,256
   53d48:	10bfffc4 	addi	r2,r2,-1
   53d4c:	14c1032e 	bgeu	r2,r19,5415c <__umoddi3+0x5c4>
   53d50:	00800604 	movi	r2,24
   53d54:	1007883a 	mov	r3,r2
   53d58:	9884d83a 	srl	r2,r19,r2
   53d5c:	010001b4 	movhi	r4,6
   53d60:	2123aa04 	addi	r4,r4,-29016
   53d64:	2085883a 	add	r2,r4,r2
   53d68:	11000003 	ldbu	r4,0(r2)
   53d6c:	00800804 	movi	r2,32
   53d70:	20c7883a 	add	r3,r4,r3
   53d74:	10c5c83a 	sub	r2,r2,r3
   53d78:	1000b61e 	bne	r2,zero,54054 <__umoddi3+0x4bc>
   53d7c:	982ad43a 	srli	r21,r19,16
   53d80:	8ce3c83a 	sub	r17,r17,r19
   53d84:	9dbfffcc 	andi	r22,r19,65535
   53d88:	0025883a 	mov	r18,zero
   53d8c:	8809883a 	mov	r4,r17
   53d90:	a80b883a 	mov	r5,r21
   53d94:	00453180 	call	45318 <__umodsi3>
   53d98:	8809883a 	mov	r4,r17
   53d9c:	a80b883a 	mov	r5,r21
   53da0:	102f883a 	mov	r23,r2
   53da4:	00453100 	call	45310 <__udivsi3>
   53da8:	1009883a 	mov	r4,r2
   53dac:	b00b883a 	mov	r5,r22
   53db0:	00453200 	call	45320 <__mulsi3>
   53db4:	b82e943a 	slli	r23,r23,16
   53db8:	a008d43a 	srli	r4,r20,16
   53dbc:	b906b03a 	or	r3,r23,r4
   53dc0:	1880032e 	bgeu	r3,r2,53dd0 <__umoddi3+0x238>
   53dc4:	1cc7883a 	add	r3,r3,r19
   53dc8:	1cc00136 	bltu	r3,r19,53dd0 <__umoddi3+0x238>
   53dcc:	1880f136 	bltu	r3,r2,54194 <__umoddi3+0x5fc>
   53dd0:	18a1c83a 	sub	r16,r3,r2
   53dd4:	8009883a 	mov	r4,r16
   53dd8:	a80b883a 	mov	r5,r21
   53ddc:	00453180 	call	45318 <__umodsi3>
   53de0:	8009883a 	mov	r4,r16
   53de4:	a80b883a 	mov	r5,r21
   53de8:	1023883a 	mov	r17,r2
   53dec:	00453100 	call	45310 <__udivsi3>
   53df0:	1009883a 	mov	r4,r2
   53df4:	b00b883a 	mov	r5,r22
   53df8:	8822943a 	slli	r17,r17,16
   53dfc:	00453200 	call	45320 <__mulsi3>
   53e00:	a13fffcc 	andi	r4,r20,65535
   53e04:	8906b03a 	or	r3,r17,r4
   53e08:	1880042e 	bgeu	r3,r2,53e1c <__umoddi3+0x284>
   53e0c:	1cc7883a 	add	r3,r3,r19
   53e10:	1cc00236 	bltu	r3,r19,53e1c <__umoddi3+0x284>
   53e14:	1880012e 	bgeu	r3,r2,53e1c <__umoddi3+0x284>
   53e18:	1cc7883a 	add	r3,r3,r19
   53e1c:	1887c83a 	sub	r3,r3,r2
   53e20:	1c84d83a 	srl	r2,r3,r18
   53e24:	0007883a 	mov	r3,zero
   53e28:	00000206 	br	53e34 <__umoddi3+0x29c>
   53e2c:	2005883a 	mov	r2,r4
   53e30:	2807883a 	mov	r3,r5
   53e34:	dfc00b17 	ldw	ra,44(sp)
   53e38:	df000a17 	ldw	fp,40(sp)
   53e3c:	ddc00917 	ldw	r23,36(sp)
   53e40:	dd800817 	ldw	r22,32(sp)
   53e44:	dd400717 	ldw	r21,28(sp)
   53e48:	dd000617 	ldw	r20,24(sp)
   53e4c:	dcc00517 	ldw	r19,20(sp)
   53e50:	dc800417 	ldw	r18,16(sp)
   53e54:	dc400317 	ldw	r17,12(sp)
   53e58:	dc000217 	ldw	r16,8(sp)
   53e5c:	dec00c04 	addi	sp,sp,48
   53e60:	f800283a 	ret
   53e64:	00803fc4 	movi	r2,255
   53e68:	11c0b02e 	bgeu	r2,r7,5412c <__umoddi3+0x594>
   53e6c:	01400204 	movi	r5,8
   53e70:	282b883a 	mov	r21,r5
   53e74:	003f9b06 	br	53ce4 <__alt_data_end+0xfffef2f4>
   53e78:	00804034 	movhi	r2,256
   53e7c:	10bfffc4 	addi	r2,r2,-1
   53e80:	1180b02e 	bgeu	r2,r6,54144 <__umoddi3+0x5ac>
   53e84:	01400604 	movi	r5,24
   53e88:	2805883a 	mov	r2,r5
   53e8c:	003f5a06 	br	53bf8 <__alt_data_end+0xfffef208>
   53e90:	00803fc4 	movi	r2,255
   53e94:	14c0ae2e 	bgeu	r2,r19,54150 <__umoddi3+0x5b8>
   53e98:	00800204 	movi	r2,8
   53e9c:	1007883a 	mov	r3,r2
   53ea0:	003fad06 	br	53d58 <__alt_data_end+0xfffef368>
   53ea4:	3d0a983a 	sll	r5,r7,r20
   53ea8:	356cd83a 	srl	r22,r6,r21
   53eac:	8d78d83a 	srl	fp,r17,r21
   53eb0:	8d10983a 	sll	r8,r17,r20
   53eb4:	2dacb03a 	or	r22,r5,r22
   53eb8:	b02ed43a 	srli	r23,r22,16
   53ebc:	8564d83a 	srl	r18,r16,r21
   53ec0:	e009883a 	mov	r4,fp
   53ec4:	b80b883a 	mov	r5,r23
   53ec8:	44a4b03a 	or	r18,r8,r18
   53ecc:	3526983a 	sll	r19,r6,r20
   53ed0:	00453180 	call	45318 <__umodsi3>
   53ed4:	e009883a 	mov	r4,fp
   53ed8:	b80b883a 	mov	r5,r23
   53edc:	b47fffcc 	andi	r17,r22,65535
   53ee0:	d8800015 	stw	r2,0(sp)
   53ee4:	00453100 	call	45310 <__udivsi3>
   53ee8:	1009883a 	mov	r4,r2
   53eec:	880b883a 	mov	r5,r17
   53ef0:	1039883a 	mov	fp,r2
   53ef4:	00453200 	call	45320 <__mulsi3>
   53ef8:	d9800017 	ldw	r6,0(sp)
   53efc:	9008d43a 	srli	r4,r18,16
   53f00:	8520983a 	sll	r16,r16,r20
   53f04:	300c943a 	slli	r6,r6,16
   53f08:	3106b03a 	or	r3,r6,r4
   53f0c:	1880042e 	bgeu	r3,r2,53f20 <__umoddi3+0x388>
   53f10:	1d87883a 	add	r3,r3,r22
   53f14:	e13fffc4 	addi	r4,fp,-1
   53f18:	1d809a2e 	bgeu	r3,r22,54184 <__umoddi3+0x5ec>
   53f1c:	2039883a 	mov	fp,r4
   53f20:	1887c83a 	sub	r3,r3,r2
   53f24:	1809883a 	mov	r4,r3
   53f28:	b80b883a 	mov	r5,r23
   53f2c:	d8c00115 	stw	r3,4(sp)
   53f30:	00453180 	call	45318 <__umodsi3>
   53f34:	d8c00117 	ldw	r3,4(sp)
   53f38:	b80b883a 	mov	r5,r23
   53f3c:	d8800015 	stw	r2,0(sp)
   53f40:	1809883a 	mov	r4,r3
   53f44:	00453100 	call	45310 <__udivsi3>
   53f48:	880b883a 	mov	r5,r17
   53f4c:	1009883a 	mov	r4,r2
   53f50:	102f883a 	mov	r23,r2
   53f54:	00453200 	call	45320 <__mulsi3>
   53f58:	d9800017 	ldw	r6,0(sp)
   53f5c:	947fffcc 	andi	r17,r18,65535
   53f60:	300c943a 	slli	r6,r6,16
   53f64:	3464b03a 	or	r18,r6,r17
   53f68:	9080042e 	bgeu	r18,r2,53f7c <__umoddi3+0x3e4>
   53f6c:	95a5883a 	add	r18,r18,r22
   53f70:	b8ffffc4 	addi	r3,r23,-1
   53f74:	95807f2e 	bgeu	r18,r22,54174 <__umoddi3+0x5dc>
   53f78:	182f883a 	mov	r23,r3
   53f7c:	e038943a 	slli	fp,fp,16
   53f80:	980cd43a 	srli	r6,r19,16
   53f84:	98ffffcc 	andi	r3,r19,65535
   53f88:	bf38b03a 	or	fp,r23,fp
   53f8c:	e02ed43a 	srli	r23,fp,16
   53f90:	e73fffcc 	andi	fp,fp,65535
   53f94:	180b883a 	mov	r5,r3
   53f98:	e009883a 	mov	r4,fp
   53f9c:	d9800015 	stw	r6,0(sp)
   53fa0:	d8c00115 	stw	r3,4(sp)
   53fa4:	90a5c83a 	sub	r18,r18,r2
   53fa8:	00453200 	call	45320 <__mulsi3>
   53fac:	d8c00117 	ldw	r3,4(sp)
   53fb0:	b809883a 	mov	r4,r23
   53fb4:	1023883a 	mov	r17,r2
   53fb8:	180b883a 	mov	r5,r3
   53fbc:	00453200 	call	45320 <__mulsi3>
   53fc0:	d9800017 	ldw	r6,0(sp)
   53fc4:	b809883a 	mov	r4,r23
   53fc8:	d8800115 	stw	r2,4(sp)
   53fcc:	300b883a 	mov	r5,r6
   53fd0:	302f883a 	mov	r23,r6
   53fd4:	00453200 	call	45320 <__mulsi3>
   53fd8:	e009883a 	mov	r4,fp
   53fdc:	b80b883a 	mov	r5,r23
   53fe0:	d8800015 	stw	r2,0(sp)
   53fe4:	00453200 	call	45320 <__mulsi3>
   53fe8:	d8c00117 	ldw	r3,4(sp)
   53fec:	880cd43a 	srli	r6,r17,16
   53ff0:	d9c00017 	ldw	r7,0(sp)
   53ff4:	1885883a 	add	r2,r3,r2
   53ff8:	118d883a 	add	r6,r2,r6
   53ffc:	30c0022e 	bgeu	r6,r3,54008 <__umoddi3+0x470>
   54000:	00800074 	movhi	r2,1
   54004:	388f883a 	add	r7,r7,r2
   54008:	3006d43a 	srli	r3,r6,16
   5400c:	300c943a 	slli	r6,r6,16
   54010:	8c7fffcc 	andi	r17,r17,65535
   54014:	38c7883a 	add	r3,r7,r3
   54018:	3463883a 	add	r17,r6,r17
   5401c:	90c03d36 	bltu	r18,r3,54114 <__umoddi3+0x57c>
   54020:	90c06026 	beq	r18,r3,541a4 <__umoddi3+0x60c>
   54024:	90c9c83a 	sub	r4,r18,r3
   54028:	880f883a 	mov	r7,r17
   5402c:	81cfc83a 	sub	r7,r16,r7
   54030:	81c7803a 	cmpltu	r3,r16,r7
   54034:	20c7c83a 	sub	r3,r4,r3
   54038:	1d44983a 	sll	r2,r3,r21
   5403c:	3d0ed83a 	srl	r7,r7,r20
   54040:	1d06d83a 	srl	r3,r3,r20
   54044:	11c4b03a 	or	r2,r2,r7
   54048:	003f7a06 	br	53e34 <__alt_data_end+0xfffef444>
   5404c:	0025883a 	mov	r18,zero
   54050:	003ef806 	br	53c34 <__alt_data_end+0xfffef244>
   54054:	98a6983a 	sll	r19,r19,r2
   54058:	88e8d83a 	srl	r20,r17,r3
   5405c:	80c6d83a 	srl	r3,r16,r3
   54060:	982ad43a 	srli	r21,r19,16
   54064:	88a2983a 	sll	r17,r17,r2
   54068:	a009883a 	mov	r4,r20
   5406c:	a80b883a 	mov	r5,r21
   54070:	88eeb03a 	or	r23,r17,r3
   54074:	1025883a 	mov	r18,r2
   54078:	00453180 	call	45318 <__umodsi3>
   5407c:	a009883a 	mov	r4,r20
   54080:	a80b883a 	mov	r5,r21
   54084:	1023883a 	mov	r17,r2
   54088:	9dbfffcc 	andi	r22,r19,65535
   5408c:	00453100 	call	45310 <__udivsi3>
   54090:	1009883a 	mov	r4,r2
   54094:	b00b883a 	mov	r5,r22
   54098:	00453200 	call	45320 <__mulsi3>
   5409c:	8822943a 	slli	r17,r17,16
   540a0:	b808d43a 	srli	r4,r23,16
   540a4:	84a8983a 	sll	r20,r16,r18
   540a8:	8906b03a 	or	r3,r17,r4
   540ac:	1880042e 	bgeu	r3,r2,540c0 <__umoddi3+0x528>
   540b0:	1cc7883a 	add	r3,r3,r19
   540b4:	1cc00236 	bltu	r3,r19,540c0 <__umoddi3+0x528>
   540b8:	1880012e 	bgeu	r3,r2,540c0 <__umoddi3+0x528>
   540bc:	1cc7883a 	add	r3,r3,r19
   540c0:	18a1c83a 	sub	r16,r3,r2
   540c4:	8009883a 	mov	r4,r16
   540c8:	a80b883a 	mov	r5,r21
   540cc:	00453180 	call	45318 <__umodsi3>
   540d0:	8009883a 	mov	r4,r16
   540d4:	a80b883a 	mov	r5,r21
   540d8:	1039883a 	mov	fp,r2
   540dc:	00453100 	call	45310 <__udivsi3>
   540e0:	1009883a 	mov	r4,r2
   540e4:	b00b883a 	mov	r5,r22
   540e8:	00453200 	call	45320 <__mulsi3>
   540ec:	e006943a 	slli	r3,fp,16
   540f0:	b93fffcc 	andi	r4,r23,65535
   540f4:	1906b03a 	or	r3,r3,r4
   540f8:	1880042e 	bgeu	r3,r2,5410c <__umoddi3+0x574>
   540fc:	1cc7883a 	add	r3,r3,r19
   54100:	1cc00236 	bltu	r3,r19,5410c <__umoddi3+0x574>
   54104:	1880012e 	bgeu	r3,r2,5410c <__umoddi3+0x574>
   54108:	1cc7883a 	add	r3,r3,r19
   5410c:	18a3c83a 	sub	r17,r3,r2
   54110:	003f1e06 	br	53d8c <__alt_data_end+0xfffef39c>
   54114:	8ccfc83a 	sub	r7,r17,r19
   54118:	1d89c83a 	sub	r4,r3,r22
   5411c:	89e3803a 	cmpltu	r17,r17,r7
   54120:	2463c83a 	sub	r17,r4,r17
   54124:	9449c83a 	sub	r4,r18,r17
   54128:	003fc006 	br	5402c <__alt_data_end+0xfffef63c>
   5412c:	000b883a 	mov	r5,zero
   54130:	002b883a 	mov	r21,zero
   54134:	003eeb06 	br	53ce4 <__alt_data_end+0xfffef2f4>
   54138:	01400404 	movi	r5,16
   5413c:	282b883a 	mov	r21,r5
   54140:	003ee806 	br	53ce4 <__alt_data_end+0xfffef2f4>
   54144:	01400404 	movi	r5,16
   54148:	2805883a 	mov	r2,r5
   5414c:	003eaa06 	br	53bf8 <__alt_data_end+0xfffef208>
   54150:	0005883a 	mov	r2,zero
   54154:	0007883a 	mov	r3,zero
   54158:	003eff06 	br	53d58 <__alt_data_end+0xfffef368>
   5415c:	00800404 	movi	r2,16
   54160:	1007883a 	mov	r3,r2
   54164:	003efc06 	br	53d58 <__alt_data_end+0xfffef368>
   54168:	000b883a 	mov	r5,zero
   5416c:	0005883a 	mov	r2,zero
   54170:	003ea106 	br	53bf8 <__alt_data_end+0xfffef208>
   54174:	90bf802e 	bgeu	r18,r2,53f78 <__alt_data_end+0xfffef588>
   54178:	bdffff84 	addi	r23,r23,-2
   5417c:	95a5883a 	add	r18,r18,r22
   54180:	003f7e06 	br	53f7c <__alt_data_end+0xfffef58c>
   54184:	18bf652e 	bgeu	r3,r2,53f1c <__alt_data_end+0xfffef52c>
   54188:	e73fff84 	addi	fp,fp,-2
   5418c:	1d87883a 	add	r3,r3,r22
   54190:	003f6306 	br	53f20 <__alt_data_end+0xfffef530>
   54194:	1cc7883a 	add	r3,r3,r19
   54198:	003f0d06 	br	53dd0 <__alt_data_end+0xfffef3e0>
   5419c:	8005883a 	mov	r2,r16
   541a0:	003edf06 	br	53d20 <__alt_data_end+0xfffef330>
   541a4:	847fdb36 	bltu	r16,r17,54114 <__alt_data_end+0xfffef724>
   541a8:	880f883a 	mov	r7,r17
   541ac:	0009883a 	mov	r4,zero
   541b0:	003f9e06 	br	5402c <__alt_data_end+0xfffef63c>

000541b4 <__adddf3>:
   541b4:	02000434 	movhi	r8,16
   541b8:	423fffc4 	addi	r8,r8,-1
   541bc:	defffb04 	addi	sp,sp,-20
   541c0:	2a12703a 	and	r9,r5,r8
   541c4:	2806d7fa 	srli	r3,r5,31
   541c8:	3a10703a 	and	r8,r7,r8
   541cc:	3804d53a 	srli	r2,r7,20
   541d0:	3014d77a 	srli	r10,r6,29
   541d4:	dc000015 	stw	r16,0(sp)
   541d8:	481290fa 	slli	r9,r9,3
   541dc:	2820d53a 	srli	r16,r5,20
   541e0:	401090fa 	slli	r8,r8,3
   541e4:	200ad77a 	srli	r5,r4,29
   541e8:	380ed7fa 	srli	r7,r7,31
   541ec:	dc800215 	stw	r18,8(sp)
   541f0:	dc400115 	stw	r17,4(sp)
   541f4:	dfc00415 	stw	ra,16(sp)
   541f8:	dcc00315 	stw	r19,12(sp)
   541fc:	1c803fcc 	andi	r18,r3,255
   54200:	8401ffcc 	andi	r16,r16,2047
   54204:	494ab03a 	or	r5,r9,r5
   54208:	202290fa 	slli	r17,r4,3
   5420c:	1081ffcc 	andi	r2,r2,2047
   54210:	4290b03a 	or	r8,r8,r10
   54214:	300c90fa 	slli	r6,r6,3
   54218:	91c07026 	beq	r18,r7,543dc <__adddf3+0x228>
   5421c:	8087c83a 	sub	r3,r16,r2
   54220:	00c0b30e 	bge	zero,r3,544f0 <__adddf3+0x33c>
   54224:	10002a1e 	bne	r2,zero,542d0 <__adddf3+0x11c>
   54228:	4184b03a 	or	r2,r8,r6
   5422c:	1000991e 	bne	r2,zero,54494 <__adddf3+0x2e0>
   54230:	888001cc 	andi	r2,r17,7
   54234:	10005b26 	beq	r2,zero,543a4 <__adddf3+0x1f0>
   54238:	88c003cc 	andi	r3,r17,15
   5423c:	00800104 	movi	r2,4
   54240:	18805826 	beq	r3,r2,543a4 <__adddf3+0x1f0>
   54244:	89800104 	addi	r6,r17,4
   54248:	3463803a 	cmpltu	r17,r6,r17
   5424c:	2c4b883a 	add	r5,r5,r17
   54250:	2880202c 	andhi	r2,r5,128
   54254:	9007883a 	mov	r3,r18
   54258:	3023883a 	mov	r17,r6
   5425c:	10005426 	beq	r2,zero,543b0 <__adddf3+0x1fc>
   54260:	84000044 	addi	r16,r16,1
   54264:	0081ffc4 	movi	r2,2047
   54268:	8080c126 	beq	r16,r2,54570 <__adddf3+0x3bc>
   5426c:	013fe034 	movhi	r4,65408
   54270:	213fffc4 	addi	r4,r4,-1
   54274:	290a703a 	and	r5,r5,r4
   54278:	2804977a 	slli	r2,r5,29
   5427c:	280a927a 	slli	r5,r5,9
   54280:	8822d0fa 	srli	r17,r17,3
   54284:	8401ffcc 	andi	r16,r16,2047
   54288:	2808d33a 	srli	r4,r5,12
   5428c:	1444b03a 	or	r2,r2,r17
   54290:	8401ffcc 	andi	r16,r16,2047
   54294:	800a953a 	slli	r5,r16,20
   54298:	18c03fcc 	andi	r3,r3,255
   5429c:	04000434 	movhi	r16,16
   542a0:	180697fa 	slli	r3,r3,31
   542a4:	843fffc4 	addi	r16,r16,-1
   542a8:	2420703a 	and	r16,r4,r16
   542ac:	8160b03a 	or	r16,r16,r5
   542b0:	80c6b03a 	or	r3,r16,r3
   542b4:	dfc00417 	ldw	ra,16(sp)
   542b8:	dcc00317 	ldw	r19,12(sp)
   542bc:	dc800217 	ldw	r18,8(sp)
   542c0:	dc400117 	ldw	r17,4(sp)
   542c4:	dc000017 	ldw	r16,0(sp)
   542c8:	dec00504 	addi	sp,sp,20
   542cc:	f800283a 	ret
   542d0:	0081ffc4 	movi	r2,2047
   542d4:	80bfd626 	beq	r16,r2,54230 <__alt_data_end+0xfffef840>
   542d8:	42002034 	orhi	r8,r8,128
   542dc:	00800e04 	movi	r2,56
   542e0:	10c0a616 	blt	r2,r3,5457c <__adddf3+0x3c8>
   542e4:	008007c4 	movi	r2,31
   542e8:	10c0c916 	blt	r2,r3,54610 <__adddf3+0x45c>
   542ec:	00800804 	movi	r2,32
   542f0:	10c5c83a 	sub	r2,r2,r3
   542f4:	408e983a 	sll	r7,r8,r2
   542f8:	30c8d83a 	srl	r4,r6,r3
   542fc:	3084983a 	sll	r2,r6,r2
   54300:	40c6d83a 	srl	r3,r8,r3
   54304:	390cb03a 	or	r6,r7,r4
   54308:	1004c03a 	cmpne	r2,r2,zero
   5430c:	308cb03a 	or	r6,r6,r2
   54310:	898dc83a 	sub	r6,r17,r6
   54314:	89a3803a 	cmpltu	r17,r17,r6
   54318:	28cbc83a 	sub	r5,r5,r3
   5431c:	2c4bc83a 	sub	r5,r5,r17
   54320:	3023883a 	mov	r17,r6
   54324:	2880202c 	andhi	r2,r5,128
   54328:	10006d26 	beq	r2,zero,544e0 <__adddf3+0x32c>
   5432c:	04c02034 	movhi	r19,128
   54330:	9cffffc4 	addi	r19,r19,-1
   54334:	2ce6703a 	and	r19,r5,r19
   54338:	98007e26 	beq	r19,zero,54534 <__adddf3+0x380>
   5433c:	9809883a 	mov	r4,r19
   54340:	00469200 	call	46920 <__clzsi2>
   54344:	10fffe04 	addi	r3,r2,-8
   54348:	010007c4 	movi	r4,31
   5434c:	20c07f16 	blt	r4,r3,5454c <__adddf3+0x398>
   54350:	01400a04 	movi	r5,40
   54354:	2885c83a 	sub	r2,r5,r2
   54358:	888ad83a 	srl	r5,r17,r2
   5435c:	98e6983a 	sll	r19,r19,r3
   54360:	88e2983a 	sll	r17,r17,r3
   54364:	2ce6b03a 	or	r19,r5,r19
   54368:	1c007c16 	blt	r3,r16,5455c <__adddf3+0x3a8>
   5436c:	1c21c83a 	sub	r16,r3,r16
   54370:	81400044 	addi	r5,r16,1
   54374:	00c007c4 	movi	r3,31
   54378:	19409816 	blt	r3,r5,545dc <__adddf3+0x428>
   5437c:	1c21c83a 	sub	r16,r3,r16
   54380:	8c08983a 	sll	r4,r17,r16
   54384:	8946d83a 	srl	r3,r17,r5
   54388:	9c20983a 	sll	r16,r19,r16
   5438c:	2008c03a 	cmpne	r4,r4,zero
   54390:	994ad83a 	srl	r5,r19,r5
   54394:	1c06b03a 	or	r3,r3,r16
   54398:	1922b03a 	or	r17,r3,r4
   5439c:	0021883a 	mov	r16,zero
   543a0:	003fa306 	br	54230 <__alt_data_end+0xfffef840>
   543a4:	2880202c 	andhi	r2,r5,128
   543a8:	9007883a 	mov	r3,r18
   543ac:	103fac1e 	bne	r2,zero,54260 <__alt_data_end+0xfffef870>
   543b0:	2804977a 	slli	r2,r5,29
   543b4:	8822d0fa 	srli	r17,r17,3
   543b8:	0101ffc4 	movi	r4,2047
   543bc:	280ad0fa 	srli	r5,r5,3
   543c0:	1444b03a 	or	r2,r2,r17
   543c4:	81002c26 	beq	r16,r4,54478 <__adddf3+0x2c4>
   543c8:	8120703a 	and	r16,r16,r4
   543cc:	01000434 	movhi	r4,16
   543d0:	213fffc4 	addi	r4,r4,-1
   543d4:	2908703a 	and	r4,r5,r4
   543d8:	003fad06 	br	54290 <__alt_data_end+0xfffef8a0>
   543dc:	8089c83a 	sub	r4,r16,r2
   543e0:	01006a0e 	bge	zero,r4,5458c <__adddf3+0x3d8>
   543e4:	10003326 	beq	r2,zero,544b4 <__adddf3+0x300>
   543e8:	0081ffc4 	movi	r2,2047
   543ec:	80bf9026 	beq	r16,r2,54230 <__alt_data_end+0xfffef840>
   543f0:	42002034 	orhi	r8,r8,128
   543f4:	00800e04 	movi	r2,56
   543f8:	1100b116 	blt	r2,r4,546c0 <__adddf3+0x50c>
   543fc:	008007c4 	movi	r2,31
   54400:	1100e216 	blt	r2,r4,5478c <__adddf3+0x5d8>
   54404:	00800804 	movi	r2,32
   54408:	1105c83a 	sub	r2,r2,r4
   5440c:	4092983a 	sll	r9,r8,r2
   54410:	310ed83a 	srl	r7,r6,r4
   54414:	3084983a 	sll	r2,r6,r2
   54418:	4110d83a 	srl	r8,r8,r4
   5441c:	49ccb03a 	or	r6,r9,r7
   54420:	1004c03a 	cmpne	r2,r2,zero
   54424:	308cb03a 	or	r6,r6,r2
   54428:	344d883a 	add	r6,r6,r17
   5442c:	3463803a 	cmpltu	r17,r6,r17
   54430:	414b883a 	add	r5,r8,r5
   54434:	2c4b883a 	add	r5,r5,r17
   54438:	3023883a 	mov	r17,r6
   5443c:	2880202c 	andhi	r2,r5,128
   54440:	10002726 	beq	r2,zero,544e0 <__adddf3+0x32c>
   54444:	84000044 	addi	r16,r16,1
   54448:	0081ffc4 	movi	r2,2047
   5444c:	8080ae26 	beq	r16,r2,54708 <__adddf3+0x554>
   54450:	00bfe034 	movhi	r2,65408
   54454:	10bfffc4 	addi	r2,r2,-1
   54458:	288a703a 	and	r5,r5,r2
   5445c:	880cd07a 	srli	r6,r17,1
   54460:	280897fa 	slli	r4,r5,31
   54464:	88c0004c 	andi	r3,r17,1
   54468:	30e2b03a 	or	r17,r6,r3
   5446c:	280ad07a 	srli	r5,r5,1
   54470:	8922b03a 	or	r17,r17,r4
   54474:	003f6e06 	br	54230 <__alt_data_end+0xfffef840>
   54478:	1148b03a 	or	r4,r2,r5
   5447c:	20003c26 	beq	r4,zero,54570 <__adddf3+0x3bc>
   54480:	29000234 	orhi	r4,r5,8
   54484:	01400434 	movhi	r5,16
   54488:	297fffc4 	addi	r5,r5,-1
   5448c:	2148703a 	and	r4,r4,r5
   54490:	003f7f06 	br	54290 <__alt_data_end+0xfffef8a0>
   54494:	18ffffc4 	addi	r3,r3,-1
   54498:	18004d1e 	bne	r3,zero,545d0 <__adddf3+0x41c>
   5449c:	898dc83a 	sub	r6,r17,r6
   544a0:	89a3803a 	cmpltu	r17,r17,r6
   544a4:	2a0bc83a 	sub	r5,r5,r8
   544a8:	2c4bc83a 	sub	r5,r5,r17
   544ac:	3023883a 	mov	r17,r6
   544b0:	003f9c06 	br	54324 <__alt_data_end+0xfffef934>
   544b4:	4184b03a 	or	r2,r8,r6
   544b8:	103f5d26 	beq	r2,zero,54230 <__alt_data_end+0xfffef840>
   544bc:	213fffc4 	addi	r4,r4,-1
   544c0:	203fd926 	beq	r4,zero,54428 <__alt_data_end+0xfffefa38>
   544c4:	0081ffc4 	movi	r2,2047
   544c8:	80bfca1e 	bne	r16,r2,543f4 <__alt_data_end+0xfffefa04>
   544cc:	003f5806 	br	54230 <__alt_data_end+0xfffef840>
   544d0:	10c8b03a 	or	r4,r2,r3
   544d4:	20008b26 	beq	r4,zero,54704 <__adddf3+0x550>
   544d8:	100b883a 	mov	r5,r2
   544dc:	1823883a 	mov	r17,r3
   544e0:	888001cc 	andi	r2,r17,7
   544e4:	103f541e 	bne	r2,zero,54238 <__alt_data_end+0xfffef848>
   544e8:	9007883a 	mov	r3,r18
   544ec:	003fb006 	br	543b0 <__alt_data_end+0xfffef9c0>
   544f0:	1800531e 	bne	r3,zero,54640 <__adddf3+0x48c>
   544f4:	80800044 	addi	r2,r16,1
   544f8:	1081ffcc 	andi	r2,r2,2047
   544fc:	00c00044 	movi	r3,1
   54500:	1880990e 	bge	r3,r2,54768 <__adddf3+0x5b4>
   54504:	8985c83a 	sub	r2,r17,r6
   54508:	8887803a 	cmpltu	r3,r17,r2
   5450c:	2a27c83a 	sub	r19,r5,r8
   54510:	98e7c83a 	sub	r19,r19,r3
   54514:	98c0202c 	andhi	r3,r19,128
   54518:	18006226 	beq	r3,zero,546a4 <__adddf3+0x4f0>
   5451c:	3463c83a 	sub	r17,r6,r17
   54520:	4151c83a 	sub	r8,r8,r5
   54524:	344d803a 	cmpltu	r6,r6,r17
   54528:	41a7c83a 	sub	r19,r8,r6
   5452c:	3825883a 	mov	r18,r7
   54530:	983f821e 	bne	r19,zero,5433c <__alt_data_end+0xfffef94c>
   54534:	8809883a 	mov	r4,r17
   54538:	00469200 	call	46920 <__clzsi2>
   5453c:	10800804 	addi	r2,r2,32
   54540:	10fffe04 	addi	r3,r2,-8
   54544:	010007c4 	movi	r4,31
   54548:	20ff810e 	bge	r4,r3,54350 <__alt_data_end+0xfffef960>
   5454c:	14fff604 	addi	r19,r2,-40
   54550:	8ce6983a 	sll	r19,r17,r19
   54554:	0023883a 	mov	r17,zero
   54558:	1c3f840e 	bge	r3,r16,5436c <__alt_data_end+0xfffef97c>
   5455c:	017fe034 	movhi	r5,65408
   54560:	297fffc4 	addi	r5,r5,-1
   54564:	80e1c83a 	sub	r16,r16,r3
   54568:	994a703a 	and	r5,r19,r5
   5456c:	003f3006 	br	54230 <__alt_data_end+0xfffef840>
   54570:	0009883a 	mov	r4,zero
   54574:	0005883a 	mov	r2,zero
   54578:	003f4506 	br	54290 <__alt_data_end+0xfffef8a0>
   5457c:	418cb03a 	or	r6,r8,r6
   54580:	300cc03a 	cmpne	r6,r6,zero
   54584:	0007883a 	mov	r3,zero
   54588:	003f6106 	br	54310 <__alt_data_end+0xfffef920>
   5458c:	2000921e 	bne	r4,zero,547d8 <__adddf3+0x624>
   54590:	80800044 	addi	r2,r16,1
   54594:	11c1ffcc 	andi	r7,r2,2047
   54598:	01000044 	movi	r4,1
   5459c:	21c0610e 	bge	r4,r7,54724 <__adddf3+0x570>
   545a0:	0101ffc4 	movi	r4,2047
   545a4:	1100a326 	beq	r2,r4,54834 <__adddf3+0x680>
   545a8:	344d883a 	add	r6,r6,r17
   545ac:	3463803a 	cmpltu	r17,r6,r17
   545b0:	414b883a 	add	r5,r8,r5
   545b4:	2c4b883a 	add	r5,r5,r17
   545b8:	282297fa 	slli	r17,r5,31
   545bc:	300cd07a 	srli	r6,r6,1
   545c0:	280ad07a 	srli	r5,r5,1
   545c4:	1021883a 	mov	r16,r2
   545c8:	89a2b03a 	or	r17,r17,r6
   545cc:	003f1806 	br	54230 <__alt_data_end+0xfffef840>
   545d0:	0081ffc4 	movi	r2,2047
   545d4:	80bf411e 	bne	r16,r2,542dc <__alt_data_end+0xfffef8ec>
   545d8:	003f1506 	br	54230 <__alt_data_end+0xfffef840>
   545dc:	80bff844 	addi	r2,r16,-31
   545e0:	00c00804 	movi	r3,32
   545e4:	9884d83a 	srl	r2,r19,r2
   545e8:	28c04a26 	beq	r5,r3,54714 <__adddf3+0x560>
   545ec:	00c00fc4 	movi	r3,63
   545f0:	1c21c83a 	sub	r16,r3,r16
   545f4:	9c26983a 	sll	r19,r19,r16
   545f8:	9c62b03a 	or	r17,r19,r17
   545fc:	8822c03a 	cmpne	r17,r17,zero
   54600:	88a2b03a 	or	r17,r17,r2
   54604:	000b883a 	mov	r5,zero
   54608:	0021883a 	mov	r16,zero
   5460c:	003fb406 	br	544e0 <__alt_data_end+0xfffefaf0>
   54610:	18bff804 	addi	r2,r3,-32
   54614:	01000804 	movi	r4,32
   54618:	4084d83a 	srl	r2,r8,r2
   5461c:	19003f26 	beq	r3,r4,5471c <__adddf3+0x568>
   54620:	01001004 	movi	r4,64
   54624:	20c7c83a 	sub	r3,r4,r3
   54628:	40d0983a 	sll	r8,r8,r3
   5462c:	418cb03a 	or	r6,r8,r6
   54630:	300cc03a 	cmpne	r6,r6,zero
   54634:	308cb03a 	or	r6,r6,r2
   54638:	0007883a 	mov	r3,zero
   5463c:	003f3406 	br	54310 <__alt_data_end+0xfffef920>
   54640:	80002326 	beq	r16,zero,546d0 <__adddf3+0x51c>
   54644:	0101ffc4 	movi	r4,2047
   54648:	11005e26 	beq	r2,r4,547c4 <__adddf3+0x610>
   5464c:	00c7c83a 	sub	r3,zero,r3
   54650:	29402034 	orhi	r5,r5,128
   54654:	01000e04 	movi	r4,56
   54658:	20c07216 	blt	r4,r3,54824 <__adddf3+0x670>
   5465c:	010007c4 	movi	r4,31
   54660:	20c0ce16 	blt	r4,r3,5499c <__adddf3+0x7e8>
   54664:	01000804 	movi	r4,32
   54668:	20c9c83a 	sub	r4,r4,r3
   5466c:	2914983a 	sll	r10,r5,r4
   54670:	88d2d83a 	srl	r9,r17,r3
   54674:	8908983a 	sll	r4,r17,r4
   54678:	28c6d83a 	srl	r3,r5,r3
   5467c:	5262b03a 	or	r17,r10,r9
   54680:	2008c03a 	cmpne	r4,r4,zero
   54684:	8922b03a 	or	r17,r17,r4
   54688:	3463c83a 	sub	r17,r6,r17
   5468c:	40c7c83a 	sub	r3,r8,r3
   54690:	344d803a 	cmpltu	r6,r6,r17
   54694:	198bc83a 	sub	r5,r3,r6
   54698:	1021883a 	mov	r16,r2
   5469c:	3825883a 	mov	r18,r7
   546a0:	003f2006 	br	54324 <__alt_data_end+0xfffef934>
   546a4:	9886b03a 	or	r3,r19,r2
   546a8:	1800141e 	bne	r3,zero,546fc <__adddf3+0x548>
   546ac:	0007883a 	mov	r3,zero
   546b0:	000b883a 	mov	r5,zero
   546b4:	0023883a 	mov	r17,zero
   546b8:	0021883a 	mov	r16,zero
   546bc:	003f3c06 	br	543b0 <__alt_data_end+0xfffef9c0>
   546c0:	418cb03a 	or	r6,r8,r6
   546c4:	300cc03a 	cmpne	r6,r6,zero
   546c8:	0011883a 	mov	r8,zero
   546cc:	003f5606 	br	54428 <__alt_data_end+0xfffefa38>
   546d0:	2c48b03a 	or	r4,r5,r17
   546d4:	20003b26 	beq	r4,zero,547c4 <__adddf3+0x610>
   546d8:	00c6303a 	nor	r3,zero,r3
   546dc:	1800371e 	bne	r3,zero,547bc <__adddf3+0x608>
   546e0:	3463c83a 	sub	r17,r6,r17
   546e4:	414bc83a 	sub	r5,r8,r5
   546e8:	344d803a 	cmpltu	r6,r6,r17
   546ec:	298bc83a 	sub	r5,r5,r6
   546f0:	1021883a 	mov	r16,r2
   546f4:	3825883a 	mov	r18,r7
   546f8:	003f0a06 	br	54324 <__alt_data_end+0xfffef934>
   546fc:	1023883a 	mov	r17,r2
   54700:	003f0d06 	br	54338 <__alt_data_end+0xfffef948>
   54704:	0007883a 	mov	r3,zero
   54708:	000b883a 	mov	r5,zero
   5470c:	0023883a 	mov	r17,zero
   54710:	003f2706 	br	543b0 <__alt_data_end+0xfffef9c0>
   54714:	0027883a 	mov	r19,zero
   54718:	003fb706 	br	545f8 <__alt_data_end+0xfffefc08>
   5471c:	0011883a 	mov	r8,zero
   54720:	003fc206 	br	5462c <__alt_data_end+0xfffefc3c>
   54724:	2c44b03a 	or	r2,r5,r17
   54728:	8000871e 	bne	r16,zero,54948 <__adddf3+0x794>
   5472c:	1000b126 	beq	r2,zero,549f4 <__adddf3+0x840>
   54730:	4184b03a 	or	r2,r8,r6
   54734:	103ebe26 	beq	r2,zero,54230 <__alt_data_end+0xfffef840>
   54738:	3445883a 	add	r2,r6,r17
   5473c:	1463803a 	cmpltu	r17,r2,r17
   54740:	414b883a 	add	r5,r8,r5
   54744:	2c4b883a 	add	r5,r5,r17
   54748:	28c0202c 	andhi	r3,r5,128
   5474c:	1023883a 	mov	r17,r2
   54750:	183f6326 	beq	r3,zero,544e0 <__alt_data_end+0xfffefaf0>
   54754:	00bfe034 	movhi	r2,65408
   54758:	10bfffc4 	addi	r2,r2,-1
   5475c:	2021883a 	mov	r16,r4
   54760:	288a703a 	and	r5,r5,r2
   54764:	003eb206 	br	54230 <__alt_data_end+0xfffef840>
   54768:	2c44b03a 	or	r2,r5,r17
   5476c:	8000251e 	bne	r16,zero,54804 <__adddf3+0x650>
   54770:	10004b1e 	bne	r2,zero,548a0 <__adddf3+0x6ec>
   54774:	4184b03a 	or	r2,r8,r6
   54778:	103fe226 	beq	r2,zero,54704 <__alt_data_end+0xfffefd14>
   5477c:	400b883a 	mov	r5,r8
   54780:	3023883a 	mov	r17,r6
   54784:	3825883a 	mov	r18,r7
   54788:	003ea906 	br	54230 <__alt_data_end+0xfffef840>
   5478c:	20bff804 	addi	r2,r4,-32
   54790:	01c00804 	movi	r7,32
   54794:	4084d83a 	srl	r2,r8,r2
   54798:	21c07e26 	beq	r4,r7,54994 <__adddf3+0x7e0>
   5479c:	01c01004 	movi	r7,64
   547a0:	3909c83a 	sub	r4,r7,r4
   547a4:	4110983a 	sll	r8,r8,r4
   547a8:	418cb03a 	or	r6,r8,r6
   547ac:	300cc03a 	cmpne	r6,r6,zero
   547b0:	308cb03a 	or	r6,r6,r2
   547b4:	0011883a 	mov	r8,zero
   547b8:	003f1b06 	br	54428 <__alt_data_end+0xfffefa38>
   547bc:	0101ffc4 	movi	r4,2047
   547c0:	113fa41e 	bne	r2,r4,54654 <__alt_data_end+0xfffefc64>
   547c4:	400b883a 	mov	r5,r8
   547c8:	3023883a 	mov	r17,r6
   547cc:	1021883a 	mov	r16,r2
   547d0:	3825883a 	mov	r18,r7
   547d4:	003e9606 	br	54230 <__alt_data_end+0xfffef840>
   547d8:	80001a1e 	bne	r16,zero,54844 <__adddf3+0x690>
   547dc:	2c4eb03a 	or	r7,r5,r17
   547e0:	38005526 	beq	r7,zero,54938 <__adddf3+0x784>
   547e4:	0108303a 	nor	r4,zero,r4
   547e8:	2000511e 	bne	r4,zero,54930 <__adddf3+0x77c>
   547ec:	89a3883a 	add	r17,r17,r6
   547f0:	414b883a 	add	r5,r8,r5
   547f4:	898d803a 	cmpltu	r6,r17,r6
   547f8:	298b883a 	add	r5,r5,r6
   547fc:	1021883a 	mov	r16,r2
   54800:	003f0e06 	br	5443c <__alt_data_end+0xfffefa4c>
   54804:	1000341e 	bne	r2,zero,548d8 <__adddf3+0x724>
   54808:	4184b03a 	or	r2,r8,r6
   5480c:	10006f26 	beq	r2,zero,549cc <__adddf3+0x818>
   54810:	400b883a 	mov	r5,r8
   54814:	3023883a 	mov	r17,r6
   54818:	3825883a 	mov	r18,r7
   5481c:	0401ffc4 	movi	r16,2047
   54820:	003e8306 	br	54230 <__alt_data_end+0xfffef840>
   54824:	2c62b03a 	or	r17,r5,r17
   54828:	8822c03a 	cmpne	r17,r17,zero
   5482c:	0007883a 	mov	r3,zero
   54830:	003f9506 	br	54688 <__alt_data_end+0xfffefc98>
   54834:	1021883a 	mov	r16,r2
   54838:	000b883a 	mov	r5,zero
   5483c:	0023883a 	mov	r17,zero
   54840:	003edb06 	br	543b0 <__alt_data_end+0xfffef9c0>
   54844:	01c1ffc4 	movi	r7,2047
   54848:	11c03b26 	beq	r2,r7,54938 <__adddf3+0x784>
   5484c:	0109c83a 	sub	r4,zero,r4
   54850:	29402034 	orhi	r5,r5,128
   54854:	01c00e04 	movi	r7,56
   54858:	39006216 	blt	r7,r4,549e4 <__adddf3+0x830>
   5485c:	01c007c4 	movi	r7,31
   54860:	39006b16 	blt	r7,r4,54a10 <__adddf3+0x85c>
   54864:	01c00804 	movi	r7,32
   54868:	390fc83a 	sub	r7,r7,r4
   5486c:	29d4983a 	sll	r10,r5,r7
   54870:	8912d83a 	srl	r9,r17,r4
   54874:	89ce983a 	sll	r7,r17,r7
   54878:	2908d83a 	srl	r4,r5,r4
   5487c:	5262b03a 	or	r17,r10,r9
   54880:	380ac03a 	cmpne	r5,r7,zero
   54884:	8962b03a 	or	r17,r17,r5
   54888:	89a3883a 	add	r17,r17,r6
   5488c:	2211883a 	add	r8,r4,r8
   54890:	898d803a 	cmpltu	r6,r17,r6
   54894:	418b883a 	add	r5,r8,r6
   54898:	1021883a 	mov	r16,r2
   5489c:	003ee706 	br	5443c <__alt_data_end+0xfffefa4c>
   548a0:	4184b03a 	or	r2,r8,r6
   548a4:	103e6226 	beq	r2,zero,54230 <__alt_data_end+0xfffef840>
   548a8:	8987c83a 	sub	r3,r17,r6
   548ac:	88c9803a 	cmpltu	r4,r17,r3
   548b0:	2a05c83a 	sub	r2,r5,r8
   548b4:	1105c83a 	sub	r2,r2,r4
   548b8:	1100202c 	andhi	r4,r2,128
   548bc:	203f0426 	beq	r4,zero,544d0 <__alt_data_end+0xfffefae0>
   548c0:	3463c83a 	sub	r17,r6,r17
   548c4:	414bc83a 	sub	r5,r8,r5
   548c8:	344d803a 	cmpltu	r6,r6,r17
   548cc:	298bc83a 	sub	r5,r5,r6
   548d0:	3825883a 	mov	r18,r7
   548d4:	003e5606 	br	54230 <__alt_data_end+0xfffef840>
   548d8:	4184b03a 	or	r2,r8,r6
   548dc:	10002b26 	beq	r2,zero,5498c <__adddf3+0x7d8>
   548e0:	2804d0fa 	srli	r2,r5,3
   548e4:	8822d0fa 	srli	r17,r17,3
   548e8:	280a977a 	slli	r5,r5,29
   548ec:	10c0022c 	andhi	r3,r2,8
   548f0:	2c62b03a 	or	r17,r5,r17
   548f4:	18000826 	beq	r3,zero,54918 <__adddf3+0x764>
   548f8:	4008d0fa 	srli	r4,r8,3
   548fc:	20c0022c 	andhi	r3,r4,8
   54900:	1800051e 	bne	r3,zero,54918 <__adddf3+0x764>
   54904:	300cd0fa 	srli	r6,r6,3
   54908:	4010977a 	slli	r8,r8,29
   5490c:	2005883a 	mov	r2,r4
   54910:	3825883a 	mov	r18,r7
   54914:	41a2b03a 	or	r17,r8,r6
   54918:	880ad77a 	srli	r5,r17,29
   5491c:	100490fa 	slli	r2,r2,3
   54920:	882290fa 	slli	r17,r17,3
   54924:	0401ffc4 	movi	r16,2047
   54928:	288ab03a 	or	r5,r5,r2
   5492c:	003e4006 	br	54230 <__alt_data_end+0xfffef840>
   54930:	01c1ffc4 	movi	r7,2047
   54934:	11ffc71e 	bne	r2,r7,54854 <__alt_data_end+0xfffefe64>
   54938:	400b883a 	mov	r5,r8
   5493c:	3023883a 	mov	r17,r6
   54940:	1021883a 	mov	r16,r2
   54944:	003e3a06 	br	54230 <__alt_data_end+0xfffef840>
   54948:	10002d26 	beq	r2,zero,54a00 <__adddf3+0x84c>
   5494c:	4184b03a 	or	r2,r8,r6
   54950:	10000e26 	beq	r2,zero,5498c <__adddf3+0x7d8>
   54954:	2804d0fa 	srli	r2,r5,3
   54958:	8822d0fa 	srli	r17,r17,3
   5495c:	280a977a 	slli	r5,r5,29
   54960:	10c0022c 	andhi	r3,r2,8
   54964:	2c62b03a 	or	r17,r5,r17
   54968:	183feb26 	beq	r3,zero,54918 <__alt_data_end+0xfffeff28>
   5496c:	4008d0fa 	srli	r4,r8,3
   54970:	20c0022c 	andhi	r3,r4,8
   54974:	183fe81e 	bne	r3,zero,54918 <__alt_data_end+0xfffeff28>
   54978:	300cd0fa 	srli	r6,r6,3
   5497c:	4010977a 	slli	r8,r8,29
   54980:	2005883a 	mov	r2,r4
   54984:	41a2b03a 	or	r17,r8,r6
   54988:	003fe306 	br	54918 <__alt_data_end+0xfffeff28>
   5498c:	0401ffc4 	movi	r16,2047
   54990:	003e2706 	br	54230 <__alt_data_end+0xfffef840>
   54994:	0011883a 	mov	r8,zero
   54998:	003f8306 	br	547a8 <__alt_data_end+0xfffefdb8>
   5499c:	193ff804 	addi	r4,r3,-32
   549a0:	02400804 	movi	r9,32
   549a4:	2908d83a 	srl	r4,r5,r4
   549a8:	1a402526 	beq	r3,r9,54a40 <__adddf3+0x88c>
   549ac:	02401004 	movi	r9,64
   549b0:	48c7c83a 	sub	r3,r9,r3
   549b4:	28ca983a 	sll	r5,r5,r3
   549b8:	2c62b03a 	or	r17,r5,r17
   549bc:	8822c03a 	cmpne	r17,r17,zero
   549c0:	8922b03a 	or	r17,r17,r4
   549c4:	0007883a 	mov	r3,zero
   549c8:	003f2f06 	br	54688 <__alt_data_end+0xfffefc98>
   549cc:	01402034 	movhi	r5,128
   549d0:	0007883a 	mov	r3,zero
   549d4:	297fffc4 	addi	r5,r5,-1
   549d8:	047ffe04 	movi	r17,-8
   549dc:	0401ffc4 	movi	r16,2047
   549e0:	003e7306 	br	543b0 <__alt_data_end+0xfffef9c0>
   549e4:	2c62b03a 	or	r17,r5,r17
   549e8:	8822c03a 	cmpne	r17,r17,zero
   549ec:	0009883a 	mov	r4,zero
   549f0:	003fa506 	br	54888 <__alt_data_end+0xfffefe98>
   549f4:	400b883a 	mov	r5,r8
   549f8:	3023883a 	mov	r17,r6
   549fc:	003e0c06 	br	54230 <__alt_data_end+0xfffef840>
   54a00:	400b883a 	mov	r5,r8
   54a04:	3023883a 	mov	r17,r6
   54a08:	0401ffc4 	movi	r16,2047
   54a0c:	003e0806 	br	54230 <__alt_data_end+0xfffef840>
   54a10:	21fff804 	addi	r7,r4,-32
   54a14:	02400804 	movi	r9,32
   54a18:	29ced83a 	srl	r7,r5,r7
   54a1c:	22400a26 	beq	r4,r9,54a48 <__adddf3+0x894>
   54a20:	02401004 	movi	r9,64
   54a24:	4909c83a 	sub	r4,r9,r4
   54a28:	290a983a 	sll	r5,r5,r4
   54a2c:	2c62b03a 	or	r17,r5,r17
   54a30:	8822c03a 	cmpne	r17,r17,zero
   54a34:	89e2b03a 	or	r17,r17,r7
   54a38:	0009883a 	mov	r4,zero
   54a3c:	003f9206 	br	54888 <__alt_data_end+0xfffefe98>
   54a40:	000b883a 	mov	r5,zero
   54a44:	003fdc06 	br	549b8 <__alt_data_end+0xfffeffc8>
   54a48:	000b883a 	mov	r5,zero
   54a4c:	003ff706 	br	54a2c <__alt_data_end+0xffff003c>

00054a50 <__eqdf2>:
   54a50:	2804d53a 	srli	r2,r5,20
   54a54:	3806d53a 	srli	r3,r7,20
   54a58:	02000434 	movhi	r8,16
   54a5c:	423fffc4 	addi	r8,r8,-1
   54a60:	1081ffcc 	andi	r2,r2,2047
   54a64:	0241ffc4 	movi	r9,2047
   54a68:	2a14703a 	and	r10,r5,r8
   54a6c:	18c1ffcc 	andi	r3,r3,2047
   54a70:	3a10703a 	and	r8,r7,r8
   54a74:	280ad7fa 	srli	r5,r5,31
   54a78:	380ed7fa 	srli	r7,r7,31
   54a7c:	12400f26 	beq	r2,r9,54abc <__eqdf2+0x6c>
   54a80:	0241ffc4 	movi	r9,2047
   54a84:	1a400326 	beq	r3,r9,54a94 <__eqdf2+0x44>
   54a88:	10c00526 	beq	r2,r3,54aa0 <__eqdf2+0x50>
   54a8c:	00800044 	movi	r2,1
   54a90:	f800283a 	ret
   54a94:	4192b03a 	or	r9,r8,r6
   54a98:	483ffc1e 	bne	r9,zero,54a8c <__alt_data_end+0xffff009c>
   54a9c:	10fffb1e 	bne	r2,r3,54a8c <__alt_data_end+0xffff009c>
   54aa0:	523ffa1e 	bne	r10,r8,54a8c <__alt_data_end+0xffff009c>
   54aa4:	21bff91e 	bne	r4,r6,54a8c <__alt_data_end+0xffff009c>
   54aa8:	29c00826 	beq	r5,r7,54acc <__eqdf2+0x7c>
   54aac:	103ff71e 	bne	r2,zero,54a8c <__alt_data_end+0xffff009c>
   54ab0:	5104b03a 	or	r2,r10,r4
   54ab4:	1004c03a 	cmpne	r2,r2,zero
   54ab8:	f800283a 	ret
   54abc:	5112b03a 	or	r9,r10,r4
   54ac0:	483fef26 	beq	r9,zero,54a80 <__alt_data_end+0xffff0090>
   54ac4:	00800044 	movi	r2,1
   54ac8:	f800283a 	ret
   54acc:	0005883a 	mov	r2,zero
   54ad0:	f800283a 	ret

00054ad4 <__gedf2>:
   54ad4:	2804d53a 	srli	r2,r5,20
   54ad8:	3806d53a 	srli	r3,r7,20
   54adc:	02000434 	movhi	r8,16
   54ae0:	423fffc4 	addi	r8,r8,-1
   54ae4:	0241ffc4 	movi	r9,2047
   54ae8:	1081ffcc 	andi	r2,r2,2047
   54aec:	2a14703a 	and	r10,r5,r8
   54af0:	1a46703a 	and	r3,r3,r9
   54af4:	3a10703a 	and	r8,r7,r8
   54af8:	280ad7fa 	srli	r5,r5,31
   54afc:	380ed7fa 	srli	r7,r7,31
   54b00:	12400b26 	beq	r2,r9,54b30 <__gedf2+0x5c>
   54b04:	1a401626 	beq	r3,r9,54b60 <__gedf2+0x8c>
   54b08:	10000c1e 	bne	r2,zero,54b3c <__gedf2+0x68>
   54b0c:	5112b03a 	or	r9,r10,r4
   54b10:	4813003a 	cmpeq	r9,r9,zero
   54b14:	4817883a 	mov	r11,r9
   54b18:	18000c1e 	bne	r3,zero,54b4c <__gedf2+0x78>
   54b1c:	4198b03a 	or	r12,r8,r6
   54b20:	60000a1e 	bne	r12,zero,54b4c <__gedf2+0x78>
   54b24:	48001326 	beq	r9,zero,54b74 <__gedf2+0xa0>
   54b28:	0005883a 	mov	r2,zero
   54b2c:	f800283a 	ret
   54b30:	5112b03a 	or	r9,r10,r4
   54b34:	4800191e 	bne	r9,zero,54b9c <__gedf2+0xc8>
   54b38:	18800926 	beq	r3,r2,54b60 <__gedf2+0x8c>
   54b3c:	18000b1e 	bne	r3,zero,54b6c <__gedf2+0x98>
   54b40:	4192b03a 	or	r9,r8,r6
   54b44:	0017883a 	mov	r11,zero
   54b48:	48000a26 	beq	r9,zero,54b74 <__gedf2+0xa0>
   54b4c:	39c03fcc 	andi	r7,r7,255
   54b50:	58000726 	beq	r11,zero,54b70 <__gedf2+0x9c>
   54b54:	3800081e 	bne	r7,zero,54b78 <__gedf2+0xa4>
   54b58:	00bfffc4 	movi	r2,-1
   54b5c:	f800283a 	ret
   54b60:	4192b03a 	or	r9,r8,r6
   54b64:	48000d1e 	bne	r9,zero,54b9c <__gedf2+0xc8>
   54b68:	103fe826 	beq	r2,zero,54b0c <__alt_data_end+0xffff011c>
   54b6c:	39c03fcc 	andi	r7,r7,255
   54b70:	29c00326 	beq	r5,r7,54b80 <__gedf2+0xac>
   54b74:	283ff81e 	bne	r5,zero,54b58 <__alt_data_end+0xffff0168>
   54b78:	00800044 	movi	r2,1
   54b7c:	f800283a 	ret
   54b80:	18bffc16 	blt	r3,r2,54b74 <__alt_data_end+0xffff0184>
   54b84:	10c00316 	blt	r2,r3,54b94 <__gedf2+0xc0>
   54b88:	42bffa36 	bltu	r8,r10,54b74 <__alt_data_end+0xffff0184>
   54b8c:	52000526 	beq	r10,r8,54ba4 <__gedf2+0xd0>
   54b90:	523fe52e 	bgeu	r10,r8,54b28 <__alt_data_end+0xffff0138>
   54b94:	283ff026 	beq	r5,zero,54b58 <__alt_data_end+0xffff0168>
   54b98:	003ff706 	br	54b78 <__alt_data_end+0xffff0188>
   54b9c:	00bfff84 	movi	r2,-2
   54ba0:	f800283a 	ret
   54ba4:	313ff336 	bltu	r6,r4,54b74 <__alt_data_end+0xffff0184>
   54ba8:	21bfdf2e 	bgeu	r4,r6,54b28 <__alt_data_end+0xffff0138>
   54bac:	283fea26 	beq	r5,zero,54b58 <__alt_data_end+0xffff0168>
   54bb0:	003ff106 	br	54b78 <__alt_data_end+0xffff0188>

00054bb4 <__ledf2>:
   54bb4:	2804d53a 	srli	r2,r5,20
   54bb8:	3810d53a 	srli	r8,r7,20
   54bbc:	00c00434 	movhi	r3,16
   54bc0:	18ffffc4 	addi	r3,r3,-1
   54bc4:	0241ffc4 	movi	r9,2047
   54bc8:	1081ffcc 	andi	r2,r2,2047
   54bcc:	28d4703a 	and	r10,r5,r3
   54bd0:	4250703a 	and	r8,r8,r9
   54bd4:	38c6703a 	and	r3,r7,r3
   54bd8:	280ad7fa 	srli	r5,r5,31
   54bdc:	380ed7fa 	srli	r7,r7,31
   54be0:	12400b26 	beq	r2,r9,54c10 <__ledf2+0x5c>
   54be4:	42401926 	beq	r8,r9,54c4c <__ledf2+0x98>
   54be8:	10000c1e 	bne	r2,zero,54c1c <__ledf2+0x68>
   54bec:	5112b03a 	or	r9,r10,r4
   54bf0:	4813003a 	cmpeq	r9,r9,zero
   54bf4:	4817883a 	mov	r11,r9
   54bf8:	40000f26 	beq	r8,zero,54c38 <__ledf2+0x84>
   54bfc:	39c03fcc 	andi	r7,r7,255
   54c00:	58001826 	beq	r11,zero,54c64 <__ledf2+0xb0>
   54c04:	38000a1e 	bne	r7,zero,54c30 <__ledf2+0x7c>
   54c08:	00bfffc4 	movi	r2,-1
   54c0c:	f800283a 	ret
   54c10:	5112b03a 	or	r9,r10,r4
   54c14:	48000f1e 	bne	r9,zero,54c54 <__ledf2+0xa0>
   54c18:	40800c26 	beq	r8,r2,54c4c <__ledf2+0x98>
   54c1c:	4000101e 	bne	r8,zero,54c60 <__ledf2+0xac>
   54c20:	1992b03a 	or	r9,r3,r6
   54c24:	0017883a 	mov	r11,zero
   54c28:	483ff41e 	bne	r9,zero,54bfc <__alt_data_end+0xffff020c>
   54c2c:	283ff61e 	bne	r5,zero,54c08 <__alt_data_end+0xffff0218>
   54c30:	00800044 	movi	r2,1
   54c34:	f800283a 	ret
   54c38:	1998b03a 	or	r12,r3,r6
   54c3c:	603fef1e 	bne	r12,zero,54bfc <__alt_data_end+0xffff020c>
   54c40:	483ffa26 	beq	r9,zero,54c2c <__alt_data_end+0xffff023c>
   54c44:	0005883a 	mov	r2,zero
   54c48:	f800283a 	ret
   54c4c:	1992b03a 	or	r9,r3,r6
   54c50:	48000226 	beq	r9,zero,54c5c <__ledf2+0xa8>
   54c54:	00800084 	movi	r2,2
   54c58:	f800283a 	ret
   54c5c:	103fe326 	beq	r2,zero,54bec <__alt_data_end+0xffff01fc>
   54c60:	39c03fcc 	andi	r7,r7,255
   54c64:	29fff11e 	bne	r5,r7,54c2c <__alt_data_end+0xffff023c>
   54c68:	40bff016 	blt	r8,r2,54c2c <__alt_data_end+0xffff023c>
   54c6c:	12000316 	blt	r2,r8,54c7c <__ledf2+0xc8>
   54c70:	1abfee36 	bltu	r3,r10,54c2c <__alt_data_end+0xffff023c>
   54c74:	50c00326 	beq	r10,r3,54c84 <__ledf2+0xd0>
   54c78:	50fff22e 	bgeu	r10,r3,54c44 <__alt_data_end+0xffff0254>
   54c7c:	283fe226 	beq	r5,zero,54c08 <__alt_data_end+0xffff0218>
   54c80:	003feb06 	br	54c30 <__alt_data_end+0xffff0240>
   54c84:	313fe936 	bltu	r6,r4,54c2c <__alt_data_end+0xffff023c>
   54c88:	21bfee2e 	bgeu	r4,r6,54c44 <__alt_data_end+0xffff0254>
   54c8c:	283fde26 	beq	r5,zero,54c08 <__alt_data_end+0xffff0218>
   54c90:	003fe706 	br	54c30 <__alt_data_end+0xffff0240>

00054c94 <__muldf3>:
   54c94:	deffee04 	addi	sp,sp,-72
   54c98:	dd000c15 	stw	r20,48(sp)
   54c9c:	2828d53a 	srli	r20,r5,20
   54ca0:	dd400d15 	stw	r21,52(sp)
   54ca4:	282ad7fa 	srli	r21,r5,31
   54ca8:	dc000815 	stw	r16,32(sp)
   54cac:	04000434 	movhi	r16,16
   54cb0:	ddc00f15 	stw	r23,60(sp)
   54cb4:	dcc00b15 	stw	r19,44(sp)
   54cb8:	dc800a15 	stw	r18,40(sp)
   54cbc:	843fffc4 	addi	r16,r16,-1
   54cc0:	dfc01115 	stw	ra,68(sp)
   54cc4:	df001015 	stw	fp,64(sp)
   54cc8:	dd800e15 	stw	r22,56(sp)
   54ccc:	dc400915 	stw	r17,36(sp)
   54cd0:	a501ffcc 	andi	r20,r20,2047
   54cd4:	2025883a 	mov	r18,r4
   54cd8:	202f883a 	mov	r23,r4
   54cdc:	2c20703a 	and	r16,r5,r16
   54ce0:	a827883a 	mov	r19,r21
   54ce4:	aa403fcc 	andi	r9,r21,255
   54ce8:	a0005926 	beq	r20,zero,54e50 <__muldf3+0x1bc>
   54cec:	0081ffc4 	movi	r2,2047
   54cf0:	a0803426 	beq	r20,r2,54dc4 <__muldf3+0x130>
   54cf4:	84000434 	orhi	r16,r16,16
   54cf8:	2004d77a 	srli	r2,r4,29
   54cfc:	802090fa 	slli	r16,r16,3
   54d00:	202e90fa 	slli	r23,r4,3
   54d04:	a53f0044 	addi	r20,r20,-1023
   54d08:	80a0b03a 	or	r16,r16,r2
   54d0c:	000b883a 	mov	r5,zero
   54d10:	0039883a 	mov	fp,zero
   54d14:	3806d53a 	srli	r3,r7,20
   54d18:	382cd7fa 	srli	r22,r7,31
   54d1c:	00800434 	movhi	r2,16
   54d20:	10bfffc4 	addi	r2,r2,-1
   54d24:	18c1ffcc 	andi	r3,r3,2047
   54d28:	3025883a 	mov	r18,r6
   54d2c:	38a2703a 	and	r17,r7,r2
   54d30:	b2803fcc 	andi	r10,r22,255
   54d34:	18006426 	beq	r3,zero,54ec8 <__muldf3+0x234>
   54d38:	0081ffc4 	movi	r2,2047
   54d3c:	18805c26 	beq	r3,r2,54eb0 <__muldf3+0x21c>
   54d40:	8c400434 	orhi	r17,r17,16
   54d44:	3004d77a 	srli	r2,r6,29
   54d48:	882290fa 	slli	r17,r17,3
   54d4c:	302490fa 	slli	r18,r6,3
   54d50:	18ff0044 	addi	r3,r3,-1023
   54d54:	88a2b03a 	or	r17,r17,r2
   54d58:	000f883a 	mov	r7,zero
   54d5c:	394ab03a 	or	r5,r7,r5
   54d60:	280a90ba 	slli	r5,r5,2
   54d64:	00800174 	movhi	r2,5
   54d68:	10936104 	addi	r2,r2,19844
   54d6c:	288b883a 	add	r5,r5,r2
   54d70:	28800017 	ldw	r2,0(r5)
   54d74:	a0c7883a 	add	r3,r20,r3
   54d78:	b54cf03a 	xor	r6,r22,r21
   54d7c:	1a000044 	addi	r8,r3,1
   54d80:	1000683a 	jmp	r2
   54d84:	00054fc8 	cmpgei	zero,zero,5439
   54d88:	00054fb4 	movhi	zero,5438
   54d8c:	00054fb4 	movhi	zero,5438
   54d90:	00054fa0 	cmpeqi	zero,zero,5438
   54d94:	00054de0 	cmpeqi	zero,zero,5431
   54d98:	00054de0 	cmpeqi	zero,zero,5431
   54d9c:	00054f88 	cmpgei	zero,zero,5438
   54da0:	00054fa0 	cmpeqi	zero,zero,5438
   54da4:	00054de0 	cmpeqi	zero,zero,5431
   54da8:	00054f88 	cmpgei	zero,zero,5438
   54dac:	00054de0 	cmpeqi	zero,zero,5431
   54db0:	00054fa0 	cmpeqi	zero,zero,5438
   54db4:	00054de4 	muli	zero,zero,5431
   54db8:	00054de4 	muli	zero,zero,5431
   54dbc:	00054de4 	muli	zero,zero,5431
   54dc0:	00055304 	movi	zero,5452
   54dc4:	8104b03a 	or	r2,r16,r4
   54dc8:	10006c1e 	bne	r2,zero,54f7c <__muldf3+0x2e8>
   54dcc:	01400204 	movi	r5,8
   54dd0:	0021883a 	mov	r16,zero
   54dd4:	002f883a 	mov	r23,zero
   54dd8:	07000084 	movi	fp,2
   54ddc:	003fcd06 	br	54d14 <__alt_data_end+0xffff0324>
   54de0:	3013883a 	mov	r9,r6
   54de4:	00800084 	movi	r2,2
   54de8:	e080501e 	bne	fp,r2,54f2c <__muldf3+0x298>
   54dec:	4cc0004c 	andi	r19,r9,1
   54df0:	0101ffc4 	movi	r4,2047
   54df4:	0021883a 	mov	r16,zero
   54df8:	002f883a 	mov	r23,zero
   54dfc:	2008953a 	slli	r4,r4,20
   54e00:	98c03fcc 	andi	r3,r19,255
   54e04:	04400434 	movhi	r17,16
   54e08:	8c7fffc4 	addi	r17,r17,-1
   54e0c:	180697fa 	slli	r3,r3,31
   54e10:	8460703a 	and	r16,r16,r17
   54e14:	8120b03a 	or	r16,r16,r4
   54e18:	80c6b03a 	or	r3,r16,r3
   54e1c:	b805883a 	mov	r2,r23
   54e20:	dfc01117 	ldw	ra,68(sp)
   54e24:	df001017 	ldw	fp,64(sp)
   54e28:	ddc00f17 	ldw	r23,60(sp)
   54e2c:	dd800e17 	ldw	r22,56(sp)
   54e30:	dd400d17 	ldw	r21,52(sp)
   54e34:	dd000c17 	ldw	r20,48(sp)
   54e38:	dcc00b17 	ldw	r19,44(sp)
   54e3c:	dc800a17 	ldw	r18,40(sp)
   54e40:	dc400917 	ldw	r17,36(sp)
   54e44:	dc000817 	ldw	r16,32(sp)
   54e48:	dec01204 	addi	sp,sp,72
   54e4c:	f800283a 	ret
   54e50:	8104b03a 	or	r2,r16,r4
   54e54:	10004426 	beq	r2,zero,54f68 <__muldf3+0x2d4>
   54e58:	80014b26 	beq	r16,zero,55388 <__muldf3+0x6f4>
   54e5c:	8009883a 	mov	r4,r16
   54e60:	d9800715 	stw	r6,28(sp)
   54e64:	d9c00215 	stw	r7,8(sp)
   54e68:	da400415 	stw	r9,16(sp)
   54e6c:	00469200 	call	46920 <__clzsi2>
   54e70:	d9800717 	ldw	r6,28(sp)
   54e74:	d9c00217 	ldw	r7,8(sp)
   54e78:	da400417 	ldw	r9,16(sp)
   54e7c:	1007883a 	mov	r3,r2
   54e80:	01000a04 	movi	r4,40
   54e84:	1dfffe04 	addi	r23,r3,-8
   54e88:	20c9c83a 	sub	r4,r4,r3
   54e8c:	85e0983a 	sll	r16,r16,r23
   54e90:	9108d83a 	srl	r4,r18,r4
   54e94:	95ee983a 	sll	r23,r18,r23
   54e98:	2420b03a 	or	r16,r4,r16
   54e9c:	053f0344 	movi	r20,-1011
   54ea0:	a0e9c83a 	sub	r20,r20,r3
   54ea4:	000b883a 	mov	r5,zero
   54ea8:	0039883a 	mov	fp,zero
   54eac:	003f9906 	br	54d14 <__alt_data_end+0xffff0324>
   54eb0:	8984b03a 	or	r2,r17,r6
   54eb4:	10002a1e 	bne	r2,zero,54f60 <__muldf3+0x2cc>
   54eb8:	0023883a 	mov	r17,zero
   54ebc:	0025883a 	mov	r18,zero
   54ec0:	01c00084 	movi	r7,2
   54ec4:	003fa506 	br	54d5c <__alt_data_end+0xffff036c>
   54ec8:	8984b03a 	or	r2,r17,r6
   54ecc:	10002026 	beq	r2,zero,54f50 <__muldf3+0x2bc>
   54ed0:	88011c26 	beq	r17,zero,55344 <__muldf3+0x6b0>
   54ed4:	8809883a 	mov	r4,r17
   54ed8:	d9400215 	stw	r5,8(sp)
   54edc:	d9800715 	stw	r6,28(sp)
   54ee0:	da400415 	stw	r9,16(sp)
   54ee4:	da800315 	stw	r10,12(sp)
   54ee8:	00469200 	call	46920 <__clzsi2>
   54eec:	d9400217 	ldw	r5,8(sp)
   54ef0:	d9800717 	ldw	r6,28(sp)
   54ef4:	da400417 	ldw	r9,16(sp)
   54ef8:	da800317 	ldw	r10,12(sp)
   54efc:	1007883a 	mov	r3,r2
   54f00:	01000a04 	movi	r4,40
   54f04:	1cbffe04 	addi	r18,r3,-8
   54f08:	20c9c83a 	sub	r4,r4,r3
   54f0c:	8ca2983a 	sll	r17,r17,r18
   54f10:	3108d83a 	srl	r4,r6,r4
   54f14:	34a4983a 	sll	r18,r6,r18
   54f18:	2462b03a 	or	r17,r4,r17
   54f1c:	00bf0344 	movi	r2,-1011
   54f20:	10c7c83a 	sub	r3,r2,r3
   54f24:	000f883a 	mov	r7,zero
   54f28:	003f8c06 	br	54d5c <__alt_data_end+0xffff036c>
   54f2c:	008000c4 	movi	r2,3
   54f30:	e0816d26 	beq	fp,r2,554e8 <__muldf3+0x854>
   54f34:	00800044 	movi	r2,1
   54f38:	e081321e 	bne	fp,r2,55404 <__muldf3+0x770>
   54f3c:	48a6703a 	and	r19,r9,r2
   54f40:	0009883a 	mov	r4,zero
   54f44:	0021883a 	mov	r16,zero
   54f48:	002f883a 	mov	r23,zero
   54f4c:	003fab06 	br	54dfc <__alt_data_end+0xffff040c>
   54f50:	0023883a 	mov	r17,zero
   54f54:	0025883a 	mov	r18,zero
   54f58:	01c00044 	movi	r7,1
   54f5c:	003f7f06 	br	54d5c <__alt_data_end+0xffff036c>
   54f60:	01c000c4 	movi	r7,3
   54f64:	003f7d06 	br	54d5c <__alt_data_end+0xffff036c>
   54f68:	01400104 	movi	r5,4
   54f6c:	0021883a 	mov	r16,zero
   54f70:	002f883a 	mov	r23,zero
   54f74:	07000044 	movi	fp,1
   54f78:	003f6606 	br	54d14 <__alt_data_end+0xffff0324>
   54f7c:	01400304 	movi	r5,12
   54f80:	070000c4 	movi	fp,3
   54f84:	003f6306 	br	54d14 <__alt_data_end+0xffff0324>
   54f88:	04000434 	movhi	r16,16
   54f8c:	0027883a 	mov	r19,zero
   54f90:	843fffc4 	addi	r16,r16,-1
   54f94:	05ffffc4 	movi	r23,-1
   54f98:	0101ffc4 	movi	r4,2047
   54f9c:	003f9706 	br	54dfc <__alt_data_end+0xffff040c>
   54fa0:	8821883a 	mov	r16,r17
   54fa4:	902f883a 	mov	r23,r18
   54fa8:	5013883a 	mov	r9,r10
   54fac:	3839883a 	mov	fp,r7
   54fb0:	003f8c06 	br	54de4 <__alt_data_end+0xffff03f4>
   54fb4:	8821883a 	mov	r16,r17
   54fb8:	902f883a 	mov	r23,r18
   54fbc:	3013883a 	mov	r9,r6
   54fc0:	3839883a 	mov	fp,r7
   54fc4:	003f8706 	br	54de4 <__alt_data_end+0xffff03f4>
   54fc8:	b82ad43a 	srli	r21,r23,16
   54fcc:	9038d43a 	srli	fp,r18,16
   54fd0:	bdffffcc 	andi	r23,r23,65535
   54fd4:	94bfffcc 	andi	r18,r18,65535
   54fd8:	9009883a 	mov	r4,r18
   54fdc:	b80b883a 	mov	r5,r23
   54fe0:	d8c00515 	stw	r3,20(sp)
   54fe4:	d9800715 	stw	r6,28(sp)
   54fe8:	da000615 	stw	r8,24(sp)
   54fec:	00453200 	call	45320 <__mulsi3>
   54ff0:	9009883a 	mov	r4,r18
   54ff4:	a80b883a 	mov	r5,r21
   54ff8:	1029883a 	mov	r20,r2
   54ffc:	00453200 	call	45320 <__mulsi3>
   55000:	e009883a 	mov	r4,fp
   55004:	a80b883a 	mov	r5,r21
   55008:	102d883a 	mov	r22,r2
   5500c:	00453200 	call	45320 <__mulsi3>
   55010:	e009883a 	mov	r4,fp
   55014:	b80b883a 	mov	r5,r23
   55018:	1027883a 	mov	r19,r2
   5501c:	00453200 	call	45320 <__mulsi3>
   55020:	a008d43a 	srli	r4,r20,16
   55024:	b085883a 	add	r2,r22,r2
   55028:	d8c00517 	ldw	r3,20(sp)
   5502c:	110f883a 	add	r7,r2,r4
   55030:	d9800717 	ldw	r6,28(sp)
   55034:	da000617 	ldw	r8,24(sp)
   55038:	3d80022e 	bgeu	r7,r22,55044 <__muldf3+0x3b0>
   5503c:	00800074 	movhi	r2,1
   55040:	98a7883a 	add	r19,r19,r2
   55044:	3804943a 	slli	r2,r7,16
   55048:	380ed43a 	srli	r7,r7,16
   5504c:	882cd43a 	srli	r22,r17,16
   55050:	a53fffcc 	andi	r20,r20,65535
   55054:	8c7fffcc 	andi	r17,r17,65535
   55058:	1529883a 	add	r20,r2,r20
   5505c:	8809883a 	mov	r4,r17
   55060:	b80b883a 	mov	r5,r23
   55064:	d8c00515 	stw	r3,20(sp)
   55068:	d9800715 	stw	r6,28(sp)
   5506c:	da000615 	stw	r8,24(sp)
   55070:	d9c00015 	stw	r7,0(sp)
   55074:	dd000115 	stw	r20,4(sp)
   55078:	00453200 	call	45320 <__mulsi3>
   5507c:	a80b883a 	mov	r5,r21
   55080:	8809883a 	mov	r4,r17
   55084:	d8800415 	stw	r2,16(sp)
   55088:	00453200 	call	45320 <__mulsi3>
   5508c:	a80b883a 	mov	r5,r21
   55090:	b009883a 	mov	r4,r22
   55094:	1029883a 	mov	r20,r2
   55098:	00453200 	call	45320 <__mulsi3>
   5509c:	b009883a 	mov	r4,r22
   550a0:	b80b883a 	mov	r5,r23
   550a4:	102b883a 	mov	r21,r2
   550a8:	00453200 	call	45320 <__mulsi3>
   550ac:	da400417 	ldw	r9,16(sp)
   550b0:	a085883a 	add	r2,r20,r2
   550b4:	d8c00517 	ldw	r3,20(sp)
   550b8:	4808d43a 	srli	r4,r9,16
   550bc:	d9800717 	ldw	r6,28(sp)
   550c0:	da000617 	ldw	r8,24(sp)
   550c4:	1109883a 	add	r4,r2,r4
   550c8:	2500022e 	bgeu	r4,r20,550d4 <__muldf3+0x440>
   550cc:	00800074 	movhi	r2,1
   550d0:	a8ab883a 	add	r21,r21,r2
   550d4:	200e943a 	slli	r7,r4,16
   550d8:	2004d43a 	srli	r2,r4,16
   550dc:	802ed43a 	srli	r23,r16,16
   550e0:	843fffcc 	andi	r16,r16,65535
   550e4:	4d3fffcc 	andi	r20,r9,65535
   550e8:	9009883a 	mov	r4,r18
   550ec:	800b883a 	mov	r5,r16
   550f0:	3d29883a 	add	r20,r7,r20
   550f4:	d8c00515 	stw	r3,20(sp)
   550f8:	d9800715 	stw	r6,28(sp)
   550fc:	da000615 	stw	r8,24(sp)
   55100:	a8ab883a 	add	r21,r21,r2
   55104:	00453200 	call	45320 <__mulsi3>
   55108:	9009883a 	mov	r4,r18
   5510c:	b80b883a 	mov	r5,r23
   55110:	d8800315 	stw	r2,12(sp)
   55114:	00453200 	call	45320 <__mulsi3>
   55118:	e009883a 	mov	r4,fp
   5511c:	b80b883a 	mov	r5,r23
   55120:	1025883a 	mov	r18,r2
   55124:	00453200 	call	45320 <__mulsi3>
   55128:	e009883a 	mov	r4,fp
   5512c:	800b883a 	mov	r5,r16
   55130:	d8800215 	stw	r2,8(sp)
   55134:	00453200 	call	45320 <__mulsi3>
   55138:	da800317 	ldw	r10,12(sp)
   5513c:	d9400017 	ldw	r5,0(sp)
   55140:	9085883a 	add	r2,r18,r2
   55144:	5008d43a 	srli	r4,r10,16
   55148:	a153883a 	add	r9,r20,r5
   5514c:	d8c00517 	ldw	r3,20(sp)
   55150:	1109883a 	add	r4,r2,r4
   55154:	d9800717 	ldw	r6,28(sp)
   55158:	da000617 	ldw	r8,24(sp)
   5515c:	dac00217 	ldw	r11,8(sp)
   55160:	2480022e 	bgeu	r4,r18,5516c <__muldf3+0x4d8>
   55164:	00800074 	movhi	r2,1
   55168:	5897883a 	add	r11,r11,r2
   5516c:	200e943a 	slli	r7,r4,16
   55170:	2038d43a 	srli	fp,r4,16
   55174:	52bfffcc 	andi	r10,r10,65535
   55178:	3a8f883a 	add	r7,r7,r10
   5517c:	8809883a 	mov	r4,r17
   55180:	800b883a 	mov	r5,r16
   55184:	d8c00515 	stw	r3,20(sp)
   55188:	d9800715 	stw	r6,28(sp)
   5518c:	d9c00215 	stw	r7,8(sp)
   55190:	da000615 	stw	r8,24(sp)
   55194:	da400415 	stw	r9,16(sp)
   55198:	5f39883a 	add	fp,r11,fp
   5519c:	00453200 	call	45320 <__mulsi3>
   551a0:	8809883a 	mov	r4,r17
   551a4:	b80b883a 	mov	r5,r23
   551a8:	1025883a 	mov	r18,r2
   551ac:	00453200 	call	45320 <__mulsi3>
   551b0:	b009883a 	mov	r4,r22
   551b4:	b80b883a 	mov	r5,r23
   551b8:	d8800315 	stw	r2,12(sp)
   551bc:	00453200 	call	45320 <__mulsi3>
   551c0:	b009883a 	mov	r4,r22
   551c4:	800b883a 	mov	r5,r16
   551c8:	1023883a 	mov	r17,r2
   551cc:	00453200 	call	45320 <__mulsi3>
   551d0:	da800317 	ldw	r10,12(sp)
   551d4:	9008d43a 	srli	r4,r18,16
   551d8:	d8c00517 	ldw	r3,20(sp)
   551dc:	5085883a 	add	r2,r10,r2
   551e0:	1109883a 	add	r4,r2,r4
   551e4:	d9800717 	ldw	r6,28(sp)
   551e8:	d9c00217 	ldw	r7,8(sp)
   551ec:	da000617 	ldw	r8,24(sp)
   551f0:	da400417 	ldw	r9,16(sp)
   551f4:	2280022e 	bgeu	r4,r10,55200 <__muldf3+0x56c>
   551f8:	00800074 	movhi	r2,1
   551fc:	88a3883a 	add	r17,r17,r2
   55200:	2004943a 	slli	r2,r4,16
   55204:	94bfffcc 	andi	r18,r18,65535
   55208:	4ce7883a 	add	r19,r9,r19
   5520c:	14a5883a 	add	r18,r2,r18
   55210:	9d29803a 	cmpltu	r20,r19,r20
   55214:	9565883a 	add	r18,r18,r21
   55218:	9505883a 	add	r2,r18,r20
   5521c:	99e7883a 	add	r19,r19,r7
   55220:	99cf803a 	cmpltu	r7,r19,r7
   55224:	e08b883a 	add	r5,fp,r2
   55228:	2008d43a 	srli	r4,r4,16
   5522c:	29ef883a 	add	r23,r5,r7
   55230:	1529803a 	cmpltu	r20,r2,r20
   55234:	956b803a 	cmpltu	r21,r18,r21
   55238:	b9cf803a 	cmpltu	r7,r23,r7
   5523c:	a564b03a 	or	r18,r20,r21
   55240:	2f39803a 	cmpltu	fp,r5,fp
   55244:	9125883a 	add	r18,r18,r4
   55248:	3f38b03a 	or	fp,r7,fp
   5524c:	9725883a 	add	r18,r18,fp
   55250:	9804927a 	slli	r2,r19,9
   55254:	9463883a 	add	r17,r18,r17
   55258:	d9000117 	ldw	r4,4(sp)
   5525c:	b820d5fa 	srli	r16,r23,23
   55260:	8822927a 	slli	r17,r17,9
   55264:	9826d5fa 	srli	r19,r19,23
   55268:	1104b03a 	or	r2,r2,r4
   5526c:	b82e927a 	slli	r23,r23,9
   55270:	1004c03a 	cmpne	r2,r2,zero
   55274:	8c20b03a 	or	r16,r17,r16
   55278:	14e6b03a 	or	r19,r2,r19
   5527c:	8080402c 	andhi	r2,r16,256
   55280:	9deeb03a 	or	r23,r19,r23
   55284:	10000726 	beq	r2,zero,552a4 <__muldf3+0x610>
   55288:	b804d07a 	srli	r2,r23,1
   5528c:	800697fa 	slli	r3,r16,31
   55290:	bdc0004c 	andi	r23,r23,1
   55294:	8020d07a 	srli	r16,r16,1
   55298:	b8aeb03a 	or	r23,r23,r2
   5529c:	b8eeb03a 	or	r23,r23,r3
   552a0:	4007883a 	mov	r3,r8
   552a4:	1900ffc4 	addi	r4,r3,1023
   552a8:	01004d0e 	bge	zero,r4,553e0 <__muldf3+0x74c>
   552ac:	b88001cc 	andi	r2,r23,7
   552b0:	10000726 	beq	r2,zero,552d0 <__muldf3+0x63c>
   552b4:	b94003cc 	andi	r5,r23,15
   552b8:	00800104 	movi	r2,4
   552bc:	28800426 	beq	r5,r2,552d0 <__muldf3+0x63c>
   552c0:	b885883a 	add	r2,r23,r2
   552c4:	15ef803a 	cmpltu	r23,r2,r23
   552c8:	85e1883a 	add	r16,r16,r23
   552cc:	102f883a 	mov	r23,r2
   552d0:	8080402c 	andhi	r2,r16,256
   552d4:	10000426 	beq	r2,zero,552e8 <__muldf3+0x654>
   552d8:	00bfc034 	movhi	r2,65280
   552dc:	10bfffc4 	addi	r2,r2,-1
   552e0:	19010004 	addi	r4,r3,1024
   552e4:	80a0703a 	and	r16,r16,r2
   552e8:	0081ff84 	movi	r2,2046
   552ec:	1100340e 	bge	r2,r4,553c0 <__muldf3+0x72c>
   552f0:	34c0004c 	andi	r19,r6,1
   552f4:	0101ffc4 	movi	r4,2047
   552f8:	0021883a 	mov	r16,zero
   552fc:	002f883a 	mov	r23,zero
   55300:	003ebe06 	br	54dfc <__alt_data_end+0xffff040c>
   55304:	8080022c 	andhi	r2,r16,8
   55308:	10000926 	beq	r2,zero,55330 <__muldf3+0x69c>
   5530c:	8880022c 	andhi	r2,r17,8
   55310:	1000071e 	bne	r2,zero,55330 <__muldf3+0x69c>
   55314:	00800434 	movhi	r2,16
   55318:	8c000234 	orhi	r16,r17,8
   5531c:	10bfffc4 	addi	r2,r2,-1
   55320:	b027883a 	mov	r19,r22
   55324:	80a0703a 	and	r16,r16,r2
   55328:	902f883a 	mov	r23,r18
   5532c:	003f1a06 	br	54f98 <__alt_data_end+0xffff05a8>
   55330:	00800434 	movhi	r2,16
   55334:	84000234 	orhi	r16,r16,8
   55338:	10bfffc4 	addi	r2,r2,-1
   5533c:	80a0703a 	and	r16,r16,r2
   55340:	003f1506 	br	54f98 <__alt_data_end+0xffff05a8>
   55344:	3009883a 	mov	r4,r6
   55348:	d9400215 	stw	r5,8(sp)
   5534c:	d9800715 	stw	r6,28(sp)
   55350:	da400415 	stw	r9,16(sp)
   55354:	da800315 	stw	r10,12(sp)
   55358:	00469200 	call	46920 <__clzsi2>
   5535c:	10c00804 	addi	r3,r2,32
   55360:	010009c4 	movi	r4,39
   55364:	d9400217 	ldw	r5,8(sp)
   55368:	d9800717 	ldw	r6,28(sp)
   5536c:	da400417 	ldw	r9,16(sp)
   55370:	da800317 	ldw	r10,12(sp)
   55374:	20fee20e 	bge	r4,r3,54f00 <__alt_data_end+0xffff0510>
   55378:	147ffe04 	addi	r17,r2,-8
   5537c:	9462983a 	sll	r17,r18,r17
   55380:	0025883a 	mov	r18,zero
   55384:	003ee506 	br	54f1c <__alt_data_end+0xffff052c>
   55388:	d9800715 	stw	r6,28(sp)
   5538c:	d9c00215 	stw	r7,8(sp)
   55390:	da400415 	stw	r9,16(sp)
   55394:	00469200 	call	46920 <__clzsi2>
   55398:	10c00804 	addi	r3,r2,32
   5539c:	010009c4 	movi	r4,39
   553a0:	d9800717 	ldw	r6,28(sp)
   553a4:	d9c00217 	ldw	r7,8(sp)
   553a8:	da400417 	ldw	r9,16(sp)
   553ac:	20feb40e 	bge	r4,r3,54e80 <__alt_data_end+0xffff0490>
   553b0:	143ffe04 	addi	r16,r2,-8
   553b4:	9420983a 	sll	r16,r18,r16
   553b8:	002f883a 	mov	r23,zero
   553bc:	003eb706 	br	54e9c <__alt_data_end+0xffff04ac>
   553c0:	8004977a 	slli	r2,r16,29
   553c4:	b82ed0fa 	srli	r23,r23,3
   553c8:	8020927a 	slli	r16,r16,9
   553cc:	2101ffcc 	andi	r4,r4,2047
   553d0:	15eeb03a 	or	r23,r2,r23
   553d4:	8020d33a 	srli	r16,r16,12
   553d8:	34c0004c 	andi	r19,r6,1
   553dc:	003e8706 	br	54dfc <__alt_data_end+0xffff040c>
   553e0:	00bf0084 	movi	r2,-1022
   553e4:	10c5c83a 	sub	r2,r2,r3
   553e8:	01000e04 	movi	r4,56
   553ec:	2080080e 	bge	r4,r2,55410 <__muldf3+0x77c>
   553f0:	34c0004c 	andi	r19,r6,1
   553f4:	0009883a 	mov	r4,zero
   553f8:	0021883a 	mov	r16,zero
   553fc:	002f883a 	mov	r23,zero
   55400:	003e7e06 	br	54dfc <__alt_data_end+0xffff040c>
   55404:	4007883a 	mov	r3,r8
   55408:	480d883a 	mov	r6,r9
   5540c:	003fa506 	br	552a4 <__alt_data_end+0xffff08b4>
   55410:	010007c4 	movi	r4,31
   55414:	20801816 	blt	r4,r2,55478 <__muldf3+0x7e4>
   55418:	18c10784 	addi	r3,r3,1054
   5541c:	80c8983a 	sll	r4,r16,r3
   55420:	b88ad83a 	srl	r5,r23,r2
   55424:	b8c6983a 	sll	r3,r23,r3
   55428:	80a0d83a 	srl	r16,r16,r2
   5542c:	2908b03a 	or	r4,r5,r4
   55430:	1804c03a 	cmpne	r2,r3,zero
   55434:	2088b03a 	or	r4,r4,r2
   55438:	208001cc 	andi	r2,r4,7
   5543c:	10000726 	beq	r2,zero,5545c <__muldf3+0x7c8>
   55440:	20c003cc 	andi	r3,r4,15
   55444:	00800104 	movi	r2,4
   55448:	18800426 	beq	r3,r2,5545c <__muldf3+0x7c8>
   5544c:	20c00104 	addi	r3,r4,4
   55450:	1905803a 	cmpltu	r2,r3,r4
   55454:	80a1883a 	add	r16,r16,r2
   55458:	1809883a 	mov	r4,r3
   5545c:	8080202c 	andhi	r2,r16,128
   55460:	10001b26 	beq	r2,zero,554d0 <__muldf3+0x83c>
   55464:	34c0004c 	andi	r19,r6,1
   55468:	01000044 	movi	r4,1
   5546c:	0021883a 	mov	r16,zero
   55470:	002f883a 	mov	r23,zero
   55474:	003e6106 	br	54dfc <__alt_data_end+0xffff040c>
   55478:	013ef884 	movi	r4,-1054
   5547c:	20c9c83a 	sub	r4,r4,r3
   55480:	01400804 	movi	r5,32
   55484:	8108d83a 	srl	r4,r16,r4
   55488:	11401526 	beq	r2,r5,554e0 <__muldf3+0x84c>
   5548c:	18c10f84 	addi	r3,r3,1086
   55490:	80e0983a 	sll	r16,r16,r3
   55494:	85eeb03a 	or	r23,r16,r23
   55498:	b804c03a 	cmpne	r2,r23,zero
   5549c:	1108b03a 	or	r4,r2,r4
   554a0:	20c001cc 	andi	r3,r4,7
   554a4:	1800061e 	bne	r3,zero,554c0 <__muldf3+0x82c>
   554a8:	0021883a 	mov	r16,zero
   554ac:	202ed0fa 	srli	r23,r4,3
   554b0:	34c0004c 	andi	r19,r6,1
   554b4:	0009883a 	mov	r4,zero
   554b8:	b8eeb03a 	or	r23,r23,r3
   554bc:	003e4f06 	br	54dfc <__alt_data_end+0xffff040c>
   554c0:	20c003cc 	andi	r3,r4,15
   554c4:	00800104 	movi	r2,4
   554c8:	0021883a 	mov	r16,zero
   554cc:	18bfdf1e 	bne	r3,r2,5544c <__alt_data_end+0xffff0a5c>
   554d0:	8004927a 	slli	r2,r16,9
   554d4:	8006977a 	slli	r3,r16,29
   554d8:	1020d33a 	srli	r16,r2,12
   554dc:	003ff306 	br	554ac <__alt_data_end+0xffff0abc>
   554e0:	0021883a 	mov	r16,zero
   554e4:	003feb06 	br	55494 <__alt_data_end+0xffff0aa4>
   554e8:	00800434 	movhi	r2,16
   554ec:	84000234 	orhi	r16,r16,8
   554f0:	10bfffc4 	addi	r2,r2,-1
   554f4:	4cc0004c 	andi	r19,r9,1
   554f8:	80a0703a 	and	r16,r16,r2
   554fc:	003ea606 	br	54f98 <__alt_data_end+0xffff05a8>

00055500 <__subdf3>:
   55500:	00c00434 	movhi	r3,16
   55504:	18ffffc4 	addi	r3,r3,-1
   55508:	defffb04 	addi	sp,sp,-20
   5550c:	28d2703a 	and	r9,r5,r3
   55510:	3814d53a 	srli	r10,r7,20
   55514:	38c6703a 	and	r3,r7,r3
   55518:	3004d77a 	srli	r2,r6,29
   5551c:	dc800215 	stw	r18,8(sp)
   55520:	dc000015 	stw	r16,0(sp)
   55524:	2824d7fa 	srli	r18,r5,31
   55528:	2820d53a 	srli	r16,r5,20
   5552c:	481290fa 	slli	r9,r9,3
   55530:	200ad77a 	srli	r5,r4,29
   55534:	180690fa 	slli	r3,r3,3
   55538:	dc400115 	stw	r17,4(sp)
   5553c:	dfc00415 	stw	ra,16(sp)
   55540:	202290fa 	slli	r17,r4,3
   55544:	dcc00315 	stw	r19,12(sp)
   55548:	5281ffcc 	andi	r10,r10,2047
   5554c:	0101ffc4 	movi	r4,2047
   55550:	9011883a 	mov	r8,r18
   55554:	8401ffcc 	andi	r16,r16,2047
   55558:	94803fcc 	andi	r18,r18,255
   5555c:	494ab03a 	or	r5,r9,r5
   55560:	380ed7fa 	srli	r7,r7,31
   55564:	1886b03a 	or	r3,r3,r2
   55568:	300c90fa 	slli	r6,r6,3
   5556c:	51009026 	beq	r10,r4,557b0 <__subdf3+0x2b0>
   55570:	39c0005c 	xori	r7,r7,1
   55574:	8285c83a 	sub	r2,r16,r10
   55578:	91c06f26 	beq	r18,r7,55738 <__subdf3+0x238>
   5557c:	0080b10e 	bge	zero,r2,55844 <__subdf3+0x344>
   55580:	50002a1e 	bne	r10,zero,5562c <__subdf3+0x12c>
   55584:	1988b03a 	or	r4,r3,r6
   55588:	2000941e 	bne	r4,zero,557dc <__subdf3+0x2dc>
   5558c:	888001cc 	andi	r2,r17,7
   55590:	10005b26 	beq	r2,zero,55700 <__subdf3+0x200>
   55594:	88c003cc 	andi	r3,r17,15
   55598:	00800104 	movi	r2,4
   5559c:	18805826 	beq	r3,r2,55700 <__subdf3+0x200>
   555a0:	88c00104 	addi	r3,r17,4
   555a4:	1c63803a 	cmpltu	r17,r3,r17
   555a8:	2c4b883a 	add	r5,r5,r17
   555ac:	2880202c 	andhi	r2,r5,128
   555b0:	9200004c 	andi	r8,r18,1
   555b4:	1823883a 	mov	r17,r3
   555b8:	10005426 	beq	r2,zero,5570c <__subdf3+0x20c>
   555bc:	84000044 	addi	r16,r16,1
   555c0:	0081ffc4 	movi	r2,2047
   555c4:	8080bf26 	beq	r16,r2,558c4 <__subdf3+0x3c4>
   555c8:	013fe034 	movhi	r4,65408
   555cc:	213fffc4 	addi	r4,r4,-1
   555d0:	290a703a 	and	r5,r5,r4
   555d4:	2804977a 	slli	r2,r5,29
   555d8:	280a927a 	slli	r5,r5,9
   555dc:	8822d0fa 	srli	r17,r17,3
   555e0:	8401ffcc 	andi	r16,r16,2047
   555e4:	2808d33a 	srli	r4,r5,12
   555e8:	1444b03a 	or	r2,r2,r17
   555ec:	8401ffcc 	andi	r16,r16,2047
   555f0:	800a953a 	slli	r5,r16,20
   555f4:	40c03fcc 	andi	r3,r8,255
   555f8:	04000434 	movhi	r16,16
   555fc:	180697fa 	slli	r3,r3,31
   55600:	843fffc4 	addi	r16,r16,-1
   55604:	2420703a 	and	r16,r4,r16
   55608:	8160b03a 	or	r16,r16,r5
   5560c:	80c6b03a 	or	r3,r16,r3
   55610:	dfc00417 	ldw	ra,16(sp)
   55614:	dcc00317 	ldw	r19,12(sp)
   55618:	dc800217 	ldw	r18,8(sp)
   5561c:	dc400117 	ldw	r17,4(sp)
   55620:	dc000017 	ldw	r16,0(sp)
   55624:	dec00504 	addi	sp,sp,20
   55628:	f800283a 	ret
   5562c:	0101ffc4 	movi	r4,2047
   55630:	813fd626 	beq	r16,r4,5558c <__alt_data_end+0xffff0b9c>
   55634:	18c02034 	orhi	r3,r3,128
   55638:	01000e04 	movi	r4,56
   5563c:	2080a416 	blt	r4,r2,558d0 <__subdf3+0x3d0>
   55640:	010007c4 	movi	r4,31
   55644:	2080c716 	blt	r4,r2,55964 <__subdf3+0x464>
   55648:	01000804 	movi	r4,32
   5564c:	2089c83a 	sub	r4,r4,r2
   55650:	1910983a 	sll	r8,r3,r4
   55654:	308ed83a 	srl	r7,r6,r2
   55658:	3108983a 	sll	r4,r6,r4
   5565c:	1884d83a 	srl	r2,r3,r2
   55660:	41ccb03a 	or	r6,r8,r7
   55664:	2008c03a 	cmpne	r4,r4,zero
   55668:	310cb03a 	or	r6,r6,r4
   5566c:	898dc83a 	sub	r6,r17,r6
   55670:	89a3803a 	cmpltu	r17,r17,r6
   55674:	288bc83a 	sub	r5,r5,r2
   55678:	2c4bc83a 	sub	r5,r5,r17
   5567c:	3023883a 	mov	r17,r6
   55680:	2880202c 	andhi	r2,r5,128
   55684:	10006b26 	beq	r2,zero,55834 <__subdf3+0x334>
   55688:	04c02034 	movhi	r19,128
   5568c:	9cffffc4 	addi	r19,r19,-1
   55690:	2ce6703a 	and	r19,r5,r19
   55694:	98007c26 	beq	r19,zero,55888 <__subdf3+0x388>
   55698:	9809883a 	mov	r4,r19
   5569c:	00469200 	call	46920 <__clzsi2>
   556a0:	10fffe04 	addi	r3,r2,-8
   556a4:	010007c4 	movi	r4,31
   556a8:	20c07d16 	blt	r4,r3,558a0 <__subdf3+0x3a0>
   556ac:	01400a04 	movi	r5,40
   556b0:	2885c83a 	sub	r2,r5,r2
   556b4:	888ad83a 	srl	r5,r17,r2
   556b8:	98e6983a 	sll	r19,r19,r3
   556bc:	88e2983a 	sll	r17,r17,r3
   556c0:	2ce6b03a 	or	r19,r5,r19
   556c4:	1c007a16 	blt	r3,r16,558b0 <__subdf3+0x3b0>
   556c8:	1c21c83a 	sub	r16,r3,r16
   556cc:	81400044 	addi	r5,r16,1
   556d0:	00c007c4 	movi	r3,31
   556d4:	19409616 	blt	r3,r5,55930 <__subdf3+0x430>
   556d8:	1c21c83a 	sub	r16,r3,r16
   556dc:	8c08983a 	sll	r4,r17,r16
   556e0:	8946d83a 	srl	r3,r17,r5
   556e4:	9c20983a 	sll	r16,r19,r16
   556e8:	2008c03a 	cmpne	r4,r4,zero
   556ec:	994ad83a 	srl	r5,r19,r5
   556f0:	1c06b03a 	or	r3,r3,r16
   556f4:	1922b03a 	or	r17,r3,r4
   556f8:	0021883a 	mov	r16,zero
   556fc:	003fa306 	br	5558c <__alt_data_end+0xffff0b9c>
   55700:	2880202c 	andhi	r2,r5,128
   55704:	9200004c 	andi	r8,r18,1
   55708:	103fac1e 	bne	r2,zero,555bc <__alt_data_end+0xffff0bcc>
   5570c:	2804977a 	slli	r2,r5,29
   55710:	8822d0fa 	srli	r17,r17,3
   55714:	00c1ffc4 	movi	r3,2047
   55718:	280ad0fa 	srli	r5,r5,3
   5571c:	1444b03a 	or	r2,r2,r17
   55720:	80c02726 	beq	r16,r3,557c0 <__subdf3+0x2c0>
   55724:	01000434 	movhi	r4,16
   55728:	213fffc4 	addi	r4,r4,-1
   5572c:	80e0703a 	and	r16,r16,r3
   55730:	2908703a 	and	r4,r5,r4
   55734:	003fad06 	br	555ec <__alt_data_end+0xffff0bfc>
   55738:	0080690e 	bge	zero,r2,558e0 <__subdf3+0x3e0>
   5573c:	50002f26 	beq	r10,zero,557fc <__subdf3+0x2fc>
   55740:	0101ffc4 	movi	r4,2047
   55744:	813f9126 	beq	r16,r4,5558c <__alt_data_end+0xffff0b9c>
   55748:	18c02034 	orhi	r3,r3,128
   5574c:	01000e04 	movi	r4,56
   55750:	2080b00e 	bge	r4,r2,55a14 <__subdf3+0x514>
   55754:	198cb03a 	or	r6,r3,r6
   55758:	300ec03a 	cmpne	r7,r6,zero
   5575c:	0005883a 	mov	r2,zero
   55760:	3c4f883a 	add	r7,r7,r17
   55764:	3c63803a 	cmpltu	r17,r7,r17
   55768:	114b883a 	add	r5,r2,r5
   5576c:	2c4b883a 	add	r5,r5,r17
   55770:	3823883a 	mov	r17,r7
   55774:	2880202c 	andhi	r2,r5,128
   55778:	10002e26 	beq	r2,zero,55834 <__subdf3+0x334>
   5577c:	84000044 	addi	r16,r16,1
   55780:	0081ffc4 	movi	r2,2047
   55784:	8080de26 	beq	r16,r2,55b00 <__subdf3+0x600>
   55788:	00bfe034 	movhi	r2,65408
   5578c:	10bfffc4 	addi	r2,r2,-1
   55790:	288a703a 	and	r5,r5,r2
   55794:	880cd07a 	srli	r6,r17,1
   55798:	280897fa 	slli	r4,r5,31
   5579c:	88c0004c 	andi	r3,r17,1
   557a0:	30e2b03a 	or	r17,r6,r3
   557a4:	280ad07a 	srli	r5,r5,1
   557a8:	8922b03a 	or	r17,r17,r4
   557ac:	003f7706 	br	5558c <__alt_data_end+0xffff0b9c>
   557b0:	1984b03a 	or	r2,r3,r6
   557b4:	103f6e26 	beq	r2,zero,55570 <__alt_data_end+0xffff0b80>
   557b8:	39c03fcc 	andi	r7,r7,255
   557bc:	003f6d06 	br	55574 <__alt_data_end+0xffff0b84>
   557c0:	1146b03a 	or	r3,r2,r5
   557c4:	18003f26 	beq	r3,zero,558c4 <__subdf3+0x3c4>
   557c8:	00c00434 	movhi	r3,16
   557cc:	29000234 	orhi	r4,r5,8
   557d0:	18ffffc4 	addi	r3,r3,-1
   557d4:	20c8703a 	and	r4,r4,r3
   557d8:	003f8406 	br	555ec <__alt_data_end+0xffff0bfc>
   557dc:	10bfffc4 	addi	r2,r2,-1
   557e0:	1000501e 	bne	r2,zero,55924 <__subdf3+0x424>
   557e4:	898fc83a 	sub	r7,r17,r6
   557e8:	89e3803a 	cmpltu	r17,r17,r7
   557ec:	28cbc83a 	sub	r5,r5,r3
   557f0:	2c4bc83a 	sub	r5,r5,r17
   557f4:	3823883a 	mov	r17,r7
   557f8:	003fa106 	br	55680 <__alt_data_end+0xffff0c90>
   557fc:	1988b03a 	or	r4,r3,r6
   55800:	203f6226 	beq	r4,zero,5558c <__alt_data_end+0xffff0b9c>
   55804:	10bfffc4 	addi	r2,r2,-1
   55808:	10009b1e 	bne	r2,zero,55a78 <__subdf3+0x578>
   5580c:	344d883a 	add	r6,r6,r17
   55810:	3463803a 	cmpltu	r17,r6,r17
   55814:	194b883a 	add	r5,r3,r5
   55818:	2c4b883a 	add	r5,r5,r17
   5581c:	3023883a 	mov	r17,r6
   55820:	003fd406 	br	55774 <__alt_data_end+0xffff0d84>
   55824:	1106b03a 	or	r3,r2,r4
   55828:	1800b426 	beq	r3,zero,55afc <__subdf3+0x5fc>
   5582c:	100b883a 	mov	r5,r2
   55830:	2023883a 	mov	r17,r4
   55834:	888001cc 	andi	r2,r17,7
   55838:	103f561e 	bne	r2,zero,55594 <__alt_data_end+0xffff0ba4>
   5583c:	9200004c 	andi	r8,r18,1
   55840:	003fb206 	br	5570c <__alt_data_end+0xffff0d1c>
   55844:	1000531e 	bne	r2,zero,55994 <__subdf3+0x494>
   55848:	80800044 	addi	r2,r16,1
   5584c:	1081ffcc 	andi	r2,r2,2047
   55850:	01000044 	movi	r4,1
   55854:	2080a00e 	bge	r4,r2,55ad8 <__subdf3+0x5d8>
   55858:	8985c83a 	sub	r2,r17,r6
   5585c:	8889803a 	cmpltu	r4,r17,r2
   55860:	28e7c83a 	sub	r19,r5,r3
   55864:	9927c83a 	sub	r19,r19,r4
   55868:	9900202c 	andhi	r4,r19,128
   5586c:	20006226 	beq	r4,zero,559f8 <__subdf3+0x4f8>
   55870:	3463c83a 	sub	r17,r6,r17
   55874:	194bc83a 	sub	r5,r3,r5
   55878:	344d803a 	cmpltu	r6,r6,r17
   5587c:	29a7c83a 	sub	r19,r5,r6
   55880:	3825883a 	mov	r18,r7
   55884:	983f841e 	bne	r19,zero,55698 <__alt_data_end+0xffff0ca8>
   55888:	8809883a 	mov	r4,r17
   5588c:	00469200 	call	46920 <__clzsi2>
   55890:	10800804 	addi	r2,r2,32
   55894:	10fffe04 	addi	r3,r2,-8
   55898:	010007c4 	movi	r4,31
   5589c:	20ff830e 	bge	r4,r3,556ac <__alt_data_end+0xffff0cbc>
   558a0:	14fff604 	addi	r19,r2,-40
   558a4:	8ce6983a 	sll	r19,r17,r19
   558a8:	0023883a 	mov	r17,zero
   558ac:	1c3f860e 	bge	r3,r16,556c8 <__alt_data_end+0xffff0cd8>
   558b0:	017fe034 	movhi	r5,65408
   558b4:	297fffc4 	addi	r5,r5,-1
   558b8:	80e1c83a 	sub	r16,r16,r3
   558bc:	994a703a 	and	r5,r19,r5
   558c0:	003f3206 	br	5558c <__alt_data_end+0xffff0b9c>
   558c4:	0009883a 	mov	r4,zero
   558c8:	0005883a 	mov	r2,zero
   558cc:	003f4706 	br	555ec <__alt_data_end+0xffff0bfc>
   558d0:	198cb03a 	or	r6,r3,r6
   558d4:	300cc03a 	cmpne	r6,r6,zero
   558d8:	0005883a 	mov	r2,zero
   558dc:	003f6306 	br	5566c <__alt_data_end+0xffff0c7c>
   558e0:	10009d1e 	bne	r2,zero,55b58 <__subdf3+0x658>
   558e4:	81c00044 	addi	r7,r16,1
   558e8:	3881ffcc 	andi	r2,r7,2047
   558ec:	02400044 	movi	r9,1
   558f0:	4880680e 	bge	r9,r2,55a94 <__subdf3+0x594>
   558f4:	0081ffc4 	movi	r2,2047
   558f8:	3880ae26 	beq	r7,r2,55bb4 <__subdf3+0x6b4>
   558fc:	344d883a 	add	r6,r6,r17
   55900:	3463803a 	cmpltu	r17,r6,r17
   55904:	194b883a 	add	r5,r3,r5
   55908:	2c4b883a 	add	r5,r5,r17
   5590c:	282297fa 	slli	r17,r5,31
   55910:	300cd07a 	srli	r6,r6,1
   55914:	280ad07a 	srli	r5,r5,1
   55918:	3821883a 	mov	r16,r7
   5591c:	89a2b03a 	or	r17,r17,r6
   55920:	003f1a06 	br	5558c <__alt_data_end+0xffff0b9c>
   55924:	0101ffc4 	movi	r4,2047
   55928:	813f431e 	bne	r16,r4,55638 <__alt_data_end+0xffff0c48>
   5592c:	003f1706 	br	5558c <__alt_data_end+0xffff0b9c>
   55930:	80bff844 	addi	r2,r16,-31
   55934:	00c00804 	movi	r3,32
   55938:	9884d83a 	srl	r2,r19,r2
   5593c:	28c05126 	beq	r5,r3,55a84 <__subdf3+0x584>
   55940:	00c00fc4 	movi	r3,63
   55944:	1c21c83a 	sub	r16,r3,r16
   55948:	9c26983a 	sll	r19,r19,r16
   5594c:	9c62b03a 	or	r17,r19,r17
   55950:	8822c03a 	cmpne	r17,r17,zero
   55954:	88a2b03a 	or	r17,r17,r2
   55958:	000b883a 	mov	r5,zero
   5595c:	0021883a 	mov	r16,zero
   55960:	003fb406 	br	55834 <__alt_data_end+0xffff0e44>
   55964:	113ff804 	addi	r4,r2,-32
   55968:	01c00804 	movi	r7,32
   5596c:	1908d83a 	srl	r4,r3,r4
   55970:	11c04626 	beq	r2,r7,55a8c <__subdf3+0x58c>
   55974:	01c01004 	movi	r7,64
   55978:	3885c83a 	sub	r2,r7,r2
   5597c:	1884983a 	sll	r2,r3,r2
   55980:	118cb03a 	or	r6,r2,r6
   55984:	300cc03a 	cmpne	r6,r6,zero
   55988:	310cb03a 	or	r6,r6,r4
   5598c:	0005883a 	mov	r2,zero
   55990:	003f3606 	br	5566c <__alt_data_end+0xffff0c7c>
   55994:	80002b26 	beq	r16,zero,55a44 <__subdf3+0x544>
   55998:	0101ffc4 	movi	r4,2047
   5599c:	51006926 	beq	r10,r4,55b44 <__subdf3+0x644>
   559a0:	0085c83a 	sub	r2,zero,r2
   559a4:	29402034 	orhi	r5,r5,128
   559a8:	01000e04 	movi	r4,56
   559ac:	20807d16 	blt	r4,r2,55ba4 <__subdf3+0x6a4>
   559b0:	010007c4 	movi	r4,31
   559b4:	2080d916 	blt	r4,r2,55d1c <__subdf3+0x81c>
   559b8:	01000804 	movi	r4,32
   559bc:	2089c83a 	sub	r4,r4,r2
   559c0:	2912983a 	sll	r9,r5,r4
   559c4:	8890d83a 	srl	r8,r17,r2
   559c8:	8908983a 	sll	r4,r17,r4
   559cc:	2884d83a 	srl	r2,r5,r2
   559d0:	4a22b03a 	or	r17,r9,r8
   559d4:	2008c03a 	cmpne	r4,r4,zero
   559d8:	8922b03a 	or	r17,r17,r4
   559dc:	3463c83a 	sub	r17,r6,r17
   559e0:	1885c83a 	sub	r2,r3,r2
   559e4:	344d803a 	cmpltu	r6,r6,r17
   559e8:	118bc83a 	sub	r5,r2,r6
   559ec:	5021883a 	mov	r16,r10
   559f0:	3825883a 	mov	r18,r7
   559f4:	003f2206 	br	55680 <__alt_data_end+0xffff0c90>
   559f8:	9886b03a 	or	r3,r19,r2
   559fc:	18001c1e 	bne	r3,zero,55a70 <__subdf3+0x570>
   55a00:	0011883a 	mov	r8,zero
   55a04:	000b883a 	mov	r5,zero
   55a08:	0023883a 	mov	r17,zero
   55a0c:	0021883a 	mov	r16,zero
   55a10:	003f3e06 	br	5570c <__alt_data_end+0xffff0d1c>
   55a14:	010007c4 	movi	r4,31
   55a18:	20803c16 	blt	r4,r2,55b0c <__subdf3+0x60c>
   55a1c:	01000804 	movi	r4,32
   55a20:	2089c83a 	sub	r4,r4,r2
   55a24:	1912983a 	sll	r9,r3,r4
   55a28:	308ed83a 	srl	r7,r6,r2
   55a2c:	3108983a 	sll	r4,r6,r4
   55a30:	1884d83a 	srl	r2,r3,r2
   55a34:	49ceb03a 	or	r7,r9,r7
   55a38:	2008c03a 	cmpne	r4,r4,zero
   55a3c:	390eb03a 	or	r7,r7,r4
   55a40:	003f4706 	br	55760 <__alt_data_end+0xffff0d70>
   55a44:	2c48b03a 	or	r4,r5,r17
   55a48:	20003e26 	beq	r4,zero,55b44 <__subdf3+0x644>
   55a4c:	0084303a 	nor	r2,zero,r2
   55a50:	10003a1e 	bne	r2,zero,55b3c <__subdf3+0x63c>
   55a54:	3463c83a 	sub	r17,r6,r17
   55a58:	194bc83a 	sub	r5,r3,r5
   55a5c:	344d803a 	cmpltu	r6,r6,r17
   55a60:	298bc83a 	sub	r5,r5,r6
   55a64:	5021883a 	mov	r16,r10
   55a68:	3825883a 	mov	r18,r7
   55a6c:	003f0406 	br	55680 <__alt_data_end+0xffff0c90>
   55a70:	1023883a 	mov	r17,r2
   55a74:	003f0706 	br	55694 <__alt_data_end+0xffff0ca4>
   55a78:	0101ffc4 	movi	r4,2047
   55a7c:	813f331e 	bne	r16,r4,5574c <__alt_data_end+0xffff0d5c>
   55a80:	003ec206 	br	5558c <__alt_data_end+0xffff0b9c>
   55a84:	0027883a 	mov	r19,zero
   55a88:	003fb006 	br	5594c <__alt_data_end+0xffff0f5c>
   55a8c:	0005883a 	mov	r2,zero
   55a90:	003fbb06 	br	55980 <__alt_data_end+0xffff0f90>
   55a94:	2c44b03a 	or	r2,r5,r17
   55a98:	80008b1e 	bne	r16,zero,55cc8 <__subdf3+0x7c8>
   55a9c:	1000b526 	beq	r2,zero,55d74 <__subdf3+0x874>
   55aa0:	1984b03a 	or	r2,r3,r6
   55aa4:	103eb926 	beq	r2,zero,5558c <__alt_data_end+0xffff0b9c>
   55aa8:	3449883a 	add	r4,r6,r17
   55aac:	2463803a 	cmpltu	r17,r4,r17
   55ab0:	194b883a 	add	r5,r3,r5
   55ab4:	2c4b883a 	add	r5,r5,r17
   55ab8:	2880202c 	andhi	r2,r5,128
   55abc:	2023883a 	mov	r17,r4
   55ac0:	103f5c26 	beq	r2,zero,55834 <__alt_data_end+0xffff0e44>
   55ac4:	00bfe034 	movhi	r2,65408
   55ac8:	10bfffc4 	addi	r2,r2,-1
   55acc:	4821883a 	mov	r16,r9
   55ad0:	288a703a 	and	r5,r5,r2
   55ad4:	003ead06 	br	5558c <__alt_data_end+0xffff0b9c>
   55ad8:	2c44b03a 	or	r2,r5,r17
   55adc:	8000291e 	bne	r16,zero,55b84 <__subdf3+0x684>
   55ae0:	10004f1e 	bne	r2,zero,55c20 <__subdf3+0x720>
   55ae4:	1984b03a 	or	r2,r3,r6
   55ae8:	10000426 	beq	r2,zero,55afc <__subdf3+0x5fc>
   55aec:	180b883a 	mov	r5,r3
   55af0:	3023883a 	mov	r17,r6
   55af4:	3825883a 	mov	r18,r7
   55af8:	003ea406 	br	5558c <__alt_data_end+0xffff0b9c>
   55afc:	0011883a 	mov	r8,zero
   55b00:	000b883a 	mov	r5,zero
   55b04:	0023883a 	mov	r17,zero
   55b08:	003f0006 	br	5570c <__alt_data_end+0xffff0d1c>
   55b0c:	11fff804 	addi	r7,r2,-32
   55b10:	19c8d83a 	srl	r4,r3,r7
   55b14:	01c00804 	movi	r7,32
   55b18:	11c07e26 	beq	r2,r7,55d14 <__subdf3+0x814>
   55b1c:	01c01004 	movi	r7,64
   55b20:	3885c83a 	sub	r2,r7,r2
   55b24:	1884983a 	sll	r2,r3,r2
   55b28:	118cb03a 	or	r6,r2,r6
   55b2c:	300ec03a 	cmpne	r7,r6,zero
   55b30:	390eb03a 	or	r7,r7,r4
   55b34:	0005883a 	mov	r2,zero
   55b38:	003f0906 	br	55760 <__alt_data_end+0xffff0d70>
   55b3c:	0101ffc4 	movi	r4,2047
   55b40:	513f991e 	bne	r10,r4,559a8 <__alt_data_end+0xffff0fb8>
   55b44:	180b883a 	mov	r5,r3
   55b48:	3023883a 	mov	r17,r6
   55b4c:	5021883a 	mov	r16,r10
   55b50:	3825883a 	mov	r18,r7
   55b54:	003e8d06 	br	5558c <__alt_data_end+0xffff0b9c>
   55b58:	80001a1e 	bne	r16,zero,55bc4 <__subdf3+0x6c4>
   55b5c:	2c48b03a 	or	r4,r5,r17
   55b60:	20005526 	beq	r4,zero,55cb8 <__subdf3+0x7b8>
   55b64:	0084303a 	nor	r2,zero,r2
   55b68:	1000511e 	bne	r2,zero,55cb0 <__subdf3+0x7b0>
   55b6c:	89a3883a 	add	r17,r17,r6
   55b70:	194b883a 	add	r5,r3,r5
   55b74:	898d803a 	cmpltu	r6,r17,r6
   55b78:	298b883a 	add	r5,r5,r6
   55b7c:	5021883a 	mov	r16,r10
   55b80:	003efc06 	br	55774 <__alt_data_end+0xffff0d84>
   55b84:	1000341e 	bne	r2,zero,55c58 <__subdf3+0x758>
   55b88:	1984b03a 	or	r2,r3,r6
   55b8c:	10006f26 	beq	r2,zero,55d4c <__subdf3+0x84c>
   55b90:	180b883a 	mov	r5,r3
   55b94:	3023883a 	mov	r17,r6
   55b98:	3825883a 	mov	r18,r7
   55b9c:	0401ffc4 	movi	r16,2047
   55ba0:	003e7a06 	br	5558c <__alt_data_end+0xffff0b9c>
   55ba4:	2c62b03a 	or	r17,r5,r17
   55ba8:	8822c03a 	cmpne	r17,r17,zero
   55bac:	0005883a 	mov	r2,zero
   55bb0:	003f8a06 	br	559dc <__alt_data_end+0xffff0fec>
   55bb4:	3821883a 	mov	r16,r7
   55bb8:	000b883a 	mov	r5,zero
   55bbc:	0023883a 	mov	r17,zero
   55bc0:	003ed206 	br	5570c <__alt_data_end+0xffff0d1c>
   55bc4:	0101ffc4 	movi	r4,2047
   55bc8:	51003b26 	beq	r10,r4,55cb8 <__subdf3+0x7b8>
   55bcc:	0085c83a 	sub	r2,zero,r2
   55bd0:	29402034 	orhi	r5,r5,128
   55bd4:	01000e04 	movi	r4,56
   55bd8:	20806216 	blt	r4,r2,55d64 <__subdf3+0x864>
   55bdc:	010007c4 	movi	r4,31
   55be0:	20806b16 	blt	r4,r2,55d90 <__subdf3+0x890>
   55be4:	01000804 	movi	r4,32
   55be8:	2089c83a 	sub	r4,r4,r2
   55bec:	2912983a 	sll	r9,r5,r4
   55bf0:	888ed83a 	srl	r7,r17,r2
   55bf4:	8908983a 	sll	r4,r17,r4
   55bf8:	2884d83a 	srl	r2,r5,r2
   55bfc:	49e2b03a 	or	r17,r9,r7
   55c00:	2008c03a 	cmpne	r4,r4,zero
   55c04:	8922b03a 	or	r17,r17,r4
   55c08:	89a3883a 	add	r17,r17,r6
   55c0c:	10c5883a 	add	r2,r2,r3
   55c10:	898d803a 	cmpltu	r6,r17,r6
   55c14:	118b883a 	add	r5,r2,r6
   55c18:	5021883a 	mov	r16,r10
   55c1c:	003ed506 	br	55774 <__alt_data_end+0xffff0d84>
   55c20:	1984b03a 	or	r2,r3,r6
   55c24:	103e5926 	beq	r2,zero,5558c <__alt_data_end+0xffff0b9c>
   55c28:	8989c83a 	sub	r4,r17,r6
   55c2c:	8911803a 	cmpltu	r8,r17,r4
   55c30:	28c5c83a 	sub	r2,r5,r3
   55c34:	1205c83a 	sub	r2,r2,r8
   55c38:	1200202c 	andhi	r8,r2,128
   55c3c:	403ef926 	beq	r8,zero,55824 <__alt_data_end+0xffff0e34>
   55c40:	3463c83a 	sub	r17,r6,r17
   55c44:	194bc83a 	sub	r5,r3,r5
   55c48:	344d803a 	cmpltu	r6,r6,r17
   55c4c:	298bc83a 	sub	r5,r5,r6
   55c50:	3825883a 	mov	r18,r7
   55c54:	003e4d06 	br	5558c <__alt_data_end+0xffff0b9c>
   55c58:	1984b03a 	or	r2,r3,r6
   55c5c:	10002b26 	beq	r2,zero,55d0c <__subdf3+0x80c>
   55c60:	2808d0fa 	srli	r4,r5,3
   55c64:	8822d0fa 	srli	r17,r17,3
   55c68:	280a977a 	slli	r5,r5,29
   55c6c:	2080022c 	andhi	r2,r4,8
   55c70:	2c62b03a 	or	r17,r5,r17
   55c74:	10000826 	beq	r2,zero,55c98 <__subdf3+0x798>
   55c78:	1810d0fa 	srli	r8,r3,3
   55c7c:	4080022c 	andhi	r2,r8,8
   55c80:	1000051e 	bne	r2,zero,55c98 <__subdf3+0x798>
   55c84:	300cd0fa 	srli	r6,r6,3
   55c88:	1804977a 	slli	r2,r3,29
   55c8c:	4009883a 	mov	r4,r8
   55c90:	3825883a 	mov	r18,r7
   55c94:	11a2b03a 	or	r17,r2,r6
   55c98:	880ad77a 	srli	r5,r17,29
   55c9c:	200890fa 	slli	r4,r4,3
   55ca0:	882290fa 	slli	r17,r17,3
   55ca4:	0401ffc4 	movi	r16,2047
   55ca8:	290ab03a 	or	r5,r5,r4
   55cac:	003e3706 	br	5558c <__alt_data_end+0xffff0b9c>
   55cb0:	0101ffc4 	movi	r4,2047
   55cb4:	513fc71e 	bne	r10,r4,55bd4 <__alt_data_end+0xffff11e4>
   55cb8:	180b883a 	mov	r5,r3
   55cbc:	3023883a 	mov	r17,r6
   55cc0:	5021883a 	mov	r16,r10
   55cc4:	003e3106 	br	5558c <__alt_data_end+0xffff0b9c>
   55cc8:	10002d26 	beq	r2,zero,55d80 <__subdf3+0x880>
   55ccc:	1984b03a 	or	r2,r3,r6
   55cd0:	10000e26 	beq	r2,zero,55d0c <__subdf3+0x80c>
   55cd4:	2808d0fa 	srli	r4,r5,3
   55cd8:	8822d0fa 	srli	r17,r17,3
   55cdc:	280a977a 	slli	r5,r5,29
   55ce0:	2080022c 	andhi	r2,r4,8
   55ce4:	2c62b03a 	or	r17,r5,r17
   55ce8:	103feb26 	beq	r2,zero,55c98 <__alt_data_end+0xffff12a8>
   55cec:	180ed0fa 	srli	r7,r3,3
   55cf0:	3880022c 	andhi	r2,r7,8
   55cf4:	103fe81e 	bne	r2,zero,55c98 <__alt_data_end+0xffff12a8>
   55cf8:	300cd0fa 	srli	r6,r6,3
   55cfc:	1804977a 	slli	r2,r3,29
   55d00:	3809883a 	mov	r4,r7
   55d04:	11a2b03a 	or	r17,r2,r6
   55d08:	003fe306 	br	55c98 <__alt_data_end+0xffff12a8>
   55d0c:	0401ffc4 	movi	r16,2047
   55d10:	003e1e06 	br	5558c <__alt_data_end+0xffff0b9c>
   55d14:	0005883a 	mov	r2,zero
   55d18:	003f8306 	br	55b28 <__alt_data_end+0xffff1138>
   55d1c:	113ff804 	addi	r4,r2,-32
   55d20:	02000804 	movi	r8,32
   55d24:	2908d83a 	srl	r4,r5,r4
   55d28:	12002526 	beq	r2,r8,55dc0 <__subdf3+0x8c0>
   55d2c:	02001004 	movi	r8,64
   55d30:	4085c83a 	sub	r2,r8,r2
   55d34:	288a983a 	sll	r5,r5,r2
   55d38:	2c62b03a 	or	r17,r5,r17
   55d3c:	8822c03a 	cmpne	r17,r17,zero
   55d40:	8922b03a 	or	r17,r17,r4
   55d44:	0005883a 	mov	r2,zero
   55d48:	003f2406 	br	559dc <__alt_data_end+0xffff0fec>
   55d4c:	01402034 	movhi	r5,128
   55d50:	0011883a 	mov	r8,zero
   55d54:	297fffc4 	addi	r5,r5,-1
   55d58:	047ffe04 	movi	r17,-8
   55d5c:	0401ffc4 	movi	r16,2047
   55d60:	003e6a06 	br	5570c <__alt_data_end+0xffff0d1c>
   55d64:	2c62b03a 	or	r17,r5,r17
   55d68:	8822c03a 	cmpne	r17,r17,zero
   55d6c:	0005883a 	mov	r2,zero
   55d70:	003fa506 	br	55c08 <__alt_data_end+0xffff1218>
   55d74:	180b883a 	mov	r5,r3
   55d78:	3023883a 	mov	r17,r6
   55d7c:	003e0306 	br	5558c <__alt_data_end+0xffff0b9c>
   55d80:	180b883a 	mov	r5,r3
   55d84:	3023883a 	mov	r17,r6
   55d88:	0401ffc4 	movi	r16,2047
   55d8c:	003dff06 	br	5558c <__alt_data_end+0xffff0b9c>
   55d90:	113ff804 	addi	r4,r2,-32
   55d94:	01c00804 	movi	r7,32
   55d98:	2908d83a 	srl	r4,r5,r4
   55d9c:	11c00a26 	beq	r2,r7,55dc8 <__subdf3+0x8c8>
   55da0:	01c01004 	movi	r7,64
   55da4:	3885c83a 	sub	r2,r7,r2
   55da8:	288a983a 	sll	r5,r5,r2
   55dac:	2c62b03a 	or	r17,r5,r17
   55db0:	8822c03a 	cmpne	r17,r17,zero
   55db4:	8922b03a 	or	r17,r17,r4
   55db8:	0005883a 	mov	r2,zero
   55dbc:	003f9206 	br	55c08 <__alt_data_end+0xffff1218>
   55dc0:	000b883a 	mov	r5,zero
   55dc4:	003fdc06 	br	55d38 <__alt_data_end+0xffff1348>
   55dc8:	000b883a 	mov	r5,zero
   55dcc:	003ff706 	br	55dac <__alt_data_end+0xffff13bc>

00055dd0 <__fixdfsi>:
   55dd0:	2806d53a 	srli	r3,r5,20
   55dd4:	00800434 	movhi	r2,16
   55dd8:	10bfffc4 	addi	r2,r2,-1
   55ddc:	18c1ffcc 	andi	r3,r3,2047
   55de0:	0180ff84 	movi	r6,1022
   55de4:	2884703a 	and	r2,r5,r2
   55de8:	280ad7fa 	srli	r5,r5,31
   55dec:	30c0130e 	bge	r6,r3,55e3c <__fixdfsi+0x6c>
   55df0:	01810744 	movi	r6,1053
   55df4:	30c00d16 	blt	r6,r3,55e2c <__fixdfsi+0x5c>
   55df8:	01810cc4 	movi	r6,1075
   55dfc:	30cdc83a 	sub	r6,r6,r3
   55e00:	01c007c4 	movi	r7,31
   55e04:	10800434 	orhi	r2,r2,16
   55e08:	39800e0e 	bge	r7,r6,55e44 <__fixdfsi+0x74>
   55e0c:	010104c4 	movi	r4,1043
   55e10:	20c7c83a 	sub	r3,r4,r3
   55e14:	10c6d83a 	srl	r3,r2,r3
   55e18:	29403fcc 	andi	r5,r5,255
   55e1c:	0145c83a 	sub	r2,zero,r5
   55e20:	1884f03a 	xor	r2,r3,r2
   55e24:	1145883a 	add	r2,r2,r5
   55e28:	f800283a 	ret
   55e2c:	00a00034 	movhi	r2,32768
   55e30:	10bfffc4 	addi	r2,r2,-1
   55e34:	2885883a 	add	r2,r5,r2
   55e38:	f800283a 	ret
   55e3c:	0005883a 	mov	r2,zero
   55e40:	f800283a 	ret
   55e44:	18fefb44 	addi	r3,r3,-1043
   55e48:	2188d83a 	srl	r4,r4,r6
   55e4c:	10c6983a 	sll	r3,r2,r3
   55e50:	20c6b03a 	or	r3,r4,r3
   55e54:	003ff006 	br	55e18 <__alt_data_end+0xffff1428>

00055e58 <__floatsidf>:
   55e58:	defffd04 	addi	sp,sp,-12
   55e5c:	dc400115 	stw	r17,4(sp)
   55e60:	dfc00215 	stw	ra,8(sp)
   55e64:	dc000015 	stw	r16,0(sp)
   55e68:	2023883a 	mov	r17,r4
   55e6c:	20001426 	beq	r4,zero,55ec0 <__floatsidf+0x68>
   55e70:	2020d7fa 	srli	r16,r4,31
   55e74:	80000126 	beq	r16,zero,55e7c <__floatsidf+0x24>
   55e78:	0123c83a 	sub	r17,zero,r4
   55e7c:	8809883a 	mov	r4,r17
   55e80:	00469200 	call	46920 <__clzsi2>
   55e84:	01410784 	movi	r5,1054
   55e88:	00c00284 	movi	r3,10
   55e8c:	288bc83a 	sub	r5,r5,r2
   55e90:	18801c16 	blt	r3,r2,55f04 <__floatsidf+0xac>
   55e94:	00c002c4 	movi	r3,11
   55e98:	1887c83a 	sub	r3,r3,r2
   55e9c:	88c8d83a 	srl	r4,r17,r3
   55ea0:	00c00434 	movhi	r3,16
   55ea4:	18ffffc4 	addi	r3,r3,-1
   55ea8:	10800544 	addi	r2,r2,21
   55eac:	20c8703a 	and	r4,r4,r3
   55eb0:	8884983a 	sll	r2,r17,r2
   55eb4:	28c1ffcc 	andi	r3,r5,2047
   55eb8:	800d883a 	mov	r6,r16
   55ebc:	00000406 	br	55ed0 <__floatsidf+0x78>
   55ec0:	000d883a 	mov	r6,zero
   55ec4:	0007883a 	mov	r3,zero
   55ec8:	0009883a 	mov	r4,zero
   55ecc:	0005883a 	mov	r2,zero
   55ed0:	180a953a 	slli	r5,r3,20
   55ed4:	31803fcc 	andi	r6,r6,255
   55ed8:	00c00434 	movhi	r3,16
   55edc:	300c97fa 	slli	r6,r6,31
   55ee0:	18ffffc4 	addi	r3,r3,-1
   55ee4:	20c6703a 	and	r3,r4,r3
   55ee8:	1946b03a 	or	r3,r3,r5
   55eec:	1986b03a 	or	r3,r3,r6
   55ef0:	dfc00217 	ldw	ra,8(sp)
   55ef4:	dc400117 	ldw	r17,4(sp)
   55ef8:	dc000017 	ldw	r16,0(sp)
   55efc:	dec00304 	addi	sp,sp,12
   55f00:	f800283a 	ret
   55f04:	10fffd44 	addi	r3,r2,-11
   55f08:	88c8983a 	sll	r4,r17,r3
   55f0c:	00800434 	movhi	r2,16
   55f10:	10bfffc4 	addi	r2,r2,-1
   55f14:	2088703a 	and	r4,r4,r2
   55f18:	28c1ffcc 	andi	r3,r5,2047
   55f1c:	800d883a 	mov	r6,r16
   55f20:	0005883a 	mov	r2,zero
   55f24:	003fea06 	br	55ed0 <__alt_data_end+0xffff14e0>

00055f28 <__floatunsidf>:
   55f28:	defffe04 	addi	sp,sp,-8
   55f2c:	dc000015 	stw	r16,0(sp)
   55f30:	dfc00115 	stw	ra,4(sp)
   55f34:	2021883a 	mov	r16,r4
   55f38:	20001026 	beq	r4,zero,55f7c <__floatunsidf+0x54>
   55f3c:	00469200 	call	46920 <__clzsi2>
   55f40:	01410784 	movi	r5,1054
   55f44:	100d883a 	mov	r6,r2
   55f48:	288bc83a 	sub	r5,r5,r2
   55f4c:	00800284 	movi	r2,10
   55f50:	11801616 	blt	r2,r6,55fac <__floatunsidf+0x84>
   55f54:	008002c4 	movi	r2,11
   55f58:	1185c83a 	sub	r2,r2,r6
   55f5c:	8084d83a 	srl	r2,r16,r2
   55f60:	00c00434 	movhi	r3,16
   55f64:	31c00544 	addi	r7,r6,21
   55f68:	18ffffc4 	addi	r3,r3,-1
   55f6c:	81e0983a 	sll	r16,r16,r7
   55f70:	10cc703a 	and	r6,r2,r3
   55f74:	2941ffcc 	andi	r5,r5,2047
   55f78:	00000206 	br	55f84 <__floatunsidf+0x5c>
   55f7c:	000b883a 	mov	r5,zero
   55f80:	000d883a 	mov	r6,zero
   55f84:	280a953a 	slli	r5,r5,20
   55f88:	00c00434 	movhi	r3,16
   55f8c:	18ffffc4 	addi	r3,r3,-1
   55f90:	30c6703a 	and	r3,r6,r3
   55f94:	8005883a 	mov	r2,r16
   55f98:	1946b03a 	or	r3,r3,r5
   55f9c:	dfc00117 	ldw	ra,4(sp)
   55fa0:	dc000017 	ldw	r16,0(sp)
   55fa4:	dec00204 	addi	sp,sp,8
   55fa8:	f800283a 	ret
   55fac:	31bffd44 	addi	r6,r6,-11
   55fb0:	818c983a 	sll	r6,r16,r6
   55fb4:	00800434 	movhi	r2,16
   55fb8:	10bfffc4 	addi	r2,r2,-1
   55fbc:	2941ffcc 	andi	r5,r5,2047
   55fc0:	0021883a 	mov	r16,zero
   55fc4:	308c703a 	and	r6,r6,r2
   55fc8:	003fee06 	br	55f84 <__alt_data_end+0xffff1594>

00055fcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   55fcc:	defffe04 	addi	sp,sp,-8
   55fd0:	dfc00115 	stw	ra,4(sp)
   55fd4:	df000015 	stw	fp,0(sp)
   55fd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   55fdc:	008001b4 	movhi	r2,6
   55fe0:	10abcf04 	addi	r2,r2,-20676
   55fe4:	10800017 	ldw	r2,0(r2)
   55fe8:	10000526 	beq	r2,zero,56000 <alt_get_errno+0x34>
   55fec:	008001b4 	movhi	r2,6
   55ff0:	10abcf04 	addi	r2,r2,-20676
   55ff4:	10800017 	ldw	r2,0(r2)
   55ff8:	103ee83a 	callr	r2
   55ffc:	00000206 	br	56008 <alt_get_errno+0x3c>
   56000:	008001b4 	movhi	r2,6
   56004:	10b29304 	addi	r2,r2,-13748
}
   56008:	e037883a 	mov	sp,fp
   5600c:	dfc00117 	ldw	ra,4(sp)
   56010:	df000017 	ldw	fp,0(sp)
   56014:	dec00204 	addi	sp,sp,8
   56018:	f800283a 	ret

0005601c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   5601c:	defffb04 	addi	sp,sp,-20
   56020:	dfc00415 	stw	ra,16(sp)
   56024:	df000315 	stw	fp,12(sp)
   56028:	df000304 	addi	fp,sp,12
   5602c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   56030:	e0bfff17 	ldw	r2,-4(fp)
   56034:	10000816 	blt	r2,zero,56058 <close+0x3c>
   56038:	e13fff17 	ldw	r4,-4(fp)
   5603c:	01400304 	movi	r5,12
   56040:	00453200 	call	45320 <__mulsi3>
   56044:	1007883a 	mov	r3,r2
   56048:	008001b4 	movhi	r2,6
   5604c:	10a74b04 	addi	r2,r2,-25300
   56050:	1885883a 	add	r2,r3,r2
   56054:	00000106 	br	5605c <close+0x40>
   56058:	0005883a 	mov	r2,zero
   5605c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   56060:	e0bffd17 	ldw	r2,-12(fp)
   56064:	10001926 	beq	r2,zero,560cc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   56068:	e0bffd17 	ldw	r2,-12(fp)
   5606c:	10800017 	ldw	r2,0(r2)
   56070:	10800417 	ldw	r2,16(r2)
   56074:	10000626 	beq	r2,zero,56090 <close+0x74>
   56078:	e0bffd17 	ldw	r2,-12(fp)
   5607c:	10800017 	ldw	r2,0(r2)
   56080:	10800417 	ldw	r2,16(r2)
   56084:	e13ffd17 	ldw	r4,-12(fp)
   56088:	103ee83a 	callr	r2
   5608c:	00000106 	br	56094 <close+0x78>
   56090:	0005883a 	mov	r2,zero
   56094:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   56098:	e13fff17 	ldw	r4,-4(fp)
   5609c:	00567400 	call	56740 <alt_release_fd>
    if (rval < 0)
   560a0:	e0bffe17 	ldw	r2,-8(fp)
   560a4:	1000070e 	bge	r2,zero,560c4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   560a8:	0055fcc0 	call	55fcc <alt_get_errno>
   560ac:	1007883a 	mov	r3,r2
   560b0:	e0bffe17 	ldw	r2,-8(fp)
   560b4:	0085c83a 	sub	r2,zero,r2
   560b8:	18800015 	stw	r2,0(r3)
      return -1;
   560bc:	00bfffc4 	movi	r2,-1
   560c0:	00000706 	br	560e0 <close+0xc4>
    }
    return 0;
   560c4:	0005883a 	mov	r2,zero
   560c8:	00000506 	br	560e0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   560cc:	0055fcc0 	call	55fcc <alt_get_errno>
   560d0:	1007883a 	mov	r3,r2
   560d4:	00801444 	movi	r2,81
   560d8:	18800015 	stw	r2,0(r3)
    return -1;
   560dc:	00bfffc4 	movi	r2,-1
  }
}
   560e0:	e037883a 	mov	sp,fp
   560e4:	dfc00117 	ldw	ra,4(sp)
   560e8:	df000017 	ldw	fp,0(sp)
   560ec:	dec00204 	addi	sp,sp,8
   560f0:	f800283a 	ret

000560f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   560f4:	defffc04 	addi	sp,sp,-16
   560f8:	df000315 	stw	fp,12(sp)
   560fc:	df000304 	addi	fp,sp,12
   56100:	e13ffd15 	stw	r4,-12(fp)
   56104:	e17ffe15 	stw	r5,-8(fp)
   56108:	e1bfff15 	stw	r6,-4(fp)
  return len;
   5610c:	e0bfff17 	ldw	r2,-4(fp)
}
   56110:	e037883a 	mov	sp,fp
   56114:	df000017 	ldw	fp,0(sp)
   56118:	dec00104 	addi	sp,sp,4
   5611c:	f800283a 	ret

00056120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   56120:	defffe04 	addi	sp,sp,-8
   56124:	dfc00115 	stw	ra,4(sp)
   56128:	df000015 	stw	fp,0(sp)
   5612c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   56130:	008001b4 	movhi	r2,6
   56134:	10abcf04 	addi	r2,r2,-20676
   56138:	10800017 	ldw	r2,0(r2)
   5613c:	10000526 	beq	r2,zero,56154 <alt_get_errno+0x34>
   56140:	008001b4 	movhi	r2,6
   56144:	10abcf04 	addi	r2,r2,-20676
   56148:	10800017 	ldw	r2,0(r2)
   5614c:	103ee83a 	callr	r2
   56150:	00000206 	br	5615c <alt_get_errno+0x3c>
   56154:	008001b4 	movhi	r2,6
   56158:	10b29304 	addi	r2,r2,-13748
}
   5615c:	e037883a 	mov	sp,fp
   56160:	dfc00117 	ldw	ra,4(sp)
   56164:	df000017 	ldw	fp,0(sp)
   56168:	dec00204 	addi	sp,sp,8
   5616c:	f800283a 	ret

00056170 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   56170:	defffb04 	addi	sp,sp,-20
   56174:	dfc00415 	stw	ra,16(sp)
   56178:	df000315 	stw	fp,12(sp)
   5617c:	df000304 	addi	fp,sp,12
   56180:	e13ffe15 	stw	r4,-8(fp)
   56184:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   56188:	e0bffe17 	ldw	r2,-8(fp)
   5618c:	10000816 	blt	r2,zero,561b0 <fstat+0x40>
   56190:	e13ffe17 	ldw	r4,-8(fp)
   56194:	01400304 	movi	r5,12
   56198:	00453200 	call	45320 <__mulsi3>
   5619c:	1007883a 	mov	r3,r2
   561a0:	008001b4 	movhi	r2,6
   561a4:	10a74b04 	addi	r2,r2,-25300
   561a8:	1885883a 	add	r2,r3,r2
   561ac:	00000106 	br	561b4 <fstat+0x44>
   561b0:	0005883a 	mov	r2,zero
   561b4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   561b8:	e0bffd17 	ldw	r2,-12(fp)
   561bc:	10001026 	beq	r2,zero,56200 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   561c0:	e0bffd17 	ldw	r2,-12(fp)
   561c4:	10800017 	ldw	r2,0(r2)
   561c8:	10800817 	ldw	r2,32(r2)
   561cc:	10000726 	beq	r2,zero,561ec <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   561d0:	e0bffd17 	ldw	r2,-12(fp)
   561d4:	10800017 	ldw	r2,0(r2)
   561d8:	10800817 	ldw	r2,32(r2)
   561dc:	e13ffd17 	ldw	r4,-12(fp)
   561e0:	e17fff17 	ldw	r5,-4(fp)
   561e4:	103ee83a 	callr	r2
   561e8:	00000a06 	br	56214 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   561ec:	e0bfff17 	ldw	r2,-4(fp)
   561f0:	00c80004 	movi	r3,8192
   561f4:	10c00115 	stw	r3,4(r2)
      return 0;
   561f8:	0005883a 	mov	r2,zero
   561fc:	00000506 	br	56214 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   56200:	00561200 	call	56120 <alt_get_errno>
   56204:	1007883a 	mov	r3,r2
   56208:	00801444 	movi	r2,81
   5620c:	18800015 	stw	r2,0(r3)
    return -1;
   56210:	00bfffc4 	movi	r2,-1
  }
}
   56214:	e037883a 	mov	sp,fp
   56218:	dfc00117 	ldw	ra,4(sp)
   5621c:	df000017 	ldw	fp,0(sp)
   56220:	dec00204 	addi	sp,sp,8
   56224:	f800283a 	ret

00056228 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   56228:	defffe04 	addi	sp,sp,-8
   5622c:	dfc00115 	stw	ra,4(sp)
   56230:	df000015 	stw	fp,0(sp)
   56234:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   56238:	008001b4 	movhi	r2,6
   5623c:	10abcf04 	addi	r2,r2,-20676
   56240:	10800017 	ldw	r2,0(r2)
   56244:	10000526 	beq	r2,zero,5625c <alt_get_errno+0x34>
   56248:	008001b4 	movhi	r2,6
   5624c:	10abcf04 	addi	r2,r2,-20676
   56250:	10800017 	ldw	r2,0(r2)
   56254:	103ee83a 	callr	r2
   56258:	00000206 	br	56264 <alt_get_errno+0x3c>
   5625c:	008001b4 	movhi	r2,6
   56260:	10b29304 	addi	r2,r2,-13748
}
   56264:	e037883a 	mov	sp,fp
   56268:	dfc00117 	ldw	ra,4(sp)
   5626c:	df000017 	ldw	fp,0(sp)
   56270:	dec00204 	addi	sp,sp,8
   56274:	f800283a 	ret

00056278 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   56278:	deffed04 	addi	sp,sp,-76
   5627c:	dfc01215 	stw	ra,72(sp)
   56280:	df001115 	stw	fp,68(sp)
   56284:	df001104 	addi	fp,sp,68
   56288:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   5628c:	e0bfff17 	ldw	r2,-4(fp)
   56290:	10000816 	blt	r2,zero,562b4 <isatty+0x3c>
   56294:	e13fff17 	ldw	r4,-4(fp)
   56298:	01400304 	movi	r5,12
   5629c:	00453200 	call	45320 <__mulsi3>
   562a0:	1007883a 	mov	r3,r2
   562a4:	008001b4 	movhi	r2,6
   562a8:	10a74b04 	addi	r2,r2,-25300
   562ac:	1885883a 	add	r2,r3,r2
   562b0:	00000106 	br	562b8 <isatty+0x40>
   562b4:	0005883a 	mov	r2,zero
   562b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   562bc:	e0bfef17 	ldw	r2,-68(fp)
   562c0:	10000e26 	beq	r2,zero,562fc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   562c4:	e0bfef17 	ldw	r2,-68(fp)
   562c8:	10800017 	ldw	r2,0(r2)
   562cc:	10800817 	ldw	r2,32(r2)
   562d0:	1000021e 	bne	r2,zero,562dc <isatty+0x64>
    {
      return 1;
   562d4:	00800044 	movi	r2,1
   562d8:	00000d06 	br	56310 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   562dc:	e0bff004 	addi	r2,fp,-64
   562e0:	e13fff17 	ldw	r4,-4(fp)
   562e4:	100b883a 	mov	r5,r2
   562e8:	00561700 	call	56170 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   562ec:	e0bff117 	ldw	r2,-60(fp)
   562f0:	10880020 	cmpeqi	r2,r2,8192
   562f4:	10803fcc 	andi	r2,r2,255
   562f8:	00000506 	br	56310 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   562fc:	00562280 	call	56228 <alt_get_errno>
   56300:	1007883a 	mov	r3,r2
   56304:	00801444 	movi	r2,81
   56308:	18800015 	stw	r2,0(r3)
    return 0;
   5630c:	0005883a 	mov	r2,zero
  }
}
   56310:	e037883a 	mov	sp,fp
   56314:	dfc00117 	ldw	ra,4(sp)
   56318:	df000017 	ldw	fp,0(sp)
   5631c:	dec00204 	addi	sp,sp,8
   56320:	f800283a 	ret

00056324 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   56324:	defffc04 	addi	sp,sp,-16
   56328:	df000315 	stw	fp,12(sp)
   5632c:	df000304 	addi	fp,sp,12
   56330:	e13ffd15 	stw	r4,-12(fp)
   56334:	e17ffe15 	stw	r5,-8(fp)
   56338:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   5633c:	e0fffe17 	ldw	r3,-8(fp)
   56340:	e0bffd17 	ldw	r2,-12(fp)
   56344:	18800c26 	beq	r3,r2,56378 <alt_load_section+0x54>
  {
    while( to != end )
   56348:	00000806 	br	5636c <alt_load_section+0x48>
    {
      *to++ = *from++;
   5634c:	e0bffe17 	ldw	r2,-8(fp)
   56350:	10c00104 	addi	r3,r2,4
   56354:	e0fffe15 	stw	r3,-8(fp)
   56358:	e0fffd17 	ldw	r3,-12(fp)
   5635c:	19000104 	addi	r4,r3,4
   56360:	e13ffd15 	stw	r4,-12(fp)
   56364:	18c00017 	ldw	r3,0(r3)
   56368:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   5636c:	e0fffe17 	ldw	r3,-8(fp)
   56370:	e0bfff17 	ldw	r2,-4(fp)
   56374:	18bff51e 	bne	r3,r2,5634c <__alt_data_end+0xffff195c>
    {
      *to++ = *from++;
    }
  }
}
   56378:	e037883a 	mov	sp,fp
   5637c:	df000017 	ldw	fp,0(sp)
   56380:	dec00104 	addi	sp,sp,4
   56384:	f800283a 	ret

00056388 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   56388:	defffe04 	addi	sp,sp,-8
   5638c:	dfc00115 	stw	ra,4(sp)
   56390:	df000015 	stw	fp,0(sp)
   56394:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   56398:	010001b4 	movhi	r4,6
   5639c:	212bd404 	addi	r4,r4,-20656
   563a0:	014001b4 	movhi	r5,6
   563a4:	29651804 	addi	r5,r5,-27552
   563a8:	018001b4 	movhi	r6,6
   563ac:	31abd404 	addi	r6,r6,-20656
   563b0:	00563240 	call	56324 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   563b4:	01000134 	movhi	r4,4
   563b8:	21000804 	addi	r4,r4,32
   563bc:	01400134 	movhi	r5,4
   563c0:	29400804 	addi	r5,r5,32
   563c4:	01800134 	movhi	r6,4
   563c8:	31808b04 	addi	r6,r6,556
   563cc:	00563240 	call	56324 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   563d0:	010001b4 	movhi	r4,6
   563d4:	21227004 	addi	r4,r4,-30272
   563d8:	014001b4 	movhi	r5,6
   563dc:	29627004 	addi	r5,r5,-30272
   563e0:	018001b4 	movhi	r6,6
   563e4:	31a51804 	addi	r6,r6,-27552
   563e8:	00563240 	call	56324 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   563ec:	0057a380 	call	57a38 <alt_dcache_flush_all>
  alt_icache_flush_all();
   563f0:	0057c000 	call	57c00 <alt_icache_flush_all>
}
   563f4:	e037883a 	mov	sp,fp
   563f8:	dfc00117 	ldw	ra,4(sp)
   563fc:	df000017 	ldw	fp,0(sp)
   56400:	dec00204 	addi	sp,sp,8
   56404:	f800283a 	ret

00056408 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   56408:	defffe04 	addi	sp,sp,-8
   5640c:	dfc00115 	stw	ra,4(sp)
   56410:	df000015 	stw	fp,0(sp)
   56414:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   56418:	008001b4 	movhi	r2,6
   5641c:	10abcf04 	addi	r2,r2,-20676
   56420:	10800017 	ldw	r2,0(r2)
   56424:	10000526 	beq	r2,zero,5643c <alt_get_errno+0x34>
   56428:	008001b4 	movhi	r2,6
   5642c:	10abcf04 	addi	r2,r2,-20676
   56430:	10800017 	ldw	r2,0(r2)
   56434:	103ee83a 	callr	r2
   56438:	00000206 	br	56444 <alt_get_errno+0x3c>
   5643c:	008001b4 	movhi	r2,6
   56440:	10b29304 	addi	r2,r2,-13748
}
   56444:	e037883a 	mov	sp,fp
   56448:	dfc00117 	ldw	ra,4(sp)
   5644c:	df000017 	ldw	fp,0(sp)
   56450:	dec00204 	addi	sp,sp,8
   56454:	f800283a 	ret

00056458 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   56458:	defff904 	addi	sp,sp,-28
   5645c:	dfc00615 	stw	ra,24(sp)
   56460:	df000515 	stw	fp,20(sp)
   56464:	df000504 	addi	fp,sp,20
   56468:	e13ffd15 	stw	r4,-12(fp)
   5646c:	e17ffe15 	stw	r5,-8(fp)
   56470:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   56474:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   56478:	e0bffd17 	ldw	r2,-12(fp)
   5647c:	10000816 	blt	r2,zero,564a0 <lseek+0x48>
   56480:	e13ffd17 	ldw	r4,-12(fp)
   56484:	01400304 	movi	r5,12
   56488:	00453200 	call	45320 <__mulsi3>
   5648c:	1007883a 	mov	r3,r2
   56490:	008001b4 	movhi	r2,6
   56494:	10a74b04 	addi	r2,r2,-25300
   56498:	1885883a 	add	r2,r3,r2
   5649c:	00000106 	br	564a4 <lseek+0x4c>
   564a0:	0005883a 	mov	r2,zero
   564a4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   564a8:	e0bffc17 	ldw	r2,-16(fp)
   564ac:	10001026 	beq	r2,zero,564f0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   564b0:	e0bffc17 	ldw	r2,-16(fp)
   564b4:	10800017 	ldw	r2,0(r2)
   564b8:	10800717 	ldw	r2,28(r2)
   564bc:	10000926 	beq	r2,zero,564e4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   564c0:	e0bffc17 	ldw	r2,-16(fp)
   564c4:	10800017 	ldw	r2,0(r2)
   564c8:	10800717 	ldw	r2,28(r2)
   564cc:	e13ffc17 	ldw	r4,-16(fp)
   564d0:	e17ffe17 	ldw	r5,-8(fp)
   564d4:	e1bfff17 	ldw	r6,-4(fp)
   564d8:	103ee83a 	callr	r2
   564dc:	e0bffb15 	stw	r2,-20(fp)
   564e0:	00000506 	br	564f8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   564e4:	00bfde84 	movi	r2,-134
   564e8:	e0bffb15 	stw	r2,-20(fp)
   564ec:	00000206 	br	564f8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   564f0:	00bfebc4 	movi	r2,-81
   564f4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   564f8:	e0bffb17 	ldw	r2,-20(fp)
   564fc:	1000070e 	bge	r2,zero,5651c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   56500:	00564080 	call	56408 <alt_get_errno>
   56504:	1007883a 	mov	r3,r2
   56508:	e0bffb17 	ldw	r2,-20(fp)
   5650c:	0085c83a 	sub	r2,zero,r2
   56510:	18800015 	stw	r2,0(r3)
    rc = -1;
   56514:	00bfffc4 	movi	r2,-1
   56518:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   5651c:	e0bffb17 	ldw	r2,-20(fp)
}
   56520:	e037883a 	mov	sp,fp
   56524:	dfc00117 	ldw	ra,4(sp)
   56528:	df000017 	ldw	fp,0(sp)
   5652c:	dec00204 	addi	sp,sp,8
   56530:	f800283a 	ret

00056534 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   56534:	defffd04 	addi	sp,sp,-12
   56538:	dfc00215 	stw	ra,8(sp)
   5653c:	df000115 	stw	fp,4(sp)
   56540:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   56544:	0009883a 	mov	r4,zero
   56548:	0056bc40 	call	56bc4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   5654c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   56550:	0056bf80 	call	56bf8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   56554:	010001b4 	movhi	r4,6
   56558:	21251004 	addi	r4,r4,-27584
   5655c:	014001b4 	movhi	r5,6
   56560:	29651004 	addi	r5,r5,-27584
   56564:	018001b4 	movhi	r6,6
   56568:	31a51004 	addi	r6,r6,-27584
   5656c:	0057fcc0 	call	57fcc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   56570:	0057b480 	call	57b48 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   56574:	01000174 	movhi	r4,5
   56578:	211ee904 	addi	r4,r4,31652
   5657c:	005861c0 	call	5861c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   56580:	d126d417 	ldw	r4,-25776(gp)
   56584:	d0e6d517 	ldw	r3,-25772(gp)
   56588:	d0a6d617 	ldw	r2,-25768(gp)
   5658c:	180b883a 	mov	r5,r3
   56590:	100d883a 	mov	r6,r2
   56594:	00405180 	call	40518 <main>
   56598:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   5659c:	01000044 	movi	r4,1
   565a0:	005601c0 	call	5601c <close>
  exit (result);
   565a4:	e13fff17 	ldw	r4,-4(fp)
   565a8:	00586300 	call	58630 <exit>

000565ac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   565ac:	defffe04 	addi	sp,sp,-8
   565b0:	df000115 	stw	fp,4(sp)
   565b4:	df000104 	addi	fp,sp,4
   565b8:	e13fff15 	stw	r4,-4(fp)
}
   565bc:	e037883a 	mov	sp,fp
   565c0:	df000017 	ldw	fp,0(sp)
   565c4:	dec00104 	addi	sp,sp,4
   565c8:	f800283a 	ret

000565cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   565cc:	defffe04 	addi	sp,sp,-8
   565d0:	df000115 	stw	fp,4(sp)
   565d4:	df000104 	addi	fp,sp,4
   565d8:	e13fff15 	stw	r4,-4(fp)
}
   565dc:	e037883a 	mov	sp,fp
   565e0:	df000017 	ldw	fp,0(sp)
   565e4:	dec00104 	addi	sp,sp,4
   565e8:	f800283a 	ret

000565ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   565ec:	defffe04 	addi	sp,sp,-8
   565f0:	dfc00115 	stw	ra,4(sp)
   565f4:	df000015 	stw	fp,0(sp)
   565f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   565fc:	008001b4 	movhi	r2,6
   56600:	10abcf04 	addi	r2,r2,-20676
   56604:	10800017 	ldw	r2,0(r2)
   56608:	10000526 	beq	r2,zero,56620 <alt_get_errno+0x34>
   5660c:	008001b4 	movhi	r2,6
   56610:	10abcf04 	addi	r2,r2,-20676
   56614:	10800017 	ldw	r2,0(r2)
   56618:	103ee83a 	callr	r2
   5661c:	00000206 	br	56628 <alt_get_errno+0x3c>
   56620:	008001b4 	movhi	r2,6
   56624:	10b29304 	addi	r2,r2,-13748
}
   56628:	e037883a 	mov	sp,fp
   5662c:	dfc00117 	ldw	ra,4(sp)
   56630:	df000017 	ldw	fp,0(sp)
   56634:	dec00204 	addi	sp,sp,8
   56638:	f800283a 	ret

0005663c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   5663c:	defff904 	addi	sp,sp,-28
   56640:	dfc00615 	stw	ra,24(sp)
   56644:	df000515 	stw	fp,20(sp)
   56648:	df000504 	addi	fp,sp,20
   5664c:	e13ffd15 	stw	r4,-12(fp)
   56650:	e17ffe15 	stw	r5,-8(fp)
   56654:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   56658:	e0bffd17 	ldw	r2,-12(fp)
   5665c:	10000816 	blt	r2,zero,56680 <read+0x44>
   56660:	e13ffd17 	ldw	r4,-12(fp)
   56664:	01400304 	movi	r5,12
   56668:	00453200 	call	45320 <__mulsi3>
   5666c:	1007883a 	mov	r3,r2
   56670:	008001b4 	movhi	r2,6
   56674:	10a74b04 	addi	r2,r2,-25300
   56678:	1885883a 	add	r2,r3,r2
   5667c:	00000106 	br	56684 <read+0x48>
   56680:	0005883a 	mov	r2,zero
   56684:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   56688:	e0bffb17 	ldw	r2,-20(fp)
   5668c:	10002226 	beq	r2,zero,56718 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   56690:	e0bffb17 	ldw	r2,-20(fp)
   56694:	10800217 	ldw	r2,8(r2)
   56698:	108000cc 	andi	r2,r2,3
   5669c:	10800060 	cmpeqi	r2,r2,1
   566a0:	1000181e 	bne	r2,zero,56704 <read+0xc8>
        (fd->dev->read))
   566a4:	e0bffb17 	ldw	r2,-20(fp)
   566a8:	10800017 	ldw	r2,0(r2)
   566ac:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   566b0:	10001426 	beq	r2,zero,56704 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   566b4:	e0bffb17 	ldw	r2,-20(fp)
   566b8:	10800017 	ldw	r2,0(r2)
   566bc:	10800517 	ldw	r2,20(r2)
   566c0:	e0ffff17 	ldw	r3,-4(fp)
   566c4:	e13ffb17 	ldw	r4,-20(fp)
   566c8:	e17ffe17 	ldw	r5,-8(fp)
   566cc:	180d883a 	mov	r6,r3
   566d0:	103ee83a 	callr	r2
   566d4:	e0bffc15 	stw	r2,-16(fp)
   566d8:	e0bffc17 	ldw	r2,-16(fp)
   566dc:	1000070e 	bge	r2,zero,566fc <read+0xc0>
        {
          ALT_ERRNO = -rval;
   566e0:	00565ec0 	call	565ec <alt_get_errno>
   566e4:	1007883a 	mov	r3,r2
   566e8:	e0bffc17 	ldw	r2,-16(fp)
   566ec:	0085c83a 	sub	r2,zero,r2
   566f0:	18800015 	stw	r2,0(r3)
          return -1;
   566f4:	00bfffc4 	movi	r2,-1
   566f8:	00000c06 	br	5672c <read+0xf0>
        }
        return rval;
   566fc:	e0bffc17 	ldw	r2,-16(fp)
   56700:	00000a06 	br	5672c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   56704:	00565ec0 	call	565ec <alt_get_errno>
   56708:	1007883a 	mov	r3,r2
   5670c:	00800344 	movi	r2,13
   56710:	18800015 	stw	r2,0(r3)
   56714:	00000406 	br	56728 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   56718:	00565ec0 	call	565ec <alt_get_errno>
   5671c:	1007883a 	mov	r3,r2
   56720:	00801444 	movi	r2,81
   56724:	18800015 	stw	r2,0(r3)
  }
  return -1;
   56728:	00bfffc4 	movi	r2,-1
}
   5672c:	e037883a 	mov	sp,fp
   56730:	dfc00117 	ldw	ra,4(sp)
   56734:	df000017 	ldw	fp,0(sp)
   56738:	dec00204 	addi	sp,sp,8
   5673c:	f800283a 	ret

00056740 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   56740:	defffc04 	addi	sp,sp,-16
   56744:	dfc00315 	stw	ra,12(sp)
   56748:	df000215 	stw	fp,8(sp)
   5674c:	dc000115 	stw	r16,4(sp)
   56750:	df000204 	addi	fp,sp,8
   56754:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   56758:	e0bffe17 	ldw	r2,-8(fp)
   5675c:	108000d0 	cmplti	r2,r2,3
   56760:	1000111e 	bne	r2,zero,567a8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   56764:	040001b4 	movhi	r16,6
   56768:	84274b04 	addi	r16,r16,-25300
   5676c:	e0bffe17 	ldw	r2,-8(fp)
   56770:	1009883a 	mov	r4,r2
   56774:	01400304 	movi	r5,12
   56778:	00453200 	call	45320 <__mulsi3>
   5677c:	8085883a 	add	r2,r16,r2
   56780:	10800204 	addi	r2,r2,8
   56784:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   56788:	040001b4 	movhi	r16,6
   5678c:	84274b04 	addi	r16,r16,-25300
   56790:	e0bffe17 	ldw	r2,-8(fp)
   56794:	1009883a 	mov	r4,r2
   56798:	01400304 	movi	r5,12
   5679c:	00453200 	call	45320 <__mulsi3>
   567a0:	8085883a 	add	r2,r16,r2
   567a4:	10000015 	stw	zero,0(r2)
  }
}
   567a8:	e6ffff04 	addi	sp,fp,-4
   567ac:	dfc00217 	ldw	ra,8(sp)
   567b0:	df000117 	ldw	fp,4(sp)
   567b4:	dc000017 	ldw	r16,0(sp)
   567b8:	dec00304 	addi	sp,sp,12
   567bc:	f800283a 	ret

000567c0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   567c0:	defff904 	addi	sp,sp,-28
   567c4:	df000615 	stw	fp,24(sp)
   567c8:	df000604 	addi	fp,sp,24
   567cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   567d0:	0005303a 	rdctl	r2,status
   567d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   567d8:	e0fffc17 	ldw	r3,-16(fp)
   567dc:	00bfff84 	movi	r2,-2
   567e0:	1884703a 	and	r2,r3,r2
   567e4:	1001703a 	wrctl	status,r2
  
  return context;
   567e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   567ec:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   567f0:	d0a00d17 	ldw	r2,-32716(gp)
   567f4:	10c000c4 	addi	r3,r2,3
   567f8:	00bfff04 	movi	r2,-4
   567fc:	1884703a 	and	r2,r3,r2
   56800:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   56804:	d0e00d17 	ldw	r3,-32716(gp)
   56808:	e0bfff17 	ldw	r2,-4(fp)
   5680c:	1887883a 	add	r3,r3,r2
   56810:	008001b4 	movhi	r2,6
   56814:	10927c04 	addi	r2,r2,18928
   56818:	10c0062e 	bgeu	r2,r3,56834 <sbrk+0x74>
   5681c:	e0bffa17 	ldw	r2,-24(fp)
   56820:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   56824:	e0bffd17 	ldw	r2,-12(fp)
   56828:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   5682c:	00bfffc4 	movi	r2,-1
   56830:	00000b06 	br	56860 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   56834:	d0a00d17 	ldw	r2,-32716(gp)
   56838:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   5683c:	d0e00d17 	ldw	r3,-32716(gp)
   56840:	e0bfff17 	ldw	r2,-4(fp)
   56844:	1885883a 	add	r2,r3,r2
   56848:	d0a00d15 	stw	r2,-32716(gp)
   5684c:	e0bffa17 	ldw	r2,-24(fp)
   56850:	e0bffe15 	stw	r2,-8(fp)
   56854:	e0bffe17 	ldw	r2,-8(fp)
   56858:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   5685c:	e0bffb17 	ldw	r2,-20(fp)
} 
   56860:	e037883a 	mov	sp,fp
   56864:	df000017 	ldw	fp,0(sp)
   56868:	dec00104 	addi	sp,sp,4
   5686c:	f800283a 	ret

00056870 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   56870:	defffa04 	addi	sp,sp,-24
   56874:	df000515 	stw	fp,20(sp)
   56878:	df000504 	addi	fp,sp,20
   5687c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   56880:	0005303a 	rdctl	r2,status
   56884:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   56888:	e0fffc17 	ldw	r3,-16(fp)
   5688c:	00bfff84 	movi	r2,-2
   56890:	1884703a 	and	r2,r3,r2
   56894:	1001703a 	wrctl	status,r2
  
  return context;
   56898:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   5689c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   568a0:	e0bfff17 	ldw	r2,-4(fp)
   568a4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   568a8:	e0bffd17 	ldw	r2,-12(fp)
   568ac:	10800017 	ldw	r2,0(r2)
   568b0:	e0fffd17 	ldw	r3,-12(fp)
   568b4:	18c00117 	ldw	r3,4(r3)
   568b8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   568bc:	e0bffd17 	ldw	r2,-12(fp)
   568c0:	10800117 	ldw	r2,4(r2)
   568c4:	e0fffd17 	ldw	r3,-12(fp)
   568c8:	18c00017 	ldw	r3,0(r3)
   568cc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   568d0:	e0bffd17 	ldw	r2,-12(fp)
   568d4:	e0fffd17 	ldw	r3,-12(fp)
   568d8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   568dc:	e0bffd17 	ldw	r2,-12(fp)
   568e0:	e0fffd17 	ldw	r3,-12(fp)
   568e4:	10c00015 	stw	r3,0(r2)
   568e8:	e0bffb17 	ldw	r2,-20(fp)
   568ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   568f0:	e0bffe17 	ldw	r2,-8(fp)
   568f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   568f8:	e037883a 	mov	sp,fp
   568fc:	df000017 	ldw	fp,0(sp)
   56900:	dec00104 	addi	sp,sp,4
   56904:	f800283a 	ret

00056908 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   56908:	defffb04 	addi	sp,sp,-20
   5690c:	dfc00415 	stw	ra,16(sp)
   56910:	df000315 	stw	fp,12(sp)
   56914:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   56918:	d0a00e17 	ldw	r2,-32712(gp)
   5691c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   56920:	d0a6d817 	ldw	r2,-25760(gp)
   56924:	10800044 	addi	r2,r2,1
   56928:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   5692c:	00002e06 	br	569e8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   56930:	e0bffd17 	ldw	r2,-12(fp)
   56934:	10800017 	ldw	r2,0(r2)
   56938:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   5693c:	e0bffd17 	ldw	r2,-12(fp)
   56940:	10800403 	ldbu	r2,16(r2)
   56944:	10803fcc 	andi	r2,r2,255
   56948:	10000426 	beq	r2,zero,5695c <alt_tick+0x54>
   5694c:	d0a6d817 	ldw	r2,-25760(gp)
   56950:	1000021e 	bne	r2,zero,5695c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   56954:	e0bffd17 	ldw	r2,-12(fp)
   56958:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   5695c:	e0bffd17 	ldw	r2,-12(fp)
   56960:	10800217 	ldw	r2,8(r2)
   56964:	d0e6d817 	ldw	r3,-25760(gp)
   56968:	18801d36 	bltu	r3,r2,569e0 <alt_tick+0xd8>
   5696c:	e0bffd17 	ldw	r2,-12(fp)
   56970:	10800403 	ldbu	r2,16(r2)
   56974:	10803fcc 	andi	r2,r2,255
   56978:	1000191e 	bne	r2,zero,569e0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   5697c:	e0bffd17 	ldw	r2,-12(fp)
   56980:	10800317 	ldw	r2,12(r2)
   56984:	e0fffd17 	ldw	r3,-12(fp)
   56988:	18c00517 	ldw	r3,20(r3)
   5698c:	1809883a 	mov	r4,r3
   56990:	103ee83a 	callr	r2
   56994:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   56998:	e0bfff17 	ldw	r2,-4(fp)
   5699c:	1000031e 	bne	r2,zero,569ac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   569a0:	e13ffd17 	ldw	r4,-12(fp)
   569a4:	00568700 	call	56870 <alt_alarm_stop>
   569a8:	00000d06 	br	569e0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   569ac:	e0bffd17 	ldw	r2,-12(fp)
   569b0:	10c00217 	ldw	r3,8(r2)
   569b4:	e0bfff17 	ldw	r2,-4(fp)
   569b8:	1887883a 	add	r3,r3,r2
   569bc:	e0bffd17 	ldw	r2,-12(fp)
   569c0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   569c4:	e0bffd17 	ldw	r2,-12(fp)
   569c8:	10c00217 	ldw	r3,8(r2)
   569cc:	d0a6d817 	ldw	r2,-25760(gp)
   569d0:	1880032e 	bgeu	r3,r2,569e0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   569d4:	e0bffd17 	ldw	r2,-12(fp)
   569d8:	00c00044 	movi	r3,1
   569dc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   569e0:	e0bffe17 	ldw	r2,-8(fp)
   569e4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   569e8:	e0fffd17 	ldw	r3,-12(fp)
   569ec:	d0a00e04 	addi	r2,gp,-32712
   569f0:	18bfcf1e 	bne	r3,r2,56930 <__alt_data_end+0xffff1f40>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   569f4:	0001883a 	nop
}
   569f8:	e037883a 	mov	sp,fp
   569fc:	dfc00117 	ldw	ra,4(sp)
   56a00:	df000017 	ldw	fp,0(sp)
   56a04:	dec00204 	addi	sp,sp,8
   56a08:	f800283a 	ret

00056a0c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   56a0c:	defffd04 	addi	sp,sp,-12
   56a10:	dfc00215 	stw	ra,8(sp)
   56a14:	df000115 	stw	fp,4(sp)
   56a18:	df000104 	addi	fp,sp,4
   56a1c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   56a20:	e13fff17 	ldw	r4,-4(fp)
   56a24:	00578e00 	call	578e0 <alt_busy_sleep>
}
   56a28:	e037883a 	mov	sp,fp
   56a2c:	dfc00117 	ldw	ra,4(sp)
   56a30:	df000017 	ldw	fp,0(sp)
   56a34:	dec00204 	addi	sp,sp,8
   56a38:	f800283a 	ret

00056a3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   56a3c:	defffe04 	addi	sp,sp,-8
   56a40:	dfc00115 	stw	ra,4(sp)
   56a44:	df000015 	stw	fp,0(sp)
   56a48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   56a4c:	008001b4 	movhi	r2,6
   56a50:	10abcf04 	addi	r2,r2,-20676
   56a54:	10800017 	ldw	r2,0(r2)
   56a58:	10000526 	beq	r2,zero,56a70 <alt_get_errno+0x34>
   56a5c:	008001b4 	movhi	r2,6
   56a60:	10abcf04 	addi	r2,r2,-20676
   56a64:	10800017 	ldw	r2,0(r2)
   56a68:	103ee83a 	callr	r2
   56a6c:	00000206 	br	56a78 <alt_get_errno+0x3c>
   56a70:	008001b4 	movhi	r2,6
   56a74:	10b29304 	addi	r2,r2,-13748
}
   56a78:	e037883a 	mov	sp,fp
   56a7c:	dfc00117 	ldw	ra,4(sp)
   56a80:	df000017 	ldw	fp,0(sp)
   56a84:	dec00204 	addi	sp,sp,8
   56a88:	f800283a 	ret

00056a8c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   56a8c:	defff904 	addi	sp,sp,-28
   56a90:	dfc00615 	stw	ra,24(sp)
   56a94:	df000515 	stw	fp,20(sp)
   56a98:	df000504 	addi	fp,sp,20
   56a9c:	e13ffd15 	stw	r4,-12(fp)
   56aa0:	e17ffe15 	stw	r5,-8(fp)
   56aa4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   56aa8:	e0bffd17 	ldw	r2,-12(fp)
   56aac:	10000816 	blt	r2,zero,56ad0 <write+0x44>
   56ab0:	e13ffd17 	ldw	r4,-12(fp)
   56ab4:	01400304 	movi	r5,12
   56ab8:	00453200 	call	45320 <__mulsi3>
   56abc:	1007883a 	mov	r3,r2
   56ac0:	008001b4 	movhi	r2,6
   56ac4:	10a74b04 	addi	r2,r2,-25300
   56ac8:	1885883a 	add	r2,r3,r2
   56acc:	00000106 	br	56ad4 <write+0x48>
   56ad0:	0005883a 	mov	r2,zero
   56ad4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   56ad8:	e0bffb17 	ldw	r2,-20(fp)
   56adc:	10002126 	beq	r2,zero,56b64 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   56ae0:	e0bffb17 	ldw	r2,-20(fp)
   56ae4:	10800217 	ldw	r2,8(r2)
   56ae8:	108000cc 	andi	r2,r2,3
   56aec:	10001826 	beq	r2,zero,56b50 <write+0xc4>
   56af0:	e0bffb17 	ldw	r2,-20(fp)
   56af4:	10800017 	ldw	r2,0(r2)
   56af8:	10800617 	ldw	r2,24(r2)
   56afc:	10001426 	beq	r2,zero,56b50 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   56b00:	e0bffb17 	ldw	r2,-20(fp)
   56b04:	10800017 	ldw	r2,0(r2)
   56b08:	10800617 	ldw	r2,24(r2)
   56b0c:	e0ffff17 	ldw	r3,-4(fp)
   56b10:	e13ffb17 	ldw	r4,-20(fp)
   56b14:	e17ffe17 	ldw	r5,-8(fp)
   56b18:	180d883a 	mov	r6,r3
   56b1c:	103ee83a 	callr	r2
   56b20:	e0bffc15 	stw	r2,-16(fp)
   56b24:	e0bffc17 	ldw	r2,-16(fp)
   56b28:	1000070e 	bge	r2,zero,56b48 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   56b2c:	0056a3c0 	call	56a3c <alt_get_errno>
   56b30:	1007883a 	mov	r3,r2
   56b34:	e0bffc17 	ldw	r2,-16(fp)
   56b38:	0085c83a 	sub	r2,zero,r2
   56b3c:	18800015 	stw	r2,0(r3)
        return -1;
   56b40:	00bfffc4 	movi	r2,-1
   56b44:	00000c06 	br	56b78 <write+0xec>
      }
      return rval;
   56b48:	e0bffc17 	ldw	r2,-16(fp)
   56b4c:	00000a06 	br	56b78 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   56b50:	0056a3c0 	call	56a3c <alt_get_errno>
   56b54:	1007883a 	mov	r3,r2
   56b58:	00800344 	movi	r2,13
   56b5c:	18800015 	stw	r2,0(r3)
   56b60:	00000406 	br	56b74 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   56b64:	0056a3c0 	call	56a3c <alt_get_errno>
   56b68:	1007883a 	mov	r3,r2
   56b6c:	00801444 	movi	r2,81
   56b70:	18800015 	stw	r2,0(r3)
  }
  return -1;
   56b74:	00bfffc4 	movi	r2,-1
}
   56b78:	e037883a 	mov	sp,fp
   56b7c:	dfc00117 	ldw	ra,4(sp)
   56b80:	df000017 	ldw	fp,0(sp)
   56b84:	dec00204 	addi	sp,sp,8
   56b88:	f800283a 	ret

00056b8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   56b8c:	defffd04 	addi	sp,sp,-12
   56b90:	dfc00215 	stw	ra,8(sp)
   56b94:	df000115 	stw	fp,4(sp)
   56b98:	df000104 	addi	fp,sp,4
   56b9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   56ba0:	e13fff17 	ldw	r4,-4(fp)
   56ba4:	014001b4 	movhi	r5,6
   56ba8:	296bcc04 	addi	r5,r5,-20688
   56bac:	0057aa40 	call	57aa4 <alt_dev_llist_insert>
}
   56bb0:	e037883a 	mov	sp,fp
   56bb4:	dfc00117 	ldw	ra,4(sp)
   56bb8:	df000017 	ldw	fp,0(sp)
   56bbc:	dec00204 	addi	sp,sp,8
   56bc0:	f800283a 	ret

00056bc4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   56bc4:	defffd04 	addi	sp,sp,-12
   56bc8:	dfc00215 	stw	ra,8(sp)
   56bcc:	df000115 	stw	fp,4(sp)
   56bd0:	df000104 	addi	fp,sp,4
   56bd4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   56bd8:	00582e80 	call	582e8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   56bdc:	00800044 	movi	r2,1
   56be0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   56be4:	e037883a 	mov	sp,fp
   56be8:	dfc00117 	ldw	ra,4(sp)
   56bec:	df000017 	ldw	fp,0(sp)
   56bf0:	dec00204 	addi	sp,sp,8
   56bf4:	f800283a 	ret

00056bf8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   56bf8:	defffe04 	addi	sp,sp,-8
   56bfc:	dfc00115 	stw	ra,4(sp)
   56c00:	df000015 	stw	fp,0(sp)
   56c04:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   56c08:	01000234 	movhi	r4,8
   56c0c:	21040004 	addi	r4,r4,4096
   56c10:	000b883a 	mov	r5,zero
   56c14:	000d883a 	mov	r6,zero
   56c18:	01c0fa04 	movi	r7,1000
   56c1c:	00577180 	call	57718 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   56c20:	010001b4 	movhi	r4,6
   56c24:	2127b504 	addi	r4,r4,-24876
   56c28:	000b883a 	mov	r5,zero
   56c2c:	01800044 	movi	r6,1
   56c30:	0056dbc0 	call	56dbc <altera_avalon_jtag_uart_init>
   56c34:	010001b4 	movhi	r4,6
   56c38:	2127ab04 	addi	r4,r4,-24916
   56c3c:	0056b8c0 	call	56b8c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   56c40:	0001883a 	nop
}
   56c44:	e037883a 	mov	sp,fp
   56c48:	dfc00117 	ldw	ra,4(sp)
   56c4c:	df000017 	ldw	fp,0(sp)
   56c50:	dec00204 	addi	sp,sp,8
   56c54:	f800283a 	ret

00056c58 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   56c58:	defffa04 	addi	sp,sp,-24
   56c5c:	dfc00515 	stw	ra,20(sp)
   56c60:	df000415 	stw	fp,16(sp)
   56c64:	df000404 	addi	fp,sp,16
   56c68:	e13ffd15 	stw	r4,-12(fp)
   56c6c:	e17ffe15 	stw	r5,-8(fp)
   56c70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   56c74:	e0bffd17 	ldw	r2,-12(fp)
   56c78:	10800017 	ldw	r2,0(r2)
   56c7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   56c80:	e0bffc17 	ldw	r2,-16(fp)
   56c84:	10c00a04 	addi	r3,r2,40
   56c88:	e0bffd17 	ldw	r2,-12(fp)
   56c8c:	10800217 	ldw	r2,8(r2)
   56c90:	1809883a 	mov	r4,r3
   56c94:	e17ffe17 	ldw	r5,-8(fp)
   56c98:	e1bfff17 	ldw	r6,-4(fp)
   56c9c:	100f883a 	mov	r7,r2
   56ca0:	00572800 	call	57280 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   56ca4:	e037883a 	mov	sp,fp
   56ca8:	dfc00117 	ldw	ra,4(sp)
   56cac:	df000017 	ldw	fp,0(sp)
   56cb0:	dec00204 	addi	sp,sp,8
   56cb4:	f800283a 	ret

00056cb8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   56cb8:	defffa04 	addi	sp,sp,-24
   56cbc:	dfc00515 	stw	ra,20(sp)
   56cc0:	df000415 	stw	fp,16(sp)
   56cc4:	df000404 	addi	fp,sp,16
   56cc8:	e13ffd15 	stw	r4,-12(fp)
   56ccc:	e17ffe15 	stw	r5,-8(fp)
   56cd0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   56cd4:	e0bffd17 	ldw	r2,-12(fp)
   56cd8:	10800017 	ldw	r2,0(r2)
   56cdc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   56ce0:	e0bffc17 	ldw	r2,-16(fp)
   56ce4:	10c00a04 	addi	r3,r2,40
   56ce8:	e0bffd17 	ldw	r2,-12(fp)
   56cec:	10800217 	ldw	r2,8(r2)
   56cf0:	1809883a 	mov	r4,r3
   56cf4:	e17ffe17 	ldw	r5,-8(fp)
   56cf8:	e1bfff17 	ldw	r6,-4(fp)
   56cfc:	100f883a 	mov	r7,r2
   56d00:	005748c0 	call	5748c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   56d04:	e037883a 	mov	sp,fp
   56d08:	dfc00117 	ldw	ra,4(sp)
   56d0c:	df000017 	ldw	fp,0(sp)
   56d10:	dec00204 	addi	sp,sp,8
   56d14:	f800283a 	ret

00056d18 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   56d18:	defffc04 	addi	sp,sp,-16
   56d1c:	dfc00315 	stw	ra,12(sp)
   56d20:	df000215 	stw	fp,8(sp)
   56d24:	df000204 	addi	fp,sp,8
   56d28:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   56d2c:	e0bfff17 	ldw	r2,-4(fp)
   56d30:	10800017 	ldw	r2,0(r2)
   56d34:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   56d38:	e0bffe17 	ldw	r2,-8(fp)
   56d3c:	10c00a04 	addi	r3,r2,40
   56d40:	e0bfff17 	ldw	r2,-4(fp)
   56d44:	10800217 	ldw	r2,8(r2)
   56d48:	1809883a 	mov	r4,r3
   56d4c:	100b883a 	mov	r5,r2
   56d50:	005712c0 	call	5712c <altera_avalon_jtag_uart_close>
}
   56d54:	e037883a 	mov	sp,fp
   56d58:	dfc00117 	ldw	ra,4(sp)
   56d5c:	df000017 	ldw	fp,0(sp)
   56d60:	dec00204 	addi	sp,sp,8
   56d64:	f800283a 	ret

00056d68 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   56d68:	defffa04 	addi	sp,sp,-24
   56d6c:	dfc00515 	stw	ra,20(sp)
   56d70:	df000415 	stw	fp,16(sp)
   56d74:	df000404 	addi	fp,sp,16
   56d78:	e13ffd15 	stw	r4,-12(fp)
   56d7c:	e17ffe15 	stw	r5,-8(fp)
   56d80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   56d84:	e0bffd17 	ldw	r2,-12(fp)
   56d88:	10800017 	ldw	r2,0(r2)
   56d8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   56d90:	e0bffc17 	ldw	r2,-16(fp)
   56d94:	10800a04 	addi	r2,r2,40
   56d98:	1009883a 	mov	r4,r2
   56d9c:	e17ffe17 	ldw	r5,-8(fp)
   56da0:	e1bfff17 	ldw	r6,-4(fp)
   56da4:	00571940 	call	57194 <altera_avalon_jtag_uart_ioctl>
}
   56da8:	e037883a 	mov	sp,fp
   56dac:	dfc00117 	ldw	ra,4(sp)
   56db0:	df000017 	ldw	fp,0(sp)
   56db4:	dec00204 	addi	sp,sp,8
   56db8:	f800283a 	ret

00056dbc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   56dbc:	defffa04 	addi	sp,sp,-24
   56dc0:	dfc00515 	stw	ra,20(sp)
   56dc4:	df000415 	stw	fp,16(sp)
   56dc8:	df000404 	addi	fp,sp,16
   56dcc:	e13ffd15 	stw	r4,-12(fp)
   56dd0:	e17ffe15 	stw	r5,-8(fp)
   56dd4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   56dd8:	e0bffd17 	ldw	r2,-12(fp)
   56ddc:	00c00044 	movi	r3,1
   56de0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   56de4:	e0bffd17 	ldw	r2,-12(fp)
   56de8:	10800017 	ldw	r2,0(r2)
   56dec:	10800104 	addi	r2,r2,4
   56df0:	1007883a 	mov	r3,r2
   56df4:	e0bffd17 	ldw	r2,-12(fp)
   56df8:	10800817 	ldw	r2,32(r2)
   56dfc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   56e00:	e0fffe17 	ldw	r3,-8(fp)
   56e04:	e0bfff17 	ldw	r2,-4(fp)
   56e08:	d8000015 	stw	zero,0(sp)
   56e0c:	1809883a 	mov	r4,r3
   56e10:	100b883a 	mov	r5,r2
   56e14:	01800174 	movhi	r6,5
   56e18:	319ba004 	addi	r6,r6,28288
   56e1c:	e1fffd17 	ldw	r7,-12(fp)
   56e20:	0057c1c0 	call	57c1c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   56e24:	e0bffd17 	ldw	r2,-12(fp)
   56e28:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   56e2c:	e0bffd17 	ldw	r2,-12(fp)
   56e30:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   56e34:	008001b4 	movhi	r2,6
   56e38:	10b29a04 	addi	r2,r2,-13720
   56e3c:	10800017 	ldw	r2,0(r2)
   56e40:	1809883a 	mov	r4,r3
   56e44:	100b883a 	mov	r5,r2
   56e48:	01800174 	movhi	r6,5
   56e4c:	319c2104 	addi	r6,r6,28804
   56e50:	e1fffd17 	ldw	r7,-12(fp)
   56e54:	00577a00 	call	577a0 <alt_alarm_start>
   56e58:	1000040e 	bge	r2,zero,56e6c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   56e5c:	e0fffd17 	ldw	r3,-12(fp)
   56e60:	00a00034 	movhi	r2,32768
   56e64:	10bfffc4 	addi	r2,r2,-1
   56e68:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   56e6c:	e037883a 	mov	sp,fp
   56e70:	dfc00117 	ldw	ra,4(sp)
   56e74:	df000017 	ldw	fp,0(sp)
   56e78:	dec00204 	addi	sp,sp,8
   56e7c:	f800283a 	ret

00056e80 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   56e80:	defff804 	addi	sp,sp,-32
   56e84:	df000715 	stw	fp,28(sp)
   56e88:	df000704 	addi	fp,sp,28
   56e8c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   56e90:	e0bfff17 	ldw	r2,-4(fp)
   56e94:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   56e98:	e0bffb17 	ldw	r2,-20(fp)
   56e9c:	10800017 	ldw	r2,0(r2)
   56ea0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   56ea4:	e0bffc17 	ldw	r2,-16(fp)
   56ea8:	10800104 	addi	r2,r2,4
   56eac:	10800037 	ldwio	r2,0(r2)
   56eb0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   56eb4:	e0bffd17 	ldw	r2,-12(fp)
   56eb8:	1080c00c 	andi	r2,r2,768
   56ebc:	1000011e 	bne	r2,zero,56ec4 <altera_avalon_jtag_uart_irq+0x44>
      break;
   56ec0:	00006c06 	br	57074 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   56ec4:	e0bffd17 	ldw	r2,-12(fp)
   56ec8:	1080400c 	andi	r2,r2,256
   56ecc:	10003426 	beq	r2,zero,56fa0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   56ed0:	00800074 	movhi	r2,1
   56ed4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   56ed8:	e0bffb17 	ldw	r2,-20(fp)
   56edc:	10800a17 	ldw	r2,40(r2)
   56ee0:	10800044 	addi	r2,r2,1
   56ee4:	1081ffcc 	andi	r2,r2,2047
   56ee8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   56eec:	e0bffb17 	ldw	r2,-20(fp)
   56ef0:	10c00b17 	ldw	r3,44(r2)
   56ef4:	e0bffe17 	ldw	r2,-8(fp)
   56ef8:	1880011e 	bne	r3,r2,56f00 <altera_avalon_jtag_uart_irq+0x80>
          break;
   56efc:	00001606 	br	56f58 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   56f00:	e0bffc17 	ldw	r2,-16(fp)
   56f04:	10800037 	ldwio	r2,0(r2)
   56f08:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   56f0c:	e0bff917 	ldw	r2,-28(fp)
   56f10:	10a0000c 	andi	r2,r2,32768
   56f14:	1000011e 	bne	r2,zero,56f1c <altera_avalon_jtag_uart_irq+0x9c>
          break;
   56f18:	00000f06 	br	56f58 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   56f1c:	e0bffb17 	ldw	r2,-20(fp)
   56f20:	10800a17 	ldw	r2,40(r2)
   56f24:	e0fff917 	ldw	r3,-28(fp)
   56f28:	1809883a 	mov	r4,r3
   56f2c:	e0fffb17 	ldw	r3,-20(fp)
   56f30:	1885883a 	add	r2,r3,r2
   56f34:	10800e04 	addi	r2,r2,56
   56f38:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   56f3c:	e0bffb17 	ldw	r2,-20(fp)
   56f40:	10800a17 	ldw	r2,40(r2)
   56f44:	10800044 	addi	r2,r2,1
   56f48:	10c1ffcc 	andi	r3,r2,2047
   56f4c:	e0bffb17 	ldw	r2,-20(fp)
   56f50:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   56f54:	003fe006 	br	56ed8 <__alt_data_end+0xffff24e8>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   56f58:	e0bff917 	ldw	r2,-28(fp)
   56f5c:	10bfffec 	andhi	r2,r2,65535
   56f60:	10000f26 	beq	r2,zero,56fa0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   56f64:	e0bffb17 	ldw	r2,-20(fp)
   56f68:	10c00817 	ldw	r3,32(r2)
   56f6c:	00bfff84 	movi	r2,-2
   56f70:	1886703a 	and	r3,r3,r2
   56f74:	e0bffb17 	ldw	r2,-20(fp)
   56f78:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   56f7c:	e0bffc17 	ldw	r2,-16(fp)
   56f80:	10800104 	addi	r2,r2,4
   56f84:	1007883a 	mov	r3,r2
   56f88:	e0bffb17 	ldw	r2,-20(fp)
   56f8c:	10800817 	ldw	r2,32(r2)
   56f90:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   56f94:	e0bffc17 	ldw	r2,-16(fp)
   56f98:	10800104 	addi	r2,r2,4
   56f9c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   56fa0:	e0bffd17 	ldw	r2,-12(fp)
   56fa4:	1080800c 	andi	r2,r2,512
   56fa8:	10003126 	beq	r2,zero,57070 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   56fac:	e0bffd17 	ldw	r2,-12(fp)
   56fb0:	1004d43a 	srli	r2,r2,16
   56fb4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   56fb8:	00001406 	br	5700c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   56fbc:	e0bffc17 	ldw	r2,-16(fp)
   56fc0:	e0fffb17 	ldw	r3,-20(fp)
   56fc4:	18c00d17 	ldw	r3,52(r3)
   56fc8:	e13ffb17 	ldw	r4,-20(fp)
   56fcc:	20c7883a 	add	r3,r4,r3
   56fd0:	18c20e04 	addi	r3,r3,2104
   56fd4:	18c00003 	ldbu	r3,0(r3)
   56fd8:	18c03fcc 	andi	r3,r3,255
   56fdc:	18c0201c 	xori	r3,r3,128
   56fe0:	18ffe004 	addi	r3,r3,-128
   56fe4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   56fe8:	e0bffb17 	ldw	r2,-20(fp)
   56fec:	10800d17 	ldw	r2,52(r2)
   56ff0:	10800044 	addi	r2,r2,1
   56ff4:	10c1ffcc 	andi	r3,r2,2047
   56ff8:	e0bffb17 	ldw	r2,-20(fp)
   56ffc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   57000:	e0bffa17 	ldw	r2,-24(fp)
   57004:	10bfffc4 	addi	r2,r2,-1
   57008:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   5700c:	e0bffa17 	ldw	r2,-24(fp)
   57010:	10000526 	beq	r2,zero,57028 <altera_avalon_jtag_uart_irq+0x1a8>
   57014:	e0bffb17 	ldw	r2,-20(fp)
   57018:	10c00d17 	ldw	r3,52(r2)
   5701c:	e0bffb17 	ldw	r2,-20(fp)
   57020:	10800c17 	ldw	r2,48(r2)
   57024:	18bfe51e 	bne	r3,r2,56fbc <__alt_data_end+0xffff25cc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   57028:	e0bffa17 	ldw	r2,-24(fp)
   5702c:	10001026 	beq	r2,zero,57070 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   57030:	e0bffb17 	ldw	r2,-20(fp)
   57034:	10c00817 	ldw	r3,32(r2)
   57038:	00bfff44 	movi	r2,-3
   5703c:	1886703a 	and	r3,r3,r2
   57040:	e0bffb17 	ldw	r2,-20(fp)
   57044:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   57048:	e0bffb17 	ldw	r2,-20(fp)
   5704c:	10800017 	ldw	r2,0(r2)
   57050:	10800104 	addi	r2,r2,4
   57054:	1007883a 	mov	r3,r2
   57058:	e0bffb17 	ldw	r2,-20(fp)
   5705c:	10800817 	ldw	r2,32(r2)
   57060:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   57064:	e0bffc17 	ldw	r2,-16(fp)
   57068:	10800104 	addi	r2,r2,4
   5706c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   57070:	003f8c06 	br	56ea4 <__alt_data_end+0xffff24b4>
}
   57074:	e037883a 	mov	sp,fp
   57078:	df000017 	ldw	fp,0(sp)
   5707c:	dec00104 	addi	sp,sp,4
   57080:	f800283a 	ret

00057084 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   57084:	defff804 	addi	sp,sp,-32
   57088:	df000715 	stw	fp,28(sp)
   5708c:	df000704 	addi	fp,sp,28
   57090:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   57094:	e0bffb17 	ldw	r2,-20(fp)
   57098:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   5709c:	e0bff917 	ldw	r2,-28(fp)
   570a0:	10800017 	ldw	r2,0(r2)
   570a4:	10800104 	addi	r2,r2,4
   570a8:	10800037 	ldwio	r2,0(r2)
   570ac:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   570b0:	e0bffa17 	ldw	r2,-24(fp)
   570b4:	1081000c 	andi	r2,r2,1024
   570b8:	10000b26 	beq	r2,zero,570e8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   570bc:	e0bff917 	ldw	r2,-28(fp)
   570c0:	10800017 	ldw	r2,0(r2)
   570c4:	10800104 	addi	r2,r2,4
   570c8:	1007883a 	mov	r3,r2
   570cc:	e0bff917 	ldw	r2,-28(fp)
   570d0:	10800817 	ldw	r2,32(r2)
   570d4:	10810014 	ori	r2,r2,1024
   570d8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   570dc:	e0bff917 	ldw	r2,-28(fp)
   570e0:	10000915 	stw	zero,36(r2)
   570e4:	00000a06 	br	57110 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   570e8:	e0bff917 	ldw	r2,-28(fp)
   570ec:	10c00917 	ldw	r3,36(r2)
   570f0:	00a00034 	movhi	r2,32768
   570f4:	10bfff04 	addi	r2,r2,-4
   570f8:	10c00536 	bltu	r2,r3,57110 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   570fc:	e0bff917 	ldw	r2,-28(fp)
   57100:	10800917 	ldw	r2,36(r2)
   57104:	10c00044 	addi	r3,r2,1
   57108:	e0bff917 	ldw	r2,-28(fp)
   5710c:	10c00915 	stw	r3,36(r2)
   57110:	008001b4 	movhi	r2,6
   57114:	10b29a04 	addi	r2,r2,-13720
   57118:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   5711c:	e037883a 	mov	sp,fp
   57120:	df000017 	ldw	fp,0(sp)
   57124:	dec00104 	addi	sp,sp,4
   57128:	f800283a 	ret

0005712c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   5712c:	defffd04 	addi	sp,sp,-12
   57130:	df000215 	stw	fp,8(sp)
   57134:	df000204 	addi	fp,sp,8
   57138:	e13ffe15 	stw	r4,-8(fp)
   5713c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   57140:	00000506 	br	57158 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   57144:	e0bfff17 	ldw	r2,-4(fp)
   57148:	1090000c 	andi	r2,r2,16384
   5714c:	10000226 	beq	r2,zero,57158 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   57150:	00bffd44 	movi	r2,-11
   57154:	00000b06 	br	57184 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   57158:	e0bffe17 	ldw	r2,-8(fp)
   5715c:	10c00d17 	ldw	r3,52(r2)
   57160:	e0bffe17 	ldw	r2,-8(fp)
   57164:	10800c17 	ldw	r2,48(r2)
   57168:	18800526 	beq	r3,r2,57180 <altera_avalon_jtag_uart_close+0x54>
   5716c:	e0bffe17 	ldw	r2,-8(fp)
   57170:	10c00917 	ldw	r3,36(r2)
   57174:	e0bffe17 	ldw	r2,-8(fp)
   57178:	10800117 	ldw	r2,4(r2)
   5717c:	18bff136 	bltu	r3,r2,57144 <__alt_data_end+0xffff2754>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   57180:	0005883a 	mov	r2,zero
}
   57184:	e037883a 	mov	sp,fp
   57188:	df000017 	ldw	fp,0(sp)
   5718c:	dec00104 	addi	sp,sp,4
   57190:	f800283a 	ret

00057194 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   57194:	defffa04 	addi	sp,sp,-24
   57198:	df000515 	stw	fp,20(sp)
   5719c:	df000504 	addi	fp,sp,20
   571a0:	e13ffd15 	stw	r4,-12(fp)
   571a4:	e17ffe15 	stw	r5,-8(fp)
   571a8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   571ac:	00bff9c4 	movi	r2,-25
   571b0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   571b4:	e0bffe17 	ldw	r2,-8(fp)
   571b8:	10da8060 	cmpeqi	r3,r2,27137
   571bc:	1800031e 	bne	r3,zero,571cc <altera_avalon_jtag_uart_ioctl+0x38>
   571c0:	109a80a0 	cmpeqi	r2,r2,27138
   571c4:	1000191e 	bne	r2,zero,5722c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   571c8:	00002806 	br	5726c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   571cc:	e0bffd17 	ldw	r2,-12(fp)
   571d0:	10c00117 	ldw	r3,4(r2)
   571d4:	00a00034 	movhi	r2,32768
   571d8:	10bfffc4 	addi	r2,r2,-1
   571dc:	18801226 	beq	r3,r2,57228 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   571e0:	e0bfff17 	ldw	r2,-4(fp)
   571e4:	10800017 	ldw	r2,0(r2)
   571e8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   571ec:	e0bffc17 	ldw	r2,-16(fp)
   571f0:	10800090 	cmplti	r2,r2,2
   571f4:	1000061e 	bne	r2,zero,57210 <altera_avalon_jtag_uart_ioctl+0x7c>
   571f8:	e0fffc17 	ldw	r3,-16(fp)
   571fc:	00a00034 	movhi	r2,32768
   57200:	10bfffc4 	addi	r2,r2,-1
   57204:	18800226 	beq	r3,r2,57210 <altera_avalon_jtag_uart_ioctl+0x7c>
   57208:	e0bffc17 	ldw	r2,-16(fp)
   5720c:	00000206 	br	57218 <altera_avalon_jtag_uart_ioctl+0x84>
   57210:	00a00034 	movhi	r2,32768
   57214:	10bfff84 	addi	r2,r2,-2
   57218:	e0fffd17 	ldw	r3,-12(fp)
   5721c:	18800115 	stw	r2,4(r3)
      rc = 0;
   57220:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   57224:	00001106 	br	5726c <altera_avalon_jtag_uart_ioctl+0xd8>
   57228:	00001006 	br	5726c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   5722c:	e0bffd17 	ldw	r2,-12(fp)
   57230:	10c00117 	ldw	r3,4(r2)
   57234:	00a00034 	movhi	r2,32768
   57238:	10bfffc4 	addi	r2,r2,-1
   5723c:	18800a26 	beq	r3,r2,57268 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   57240:	e0bffd17 	ldw	r2,-12(fp)
   57244:	10c00917 	ldw	r3,36(r2)
   57248:	e0bffd17 	ldw	r2,-12(fp)
   5724c:	10800117 	ldw	r2,4(r2)
   57250:	1885803a 	cmpltu	r2,r3,r2
   57254:	10c03fcc 	andi	r3,r2,255
   57258:	e0bfff17 	ldw	r2,-4(fp)
   5725c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   57260:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   57264:	00000006 	br	57268 <altera_avalon_jtag_uart_ioctl+0xd4>
   57268:	0001883a 	nop

  default:
    break;
  }

  return rc;
   5726c:	e0bffb17 	ldw	r2,-20(fp)
}
   57270:	e037883a 	mov	sp,fp
   57274:	df000017 	ldw	fp,0(sp)
   57278:	dec00104 	addi	sp,sp,4
   5727c:	f800283a 	ret

00057280 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   57280:	defff304 	addi	sp,sp,-52
   57284:	dfc00c15 	stw	ra,48(sp)
   57288:	df000b15 	stw	fp,44(sp)
   5728c:	df000b04 	addi	fp,sp,44
   57290:	e13ffc15 	stw	r4,-16(fp)
   57294:	e17ffd15 	stw	r5,-12(fp)
   57298:	e1bffe15 	stw	r6,-8(fp)
   5729c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   572a0:	e0bffd17 	ldw	r2,-12(fp)
   572a4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   572a8:	00004906 	br	573d0 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   572ac:	e0bffc17 	ldw	r2,-16(fp)
   572b0:	10800a17 	ldw	r2,40(r2)
   572b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   572b8:	e0bffc17 	ldw	r2,-16(fp)
   572bc:	10800b17 	ldw	r2,44(r2)
   572c0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   572c4:	e0fff717 	ldw	r3,-36(fp)
   572c8:	e0bff817 	ldw	r2,-32(fp)
   572cc:	18800536 	bltu	r3,r2,572e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   572d0:	e0fff717 	ldw	r3,-36(fp)
   572d4:	e0bff817 	ldw	r2,-32(fp)
   572d8:	1885c83a 	sub	r2,r3,r2
   572dc:	e0bff615 	stw	r2,-40(fp)
   572e0:	00000406 	br	572f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   572e4:	00c20004 	movi	r3,2048
   572e8:	e0bff817 	ldw	r2,-32(fp)
   572ec:	1885c83a 	sub	r2,r3,r2
   572f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   572f4:	e0bff617 	ldw	r2,-40(fp)
   572f8:	1000011e 	bne	r2,zero,57300 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   572fc:	00001d06 	br	57374 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   57300:	e0fffe17 	ldw	r3,-8(fp)
   57304:	e0bff617 	ldw	r2,-40(fp)
   57308:	1880022e 	bgeu	r3,r2,57314 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   5730c:	e0bffe17 	ldw	r2,-8(fp)
   57310:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   57314:	e0bff817 	ldw	r2,-32(fp)
   57318:	10800e04 	addi	r2,r2,56
   5731c:	e0fffc17 	ldw	r3,-16(fp)
   57320:	1885883a 	add	r2,r3,r2
   57324:	e13ff517 	ldw	r4,-44(fp)
   57328:	100b883a 	mov	r5,r2
   5732c:	e1bff617 	ldw	r6,-40(fp)
   57330:	00471540 	call	47154 <memcpy>
      ptr   += n;
   57334:	e0fff517 	ldw	r3,-44(fp)
   57338:	e0bff617 	ldw	r2,-40(fp)
   5733c:	1885883a 	add	r2,r3,r2
   57340:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   57344:	e0fffe17 	ldw	r3,-8(fp)
   57348:	e0bff617 	ldw	r2,-40(fp)
   5734c:	1885c83a 	sub	r2,r3,r2
   57350:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   57354:	e0fff817 	ldw	r3,-32(fp)
   57358:	e0bff617 	ldw	r2,-40(fp)
   5735c:	1885883a 	add	r2,r3,r2
   57360:	10c1ffcc 	andi	r3,r2,2047
   57364:	e0bffc17 	ldw	r2,-16(fp)
   57368:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   5736c:	e0bffe17 	ldw	r2,-8(fp)
   57370:	00bfce16 	blt	zero,r2,572ac <__alt_data_end+0xffff28bc>

    /* If we read any data then return it */
    if (ptr != buffer)
   57374:	e0fff517 	ldw	r3,-44(fp)
   57378:	e0bffd17 	ldw	r2,-12(fp)
   5737c:	18800126 	beq	r3,r2,57384 <altera_avalon_jtag_uart_read+0x104>
      break;
   57380:	00001506 	br	573d8 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   57384:	e0bfff17 	ldw	r2,-4(fp)
   57388:	1090000c 	andi	r2,r2,16384
   5738c:	10000126 	beq	r2,zero,57394 <altera_avalon_jtag_uart_read+0x114>
      break;
   57390:	00001106 	br	573d8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   57394:	0001883a 	nop
   57398:	e0bffc17 	ldw	r2,-16(fp)
   5739c:	10c00a17 	ldw	r3,40(r2)
   573a0:	e0bff717 	ldw	r2,-36(fp)
   573a4:	1880051e 	bne	r3,r2,573bc <altera_avalon_jtag_uart_read+0x13c>
   573a8:	e0bffc17 	ldw	r2,-16(fp)
   573ac:	10c00917 	ldw	r3,36(r2)
   573b0:	e0bffc17 	ldw	r2,-16(fp)
   573b4:	10800117 	ldw	r2,4(r2)
   573b8:	18bff736 	bltu	r3,r2,57398 <__alt_data_end+0xffff29a8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   573bc:	e0bffc17 	ldw	r2,-16(fp)
   573c0:	10c00a17 	ldw	r3,40(r2)
   573c4:	e0bff717 	ldw	r2,-36(fp)
   573c8:	1880011e 	bne	r3,r2,573d0 <altera_avalon_jtag_uart_read+0x150>
      break;
   573cc:	00000206 	br	573d8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   573d0:	e0bffe17 	ldw	r2,-8(fp)
   573d4:	00bfb516 	blt	zero,r2,572ac <__alt_data_end+0xffff28bc>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   573d8:	e0fff517 	ldw	r3,-44(fp)
   573dc:	e0bffd17 	ldw	r2,-12(fp)
   573e0:	18801826 	beq	r3,r2,57444 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   573e4:	0005303a 	rdctl	r2,status
   573e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   573ec:	e0fffa17 	ldw	r3,-24(fp)
   573f0:	00bfff84 	movi	r2,-2
   573f4:	1884703a 	and	r2,r3,r2
   573f8:	1001703a 	wrctl	status,r2
  
  return context;
   573fc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   57400:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   57404:	e0bffc17 	ldw	r2,-16(fp)
   57408:	10800817 	ldw	r2,32(r2)
   5740c:	10c00054 	ori	r3,r2,1
   57410:	e0bffc17 	ldw	r2,-16(fp)
   57414:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   57418:	e0bffc17 	ldw	r2,-16(fp)
   5741c:	10800017 	ldw	r2,0(r2)
   57420:	10800104 	addi	r2,r2,4
   57424:	1007883a 	mov	r3,r2
   57428:	e0bffc17 	ldw	r2,-16(fp)
   5742c:	10800817 	ldw	r2,32(r2)
   57430:	18800035 	stwio	r2,0(r3)
   57434:	e0bff917 	ldw	r2,-28(fp)
   57438:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5743c:	e0bffb17 	ldw	r2,-20(fp)
   57440:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   57444:	e0fff517 	ldw	r3,-44(fp)
   57448:	e0bffd17 	ldw	r2,-12(fp)
   5744c:	18800426 	beq	r3,r2,57460 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   57450:	e0fff517 	ldw	r3,-44(fp)
   57454:	e0bffd17 	ldw	r2,-12(fp)
   57458:	1885c83a 	sub	r2,r3,r2
   5745c:	00000606 	br	57478 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   57460:	e0bfff17 	ldw	r2,-4(fp)
   57464:	1090000c 	andi	r2,r2,16384
   57468:	10000226 	beq	r2,zero,57474 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   5746c:	00bffd44 	movi	r2,-11
   57470:	00000106 	br	57478 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   57474:	00bffec4 	movi	r2,-5
}
   57478:	e037883a 	mov	sp,fp
   5747c:	dfc00117 	ldw	ra,4(sp)
   57480:	df000017 	ldw	fp,0(sp)
   57484:	dec00204 	addi	sp,sp,8
   57488:	f800283a 	ret

0005748c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   5748c:	defff304 	addi	sp,sp,-52
   57490:	dfc00c15 	stw	ra,48(sp)
   57494:	df000b15 	stw	fp,44(sp)
   57498:	df000b04 	addi	fp,sp,44
   5749c:	e13ffc15 	stw	r4,-16(fp)
   574a0:	e17ffd15 	stw	r5,-12(fp)
   574a4:	e1bffe15 	stw	r6,-8(fp)
   574a8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   574ac:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   574b0:	e0bffd17 	ldw	r2,-12(fp)
   574b4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   574b8:	00003806 	br	5759c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   574bc:	e0bffc17 	ldw	r2,-16(fp)
   574c0:	10800c17 	ldw	r2,48(r2)
   574c4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   574c8:	e0bffc17 	ldw	r2,-16(fp)
   574cc:	10800d17 	ldw	r2,52(r2)
   574d0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   574d4:	e0fff817 	ldw	r3,-32(fp)
   574d8:	e0bff517 	ldw	r2,-44(fp)
   574dc:	1880062e 	bgeu	r3,r2,574f8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   574e0:	e0fff517 	ldw	r3,-44(fp)
   574e4:	e0bff817 	ldw	r2,-32(fp)
   574e8:	1885c83a 	sub	r2,r3,r2
   574ec:	10bfffc4 	addi	r2,r2,-1
   574f0:	e0bff615 	stw	r2,-40(fp)
   574f4:	00000b06 	br	57524 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   574f8:	e0bff517 	ldw	r2,-44(fp)
   574fc:	10000526 	beq	r2,zero,57514 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   57500:	00c20004 	movi	r3,2048
   57504:	e0bff817 	ldw	r2,-32(fp)
   57508:	1885c83a 	sub	r2,r3,r2
   5750c:	e0bff615 	stw	r2,-40(fp)
   57510:	00000406 	br	57524 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   57514:	00c1ffc4 	movi	r3,2047
   57518:	e0bff817 	ldw	r2,-32(fp)
   5751c:	1885c83a 	sub	r2,r3,r2
   57520:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   57524:	e0bff617 	ldw	r2,-40(fp)
   57528:	1000011e 	bne	r2,zero,57530 <altera_avalon_jtag_uart_write+0xa4>
        break;
   5752c:	00001d06 	br	575a4 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   57530:	e0fffe17 	ldw	r3,-8(fp)
   57534:	e0bff617 	ldw	r2,-40(fp)
   57538:	1880022e 	bgeu	r3,r2,57544 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   5753c:	e0bffe17 	ldw	r2,-8(fp)
   57540:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   57544:	e0bff817 	ldw	r2,-32(fp)
   57548:	10820e04 	addi	r2,r2,2104
   5754c:	e0fffc17 	ldw	r3,-16(fp)
   57550:	1885883a 	add	r2,r3,r2
   57554:	1009883a 	mov	r4,r2
   57558:	e17ffd17 	ldw	r5,-12(fp)
   5755c:	e1bff617 	ldw	r6,-40(fp)
   57560:	00471540 	call	47154 <memcpy>
      ptr   += n;
   57564:	e0fffd17 	ldw	r3,-12(fp)
   57568:	e0bff617 	ldw	r2,-40(fp)
   5756c:	1885883a 	add	r2,r3,r2
   57570:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   57574:	e0fffe17 	ldw	r3,-8(fp)
   57578:	e0bff617 	ldw	r2,-40(fp)
   5757c:	1885c83a 	sub	r2,r3,r2
   57580:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   57584:	e0fff817 	ldw	r3,-32(fp)
   57588:	e0bff617 	ldw	r2,-40(fp)
   5758c:	1885883a 	add	r2,r3,r2
   57590:	10c1ffcc 	andi	r3,r2,2047
   57594:	e0bffc17 	ldw	r2,-16(fp)
   57598:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   5759c:	e0bffe17 	ldw	r2,-8(fp)
   575a0:	00bfc616 	blt	zero,r2,574bc <__alt_data_end+0xffff2acc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   575a4:	0005303a 	rdctl	r2,status
   575a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   575ac:	e0fffa17 	ldw	r3,-24(fp)
   575b0:	00bfff84 	movi	r2,-2
   575b4:	1884703a 	and	r2,r3,r2
   575b8:	1001703a 	wrctl	status,r2
  
  return context;
   575bc:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   575c0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   575c4:	e0bffc17 	ldw	r2,-16(fp)
   575c8:	10800817 	ldw	r2,32(r2)
   575cc:	10c00094 	ori	r3,r2,2
   575d0:	e0bffc17 	ldw	r2,-16(fp)
   575d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   575d8:	e0bffc17 	ldw	r2,-16(fp)
   575dc:	10800017 	ldw	r2,0(r2)
   575e0:	10800104 	addi	r2,r2,4
   575e4:	1007883a 	mov	r3,r2
   575e8:	e0bffc17 	ldw	r2,-16(fp)
   575ec:	10800817 	ldw	r2,32(r2)
   575f0:	18800035 	stwio	r2,0(r3)
   575f4:	e0bff917 	ldw	r2,-28(fp)
   575f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   575fc:	e0bffb17 	ldw	r2,-20(fp)
   57600:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   57604:	e0bffe17 	ldw	r2,-8(fp)
   57608:	0080120e 	bge	zero,r2,57654 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   5760c:	e0bfff17 	ldw	r2,-4(fp)
   57610:	1090000c 	andi	r2,r2,16384
   57614:	10000126 	beq	r2,zero,5761c <altera_avalon_jtag_uart_write+0x190>
        break;
   57618:	00001006 	br	5765c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   5761c:	0001883a 	nop
   57620:	e0bffc17 	ldw	r2,-16(fp)
   57624:	10c00d17 	ldw	r3,52(r2)
   57628:	e0bff517 	ldw	r2,-44(fp)
   5762c:	1880051e 	bne	r3,r2,57644 <altera_avalon_jtag_uart_write+0x1b8>
   57630:	e0bffc17 	ldw	r2,-16(fp)
   57634:	10c00917 	ldw	r3,36(r2)
   57638:	e0bffc17 	ldw	r2,-16(fp)
   5763c:	10800117 	ldw	r2,4(r2)
   57640:	18bff736 	bltu	r3,r2,57620 <__alt_data_end+0xffff2c30>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   57644:	e0bffc17 	ldw	r2,-16(fp)
   57648:	10800917 	ldw	r2,36(r2)
   5764c:	10000126 	beq	r2,zero,57654 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   57650:	00000206 	br	5765c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   57654:	e0bffe17 	ldw	r2,-8(fp)
   57658:	00bf9716 	blt	zero,r2,574b8 <__alt_data_end+0xffff2ac8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   5765c:	e0fffd17 	ldw	r3,-12(fp)
   57660:	e0bff717 	ldw	r2,-36(fp)
   57664:	18800426 	beq	r3,r2,57678 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   57668:	e0fffd17 	ldw	r3,-12(fp)
   5766c:	e0bff717 	ldw	r2,-36(fp)
   57670:	1885c83a 	sub	r2,r3,r2
   57674:	00000606 	br	57690 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   57678:	e0bfff17 	ldw	r2,-4(fp)
   5767c:	1090000c 	andi	r2,r2,16384
   57680:	10000226 	beq	r2,zero,5768c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   57684:	00bffd44 	movi	r2,-11
   57688:	00000106 	br	57690 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   5768c:	00bffec4 	movi	r2,-5
}
   57690:	e037883a 	mov	sp,fp
   57694:	dfc00117 	ldw	ra,4(sp)
   57698:	df000017 	ldw	fp,0(sp)
   5769c:	dec00204 	addi	sp,sp,8
   576a0:	f800283a 	ret

000576a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   576a4:	defffa04 	addi	sp,sp,-24
   576a8:	dfc00515 	stw	ra,20(sp)
   576ac:	df000415 	stw	fp,16(sp)
   576b0:	df000404 	addi	fp,sp,16
   576b4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   576b8:	0007883a 	mov	r3,zero
   576bc:	e0bfff17 	ldw	r2,-4(fp)
   576c0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   576c4:	e0bfff17 	ldw	r2,-4(fp)
   576c8:	10800104 	addi	r2,r2,4
   576cc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   576d0:	0005303a 	rdctl	r2,status
   576d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   576d8:	e0fffd17 	ldw	r3,-12(fp)
   576dc:	00bfff84 	movi	r2,-2
   576e0:	1884703a 	and	r2,r3,r2
   576e4:	1001703a 	wrctl	status,r2
  
  return context;
   576e8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   576ec:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   576f0:	00569080 	call	56908 <alt_tick>
   576f4:	e0bffc17 	ldw	r2,-16(fp)
   576f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   576fc:	e0bffe17 	ldw	r2,-8(fp)
   57700:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   57704:	e037883a 	mov	sp,fp
   57708:	dfc00117 	ldw	ra,4(sp)
   5770c:	df000017 	ldw	fp,0(sp)
   57710:	dec00204 	addi	sp,sp,8
   57714:	f800283a 	ret

00057718 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   57718:	defff804 	addi	sp,sp,-32
   5771c:	dfc00715 	stw	ra,28(sp)
   57720:	df000615 	stw	fp,24(sp)
   57724:	df000604 	addi	fp,sp,24
   57728:	e13ffc15 	stw	r4,-16(fp)
   5772c:	e17ffd15 	stw	r5,-12(fp)
   57730:	e1bffe15 	stw	r6,-8(fp)
   57734:	e1ffff15 	stw	r7,-4(fp)
   57738:	e0bfff17 	ldw	r2,-4(fp)
   5773c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   57740:	008001b4 	movhi	r2,6
   57744:	10b29a04 	addi	r2,r2,-13720
   57748:	10800017 	ldw	r2,0(r2)
   5774c:	1000041e 	bne	r2,zero,57760 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   57750:	008001b4 	movhi	r2,6
   57754:	10b29a04 	addi	r2,r2,-13720
   57758:	e0fffb17 	ldw	r3,-20(fp)
   5775c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   57760:	e0bffc17 	ldw	r2,-16(fp)
   57764:	10800104 	addi	r2,r2,4
   57768:	00c001c4 	movi	r3,7
   5776c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   57770:	d8000015 	stw	zero,0(sp)
   57774:	e13ffd17 	ldw	r4,-12(fp)
   57778:	e17ffe17 	ldw	r5,-8(fp)
   5777c:	01800174 	movhi	r6,5
   57780:	319da904 	addi	r6,r6,30372
   57784:	e1fffc17 	ldw	r7,-16(fp)
   57788:	0057c1c0 	call	57c1c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   5778c:	e037883a 	mov	sp,fp
   57790:	dfc00117 	ldw	ra,4(sp)
   57794:	df000017 	ldw	fp,0(sp)
   57798:	dec00204 	addi	sp,sp,8
   5779c:	f800283a 	ret

000577a0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   577a0:	defff504 	addi	sp,sp,-44
   577a4:	df000a15 	stw	fp,40(sp)
   577a8:	df000a04 	addi	fp,sp,40
   577ac:	e13ffc15 	stw	r4,-16(fp)
   577b0:	e17ffd15 	stw	r5,-12(fp)
   577b4:	e1bffe15 	stw	r6,-8(fp)
   577b8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   577bc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   577c0:	008001b4 	movhi	r2,6
   577c4:	10b29a04 	addi	r2,r2,-13720
   577c8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   577cc:	10003f26 	beq	r2,zero,578cc <alt_alarm_start+0x12c>
  {
    if (alarm)
   577d0:	e0bffc17 	ldw	r2,-16(fp)
   577d4:	10003b26 	beq	r2,zero,578c4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   577d8:	e0bffc17 	ldw	r2,-16(fp)
   577dc:	e0fffe17 	ldw	r3,-8(fp)
   577e0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   577e4:	e0bffc17 	ldw	r2,-16(fp)
   577e8:	e0ffff17 	ldw	r3,-4(fp)
   577ec:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   577f0:	0005303a 	rdctl	r2,status
   577f4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   577f8:	e0fff817 	ldw	r3,-32(fp)
   577fc:	00bfff84 	movi	r2,-2
   57800:	1884703a 	and	r2,r3,r2
   57804:	1001703a 	wrctl	status,r2
  
  return context;
   57808:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   5780c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   57810:	008001b4 	movhi	r2,6
   57814:	10b29b04 	addi	r2,r2,-13716
   57818:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   5781c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   57820:	e0fffd17 	ldw	r3,-12(fp)
   57824:	e0bff617 	ldw	r2,-40(fp)
   57828:	1885883a 	add	r2,r3,r2
   5782c:	10c00044 	addi	r3,r2,1
   57830:	e0bffc17 	ldw	r2,-16(fp)
   57834:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   57838:	e0bffc17 	ldw	r2,-16(fp)
   5783c:	10c00217 	ldw	r3,8(r2)
   57840:	e0bff617 	ldw	r2,-40(fp)
   57844:	1880042e 	bgeu	r3,r2,57858 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   57848:	e0bffc17 	ldw	r2,-16(fp)
   5784c:	00c00044 	movi	r3,1
   57850:	10c00405 	stb	r3,16(r2)
   57854:	00000206 	br	57860 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   57858:	e0bffc17 	ldw	r2,-16(fp)
   5785c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   57860:	e0fffc17 	ldw	r3,-16(fp)
   57864:	008001b4 	movhi	r2,6
   57868:	10abd104 	addi	r2,r2,-20668
   5786c:	e0bff915 	stw	r2,-28(fp)
   57870:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   57874:	e0bffa17 	ldw	r2,-24(fp)
   57878:	e0fff917 	ldw	r3,-28(fp)
   5787c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   57880:	e0bff917 	ldw	r2,-28(fp)
   57884:	10c00017 	ldw	r3,0(r2)
   57888:	e0bffa17 	ldw	r2,-24(fp)
   5788c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   57890:	e0bff917 	ldw	r2,-28(fp)
   57894:	10800017 	ldw	r2,0(r2)
   57898:	e0fffa17 	ldw	r3,-24(fp)
   5789c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   578a0:	e0bff917 	ldw	r2,-28(fp)
   578a4:	e0fffa17 	ldw	r3,-24(fp)
   578a8:	10c00015 	stw	r3,0(r2)
   578ac:	e0bff717 	ldw	r2,-36(fp)
   578b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   578b4:	e0bffb17 	ldw	r2,-20(fp)
   578b8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   578bc:	0005883a 	mov	r2,zero
   578c0:	00000306 	br	578d0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   578c4:	00bffa84 	movi	r2,-22
   578c8:	00000106 	br	578d0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   578cc:	00bfde84 	movi	r2,-134
  }
}
   578d0:	e037883a 	mov	sp,fp
   578d4:	df000017 	ldw	fp,0(sp)
   578d8:	dec00104 	addi	sp,sp,4
   578dc:	f800283a 	ret

000578e0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   578e0:	defffa04 	addi	sp,sp,-24
   578e4:	dfc00515 	stw	ra,20(sp)
   578e8:	df000415 	stw	fp,16(sp)
   578ec:	df000404 	addi	fp,sp,16
   578f0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   578f4:	00800244 	movi	r2,9
   578f8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   578fc:	e13ffd17 	ldw	r4,-12(fp)
   57900:	014003f4 	movhi	r5,15
   57904:	29509004 	addi	r5,r5,16960
   57908:	00453200 	call	45320 <__mulsi3>
   5790c:	0100bef4 	movhi	r4,763
   57910:	213c2004 	addi	r4,r4,-3968
   57914:	100b883a 	mov	r5,r2
   57918:	00453100 	call	45310 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   5791c:	01200034 	movhi	r4,32768
   57920:	213fffc4 	addi	r4,r4,-1
   57924:	100b883a 	mov	r5,r2
   57928:	00453100 	call	45310 <__udivsi3>
   5792c:	e13fff17 	ldw	r4,-4(fp)
   57930:	100b883a 	mov	r5,r2
   57934:	00453100 	call	45310 <__udivsi3>
   57938:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   5793c:	e0bffe17 	ldw	r2,-8(fp)
   57940:	10002a26 	beq	r2,zero,579ec <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   57944:	e03ffc15 	stw	zero,-16(fp)
   57948:	00001706 	br	579a8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   5794c:	00a00034 	movhi	r2,32768
   57950:	10bfffc4 	addi	r2,r2,-1
   57954:	10bfffc4 	addi	r2,r2,-1
   57958:	103ffe1e 	bne	r2,zero,57954 <__alt_data_end+0xffff2f64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   5795c:	e13ffd17 	ldw	r4,-12(fp)
   57960:	014003f4 	movhi	r5,15
   57964:	29509004 	addi	r5,r5,16960
   57968:	00453200 	call	45320 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   5796c:	0100bef4 	movhi	r4,763
   57970:	213c2004 	addi	r4,r4,-3968
   57974:	100b883a 	mov	r5,r2
   57978:	00453100 	call	45310 <__udivsi3>
   5797c:	01200034 	movhi	r4,32768
   57980:	213fffc4 	addi	r4,r4,-1
   57984:	100b883a 	mov	r5,r2
   57988:	00453100 	call	45310 <__udivsi3>
   5798c:	1007883a 	mov	r3,r2
   57990:	e0bfff17 	ldw	r2,-4(fp)
   57994:	10c5c83a 	sub	r2,r2,r3
   57998:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   5799c:	e0bffc17 	ldw	r2,-16(fp)
   579a0:	10800044 	addi	r2,r2,1
   579a4:	e0bffc15 	stw	r2,-16(fp)
   579a8:	e0fffc17 	ldw	r3,-16(fp)
   579ac:	e0bffe17 	ldw	r2,-8(fp)
   579b0:	18bfe616 	blt	r3,r2,5794c <__alt_data_end+0xffff2f5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   579b4:	e13ffd17 	ldw	r4,-12(fp)
   579b8:	014003f4 	movhi	r5,15
   579bc:	29509004 	addi	r5,r5,16960
   579c0:	00453200 	call	45320 <__mulsi3>
   579c4:	0100bef4 	movhi	r4,763
   579c8:	213c2004 	addi	r4,r4,-3968
   579cc:	100b883a 	mov	r5,r2
   579d0:	00453100 	call	45310 <__udivsi3>
   579d4:	1009883a 	mov	r4,r2
   579d8:	e17fff17 	ldw	r5,-4(fp)
   579dc:	00453200 	call	45320 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   579e0:	10bfffc4 	addi	r2,r2,-1
   579e4:	103ffe1e 	bne	r2,zero,579e0 <__alt_data_end+0xffff2ff0>
   579e8:	00000d06 	br	57a20 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   579ec:	e13ffd17 	ldw	r4,-12(fp)
   579f0:	014003f4 	movhi	r5,15
   579f4:	29509004 	addi	r5,r5,16960
   579f8:	00453200 	call	45320 <__mulsi3>
   579fc:	0100bef4 	movhi	r4,763
   57a00:	213c2004 	addi	r4,r4,-3968
   57a04:	100b883a 	mov	r5,r2
   57a08:	00453100 	call	45310 <__udivsi3>
   57a0c:	1009883a 	mov	r4,r2
   57a10:	e17fff17 	ldw	r5,-4(fp)
   57a14:	00453200 	call	45320 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   57a18:	10bfffc4 	addi	r2,r2,-1
   57a1c:	00bffe16 	blt	zero,r2,57a18 <__alt_data_end+0xffff3028>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   57a20:	0005883a 	mov	r2,zero
}
   57a24:	e037883a 	mov	sp,fp
   57a28:	dfc00117 	ldw	ra,4(sp)
   57a2c:	df000017 	ldw	fp,0(sp)
   57a30:	dec00204 	addi	sp,sp,8
   57a34:	f800283a 	ret

00057a38 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   57a38:	deffff04 	addi	sp,sp,-4
   57a3c:	df000015 	stw	fp,0(sp)
   57a40:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   57a44:	e037883a 	mov	sp,fp
   57a48:	df000017 	ldw	fp,0(sp)
   57a4c:	dec00104 	addi	sp,sp,4
   57a50:	f800283a 	ret

00057a54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   57a54:	defffe04 	addi	sp,sp,-8
   57a58:	dfc00115 	stw	ra,4(sp)
   57a5c:	df000015 	stw	fp,0(sp)
   57a60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   57a64:	008001b4 	movhi	r2,6
   57a68:	10abcf04 	addi	r2,r2,-20676
   57a6c:	10800017 	ldw	r2,0(r2)
   57a70:	10000526 	beq	r2,zero,57a88 <alt_get_errno+0x34>
   57a74:	008001b4 	movhi	r2,6
   57a78:	10abcf04 	addi	r2,r2,-20676
   57a7c:	10800017 	ldw	r2,0(r2)
   57a80:	103ee83a 	callr	r2
   57a84:	00000206 	br	57a90 <alt_get_errno+0x3c>
   57a88:	008001b4 	movhi	r2,6
   57a8c:	10b29304 	addi	r2,r2,-13748
}
   57a90:	e037883a 	mov	sp,fp
   57a94:	dfc00117 	ldw	ra,4(sp)
   57a98:	df000017 	ldw	fp,0(sp)
   57a9c:	dec00204 	addi	sp,sp,8
   57aa0:	f800283a 	ret

00057aa4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   57aa4:	defffa04 	addi	sp,sp,-24
   57aa8:	dfc00515 	stw	ra,20(sp)
   57aac:	df000415 	stw	fp,16(sp)
   57ab0:	df000404 	addi	fp,sp,16
   57ab4:	e13ffe15 	stw	r4,-8(fp)
   57ab8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   57abc:	e0bffe17 	ldw	r2,-8(fp)
   57ac0:	10000326 	beq	r2,zero,57ad0 <alt_dev_llist_insert+0x2c>
   57ac4:	e0bffe17 	ldw	r2,-8(fp)
   57ac8:	10800217 	ldw	r2,8(r2)
   57acc:	1000061e 	bne	r2,zero,57ae8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   57ad0:	0057a540 	call	57a54 <alt_get_errno>
   57ad4:	1007883a 	mov	r3,r2
   57ad8:	00800584 	movi	r2,22
   57adc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   57ae0:	00bffa84 	movi	r2,-22
   57ae4:	00001306 	br	57b34 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   57ae8:	e0bffe17 	ldw	r2,-8(fp)
   57aec:	e0ffff17 	ldw	r3,-4(fp)
   57af0:	e0fffc15 	stw	r3,-16(fp)
   57af4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   57af8:	e0bffd17 	ldw	r2,-12(fp)
   57afc:	e0fffc17 	ldw	r3,-16(fp)
   57b00:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   57b04:	e0bffc17 	ldw	r2,-16(fp)
   57b08:	10c00017 	ldw	r3,0(r2)
   57b0c:	e0bffd17 	ldw	r2,-12(fp)
   57b10:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   57b14:	e0bffc17 	ldw	r2,-16(fp)
   57b18:	10800017 	ldw	r2,0(r2)
   57b1c:	e0fffd17 	ldw	r3,-12(fp)
   57b20:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   57b24:	e0bffc17 	ldw	r2,-16(fp)
   57b28:	e0fffd17 	ldw	r3,-12(fp)
   57b2c:	10c00015 	stw	r3,0(r2)

  return 0;  
   57b30:	0005883a 	mov	r2,zero
}
   57b34:	e037883a 	mov	sp,fp
   57b38:	dfc00117 	ldw	ra,4(sp)
   57b3c:	df000017 	ldw	fp,0(sp)
   57b40:	dec00204 	addi	sp,sp,8
   57b44:	f800283a 	ret

00057b48 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   57b48:	defffd04 	addi	sp,sp,-12
   57b4c:	dfc00215 	stw	ra,8(sp)
   57b50:	df000115 	stw	fp,4(sp)
   57b54:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   57b58:	008001b4 	movhi	r2,6
   57b5c:	10a26f04 	addi	r2,r2,-30276
   57b60:	e0bfff15 	stw	r2,-4(fp)
   57b64:	00000606 	br	57b80 <_do_ctors+0x38>
        (*ctor) (); 
   57b68:	e0bfff17 	ldw	r2,-4(fp)
   57b6c:	10800017 	ldw	r2,0(r2)
   57b70:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   57b74:	e0bfff17 	ldw	r2,-4(fp)
   57b78:	10bfff04 	addi	r2,r2,-4
   57b7c:	e0bfff15 	stw	r2,-4(fp)
   57b80:	e0ffff17 	ldw	r3,-4(fp)
   57b84:	008001b4 	movhi	r2,6
   57b88:	10a27004 	addi	r2,r2,-30272
   57b8c:	18bff62e 	bgeu	r3,r2,57b68 <__alt_data_end+0xffff3178>
        (*ctor) (); 
}
   57b90:	e037883a 	mov	sp,fp
   57b94:	dfc00117 	ldw	ra,4(sp)
   57b98:	df000017 	ldw	fp,0(sp)
   57b9c:	dec00204 	addi	sp,sp,8
   57ba0:	f800283a 	ret

00057ba4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   57ba4:	defffd04 	addi	sp,sp,-12
   57ba8:	dfc00215 	stw	ra,8(sp)
   57bac:	df000115 	stw	fp,4(sp)
   57bb0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   57bb4:	008001b4 	movhi	r2,6
   57bb8:	10a26f04 	addi	r2,r2,-30276
   57bbc:	e0bfff15 	stw	r2,-4(fp)
   57bc0:	00000606 	br	57bdc <_do_dtors+0x38>
        (*dtor) (); 
   57bc4:	e0bfff17 	ldw	r2,-4(fp)
   57bc8:	10800017 	ldw	r2,0(r2)
   57bcc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   57bd0:	e0bfff17 	ldw	r2,-4(fp)
   57bd4:	10bfff04 	addi	r2,r2,-4
   57bd8:	e0bfff15 	stw	r2,-4(fp)
   57bdc:	e0ffff17 	ldw	r3,-4(fp)
   57be0:	008001b4 	movhi	r2,6
   57be4:	10a27004 	addi	r2,r2,-30272
   57be8:	18bff62e 	bgeu	r3,r2,57bc4 <__alt_data_end+0xffff31d4>
        (*dtor) (); 
}
   57bec:	e037883a 	mov	sp,fp
   57bf0:	dfc00117 	ldw	ra,4(sp)
   57bf4:	df000017 	ldw	fp,0(sp)
   57bf8:	dec00204 	addi	sp,sp,8
   57bfc:	f800283a 	ret

00057c00 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   57c00:	deffff04 	addi	sp,sp,-4
   57c04:	df000015 	stw	fp,0(sp)
   57c08:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   57c0c:	e037883a 	mov	sp,fp
   57c10:	df000017 	ldw	fp,0(sp)
   57c14:	dec00104 	addi	sp,sp,4
   57c18:	f800283a 	ret

00057c1c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   57c1c:	defff904 	addi	sp,sp,-28
   57c20:	dfc00615 	stw	ra,24(sp)
   57c24:	df000515 	stw	fp,20(sp)
   57c28:	df000504 	addi	fp,sp,20
   57c2c:	e13ffc15 	stw	r4,-16(fp)
   57c30:	e17ffd15 	stw	r5,-12(fp)
   57c34:	e1bffe15 	stw	r6,-8(fp)
   57c38:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   57c3c:	e0800217 	ldw	r2,8(fp)
   57c40:	d8800015 	stw	r2,0(sp)
   57c44:	e13ffc17 	ldw	r4,-16(fp)
   57c48:	e17ffd17 	ldw	r5,-12(fp)
   57c4c:	e1bffe17 	ldw	r6,-8(fp)
   57c50:	e1ffff17 	ldw	r7,-4(fp)
   57c54:	0057dfc0 	call	57dfc <alt_iic_isr_register>
}  
   57c58:	e037883a 	mov	sp,fp
   57c5c:	dfc00117 	ldw	ra,4(sp)
   57c60:	df000017 	ldw	fp,0(sp)
   57c64:	dec00204 	addi	sp,sp,8
   57c68:	f800283a 	ret

00057c6c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   57c6c:	defff904 	addi	sp,sp,-28
   57c70:	df000615 	stw	fp,24(sp)
   57c74:	df000604 	addi	fp,sp,24
   57c78:	e13ffe15 	stw	r4,-8(fp)
   57c7c:	e17fff15 	stw	r5,-4(fp)
   57c80:	e0bfff17 	ldw	r2,-4(fp)
   57c84:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   57c88:	0005303a 	rdctl	r2,status
   57c8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   57c90:	e0fffb17 	ldw	r3,-20(fp)
   57c94:	00bfff84 	movi	r2,-2
   57c98:	1884703a 	and	r2,r3,r2
   57c9c:	1001703a 	wrctl	status,r2
  
  return context;
   57ca0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   57ca4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   57ca8:	e0bffa17 	ldw	r2,-24(fp)
   57cac:	00c00044 	movi	r3,1
   57cb0:	1884983a 	sll	r2,r3,r2
   57cb4:	1007883a 	mov	r3,r2
   57cb8:	008001b4 	movhi	r2,6
   57cbc:	10b29c04 	addi	r2,r2,-13712
   57cc0:	10800017 	ldw	r2,0(r2)
   57cc4:	1886b03a 	or	r3,r3,r2
   57cc8:	008001b4 	movhi	r2,6
   57ccc:	10b29c04 	addi	r2,r2,-13712
   57cd0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   57cd4:	008001b4 	movhi	r2,6
   57cd8:	10b29c04 	addi	r2,r2,-13712
   57cdc:	10800017 	ldw	r2,0(r2)
   57ce0:	100170fa 	wrctl	ienable,r2
   57ce4:	e0bffc17 	ldw	r2,-16(fp)
   57ce8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   57cec:	e0bffd17 	ldw	r2,-12(fp)
   57cf0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   57cf4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   57cf8:	0001883a 	nop
}
   57cfc:	e037883a 	mov	sp,fp
   57d00:	df000017 	ldw	fp,0(sp)
   57d04:	dec00104 	addi	sp,sp,4
   57d08:	f800283a 	ret

00057d0c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   57d0c:	defff904 	addi	sp,sp,-28
   57d10:	df000615 	stw	fp,24(sp)
   57d14:	df000604 	addi	fp,sp,24
   57d18:	e13ffe15 	stw	r4,-8(fp)
   57d1c:	e17fff15 	stw	r5,-4(fp)
   57d20:	e0bfff17 	ldw	r2,-4(fp)
   57d24:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   57d28:	0005303a 	rdctl	r2,status
   57d2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   57d30:	e0fffb17 	ldw	r3,-20(fp)
   57d34:	00bfff84 	movi	r2,-2
   57d38:	1884703a 	and	r2,r3,r2
   57d3c:	1001703a 	wrctl	status,r2
  
  return context;
   57d40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   57d44:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   57d48:	e0bffa17 	ldw	r2,-24(fp)
   57d4c:	00c00044 	movi	r3,1
   57d50:	1884983a 	sll	r2,r3,r2
   57d54:	0084303a 	nor	r2,zero,r2
   57d58:	1007883a 	mov	r3,r2
   57d5c:	008001b4 	movhi	r2,6
   57d60:	10b29c04 	addi	r2,r2,-13712
   57d64:	10800017 	ldw	r2,0(r2)
   57d68:	1886703a 	and	r3,r3,r2
   57d6c:	008001b4 	movhi	r2,6
   57d70:	10b29c04 	addi	r2,r2,-13712
   57d74:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   57d78:	008001b4 	movhi	r2,6
   57d7c:	10b29c04 	addi	r2,r2,-13712
   57d80:	10800017 	ldw	r2,0(r2)
   57d84:	100170fa 	wrctl	ienable,r2
   57d88:	e0bffc17 	ldw	r2,-16(fp)
   57d8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   57d90:	e0bffd17 	ldw	r2,-12(fp)
   57d94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   57d98:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   57d9c:	0001883a 	nop
}
   57da0:	e037883a 	mov	sp,fp
   57da4:	df000017 	ldw	fp,0(sp)
   57da8:	dec00104 	addi	sp,sp,4
   57dac:	f800283a 	ret

00057db0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   57db0:	defffc04 	addi	sp,sp,-16
   57db4:	df000315 	stw	fp,12(sp)
   57db8:	df000304 	addi	fp,sp,12
   57dbc:	e13ffe15 	stw	r4,-8(fp)
   57dc0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   57dc4:	000530fa 	rdctl	r2,ienable
   57dc8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   57dcc:	e0bfff17 	ldw	r2,-4(fp)
   57dd0:	00c00044 	movi	r3,1
   57dd4:	1884983a 	sll	r2,r3,r2
   57dd8:	1007883a 	mov	r3,r2
   57ddc:	e0bffd17 	ldw	r2,-12(fp)
   57de0:	1884703a 	and	r2,r3,r2
   57de4:	1004c03a 	cmpne	r2,r2,zero
   57de8:	10803fcc 	andi	r2,r2,255
}
   57dec:	e037883a 	mov	sp,fp
   57df0:	df000017 	ldw	fp,0(sp)
   57df4:	dec00104 	addi	sp,sp,4
   57df8:	f800283a 	ret

00057dfc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   57dfc:	defff504 	addi	sp,sp,-44
   57e00:	dfc00a15 	stw	ra,40(sp)
   57e04:	df000915 	stw	fp,36(sp)
   57e08:	df000904 	addi	fp,sp,36
   57e0c:	e13ffc15 	stw	r4,-16(fp)
   57e10:	e17ffd15 	stw	r5,-12(fp)
   57e14:	e1bffe15 	stw	r6,-8(fp)
   57e18:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   57e1c:	00bffa84 	movi	r2,-22
   57e20:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   57e24:	e0bffd17 	ldw	r2,-12(fp)
   57e28:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   57e2c:	e0bff817 	ldw	r2,-32(fp)
   57e30:	10800808 	cmpgei	r2,r2,32
   57e34:	1000271e 	bne	r2,zero,57ed4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   57e38:	0005303a 	rdctl	r2,status
   57e3c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   57e40:	e0fffa17 	ldw	r3,-24(fp)
   57e44:	00bfff84 	movi	r2,-2
   57e48:	1884703a 	and	r2,r3,r2
   57e4c:	1001703a 	wrctl	status,r2
  
  return context;
   57e50:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   57e54:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   57e58:	008001b4 	movhi	r2,6
   57e5c:	10b2b604 	addi	r2,r2,-13608
   57e60:	e0fff817 	ldw	r3,-32(fp)
   57e64:	180690fa 	slli	r3,r3,3
   57e68:	10c5883a 	add	r2,r2,r3
   57e6c:	e0fffe17 	ldw	r3,-8(fp)
   57e70:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   57e74:	008001b4 	movhi	r2,6
   57e78:	10b2b604 	addi	r2,r2,-13608
   57e7c:	e0fff817 	ldw	r3,-32(fp)
   57e80:	180690fa 	slli	r3,r3,3
   57e84:	10c5883a 	add	r2,r2,r3
   57e88:	10800104 	addi	r2,r2,4
   57e8c:	e0ffff17 	ldw	r3,-4(fp)
   57e90:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   57e94:	e0bffe17 	ldw	r2,-8(fp)
   57e98:	10000526 	beq	r2,zero,57eb0 <alt_iic_isr_register+0xb4>
   57e9c:	e0bff817 	ldw	r2,-32(fp)
   57ea0:	e13ffc17 	ldw	r4,-16(fp)
   57ea4:	100b883a 	mov	r5,r2
   57ea8:	0057c6c0 	call	57c6c <alt_ic_irq_enable>
   57eac:	00000406 	br	57ec0 <alt_iic_isr_register+0xc4>
   57eb0:	e0bff817 	ldw	r2,-32(fp)
   57eb4:	e13ffc17 	ldw	r4,-16(fp)
   57eb8:	100b883a 	mov	r5,r2
   57ebc:	0057d0c0 	call	57d0c <alt_ic_irq_disable>
   57ec0:	e0bff715 	stw	r2,-36(fp)
   57ec4:	e0bff917 	ldw	r2,-28(fp)
   57ec8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   57ecc:	e0bffb17 	ldw	r2,-20(fp)
   57ed0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   57ed4:	e0bff717 	ldw	r2,-36(fp)
}
   57ed8:	e037883a 	mov	sp,fp
   57edc:	dfc00117 	ldw	ra,4(sp)
   57ee0:	df000017 	ldw	fp,0(sp)
   57ee4:	dec00204 	addi	sp,sp,8
   57ee8:	f800283a 	ret

00057eec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   57eec:	defff804 	addi	sp,sp,-32
   57ef0:	dfc00715 	stw	ra,28(sp)
   57ef4:	df000615 	stw	fp,24(sp)
   57ef8:	dc000515 	stw	r16,20(sp)
   57efc:	df000604 	addi	fp,sp,24
   57f00:	e13ffb15 	stw	r4,-20(fp)
   57f04:	e17ffc15 	stw	r5,-16(fp)
   57f08:	e1bffd15 	stw	r6,-12(fp)
   57f0c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   57f10:	e13ffc17 	ldw	r4,-16(fp)
   57f14:	e17ffd17 	ldw	r5,-12(fp)
   57f18:	e1bffe17 	ldw	r6,-8(fp)
   57f1c:	00581880 	call	58188 <open>
   57f20:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   57f24:	e0bffa17 	ldw	r2,-24(fp)
   57f28:	10002216 	blt	r2,zero,57fb4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   57f2c:	040001b4 	movhi	r16,6
   57f30:	84274b04 	addi	r16,r16,-25300
   57f34:	e0bffa17 	ldw	r2,-24(fp)
   57f38:	1009883a 	mov	r4,r2
   57f3c:	01400304 	movi	r5,12
   57f40:	00453200 	call	45320 <__mulsi3>
   57f44:	8085883a 	add	r2,r16,r2
   57f48:	10c00017 	ldw	r3,0(r2)
   57f4c:	e0bffb17 	ldw	r2,-20(fp)
   57f50:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   57f54:	040001b4 	movhi	r16,6
   57f58:	84274b04 	addi	r16,r16,-25300
   57f5c:	e0bffa17 	ldw	r2,-24(fp)
   57f60:	1009883a 	mov	r4,r2
   57f64:	01400304 	movi	r5,12
   57f68:	00453200 	call	45320 <__mulsi3>
   57f6c:	8085883a 	add	r2,r16,r2
   57f70:	10800104 	addi	r2,r2,4
   57f74:	10c00017 	ldw	r3,0(r2)
   57f78:	e0bffb17 	ldw	r2,-20(fp)
   57f7c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   57f80:	040001b4 	movhi	r16,6
   57f84:	84274b04 	addi	r16,r16,-25300
   57f88:	e0bffa17 	ldw	r2,-24(fp)
   57f8c:	1009883a 	mov	r4,r2
   57f90:	01400304 	movi	r5,12
   57f94:	00453200 	call	45320 <__mulsi3>
   57f98:	8085883a 	add	r2,r16,r2
   57f9c:	10800204 	addi	r2,r2,8
   57fa0:	10c00017 	ldw	r3,0(r2)
   57fa4:	e0bffb17 	ldw	r2,-20(fp)
   57fa8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   57fac:	e13ffa17 	ldw	r4,-24(fp)
   57fb0:	00567400 	call	56740 <alt_release_fd>
  }
} 
   57fb4:	e6ffff04 	addi	sp,fp,-4
   57fb8:	dfc00217 	ldw	ra,8(sp)
   57fbc:	df000117 	ldw	fp,4(sp)
   57fc0:	dc000017 	ldw	r16,0(sp)
   57fc4:	dec00304 	addi	sp,sp,12
   57fc8:	f800283a 	ret

00057fcc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   57fcc:	defffb04 	addi	sp,sp,-20
   57fd0:	dfc00415 	stw	ra,16(sp)
   57fd4:	df000315 	stw	fp,12(sp)
   57fd8:	df000304 	addi	fp,sp,12
   57fdc:	e13ffd15 	stw	r4,-12(fp)
   57fe0:	e17ffe15 	stw	r5,-8(fp)
   57fe4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   57fe8:	010001b4 	movhi	r4,6
   57fec:	21274e04 	addi	r4,r4,-25288
   57ff0:	e17ffd17 	ldw	r5,-12(fp)
   57ff4:	01800044 	movi	r6,1
   57ff8:	01c07fc4 	movi	r7,511
   57ffc:	0057eec0 	call	57eec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   58000:	010001b4 	movhi	r4,6
   58004:	21274b04 	addi	r4,r4,-25300
   58008:	e17ffe17 	ldw	r5,-8(fp)
   5800c:	000d883a 	mov	r6,zero
   58010:	01c07fc4 	movi	r7,511
   58014:	0057eec0 	call	57eec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   58018:	010001b4 	movhi	r4,6
   5801c:	21275104 	addi	r4,r4,-25276
   58020:	e17fff17 	ldw	r5,-4(fp)
   58024:	01800044 	movi	r6,1
   58028:	01c07fc4 	movi	r7,511
   5802c:	0057eec0 	call	57eec <alt_open_fd>
}  
   58030:	e037883a 	mov	sp,fp
   58034:	dfc00117 	ldw	ra,4(sp)
   58038:	df000017 	ldw	fp,0(sp)
   5803c:	dec00204 	addi	sp,sp,8
   58040:	f800283a 	ret

00058044 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   58044:	defffe04 	addi	sp,sp,-8
   58048:	dfc00115 	stw	ra,4(sp)
   5804c:	df000015 	stw	fp,0(sp)
   58050:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   58054:	008001b4 	movhi	r2,6
   58058:	10abcf04 	addi	r2,r2,-20676
   5805c:	10800017 	ldw	r2,0(r2)
   58060:	10000526 	beq	r2,zero,58078 <alt_get_errno+0x34>
   58064:	008001b4 	movhi	r2,6
   58068:	10abcf04 	addi	r2,r2,-20676
   5806c:	10800017 	ldw	r2,0(r2)
   58070:	103ee83a 	callr	r2
   58074:	00000206 	br	58080 <alt_get_errno+0x3c>
   58078:	008001b4 	movhi	r2,6
   5807c:	10b29304 	addi	r2,r2,-13748
}
   58080:	e037883a 	mov	sp,fp
   58084:	dfc00117 	ldw	ra,4(sp)
   58088:	df000017 	ldw	fp,0(sp)
   5808c:	dec00204 	addi	sp,sp,8
   58090:	f800283a 	ret

00058094 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   58094:	defffb04 	addi	sp,sp,-20
   58098:	dfc00415 	stw	ra,16(sp)
   5809c:	df000315 	stw	fp,12(sp)
   580a0:	dc000215 	stw	r16,8(sp)
   580a4:	df000304 	addi	fp,sp,12
   580a8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   580ac:	e0bffe17 	ldw	r2,-8(fp)
   580b0:	10800217 	ldw	r2,8(r2)
   580b4:	10d00034 	orhi	r3,r2,16384
   580b8:	e0bffe17 	ldw	r2,-8(fp)
   580bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   580c0:	e03ffd15 	stw	zero,-12(fp)
   580c4:	00002306 	br	58154 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   580c8:	040001b4 	movhi	r16,6
   580cc:	84274b04 	addi	r16,r16,-25300
   580d0:	e0bffd17 	ldw	r2,-12(fp)
   580d4:	1009883a 	mov	r4,r2
   580d8:	01400304 	movi	r5,12
   580dc:	00453200 	call	45320 <__mulsi3>
   580e0:	8085883a 	add	r2,r16,r2
   580e4:	10c00017 	ldw	r3,0(r2)
   580e8:	e0bffe17 	ldw	r2,-8(fp)
   580ec:	10800017 	ldw	r2,0(r2)
   580f0:	1880151e 	bne	r3,r2,58148 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   580f4:	040001b4 	movhi	r16,6
   580f8:	84274b04 	addi	r16,r16,-25300
   580fc:	e0bffd17 	ldw	r2,-12(fp)
   58100:	1009883a 	mov	r4,r2
   58104:	01400304 	movi	r5,12
   58108:	00453200 	call	45320 <__mulsi3>
   5810c:	8085883a 	add	r2,r16,r2
   58110:	10800204 	addi	r2,r2,8
   58114:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   58118:	10000b0e 	bge	r2,zero,58148 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   5811c:	e13ffd17 	ldw	r4,-12(fp)
   58120:	01400304 	movi	r5,12
   58124:	00453200 	call	45320 <__mulsi3>
   58128:	1007883a 	mov	r3,r2
   5812c:	008001b4 	movhi	r2,6
   58130:	10a74b04 	addi	r2,r2,-25300
   58134:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   58138:	e0bffe17 	ldw	r2,-8(fp)
   5813c:	18800226 	beq	r3,r2,58148 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   58140:	00bffcc4 	movi	r2,-13
   58144:	00000a06 	br	58170 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   58148:	e0bffd17 	ldw	r2,-12(fp)
   5814c:	10800044 	addi	r2,r2,1
   58150:	e0bffd15 	stw	r2,-12(fp)
   58154:	008001b4 	movhi	r2,6
   58158:	10abce04 	addi	r2,r2,-20680
   5815c:	10800017 	ldw	r2,0(r2)
   58160:	1007883a 	mov	r3,r2
   58164:	e0bffd17 	ldw	r2,-12(fp)
   58168:	18bfd72e 	bgeu	r3,r2,580c8 <__alt_data_end+0xffff36d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   5816c:	0005883a 	mov	r2,zero
}
   58170:	e6ffff04 	addi	sp,fp,-4
   58174:	dfc00217 	ldw	ra,8(sp)
   58178:	df000117 	ldw	fp,4(sp)
   5817c:	dc000017 	ldw	r16,0(sp)
   58180:	dec00304 	addi	sp,sp,12
   58184:	f800283a 	ret

00058188 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   58188:	defff604 	addi	sp,sp,-40
   5818c:	dfc00915 	stw	ra,36(sp)
   58190:	df000815 	stw	fp,32(sp)
   58194:	df000804 	addi	fp,sp,32
   58198:	e13ffd15 	stw	r4,-12(fp)
   5819c:	e17ffe15 	stw	r5,-8(fp)
   581a0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   581a4:	00bfffc4 	movi	r2,-1
   581a8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   581ac:	00bffb44 	movi	r2,-19
   581b0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   581b4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   581b8:	e13ffd17 	ldw	r4,-12(fp)
   581bc:	014001b4 	movhi	r5,6
   581c0:	296bcc04 	addi	r5,r5,-20688
   581c4:	00583080 	call	58308 <alt_find_dev>
   581c8:	e0bff815 	stw	r2,-32(fp)
   581cc:	e0bff817 	ldw	r2,-32(fp)
   581d0:	1000051e 	bne	r2,zero,581e8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   581d4:	e13ffd17 	ldw	r4,-12(fp)
   581d8:	00583980 	call	58398 <alt_find_file>
   581dc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   581e0:	00800044 	movi	r2,1
   581e4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   581e8:	e0bff817 	ldw	r2,-32(fp)
   581ec:	10002b26 	beq	r2,zero,5829c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   581f0:	e13ff817 	ldw	r4,-32(fp)
   581f4:	00584ac0 	call	584ac <alt_get_fd>
   581f8:	e0bff915 	stw	r2,-28(fp)
   581fc:	e0bff917 	ldw	r2,-28(fp)
   58200:	1000030e 	bge	r2,zero,58210 <open+0x88>
    {
      status = index;
   58204:	e0bff917 	ldw	r2,-28(fp)
   58208:	e0bffa15 	stw	r2,-24(fp)
   5820c:	00002506 	br	582a4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   58210:	e13ff917 	ldw	r4,-28(fp)
   58214:	01400304 	movi	r5,12
   58218:	00453200 	call	45320 <__mulsi3>
   5821c:	1007883a 	mov	r3,r2
   58220:	008001b4 	movhi	r2,6
   58224:	10a74b04 	addi	r2,r2,-25300
   58228:	1885883a 	add	r2,r3,r2
   5822c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   58230:	e0fffe17 	ldw	r3,-8(fp)
   58234:	00900034 	movhi	r2,16384
   58238:	10bfffc4 	addi	r2,r2,-1
   5823c:	1886703a 	and	r3,r3,r2
   58240:	e0bffc17 	ldw	r2,-16(fp)
   58244:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   58248:	e0bffb17 	ldw	r2,-20(fp)
   5824c:	1000051e 	bne	r2,zero,58264 <open+0xdc>
   58250:	e13ffc17 	ldw	r4,-16(fp)
   58254:	00580940 	call	58094 <alt_file_locked>
   58258:	e0bffa15 	stw	r2,-24(fp)
   5825c:	e0bffa17 	ldw	r2,-24(fp)
   58260:	10001016 	blt	r2,zero,582a4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   58264:	e0bff817 	ldw	r2,-32(fp)
   58268:	10800317 	ldw	r2,12(r2)
   5826c:	10000826 	beq	r2,zero,58290 <open+0x108>
   58270:	e0bff817 	ldw	r2,-32(fp)
   58274:	10800317 	ldw	r2,12(r2)
   58278:	e13ffc17 	ldw	r4,-16(fp)
   5827c:	e17ffd17 	ldw	r5,-12(fp)
   58280:	e1bffe17 	ldw	r6,-8(fp)
   58284:	e1ffff17 	ldw	r7,-4(fp)
   58288:	103ee83a 	callr	r2
   5828c:	00000106 	br	58294 <open+0x10c>
   58290:	0005883a 	mov	r2,zero
   58294:	e0bffa15 	stw	r2,-24(fp)
   58298:	00000206 	br	582a4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   5829c:	00bffb44 	movi	r2,-19
   582a0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   582a4:	e0bffa17 	ldw	r2,-24(fp)
   582a8:	1000090e 	bge	r2,zero,582d0 <open+0x148>
  {
    alt_release_fd (index);  
   582ac:	e13ff917 	ldw	r4,-28(fp)
   582b0:	00567400 	call	56740 <alt_release_fd>
    ALT_ERRNO = -status;
   582b4:	00580440 	call	58044 <alt_get_errno>
   582b8:	1007883a 	mov	r3,r2
   582bc:	e0bffa17 	ldw	r2,-24(fp)
   582c0:	0085c83a 	sub	r2,zero,r2
   582c4:	18800015 	stw	r2,0(r3)
    return -1;
   582c8:	00bfffc4 	movi	r2,-1
   582cc:	00000106 	br	582d4 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   582d0:	e0bff917 	ldw	r2,-28(fp)
}
   582d4:	e037883a 	mov	sp,fp
   582d8:	dfc00117 	ldw	ra,4(sp)
   582dc:	df000017 	ldw	fp,0(sp)
   582e0:	dec00204 	addi	sp,sp,8
   582e4:	f800283a 	ret

000582e8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   582e8:	deffff04 	addi	sp,sp,-4
   582ec:	df000015 	stw	fp,0(sp)
   582f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   582f4:	000170fa 	wrctl	ienable,zero
}
   582f8:	e037883a 	mov	sp,fp
   582fc:	df000017 	ldw	fp,0(sp)
   58300:	dec00104 	addi	sp,sp,4
   58304:	f800283a 	ret

00058308 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   58308:	defffa04 	addi	sp,sp,-24
   5830c:	dfc00515 	stw	ra,20(sp)
   58310:	df000415 	stw	fp,16(sp)
   58314:	df000404 	addi	fp,sp,16
   58318:	e13ffe15 	stw	r4,-8(fp)
   5831c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   58320:	e0bfff17 	ldw	r2,-4(fp)
   58324:	10800017 	ldw	r2,0(r2)
   58328:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   5832c:	e13ffe17 	ldw	r4,-8(fp)
   58330:	00477300 	call	47730 <strlen>
   58334:	10800044 	addi	r2,r2,1
   58338:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   5833c:	00000d06 	br	58374 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   58340:	e0bffc17 	ldw	r2,-16(fp)
   58344:	10c00217 	ldw	r3,8(r2)
   58348:	e0bffd17 	ldw	r2,-12(fp)
   5834c:	1809883a 	mov	r4,r3
   58350:	e17ffe17 	ldw	r5,-8(fp)
   58354:	100d883a 	mov	r6,r2
   58358:	00586680 	call	58668 <memcmp>
   5835c:	1000021e 	bne	r2,zero,58368 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   58360:	e0bffc17 	ldw	r2,-16(fp)
   58364:	00000706 	br	58384 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   58368:	e0bffc17 	ldw	r2,-16(fp)
   5836c:	10800017 	ldw	r2,0(r2)
   58370:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   58374:	e0fffc17 	ldw	r3,-16(fp)
   58378:	e0bfff17 	ldw	r2,-4(fp)
   5837c:	18bff01e 	bne	r3,r2,58340 <__alt_data_end+0xffff3950>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   58380:	0005883a 	mov	r2,zero
}
   58384:	e037883a 	mov	sp,fp
   58388:	dfc00117 	ldw	ra,4(sp)
   5838c:	df000017 	ldw	fp,0(sp)
   58390:	dec00204 	addi	sp,sp,8
   58394:	f800283a 	ret

00058398 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   58398:	defffb04 	addi	sp,sp,-20
   5839c:	dfc00415 	stw	ra,16(sp)
   583a0:	df000315 	stw	fp,12(sp)
   583a4:	df000304 	addi	fp,sp,12
   583a8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   583ac:	008001b4 	movhi	r2,6
   583b0:	10abca04 	addi	r2,r2,-20696
   583b4:	10800017 	ldw	r2,0(r2)
   583b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   583bc:	00003106 	br	58484 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   583c0:	e0bffd17 	ldw	r2,-12(fp)
   583c4:	10800217 	ldw	r2,8(r2)
   583c8:	1009883a 	mov	r4,r2
   583cc:	00477300 	call	47730 <strlen>
   583d0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   583d4:	e0bffd17 	ldw	r2,-12(fp)
   583d8:	10c00217 	ldw	r3,8(r2)
   583dc:	e0bffe17 	ldw	r2,-8(fp)
   583e0:	10bfffc4 	addi	r2,r2,-1
   583e4:	1885883a 	add	r2,r3,r2
   583e8:	10800003 	ldbu	r2,0(r2)
   583ec:	10803fcc 	andi	r2,r2,255
   583f0:	1080201c 	xori	r2,r2,128
   583f4:	10bfe004 	addi	r2,r2,-128
   583f8:	10800bd8 	cmpnei	r2,r2,47
   583fc:	1000031e 	bne	r2,zero,5840c <alt_find_file+0x74>
    {
      len -= 1;
   58400:	e0bffe17 	ldw	r2,-8(fp)
   58404:	10bfffc4 	addi	r2,r2,-1
   58408:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   5840c:	e0bffe17 	ldw	r2,-8(fp)
   58410:	e0ffff17 	ldw	r3,-4(fp)
   58414:	1885883a 	add	r2,r3,r2
   58418:	10800003 	ldbu	r2,0(r2)
   5841c:	10803fcc 	andi	r2,r2,255
   58420:	1080201c 	xori	r2,r2,128
   58424:	10bfe004 	addi	r2,r2,-128
   58428:	10800be0 	cmpeqi	r2,r2,47
   5842c:	1000081e 	bne	r2,zero,58450 <alt_find_file+0xb8>
   58430:	e0bffe17 	ldw	r2,-8(fp)
   58434:	e0ffff17 	ldw	r3,-4(fp)
   58438:	1885883a 	add	r2,r3,r2
   5843c:	10800003 	ldbu	r2,0(r2)
   58440:	10803fcc 	andi	r2,r2,255
   58444:	1080201c 	xori	r2,r2,128
   58448:	10bfe004 	addi	r2,r2,-128
   5844c:	10000a1e 	bne	r2,zero,58478 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   58450:	e0bffd17 	ldw	r2,-12(fp)
   58454:	10c00217 	ldw	r3,8(r2)
   58458:	e0bffe17 	ldw	r2,-8(fp)
   5845c:	1809883a 	mov	r4,r3
   58460:	e17fff17 	ldw	r5,-4(fp)
   58464:	100d883a 	mov	r6,r2
   58468:	00586680 	call	58668 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   5846c:	1000021e 	bne	r2,zero,58478 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   58470:	e0bffd17 	ldw	r2,-12(fp)
   58474:	00000806 	br	58498 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   58478:	e0bffd17 	ldw	r2,-12(fp)
   5847c:	10800017 	ldw	r2,0(r2)
   58480:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   58484:	e0fffd17 	ldw	r3,-12(fp)
   58488:	008001b4 	movhi	r2,6
   5848c:	10abca04 	addi	r2,r2,-20696
   58490:	18bfcb1e 	bne	r3,r2,583c0 <__alt_data_end+0xffff39d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   58494:	0005883a 	mov	r2,zero
}
   58498:	e037883a 	mov	sp,fp
   5849c:	dfc00117 	ldw	ra,4(sp)
   584a0:	df000017 	ldw	fp,0(sp)
   584a4:	dec00204 	addi	sp,sp,8
   584a8:	f800283a 	ret

000584ac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   584ac:	defffa04 	addi	sp,sp,-24
   584b0:	dfc00515 	stw	ra,20(sp)
   584b4:	df000415 	stw	fp,16(sp)
   584b8:	dc000315 	stw	r16,12(sp)
   584bc:	df000404 	addi	fp,sp,16
   584c0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   584c4:	00bffa04 	movi	r2,-24
   584c8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   584cc:	e03ffc15 	stw	zero,-16(fp)
   584d0:	00002106 	br	58558 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   584d4:	040001b4 	movhi	r16,6
   584d8:	84274b04 	addi	r16,r16,-25300
   584dc:	e0bffc17 	ldw	r2,-16(fp)
   584e0:	1009883a 	mov	r4,r2
   584e4:	01400304 	movi	r5,12
   584e8:	00453200 	call	45320 <__mulsi3>
   584ec:	8085883a 	add	r2,r16,r2
   584f0:	10800017 	ldw	r2,0(r2)
   584f4:	1000151e 	bne	r2,zero,5854c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   584f8:	040001b4 	movhi	r16,6
   584fc:	84274b04 	addi	r16,r16,-25300
   58500:	e0bffc17 	ldw	r2,-16(fp)
   58504:	1009883a 	mov	r4,r2
   58508:	01400304 	movi	r5,12
   5850c:	00453200 	call	45320 <__mulsi3>
   58510:	8085883a 	add	r2,r16,r2
   58514:	e0fffe17 	ldw	r3,-8(fp)
   58518:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   5851c:	008001b4 	movhi	r2,6
   58520:	10abce04 	addi	r2,r2,-20680
   58524:	10c00017 	ldw	r3,0(r2)
   58528:	e0bffc17 	ldw	r2,-16(fp)
   5852c:	1880040e 	bge	r3,r2,58540 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   58530:	008001b4 	movhi	r2,6
   58534:	10abce04 	addi	r2,r2,-20680
   58538:	e0fffc17 	ldw	r3,-16(fp)
   5853c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   58540:	e0bffc17 	ldw	r2,-16(fp)
   58544:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   58548:	00000606 	br	58564 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   5854c:	e0bffc17 	ldw	r2,-16(fp)
   58550:	10800044 	addi	r2,r2,1
   58554:	e0bffc15 	stw	r2,-16(fp)
   58558:	e0bffc17 	ldw	r2,-16(fp)
   5855c:	10800810 	cmplti	r2,r2,32
   58560:	103fdc1e 	bne	r2,zero,584d4 <__alt_data_end+0xffff3ae4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   58564:	e0bffd17 	ldw	r2,-12(fp)
}
   58568:	e6ffff04 	addi	sp,fp,-4
   5856c:	dfc00217 	ldw	ra,8(sp)
   58570:	df000117 	ldw	fp,4(sp)
   58574:	dc000017 	ldw	r16,0(sp)
   58578:	dec00304 	addi	sp,sp,12
   5857c:	f800283a 	ret

00058580 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   58580:	defffe04 	addi	sp,sp,-8
   58584:	df000115 	stw	fp,4(sp)
   58588:	df000104 	addi	fp,sp,4
   5858c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   58590:	e0bfff17 	ldw	r2,-4(fp)
   58594:	10bffe84 	addi	r2,r2,-6
   58598:	10c00428 	cmpgeui	r3,r2,16
   5859c:	18001a1e 	bne	r3,zero,58608 <alt_exception_cause_generated_bad_addr+0x88>
   585a0:	100690ba 	slli	r3,r2,2
   585a4:	008001b4 	movhi	r2,6
   585a8:	10a16e04 	addi	r2,r2,-31304
   585ac:	1885883a 	add	r2,r3,r2
   585b0:	10800017 	ldw	r2,0(r2)
   585b4:	1000683a 	jmp	r2
   585b8:	000585f8 	rdprs	zero,zero,5655
   585bc:	000585f8 	rdprs	zero,zero,5655
   585c0:	00058608 	cmpgei	zero,zero,5656
   585c4:	00058608 	cmpgei	zero,zero,5656
   585c8:	00058608 	cmpgei	zero,zero,5656
   585cc:	000585f8 	rdprs	zero,zero,5655
   585d0:	00058600 	call	5860 <__reset-0x3a7a0>
   585d4:	00058608 	cmpgei	zero,zero,5656
   585d8:	000585f8 	rdprs	zero,zero,5655
   585dc:	000585f8 	rdprs	zero,zero,5655
   585e0:	00058608 	cmpgei	zero,zero,5656
   585e4:	000585f8 	rdprs	zero,zero,5655
   585e8:	00058600 	call	5860 <__reset-0x3a7a0>
   585ec:	00058608 	cmpgei	zero,zero,5656
   585f0:	00058608 	cmpgei	zero,zero,5656
   585f4:	000585f8 	rdprs	zero,zero,5655
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   585f8:	00800044 	movi	r2,1
   585fc:	00000306 	br	5860c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   58600:	0005883a 	mov	r2,zero
   58604:	00000106 	br	5860c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   58608:	0005883a 	mov	r2,zero
  }
}
   5860c:	e037883a 	mov	sp,fp
   58610:	df000017 	ldw	fp,0(sp)
   58614:	dec00104 	addi	sp,sp,4
   58618:	f800283a 	ret

0005861c <atexit>:
   5861c:	200b883a 	mov	r5,r4
   58620:	000d883a 	mov	r6,zero
   58624:	0009883a 	mov	r4,zero
   58628:	000f883a 	mov	r7,zero
   5862c:	00586e41 	jmpi	586e4 <__register_exitproc>

00058630 <exit>:
   58630:	defffe04 	addi	sp,sp,-8
   58634:	000b883a 	mov	r5,zero
   58638:	dc000015 	stw	r16,0(sp)
   5863c:	dfc00115 	stw	ra,4(sp)
   58640:	2021883a 	mov	r16,r4
   58644:	00587f80 	call	587f8 <__call_exitprocs>
   58648:	008001b4 	movhi	r2,6
   5864c:	10abc604 	addi	r2,r2,-20712
   58650:	11000017 	ldw	r4,0(r2)
   58654:	20800f17 	ldw	r2,60(r4)
   58658:	10000126 	beq	r2,zero,58660 <exit+0x30>
   5865c:	103ee83a 	callr	r2
   58660:	8009883a 	mov	r4,r16
   58664:	005898c0 	call	5898c <_exit>

00058668 <memcmp>:
   58668:	01c000c4 	movi	r7,3
   5866c:	3980192e 	bgeu	r7,r6,586d4 <memcmp+0x6c>
   58670:	2144b03a 	or	r2,r4,r5
   58674:	11c4703a 	and	r2,r2,r7
   58678:	10000f26 	beq	r2,zero,586b8 <memcmp+0x50>
   5867c:	20800003 	ldbu	r2,0(r4)
   58680:	28c00003 	ldbu	r3,0(r5)
   58684:	10c0151e 	bne	r2,r3,586dc <memcmp+0x74>
   58688:	31bfff84 	addi	r6,r6,-2
   5868c:	01ffffc4 	movi	r7,-1
   58690:	00000406 	br	586a4 <memcmp+0x3c>
   58694:	20800003 	ldbu	r2,0(r4)
   58698:	28c00003 	ldbu	r3,0(r5)
   5869c:	31bfffc4 	addi	r6,r6,-1
   586a0:	10c00e1e 	bne	r2,r3,586dc <memcmp+0x74>
   586a4:	21000044 	addi	r4,r4,1
   586a8:	29400044 	addi	r5,r5,1
   586ac:	31fff91e 	bne	r6,r7,58694 <__alt_data_end+0xffff3ca4>
   586b0:	0005883a 	mov	r2,zero
   586b4:	f800283a 	ret
   586b8:	20c00017 	ldw	r3,0(r4)
   586bc:	28800017 	ldw	r2,0(r5)
   586c0:	1880041e 	bne	r3,r2,586d4 <memcmp+0x6c>
   586c4:	31bfff04 	addi	r6,r6,-4
   586c8:	21000104 	addi	r4,r4,4
   586cc:	29400104 	addi	r5,r5,4
   586d0:	39bff936 	bltu	r7,r6,586b8 <__alt_data_end+0xffff3cc8>
   586d4:	303fe91e 	bne	r6,zero,5867c <__alt_data_end+0xffff3c8c>
   586d8:	003ff506 	br	586b0 <__alt_data_end+0xffff3cc0>
   586dc:	10c5c83a 	sub	r2,r2,r3
   586e0:	f800283a 	ret

000586e4 <__register_exitproc>:
   586e4:	008001b4 	movhi	r2,6
   586e8:	defffa04 	addi	sp,sp,-24
   586ec:	10abc604 	addi	r2,r2,-20712
   586f0:	dc000315 	stw	r16,12(sp)
   586f4:	14000017 	ldw	r16,0(r2)
   586f8:	dc400415 	stw	r17,16(sp)
   586fc:	dfc00515 	stw	ra,20(sp)
   58700:	80805217 	ldw	r2,328(r16)
   58704:	2023883a 	mov	r17,r4
   58708:	10003626 	beq	r2,zero,587e4 <__register_exitproc+0x100>
   5870c:	10c00117 	ldw	r3,4(r2)
   58710:	010007c4 	movi	r4,31
   58714:	20c00e16 	blt	r4,r3,58750 <__register_exitproc+0x6c>
   58718:	1a400044 	addi	r9,r3,1
   5871c:	8800211e 	bne	r17,zero,587a4 <__register_exitproc+0xc0>
   58720:	18c00084 	addi	r3,r3,2
   58724:	18c7883a 	add	r3,r3,r3
   58728:	18c7883a 	add	r3,r3,r3
   5872c:	12400115 	stw	r9,4(r2)
   58730:	10c7883a 	add	r3,r2,r3
   58734:	19400015 	stw	r5,0(r3)
   58738:	0005883a 	mov	r2,zero
   5873c:	dfc00517 	ldw	ra,20(sp)
   58740:	dc400417 	ldw	r17,16(sp)
   58744:	dc000317 	ldw	r16,12(sp)
   58748:	dec00604 	addi	sp,sp,24
   5874c:	f800283a 	ret
   58750:	00800134 	movhi	r2,4
   58754:	109a6104 	addi	r2,r2,27012
   58758:	10002526 	beq	r2,zero,587f0 <__register_exitproc+0x10c>
   5875c:	01006404 	movi	r4,400
   58760:	d9400015 	stw	r5,0(sp)
   58764:	d9800115 	stw	r6,4(sp)
   58768:	d9c00215 	stw	r7,8(sp)
   5876c:	00469840 	call	46984 <malloc>
   58770:	d9400017 	ldw	r5,0(sp)
   58774:	d9800117 	ldw	r6,4(sp)
   58778:	d9c00217 	ldw	r7,8(sp)
   5877c:	10001c26 	beq	r2,zero,587f0 <__register_exitproc+0x10c>
   58780:	80c05217 	ldw	r3,328(r16)
   58784:	10000115 	stw	zero,4(r2)
   58788:	02400044 	movi	r9,1
   5878c:	10c00015 	stw	r3,0(r2)
   58790:	80805215 	stw	r2,328(r16)
   58794:	10006215 	stw	zero,392(r2)
   58798:	10006315 	stw	zero,396(r2)
   5879c:	0007883a 	mov	r3,zero
   587a0:	883fdf26 	beq	r17,zero,58720 <__alt_data_end+0xffff3d30>
   587a4:	18d1883a 	add	r8,r3,r3
   587a8:	4211883a 	add	r8,r8,r8
   587ac:	1211883a 	add	r8,r2,r8
   587b0:	41802215 	stw	r6,136(r8)
   587b4:	01000044 	movi	r4,1
   587b8:	11806217 	ldw	r6,392(r2)
   587bc:	20c8983a 	sll	r4,r4,r3
   587c0:	310cb03a 	or	r6,r6,r4
   587c4:	11806215 	stw	r6,392(r2)
   587c8:	41c04215 	stw	r7,264(r8)
   587cc:	01800084 	movi	r6,2
   587d0:	89bfd31e 	bne	r17,r6,58720 <__alt_data_end+0xffff3d30>
   587d4:	11806317 	ldw	r6,396(r2)
   587d8:	3108b03a 	or	r4,r6,r4
   587dc:	11006315 	stw	r4,396(r2)
   587e0:	003fcf06 	br	58720 <__alt_data_end+0xffff3d30>
   587e4:	80805304 	addi	r2,r16,332
   587e8:	80805215 	stw	r2,328(r16)
   587ec:	003fc706 	br	5870c <__alt_data_end+0xffff3d1c>
   587f0:	00bfffc4 	movi	r2,-1
   587f4:	003fd106 	br	5873c <__alt_data_end+0xffff3d4c>

000587f8 <__call_exitprocs>:
   587f8:	008001b4 	movhi	r2,6
   587fc:	10abc604 	addi	r2,r2,-20712
   58800:	10800017 	ldw	r2,0(r2)
   58804:	defff404 	addi	sp,sp,-48
   58808:	dd800815 	stw	r22,32(sp)
   5880c:	d8800015 	stw	r2,0(sp)
   58810:	10805204 	addi	r2,r2,328
   58814:	dd000615 	stw	r20,24(sp)
   58818:	dc800415 	stw	r18,16(sp)
   5881c:	dfc00b15 	stw	ra,44(sp)
   58820:	df000a15 	stw	fp,40(sp)
   58824:	ddc00915 	stw	r23,36(sp)
   58828:	dd400715 	stw	r21,28(sp)
   5882c:	dcc00515 	stw	r19,20(sp)
   58830:	dc400315 	stw	r17,12(sp)
   58834:	dc000215 	stw	r16,8(sp)
   58838:	2025883a 	mov	r18,r4
   5883c:	2829883a 	mov	r20,r5
   58840:	d8800115 	stw	r2,4(sp)
   58844:	05bfffc4 	movi	r22,-1
   58848:	d8800017 	ldw	r2,0(sp)
   5884c:	14c05217 	ldw	r19,328(r2)
   58850:	98001d26 	beq	r19,zero,588c8 <__call_exitprocs+0xd0>
   58854:	dd400117 	ldw	r21,4(sp)
   58858:	98800117 	ldw	r2,4(r19)
   5885c:	173fffc4 	addi	fp,r2,-1
   58860:	e0000d16 	blt	fp,zero,58898 <__call_exitprocs+0xa0>
   58864:	14000044 	addi	r16,r2,1
   58868:	8421883a 	add	r16,r16,r16
   5886c:	8421883a 	add	r16,r16,r16
   58870:	84402004 	addi	r17,r16,128
   58874:	9c63883a 	add	r17,r19,r17
   58878:	9c21883a 	add	r16,r19,r16
   5887c:	a0001e26 	beq	r20,zero,588f8 <__call_exitprocs+0x100>
   58880:	80804017 	ldw	r2,256(r16)
   58884:	15001c26 	beq	r2,r20,588f8 <__call_exitprocs+0x100>
   58888:	e73fffc4 	addi	fp,fp,-1
   5888c:	843fff04 	addi	r16,r16,-4
   58890:	8c7fff04 	addi	r17,r17,-4
   58894:	e5bff91e 	bne	fp,r22,5887c <__alt_data_end+0xffff3e8c>
   58898:	00800134 	movhi	r2,4
   5889c:	109a6604 	addi	r2,r2,27032
   588a0:	10000926 	beq	r2,zero,588c8 <__call_exitprocs+0xd0>
   588a4:	98800117 	ldw	r2,4(r19)
   588a8:	1000311e 	bne	r2,zero,58970 <__call_exitprocs+0x178>
   588ac:	98800017 	ldw	r2,0(r19)
   588b0:	10003426 	beq	r2,zero,58984 <__call_exitprocs+0x18c>
   588b4:	9809883a 	mov	r4,r19
   588b8:	a8800015 	stw	r2,0(r21)
   588bc:	00469980 	call	46998 <free>
   588c0:	acc00017 	ldw	r19,0(r21)
   588c4:	983fe41e 	bne	r19,zero,58858 <__alt_data_end+0xffff3e68>
   588c8:	dfc00b17 	ldw	ra,44(sp)
   588cc:	df000a17 	ldw	fp,40(sp)
   588d0:	ddc00917 	ldw	r23,36(sp)
   588d4:	dd800817 	ldw	r22,32(sp)
   588d8:	dd400717 	ldw	r21,28(sp)
   588dc:	dd000617 	ldw	r20,24(sp)
   588e0:	dcc00517 	ldw	r19,20(sp)
   588e4:	dc800417 	ldw	r18,16(sp)
   588e8:	dc400317 	ldw	r17,12(sp)
   588ec:	dc000217 	ldw	r16,8(sp)
   588f0:	dec00c04 	addi	sp,sp,48
   588f4:	f800283a 	ret
   588f8:	98800117 	ldw	r2,4(r19)
   588fc:	80c00017 	ldw	r3,0(r16)
   58900:	10bfffc4 	addi	r2,r2,-1
   58904:	17001526 	beq	r2,fp,5895c <__call_exitprocs+0x164>
   58908:	80000015 	stw	zero,0(r16)
   5890c:	183fde26 	beq	r3,zero,58888 <__alt_data_end+0xffff3e98>
   58910:	00800044 	movi	r2,1
   58914:	1708983a 	sll	r4,r2,fp
   58918:	98806217 	ldw	r2,392(r19)
   5891c:	9dc00117 	ldw	r23,4(r19)
   58920:	2084703a 	and	r2,r4,r2
   58924:	1000061e 	bne	r2,zero,58940 <__call_exitprocs+0x148>
   58928:	183ee83a 	callr	r3
   5892c:	98800117 	ldw	r2,4(r19)
   58930:	15ffc51e 	bne	r2,r23,58848 <__alt_data_end+0xffff3e58>
   58934:	a8800017 	ldw	r2,0(r21)
   58938:	14ffd326 	beq	r2,r19,58888 <__alt_data_end+0xffff3e98>
   5893c:	003fc206 	br	58848 <__alt_data_end+0xffff3e58>
   58940:	98806317 	ldw	r2,396(r19)
   58944:	2084703a 	and	r2,r4,r2
   58948:	1000061e 	bne	r2,zero,58964 <__call_exitprocs+0x16c>
   5894c:	89400017 	ldw	r5,0(r17)
   58950:	9009883a 	mov	r4,r18
   58954:	183ee83a 	callr	r3
   58958:	003ff406 	br	5892c <__alt_data_end+0xffff3f3c>
   5895c:	9f000115 	stw	fp,4(r19)
   58960:	003fea06 	br	5890c <__alt_data_end+0xffff3f1c>
   58964:	89000017 	ldw	r4,0(r17)
   58968:	183ee83a 	callr	r3
   5896c:	003fef06 	br	5892c <__alt_data_end+0xffff3f3c>
   58970:	98800017 	ldw	r2,0(r19)
   58974:	982b883a 	mov	r21,r19
   58978:	1027883a 	mov	r19,r2
   5897c:	983fb61e 	bne	r19,zero,58858 <__alt_data_end+0xffff3e68>
   58980:	003fd106 	br	588c8 <__alt_data_end+0xffff3ed8>
   58984:	0005883a 	mov	r2,zero
   58988:	003ffa06 	br	58974 <__alt_data_end+0xffff3f84>

0005898c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   5898c:	defffd04 	addi	sp,sp,-12
   58990:	df000215 	stw	fp,8(sp)
   58994:	df000204 	addi	fp,sp,8
   58998:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   5899c:	0001883a 	nop
   589a0:	e0bfff17 	ldw	r2,-4(fp)
   589a4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   589a8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   589ac:	10000226 	beq	r2,zero,589b8 <_exit+0x2c>
    ALT_SIM_FAIL();
   589b0:	002af070 	cmpltui	zero,zero,43969
   589b4:	00000106 	br	589bc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   589b8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   589bc:	003fff06 	br	589bc <__alt_data_end+0xffff3fcc>
