
adc_demo.elf:     file format elf32-littlenios2
adc_demo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020240

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00010080 memsz 0x00010080 flags r-x
    LOAD off    0x000110a0 vaddr 0x000300a0 paddr 0x00031c0c align 2**12
         filesz 0x00001b6c memsz 0x00001b6c flags rw-
    LOAD off    0x00013778 vaddr 0x00033778 paddr 0x00033778 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fad0  00020240  00020240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000390  0002fd10  0002fd10  00010d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b6c  000300a0  00031c0c  000110a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00033778  00033778  00013778  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  000338d8  000338d8  00012c0c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012c0c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000db0  00000000  00000000  00012c30  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000246a1  00000000  00000000  000139e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009595  00000000  00000000  00038081  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b3d2  00000000  00000000  00041616  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002354  00000000  00000000  0004c9e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000038c4  00000000  00000000  0004ed3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017508  00000000  00000000  00052600  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00069b08  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001438  00000000  00000000  00069b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006e4ae  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0006e4b1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006e4bb  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006e4bc  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006e4bd  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006e4c1  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006e4c5  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006e4c9  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0006e4d2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0006e4db  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0006e4e4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000033  00000000  00000000  0006e4ec  2**0
                  CONTENTS, READONLY
 29 .jdi          0000402d  00000000  00000000  0006e51f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006faf7  00000000  00000000  0007254c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020240 l    d  .text	00000000 .text
0002fd10 l    d  .rodata	00000000 .rodata
000300a0 l    d  .rwdata	00000000 .rwdata
00033778 l    d  .bss	00000000 .bss
000338d8 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../adc_demo_bsp//obj/HAL/src/crt0.o
00020288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000223f8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002fea6 l     O .rodata	00000010 zeroes.4181
0002feb6 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00024840 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000263c0 l     F .text	00000008 __fp_lock
000263c8 l     F .text	00000008 __fp_unlock
000263dc l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000300a0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000304e4 l     O .rwdata	00000020 lc_ctype_charset
000304c4 l     O .rwdata	00000020 lc_message_charset
00030504 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0002fee8 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002983c l     F .text	000000fc __sprint_r.part.0
0003001c l     O .rodata	00000010 blanks.4125
0003000c l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0002cdac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002cecc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002cef8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002cff8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002d0ec l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002d1d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002d3ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00031bf4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0002d638 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002d780 l     F .text	00000038 alt_dev_reg
00030aec l     O .rwdata	00001060 jtag_uart
00031b4c l     O .rwdata	0000003c modular_adc_0
00031b88 l     O .rwdata	0000003c modular_adc_1
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002da9c l     F .text	00000204 altera_avalon_jtag_uart_irq
0002dca0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002e2c0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_modular_adc.c
0002e3bc l     F .text	000000a4 alt_adc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002ebd8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002f114 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0002f24c l     F .text	00000050 alt_get_errno
0002f29c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000337ac g     O .bss	00000004 alt_instruction_exception_handler
00028e7c g     F .text	00000074 _mprec_log10
0002e654 g     F .text	0000004c adc_stop
00028f68 g     F .text	0000008c __any_on
0002b18c g     F .text	00000054 _isatty_r
0002fef4 g     O .rodata	00000028 __mprec_tinytens
0002d2f4 g     F .text	00000078 alt_main
0002258c g     F .text	000000b8 _puts_r
000337d8 g     O .bss	00000100 alt_irq
0002b1e0 g     F .text	0000005c _lseek_r
00031c0c g       *ABS*	00000000 __flash_rwdata_start
0002c9f4 g     F .text	00000084 .hidden __eqdf2
000338d8 g       *ABS*	00000000 __alt_heap_start
00022550 g     F .text	0000003c printf
0002b408 g     F .text	0000009c _wcrtomb_r
00029734 g     F .text	0000005c __sseek
00026710 g     F .text	00000010 __sinit
0002b298 g     F .text	00000154 __swbuf_r
00027188 g     F .text	0000007c _setlocale_r
0002657c g     F .text	00000064 __sfmoreglue
0002d38c g     F .text	00000020 __malloc_unlock
00027de8 g     F .text	0000015c memmove
000266f8 g     F .text	00000018 _cleanup
00028068 g     F .text	000000a8 _Balloc
0002ca78 g     F .text	000000e0 .hidden __gtdf2
0002f65c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000001c __reset
0002e800 g     F .text	00000044 adc_interrupt_disable
00020020 g       *ABS*	00000000 __flash_exceptions_start
0002b134 g     F .text	00000058 _fstat_r
00033790 g     O .bss	00000004 errno
000296b0 g     F .text	00000008 __seofread
0002e50c g     F .text	00000070 altera_modular_adc_init
00033798 g     O .bss	00000004 alt_argv
00039bc4 g       *ABS*	00000000 _gp
0002d608 g     F .text	00000030 usleep
0003096c g     O .rwdata	00000180 alt_fd_list
0002ed84 g     F .text	00000090 alt_find_dev
00027cb0 g     F .text	00000138 memcpy
000263d0 g     F .text	0000000c _cleanup_r
0002cc38 g     F .text	000000d0 .hidden __floatsidf
0002e710 g     F .text	00000038 adc_set_mode_run_continuously
0002f1d4 g     F .text	00000078 alt_io_redirect
0002cb58 g     F .text	000000e0 .hidden __ltdf2
0002fd10 g       *ABS*	00000000 __DTOR_END__
00022644 g     F .text	00000014 puts
0002f8d0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00029594 g     F .text	00000074 __fpclassifyd
00028dd8 g     F .text	000000a4 __ratio
0002acac g     F .text	00000024 __vfiprintf_internal
0002de9c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00022524 g     F .text	0000002c _printf_r
00022514 g     F .text	00000008 .hidden __udivsi3
0002d048 g     F .text	000000a4 isatty
0002ff44 g     O .rodata	000000c8 __mprec_tens
00027204 g     F .text	0000000c __locale_charset
0002f844 g     F .text	0000008c alt_icache_flush
0003378c g     O .bss	00000004 __malloc_top_pad
00031bcc g     O .rwdata	00000004 __mb_cur_max
00027234 g     F .text	0000000c _localeconv_r
00028468 g     F .text	0000003c __i2b
00026b74 g     F .text	000004a4 __sfvwrite_r
00029608 g     F .text	00000054 _sbrk_r
0002b23c g     F .text	0000005c _read_r
00031bf8 g     O .rwdata	00000008 altera_modular_adc_list
00031bec g     O .rwdata	00000004 alt_max_fd
0002ae44 g     F .text	00000100 _fclose_r
00026390 g     F .text	00000030 fflush
00033788 g     O .bss	00000004 __malloc_max_sbrked_mem
000220ec g     F .text	00000110 .hidden __extendsfdf2
0002c158 g     F .text	0000089c .hidden __adddf3
00028b80 g     F .text	0000011c __b2d
0002bbc8 g     F .text	00000590 .hidden __umoddi3
0002d220 g     F .text	000000d4 lseek
00031bc4 g     O .rwdata	00000004 _global_impure_ptr
00028ff4 g     F .text	000005a0 _realloc_r
000338d8 g       *ABS*	00000000 __bss_end
0002f024 g     F .text	000000f0 alt_iic_isr_register
0002f558 g     F .text	00000104 alt_tick
0002b608 g     F .text	000005c0 .hidden __udivdi3
0002af58 g     F .text	00000184 _fputwc_r
0002e8c4 g     F .text	00000038 adc_wait_for_interrupt
0002ff1c g     O .rodata	00000028 __mprec_bigtens
0002824c g     F .text	00000104 __s2b
0002cd08 g     F .text	000000a4 .hidden __floatunsidf
00028928 g     F .text	00000060 __mcmp
00026730 g     F .text	00000018 __fp_lock_all
0002efd8 g     F .text	0000004c alt_ic_irq_enabled
0002f4c0 g     F .text	00000098 alt_alarm_stop
000337a0 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d0 alt_irq_handler
00030944 g     O .rwdata	00000028 alt_dev_null
0002e6d4 g     F .text	0000003c adc_set_mode_run_once
0002eb94 g     F .text	00000044 alt_dcache_flush_all
00028350 g     F .text	00000068 __hi0bits
00022064 g     F .text	00000088 .hidden __fixdfsi
00031c0c g       *ABS*	00000000 __ram_rwdata_end
00031be4 g     O .rwdata	00000008 alt_dev_list
0002d688 g     F .text	000000f8 write
000300a0 g       *ABS*	00000000 __ram_rodata_end
0002cf48 g     F .text	000000b0 fstat
0002cb58 g     F .text	000000e0 .hidden __ledf2
0002e6a0 g     F .text	00000034 adc_start
000286a0 g     F .text	00000140 __pow5mult
00029950 g     F .text	0000135c ___vfiprintf_internal_r
00033780 g     O .bss	00000004 __nlocale_changed
0002251c g     F .text	00000008 .hidden __umodsi3
000338d8 g       *ABS*	00000000 end
0002d9d8 g     F .text	000000c4 altera_avalon_jtag_uart_init
000201cc g     F .exceptions	00000074 alt_instruction_exception_entry
0002fd10 g       *ABS*	00000000 __CTOR_LIST__
0003f400 g       *ABS*	00000000 __alt_stack_pointer
0002e334 g     F .text	00000088 alt_avalon_timer_sc_init
00022394 g     F .text	00000064 .hidden __clzsi2
0002e0a8 g     F .text	00000218 altera_avalon_jtag_uart_write
00026720 g     F .text	00000004 __sfp_lock_acquire
00027bc8 g     F .text	000000e8 memchr
000226f0 g     F .text	00001ffc ___vfprintf_internal_r
00026884 g     F .text	000002f0 _free_r
00027210 g     F .text	00000010 __locale_mb_cur_max
0002fb48 g     F .text	00000194 __call_exitprocs
0003377c g     O .bss	00000004 __mlocale_changed
00031bd0 g     O .rwdata	00000004 __malloc_sbrk_base
00020240 g     F .text	0000004c _start
000337a4 g     O .bss	00000004 _alt_tick_rate
000287e0 g     F .text	00000148 __lshift
000337a8 g     O .bss	00000004 _alt_nticks
0002d3fc g     F .text	000000fc read
0002d7ec g     F .text	00000088 alt_sys_init
00020670 g     F .text	00000134 .hidden __floatsisf
0002fa34 g     F .text	00000114 __register_exitproc
000284a4 g     F .text	000001fc __multiply
0002dd48 g     F .text	00000068 altera_avalon_jtag_uart_close
000300a0 g       *ABS*	00000000 __ram_rwdata_start
0002fd10 g       *ABS*	00000000 __ram_rodata_start
000337b0 g     O .bss	00000028 __malloc_current_mallinfo
00028c9c g     F .text	0000013c __d2b
0002d874 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002f790 g     F .text	000000b4 alt_get_fd
0002ea3c g     F .text	00000158 alt_busy_sleep
0002ad2c g     F .text	00000054 _close_r
0002f9b8 g     F .text	0000007c memcmp
0002d934 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000338d8 g       *ABS*	00000000 __alt_stack_base
0002d984 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00024710 g     F .text	00000130 __swsetup_r
0002e7c0 g     F .text	00000040 adc_interrupt_enable
000207a4 g     F .text	000008cc .hidden __divdf3
000265e0 g     F .text	00000118 __sfp
00028ef0 g     F .text	00000078 __copybits
0003053c g     O .rwdata	00000408 __malloc_av_
0002672c g     F .text	00000004 __sinit_lock_release
00021070 g     F .text	00000724 .hidden __muldf3
0002965c g     F .text	00000054 __sread
0002f67c g     F .text	00000114 alt_find_file
0002ec28 g     F .text	000000a4 alt_dev_llist_insert
0002d36c g     F .text	00000020 __malloc_lock
0002d558 g     F .text	000000b0 sbrk
00026168 g     F .text	00000228 _fflush_r
0002ad80 g     F .text	000000c4 _calloc_r
00033778 g       *ABS*	00000000 __bss_start
00027f44 g     F .text	00000124 memset
0002028c g     F .text	000003e4 main
0003379c g     O .bss	00000004 alt_envp
00033784 g     O .bss	00000004 __malloc_max_total_mem
0002d8d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002b3ec g     F .text	0000001c __swbuf
0002e460 g     F .text	000000ac alt_adc_word_read
00029790 g     F .text	00000008 __sclose
0003f400 g       *ABS*	00000000 __alt_heap_limit
0002af44 g     F .text	00000014 fclose
000221fc g     F .text	00000198 .hidden __truncdfsf2
00024a40 g     F .text	00001728 _dtoa_r
00027420 g     F .text	000007a8 _malloc_r
0002b57c g     F .text	00000030 __ascii_wctomb
00031bf0 g     O .rwdata	00000004 alt_errno
00027018 g     F .text	000000b8 _fwalk
00022464 g     F .text	00000054 .hidden __divsi3
00026760 g     F .text	00000124 _malloc_trim_r
0002fd10 g       *ABS*	00000000 __CTOR_END__
00029798 g     F .text	000000a4 strcmp
0002fd10 g       *ABS*	00000000 __flash_rodata_start
0002fd10 g       *ABS*	00000000 __DTOR_LIST__
0002c9f4 g     F .text	00000084 .hidden __nedf2
0002d7b8 g     F .text	00000034 alt_irq_init
0002d4f8 g     F .text	00000060 alt_release_fd
0002fd60 g     O .rodata	00000100 .hidden __clz_tab
00033778 g     O .bss	00000004 _PathLocale
0002f96c g     F .text	00000014 atexit
0002acd0 g     F .text	0000005c _write_r
00027240 g     F .text	0000001c setlocale
00031bc8 g     O .rwdata	00000004 _impure_ptr
00033794 g     O .bss	00000004 alt_argc
0002ed28 g     F .text	0000005c _do_dtors
0002722c g     F .text	00000008 __locale_cjk_lang
00020020 g       .exceptions	00000000 alt_irq_entry
00028b20 g     F .text	00000060 __ulp
00026748 g     F .text	00000018 __fp_unlock_all
00031bdc g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002725c g     F .text	0000000c localeconv
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0002ee44 g     F .text	00000050 alt_ic_isr_register
00031c0c g       *ABS*	00000000 _edata
000338d8 g       *ABS*	00000000 _end
0002e884 g     F .text	00000040 adc_interrupt_asserted
00020240 g       *ABS*	00000000 __ram_exceptions_end
0002ddb0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0002ef34 g     F .text	000000a4 alt_ic_irq_disable
000296b8 g     F .text	0000007c __swrite
00031bd4 g     O .rwdata	00000004 __malloc_trim_threshold
0002e844 g     F .text	00000040 adc_clear_interrupt_status
00027220 g     F .text	0000000c __locale_msgcharset
0002f980 g     F .text	00000038 exit
000270d0 g     F .text	000000b8 _fwalk_reent
00028988 g     F .text	00000198 __mdiff
000224b8 g     F .text	0000005c .hidden __modsi3
0003f400 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00026724 g     F .text	00000004 __sfp_lock_release
0002e614 g     F .text	00000040 altera_modular_adc_open
0002fcdc g     F .text	00000034 _exit
0002e8fc g     F .text	00000140 alt_alarm_start
00027268 g     F .text	000001b8 __smakebuf_r
00022658 g     F .text	00000098 strlen
0002f368 g     F .text	00000158 open
0002ca78 g     F .text	000000e0 .hidden __gedf2
0002e748 g     F .text	00000078 adc_recalibrate
00031bd8 g     O .rwdata	00000004 __wctomb
00029938 g     F .text	00000018 __sprint_r
0002ee14 g     F .text	00000030 alt_icache_flush_all
00031c00 g     O .rwdata	00000004 alt_priority_mask
0002ee94 g     F .text	000000a0 alt_ic_irq_enable
000246ec g     F .text	00000024 __vfprintf_internal
0002b5ac g     F .text	0000005c _wctomb_r
00021794 g     F .text	000008d0 .hidden __subdf3
000283b8 g     F .text	000000b0 __lo0bits
00031c04 g     O .rwdata	00000008 alt_alarm_list
0002eccc g     F .text	0000005c _do_ctors
0002b4a4 g     F .text	000000d8 wcrtomb
0002cdfc g     F .text	000000d0 close
0002d150 g     F .text	00000080 alt_load
0002b0dc g     F .text	00000058 fputwc
0002e57c g     F .text	00000098 alt_adc_register_callback
00000000  w      *UND*	00000000 free
00026728 g     F .text	00000004 __sinit_lock_acquire
00028138 g     F .text	00000114 __multadd
00028110 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffe0c04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409014 	ori	at,at,576
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__reset-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201cc0 	call	201cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	108df604 	addi	r2,r2,14296
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	108df604 	addi	r2,r2,14296
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe0d2c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0d20>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	e037883a 	mov	sp,fp
   201bc:	dfc00117 	ldw	ra,4(sp)
   201c0:	df000017 	ldw	fp,0(sp)
   201c4:	dec00204 	addi	sp,sp,8
   201c8:	f800283a 	ret

000201cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201cc:	defffb04 	addi	sp,sp,-20
   201d0:	dfc00415 	stw	ra,16(sp)
   201d4:	df000315 	stw	fp,12(sp)
   201d8:	df000304 	addi	fp,sp,12
   201dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e0:	000531fa 	rdctl	r2,exception
   201e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201e8:	e0bffd17 	ldw	r2,-12(fp)
   201ec:	10801f0c 	andi	r2,r2,124
   201f0:	1004d0ba 	srli	r2,r2,2
   201f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201f8:	0005333a 	rdctl	r2,badaddr
   201fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20200:	d0a6fa17 	ldw	r2,-25624(gp)
   20204:	10000726 	beq	r2,zero,20224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   20208:	d0a6fa17 	ldw	r2,-25624(gp)
   2020c:	e0fffd17 	ldw	r3,-12(fp)
   20210:	1809883a 	mov	r4,r3
   20214:	e17fff17 	ldw	r5,-4(fp)
   20218:	e1bffe17 	ldw	r6,-8(fp)
   2021c:	103ee83a 	callr	r2
   20220:	00000206 	br	2022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20228:	0005883a 	mov	r2,zero
}
   2022c:	e037883a 	mov	sp,fp
   20230:	dfc00117 	ldw	ra,4(sp)
   20234:	df000017 	ldw	fp,0(sp)
   20238:	dec00204 	addi	sp,sp,8
   2023c:	f800283a 	ret

Disassembly of section .text:

00020240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   20248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   2024c:	00bffd16 	blt	zero,r2,20244 <__alt_data_end+0xfffe0e44>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20250:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20254:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
   20258:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2025c:	d6a6f114 	ori	gp,gp,39876
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20260:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20264:	108dde14 	ori	r2,r2,14200

    movhi r3, %hi(__bss_end)
   20268:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   2026c:	18ce3614 	ori	r3,r3,14552

    beq r2, r3, 1f
   20270:	10c00326 	beq	r2,r3,20280 <_start+0x40>

0:
    stw zero, (r2)
   20274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2027c:	10fffd36 	bltu	r2,r3,20274 <__alt_data_end+0xfffe0e74>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20280:	002d1500 	call	2d150 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20284:	002d2f40 	call	2d2f4 <alt_main>

00020288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20288:	003fff06 	br	20288 <__alt_data_end+0xfffe0e88>

0002028c <main>:
#include "altera_modular_adc_sample_store_regs.h"
#include "altera_modular_adc.h"


int main()
{
   2028c:	defff104 	addi	sp,sp,-60
   20290:	dfc00e15 	stw	ra,56(sp)
   20294:	df000d15 	stw	fp,52(sp)
   20298:	dc800c15 	stw	r18,48(sp)
   2029c:	dc400b15 	stw	r17,44(sp)
   202a0:	dc000a15 	stw	r16,40(sp)
   202a4:	df000d04 	addi	fp,sp,52
	int value_0, value_1, Slot=0/* 0: ANAIN1_SMA(J18) adc channel */;
   202a8:	e03ff615 	stw	zero,-40(fp)
	float Vout_0, Vin_0, Vout_1, Vin_1;
	printf("SMA ADC Demo\n");
   202ac:	010000f4 	movhi	r4,3
   202b0:	213f4404 	addi	r4,r4,-752
   202b4:	00226440 	call	22644 <puts>

	IOWR(MODULAR_ADC_0_SEQUENCER_CSR_BASE, 0x00, 0x00); // Continued ADC
   202b8:	0007883a 	mov	r3,zero
   202bc:	00800134 	movhi	r2,4
   202c0:	10850e04 	addi	r2,r2,5176
   202c4:	10c00035 	stwio	r3,0(r2)
    IOWR(MODULAR_ADC_0_SEQUENCER_CSR_BASE, 0x00, 0x01); // run
   202c8:	00c00044 	movi	r3,1
   202cc:	00800134 	movhi	r2,4
   202d0:	10850e04 	addi	r2,r2,5176
   202d4:	10c00035 	stwio	r3,0(r2)

	IOWR(MODULAR_ADC_1_SEQUENCER_CSR_BASE, 0x00, 0x00); // Continued ADC
   202d8:	0007883a 	mov	r3,zero
   202dc:	00800134 	movhi	r2,4
   202e0:	10850c04 	addi	r2,r2,5168
   202e4:	10c00035 	stwio	r3,0(r2)
    IOWR(MODULAR_ADC_1_SEQUENCER_CSR_BASE, 0x00, 0x01); // run
   202e8:	00c00044 	movi	r3,1
   202ec:	00800134 	movhi	r2,4
   202f0:	10850c04 	addi	r2,r2,5168
   202f4:	10c00035 	stwio	r3,0(r2)

	usleep(10*1000);
   202f8:	0109c404 	movi	r4,10000
   202fc:	002d6080 	call	2d608 <usleep>

    while(1){
    	value_0 = IORD(MODULAR_ADC_0_SAMPLE_STORE_CSR_BASE, Slot) & 0xFFF; // 12-bit data
   20300:	e0bff617 	ldw	r2,-40(fp)
   20304:	1085883a 	add	r2,r2,r2
   20308:	1085883a 	add	r2,r2,r2
   2030c:	1007883a 	mov	r3,r2
   20310:	00800134 	movhi	r2,4
   20314:	10848004 	addi	r2,r2,4608
   20318:	1885883a 	add	r2,r3,r2
   2031c:	10800037 	ldwio	r2,0(r2)
   20320:	1083ffcc 	andi	r2,r2,4095
   20324:	e0bff715 	stw	r2,-36(fp)
    	value_1 = IORD(MODULAR_ADC_1_SAMPLE_STORE_CSR_BASE, Slot) & 0xFFF; // 12-bit data
   20328:	e0bff617 	ldw	r2,-40(fp)
   2032c:	1085883a 	add	r2,r2,r2
   20330:	1085883a 	add	r2,r2,r2
   20334:	1007883a 	mov	r3,r2
   20338:	00800134 	movhi	r2,4
   2033c:	10840004 	addi	r2,r2,4096
   20340:	1885883a 	add	r2,r3,r2
   20344:	10800037 	ldwio	r2,0(r2)
   20348:	1083ffcc 	andi	r2,r2,4095
   2034c:	e0bff815 	stw	r2,-32(fp)

    	// SMA input,calculate input voltage
    	//  Vout=(6.25+Vin)/5
    	//  Vin = 5xVout - 6.25

    	Vout_0 = (float)value_0/4095.0*2.5; // 0~4095 mapping to 0~2.5V
   20350:	e13ff717 	ldw	r4,-36(fp)
   20354:	00206700 	call	20670 <__floatsisf>
   20358:	1007883a 	mov	r3,r2
   2035c:	1809883a 	mov	r4,r3
   20360:	00220ec0 	call	220ec <__extendsfdf2>
   20364:	100b883a 	mov	r5,r2
   20368:	180d883a 	mov	r6,r3
   2036c:	2809883a 	mov	r4,r5
   20370:	300b883a 	mov	r5,r6
   20374:	000d883a 	mov	r6,zero
   20378:	01d02c34 	movhi	r7,16560
   2037c:	39ff8004 	addi	r7,r7,-512
   20380:	00207a40 	call	207a4 <__divdf3>
   20384:	1009883a 	mov	r4,r2
   20388:	180b883a 	mov	r5,r3
   2038c:	2005883a 	mov	r2,r4
   20390:	2807883a 	mov	r3,r5
   20394:	1009883a 	mov	r4,r2
   20398:	180b883a 	mov	r5,r3
   2039c:	000d883a 	mov	r6,zero
   203a0:	01d00134 	movhi	r7,16388
   203a4:	00210700 	call	21070 <__muldf3>
   203a8:	1009883a 	mov	r4,r2
   203ac:	180b883a 	mov	r5,r3
   203b0:	2005883a 	mov	r2,r4
   203b4:	2807883a 	mov	r3,r5
   203b8:	1009883a 	mov	r4,r2
   203bc:	180b883a 	mov	r5,r3
   203c0:	00221fc0 	call	221fc <__truncdfsf2>
   203c4:	1007883a 	mov	r3,r2
   203c8:	e0fff915 	stw	r3,-28(fp)
    	Vin_0 = 5.0* Vout_0 - 6.25;
   203cc:	e13ff917 	ldw	r4,-28(fp)
   203d0:	00220ec0 	call	220ec <__extendsfdf2>
   203d4:	100b883a 	mov	r5,r2
   203d8:	180d883a 	mov	r6,r3
   203dc:	2809883a 	mov	r4,r5
   203e0:	300b883a 	mov	r5,r6
   203e4:	000d883a 	mov	r6,zero
   203e8:	01d00534 	movhi	r7,16404
   203ec:	00210700 	call	21070 <__muldf3>
   203f0:	1009883a 	mov	r4,r2
   203f4:	180b883a 	mov	r5,r3
   203f8:	2005883a 	mov	r2,r4
   203fc:	2807883a 	mov	r3,r5
   20400:	1009883a 	mov	r4,r2
   20404:	180b883a 	mov	r5,r3
   20408:	000d883a 	mov	r6,zero
   2040c:	01d00674 	movhi	r7,16409
   20410:	00217940 	call	21794 <__subdf3>
   20414:	1009883a 	mov	r4,r2
   20418:	180b883a 	mov	r5,r3
   2041c:	2005883a 	mov	r2,r4
   20420:	2807883a 	mov	r3,r5
   20424:	1009883a 	mov	r4,r2
   20428:	180b883a 	mov	r5,r3
   2042c:	00221fc0 	call	221fc <__truncdfsf2>
   20430:	1007883a 	mov	r3,r2
   20434:	e0fffa15 	stw	r3,-24(fp)

    	Vout_1 = (float)value_1/4095.0*2.5; // 0~4095 mapping to 0~2.5V
   20438:	e13ff817 	ldw	r4,-32(fp)
   2043c:	00206700 	call	20670 <__floatsisf>
   20440:	1007883a 	mov	r3,r2
   20444:	1809883a 	mov	r4,r3
   20448:	00220ec0 	call	220ec <__extendsfdf2>
   2044c:	100b883a 	mov	r5,r2
   20450:	180d883a 	mov	r6,r3
   20454:	2809883a 	mov	r4,r5
   20458:	300b883a 	mov	r5,r6
   2045c:	000d883a 	mov	r6,zero
   20460:	01d02c34 	movhi	r7,16560
   20464:	39ff8004 	addi	r7,r7,-512
   20468:	00207a40 	call	207a4 <__divdf3>
   2046c:	1009883a 	mov	r4,r2
   20470:	180b883a 	mov	r5,r3
   20474:	2005883a 	mov	r2,r4
   20478:	2807883a 	mov	r3,r5
   2047c:	1009883a 	mov	r4,r2
   20480:	180b883a 	mov	r5,r3
   20484:	000d883a 	mov	r6,zero
   20488:	01d00134 	movhi	r7,16388
   2048c:	00210700 	call	21070 <__muldf3>
   20490:	1009883a 	mov	r4,r2
   20494:	180b883a 	mov	r5,r3
   20498:	2005883a 	mov	r2,r4
   2049c:	2807883a 	mov	r3,r5
   204a0:	1009883a 	mov	r4,r2
   204a4:	180b883a 	mov	r5,r3
   204a8:	00221fc0 	call	221fc <__truncdfsf2>
   204ac:	1007883a 	mov	r3,r2
   204b0:	e0fffb15 	stw	r3,-20(fp)
    	Vin_1 = 5.0* Vout_1 - 6.25;
   204b4:	e13ffb17 	ldw	r4,-20(fp)
   204b8:	00220ec0 	call	220ec <__extendsfdf2>
   204bc:	100b883a 	mov	r5,r2
   204c0:	180d883a 	mov	r6,r3
   204c4:	2809883a 	mov	r4,r5
   204c8:	300b883a 	mov	r5,r6
   204cc:	000d883a 	mov	r6,zero
   204d0:	01d00534 	movhi	r7,16404
   204d4:	00210700 	call	21070 <__muldf3>
   204d8:	1009883a 	mov	r4,r2
   204dc:	180b883a 	mov	r5,r3
   204e0:	2005883a 	mov	r2,r4
   204e4:	2807883a 	mov	r3,r5
   204e8:	1009883a 	mov	r4,r2
   204ec:	180b883a 	mov	r5,r3
   204f0:	000d883a 	mov	r6,zero
   204f4:	01d00674 	movhi	r7,16409
   204f8:	00217940 	call	21794 <__subdf3>
   204fc:	1009883a 	mov	r4,r2
   20500:	180b883a 	mov	r5,r3
   20504:	2005883a 	mov	r2,r4
   20508:	2807883a 	mov	r3,r5
   2050c:	1009883a 	mov	r4,r2
   20510:	180b883a 	mov	r5,r3
   20514:	00221fc0 	call	221fc <__truncdfsf2>
   20518:	1007883a 	mov	r3,r2
   2051c:	e0fffc15 	stw	r3,-16(fp)

    	printf("Vin_0=%dmV, Vout_0=%dmV(%xh). Vin_1=%dmV, Vout_1=%dmV(%xh)\r\n", (int)(Vin_0*1000.0), (int)(Vout_0*1000.0), value_0, (int)(Vin_1*1000.0), (int)(Vout_1*1000.0), value_1);
   20520:	e13ffa17 	ldw	r4,-24(fp)
   20524:	00220ec0 	call	220ec <__extendsfdf2>
   20528:	100b883a 	mov	r5,r2
   2052c:	180d883a 	mov	r6,r3
   20530:	2809883a 	mov	r4,r5
   20534:	300b883a 	mov	r5,r6
   20538:	000d883a 	mov	r6,zero
   2053c:	01d023f4 	movhi	r7,16527
   20540:	39d00004 	addi	r7,r7,16384
   20544:	00210700 	call	21070 <__muldf3>
   20548:	1009883a 	mov	r4,r2
   2054c:	180b883a 	mov	r5,r3
   20550:	2005883a 	mov	r2,r4
   20554:	2807883a 	mov	r3,r5
   20558:	1009883a 	mov	r4,r2
   2055c:	180b883a 	mov	r5,r3
   20560:	00220640 	call	22064 <__fixdfsi>
   20564:	1025883a 	mov	r18,r2
   20568:	e13ff917 	ldw	r4,-28(fp)
   2056c:	00220ec0 	call	220ec <__extendsfdf2>
   20570:	100b883a 	mov	r5,r2
   20574:	180d883a 	mov	r6,r3
   20578:	2809883a 	mov	r4,r5
   2057c:	300b883a 	mov	r5,r6
   20580:	000d883a 	mov	r6,zero
   20584:	01d023f4 	movhi	r7,16527
   20588:	39d00004 	addi	r7,r7,16384
   2058c:	00210700 	call	21070 <__muldf3>
   20590:	1009883a 	mov	r4,r2
   20594:	180b883a 	mov	r5,r3
   20598:	2005883a 	mov	r2,r4
   2059c:	2807883a 	mov	r3,r5
   205a0:	1009883a 	mov	r4,r2
   205a4:	180b883a 	mov	r5,r3
   205a8:	00220640 	call	22064 <__fixdfsi>
   205ac:	1023883a 	mov	r17,r2
   205b0:	e13ffc17 	ldw	r4,-16(fp)
   205b4:	00220ec0 	call	220ec <__extendsfdf2>
   205b8:	100b883a 	mov	r5,r2
   205bc:	180d883a 	mov	r6,r3
   205c0:	2809883a 	mov	r4,r5
   205c4:	300b883a 	mov	r5,r6
   205c8:	000d883a 	mov	r6,zero
   205cc:	01d023f4 	movhi	r7,16527
   205d0:	39d00004 	addi	r7,r7,16384
   205d4:	00210700 	call	21070 <__muldf3>
   205d8:	1009883a 	mov	r4,r2
   205dc:	180b883a 	mov	r5,r3
   205e0:	2005883a 	mov	r2,r4
   205e4:	2807883a 	mov	r3,r5
   205e8:	1009883a 	mov	r4,r2
   205ec:	180b883a 	mov	r5,r3
   205f0:	00220640 	call	22064 <__fixdfsi>
   205f4:	1021883a 	mov	r16,r2
   205f8:	e13ffb17 	ldw	r4,-20(fp)
   205fc:	00220ec0 	call	220ec <__extendsfdf2>
   20600:	100b883a 	mov	r5,r2
   20604:	180d883a 	mov	r6,r3
   20608:	2809883a 	mov	r4,r5
   2060c:	300b883a 	mov	r5,r6
   20610:	000d883a 	mov	r6,zero
   20614:	01d023f4 	movhi	r7,16527
   20618:	39d00004 	addi	r7,r7,16384
   2061c:	00210700 	call	21070 <__muldf3>
   20620:	1009883a 	mov	r4,r2
   20624:	180b883a 	mov	r5,r3
   20628:	2005883a 	mov	r2,r4
   2062c:	2807883a 	mov	r3,r5
   20630:	1009883a 	mov	r4,r2
   20634:	180b883a 	mov	r5,r3
   20638:	00220640 	call	22064 <__fixdfsi>
   2063c:	dc000015 	stw	r16,0(sp)
   20640:	d8800115 	stw	r2,4(sp)
   20644:	e0bff817 	ldw	r2,-32(fp)
   20648:	d8800215 	stw	r2,8(sp)
   2064c:	010000f4 	movhi	r4,3
   20650:	213f4804 	addi	r4,r4,-736
   20654:	900b883a 	mov	r5,r18
   20658:	880d883a 	mov	r6,r17
   2065c:	e1fff717 	ldw	r7,-36(fp)
   20660:	00225500 	call	22550 <printf>
    	//printf("adc value=%xh\r\n", value);

    	//
    	usleep(10*1000); // 0.01 second
   20664:	0109c404 	movi	r4,10000
   20668:	002d6080 	call	2d608 <usleep>
    }
   2066c:	003f2406 	br	20300 <__alt_data_end+0xfffe0f00>

00020670 <__floatsisf>:
   20670:	defffd04 	addi	sp,sp,-12
   20674:	dc000015 	stw	r16,0(sp)
   20678:	dfc00215 	stw	ra,8(sp)
   2067c:	dc400115 	stw	r17,4(sp)
   20680:	2021883a 	mov	r16,r4
   20684:	20003a26 	beq	r4,zero,20770 <__floatsisf+0x100>
   20688:	2022d7fa 	srli	r17,r4,31
   2068c:	88000126 	beq	r17,zero,20694 <__floatsisf+0x24>
   20690:	0121c83a 	sub	r16,zero,r4
   20694:	8009883a 	mov	r4,r16
   20698:	00223940 	call	22394 <__clzsi2>
   2069c:	00c02784 	movi	r3,158
   206a0:	1887c83a 	sub	r3,r3,r2
   206a4:	01802584 	movi	r6,150
   206a8:	800b883a 	mov	r5,r16
   206ac:	30c01616 	blt	r6,r3,20708 <__floatsisf+0x98>
   206b0:	01000204 	movi	r4,8
   206b4:	2080020e 	bge	r4,r2,206c0 <__floatsisf+0x50>
   206b8:	10bffe04 	addi	r2,r2,-8
   206bc:	80a0983a 	sll	r16,r16,r2
   206c0:	00802034 	movhi	r2,128
   206c4:	10bfffc4 	addi	r2,r2,-1
   206c8:	8809883a 	mov	r4,r17
   206cc:	80a0703a 	and	r16,r16,r2
   206d0:	18803fcc 	andi	r2,r3,255
   206d4:	100695fa 	slli	r3,r2,23
   206d8:	20803fcc 	andi	r2,r4,255
   206dc:	100897fa 	slli	r4,r2,31
   206e0:	00802034 	movhi	r2,128
   206e4:	10bfffc4 	addi	r2,r2,-1
   206e8:	8084703a 	and	r2,r16,r2
   206ec:	10c4b03a 	or	r2,r2,r3
   206f0:	1104b03a 	or	r2,r2,r4
   206f4:	dfc00217 	ldw	ra,8(sp)
   206f8:	dc400117 	ldw	r17,4(sp)
   206fc:	dc000017 	ldw	r16,0(sp)
   20700:	dec00304 	addi	sp,sp,12
   20704:	f800283a 	ret
   20708:	01002644 	movi	r4,153
   2070c:	20c01c16 	blt	r4,r3,20780 <__floatsisf+0x110>
   20710:	01000144 	movi	r4,5
   20714:	2080020e 	bge	r4,r2,20720 <__floatsisf+0xb0>
   20718:	113ffec4 	addi	r4,r2,-5
   2071c:	290a983a 	sll	r5,r5,r4
   20720:	043f0034 	movhi	r16,64512
   20724:	843fffc4 	addi	r16,r16,-1
   20728:	298001cc 	andi	r6,r5,7
   2072c:	2c20703a 	and	r16,r5,r16
   20730:	30000426 	beq	r6,zero,20744 <__floatsisf+0xd4>
   20734:	294003cc 	andi	r5,r5,15
   20738:	01000104 	movi	r4,4
   2073c:	29000126 	beq	r5,r4,20744 <__floatsisf+0xd4>
   20740:	8121883a 	add	r16,r16,r4
   20744:	8101002c 	andhi	r4,r16,1024
   20748:	20000526 	beq	r4,zero,20760 <__floatsisf+0xf0>
   2074c:	00c027c4 	movi	r3,159
   20750:	1887c83a 	sub	r3,r3,r2
   20754:	00bf0034 	movhi	r2,64512
   20758:	10bfffc4 	addi	r2,r2,-1
   2075c:	80a0703a 	and	r16,r16,r2
   20760:	802091ba 	slli	r16,r16,6
   20764:	8809883a 	mov	r4,r17
   20768:	8020d27a 	srli	r16,r16,9
   2076c:	003fd806 	br	206d0 <__alt_data_end+0xfffe12d0>
   20770:	0009883a 	mov	r4,zero
   20774:	0007883a 	mov	r3,zero
   20778:	0021883a 	mov	r16,zero
   2077c:	003fd406 	br	206d0 <__alt_data_end+0xfffe12d0>
   20780:	01800144 	movi	r6,5
   20784:	110006c4 	addi	r4,r2,27
   20788:	8108983a 	sll	r4,r16,r4
   2078c:	308fc83a 	sub	r7,r6,r2
   20790:	81cad83a 	srl	r5,r16,r7
   20794:	2008c03a 	cmpne	r4,r4,zero
   20798:	214ab03a 	or	r5,r4,r5
   2079c:	30bfe00e 	bge	r6,r2,20720 <__alt_data_end+0xfffe1320>
   207a0:	003fdd06 	br	20718 <__alt_data_end+0xfffe1318>

000207a4 <__divdf3>:
   207a4:	defff204 	addi	sp,sp,-56
   207a8:	dd000815 	stw	r20,32(sp)
   207ac:	2828d53a 	srli	r20,r5,20
   207b0:	dd800a15 	stw	r22,40(sp)
   207b4:	282cd7fa 	srli	r22,r5,31
   207b8:	dc000415 	stw	r16,16(sp)
   207bc:	04000434 	movhi	r16,16
   207c0:	df000c15 	stw	fp,48(sp)
   207c4:	dcc00715 	stw	r19,28(sp)
   207c8:	dc800615 	stw	r18,24(sp)
   207cc:	dc400515 	stw	r17,20(sp)
   207d0:	843fffc4 	addi	r16,r16,-1
   207d4:	dfc00d15 	stw	ra,52(sp)
   207d8:	ddc00b15 	stw	r23,44(sp)
   207dc:	dd400915 	stw	r21,36(sp)
   207e0:	a501ffcc 	andi	r20,r20,2047
   207e4:	2025883a 	mov	r18,r4
   207e8:	2027883a 	mov	r19,r4
   207ec:	2c22703a 	and	r17,r5,r16
   207f0:	b7003fcc 	andi	fp,r22,255
   207f4:	a0005e26 	beq	r20,zero,20970 <__divdf3+0x1cc>
   207f8:	0081ffc4 	movi	r2,2047
   207fc:	a0803526 	beq	r20,r2,208d4 <__divdf3+0x130>
   20800:	8c000434 	orhi	r16,r17,16
   20804:	2004d77a 	srli	r2,r4,29
   20808:	802090fa 	slli	r16,r16,3
   2080c:	202690fa 	slli	r19,r4,3
   20810:	a53f0044 	addi	r20,r20,-1023
   20814:	80a2b03a 	or	r17,r16,r2
   20818:	0025883a 	mov	r18,zero
   2081c:	0011883a 	mov	r8,zero
   20820:	380ad53a 	srli	r5,r7,20
   20824:	382ed7fa 	srli	r23,r7,31
   20828:	04000434 	movhi	r16,16
   2082c:	843fffc4 	addi	r16,r16,-1
   20830:	2941ffcc 	andi	r5,r5,2047
   20834:	302b883a 	mov	r21,r6
   20838:	3c20703a 	and	r16,r7,r16
   2083c:	ba403fcc 	andi	r9,r23,255
   20840:	28006726 	beq	r5,zero,209e0 <__divdf3+0x23c>
   20844:	0081ffc4 	movi	r2,2047
   20848:	28805f26 	beq	r5,r2,209c8 <__divdf3+0x224>
   2084c:	84000434 	orhi	r16,r16,16
   20850:	3004d77a 	srli	r2,r6,29
   20854:	802090fa 	slli	r16,r16,3
   20858:	302a90fa 	slli	r21,r6,3
   2085c:	297f0044 	addi	r5,r5,-1023
   20860:	80a0b03a 	or	r16,r16,r2
   20864:	000f883a 	mov	r7,zero
   20868:	3c86b03a 	or	r3,r7,r18
   2086c:	180690ba 	slli	r3,r3,2
   20870:	008000b4 	movhi	r2,2
   20874:	10822504 	addi	r2,r2,2196
   20878:	1887883a 	add	r3,r3,r2
   2087c:	18c00017 	ldw	r3,0(r3)
   20880:	b5c8f03a 	xor	r4,r22,r23
   20884:	200d883a 	mov	r6,r4
   20888:	24803fcc 	andi	r18,r4,255
   2088c:	a169c83a 	sub	r20,r20,r5
   20890:	1800683a 	jmp	r3
   20894:	00020adc 	xori	zero,zero,2091
   20898:	0002090c 	andi	zero,zero,2084
   2089c:	00020aa0 	cmpeqi	zero,zero,2090
   208a0:	000208f0 	cmpltui	zero,zero,2083
   208a4:	00020aa0 	cmpeqi	zero,zero,2090
   208a8:	00020a74 	movhi	zero,2089
   208ac:	00020aa0 	cmpeqi	zero,zero,2090
   208b0:	000208f0 	cmpltui	zero,zero,2083
   208b4:	0002090c 	andi	zero,zero,2084
   208b8:	0002090c 	andi	zero,zero,2084
   208bc:	00020a74 	movhi	zero,2089
   208c0:	000208f0 	cmpltui	zero,zero,2083
   208c4:	00020900 	call	2090 <__reset-0x1df70>
   208c8:	00020900 	call	2090 <__reset-0x1df70>
   208cc:	00020900 	call	2090 <__reset-0x1df70>
   208d0:	00020ab0 	cmpltui	zero,zero,2090
   208d4:	8904b03a 	or	r2,r17,r4
   208d8:	1000631e 	bne	r2,zero,20a68 <__divdf3+0x2c4>
   208dc:	04800204 	movi	r18,8
   208e0:	0023883a 	mov	r17,zero
   208e4:	0027883a 	mov	r19,zero
   208e8:	02000084 	movi	r8,2
   208ec:	003fcc06 	br	20820 <__alt_data_end+0xfffe1420>
   208f0:	8023883a 	mov	r17,r16
   208f4:	a827883a 	mov	r19,r21
   208f8:	4839883a 	mov	fp,r9
   208fc:	3811883a 	mov	r8,r7
   20900:	00800084 	movi	r2,2
   20904:	40812a1e 	bne	r8,r2,20db0 <__divdf3+0x60c>
   20908:	e025883a 	mov	r18,fp
   2090c:	9180004c 	andi	r6,r18,1
   20910:	0101ffc4 	movi	r4,2047
   20914:	000b883a 	mov	r5,zero
   20918:	0027883a 	mov	r19,zero
   2091c:	2008953a 	slli	r4,r4,20
   20920:	30c03fcc 	andi	r3,r6,255
   20924:	04000434 	movhi	r16,16
   20928:	180697fa 	slli	r3,r3,31
   2092c:	843fffc4 	addi	r16,r16,-1
   20930:	2c20703a 	and	r16,r5,r16
   20934:	8120b03a 	or	r16,r16,r4
   20938:	80c6b03a 	or	r3,r16,r3
   2093c:	9805883a 	mov	r2,r19
   20940:	dfc00d17 	ldw	ra,52(sp)
   20944:	df000c17 	ldw	fp,48(sp)
   20948:	ddc00b17 	ldw	r23,44(sp)
   2094c:	dd800a17 	ldw	r22,40(sp)
   20950:	dd400917 	ldw	r21,36(sp)
   20954:	dd000817 	ldw	r20,32(sp)
   20958:	dcc00717 	ldw	r19,28(sp)
   2095c:	dc800617 	ldw	r18,24(sp)
   20960:	dc400517 	ldw	r17,20(sp)
   20964:	dc000417 	ldw	r16,16(sp)
   20968:	dec00e04 	addi	sp,sp,56
   2096c:	f800283a 	ret
   20970:	8904b03a 	or	r2,r17,r4
   20974:	10003726 	beq	r2,zero,20a54 <__divdf3+0x2b0>
   20978:	88011c26 	beq	r17,zero,20dec <__divdf3+0x648>
   2097c:	8809883a 	mov	r4,r17
   20980:	d9800315 	stw	r6,12(sp)
   20984:	d9c00115 	stw	r7,4(sp)
   20988:	00223940 	call	22394 <__clzsi2>
   2098c:	d9800317 	ldw	r6,12(sp)
   20990:	d9c00117 	ldw	r7,4(sp)
   20994:	1007883a 	mov	r3,r2
   20998:	01000a04 	movi	r4,40
   2099c:	1cfffe04 	addi	r19,r3,-8
   209a0:	20c9c83a 	sub	r4,r4,r3
   209a4:	8cca983a 	sll	r5,r17,r19
   209a8:	9108d83a 	srl	r4,r18,r4
   209ac:	94e6983a 	sll	r19,r18,r19
   209b0:	2162b03a 	or	r17,r4,r5
   209b4:	053f0344 	movi	r20,-1011
   209b8:	a0e9c83a 	sub	r20,r20,r3
   209bc:	0025883a 	mov	r18,zero
   209c0:	0011883a 	mov	r8,zero
   209c4:	003f9606 	br	20820 <__alt_data_end+0xfffe1420>
   209c8:	8184b03a 	or	r2,r16,r6
   209cc:	10001f1e 	bne	r2,zero,20a4c <__divdf3+0x2a8>
   209d0:	0021883a 	mov	r16,zero
   209d4:	002b883a 	mov	r21,zero
   209d8:	01c00084 	movi	r7,2
   209dc:	003fa206 	br	20868 <__alt_data_end+0xfffe1468>
   209e0:	8184b03a 	or	r2,r16,r6
   209e4:	10001526 	beq	r2,zero,20a3c <__divdf3+0x298>
   209e8:	80010c26 	beq	r16,zero,20e1c <__divdf3+0x678>
   209ec:	8009883a 	mov	r4,r16
   209f0:	d9800315 	stw	r6,12(sp)
   209f4:	da000215 	stw	r8,8(sp)
   209f8:	da400015 	stw	r9,0(sp)
   209fc:	00223940 	call	22394 <__clzsi2>
   20a00:	d9800317 	ldw	r6,12(sp)
   20a04:	da000217 	ldw	r8,8(sp)
   20a08:	da400017 	ldw	r9,0(sp)
   20a0c:	1007883a 	mov	r3,r2
   20a10:	01000a04 	movi	r4,40
   20a14:	1d7ffe04 	addi	r21,r3,-8
   20a18:	20c9c83a 	sub	r4,r4,r3
   20a1c:	8560983a 	sll	r16,r16,r21
   20a20:	3108d83a 	srl	r4,r6,r4
   20a24:	356a983a 	sll	r21,r6,r21
   20a28:	2420b03a 	or	r16,r4,r16
   20a2c:	017f0344 	movi	r5,-1011
   20a30:	28cbc83a 	sub	r5,r5,r3
   20a34:	000f883a 	mov	r7,zero
   20a38:	003f8b06 	br	20868 <__alt_data_end+0xfffe1468>
   20a3c:	0021883a 	mov	r16,zero
   20a40:	002b883a 	mov	r21,zero
   20a44:	01c00044 	movi	r7,1
   20a48:	003f8706 	br	20868 <__alt_data_end+0xfffe1468>
   20a4c:	01c000c4 	movi	r7,3
   20a50:	003f8506 	br	20868 <__alt_data_end+0xfffe1468>
   20a54:	04800104 	movi	r18,4
   20a58:	0023883a 	mov	r17,zero
   20a5c:	0027883a 	mov	r19,zero
   20a60:	02000044 	movi	r8,1
   20a64:	003f6e06 	br	20820 <__alt_data_end+0xfffe1420>
   20a68:	04800304 	movi	r18,12
   20a6c:	020000c4 	movi	r8,3
   20a70:	003f6b06 	br	20820 <__alt_data_end+0xfffe1420>
   20a74:	01400434 	movhi	r5,16
   20a78:	000d883a 	mov	r6,zero
   20a7c:	297fffc4 	addi	r5,r5,-1
   20a80:	04ffffc4 	movi	r19,-1
   20a84:	0101ffc4 	movi	r4,2047
   20a88:	003fa406 	br	2091c <__alt_data_end+0xfffe151c>
   20a8c:	043f0084 	movi	r16,-1022
   20a90:	8521c83a 	sub	r16,r16,r20
   20a94:	00800e04 	movi	r2,56
   20a98:	1401200e 	bge	r2,r16,20f1c <__divdf3+0x778>
   20a9c:	9180004c 	andi	r6,r18,1
   20aa0:	0009883a 	mov	r4,zero
   20aa4:	000b883a 	mov	r5,zero
   20aa8:	0027883a 	mov	r19,zero
   20aac:	003f9b06 	br	2091c <__alt_data_end+0xfffe151c>
   20ab0:	8880022c 	andhi	r2,r17,8
   20ab4:	1000c726 	beq	r2,zero,20dd4 <__divdf3+0x630>
   20ab8:	8080022c 	andhi	r2,r16,8
   20abc:	1000c51e 	bne	r2,zero,20dd4 <__divdf3+0x630>
   20ac0:	00800434 	movhi	r2,16
   20ac4:	81400234 	orhi	r5,r16,8
   20ac8:	10bfffc4 	addi	r2,r2,-1
   20acc:	b80d883a 	mov	r6,r23
   20ad0:	288a703a 	and	r5,r5,r2
   20ad4:	a827883a 	mov	r19,r21
   20ad8:	003fea06 	br	20a84 <__alt_data_end+0xfffe1684>
   20adc:	8440ea36 	bltu	r16,r17,20e88 <__divdf3+0x6e4>
   20ae0:	8c00e826 	beq	r17,r16,20e84 <__divdf3+0x6e0>
   20ae4:	a53fffc4 	addi	r20,r20,-1
   20ae8:	882d883a 	mov	r22,r17
   20aec:	000d883a 	mov	r6,zero
   20af0:	a804d63a 	srli	r2,r21,24
   20af4:	8020923a 	slli	r16,r16,8
   20af8:	b009883a 	mov	r4,r22
   20afc:	d9800315 	stw	r6,12(sp)
   20b00:	1420b03a 	or	r16,r2,r16
   20b04:	802ed43a 	srli	r23,r16,16
   20b08:	873fffcc 	andi	fp,r16,65535
   20b0c:	a82a923a 	slli	r21,r21,8
   20b10:	b80b883a 	mov	r5,r23
   20b14:	00225140 	call	22514 <__udivsi3>
   20b18:	b009883a 	mov	r4,r22
   20b1c:	b80b883a 	mov	r5,r23
   20b20:	1023883a 	mov	r17,r2
   20b24:	002251c0 	call	2251c <__umodsi3>
   20b28:	1004943a 	slli	r2,r2,16
   20b2c:	9808d43a 	srli	r4,r19,16
   20b30:	8f2d383a 	mul	r22,r17,fp
   20b34:	d9800317 	ldw	r6,12(sp)
   20b38:	1106b03a 	or	r3,r2,r4
   20b3c:	1d80062e 	bgeu	r3,r22,20b58 <__divdf3+0x3b4>
   20b40:	1c07883a 	add	r3,r3,r16
   20b44:	88bfffc4 	addi	r2,r17,-1
   20b48:	1c00dc36 	bltu	r3,r16,20ebc <__divdf3+0x718>
   20b4c:	1d80db2e 	bgeu	r3,r22,20ebc <__divdf3+0x718>
   20b50:	8c7fff84 	addi	r17,r17,-2
   20b54:	1c07883a 	add	r3,r3,r16
   20b58:	1dadc83a 	sub	r22,r3,r22
   20b5c:	b009883a 	mov	r4,r22
   20b60:	b80b883a 	mov	r5,r23
   20b64:	d9800315 	stw	r6,12(sp)
   20b68:	00225140 	call	22514 <__udivsi3>
   20b6c:	b009883a 	mov	r4,r22
   20b70:	b80b883a 	mov	r5,r23
   20b74:	d8800015 	stw	r2,0(sp)
   20b78:	002251c0 	call	2251c <__umodsi3>
   20b7c:	da400017 	ldw	r9,0(sp)
   20b80:	1004943a 	slli	r2,r2,16
   20b84:	9cffffcc 	andi	r19,r19,65535
   20b88:	4f07383a 	mul	r3,r9,fp
   20b8c:	14c8b03a 	or	r4,r2,r19
   20b90:	d9800317 	ldw	r6,12(sp)
   20b94:	20c0062e 	bgeu	r4,r3,20bb0 <__divdf3+0x40c>
   20b98:	2409883a 	add	r4,r4,r16
   20b9c:	48bfffc4 	addi	r2,r9,-1
   20ba0:	2400c436 	bltu	r4,r16,20eb4 <__divdf3+0x710>
   20ba4:	20c0c32e 	bgeu	r4,r3,20eb4 <__divdf3+0x710>
   20ba8:	4a7fff84 	addi	r9,r9,-2
   20bac:	2409883a 	add	r4,r4,r16
   20bb0:	8822943a 	slli	r17,r17,16
   20bb4:	a80ed43a 	srli	r7,r21,16
   20bb8:	aa3fffcc 	andi	r8,r21,65535
   20bbc:	4c62b03a 	or	r17,r9,r17
   20bc0:	8816d43a 	srli	r11,r17,16
   20bc4:	897fffcc 	andi	r5,r17,65535
   20bc8:	2a15383a 	mul	r10,r5,r8
   20bcc:	5a19383a 	mul	r12,r11,r8
   20bd0:	29cb383a 	mul	r5,r5,r7
   20bd4:	5012d43a 	srli	r9,r10,16
   20bd8:	20c5c83a 	sub	r2,r4,r3
   20bdc:	614b883a 	add	r5,r12,r5
   20be0:	2a4b883a 	add	r5,r5,r9
   20be4:	59c7383a 	mul	r3,r11,r7
   20be8:	2b00022e 	bgeu	r5,r12,20bf4 <__divdf3+0x450>
   20bec:	01000074 	movhi	r4,1
   20bf0:	1907883a 	add	r3,r3,r4
   20bf4:	2808d43a 	srli	r4,r5,16
   20bf8:	280a943a 	slli	r5,r5,16
   20bfc:	54ffffcc 	andi	r19,r10,65535
   20c00:	1907883a 	add	r3,r3,r4
   20c04:	2ccb883a 	add	r5,r5,r19
   20c08:	10c09336 	bltu	r2,r3,20e58 <__divdf3+0x6b4>
   20c0c:	10c0ad26 	beq	r2,r3,20ec4 <__divdf3+0x720>
   20c10:	10c7c83a 	sub	r3,r2,r3
   20c14:	3167c83a 	sub	r19,r6,r5
   20c18:	34ed803a 	cmpltu	r22,r6,r19
   20c1c:	1dadc83a 	sub	r22,r3,r22
   20c20:	b400b226 	beq	r22,r16,20eec <__divdf3+0x748>
   20c24:	b009883a 	mov	r4,r22
   20c28:	b80b883a 	mov	r5,r23
   20c2c:	d9c00115 	stw	r7,4(sp)
   20c30:	da000215 	stw	r8,8(sp)
   20c34:	00225140 	call	22514 <__udivsi3>
   20c38:	b009883a 	mov	r4,r22
   20c3c:	b80b883a 	mov	r5,r23
   20c40:	d8800315 	stw	r2,12(sp)
   20c44:	002251c0 	call	2251c <__umodsi3>
   20c48:	d9800317 	ldw	r6,12(sp)
   20c4c:	1004943a 	slli	r2,r2,16
   20c50:	9808d43a 	srli	r4,r19,16
   20c54:	372d383a 	mul	r22,r6,fp
   20c58:	d9c00117 	ldw	r7,4(sp)
   20c5c:	1106b03a 	or	r3,r2,r4
   20c60:	da000217 	ldw	r8,8(sp)
   20c64:	1d80062e 	bgeu	r3,r22,20c80 <__divdf3+0x4dc>
   20c68:	1c07883a 	add	r3,r3,r16
   20c6c:	30bfffc4 	addi	r2,r6,-1
   20c70:	1c00a036 	bltu	r3,r16,20ef4 <__divdf3+0x750>
   20c74:	1d809f2e 	bgeu	r3,r22,20ef4 <__divdf3+0x750>
   20c78:	31bfff84 	addi	r6,r6,-2
   20c7c:	1c07883a 	add	r3,r3,r16
   20c80:	1dadc83a 	sub	r22,r3,r22
   20c84:	b009883a 	mov	r4,r22
   20c88:	b80b883a 	mov	r5,r23
   20c8c:	d9800315 	stw	r6,12(sp)
   20c90:	d9c00115 	stw	r7,4(sp)
   20c94:	da000215 	stw	r8,8(sp)
   20c98:	00225140 	call	22514 <__udivsi3>
   20c9c:	b009883a 	mov	r4,r22
   20ca0:	b80b883a 	mov	r5,r23
   20ca4:	d8800015 	stw	r2,0(sp)
   20ca8:	002251c0 	call	2251c <__umodsi3>
   20cac:	da400017 	ldw	r9,0(sp)
   20cb0:	1004943a 	slli	r2,r2,16
   20cb4:	993fffcc 	andi	r4,r19,65535
   20cb8:	4f39383a 	mul	fp,r9,fp
   20cbc:	1106b03a 	or	r3,r2,r4
   20cc0:	d9800317 	ldw	r6,12(sp)
   20cc4:	d9c00117 	ldw	r7,4(sp)
   20cc8:	da000217 	ldw	r8,8(sp)
   20ccc:	1f00062e 	bgeu	r3,fp,20ce8 <__divdf3+0x544>
   20cd0:	1c07883a 	add	r3,r3,r16
   20cd4:	48bfffc4 	addi	r2,r9,-1
   20cd8:	1c008836 	bltu	r3,r16,20efc <__divdf3+0x758>
   20cdc:	1f00872e 	bgeu	r3,fp,20efc <__divdf3+0x758>
   20ce0:	4a7fff84 	addi	r9,r9,-2
   20ce4:	1c07883a 	add	r3,r3,r16
   20ce8:	3008943a 	slli	r4,r6,16
   20cec:	1f07c83a 	sub	r3,r3,fp
   20cf0:	4926b03a 	or	r19,r9,r4
   20cf4:	993fffcc 	andi	r4,r19,65535
   20cf8:	980cd43a 	srli	r6,r19,16
   20cfc:	220b383a 	mul	r5,r4,r8
   20d00:	21c5383a 	mul	r2,r4,r7
   20d04:	3211383a 	mul	r8,r6,r8
   20d08:	2808d43a 	srli	r4,r5,16
   20d0c:	31cf383a 	mul	r7,r6,r7
   20d10:	4085883a 	add	r2,r8,r2
   20d14:	1105883a 	add	r2,r2,r4
   20d18:	1200022e 	bgeu	r2,r8,20d24 <__divdf3+0x580>
   20d1c:	01000074 	movhi	r4,1
   20d20:	390f883a 	add	r7,r7,r4
   20d24:	1008d43a 	srli	r4,r2,16
   20d28:	1004943a 	slli	r2,r2,16
   20d2c:	297fffcc 	andi	r5,r5,65535
   20d30:	390f883a 	add	r7,r7,r4
   20d34:	1145883a 	add	r2,r2,r5
   20d38:	19c06536 	bltu	r3,r7,20ed0 <__divdf3+0x72c>
   20d3c:	19c09f26 	beq	r3,r7,20fbc <__divdf3+0x818>
   20d40:	9cc00054 	ori	r19,r19,1
   20d44:	a100ffc4 	addi	r4,r20,1023
   20d48:	013f500e 	bge	zero,r4,20a8c <__alt_data_end+0xfffe168c>
   20d4c:	988001cc 	andi	r2,r19,7
   20d50:	10000726 	beq	r2,zero,20d70 <__divdf3+0x5cc>
   20d54:	98c003cc 	andi	r3,r19,15
   20d58:	00800104 	movi	r2,4
   20d5c:	18800426 	beq	r3,r2,20d70 <__divdf3+0x5cc>
   20d60:	9885883a 	add	r2,r19,r2
   20d64:	14e1803a 	cmpltu	r16,r2,r19
   20d68:	8c23883a 	add	r17,r17,r16
   20d6c:	1027883a 	mov	r19,r2
   20d70:	8880402c 	andhi	r2,r17,256
   20d74:	10000426 	beq	r2,zero,20d88 <__divdf3+0x5e4>
   20d78:	00bfc034 	movhi	r2,65280
   20d7c:	10bfffc4 	addi	r2,r2,-1
   20d80:	a1010004 	addi	r4,r20,1024
   20d84:	88a2703a 	and	r17,r17,r2
   20d88:	0081ff84 	movi	r2,2046
   20d8c:	113edf16 	blt	r2,r4,2090c <__alt_data_end+0xfffe150c>
   20d90:	9826d0fa 	srli	r19,r19,3
   20d94:	8804977a 	slli	r2,r17,29
   20d98:	8820927a 	slli	r16,r17,9
   20d9c:	2101ffcc 	andi	r4,r4,2047
   20da0:	14e6b03a 	or	r19,r2,r19
   20da4:	800ad33a 	srli	r5,r16,12
   20da8:	9180004c 	andi	r6,r18,1
   20dac:	003edb06 	br	2091c <__alt_data_end+0xfffe151c>
   20db0:	008000c4 	movi	r2,3
   20db4:	4080a826 	beq	r8,r2,21058 <__divdf3+0x8b4>
   20db8:	00800044 	movi	r2,1
   20dbc:	4080551e 	bne	r8,r2,20f14 <__divdf3+0x770>
   20dc0:	e00d883a 	mov	r6,fp
   20dc4:	0009883a 	mov	r4,zero
   20dc8:	000b883a 	mov	r5,zero
   20dcc:	0027883a 	mov	r19,zero
   20dd0:	003ed206 	br	2091c <__alt_data_end+0xfffe151c>
   20dd4:	00800434 	movhi	r2,16
   20dd8:	89400234 	orhi	r5,r17,8
   20ddc:	10bfffc4 	addi	r2,r2,-1
   20de0:	b00d883a 	mov	r6,r22
   20de4:	288a703a 	and	r5,r5,r2
   20de8:	003f2606 	br	20a84 <__alt_data_end+0xfffe1684>
   20dec:	d9800315 	stw	r6,12(sp)
   20df0:	d9c00115 	stw	r7,4(sp)
   20df4:	00223940 	call	22394 <__clzsi2>
   20df8:	10c00804 	addi	r3,r2,32
   20dfc:	010009c4 	movi	r4,39
   20e00:	d9800317 	ldw	r6,12(sp)
   20e04:	d9c00117 	ldw	r7,4(sp)
   20e08:	20fee30e 	bge	r4,r3,20998 <__alt_data_end+0xfffe1598>
   20e0c:	117ffe04 	addi	r5,r2,-8
   20e10:	9162983a 	sll	r17,r18,r5
   20e14:	0027883a 	mov	r19,zero
   20e18:	003ee606 	br	209b4 <__alt_data_end+0xfffe15b4>
   20e1c:	3009883a 	mov	r4,r6
   20e20:	d9800315 	stw	r6,12(sp)
   20e24:	da000215 	stw	r8,8(sp)
   20e28:	da400015 	stw	r9,0(sp)
   20e2c:	00223940 	call	22394 <__clzsi2>
   20e30:	10c00804 	addi	r3,r2,32
   20e34:	010009c4 	movi	r4,39
   20e38:	d9800317 	ldw	r6,12(sp)
   20e3c:	da000217 	ldw	r8,8(sp)
   20e40:	da400017 	ldw	r9,0(sp)
   20e44:	20fef20e 	bge	r4,r3,20a10 <__alt_data_end+0xfffe1610>
   20e48:	10bffe04 	addi	r2,r2,-8
   20e4c:	a8a0983a 	sll	r16,r21,r2
   20e50:	002b883a 	mov	r21,zero
   20e54:	003ef506 	br	20a2c <__alt_data_end+0xfffe162c>
   20e58:	354d883a 	add	r6,r6,r21
   20e5c:	3549803a 	cmpltu	r4,r6,r21
   20e60:	2409883a 	add	r4,r4,r16
   20e64:	2089883a 	add	r4,r4,r2
   20e68:	88bfffc4 	addi	r2,r17,-1
   20e6c:	81000c2e 	bgeu	r16,r4,20ea0 <__divdf3+0x6fc>
   20e70:	20c04436 	bltu	r4,r3,20f84 <__divdf3+0x7e0>
   20e74:	19006f26 	beq	r3,r4,21034 <__divdf3+0x890>
   20e78:	20c7c83a 	sub	r3,r4,r3
   20e7c:	1023883a 	mov	r17,r2
   20e80:	003f6406 	br	20c14 <__alt_data_end+0xfffe1814>
   20e84:	9d7f1736 	bltu	r19,r21,20ae4 <__alt_data_end+0xfffe16e4>
   20e88:	9806d07a 	srli	r3,r19,1
   20e8c:	880497fa 	slli	r2,r17,31
   20e90:	980c97fa 	slli	r6,r19,31
   20e94:	882cd07a 	srli	r22,r17,1
   20e98:	18a6b03a 	or	r19,r3,r2
   20e9c:	003f1406 	br	20af0 <__alt_data_end+0xfffe16f0>
   20ea0:	243ff51e 	bne	r4,r16,20e78 <__alt_data_end+0xfffe1a78>
   20ea4:	357ff22e 	bgeu	r6,r21,20e70 <__alt_data_end+0xfffe1a70>
   20ea8:	80c7c83a 	sub	r3,r16,r3
   20eac:	1023883a 	mov	r17,r2
   20eb0:	003f5806 	br	20c14 <__alt_data_end+0xfffe1814>
   20eb4:	1013883a 	mov	r9,r2
   20eb8:	003f3d06 	br	20bb0 <__alt_data_end+0xfffe17b0>
   20ebc:	1023883a 	mov	r17,r2
   20ec0:	003f2506 	br	20b58 <__alt_data_end+0xfffe1758>
   20ec4:	317fe436 	bltu	r6,r5,20e58 <__alt_data_end+0xfffe1a58>
   20ec8:	0007883a 	mov	r3,zero
   20ecc:	003f5106 	br	20c14 <__alt_data_end+0xfffe1814>
   20ed0:	1c07883a 	add	r3,r3,r16
   20ed4:	993fffc4 	addi	r4,r19,-1
   20ed8:	1c000a2e 	bgeu	r3,r16,20f04 <__divdf3+0x760>
   20edc:	2027883a 	mov	r19,r4
   20ee0:	19ff971e 	bne	r3,r7,20d40 <__alt_data_end+0xfffe1940>
   20ee4:	a8bf961e 	bne	r21,r2,20d40 <__alt_data_end+0xfffe1940>
   20ee8:	003f9606 	br	20d44 <__alt_data_end+0xfffe1944>
   20eec:	04ffffc4 	movi	r19,-1
   20ef0:	003f9406 	br	20d44 <__alt_data_end+0xfffe1944>
   20ef4:	100d883a 	mov	r6,r2
   20ef8:	003f6106 	br	20c80 <__alt_data_end+0xfffe1880>
   20efc:	1013883a 	mov	r9,r2
   20f00:	003f7906 	br	20ce8 <__alt_data_end+0xfffe18e8>
   20f04:	19c02636 	bltu	r3,r7,20fa0 <__divdf3+0x7fc>
   20f08:	38c04d26 	beq	r7,r3,21040 <__divdf3+0x89c>
   20f0c:	2027883a 	mov	r19,r4
   20f10:	003f8b06 	br	20d40 <__alt_data_end+0xfffe1940>
   20f14:	e025883a 	mov	r18,fp
   20f18:	003f8a06 	br	20d44 <__alt_data_end+0xfffe1944>
   20f1c:	008007c4 	movi	r2,31
   20f20:	14002a16 	blt	r2,r16,20fcc <__divdf3+0x828>
   20f24:	a5010784 	addi	r20,r20,1054
   20f28:	8d04983a 	sll	r2,r17,r20
   20f2c:	9c06d83a 	srl	r3,r19,r16
   20f30:	9d28983a 	sll	r20,r19,r20
   20f34:	8c20d83a 	srl	r16,r17,r16
   20f38:	1886b03a 	or	r3,r3,r2
   20f3c:	a004c03a 	cmpne	r2,r20,zero
   20f40:	1884b03a 	or	r2,r3,r2
   20f44:	10c001cc 	andi	r3,r2,7
   20f48:	18000726 	beq	r3,zero,20f68 <__divdf3+0x7c4>
   20f4c:	110003cc 	andi	r4,r2,15
   20f50:	00c00104 	movi	r3,4
   20f54:	20c00426 	beq	r4,r3,20f68 <__divdf3+0x7c4>
   20f58:	10c00104 	addi	r3,r2,4
   20f5c:	1885803a 	cmpltu	r2,r3,r2
   20f60:	80a1883a 	add	r16,r16,r2
   20f64:	1805883a 	mov	r2,r3
   20f68:	80c0202c 	andhi	r3,r16,128
   20f6c:	18002d26 	beq	r3,zero,21024 <__divdf3+0x880>
   20f70:	9180004c 	andi	r6,r18,1
   20f74:	01000044 	movi	r4,1
   20f78:	000b883a 	mov	r5,zero
   20f7c:	0027883a 	mov	r19,zero
   20f80:	003e6606 	br	2091c <__alt_data_end+0xfffe151c>
   20f84:	354d883a 	add	r6,r6,r21
   20f88:	356d803a 	cmpltu	r22,r6,r21
   20f8c:	b42d883a 	add	r22,r22,r16
   20f90:	b12d883a 	add	r22,r22,r4
   20f94:	8c7fff84 	addi	r17,r17,-2
   20f98:	b0c7c83a 	sub	r3,r22,r3
   20f9c:	003f1d06 	br	20c14 <__alt_data_end+0xfffe1814>
   20fa0:	ad4b883a 	add	r5,r21,r21
   20fa4:	2d6b803a 	cmpltu	r21,r5,r21
   20fa8:	ac2b883a 	add	r21,r21,r16
   20fac:	1d47883a 	add	r3,r3,r21
   20fb0:	993fff84 	addi	r4,r19,-2
   20fb4:	282b883a 	mov	r21,r5
   20fb8:	003fc806 	br	20edc <__alt_data_end+0xfffe1adc>
   20fbc:	103fc41e 	bne	r2,zero,20ed0 <__alt_data_end+0xfffe1ad0>
   20fc0:	002b883a 	mov	r21,zero
   20fc4:	a8bf5e1e 	bne	r21,r2,20d40 <__alt_data_end+0xfffe1940>
   20fc8:	003f5e06 	br	20d44 <__alt_data_end+0xfffe1944>
   20fcc:	00bef884 	movi	r2,-1054
   20fd0:	1505c83a 	sub	r2,r2,r20
   20fd4:	00c00804 	movi	r3,32
   20fd8:	8884d83a 	srl	r2,r17,r2
   20fdc:	80c01c26 	beq	r16,r3,21050 <__divdf3+0x8ac>
   20fe0:	a0c10f84 	addi	r3,r20,1086
   20fe4:	88c6983a 	sll	r3,r17,r3
   20fe8:	1cc6b03a 	or	r3,r3,r19
   20fec:	1806c03a 	cmpne	r3,r3,zero
   20ff0:	1884b03a 	or	r2,r3,r2
   20ff4:	140001cc 	andi	r16,r2,7
   20ff8:	8000061e 	bne	r16,zero,21014 <__divdf3+0x870>
   20ffc:	000b883a 	mov	r5,zero
   21000:	1004d0fa 	srli	r2,r2,3
   21004:	9180004c 	andi	r6,r18,1
   21008:	0009883a 	mov	r4,zero
   2100c:	1426b03a 	or	r19,r2,r16
   21010:	003e4206 	br	2091c <__alt_data_end+0xfffe151c>
   21014:	110003cc 	andi	r4,r2,15
   21018:	00c00104 	movi	r3,4
   2101c:	0021883a 	mov	r16,zero
   21020:	20ffcd1e 	bne	r4,r3,20f58 <__alt_data_end+0xfffe1b58>
   21024:	800a927a 	slli	r5,r16,9
   21028:	8020977a 	slli	r16,r16,29
   2102c:	280ad33a 	srli	r5,r5,12
   21030:	003ff306 	br	21000 <__alt_data_end+0xfffe1c00>
   21034:	317fd336 	bltu	r6,r5,20f84 <__alt_data_end+0xfffe1b84>
   21038:	1023883a 	mov	r17,r2
   2103c:	003fa206 	br	20ec8 <__alt_data_end+0xfffe1ac8>
   21040:	a8bfd736 	bltu	r21,r2,20fa0 <__alt_data_end+0xfffe1ba0>
   21044:	2027883a 	mov	r19,r4
   21048:	a8bf3d1e 	bne	r21,r2,20d40 <__alt_data_end+0xfffe1940>
   2104c:	003f3d06 	br	20d44 <__alt_data_end+0xfffe1944>
   21050:	0007883a 	mov	r3,zero
   21054:	003fe406 	br	20fe8 <__alt_data_end+0xfffe1be8>
   21058:	00800434 	movhi	r2,16
   2105c:	89400234 	orhi	r5,r17,8
   21060:	10bfffc4 	addi	r2,r2,-1
   21064:	e00d883a 	mov	r6,fp
   21068:	288a703a 	and	r5,r5,r2
   2106c:	003e8506 	br	20a84 <__alt_data_end+0xfffe1684>

00021070 <__muldf3>:
   21070:	defff204 	addi	sp,sp,-56
   21074:	2804d53a 	srli	r2,r5,20
   21078:	dd800a15 	stw	r22,40(sp)
   2107c:	282cd7fa 	srli	r22,r5,31
   21080:	dc000415 	stw	r16,16(sp)
   21084:	04000434 	movhi	r16,16
   21088:	df000c15 	stw	fp,48(sp)
   2108c:	dd000815 	stw	r20,32(sp)
   21090:	dcc00715 	stw	r19,28(sp)
   21094:	dc800615 	stw	r18,24(sp)
   21098:	dc400515 	stw	r17,20(sp)
   2109c:	843fffc4 	addi	r16,r16,-1
   210a0:	dfc00d15 	stw	ra,52(sp)
   210a4:	ddc00b15 	stw	r23,44(sp)
   210a8:	dd400915 	stw	r21,36(sp)
   210ac:	1501ffcc 	andi	r20,r2,2047
   210b0:	2023883a 	mov	r17,r4
   210b4:	2025883a 	mov	r18,r4
   210b8:	2c20703a 	and	r16,r5,r16
   210bc:	b027883a 	mov	r19,r22
   210c0:	b7003fcc 	andi	fp,r22,255
   210c4:	a0005926 	beq	r20,zero,2122c <__muldf3+0x1bc>
   210c8:	0081ffc4 	movi	r2,2047
   210cc:	a0803426 	beq	r20,r2,211a0 <__muldf3+0x130>
   210d0:	84000434 	orhi	r16,r16,16
   210d4:	2004d77a 	srli	r2,r4,29
   210d8:	802090fa 	slli	r16,r16,3
   210dc:	202490fa 	slli	r18,r4,3
   210e0:	a53f0044 	addi	r20,r20,-1023
   210e4:	80a0b03a 	or	r16,r16,r2
   210e8:	002b883a 	mov	r21,zero
   210ec:	0015883a 	mov	r10,zero
   210f0:	3812d53a 	srli	r9,r7,20
   210f4:	3806d7fa 	srli	r3,r7,31
   210f8:	02000434 	movhi	r8,16
   210fc:	423fffc4 	addi	r8,r8,-1
   21100:	4941ffcc 	andi	r5,r9,2047
   21104:	302f883a 	mov	r23,r6
   21108:	3a22703a 	and	r17,r7,r8
   2110c:	1ac03fcc 	andi	r11,r3,255
   21110:	28006226 	beq	r5,zero,2129c <__muldf3+0x22c>
   21114:	0081ffc4 	movi	r2,2047
   21118:	28805a26 	beq	r5,r2,21284 <__muldf3+0x214>
   2111c:	8a000434 	orhi	r8,r17,16
   21120:	3004d77a 	srli	r2,r6,29
   21124:	401090fa 	slli	r8,r8,3
   21128:	302e90fa 	slli	r23,r6,3
   2112c:	297f0044 	addi	r5,r5,-1023
   21130:	40a2b03a 	or	r17,r8,r2
   21134:	0013883a 	mov	r9,zero
   21138:	4d4cb03a 	or	r6,r9,r21
   2113c:	300c90ba 	slli	r6,r6,2
   21140:	020000b4 	movhi	r8,2
   21144:	42045804 	addi	r8,r8,4448
   21148:	320d883a 	add	r6,r6,r8
   2114c:	31800017 	ldw	r6,0(r6)
   21150:	a14b883a 	add	r5,r20,r5
   21154:	1dacf03a 	xor	r22,r3,r22
   21158:	2b000044 	addi	r12,r5,1
   2115c:	3000683a 	jmp	r6
   21160:	0002139c 	xori	zero,zero,2126
   21164:	00021388 	cmpgei	zero,zero,2126
   21168:	00021388 	cmpgei	zero,zero,2126
   2116c:	00021374 	movhi	zero,2125
   21170:	000211bc 	xorhi	zero,zero,2118
   21174:	000211bc 	xorhi	zero,zero,2118
   21178:	0002135c 	xori	zero,zero,2125
   2117c:	00021374 	movhi	zero,2125
   21180:	000211bc 	xorhi	zero,zero,2118
   21184:	0002135c 	xori	zero,zero,2125
   21188:	000211bc 	xorhi	zero,zero,2118
   2118c:	00021374 	movhi	zero,2125
   21190:	000211c0 	call	211c <__reset-0x1dee4>
   21194:	000211c0 	call	211c <__reset-0x1dee4>
   21198:	000211c0 	call	211c <__reset-0x1dee4>
   2119c:	00021598 	cmpnei	zero,zero,2134
   211a0:	8104b03a 	or	r2,r16,r4
   211a4:	10006a1e 	bne	r2,zero,21350 <__muldf3+0x2e0>
   211a8:	05400204 	movi	r21,8
   211ac:	0021883a 	mov	r16,zero
   211b0:	0025883a 	mov	r18,zero
   211b4:	02800084 	movi	r10,2
   211b8:	003fcd06 	br	210f0 <__alt_data_end+0xfffe1cf0>
   211bc:	b039883a 	mov	fp,r22
   211c0:	00800084 	movi	r2,2
   211c4:	50804e1e 	bne	r10,r2,21300 <__muldf3+0x290>
   211c8:	e4c0004c 	andi	r19,fp,1
   211cc:	0101ffc4 	movi	r4,2047
   211d0:	0021883a 	mov	r16,zero
   211d4:	0025883a 	mov	r18,zero
   211d8:	2008953a 	slli	r4,r4,20
   211dc:	98c03fcc 	andi	r3,r19,255
   211e0:	01400434 	movhi	r5,16
   211e4:	297fffc4 	addi	r5,r5,-1
   211e8:	180697fa 	slli	r3,r3,31
   211ec:	8160703a 	and	r16,r16,r5
   211f0:	8120b03a 	or	r16,r16,r4
   211f4:	80c6b03a 	or	r3,r16,r3
   211f8:	9005883a 	mov	r2,r18
   211fc:	dfc00d17 	ldw	ra,52(sp)
   21200:	df000c17 	ldw	fp,48(sp)
   21204:	ddc00b17 	ldw	r23,44(sp)
   21208:	dd800a17 	ldw	r22,40(sp)
   2120c:	dd400917 	ldw	r21,36(sp)
   21210:	dd000817 	ldw	r20,32(sp)
   21214:	dcc00717 	ldw	r19,28(sp)
   21218:	dc800617 	ldw	r18,24(sp)
   2121c:	dc400517 	ldw	r17,20(sp)
   21220:	dc000417 	ldw	r16,16(sp)
   21224:	dec00e04 	addi	sp,sp,56
   21228:	f800283a 	ret
   2122c:	8104b03a 	or	r2,r16,r4
   21230:	10004226 	beq	r2,zero,2133c <__muldf3+0x2cc>
   21234:	8000f926 	beq	r16,zero,2161c <__muldf3+0x5ac>
   21238:	8009883a 	mov	r4,r16
   2123c:	d9800315 	stw	r6,12(sp)
   21240:	d9c00015 	stw	r7,0(sp)
   21244:	00223940 	call	22394 <__clzsi2>
   21248:	d9800317 	ldw	r6,12(sp)
   2124c:	d9c00017 	ldw	r7,0(sp)
   21250:	1007883a 	mov	r3,r2
   21254:	01000a04 	movi	r4,40
   21258:	18bffe04 	addi	r2,r3,-8
   2125c:	20c9c83a 	sub	r4,r4,r3
   21260:	80a0983a 	sll	r16,r16,r2
   21264:	8908d83a 	srl	r4,r17,r4
   21268:	88a4983a 	sll	r18,r17,r2
   2126c:	2420b03a 	or	r16,r4,r16
   21270:	017f0344 	movi	r5,-1011
   21274:	28e9c83a 	sub	r20,r5,r3
   21278:	002b883a 	mov	r21,zero
   2127c:	0015883a 	mov	r10,zero
   21280:	003f9b06 	br	210f0 <__alt_data_end+0xfffe1cf0>
   21284:	8984b03a 	or	r2,r17,r6
   21288:	10002a1e 	bne	r2,zero,21334 <__muldf3+0x2c4>
   2128c:	0023883a 	mov	r17,zero
   21290:	002f883a 	mov	r23,zero
   21294:	02400084 	movi	r9,2
   21298:	003fa706 	br	21138 <__alt_data_end+0xfffe1d38>
   2129c:	8984b03a 	or	r2,r17,r6
   212a0:	10002026 	beq	r2,zero,21324 <__muldf3+0x2b4>
   212a4:	8800cc26 	beq	r17,zero,215d8 <__muldf3+0x568>
   212a8:	8809883a 	mov	r4,r17
   212ac:	d8c00215 	stw	r3,8(sp)
   212b0:	d9800315 	stw	r6,12(sp)
   212b4:	da800015 	stw	r10,0(sp)
   212b8:	dac00115 	stw	r11,4(sp)
   212bc:	00223940 	call	22394 <__clzsi2>
   212c0:	d8c00217 	ldw	r3,8(sp)
   212c4:	d9800317 	ldw	r6,12(sp)
   212c8:	da800017 	ldw	r10,0(sp)
   212cc:	dac00117 	ldw	r11,4(sp)
   212d0:	1009883a 	mov	r4,r2
   212d4:	01400a04 	movi	r5,40
   212d8:	25fffe04 	addi	r23,r4,-8
   212dc:	290bc83a 	sub	r5,r5,r4
   212e0:	8dd0983a 	sll	r8,r17,r23
   212e4:	314ad83a 	srl	r5,r6,r5
   212e8:	35ee983a 	sll	r23,r6,r23
   212ec:	2a22b03a 	or	r17,r5,r8
   212f0:	017f0344 	movi	r5,-1011
   212f4:	290bc83a 	sub	r5,r5,r4
   212f8:	0013883a 	mov	r9,zero
   212fc:	003f8e06 	br	21138 <__alt_data_end+0xfffe1d38>
   21300:	008000c4 	movi	r2,3
   21304:	50811d26 	beq	r10,r2,2177c <__muldf3+0x70c>
   21308:	00800044 	movi	r2,1
   2130c:	5080e01e 	bne	r10,r2,21690 <__muldf3+0x620>
   21310:	e0a6703a 	and	r19,fp,r2
   21314:	0009883a 	mov	r4,zero
   21318:	0021883a 	mov	r16,zero
   2131c:	0025883a 	mov	r18,zero
   21320:	003fad06 	br	211d8 <__alt_data_end+0xfffe1dd8>
   21324:	0023883a 	mov	r17,zero
   21328:	002f883a 	mov	r23,zero
   2132c:	02400044 	movi	r9,1
   21330:	003f8106 	br	21138 <__alt_data_end+0xfffe1d38>
   21334:	024000c4 	movi	r9,3
   21338:	003f7f06 	br	21138 <__alt_data_end+0xfffe1d38>
   2133c:	05400104 	movi	r21,4
   21340:	0021883a 	mov	r16,zero
   21344:	0025883a 	mov	r18,zero
   21348:	02800044 	movi	r10,1
   2134c:	003f6806 	br	210f0 <__alt_data_end+0xfffe1cf0>
   21350:	05400304 	movi	r21,12
   21354:	028000c4 	movi	r10,3
   21358:	003f6506 	br	210f0 <__alt_data_end+0xfffe1cf0>
   2135c:	04000434 	movhi	r16,16
   21360:	0027883a 	mov	r19,zero
   21364:	843fffc4 	addi	r16,r16,-1
   21368:	04bfffc4 	movi	r18,-1
   2136c:	0101ffc4 	movi	r4,2047
   21370:	003f9906 	br	211d8 <__alt_data_end+0xfffe1dd8>
   21374:	8821883a 	mov	r16,r17
   21378:	b825883a 	mov	r18,r23
   2137c:	5839883a 	mov	fp,r11
   21380:	4815883a 	mov	r10,r9
   21384:	003f8e06 	br	211c0 <__alt_data_end+0xfffe1dc0>
   21388:	8821883a 	mov	r16,r17
   2138c:	b825883a 	mov	r18,r23
   21390:	b039883a 	mov	fp,r22
   21394:	4815883a 	mov	r10,r9
   21398:	003f8906 	br	211c0 <__alt_data_end+0xfffe1dc0>
   2139c:	b80cd43a 	srli	r6,r23,16
   213a0:	9006d43a 	srli	r3,r18,16
   213a4:	90bfffcc 	andi	r2,r18,65535
   213a8:	bdffffcc 	andi	r23,r23,65535
   213ac:	b891383a 	mul	r8,r23,r2
   213b0:	b8c9383a 	mul	r4,r23,r3
   213b4:	309b383a 	mul	r13,r6,r2
   213b8:	400ed43a 	srli	r7,r8,16
   213bc:	30df383a 	mul	r15,r6,r3
   213c0:	235b883a 	add	r13,r4,r13
   213c4:	69db883a 	add	r13,r13,r7
   213c8:	6900022e 	bgeu	r13,r4,213d4 <__muldf3+0x364>
   213cc:	01000074 	movhi	r4,1
   213d0:	791f883a 	add	r15,r15,r4
   213d4:	8828d43a 	srli	r20,r17,16
   213d8:	8c7fffcc 	andi	r17,r17,65535
   213dc:	888f383a 	mul	r7,r17,r2
   213e0:	88d3383a 	mul	r9,r17,r3
   213e4:	a0a5383a 	mul	r18,r20,r2
   213e8:	3816d43a 	srli	r11,r7,16
   213ec:	6814943a 	slli	r10,r13,16
   213f0:	4ca5883a 	add	r18,r9,r18
   213f4:	423fffcc 	andi	r8,r8,65535
   213f8:	92e5883a 	add	r18,r18,r11
   213fc:	6808d43a 	srli	r4,r13,16
   21400:	5215883a 	add	r10,r10,r8
   21404:	a0c7383a 	mul	r3,r20,r3
   21408:	9240022e 	bgeu	r18,r9,21414 <__muldf3+0x3a4>
   2140c:	00800074 	movhi	r2,1
   21410:	1887883a 	add	r3,r3,r2
   21414:	802ad43a 	srli	r21,r16,16
   21418:	80bfffcc 	andi	r2,r16,65535
   2141c:	b893383a 	mul	r9,r23,r2
   21420:	3091383a 	mul	r8,r6,r2
   21424:	bd6f383a 	mul	r23,r23,r21
   21428:	9026943a 	slli	r19,r18,16
   2142c:	481ad43a 	srli	r13,r9,16
   21430:	9024d43a 	srli	r18,r18,16
   21434:	39ffffcc 	andi	r7,r7,65535
   21438:	ba11883a 	add	r8,r23,r8
   2143c:	99e7883a 	add	r19,r19,r7
   21440:	4351883a 	add	r8,r8,r13
   21444:	1c97883a 	add	r11,r3,r18
   21448:	354d383a 	mul	r6,r6,r21
   2144c:	9925883a 	add	r18,r19,r4
   21450:	45c0022e 	bgeu	r8,r23,2145c <__muldf3+0x3ec>
   21454:	00c00074 	movhi	r3,1
   21458:	30cd883a 	add	r6,r6,r3
   2145c:	8889383a 	mul	r4,r17,r2
   21460:	8d63383a 	mul	r17,r17,r21
   21464:	a085383a 	mul	r2,r20,r2
   21468:	200ed43a 	srli	r7,r4,16
   2146c:	401cd43a 	srli	r14,r8,16
   21470:	401a943a 	slli	r13,r8,16
   21474:	8885883a 	add	r2,r17,r2
   21478:	4a3fffcc 	andi	r8,r9,65535
   2147c:	11c5883a 	add	r2,r2,r7
   21480:	339d883a 	add	r14,r6,r14
   21484:	6a11883a 	add	r8,r13,r8
   21488:	a561383a 	mul	r16,r20,r21
   2148c:	1440022e 	bgeu	r2,r17,21498 <__muldf3+0x428>
   21490:	00c00074 	movhi	r3,1
   21494:	80e1883a 	add	r16,r16,r3
   21498:	1006943a 	slli	r3,r2,16
   2149c:	213fffcc 	andi	r4,r4,65535
   214a0:	93db883a 	add	r13,r18,r15
   214a4:	1909883a 	add	r4,r3,r4
   214a8:	22c7883a 	add	r3,r4,r11
   214ac:	6cd3803a 	cmpltu	r9,r13,r19
   214b0:	6a09883a 	add	r4,r13,r8
   214b4:	1a5b883a 	add	r13,r3,r9
   214b8:	2211803a 	cmpltu	r8,r4,r8
   214bc:	734d883a 	add	r6,r14,r13
   214c0:	100ed43a 	srli	r7,r2,16
   214c4:	6a53803a 	cmpltu	r9,r13,r9
   214c8:	3205883a 	add	r2,r6,r8
   214cc:	1ac7803a 	cmpltu	r3,r3,r11
   214d0:	1211803a 	cmpltu	r8,r2,r8
   214d4:	48c6b03a 	or	r3,r9,r3
   214d8:	338d803a 	cmpltu	r6,r6,r14
   214dc:	19c7883a 	add	r3,r3,r7
   214e0:	418cb03a 	or	r6,r8,r6
   214e4:	1987883a 	add	r3,r3,r6
   214e8:	2024927a 	slli	r18,r4,9
   214ec:	1c07883a 	add	r3,r3,r16
   214f0:	1806927a 	slli	r3,r3,9
   214f4:	1020d5fa 	srli	r16,r2,23
   214f8:	2008d5fa 	srli	r4,r4,23
   214fc:	9294b03a 	or	r10,r18,r10
   21500:	1004927a 	slli	r2,r2,9
   21504:	5024c03a 	cmpne	r18,r10,zero
   21508:	1c20b03a 	or	r16,r3,r16
   2150c:	9108b03a 	or	r4,r18,r4
   21510:	80c0402c 	andhi	r3,r16,256
   21514:	20a4b03a 	or	r18,r4,r2
   21518:	18000726 	beq	r3,zero,21538 <__muldf3+0x4c8>
   2151c:	9006d07a 	srli	r3,r18,1
   21520:	800897fa 	slli	r4,r16,31
   21524:	9080004c 	andi	r2,r18,1
   21528:	8020d07a 	srli	r16,r16,1
   2152c:	10c4b03a 	or	r2,r2,r3
   21530:	1124b03a 	or	r18,r2,r4
   21534:	600b883a 	mov	r5,r12
   21538:	2900ffc4 	addi	r4,r5,1023
   2153c:	01004b0e 	bge	zero,r4,2166c <__muldf3+0x5fc>
   21540:	908001cc 	andi	r2,r18,7
   21544:	10000726 	beq	r2,zero,21564 <__muldf3+0x4f4>
   21548:	90c003cc 	andi	r3,r18,15
   2154c:	00800104 	movi	r2,4
   21550:	18800426 	beq	r3,r2,21564 <__muldf3+0x4f4>
   21554:	9087883a 	add	r3,r18,r2
   21558:	1c85803a 	cmpltu	r2,r3,r18
   2155c:	80a1883a 	add	r16,r16,r2
   21560:	1825883a 	mov	r18,r3
   21564:	8080402c 	andhi	r2,r16,256
   21568:	10000426 	beq	r2,zero,2157c <__muldf3+0x50c>
   2156c:	00bfc034 	movhi	r2,65280
   21570:	10bfffc4 	addi	r2,r2,-1
   21574:	29010004 	addi	r4,r5,1024
   21578:	80a0703a 	and	r16,r16,r2
   2157c:	0081ff84 	movi	r2,2046
   21580:	1100320e 	bge	r2,r4,2164c <__muldf3+0x5dc>
   21584:	b4c0004c 	andi	r19,r22,1
   21588:	0101ffc4 	movi	r4,2047
   2158c:	0021883a 	mov	r16,zero
   21590:	0025883a 	mov	r18,zero
   21594:	003f1006 	br	211d8 <__alt_data_end+0xfffe1dd8>
   21598:	8080022c 	andhi	r2,r16,8
   2159c:	10000926 	beq	r2,zero,215c4 <__muldf3+0x554>
   215a0:	8880022c 	andhi	r2,r17,8
   215a4:	1000071e 	bne	r2,zero,215c4 <__muldf3+0x554>
   215a8:	00800434 	movhi	r2,16
   215ac:	8c000234 	orhi	r16,r17,8
   215b0:	10bfffc4 	addi	r2,r2,-1
   215b4:	1827883a 	mov	r19,r3
   215b8:	80a0703a 	and	r16,r16,r2
   215bc:	b825883a 	mov	r18,r23
   215c0:	003f6a06 	br	2136c <__alt_data_end+0xfffe1f6c>
   215c4:	00800434 	movhi	r2,16
   215c8:	84000234 	orhi	r16,r16,8
   215cc:	10bfffc4 	addi	r2,r2,-1
   215d0:	80a0703a 	and	r16,r16,r2
   215d4:	003f6506 	br	2136c <__alt_data_end+0xfffe1f6c>
   215d8:	3009883a 	mov	r4,r6
   215dc:	d8c00215 	stw	r3,8(sp)
   215e0:	d9800315 	stw	r6,12(sp)
   215e4:	da800015 	stw	r10,0(sp)
   215e8:	dac00115 	stw	r11,4(sp)
   215ec:	00223940 	call	22394 <__clzsi2>
   215f0:	11000804 	addi	r4,r2,32
   215f4:	014009c4 	movi	r5,39
   215f8:	d8c00217 	ldw	r3,8(sp)
   215fc:	d9800317 	ldw	r6,12(sp)
   21600:	da800017 	ldw	r10,0(sp)
   21604:	dac00117 	ldw	r11,4(sp)
   21608:	293f320e 	bge	r5,r4,212d4 <__alt_data_end+0xfffe1ed4>
   2160c:	10bffe04 	addi	r2,r2,-8
   21610:	b8a2983a 	sll	r17,r23,r2
   21614:	002f883a 	mov	r23,zero
   21618:	003f3506 	br	212f0 <__alt_data_end+0xfffe1ef0>
   2161c:	d9800315 	stw	r6,12(sp)
   21620:	d9c00015 	stw	r7,0(sp)
   21624:	00223940 	call	22394 <__clzsi2>
   21628:	10c00804 	addi	r3,r2,32
   2162c:	010009c4 	movi	r4,39
   21630:	d9800317 	ldw	r6,12(sp)
   21634:	d9c00017 	ldw	r7,0(sp)
   21638:	20ff060e 	bge	r4,r3,21254 <__alt_data_end+0xfffe1e54>
   2163c:	10bffe04 	addi	r2,r2,-8
   21640:	88a0983a 	sll	r16,r17,r2
   21644:	0025883a 	mov	r18,zero
   21648:	003f0906 	br	21270 <__alt_data_end+0xfffe1e70>
   2164c:	9004d0fa 	srli	r2,r18,3
   21650:	8024977a 	slli	r18,r16,29
   21654:	8020927a 	slli	r16,r16,9
   21658:	2101ffcc 	andi	r4,r4,2047
   2165c:	90a4b03a 	or	r18,r18,r2
   21660:	8020d33a 	srli	r16,r16,12
   21664:	b4c0004c 	andi	r19,r22,1
   21668:	003edb06 	br	211d8 <__alt_data_end+0xfffe1dd8>
   2166c:	00ff0084 	movi	r3,-1022
   21670:	1947c83a 	sub	r3,r3,r5
   21674:	00800e04 	movi	r2,56
   21678:	10c0080e 	bge	r2,r3,2169c <__muldf3+0x62c>
   2167c:	b4c0004c 	andi	r19,r22,1
   21680:	0009883a 	mov	r4,zero
   21684:	0021883a 	mov	r16,zero
   21688:	0025883a 	mov	r18,zero
   2168c:	003ed206 	br	211d8 <__alt_data_end+0xfffe1dd8>
   21690:	600b883a 	mov	r5,r12
   21694:	e02d883a 	mov	r22,fp
   21698:	003fa706 	br	21538 <__alt_data_end+0xfffe2138>
   2169c:	008007c4 	movi	r2,31
   216a0:	10c01816 	blt	r2,r3,21704 <__muldf3+0x694>
   216a4:	29410784 	addi	r5,r5,1054
   216a8:	8144983a 	sll	r2,r16,r5
   216ac:	90c8d83a 	srl	r4,r18,r3
   216b0:	914a983a 	sll	r5,r18,r5
   216b4:	80c6d83a 	srl	r3,r16,r3
   216b8:	2088b03a 	or	r4,r4,r2
   216bc:	2804c03a 	cmpne	r2,r5,zero
   216c0:	2084b03a 	or	r2,r4,r2
   216c4:	110001cc 	andi	r4,r2,7
   216c8:	20000726 	beq	r4,zero,216e8 <__muldf3+0x678>
   216cc:	114003cc 	andi	r5,r2,15
   216d0:	01000104 	movi	r4,4
   216d4:	29000426 	beq	r5,r4,216e8 <__muldf3+0x678>
   216d8:	11000104 	addi	r4,r2,4
   216dc:	2085803a 	cmpltu	r2,r4,r2
   216e0:	1887883a 	add	r3,r3,r2
   216e4:	2005883a 	mov	r2,r4
   216e8:	1900202c 	andhi	r4,r3,128
   216ec:	20001826 	beq	r4,zero,21750 <__muldf3+0x6e0>
   216f0:	b4c0004c 	andi	r19,r22,1
   216f4:	01000044 	movi	r4,1
   216f8:	0021883a 	mov	r16,zero
   216fc:	0025883a 	mov	r18,zero
   21700:	003eb506 	br	211d8 <__alt_data_end+0xfffe1dd8>
   21704:	00bef884 	movi	r2,-1054
   21708:	1145c83a 	sub	r2,r2,r5
   2170c:	8088d83a 	srl	r4,r16,r2
   21710:	00800804 	movi	r2,32
   21714:	18801726 	beq	r3,r2,21774 <__muldf3+0x704>
   21718:	28810f84 	addi	r2,r5,1086
   2171c:	8084983a 	sll	r2,r16,r2
   21720:	1484b03a 	or	r2,r2,r18
   21724:	1004c03a 	cmpne	r2,r2,zero
   21728:	1104b03a 	or	r2,r2,r4
   2172c:	10c001cc 	andi	r3,r2,7
   21730:	18000b1e 	bne	r3,zero,21760 <__muldf3+0x6f0>
   21734:	0021883a 	mov	r16,zero
   21738:	1004d0fa 	srli	r2,r2,3
   2173c:	b4c0004c 	andi	r19,r22,1
   21740:	0009883a 	mov	r4,zero
   21744:	10e4b03a 	or	r18,r2,r3
   21748:	003ea306 	br	211d8 <__alt_data_end+0xfffe1dd8>
   2174c:	0007883a 	mov	r3,zero
   21750:	1820927a 	slli	r16,r3,9
   21754:	1806977a 	slli	r3,r3,29
   21758:	8020d33a 	srli	r16,r16,12
   2175c:	003ff606 	br	21738 <__alt_data_end+0xfffe2338>
   21760:	110003cc 	andi	r4,r2,15
   21764:	00c00104 	movi	r3,4
   21768:	20fff826 	beq	r4,r3,2174c <__alt_data_end+0xfffe234c>
   2176c:	0007883a 	mov	r3,zero
   21770:	003fd906 	br	216d8 <__alt_data_end+0xfffe22d8>
   21774:	0005883a 	mov	r2,zero
   21778:	003fe906 	br	21720 <__alt_data_end+0xfffe2320>
   2177c:	00800434 	movhi	r2,16
   21780:	84000234 	orhi	r16,r16,8
   21784:	10bfffc4 	addi	r2,r2,-1
   21788:	e4c0004c 	andi	r19,fp,1
   2178c:	80a0703a 	and	r16,r16,r2
   21790:	003ef606 	br	2136c <__alt_data_end+0xfffe1f6c>

00021794 <__subdf3>:
   21794:	00c00434 	movhi	r3,16
   21798:	18ffffc4 	addi	r3,r3,-1
   2179c:	defffb04 	addi	sp,sp,-20
   217a0:	28d2703a 	and	r9,r5,r3
   217a4:	3814d53a 	srli	r10,r7,20
   217a8:	38c6703a 	and	r3,r7,r3
   217ac:	3004d77a 	srli	r2,r6,29
   217b0:	dc800215 	stw	r18,8(sp)
   217b4:	dc000015 	stw	r16,0(sp)
   217b8:	2824d7fa 	srli	r18,r5,31
   217bc:	2820d53a 	srli	r16,r5,20
   217c0:	481290fa 	slli	r9,r9,3
   217c4:	200ad77a 	srli	r5,r4,29
   217c8:	180690fa 	slli	r3,r3,3
   217cc:	dc400115 	stw	r17,4(sp)
   217d0:	dfc00415 	stw	ra,16(sp)
   217d4:	202290fa 	slli	r17,r4,3
   217d8:	dcc00315 	stw	r19,12(sp)
   217dc:	5281ffcc 	andi	r10,r10,2047
   217e0:	0101ffc4 	movi	r4,2047
   217e4:	9011883a 	mov	r8,r18
   217e8:	8401ffcc 	andi	r16,r16,2047
   217ec:	94803fcc 	andi	r18,r18,255
   217f0:	494ab03a 	or	r5,r9,r5
   217f4:	380ed7fa 	srli	r7,r7,31
   217f8:	1886b03a 	or	r3,r3,r2
   217fc:	300c90fa 	slli	r6,r6,3
   21800:	51009026 	beq	r10,r4,21a44 <__subdf3+0x2b0>
   21804:	39c0005c 	xori	r7,r7,1
   21808:	8285c83a 	sub	r2,r16,r10
   2180c:	91c06f26 	beq	r18,r7,219cc <__subdf3+0x238>
   21810:	0080b10e 	bge	zero,r2,21ad8 <__subdf3+0x344>
   21814:	50002a1e 	bne	r10,zero,218c0 <__subdf3+0x12c>
   21818:	1988b03a 	or	r4,r3,r6
   2181c:	2000941e 	bne	r4,zero,21a70 <__subdf3+0x2dc>
   21820:	888001cc 	andi	r2,r17,7
   21824:	10005b26 	beq	r2,zero,21994 <__subdf3+0x200>
   21828:	88c003cc 	andi	r3,r17,15
   2182c:	00800104 	movi	r2,4
   21830:	18805826 	beq	r3,r2,21994 <__subdf3+0x200>
   21834:	88c00104 	addi	r3,r17,4
   21838:	1c63803a 	cmpltu	r17,r3,r17
   2183c:	2c4b883a 	add	r5,r5,r17
   21840:	2880202c 	andhi	r2,r5,128
   21844:	9200004c 	andi	r8,r18,1
   21848:	1823883a 	mov	r17,r3
   2184c:	10005426 	beq	r2,zero,219a0 <__subdf3+0x20c>
   21850:	84000044 	addi	r16,r16,1
   21854:	0081ffc4 	movi	r2,2047
   21858:	8080bf26 	beq	r16,r2,21b58 <__subdf3+0x3c4>
   2185c:	013fe034 	movhi	r4,65408
   21860:	213fffc4 	addi	r4,r4,-1
   21864:	290a703a 	and	r5,r5,r4
   21868:	2804977a 	slli	r2,r5,29
   2186c:	280a927a 	slli	r5,r5,9
   21870:	8822d0fa 	srli	r17,r17,3
   21874:	8401ffcc 	andi	r16,r16,2047
   21878:	2808d33a 	srli	r4,r5,12
   2187c:	1444b03a 	or	r2,r2,r17
   21880:	8401ffcc 	andi	r16,r16,2047
   21884:	800a953a 	slli	r5,r16,20
   21888:	40c03fcc 	andi	r3,r8,255
   2188c:	04000434 	movhi	r16,16
   21890:	180697fa 	slli	r3,r3,31
   21894:	843fffc4 	addi	r16,r16,-1
   21898:	2420703a 	and	r16,r4,r16
   2189c:	8160b03a 	or	r16,r16,r5
   218a0:	80c6b03a 	or	r3,r16,r3
   218a4:	dfc00417 	ldw	ra,16(sp)
   218a8:	dcc00317 	ldw	r19,12(sp)
   218ac:	dc800217 	ldw	r18,8(sp)
   218b0:	dc400117 	ldw	r17,4(sp)
   218b4:	dc000017 	ldw	r16,0(sp)
   218b8:	dec00504 	addi	sp,sp,20
   218bc:	f800283a 	ret
   218c0:	0101ffc4 	movi	r4,2047
   218c4:	813fd626 	beq	r16,r4,21820 <__alt_data_end+0xfffe2420>
   218c8:	18c02034 	orhi	r3,r3,128
   218cc:	01000e04 	movi	r4,56
   218d0:	2080a416 	blt	r4,r2,21b64 <__subdf3+0x3d0>
   218d4:	010007c4 	movi	r4,31
   218d8:	2080c716 	blt	r4,r2,21bf8 <__subdf3+0x464>
   218dc:	01000804 	movi	r4,32
   218e0:	2089c83a 	sub	r4,r4,r2
   218e4:	1910983a 	sll	r8,r3,r4
   218e8:	308ed83a 	srl	r7,r6,r2
   218ec:	3108983a 	sll	r4,r6,r4
   218f0:	1884d83a 	srl	r2,r3,r2
   218f4:	41ccb03a 	or	r6,r8,r7
   218f8:	2008c03a 	cmpne	r4,r4,zero
   218fc:	310cb03a 	or	r6,r6,r4
   21900:	898dc83a 	sub	r6,r17,r6
   21904:	89a3803a 	cmpltu	r17,r17,r6
   21908:	288bc83a 	sub	r5,r5,r2
   2190c:	2c4bc83a 	sub	r5,r5,r17
   21910:	3023883a 	mov	r17,r6
   21914:	2880202c 	andhi	r2,r5,128
   21918:	10006b26 	beq	r2,zero,21ac8 <__subdf3+0x334>
   2191c:	04c02034 	movhi	r19,128
   21920:	9cffffc4 	addi	r19,r19,-1
   21924:	2ce6703a 	and	r19,r5,r19
   21928:	98007c26 	beq	r19,zero,21b1c <__subdf3+0x388>
   2192c:	9809883a 	mov	r4,r19
   21930:	00223940 	call	22394 <__clzsi2>
   21934:	10fffe04 	addi	r3,r2,-8
   21938:	010007c4 	movi	r4,31
   2193c:	20c07d16 	blt	r4,r3,21b34 <__subdf3+0x3a0>
   21940:	01400a04 	movi	r5,40
   21944:	2885c83a 	sub	r2,r5,r2
   21948:	888ad83a 	srl	r5,r17,r2
   2194c:	98e6983a 	sll	r19,r19,r3
   21950:	88e2983a 	sll	r17,r17,r3
   21954:	2ce6b03a 	or	r19,r5,r19
   21958:	1c007a16 	blt	r3,r16,21b44 <__subdf3+0x3b0>
   2195c:	1c21c83a 	sub	r16,r3,r16
   21960:	81400044 	addi	r5,r16,1
   21964:	00c007c4 	movi	r3,31
   21968:	19409616 	blt	r3,r5,21bc4 <__subdf3+0x430>
   2196c:	1c21c83a 	sub	r16,r3,r16
   21970:	8c08983a 	sll	r4,r17,r16
   21974:	8946d83a 	srl	r3,r17,r5
   21978:	9c20983a 	sll	r16,r19,r16
   2197c:	2008c03a 	cmpne	r4,r4,zero
   21980:	994ad83a 	srl	r5,r19,r5
   21984:	1c06b03a 	or	r3,r3,r16
   21988:	1922b03a 	or	r17,r3,r4
   2198c:	0021883a 	mov	r16,zero
   21990:	003fa306 	br	21820 <__alt_data_end+0xfffe2420>
   21994:	2880202c 	andhi	r2,r5,128
   21998:	9200004c 	andi	r8,r18,1
   2199c:	103fac1e 	bne	r2,zero,21850 <__alt_data_end+0xfffe2450>
   219a0:	2804977a 	slli	r2,r5,29
   219a4:	8822d0fa 	srli	r17,r17,3
   219a8:	00c1ffc4 	movi	r3,2047
   219ac:	280ad0fa 	srli	r5,r5,3
   219b0:	1444b03a 	or	r2,r2,r17
   219b4:	80c02726 	beq	r16,r3,21a54 <__subdf3+0x2c0>
   219b8:	01000434 	movhi	r4,16
   219bc:	213fffc4 	addi	r4,r4,-1
   219c0:	80e0703a 	and	r16,r16,r3
   219c4:	2908703a 	and	r4,r5,r4
   219c8:	003fad06 	br	21880 <__alt_data_end+0xfffe2480>
   219cc:	0080690e 	bge	zero,r2,21b74 <__subdf3+0x3e0>
   219d0:	50002f26 	beq	r10,zero,21a90 <__subdf3+0x2fc>
   219d4:	0101ffc4 	movi	r4,2047
   219d8:	813f9126 	beq	r16,r4,21820 <__alt_data_end+0xfffe2420>
   219dc:	18c02034 	orhi	r3,r3,128
   219e0:	01000e04 	movi	r4,56
   219e4:	2080b00e 	bge	r4,r2,21ca8 <__subdf3+0x514>
   219e8:	198cb03a 	or	r6,r3,r6
   219ec:	300ec03a 	cmpne	r7,r6,zero
   219f0:	0005883a 	mov	r2,zero
   219f4:	3c4f883a 	add	r7,r7,r17
   219f8:	3c63803a 	cmpltu	r17,r7,r17
   219fc:	114b883a 	add	r5,r2,r5
   21a00:	2c4b883a 	add	r5,r5,r17
   21a04:	3823883a 	mov	r17,r7
   21a08:	2880202c 	andhi	r2,r5,128
   21a0c:	10002e26 	beq	r2,zero,21ac8 <__subdf3+0x334>
   21a10:	84000044 	addi	r16,r16,1
   21a14:	0081ffc4 	movi	r2,2047
   21a18:	8080de26 	beq	r16,r2,21d94 <__subdf3+0x600>
   21a1c:	00bfe034 	movhi	r2,65408
   21a20:	10bfffc4 	addi	r2,r2,-1
   21a24:	288a703a 	and	r5,r5,r2
   21a28:	880cd07a 	srli	r6,r17,1
   21a2c:	280897fa 	slli	r4,r5,31
   21a30:	88c0004c 	andi	r3,r17,1
   21a34:	30e2b03a 	or	r17,r6,r3
   21a38:	280ad07a 	srli	r5,r5,1
   21a3c:	8922b03a 	or	r17,r17,r4
   21a40:	003f7706 	br	21820 <__alt_data_end+0xfffe2420>
   21a44:	1984b03a 	or	r2,r3,r6
   21a48:	103f6e26 	beq	r2,zero,21804 <__alt_data_end+0xfffe2404>
   21a4c:	39c03fcc 	andi	r7,r7,255
   21a50:	003f6d06 	br	21808 <__alt_data_end+0xfffe2408>
   21a54:	1146b03a 	or	r3,r2,r5
   21a58:	18003f26 	beq	r3,zero,21b58 <__subdf3+0x3c4>
   21a5c:	00c00434 	movhi	r3,16
   21a60:	29000234 	orhi	r4,r5,8
   21a64:	18ffffc4 	addi	r3,r3,-1
   21a68:	20c8703a 	and	r4,r4,r3
   21a6c:	003f8406 	br	21880 <__alt_data_end+0xfffe2480>
   21a70:	10bfffc4 	addi	r2,r2,-1
   21a74:	1000501e 	bne	r2,zero,21bb8 <__subdf3+0x424>
   21a78:	898fc83a 	sub	r7,r17,r6
   21a7c:	89e3803a 	cmpltu	r17,r17,r7
   21a80:	28cbc83a 	sub	r5,r5,r3
   21a84:	2c4bc83a 	sub	r5,r5,r17
   21a88:	3823883a 	mov	r17,r7
   21a8c:	003fa106 	br	21914 <__alt_data_end+0xfffe2514>
   21a90:	1988b03a 	or	r4,r3,r6
   21a94:	203f6226 	beq	r4,zero,21820 <__alt_data_end+0xfffe2420>
   21a98:	10bfffc4 	addi	r2,r2,-1
   21a9c:	10009b1e 	bne	r2,zero,21d0c <__subdf3+0x578>
   21aa0:	344d883a 	add	r6,r6,r17
   21aa4:	3463803a 	cmpltu	r17,r6,r17
   21aa8:	194b883a 	add	r5,r3,r5
   21aac:	2c4b883a 	add	r5,r5,r17
   21ab0:	3023883a 	mov	r17,r6
   21ab4:	003fd406 	br	21a08 <__alt_data_end+0xfffe2608>
   21ab8:	1106b03a 	or	r3,r2,r4
   21abc:	1800b426 	beq	r3,zero,21d90 <__subdf3+0x5fc>
   21ac0:	100b883a 	mov	r5,r2
   21ac4:	2023883a 	mov	r17,r4
   21ac8:	888001cc 	andi	r2,r17,7
   21acc:	103f561e 	bne	r2,zero,21828 <__alt_data_end+0xfffe2428>
   21ad0:	9200004c 	andi	r8,r18,1
   21ad4:	003fb206 	br	219a0 <__alt_data_end+0xfffe25a0>
   21ad8:	1000531e 	bne	r2,zero,21c28 <__subdf3+0x494>
   21adc:	80800044 	addi	r2,r16,1
   21ae0:	1081ffcc 	andi	r2,r2,2047
   21ae4:	01000044 	movi	r4,1
   21ae8:	2080a00e 	bge	r4,r2,21d6c <__subdf3+0x5d8>
   21aec:	8985c83a 	sub	r2,r17,r6
   21af0:	8889803a 	cmpltu	r4,r17,r2
   21af4:	28e7c83a 	sub	r19,r5,r3
   21af8:	9927c83a 	sub	r19,r19,r4
   21afc:	9900202c 	andhi	r4,r19,128
   21b00:	20006226 	beq	r4,zero,21c8c <__subdf3+0x4f8>
   21b04:	3463c83a 	sub	r17,r6,r17
   21b08:	194bc83a 	sub	r5,r3,r5
   21b0c:	344d803a 	cmpltu	r6,r6,r17
   21b10:	29a7c83a 	sub	r19,r5,r6
   21b14:	3825883a 	mov	r18,r7
   21b18:	983f841e 	bne	r19,zero,2192c <__alt_data_end+0xfffe252c>
   21b1c:	8809883a 	mov	r4,r17
   21b20:	00223940 	call	22394 <__clzsi2>
   21b24:	10800804 	addi	r2,r2,32
   21b28:	10fffe04 	addi	r3,r2,-8
   21b2c:	010007c4 	movi	r4,31
   21b30:	20ff830e 	bge	r4,r3,21940 <__alt_data_end+0xfffe2540>
   21b34:	14fff604 	addi	r19,r2,-40
   21b38:	8ce6983a 	sll	r19,r17,r19
   21b3c:	0023883a 	mov	r17,zero
   21b40:	1c3f860e 	bge	r3,r16,2195c <__alt_data_end+0xfffe255c>
   21b44:	017fe034 	movhi	r5,65408
   21b48:	297fffc4 	addi	r5,r5,-1
   21b4c:	80e1c83a 	sub	r16,r16,r3
   21b50:	994a703a 	and	r5,r19,r5
   21b54:	003f3206 	br	21820 <__alt_data_end+0xfffe2420>
   21b58:	0009883a 	mov	r4,zero
   21b5c:	0005883a 	mov	r2,zero
   21b60:	003f4706 	br	21880 <__alt_data_end+0xfffe2480>
   21b64:	198cb03a 	or	r6,r3,r6
   21b68:	300cc03a 	cmpne	r6,r6,zero
   21b6c:	0005883a 	mov	r2,zero
   21b70:	003f6306 	br	21900 <__alt_data_end+0xfffe2500>
   21b74:	10009d1e 	bne	r2,zero,21dec <__subdf3+0x658>
   21b78:	81c00044 	addi	r7,r16,1
   21b7c:	3881ffcc 	andi	r2,r7,2047
   21b80:	02400044 	movi	r9,1
   21b84:	4880680e 	bge	r9,r2,21d28 <__subdf3+0x594>
   21b88:	0081ffc4 	movi	r2,2047
   21b8c:	3880ae26 	beq	r7,r2,21e48 <__subdf3+0x6b4>
   21b90:	344d883a 	add	r6,r6,r17
   21b94:	3463803a 	cmpltu	r17,r6,r17
   21b98:	194b883a 	add	r5,r3,r5
   21b9c:	2c4b883a 	add	r5,r5,r17
   21ba0:	282297fa 	slli	r17,r5,31
   21ba4:	300cd07a 	srli	r6,r6,1
   21ba8:	280ad07a 	srli	r5,r5,1
   21bac:	3821883a 	mov	r16,r7
   21bb0:	89a2b03a 	or	r17,r17,r6
   21bb4:	003f1a06 	br	21820 <__alt_data_end+0xfffe2420>
   21bb8:	0101ffc4 	movi	r4,2047
   21bbc:	813f431e 	bne	r16,r4,218cc <__alt_data_end+0xfffe24cc>
   21bc0:	003f1706 	br	21820 <__alt_data_end+0xfffe2420>
   21bc4:	80bff844 	addi	r2,r16,-31
   21bc8:	00c00804 	movi	r3,32
   21bcc:	9884d83a 	srl	r2,r19,r2
   21bd0:	28c05126 	beq	r5,r3,21d18 <__subdf3+0x584>
   21bd4:	00c00fc4 	movi	r3,63
   21bd8:	1c21c83a 	sub	r16,r3,r16
   21bdc:	9c26983a 	sll	r19,r19,r16
   21be0:	9c62b03a 	or	r17,r19,r17
   21be4:	8822c03a 	cmpne	r17,r17,zero
   21be8:	88a2b03a 	or	r17,r17,r2
   21bec:	000b883a 	mov	r5,zero
   21bf0:	0021883a 	mov	r16,zero
   21bf4:	003fb406 	br	21ac8 <__alt_data_end+0xfffe26c8>
   21bf8:	113ff804 	addi	r4,r2,-32
   21bfc:	01c00804 	movi	r7,32
   21c00:	1908d83a 	srl	r4,r3,r4
   21c04:	11c04626 	beq	r2,r7,21d20 <__subdf3+0x58c>
   21c08:	01c01004 	movi	r7,64
   21c0c:	3885c83a 	sub	r2,r7,r2
   21c10:	1884983a 	sll	r2,r3,r2
   21c14:	118cb03a 	or	r6,r2,r6
   21c18:	300cc03a 	cmpne	r6,r6,zero
   21c1c:	310cb03a 	or	r6,r6,r4
   21c20:	0005883a 	mov	r2,zero
   21c24:	003f3606 	br	21900 <__alt_data_end+0xfffe2500>
   21c28:	80002b26 	beq	r16,zero,21cd8 <__subdf3+0x544>
   21c2c:	0101ffc4 	movi	r4,2047
   21c30:	51006926 	beq	r10,r4,21dd8 <__subdf3+0x644>
   21c34:	0085c83a 	sub	r2,zero,r2
   21c38:	29402034 	orhi	r5,r5,128
   21c3c:	01000e04 	movi	r4,56
   21c40:	20807d16 	blt	r4,r2,21e38 <__subdf3+0x6a4>
   21c44:	010007c4 	movi	r4,31
   21c48:	2080d916 	blt	r4,r2,21fb0 <__subdf3+0x81c>
   21c4c:	01000804 	movi	r4,32
   21c50:	2089c83a 	sub	r4,r4,r2
   21c54:	2912983a 	sll	r9,r5,r4
   21c58:	8890d83a 	srl	r8,r17,r2
   21c5c:	8908983a 	sll	r4,r17,r4
   21c60:	2884d83a 	srl	r2,r5,r2
   21c64:	4a22b03a 	or	r17,r9,r8
   21c68:	2008c03a 	cmpne	r4,r4,zero
   21c6c:	8922b03a 	or	r17,r17,r4
   21c70:	3463c83a 	sub	r17,r6,r17
   21c74:	1885c83a 	sub	r2,r3,r2
   21c78:	344d803a 	cmpltu	r6,r6,r17
   21c7c:	118bc83a 	sub	r5,r2,r6
   21c80:	5021883a 	mov	r16,r10
   21c84:	3825883a 	mov	r18,r7
   21c88:	003f2206 	br	21914 <__alt_data_end+0xfffe2514>
   21c8c:	9886b03a 	or	r3,r19,r2
   21c90:	18001c1e 	bne	r3,zero,21d04 <__subdf3+0x570>
   21c94:	0011883a 	mov	r8,zero
   21c98:	000b883a 	mov	r5,zero
   21c9c:	0023883a 	mov	r17,zero
   21ca0:	0021883a 	mov	r16,zero
   21ca4:	003f3e06 	br	219a0 <__alt_data_end+0xfffe25a0>
   21ca8:	010007c4 	movi	r4,31
   21cac:	20803c16 	blt	r4,r2,21da0 <__subdf3+0x60c>
   21cb0:	01000804 	movi	r4,32
   21cb4:	2089c83a 	sub	r4,r4,r2
   21cb8:	1912983a 	sll	r9,r3,r4
   21cbc:	308ed83a 	srl	r7,r6,r2
   21cc0:	3108983a 	sll	r4,r6,r4
   21cc4:	1884d83a 	srl	r2,r3,r2
   21cc8:	49ceb03a 	or	r7,r9,r7
   21ccc:	2008c03a 	cmpne	r4,r4,zero
   21cd0:	390eb03a 	or	r7,r7,r4
   21cd4:	003f4706 	br	219f4 <__alt_data_end+0xfffe25f4>
   21cd8:	2c48b03a 	or	r4,r5,r17
   21cdc:	20003e26 	beq	r4,zero,21dd8 <__subdf3+0x644>
   21ce0:	0084303a 	nor	r2,zero,r2
   21ce4:	10003a1e 	bne	r2,zero,21dd0 <__subdf3+0x63c>
   21ce8:	3463c83a 	sub	r17,r6,r17
   21cec:	194bc83a 	sub	r5,r3,r5
   21cf0:	344d803a 	cmpltu	r6,r6,r17
   21cf4:	298bc83a 	sub	r5,r5,r6
   21cf8:	5021883a 	mov	r16,r10
   21cfc:	3825883a 	mov	r18,r7
   21d00:	003f0406 	br	21914 <__alt_data_end+0xfffe2514>
   21d04:	1023883a 	mov	r17,r2
   21d08:	003f0706 	br	21928 <__alt_data_end+0xfffe2528>
   21d0c:	0101ffc4 	movi	r4,2047
   21d10:	813f331e 	bne	r16,r4,219e0 <__alt_data_end+0xfffe25e0>
   21d14:	003ec206 	br	21820 <__alt_data_end+0xfffe2420>
   21d18:	0027883a 	mov	r19,zero
   21d1c:	003fb006 	br	21be0 <__alt_data_end+0xfffe27e0>
   21d20:	0005883a 	mov	r2,zero
   21d24:	003fbb06 	br	21c14 <__alt_data_end+0xfffe2814>
   21d28:	2c44b03a 	or	r2,r5,r17
   21d2c:	80008b1e 	bne	r16,zero,21f5c <__subdf3+0x7c8>
   21d30:	1000b526 	beq	r2,zero,22008 <__subdf3+0x874>
   21d34:	1984b03a 	or	r2,r3,r6
   21d38:	103eb926 	beq	r2,zero,21820 <__alt_data_end+0xfffe2420>
   21d3c:	3449883a 	add	r4,r6,r17
   21d40:	2463803a 	cmpltu	r17,r4,r17
   21d44:	194b883a 	add	r5,r3,r5
   21d48:	2c4b883a 	add	r5,r5,r17
   21d4c:	2880202c 	andhi	r2,r5,128
   21d50:	2023883a 	mov	r17,r4
   21d54:	103f5c26 	beq	r2,zero,21ac8 <__alt_data_end+0xfffe26c8>
   21d58:	00bfe034 	movhi	r2,65408
   21d5c:	10bfffc4 	addi	r2,r2,-1
   21d60:	4821883a 	mov	r16,r9
   21d64:	288a703a 	and	r5,r5,r2
   21d68:	003ead06 	br	21820 <__alt_data_end+0xfffe2420>
   21d6c:	2c44b03a 	or	r2,r5,r17
   21d70:	8000291e 	bne	r16,zero,21e18 <__subdf3+0x684>
   21d74:	10004f1e 	bne	r2,zero,21eb4 <__subdf3+0x720>
   21d78:	1984b03a 	or	r2,r3,r6
   21d7c:	10000426 	beq	r2,zero,21d90 <__subdf3+0x5fc>
   21d80:	180b883a 	mov	r5,r3
   21d84:	3023883a 	mov	r17,r6
   21d88:	3825883a 	mov	r18,r7
   21d8c:	003ea406 	br	21820 <__alt_data_end+0xfffe2420>
   21d90:	0011883a 	mov	r8,zero
   21d94:	000b883a 	mov	r5,zero
   21d98:	0023883a 	mov	r17,zero
   21d9c:	003f0006 	br	219a0 <__alt_data_end+0xfffe25a0>
   21da0:	11fff804 	addi	r7,r2,-32
   21da4:	19c8d83a 	srl	r4,r3,r7
   21da8:	01c00804 	movi	r7,32
   21dac:	11c07e26 	beq	r2,r7,21fa8 <__subdf3+0x814>
   21db0:	01c01004 	movi	r7,64
   21db4:	3885c83a 	sub	r2,r7,r2
   21db8:	1884983a 	sll	r2,r3,r2
   21dbc:	118cb03a 	or	r6,r2,r6
   21dc0:	300ec03a 	cmpne	r7,r6,zero
   21dc4:	390eb03a 	or	r7,r7,r4
   21dc8:	0005883a 	mov	r2,zero
   21dcc:	003f0906 	br	219f4 <__alt_data_end+0xfffe25f4>
   21dd0:	0101ffc4 	movi	r4,2047
   21dd4:	513f991e 	bne	r10,r4,21c3c <__alt_data_end+0xfffe283c>
   21dd8:	180b883a 	mov	r5,r3
   21ddc:	3023883a 	mov	r17,r6
   21de0:	5021883a 	mov	r16,r10
   21de4:	3825883a 	mov	r18,r7
   21de8:	003e8d06 	br	21820 <__alt_data_end+0xfffe2420>
   21dec:	80001a1e 	bne	r16,zero,21e58 <__subdf3+0x6c4>
   21df0:	2c48b03a 	or	r4,r5,r17
   21df4:	20005526 	beq	r4,zero,21f4c <__subdf3+0x7b8>
   21df8:	0084303a 	nor	r2,zero,r2
   21dfc:	1000511e 	bne	r2,zero,21f44 <__subdf3+0x7b0>
   21e00:	89a3883a 	add	r17,r17,r6
   21e04:	194b883a 	add	r5,r3,r5
   21e08:	898d803a 	cmpltu	r6,r17,r6
   21e0c:	298b883a 	add	r5,r5,r6
   21e10:	5021883a 	mov	r16,r10
   21e14:	003efc06 	br	21a08 <__alt_data_end+0xfffe2608>
   21e18:	1000341e 	bne	r2,zero,21eec <__subdf3+0x758>
   21e1c:	1984b03a 	or	r2,r3,r6
   21e20:	10006f26 	beq	r2,zero,21fe0 <__subdf3+0x84c>
   21e24:	180b883a 	mov	r5,r3
   21e28:	3023883a 	mov	r17,r6
   21e2c:	3825883a 	mov	r18,r7
   21e30:	0401ffc4 	movi	r16,2047
   21e34:	003e7a06 	br	21820 <__alt_data_end+0xfffe2420>
   21e38:	2c62b03a 	or	r17,r5,r17
   21e3c:	8822c03a 	cmpne	r17,r17,zero
   21e40:	0005883a 	mov	r2,zero
   21e44:	003f8a06 	br	21c70 <__alt_data_end+0xfffe2870>
   21e48:	3821883a 	mov	r16,r7
   21e4c:	000b883a 	mov	r5,zero
   21e50:	0023883a 	mov	r17,zero
   21e54:	003ed206 	br	219a0 <__alt_data_end+0xfffe25a0>
   21e58:	0101ffc4 	movi	r4,2047
   21e5c:	51003b26 	beq	r10,r4,21f4c <__subdf3+0x7b8>
   21e60:	0085c83a 	sub	r2,zero,r2
   21e64:	29402034 	orhi	r5,r5,128
   21e68:	01000e04 	movi	r4,56
   21e6c:	20806216 	blt	r4,r2,21ff8 <__subdf3+0x864>
   21e70:	010007c4 	movi	r4,31
   21e74:	20806b16 	blt	r4,r2,22024 <__subdf3+0x890>
   21e78:	01000804 	movi	r4,32
   21e7c:	2089c83a 	sub	r4,r4,r2
   21e80:	2912983a 	sll	r9,r5,r4
   21e84:	888ed83a 	srl	r7,r17,r2
   21e88:	8908983a 	sll	r4,r17,r4
   21e8c:	2884d83a 	srl	r2,r5,r2
   21e90:	49e2b03a 	or	r17,r9,r7
   21e94:	2008c03a 	cmpne	r4,r4,zero
   21e98:	8922b03a 	or	r17,r17,r4
   21e9c:	89a3883a 	add	r17,r17,r6
   21ea0:	10c5883a 	add	r2,r2,r3
   21ea4:	898d803a 	cmpltu	r6,r17,r6
   21ea8:	118b883a 	add	r5,r2,r6
   21eac:	5021883a 	mov	r16,r10
   21eb0:	003ed506 	br	21a08 <__alt_data_end+0xfffe2608>
   21eb4:	1984b03a 	or	r2,r3,r6
   21eb8:	103e5926 	beq	r2,zero,21820 <__alt_data_end+0xfffe2420>
   21ebc:	8989c83a 	sub	r4,r17,r6
   21ec0:	8911803a 	cmpltu	r8,r17,r4
   21ec4:	28c5c83a 	sub	r2,r5,r3
   21ec8:	1205c83a 	sub	r2,r2,r8
   21ecc:	1200202c 	andhi	r8,r2,128
   21ed0:	403ef926 	beq	r8,zero,21ab8 <__alt_data_end+0xfffe26b8>
   21ed4:	3463c83a 	sub	r17,r6,r17
   21ed8:	194bc83a 	sub	r5,r3,r5
   21edc:	344d803a 	cmpltu	r6,r6,r17
   21ee0:	298bc83a 	sub	r5,r5,r6
   21ee4:	3825883a 	mov	r18,r7
   21ee8:	003e4d06 	br	21820 <__alt_data_end+0xfffe2420>
   21eec:	1984b03a 	or	r2,r3,r6
   21ef0:	10002b26 	beq	r2,zero,21fa0 <__subdf3+0x80c>
   21ef4:	2808d0fa 	srli	r4,r5,3
   21ef8:	8822d0fa 	srli	r17,r17,3
   21efc:	280a977a 	slli	r5,r5,29
   21f00:	2080022c 	andhi	r2,r4,8
   21f04:	2c62b03a 	or	r17,r5,r17
   21f08:	10000826 	beq	r2,zero,21f2c <__subdf3+0x798>
   21f0c:	1810d0fa 	srli	r8,r3,3
   21f10:	4080022c 	andhi	r2,r8,8
   21f14:	1000051e 	bne	r2,zero,21f2c <__subdf3+0x798>
   21f18:	300cd0fa 	srli	r6,r6,3
   21f1c:	1804977a 	slli	r2,r3,29
   21f20:	4009883a 	mov	r4,r8
   21f24:	3825883a 	mov	r18,r7
   21f28:	11a2b03a 	or	r17,r2,r6
   21f2c:	880ad77a 	srli	r5,r17,29
   21f30:	200890fa 	slli	r4,r4,3
   21f34:	882290fa 	slli	r17,r17,3
   21f38:	0401ffc4 	movi	r16,2047
   21f3c:	290ab03a 	or	r5,r5,r4
   21f40:	003e3706 	br	21820 <__alt_data_end+0xfffe2420>
   21f44:	0101ffc4 	movi	r4,2047
   21f48:	513fc71e 	bne	r10,r4,21e68 <__alt_data_end+0xfffe2a68>
   21f4c:	180b883a 	mov	r5,r3
   21f50:	3023883a 	mov	r17,r6
   21f54:	5021883a 	mov	r16,r10
   21f58:	003e3106 	br	21820 <__alt_data_end+0xfffe2420>
   21f5c:	10002d26 	beq	r2,zero,22014 <__subdf3+0x880>
   21f60:	1984b03a 	or	r2,r3,r6
   21f64:	10000e26 	beq	r2,zero,21fa0 <__subdf3+0x80c>
   21f68:	2808d0fa 	srli	r4,r5,3
   21f6c:	8822d0fa 	srli	r17,r17,3
   21f70:	280a977a 	slli	r5,r5,29
   21f74:	2080022c 	andhi	r2,r4,8
   21f78:	2c62b03a 	or	r17,r5,r17
   21f7c:	103feb26 	beq	r2,zero,21f2c <__alt_data_end+0xfffe2b2c>
   21f80:	180ed0fa 	srli	r7,r3,3
   21f84:	3880022c 	andhi	r2,r7,8
   21f88:	103fe81e 	bne	r2,zero,21f2c <__alt_data_end+0xfffe2b2c>
   21f8c:	300cd0fa 	srli	r6,r6,3
   21f90:	1804977a 	slli	r2,r3,29
   21f94:	3809883a 	mov	r4,r7
   21f98:	11a2b03a 	or	r17,r2,r6
   21f9c:	003fe306 	br	21f2c <__alt_data_end+0xfffe2b2c>
   21fa0:	0401ffc4 	movi	r16,2047
   21fa4:	003e1e06 	br	21820 <__alt_data_end+0xfffe2420>
   21fa8:	0005883a 	mov	r2,zero
   21fac:	003f8306 	br	21dbc <__alt_data_end+0xfffe29bc>
   21fb0:	113ff804 	addi	r4,r2,-32
   21fb4:	02000804 	movi	r8,32
   21fb8:	2908d83a 	srl	r4,r5,r4
   21fbc:	12002526 	beq	r2,r8,22054 <__subdf3+0x8c0>
   21fc0:	02001004 	movi	r8,64
   21fc4:	4085c83a 	sub	r2,r8,r2
   21fc8:	288a983a 	sll	r5,r5,r2
   21fcc:	2c62b03a 	or	r17,r5,r17
   21fd0:	8822c03a 	cmpne	r17,r17,zero
   21fd4:	8922b03a 	or	r17,r17,r4
   21fd8:	0005883a 	mov	r2,zero
   21fdc:	003f2406 	br	21c70 <__alt_data_end+0xfffe2870>
   21fe0:	01402034 	movhi	r5,128
   21fe4:	0011883a 	mov	r8,zero
   21fe8:	297fffc4 	addi	r5,r5,-1
   21fec:	047ffe04 	movi	r17,-8
   21ff0:	0401ffc4 	movi	r16,2047
   21ff4:	003e6a06 	br	219a0 <__alt_data_end+0xfffe25a0>
   21ff8:	2c62b03a 	or	r17,r5,r17
   21ffc:	8822c03a 	cmpne	r17,r17,zero
   22000:	0005883a 	mov	r2,zero
   22004:	003fa506 	br	21e9c <__alt_data_end+0xfffe2a9c>
   22008:	180b883a 	mov	r5,r3
   2200c:	3023883a 	mov	r17,r6
   22010:	003e0306 	br	21820 <__alt_data_end+0xfffe2420>
   22014:	180b883a 	mov	r5,r3
   22018:	3023883a 	mov	r17,r6
   2201c:	0401ffc4 	movi	r16,2047
   22020:	003dff06 	br	21820 <__alt_data_end+0xfffe2420>
   22024:	113ff804 	addi	r4,r2,-32
   22028:	01c00804 	movi	r7,32
   2202c:	2908d83a 	srl	r4,r5,r4
   22030:	11c00a26 	beq	r2,r7,2205c <__subdf3+0x8c8>
   22034:	01c01004 	movi	r7,64
   22038:	3885c83a 	sub	r2,r7,r2
   2203c:	288a983a 	sll	r5,r5,r2
   22040:	2c62b03a 	or	r17,r5,r17
   22044:	8822c03a 	cmpne	r17,r17,zero
   22048:	8922b03a 	or	r17,r17,r4
   2204c:	0005883a 	mov	r2,zero
   22050:	003f9206 	br	21e9c <__alt_data_end+0xfffe2a9c>
   22054:	000b883a 	mov	r5,zero
   22058:	003fdc06 	br	21fcc <__alt_data_end+0xfffe2bcc>
   2205c:	000b883a 	mov	r5,zero
   22060:	003ff706 	br	22040 <__alt_data_end+0xfffe2c40>

00022064 <__fixdfsi>:
   22064:	2806d53a 	srli	r3,r5,20
   22068:	00800434 	movhi	r2,16
   2206c:	10bfffc4 	addi	r2,r2,-1
   22070:	18c1ffcc 	andi	r3,r3,2047
   22074:	0180ff84 	movi	r6,1022
   22078:	2884703a 	and	r2,r5,r2
   2207c:	280ad7fa 	srli	r5,r5,31
   22080:	30c0130e 	bge	r6,r3,220d0 <__fixdfsi+0x6c>
   22084:	01810744 	movi	r6,1053
   22088:	30c00d16 	blt	r6,r3,220c0 <__fixdfsi+0x5c>
   2208c:	01810cc4 	movi	r6,1075
   22090:	30cdc83a 	sub	r6,r6,r3
   22094:	01c007c4 	movi	r7,31
   22098:	10800434 	orhi	r2,r2,16
   2209c:	39800e0e 	bge	r7,r6,220d8 <__fixdfsi+0x74>
   220a0:	010104c4 	movi	r4,1043
   220a4:	20c7c83a 	sub	r3,r4,r3
   220a8:	10c6d83a 	srl	r3,r2,r3
   220ac:	29403fcc 	andi	r5,r5,255
   220b0:	0145c83a 	sub	r2,zero,r5
   220b4:	1884f03a 	xor	r2,r3,r2
   220b8:	1145883a 	add	r2,r2,r5
   220bc:	f800283a 	ret
   220c0:	00a00034 	movhi	r2,32768
   220c4:	10bfffc4 	addi	r2,r2,-1
   220c8:	2885883a 	add	r2,r5,r2
   220cc:	f800283a 	ret
   220d0:	0005883a 	mov	r2,zero
   220d4:	f800283a 	ret
   220d8:	18fefb44 	addi	r3,r3,-1043
   220dc:	2188d83a 	srl	r4,r4,r6
   220e0:	10c6983a 	sll	r3,r2,r3
   220e4:	20c6b03a 	or	r3,r4,r3
   220e8:	003ff006 	br	220ac <__alt_data_end+0xfffe2cac>

000220ec <__extendsfdf2>:
   220ec:	200ad5fa 	srli	r5,r4,23
   220f0:	defffd04 	addi	sp,sp,-12
   220f4:	dc400115 	stw	r17,4(sp)
   220f8:	29403fcc 	andi	r5,r5,255
   220fc:	29800044 	addi	r6,r5,1
   22100:	04402034 	movhi	r17,128
   22104:	dc000015 	stw	r16,0(sp)
   22108:	8c7fffc4 	addi	r17,r17,-1
   2210c:	dfc00215 	stw	ra,8(sp)
   22110:	31803fcc 	andi	r6,r6,255
   22114:	00800044 	movi	r2,1
   22118:	8922703a 	and	r17,r17,r4
   2211c:	2020d7fa 	srli	r16,r4,31
   22120:	1180110e 	bge	r2,r6,22168 <__extendsfdf2+0x7c>
   22124:	880ed0fa 	srli	r7,r17,3
   22128:	8822977a 	slli	r17,r17,29
   2212c:	2940e004 	addi	r5,r5,896
   22130:	2941ffcc 	andi	r5,r5,2047
   22134:	280c953a 	slli	r6,r5,20
   22138:	01400434 	movhi	r5,16
   2213c:	800697fa 	slli	r3,r16,31
   22140:	297fffc4 	addi	r5,r5,-1
   22144:	394a703a 	and	r5,r7,r5
   22148:	298ab03a 	or	r5,r5,r6
   2214c:	8805883a 	mov	r2,r17
   22150:	28c6b03a 	or	r3,r5,r3
   22154:	dfc00217 	ldw	ra,8(sp)
   22158:	dc400117 	ldw	r17,4(sp)
   2215c:	dc000017 	ldw	r16,0(sp)
   22160:	dec00304 	addi	sp,sp,12
   22164:	f800283a 	ret
   22168:	2800111e 	bne	r5,zero,221b0 <__extendsfdf2+0xc4>
   2216c:	88001c26 	beq	r17,zero,221e0 <__extendsfdf2+0xf4>
   22170:	8809883a 	mov	r4,r17
   22174:	00223940 	call	22394 <__clzsi2>
   22178:	00c00284 	movi	r3,10
   2217c:	18801b16 	blt	r3,r2,221ec <__extendsfdf2+0x100>
   22180:	01c002c4 	movi	r7,11
   22184:	388fc83a 	sub	r7,r7,r2
   22188:	10c00544 	addi	r3,r2,21
   2218c:	89ced83a 	srl	r7,r17,r7
   22190:	88e2983a 	sll	r17,r17,r3
   22194:	0180e244 	movi	r6,905
   22198:	308bc83a 	sub	r5,r6,r2
   2219c:	01800434 	movhi	r6,16
   221a0:	31bfffc4 	addi	r6,r6,-1
   221a4:	398e703a 	and	r7,r7,r6
   221a8:	2941ffcc 	andi	r5,r5,2047
   221ac:	003fe006 	br	22130 <__alt_data_end+0xfffe2d30>
   221b0:	88000826 	beq	r17,zero,221d4 <__extendsfdf2+0xe8>
   221b4:	880ed0fa 	srli	r7,r17,3
   221b8:	00800434 	movhi	r2,16
   221bc:	10bfffc4 	addi	r2,r2,-1
   221c0:	39c00234 	orhi	r7,r7,8
   221c4:	8822977a 	slli	r17,r17,29
   221c8:	388e703a 	and	r7,r7,r2
   221cc:	0141ffc4 	movi	r5,2047
   221d0:	003fd706 	br	22130 <__alt_data_end+0xfffe2d30>
   221d4:	0141ffc4 	movi	r5,2047
   221d8:	000f883a 	mov	r7,zero
   221dc:	003fd406 	br	22130 <__alt_data_end+0xfffe2d30>
   221e0:	000b883a 	mov	r5,zero
   221e4:	000f883a 	mov	r7,zero
   221e8:	003fd106 	br	22130 <__alt_data_end+0xfffe2d30>
   221ec:	11fffd44 	addi	r7,r2,-11
   221f0:	89ce983a 	sll	r7,r17,r7
   221f4:	0023883a 	mov	r17,zero
   221f8:	003fe606 	br	22194 <__alt_data_end+0xfffe2d94>

000221fc <__truncdfsf2>:
   221fc:	2810d53a 	srli	r8,r5,20
   22200:	01c00434 	movhi	r7,16
   22204:	39ffffc4 	addi	r7,r7,-1
   22208:	29ce703a 	and	r7,r5,r7
   2220c:	380e90fa 	slli	r7,r7,3
   22210:	4201ffcc 	andi	r8,r8,2047
   22214:	200cd77a 	srli	r6,r4,29
   22218:	42400044 	addi	r9,r8,1
   2221c:	4a41ffcc 	andi	r9,r9,2047
   22220:	00800044 	movi	r2,1
   22224:	398cb03a 	or	r6,r7,r6
   22228:	280ad7fa 	srli	r5,r5,31
   2222c:	200e90fa 	slli	r7,r4,3
   22230:	1240230e 	bge	r2,r9,222c0 <__truncdfsf2+0xc4>
   22234:	40ff2004 	addi	r3,r8,-896
   22238:	00803f84 	movi	r2,254
   2223c:	10c01516 	blt	r2,r3,22294 <__truncdfsf2+0x98>
   22240:	00c02d0e 	bge	zero,r3,222f8 <__truncdfsf2+0xfc>
   22244:	200891ba 	slli	r4,r4,6
   22248:	300c90fa 	slli	r6,r6,3
   2224c:	380ed77a 	srli	r7,r7,29
   22250:	2008c03a 	cmpne	r4,r4,zero
   22254:	310cb03a 	or	r6,r6,r4
   22258:	31ccb03a 	or	r6,r6,r7
   2225c:	308001cc 	andi	r2,r6,7
   22260:	10000426 	beq	r2,zero,22274 <__truncdfsf2+0x78>
   22264:	310003cc 	andi	r4,r6,15
   22268:	00800104 	movi	r2,4
   2226c:	20800126 	beq	r4,r2,22274 <__truncdfsf2+0x78>
   22270:	31800104 	addi	r6,r6,4
   22274:	3081002c 	andhi	r2,r6,1024
   22278:	10002326 	beq	r2,zero,22308 <__truncdfsf2+0x10c>
   2227c:	18c00044 	addi	r3,r3,1
   22280:	00803fc4 	movi	r2,255
   22284:	18800326 	beq	r3,r2,22294 <__truncdfsf2+0x98>
   22288:	300c91ba 	slli	r6,r6,6
   2228c:	300cd27a 	srli	r6,r6,9
   22290:	00000206 	br	2229c <__truncdfsf2+0xa0>
   22294:	00ffffc4 	movi	r3,-1
   22298:	000d883a 	mov	r6,zero
   2229c:	18c03fcc 	andi	r3,r3,255
   222a0:	180895fa 	slli	r4,r3,23
   222a4:	00c02034 	movhi	r3,128
   222a8:	280a97fa 	slli	r5,r5,31
   222ac:	18ffffc4 	addi	r3,r3,-1
   222b0:	30c6703a 	and	r3,r6,r3
   222b4:	1906b03a 	or	r3,r3,r4
   222b8:	1944b03a 	or	r2,r3,r5
   222bc:	f800283a 	ret
   222c0:	4000071e 	bne	r8,zero,222e0 <__truncdfsf2+0xe4>
   222c4:	31ccb03a 	or	r6,r6,r7
   222c8:	30000d1e 	bne	r6,zero,22300 <__truncdfsf2+0x104>
   222cc:	0007883a 	mov	r3,zero
   222d0:	00802034 	movhi	r2,128
   222d4:	10bfffc4 	addi	r2,r2,-1
   222d8:	308c703a 	and	r6,r6,r2
   222dc:	003fef06 	br	2229c <__alt_data_end+0xfffe2e9c>
   222e0:	31c8b03a 	or	r4,r6,r7
   222e4:	203feb26 	beq	r4,zero,22294 <__alt_data_end+0xfffe2e94>
   222e8:	300c90fa 	slli	r6,r6,3
   222ec:	00c03fc4 	movi	r3,255
   222f0:	31808034 	orhi	r6,r6,512
   222f4:	003fd906 	br	2225c <__alt_data_end+0xfffe2e5c>
   222f8:	00bffa44 	movi	r2,-23
   222fc:	1880090e 	bge	r3,r2,22324 <__truncdfsf2+0x128>
   22300:	01800144 	movi	r6,5
   22304:	0007883a 	mov	r3,zero
   22308:	00803fc4 	movi	r2,255
   2230c:	300cd0fa 	srli	r6,r6,3
   22310:	18bfef1e 	bne	r3,r2,222d0 <__alt_data_end+0xfffe2ed0>
   22314:	303fdf26 	beq	r6,zero,22294 <__alt_data_end+0xfffe2e94>
   22318:	31801034 	orhi	r6,r6,64
   2231c:	00ffffc4 	movi	r3,-1
   22320:	003feb06 	br	222d0 <__alt_data_end+0xfffe2ed0>
   22324:	0080e784 	movi	r2,926
   22328:	1205c83a 	sub	r2,r2,r8
   2232c:	00c007c4 	movi	r3,31
   22330:	31802034 	orhi	r6,r6,128
   22334:	18800916 	blt	r3,r2,2235c <__truncdfsf2+0x160>
   22338:	423f2084 	addi	r8,r8,-894
   2233c:	3a06983a 	sll	r3,r7,r8
   22340:	3210983a 	sll	r8,r6,r8
   22344:	388ed83a 	srl	r7,r7,r2
   22348:	180cc03a 	cmpne	r6,r3,zero
   2234c:	418cb03a 	or	r6,r8,r6
   22350:	31ccb03a 	or	r6,r6,r7
   22354:	0007883a 	mov	r3,zero
   22358:	003fc006 	br	2225c <__alt_data_end+0xfffe2e5c>
   2235c:	00c0df84 	movi	r3,894
   22360:	1a07c83a 	sub	r3,r3,r8
   22364:	01000804 	movi	r4,32
   22368:	30c6d83a 	srl	r3,r6,r3
   2236c:	11000726 	beq	r2,r4,2238c <__truncdfsf2+0x190>
   22370:	423f2884 	addi	r8,r8,-862
   22374:	3210983a 	sll	r8,r6,r8
   22378:	41ceb03a 	or	r7,r8,r7
   2237c:	380ec03a 	cmpne	r7,r7,zero
   22380:	38ccb03a 	or	r6,r7,r3
   22384:	0007883a 	mov	r3,zero
   22388:	003fb406 	br	2225c <__alt_data_end+0xfffe2e5c>
   2238c:	0011883a 	mov	r8,zero
   22390:	003ff906 	br	22378 <__alt_data_end+0xfffe2f78>

00022394 <__clzsi2>:
   22394:	00bfffd4 	movui	r2,65535
   22398:	11000b36 	bltu	r2,r4,223c8 <__clzsi2+0x34>
   2239c:	00803fc4 	movi	r2,255
   223a0:	1100122e 	bgeu	r2,r4,223ec <__clzsi2+0x58>
   223a4:	00c00204 	movi	r3,8
   223a8:	01400604 	movi	r5,24
   223ac:	20c8d83a 	srl	r4,r4,r3
   223b0:	008000f4 	movhi	r2,3
   223b4:	10bf5804 	addi	r2,r2,-672
   223b8:	1109883a 	add	r4,r2,r4
   223bc:	20800003 	ldbu	r2,0(r4)
   223c0:	2885c83a 	sub	r2,r5,r2
   223c4:	f800283a 	ret
   223c8:	00804034 	movhi	r2,256
   223cc:	10bfffc4 	addi	r2,r2,-1
   223d0:	11000336 	bltu	r2,r4,223e0 <__clzsi2+0x4c>
   223d4:	00c00404 	movi	r3,16
   223d8:	180b883a 	mov	r5,r3
   223dc:	003ff306 	br	223ac <__alt_data_end+0xfffe2fac>
   223e0:	00c00604 	movi	r3,24
   223e4:	01400204 	movi	r5,8
   223e8:	003ff006 	br	223ac <__alt_data_end+0xfffe2fac>
   223ec:	0007883a 	mov	r3,zero
   223f0:	01400804 	movi	r5,32
   223f4:	003fed06 	br	223ac <__alt_data_end+0xfffe2fac>

000223f8 <udivmodsi4>:
   223f8:	2900182e 	bgeu	r5,r4,2245c <udivmodsi4+0x64>
   223fc:	28001716 	blt	r5,zero,2245c <udivmodsi4+0x64>
   22400:	00800804 	movi	r2,32
   22404:	00c00044 	movi	r3,1
   22408:	00000206 	br	22414 <udivmodsi4+0x1c>
   2240c:	10001126 	beq	r2,zero,22454 <udivmodsi4+0x5c>
   22410:	28000516 	blt	r5,zero,22428 <udivmodsi4+0x30>
   22414:	294b883a 	add	r5,r5,r5
   22418:	10bfffc4 	addi	r2,r2,-1
   2241c:	18c7883a 	add	r3,r3,r3
   22420:	293ffa36 	bltu	r5,r4,2240c <__alt_data_end+0xfffe300c>
   22424:	18000b26 	beq	r3,zero,22454 <udivmodsi4+0x5c>
   22428:	0005883a 	mov	r2,zero
   2242c:	21400236 	bltu	r4,r5,22438 <udivmodsi4+0x40>
   22430:	2149c83a 	sub	r4,r4,r5
   22434:	10c4b03a 	or	r2,r2,r3
   22438:	1806d07a 	srli	r3,r3,1
   2243c:	280ad07a 	srli	r5,r5,1
   22440:	183ffa1e 	bne	r3,zero,2242c <__alt_data_end+0xfffe302c>
   22444:	3000011e 	bne	r6,zero,2244c <udivmodsi4+0x54>
   22448:	f800283a 	ret
   2244c:	2005883a 	mov	r2,r4
   22450:	f800283a 	ret
   22454:	0005883a 	mov	r2,zero
   22458:	003ffa06 	br	22444 <__alt_data_end+0xfffe3044>
   2245c:	00c00044 	movi	r3,1
   22460:	003ff106 	br	22428 <__alt_data_end+0xfffe3028>

00022464 <__divsi3>:
   22464:	defffe04 	addi	sp,sp,-8
   22468:	dfc00115 	stw	ra,4(sp)
   2246c:	dc000015 	stw	r16,0(sp)
   22470:	20000b16 	blt	r4,zero,224a0 <__divsi3+0x3c>
   22474:	0021883a 	mov	r16,zero
   22478:	28000c16 	blt	r5,zero,224ac <__divsi3+0x48>
   2247c:	000d883a 	mov	r6,zero
   22480:	00223f80 	call	223f8 <udivmodsi4>
   22484:	0407c83a 	sub	r3,zero,r16
   22488:	1884f03a 	xor	r2,r3,r2
   2248c:	1405883a 	add	r2,r2,r16
   22490:	dfc00117 	ldw	ra,4(sp)
   22494:	dc000017 	ldw	r16,0(sp)
   22498:	dec00204 	addi	sp,sp,8
   2249c:	f800283a 	ret
   224a0:	0109c83a 	sub	r4,zero,r4
   224a4:	04000044 	movi	r16,1
   224a8:	283ff40e 	bge	r5,zero,2247c <__alt_data_end+0xfffe307c>
   224ac:	014bc83a 	sub	r5,zero,r5
   224b0:	8400005c 	xori	r16,r16,1
   224b4:	003ff106 	br	2247c <__alt_data_end+0xfffe307c>

000224b8 <__modsi3>:
   224b8:	defffd04 	addi	sp,sp,-12
   224bc:	dfc00215 	stw	ra,8(sp)
   224c0:	dc400115 	stw	r17,4(sp)
   224c4:	dc000015 	stw	r16,0(sp)
   224c8:	20000c16 	blt	r4,zero,224fc <__modsi3+0x44>
   224cc:	0023883a 	mov	r17,zero
   224d0:	0021883a 	mov	r16,zero
   224d4:	28000d16 	blt	r5,zero,2250c <__modsi3+0x54>
   224d8:	01800044 	movi	r6,1
   224dc:	00223f80 	call	223f8 <udivmodsi4>
   224e0:	1404f03a 	xor	r2,r2,r16
   224e4:	8885883a 	add	r2,r17,r2
   224e8:	dfc00217 	ldw	ra,8(sp)
   224ec:	dc400117 	ldw	r17,4(sp)
   224f0:	dc000017 	ldw	r16,0(sp)
   224f4:	dec00304 	addi	sp,sp,12
   224f8:	f800283a 	ret
   224fc:	0109c83a 	sub	r4,zero,r4
   22500:	04400044 	movi	r17,1
   22504:	043fffc4 	movi	r16,-1
   22508:	283ff30e 	bge	r5,zero,224d8 <__alt_data_end+0xfffe30d8>
   2250c:	014bc83a 	sub	r5,zero,r5
   22510:	003ff106 	br	224d8 <__alt_data_end+0xfffe30d8>

00022514 <__udivsi3>:
   22514:	000d883a 	mov	r6,zero
   22518:	00223f81 	jmpi	223f8 <udivmodsi4>

0002251c <__umodsi3>:
   2251c:	01800044 	movi	r6,1
   22520:	00223f81 	jmpi	223f8 <udivmodsi4>

00022524 <_printf_r>:
   22524:	defffd04 	addi	sp,sp,-12
   22528:	dfc00015 	stw	ra,0(sp)
   2252c:	d9800115 	stw	r6,4(sp)
   22530:	d9c00215 	stw	r7,8(sp)
   22534:	280d883a 	mov	r6,r5
   22538:	21400217 	ldw	r5,8(r4)
   2253c:	d9c00104 	addi	r7,sp,4
   22540:	00226f00 	call	226f0 <___vfprintf_internal_r>
   22544:	dfc00017 	ldw	ra,0(sp)
   22548:	dec00304 	addi	sp,sp,12
   2254c:	f800283a 	ret

00022550 <printf>:
   22550:	defffc04 	addi	sp,sp,-16
   22554:	dfc00015 	stw	ra,0(sp)
   22558:	d9400115 	stw	r5,4(sp)
   2255c:	d9800215 	stw	r6,8(sp)
   22560:	d9c00315 	stw	r7,12(sp)
   22564:	008000f4 	movhi	r2,3
   22568:	1086f204 	addi	r2,r2,7112
   2256c:	10800017 	ldw	r2,0(r2)
   22570:	200b883a 	mov	r5,r4
   22574:	d9800104 	addi	r6,sp,4
   22578:	11000217 	ldw	r4,8(r2)
   2257c:	00246ec0 	call	246ec <__vfprintf_internal>
   22580:	dfc00017 	ldw	ra,0(sp)
   22584:	dec00404 	addi	sp,sp,16
   22588:	f800283a 	ret

0002258c <_puts_r>:
   2258c:	defff604 	addi	sp,sp,-40
   22590:	dc000715 	stw	r16,28(sp)
   22594:	2021883a 	mov	r16,r4
   22598:	2809883a 	mov	r4,r5
   2259c:	dc400815 	stw	r17,32(sp)
   225a0:	dfc00915 	stw	ra,36(sp)
   225a4:	2823883a 	mov	r17,r5
   225a8:	00226580 	call	22658 <strlen>
   225ac:	00c000f4 	movhi	r3,3
   225b0:	18c6f204 	addi	r3,r3,7112
   225b4:	18c00017 	ldw	r3,0(r3)
   225b8:	11000044 	addi	r4,r2,1
   225bc:	d8800115 	stw	r2,4(sp)
   225c0:	18c00217 	ldw	r3,8(r3)
   225c4:	014000f4 	movhi	r5,3
   225c8:	297f9804 	addi	r5,r5,-416
   225cc:	1880030b 	ldhu	r2,12(r3)
   225d0:	d9400215 	stw	r5,8(sp)
   225d4:	d9000615 	stw	r4,24(sp)
   225d8:	01400044 	movi	r5,1
   225dc:	01000084 	movi	r4,2
   225e0:	d9000515 	stw	r4,20(sp)
   225e4:	dc400015 	stw	r17,0(sp)
   225e8:	d9400315 	stw	r5,12(sp)
   225ec:	dec00415 	stw	sp,16(sp)
   225f0:	1108000c 	andi	r4,r2,8192
   225f4:	2000061e 	bne	r4,zero,22610 <_puts_r+0x84>
   225f8:	19401917 	ldw	r5,100(r3)
   225fc:	0137ffc4 	movi	r4,-8193
   22600:	10880014 	ori	r2,r2,8192
   22604:	2908703a 	and	r4,r5,r4
   22608:	1880030d 	sth	r2,12(r3)
   2260c:	19001915 	stw	r4,100(r3)
   22610:	81400217 	ldw	r5,8(r16)
   22614:	8009883a 	mov	r4,r16
   22618:	d9800404 	addi	r6,sp,16
   2261c:	0026b740 	call	26b74 <__sfvwrite_r>
   22620:	1000061e 	bne	r2,zero,2263c <_puts_r+0xb0>
   22624:	00800284 	movi	r2,10
   22628:	dfc00917 	ldw	ra,36(sp)
   2262c:	dc400817 	ldw	r17,32(sp)
   22630:	dc000717 	ldw	r16,28(sp)
   22634:	dec00a04 	addi	sp,sp,40
   22638:	f800283a 	ret
   2263c:	00bfffc4 	movi	r2,-1
   22640:	003ff906 	br	22628 <__alt_data_end+0xfffe3228>

00022644 <puts>:
   22644:	008000f4 	movhi	r2,3
   22648:	1086f204 	addi	r2,r2,7112
   2264c:	200b883a 	mov	r5,r4
   22650:	11000017 	ldw	r4,0(r2)
   22654:	002258c1 	jmpi	2258c <_puts_r>

00022658 <strlen>:
   22658:	208000cc 	andi	r2,r4,3
   2265c:	10002026 	beq	r2,zero,226e0 <strlen+0x88>
   22660:	20800007 	ldb	r2,0(r4)
   22664:	10002026 	beq	r2,zero,226e8 <strlen+0x90>
   22668:	2005883a 	mov	r2,r4
   2266c:	00000206 	br	22678 <strlen+0x20>
   22670:	10c00007 	ldb	r3,0(r2)
   22674:	18001826 	beq	r3,zero,226d8 <strlen+0x80>
   22678:	10800044 	addi	r2,r2,1
   2267c:	10c000cc 	andi	r3,r2,3
   22680:	183ffb1e 	bne	r3,zero,22670 <__alt_data_end+0xfffe3270>
   22684:	10c00017 	ldw	r3,0(r2)
   22688:	01ffbff4 	movhi	r7,65279
   2268c:	39ffbfc4 	addi	r7,r7,-257
   22690:	00ca303a 	nor	r5,zero,r3
   22694:	01a02074 	movhi	r6,32897
   22698:	19c7883a 	add	r3,r3,r7
   2269c:	31a02004 	addi	r6,r6,-32640
   226a0:	1946703a 	and	r3,r3,r5
   226a4:	1986703a 	and	r3,r3,r6
   226a8:	1800091e 	bne	r3,zero,226d0 <strlen+0x78>
   226ac:	10800104 	addi	r2,r2,4
   226b0:	10c00017 	ldw	r3,0(r2)
   226b4:	19cb883a 	add	r5,r3,r7
   226b8:	00c6303a 	nor	r3,zero,r3
   226bc:	28c6703a 	and	r3,r5,r3
   226c0:	1986703a 	and	r3,r3,r6
   226c4:	183ff926 	beq	r3,zero,226ac <__alt_data_end+0xfffe32ac>
   226c8:	00000106 	br	226d0 <strlen+0x78>
   226cc:	10800044 	addi	r2,r2,1
   226d0:	10c00007 	ldb	r3,0(r2)
   226d4:	183ffd1e 	bne	r3,zero,226cc <__alt_data_end+0xfffe32cc>
   226d8:	1105c83a 	sub	r2,r2,r4
   226dc:	f800283a 	ret
   226e0:	2005883a 	mov	r2,r4
   226e4:	003fe706 	br	22684 <__alt_data_end+0xfffe3284>
   226e8:	0005883a 	mov	r2,zero
   226ec:	f800283a 	ret

000226f0 <___vfprintf_internal_r>:
   226f0:	defeb604 	addi	sp,sp,-1320
   226f4:	dfc14915 	stw	ra,1316(sp)
   226f8:	ddc14715 	stw	r23,1308(sp)
   226fc:	dd814615 	stw	r22,1304(sp)
   22700:	282f883a 	mov	r23,r5
   22704:	202d883a 	mov	r22,r4
   22708:	d9812a15 	stw	r6,1192(sp)
   2270c:	d9c12d15 	stw	r7,1204(sp)
   22710:	df014815 	stw	fp,1312(sp)
   22714:	dd414515 	stw	r21,1300(sp)
   22718:	dd014415 	stw	r20,1296(sp)
   2271c:	dcc14315 	stw	r19,1292(sp)
   22720:	dc814215 	stw	r18,1288(sp)
   22724:	dc414115 	stw	r17,1284(sp)
   22728:	dc014015 	stw	r16,1280(sp)
   2272c:	00272340 	call	27234 <_localeconv_r>
   22730:	10800017 	ldw	r2,0(r2)
   22734:	1009883a 	mov	r4,r2
   22738:	d8813515 	stw	r2,1236(sp)
   2273c:	00226580 	call	22658 <strlen>
   22740:	d8813815 	stw	r2,1248(sp)
   22744:	b0000226 	beq	r22,zero,22750 <___vfprintf_internal_r+0x60>
   22748:	b0800e17 	ldw	r2,56(r22)
   2274c:	10010426 	beq	r2,zero,22b60 <___vfprintf_internal_r+0x470>
   22750:	b8c0030b 	ldhu	r3,12(r23)
   22754:	1908000c 	andi	r4,r3,8192
   22758:	1805883a 	mov	r2,r3
   2275c:	2000071e 	bne	r4,zero,2277c <___vfprintf_internal_r+0x8c>
   22760:	b9001917 	ldw	r4,100(r23)
   22764:	18880014 	ori	r2,r3,8192
   22768:	00f7ffc4 	movi	r3,-8193
   2276c:	20c8703a 	and	r4,r4,r3
   22770:	b880030d 	sth	r2,12(r23)
   22774:	1007883a 	mov	r3,r2
   22778:	b9001915 	stw	r4,100(r23)
   2277c:	1100020c 	andi	r4,r2,8
   22780:	2000a726 	beq	r4,zero,22a20 <___vfprintf_internal_r+0x330>
   22784:	b9000417 	ldw	r4,16(r23)
   22788:	2000a526 	beq	r4,zero,22a20 <___vfprintf_internal_r+0x330>
   2278c:	1080068c 	andi	r2,r2,26
   22790:	01000284 	movi	r4,10
   22794:	1100ab26 	beq	r2,r4,22a44 <___vfprintf_internal_r+0x354>
   22798:	dac10e04 	addi	r11,sp,1080
   2279c:	db010dc4 	addi	r12,sp,1079
   227a0:	d8800404 	addi	r2,sp,16
   227a4:	050000f4 	movhi	r20,3
   227a8:	dac12815 	stw	r11,1184(sp)
   227ac:	5b17c83a 	sub	r11,r11,r12
   227b0:	a53fa984 	addi	r20,r20,-346
   227b4:	db012915 	stw	r12,1188(sp)
   227b8:	d8811e15 	stw	r2,1144(sp)
   227bc:	d8012015 	stw	zero,1152(sp)
   227c0:	d8011f15 	stw	zero,1148(sp)
   227c4:	d8013315 	stw	zero,1228(sp)
   227c8:	d8013715 	stw	zero,1244(sp)
   227cc:	d8013915 	stw	zero,1252(sp)
   227d0:	d8013b15 	stw	zero,1260(sp)
   227d4:	d8013a15 	stw	zero,1256(sp)
   227d8:	d8012f15 	stw	zero,1212(sp)
   227dc:	1011883a 	mov	r8,r2
   227e0:	dac13c15 	stw	r11,1264(sp)
   227e4:	db012a17 	ldw	r12,1192(sp)
   227e8:	60800007 	ldb	r2,0(r12)
   227ec:	1000df26 	beq	r2,zero,22b6c <___vfprintf_internal_r+0x47c>
   227f0:	00c00944 	movi	r3,37
   227f4:	10c0dd26 	beq	r2,r3,22b6c <___vfprintf_internal_r+0x47c>
   227f8:	6021883a 	mov	r16,r12
   227fc:	00000106 	br	22804 <___vfprintf_internal_r+0x114>
   22800:	10c08426 	beq	r2,r3,22a14 <___vfprintf_internal_r+0x324>
   22804:	84000044 	addi	r16,r16,1
   22808:	80800007 	ldb	r2,0(r16)
   2280c:	103ffc1e 	bne	r2,zero,22800 <__alt_data_end+0xfffe3400>
   22810:	dac12a17 	ldw	r11,1192(sp)
   22814:	82e3c83a 	sub	r17,r16,r11
   22818:	88000f26 	beq	r17,zero,22858 <___vfprintf_internal_r+0x168>
   2281c:	d8c12017 	ldw	r3,1152(sp)
   22820:	d8811f17 	ldw	r2,1148(sp)
   22824:	dac12a17 	ldw	r11,1192(sp)
   22828:	1c47883a 	add	r3,r3,r17
   2282c:	10800044 	addi	r2,r2,1
   22830:	d8c12015 	stw	r3,1152(sp)
   22834:	42c00015 	stw	r11,0(r8)
   22838:	44400115 	stw	r17,4(r8)
   2283c:	d8811f15 	stw	r2,1148(sp)
   22840:	00c001c4 	movi	r3,7
   22844:	1880b416 	blt	r3,r2,22b18 <___vfprintf_internal_r+0x428>
   22848:	42000204 	addi	r8,r8,8
   2284c:	db012f17 	ldw	r12,1212(sp)
   22850:	6459883a 	add	r12,r12,r17
   22854:	db012f15 	stw	r12,1212(sp)
   22858:	80800007 	ldb	r2,0(r16)
   2285c:	1000b526 	beq	r2,zero,22b34 <___vfprintf_internal_r+0x444>
   22860:	80800044 	addi	r2,r16,1
   22864:	84000047 	ldb	r16,1(r16)
   22868:	d8012785 	stb	zero,1182(sp)
   2286c:	000d883a 	mov	r6,zero
   22870:	027fffc4 	movi	r9,-1
   22874:	d8012e15 	stw	zero,1208(sp)
   22878:	0023883a 	mov	r17,zero
   2287c:	01001604 	movi	r4,88
   22880:	01400244 	movi	r5,9
   22884:	02800a84 	movi	r10,42
   22888:	01c01b04 	movi	r7,108
   2288c:	10c00044 	addi	r3,r2,1
   22890:	80bff804 	addi	r2,r16,-32
   22894:	2082f236 	bltu	r4,r2,23460 <___vfprintf_internal_r+0xd70>
   22898:	100490ba 	slli	r2,r2,2
   2289c:	02c000b4 	movhi	r11,2
   228a0:	5aca2c04 	addi	r11,r11,10416
   228a4:	12c5883a 	add	r2,r2,r11
   228a8:	10800017 	ldw	r2,0(r2)
   228ac:	1000683a 	jmp	r2
   228b0:	000232a8 	cmpgeui	zero,zero,2250
   228b4:	00023460 	cmpeqi	zero,zero,2257
   228b8:	00023460 	cmpeqi	zero,zero,2257
   228bc:	000232c8 	cmpgei	zero,zero,2251
   228c0:	00023460 	cmpeqi	zero,zero,2257
   228c4:	00023460 	cmpeqi	zero,zero,2257
   228c8:	00023460 	cmpeqi	zero,zero,2257
   228cc:	00023460 	cmpeqi	zero,zero,2257
   228d0:	00023460 	cmpeqi	zero,zero,2257
   228d4:	00023460 	cmpeqi	zero,zero,2257
   228d8:	00023424 	muli	zero,zero,2256
   228dc:	00023450 	cmplti	zero,zero,2257
   228e0:	00023460 	cmpeqi	zero,zero,2257
   228e4:	00022b74 	movhi	zero,2221
   228e8:	00022b84 	movi	zero,2222
   228ec:	00023460 	cmpeqi	zero,zero,2257
   228f0:	00022bc4 	movi	zero,2223
   228f4:	000230b8 	rdprs	zero,zero,2242
   228f8:	000230b8 	rdprs	zero,zero,2242
   228fc:	000230b8 	rdprs	zero,zero,2242
   22900:	000230b8 	rdprs	zero,zero,2242
   22904:	000230b8 	rdprs	zero,zero,2242
   22908:	000230b8 	rdprs	zero,zero,2242
   2290c:	000230b8 	rdprs	zero,zero,2242
   22910:	000230b8 	rdprs	zero,zero,2242
   22914:	000230b8 	rdprs	zero,zero,2242
   22918:	00023460 	cmpeqi	zero,zero,2257
   2291c:	00023460 	cmpeqi	zero,zero,2257
   22920:	00023460 	cmpeqi	zero,zero,2257
   22924:	00023460 	cmpeqi	zero,zero,2257
   22928:	00023460 	cmpeqi	zero,zero,2257
   2292c:	00023460 	cmpeqi	zero,zero,2257
   22930:	00023460 	cmpeqi	zero,zero,2257
   22934:	00023460 	cmpeqi	zero,zero,2257
   22938:	00023460 	cmpeqi	zero,zero,2257
   2293c:	00023460 	cmpeqi	zero,zero,2257
   22940:	000230ec 	andhi	zero,zero,2243
   22944:	00022bd4 	movui	zero,2223
   22948:	00023460 	cmpeqi	zero,zero,2257
   2294c:	00022bd4 	movui	zero,2223
   22950:	00023460 	cmpeqi	zero,zero,2257
   22954:	00023460 	cmpeqi	zero,zero,2257
   22958:	00023460 	cmpeqi	zero,zero,2257
   2295c:	00023460 	cmpeqi	zero,zero,2257
   22960:	00022c78 	rdprs	zero,zero,2225
   22964:	00023460 	cmpeqi	zero,zero,2257
   22968:	00023460 	cmpeqi	zero,zero,2257
   2296c:	00022c88 	cmpgei	zero,zero,2226
   22970:	00023460 	cmpeqi	zero,zero,2257
   22974:	00023460 	cmpeqi	zero,zero,2257
   22978:	00023460 	cmpeqi	zero,zero,2257
   2297c:	00023460 	cmpeqi	zero,zero,2257
   22980:	00023460 	cmpeqi	zero,zero,2257
   22984:	00023084 	movi	zero,2242
   22988:	00023460 	cmpeqi	zero,zero,2257
   2298c:	00023460 	cmpeqi	zero,zero,2257
   22990:	00023134 	movhi	zero,2244
   22994:	00023460 	cmpeqi	zero,zero,2257
   22998:	00023460 	cmpeqi	zero,zero,2257
   2299c:	00023460 	cmpeqi	zero,zero,2257
   229a0:	00023460 	cmpeqi	zero,zero,2257
   229a4:	00023460 	cmpeqi	zero,zero,2257
   229a8:	00023460 	cmpeqi	zero,zero,2257
   229ac:	00023460 	cmpeqi	zero,zero,2257
   229b0:	00023460 	cmpeqi	zero,zero,2257
   229b4:	00023460 	cmpeqi	zero,zero,2257
   229b8:	00023460 	cmpeqi	zero,zero,2257
   229bc:	00023328 	cmpgeui	zero,zero,2252
   229c0:	000232d8 	cmpnei	zero,zero,2251
   229c4:	00022bd4 	movui	zero,2223
   229c8:	00022bd4 	movui	zero,2223
   229cc:	00022bd4 	movui	zero,2223
   229d0:	00023318 	cmpnei	zero,zero,2252
   229d4:	000232d8 	cmpnei	zero,zero,2251
   229d8:	00023460 	cmpeqi	zero,zero,2257
   229dc:	00023460 	cmpeqi	zero,zero,2257
   229e0:	00023220 	cmpeqi	zero,zero,2248
   229e4:	00023460 	cmpeqi	zero,zero,2257
   229e8:	00023234 	movhi	zero,2248
   229ec:	00023268 	cmpgeui	zero,zero,2249
   229f0:	00023368 	cmpgeui	zero,zero,2253
   229f4:	00023190 	cmplti	zero,zero,2246
   229f8:	00023460 	cmpeqi	zero,zero,2257
   229fc:	000233b0 	cmpltui	zero,zero,2254
   22a00:	00023460 	cmpeqi	zero,zero,2257
   22a04:	000231a0 	cmpeqi	zero,zero,2246
   22a08:	00023460 	cmpeqi	zero,zero,2257
   22a0c:	00023460 	cmpeqi	zero,zero,2257
   22a10:	000231e0 	cmpeqi	zero,zero,2247
   22a14:	db012a17 	ldw	r12,1192(sp)
   22a18:	8323c83a 	sub	r17,r16,r12
   22a1c:	003f7e06 	br	22818 <__alt_data_end+0xfffe3418>
   22a20:	b009883a 	mov	r4,r22
   22a24:	b80b883a 	mov	r5,r23
   22a28:	00247100 	call	24710 <__swsetup_r>
   22a2c:	10002d1e 	bne	r2,zero,22ae4 <___vfprintf_internal_r+0x3f4>
   22a30:	b8c0030b 	ldhu	r3,12(r23)
   22a34:	01000284 	movi	r4,10
   22a38:	1805883a 	mov	r2,r3
   22a3c:	1080068c 	andi	r2,r2,26
   22a40:	113f551e 	bne	r2,r4,22798 <__alt_data_end+0xfffe3398>
   22a44:	b880038b 	ldhu	r2,14(r23)
   22a48:	113fffcc 	andi	r4,r2,65535
   22a4c:	2120001c 	xori	r4,r4,32768
   22a50:	21200004 	addi	r4,r4,-32768
   22a54:	203f5016 	blt	r4,zero,22798 <__alt_data_end+0xfffe3398>
   22a58:	bac01917 	ldw	r11,100(r23)
   22a5c:	ba800717 	ldw	r10,28(r23)
   22a60:	ba400917 	ldw	r9,36(r23)
   22a64:	d9812a17 	ldw	r6,1192(sp)
   22a68:	d9c12d17 	ldw	r7,1204(sp)
   22a6c:	02010004 	movi	r8,1024
   22a70:	18ffff4c 	andi	r3,r3,65533
   22a74:	d881078d 	sth	r2,1054(sp)
   22a78:	b009883a 	mov	r4,r22
   22a7c:	d8800404 	addi	r2,sp,16
   22a80:	d9410404 	addi	r5,sp,1040
   22a84:	d8c1070d 	sth	r3,1052(sp)
   22a88:	dac11d15 	stw	r11,1140(sp)
   22a8c:	da810b15 	stw	r10,1068(sp)
   22a90:	da410d15 	stw	r9,1076(sp)
   22a94:	d8810415 	stw	r2,1040(sp)
   22a98:	d8810815 	stw	r2,1056(sp)
   22a9c:	da010615 	stw	r8,1048(sp)
   22aa0:	da010915 	stw	r8,1060(sp)
   22aa4:	d8010a15 	stw	zero,1064(sp)
   22aa8:	00226f00 	call	226f0 <___vfprintf_internal_r>
   22aac:	1021883a 	mov	r16,r2
   22ab0:	10000416 	blt	r2,zero,22ac4 <___vfprintf_internal_r+0x3d4>
   22ab4:	b009883a 	mov	r4,r22
   22ab8:	d9410404 	addi	r5,sp,1040
   22abc:	00261680 	call	26168 <_fflush_r>
   22ac0:	1006ee1e 	bne	r2,zero,2467c <___vfprintf_internal_r+0x1f8c>
   22ac4:	d881070b 	ldhu	r2,1052(sp)
   22ac8:	1080100c 	andi	r2,r2,64
   22acc:	10000326 	beq	r2,zero,22adc <___vfprintf_internal_r+0x3ec>
   22ad0:	b880030b 	ldhu	r2,12(r23)
   22ad4:	10801014 	ori	r2,r2,64
   22ad8:	b880030d 	sth	r2,12(r23)
   22adc:	8005883a 	mov	r2,r16
   22ae0:	00000106 	br	22ae8 <___vfprintf_internal_r+0x3f8>
   22ae4:	00bfffc4 	movi	r2,-1
   22ae8:	dfc14917 	ldw	ra,1316(sp)
   22aec:	df014817 	ldw	fp,1312(sp)
   22af0:	ddc14717 	ldw	r23,1308(sp)
   22af4:	dd814617 	ldw	r22,1304(sp)
   22af8:	dd414517 	ldw	r21,1300(sp)
   22afc:	dd014417 	ldw	r20,1296(sp)
   22b00:	dcc14317 	ldw	r19,1292(sp)
   22b04:	dc814217 	ldw	r18,1288(sp)
   22b08:	dc414117 	ldw	r17,1284(sp)
   22b0c:	dc014017 	ldw	r16,1280(sp)
   22b10:	dec14a04 	addi	sp,sp,1320
   22b14:	f800283a 	ret
   22b18:	b009883a 	mov	r4,r22
   22b1c:	b80b883a 	mov	r5,r23
   22b20:	d9811e04 	addi	r6,sp,1144
   22b24:	00299380 	call	29938 <__sprint_r>
   22b28:	1000081e 	bne	r2,zero,22b4c <___vfprintf_internal_r+0x45c>
   22b2c:	da000404 	addi	r8,sp,16
   22b30:	003f4606 	br	2284c <__alt_data_end+0xfffe344c>
   22b34:	d8812017 	ldw	r2,1152(sp)
   22b38:	10000426 	beq	r2,zero,22b4c <___vfprintf_internal_r+0x45c>
   22b3c:	b009883a 	mov	r4,r22
   22b40:	b80b883a 	mov	r5,r23
   22b44:	d9811e04 	addi	r6,sp,1144
   22b48:	00299380 	call	29938 <__sprint_r>
   22b4c:	b880030b 	ldhu	r2,12(r23)
   22b50:	1080100c 	andi	r2,r2,64
   22b54:	103fe31e 	bne	r2,zero,22ae4 <__alt_data_end+0xfffe36e4>
   22b58:	d8812f17 	ldw	r2,1212(sp)
   22b5c:	003fe206 	br	22ae8 <__alt_data_end+0xfffe36e8>
   22b60:	b009883a 	mov	r4,r22
   22b64:	00267100 	call	26710 <__sinit>
   22b68:	003ef906 	br	22750 <__alt_data_end+0xfffe3350>
   22b6c:	dc012a17 	ldw	r16,1192(sp)
   22b70:	003f3906 	br	22858 <__alt_data_end+0xfffe3458>
   22b74:	1805883a 	mov	r2,r3
   22b78:	8c400114 	ori	r17,r17,4
   22b7c:	1c000007 	ldb	r16,0(r3)
   22b80:	003f4206 	br	2288c <__alt_data_end+0xfffe348c>
   22b84:	1c000007 	ldb	r16,0(r3)
   22b88:	18800044 	addi	r2,r3,1
   22b8c:	8286b326 	beq	r16,r10,2465c <___vfprintf_internal_r+0x1f6c>
   22b90:	82fff404 	addi	r11,r16,-48
   22b94:	1007883a 	mov	r3,r2
   22b98:	0013883a 	mov	r9,zero
   22b9c:	2aff3c36 	bltu	r5,r11,22890 <__alt_data_end+0xfffe3490>
   22ba0:	1c000007 	ldb	r16,0(r3)
   22ba4:	4a4002a4 	muli	r9,r9,10
   22ba8:	18c00044 	addi	r3,r3,1
   22bac:	5a53883a 	add	r9,r11,r9
   22bb0:	82fff404 	addi	r11,r16,-48
   22bb4:	2afffa2e 	bgeu	r5,r11,22ba0 <__alt_data_end+0xfffe37a0>
   22bb8:	483f350e 	bge	r9,zero,22890 <__alt_data_end+0xfffe3490>
   22bbc:	027fffc4 	movi	r9,-1
   22bc0:	003f3306 	br	22890 <__alt_data_end+0xfffe3490>
   22bc4:	8c402014 	ori	r17,r17,128
   22bc8:	1805883a 	mov	r2,r3
   22bcc:	1c000007 	ldb	r16,0(r3)
   22bd0:	003f2e06 	br	2288c <__alt_data_end+0xfffe348c>
   22bd4:	db012d17 	ldw	r12,1204(sp)
   22bd8:	dac12d17 	ldw	r11,1204(sp)
   22bdc:	d8c12a15 	stw	r3,1192(sp)
   22be0:	63000017 	ldw	r12,0(r12)
   22be4:	5ac00117 	ldw	r11,4(r11)
   22be8:	d9812785 	stb	r6,1182(sp)
   22bec:	6009883a 	mov	r4,r12
   22bf0:	580b883a 	mov	r5,r11
   22bf4:	db013715 	stw	r12,1244(sp)
   22bf8:	da013f15 	stw	r8,1276(sp)
   22bfc:	da413e15 	stw	r9,1272(sp)
   22c00:	dac13915 	stw	r11,1252(sp)
   22c04:	00295940 	call	29594 <__fpclassifyd>
   22c08:	db012d17 	ldw	r12,1204(sp)
   22c0c:	04800044 	movi	r18,1
   22c10:	da013f17 	ldw	r8,1276(sp)
   22c14:	64c00204 	addi	r19,r12,8
   22c18:	da413e17 	ldw	r9,1272(sp)
   22c1c:	d9013717 	ldw	r4,1244(sp)
   22c20:	d9413917 	ldw	r5,1252(sp)
   22c24:	1484581e 	bne	r2,r18,23d88 <___vfprintf_internal_r+0x1698>
   22c28:	000d883a 	mov	r6,zero
   22c2c:	000f883a 	mov	r7,zero
   22c30:	002cb580 	call	2cb58 <__ledf2>
   22c34:	da013f17 	ldw	r8,1276(sp)
   22c38:	1005ef16 	blt	r2,zero,243f8 <___vfprintf_internal_r+0x1d08>
   22c3c:	dd412783 	ldbu	r21,1182(sp)
   22c40:	008011c4 	movi	r2,71
   22c44:	14053b0e 	bge	r2,r16,24134 <___vfprintf_internal_r+0x1a44>
   22c48:	00c000f4 	movhi	r3,3
   22c4c:	18ff9a04 	addi	r3,r3,-408
   22c50:	d8c13115 	stw	r3,1220(sp)
   22c54:	02c000c4 	movi	r11,3
   22c58:	00bfdfc4 	movi	r2,-129
   22c5c:	dac12b15 	stw	r11,1196(sp)
   22c60:	88a2703a 	and	r17,r17,r2
   22c64:	dcc12d15 	stw	r19,1204(sp)
   22c68:	5825883a 	mov	r18,r11
   22c6c:	d8013215 	stw	zero,1224(sp)
   22c70:	d8013415 	stw	zero,1232(sp)
   22c74:	00003206 	br	22d40 <___vfprintf_internal_r+0x650>
   22c78:	8c400214 	ori	r17,r17,8
   22c7c:	1805883a 	mov	r2,r3
   22c80:	1c000007 	ldb	r16,0(r3)
   22c84:	003f0106 	br	2288c <__alt_data_end+0xfffe348c>
   22c88:	8c400414 	ori	r17,r17,16
   22c8c:	d8c12a15 	stw	r3,1192(sp)
   22c90:	88c0080c 	andi	r3,r17,32
   22c94:	d8812d17 	ldw	r2,1204(sp)
   22c98:	18017726 	beq	r3,zero,23278 <___vfprintf_internal_r+0xb88>
   22c9c:	db012d17 	ldw	r12,1204(sp)
   22ca0:	14c00017 	ldw	r19,0(r2)
   22ca4:	17000117 	ldw	fp,4(r2)
   22ca8:	63000204 	addi	r12,r12,8
   22cac:	db012d15 	stw	r12,1204(sp)
   22cb0:	0005883a 	mov	r2,zero
   22cb4:	9f06b03a 	or	r3,r19,fp
   22cb8:	d8012785 	stb	zero,1182(sp)
   22cbc:	da413215 	stw	r9,1224(sp)
   22cc0:	002b883a 	mov	r21,zero
   22cc4:	48000216 	blt	r9,zero,22cd0 <___vfprintf_internal_r+0x5e0>
   22cc8:	013fdfc4 	movi	r4,-129
   22ccc:	8922703a 	and	r17,r17,r4
   22cd0:	1801ed1e 	bne	r3,zero,23488 <___vfprintf_internal_r+0xd98>
   22cd4:	4802e026 	beq	r9,zero,23858 <___vfprintf_internal_r+0x1168>
   22cd8:	10803fcc 	andi	r2,r2,255
   22cdc:	00c00044 	movi	r3,1
   22ce0:	10c20f26 	beq	r2,r3,23520 <___vfprintf_internal_r+0xe30>
   22ce4:	00c00084 	movi	r3,2
   22ce8:	10c2fd26 	beq	r2,r3,238e0 <___vfprintf_internal_r+0x11f0>
   22cec:	d8c10e04 	addi	r3,sp,1080
   22cf0:	9808d0fa 	srli	r4,r19,3
   22cf4:	e00a977a 	slli	r5,fp,29
   22cf8:	e038d0fa 	srli	fp,fp,3
   22cfc:	9cc001cc 	andi	r19,r19,7
   22d00:	98800c04 	addi	r2,r19,48
   22d04:	18ffffc4 	addi	r3,r3,-1
   22d08:	2926b03a 	or	r19,r5,r4
   22d0c:	18800005 	stb	r2,0(r3)
   22d10:	9f08b03a 	or	r4,r19,fp
   22d14:	203ff61e 	bne	r4,zero,22cf0 <__alt_data_end+0xfffe38f0>
   22d18:	8900004c 	andi	r4,r17,1
   22d1c:	d8c13115 	stw	r3,1220(sp)
   22d20:	2003791e 	bne	r4,zero,23b08 <___vfprintf_internal_r+0x1418>
   22d24:	dac12817 	ldw	r11,1184(sp)
   22d28:	58e5c83a 	sub	r18,r11,r3
   22d2c:	9005883a 	mov	r2,r18
   22d30:	9240010e 	bge	r18,r9,22d38 <___vfprintf_internal_r+0x648>
   22d34:	4805883a 	mov	r2,r9
   22d38:	d8812b15 	stw	r2,1196(sp)
   22d3c:	d8013415 	stw	zero,1232(sp)
   22d40:	a8803fcc 	andi	r2,r21,255
   22d44:	1080201c 	xori	r2,r2,128
   22d48:	10bfe004 	addi	r2,r2,-128
   22d4c:	10000326 	beq	r2,zero,22d5c <___vfprintf_internal_r+0x66c>
   22d50:	db012b17 	ldw	r12,1196(sp)
   22d54:	63000044 	addi	r12,r12,1
   22d58:	db012b15 	stw	r12,1196(sp)
   22d5c:	88c0008c 	andi	r3,r17,2
   22d60:	d8c12c15 	stw	r3,1200(sp)
   22d64:	18000326 	beq	r3,zero,22d74 <___vfprintf_internal_r+0x684>
   22d68:	dac12b17 	ldw	r11,1196(sp)
   22d6c:	5ac00084 	addi	r11,r11,2
   22d70:	dac12b15 	stw	r11,1196(sp)
   22d74:	8b00210c 	andi	r12,r17,132
   22d78:	db013015 	stw	r12,1216(sp)
   22d7c:	6001c01e 	bne	r12,zero,23480 <___vfprintf_internal_r+0xd90>
   22d80:	dac12e17 	ldw	r11,1208(sp)
   22d84:	db012b17 	ldw	r12,1196(sp)
   22d88:	5b39c83a 	sub	fp,r11,r12
   22d8c:	0701bc0e 	bge	zero,fp,23480 <___vfprintf_internal_r+0xd90>
   22d90:	02400404 	movi	r9,16
   22d94:	d8c12017 	ldw	r3,1152(sp)
   22d98:	d8811f17 	ldw	r2,1148(sp)
   22d9c:	4f05220e 	bge	r9,fp,24228 <___vfprintf_internal_r+0x1b38>
   22da0:	014000f4 	movhi	r5,3
   22da4:	297fad84 	addi	r5,r5,-330
   22da8:	d9413615 	stw	r5,1240(sp)
   22dac:	482b883a 	mov	r21,r9
   22db0:	04c001c4 	movi	r19,7
   22db4:	00000306 	br	22dc4 <___vfprintf_internal_r+0x6d4>
   22db8:	e73ffc04 	addi	fp,fp,-16
   22dbc:	42000204 	addi	r8,r8,8
   22dc0:	af00130e 	bge	r21,fp,22e10 <___vfprintf_internal_r+0x720>
   22dc4:	02c000f4 	movhi	r11,3
   22dc8:	18c00404 	addi	r3,r3,16
   22dcc:	10800044 	addi	r2,r2,1
   22dd0:	5affad84 	addi	r11,r11,-330
   22dd4:	42c00015 	stw	r11,0(r8)
   22dd8:	45400115 	stw	r21,4(r8)
   22ddc:	d8c12015 	stw	r3,1152(sp)
   22de0:	d8811f15 	stw	r2,1148(sp)
   22de4:	98bff40e 	bge	r19,r2,22db8 <__alt_data_end+0xfffe39b8>
   22de8:	b009883a 	mov	r4,r22
   22dec:	b80b883a 	mov	r5,r23
   22df0:	d9811e04 	addi	r6,sp,1144
   22df4:	00299380 	call	29938 <__sprint_r>
   22df8:	103f541e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   22dfc:	e73ffc04 	addi	fp,fp,-16
   22e00:	d8c12017 	ldw	r3,1152(sp)
   22e04:	d8811f17 	ldw	r2,1148(sp)
   22e08:	da000404 	addi	r8,sp,16
   22e0c:	af3fed16 	blt	r21,fp,22dc4 <__alt_data_end+0xfffe39c4>
   22e10:	db013617 	ldw	r12,1240(sp)
   22e14:	e0c7883a 	add	r3,fp,r3
   22e18:	10800044 	addi	r2,r2,1
   22e1c:	43000015 	stw	r12,0(r8)
   22e20:	47000115 	stw	fp,4(r8)
   22e24:	d8c12015 	stw	r3,1152(sp)
   22e28:	d8811f15 	stw	r2,1148(sp)
   22e2c:	010001c4 	movi	r4,7
   22e30:	2082f416 	blt	r4,r2,23a04 <___vfprintf_internal_r+0x1314>
   22e34:	d8812787 	ldb	r2,1182(sp)
   22e38:	42000204 	addi	r8,r8,8
   22e3c:	10000c26 	beq	r2,zero,22e70 <___vfprintf_internal_r+0x780>
   22e40:	d8811f17 	ldw	r2,1148(sp)
   22e44:	d9012784 	addi	r4,sp,1182
   22e48:	18c00044 	addi	r3,r3,1
   22e4c:	10800044 	addi	r2,r2,1
   22e50:	41000015 	stw	r4,0(r8)
   22e54:	01000044 	movi	r4,1
   22e58:	41000115 	stw	r4,4(r8)
   22e5c:	d8c12015 	stw	r3,1152(sp)
   22e60:	d8811f15 	stw	r2,1148(sp)
   22e64:	010001c4 	movi	r4,7
   22e68:	20828d16 	blt	r4,r2,238a0 <___vfprintf_internal_r+0x11b0>
   22e6c:	42000204 	addi	r8,r8,8
   22e70:	dac12c17 	ldw	r11,1200(sp)
   22e74:	58000c26 	beq	r11,zero,22ea8 <___vfprintf_internal_r+0x7b8>
   22e78:	d8811f17 	ldw	r2,1148(sp)
   22e7c:	d9012704 	addi	r4,sp,1180
   22e80:	18c00084 	addi	r3,r3,2
   22e84:	10800044 	addi	r2,r2,1
   22e88:	41000015 	stw	r4,0(r8)
   22e8c:	01000084 	movi	r4,2
   22e90:	41000115 	stw	r4,4(r8)
   22e94:	d8c12015 	stw	r3,1152(sp)
   22e98:	d8811f15 	stw	r2,1148(sp)
   22e9c:	010001c4 	movi	r4,7
   22ea0:	20828716 	blt	r4,r2,238c0 <___vfprintf_internal_r+0x11d0>
   22ea4:	42000204 	addi	r8,r8,8
   22ea8:	db013017 	ldw	r12,1216(sp)
   22eac:	00802004 	movi	r2,128
   22eb0:	6081e926 	beq	r12,r2,23658 <___vfprintf_internal_r+0xf68>
   22eb4:	db013217 	ldw	r12,1224(sp)
   22eb8:	64abc83a 	sub	r21,r12,r18
   22ebc:	0540260e 	bge	zero,r21,22f58 <___vfprintf_internal_r+0x868>
   22ec0:	07000404 	movi	fp,16
   22ec4:	d8811f17 	ldw	r2,1148(sp)
   22ec8:	e5443d0e 	bge	fp,r21,23fc0 <___vfprintf_internal_r+0x18d0>
   22ecc:	014000f4 	movhi	r5,3
   22ed0:	297fa984 	addi	r5,r5,-346
   22ed4:	d9412c15 	stw	r5,1200(sp)
   22ed8:	04c001c4 	movi	r19,7
   22edc:	00000306 	br	22eec <___vfprintf_internal_r+0x7fc>
   22ee0:	ad7ffc04 	addi	r21,r21,-16
   22ee4:	42000204 	addi	r8,r8,8
   22ee8:	e540110e 	bge	fp,r21,22f30 <___vfprintf_internal_r+0x840>
   22eec:	18c00404 	addi	r3,r3,16
   22ef0:	10800044 	addi	r2,r2,1
   22ef4:	45000015 	stw	r20,0(r8)
   22ef8:	47000115 	stw	fp,4(r8)
   22efc:	d8c12015 	stw	r3,1152(sp)
   22f00:	d8811f15 	stw	r2,1148(sp)
   22f04:	98bff60e 	bge	r19,r2,22ee0 <__alt_data_end+0xfffe3ae0>
   22f08:	b009883a 	mov	r4,r22
   22f0c:	b80b883a 	mov	r5,r23
   22f10:	d9811e04 	addi	r6,sp,1144
   22f14:	00299380 	call	29938 <__sprint_r>
   22f18:	103f0c1e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   22f1c:	ad7ffc04 	addi	r21,r21,-16
   22f20:	d8c12017 	ldw	r3,1152(sp)
   22f24:	d8811f17 	ldw	r2,1148(sp)
   22f28:	da000404 	addi	r8,sp,16
   22f2c:	e57fef16 	blt	fp,r21,22eec <__alt_data_end+0xfffe3aec>
   22f30:	dac12c17 	ldw	r11,1200(sp)
   22f34:	1d47883a 	add	r3,r3,r21
   22f38:	10800044 	addi	r2,r2,1
   22f3c:	42c00015 	stw	r11,0(r8)
   22f40:	45400115 	stw	r21,4(r8)
   22f44:	d8c12015 	stw	r3,1152(sp)
   22f48:	d8811f15 	stw	r2,1148(sp)
   22f4c:	010001c4 	movi	r4,7
   22f50:	20824b16 	blt	r4,r2,23880 <___vfprintf_internal_r+0x1190>
   22f54:	42000204 	addi	r8,r8,8
   22f58:	8880400c 	andi	r2,r17,256
   22f5c:	1001761e 	bne	r2,zero,23538 <___vfprintf_internal_r+0xe48>
   22f60:	d8811f17 	ldw	r2,1148(sp)
   22f64:	db013117 	ldw	r12,1220(sp)
   22f68:	1c87883a 	add	r3,r3,r18
   22f6c:	10800044 	addi	r2,r2,1
   22f70:	43000015 	stw	r12,0(r8)
   22f74:	44800115 	stw	r18,4(r8)
   22f78:	d8c12015 	stw	r3,1152(sp)
   22f7c:	d8811f15 	stw	r2,1148(sp)
   22f80:	010001c4 	movi	r4,7
   22f84:	20822616 	blt	r4,r2,23820 <___vfprintf_internal_r+0x1130>
   22f88:	42000204 	addi	r8,r8,8
   22f8c:	8c40010c 	andi	r17,r17,4
   22f90:	88003126 	beq	r17,zero,23058 <___vfprintf_internal_r+0x968>
   22f94:	db012e17 	ldw	r12,1208(sp)
   22f98:	dac12b17 	ldw	r11,1196(sp)
   22f9c:	62e1c83a 	sub	r16,r12,r11
   22fa0:	04002d0e 	bge	zero,r16,23058 <___vfprintf_internal_r+0x968>
   22fa4:	04400404 	movi	r17,16
   22fa8:	d8811f17 	ldw	r2,1148(sp)
   22fac:	8c04df0e 	bge	r17,r16,2432c <___vfprintf_internal_r+0x1c3c>
   22fb0:	010000f4 	movhi	r4,3
   22fb4:	213fad84 	addi	r4,r4,-330
   22fb8:	d9013615 	stw	r4,1240(sp)
   22fbc:	048001c4 	movi	r18,7
   22fc0:	00000306 	br	22fd0 <___vfprintf_internal_r+0x8e0>
   22fc4:	843ffc04 	addi	r16,r16,-16
   22fc8:	42000204 	addi	r8,r8,8
   22fcc:	8c00130e 	bge	r17,r16,2301c <___vfprintf_internal_r+0x92c>
   22fd0:	014000f4 	movhi	r5,3
   22fd4:	18c00404 	addi	r3,r3,16
   22fd8:	10800044 	addi	r2,r2,1
   22fdc:	297fad84 	addi	r5,r5,-330
   22fe0:	41400015 	stw	r5,0(r8)
   22fe4:	44400115 	stw	r17,4(r8)
   22fe8:	d8c12015 	stw	r3,1152(sp)
   22fec:	d8811f15 	stw	r2,1148(sp)
   22ff0:	90bff40e 	bge	r18,r2,22fc4 <__alt_data_end+0xfffe3bc4>
   22ff4:	b009883a 	mov	r4,r22
   22ff8:	b80b883a 	mov	r5,r23
   22ffc:	d9811e04 	addi	r6,sp,1144
   23000:	00299380 	call	29938 <__sprint_r>
   23004:	103ed11e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   23008:	843ffc04 	addi	r16,r16,-16
   2300c:	d8c12017 	ldw	r3,1152(sp)
   23010:	d8811f17 	ldw	r2,1148(sp)
   23014:	da000404 	addi	r8,sp,16
   23018:	8c3fed16 	blt	r17,r16,22fd0 <__alt_data_end+0xfffe3bd0>
   2301c:	dac13617 	ldw	r11,1240(sp)
   23020:	1c07883a 	add	r3,r3,r16
   23024:	10800044 	addi	r2,r2,1
   23028:	42c00015 	stw	r11,0(r8)
   2302c:	44000115 	stw	r16,4(r8)
   23030:	d8c12015 	stw	r3,1152(sp)
   23034:	d8811f15 	stw	r2,1148(sp)
   23038:	010001c4 	movi	r4,7
   2303c:	2080060e 	bge	r4,r2,23058 <___vfprintf_internal_r+0x968>
   23040:	b009883a 	mov	r4,r22
   23044:	b80b883a 	mov	r5,r23
   23048:	d9811e04 	addi	r6,sp,1144
   2304c:	00299380 	call	29938 <__sprint_r>
   23050:	103ebe1e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   23054:	d8c12017 	ldw	r3,1152(sp)
   23058:	d8812b17 	ldw	r2,1196(sp)
   2305c:	db012e17 	ldw	r12,1208(sp)
   23060:	1300010e 	bge	r2,r12,23068 <___vfprintf_internal_r+0x978>
   23064:	6005883a 	mov	r2,r12
   23068:	dac12f17 	ldw	r11,1212(sp)
   2306c:	5897883a 	add	r11,r11,r2
   23070:	dac12f15 	stw	r11,1212(sp)
   23074:	1801f21e 	bne	r3,zero,23840 <___vfprintf_internal_r+0x1150>
   23078:	d8011f15 	stw	zero,1148(sp)
   2307c:	da000404 	addi	r8,sp,16
   23080:	003dd806 	br	227e4 <__alt_data_end+0xfffe33e4>
   23084:	8c400414 	ori	r17,r17,16
   23088:	d8c12a15 	stw	r3,1192(sp)
   2308c:	88c0080c 	andi	r3,r17,32
   23090:	d8812d17 	ldw	r2,1204(sp)
   23094:	18004626 	beq	r3,zero,231b0 <___vfprintf_internal_r+0xac0>
   23098:	dac12d17 	ldw	r11,1204(sp)
   2309c:	14c00017 	ldw	r19,0(r2)
   230a0:	17000117 	ldw	fp,4(r2)
   230a4:	5ac00204 	addi	r11,r11,8
   230a8:	dac12d15 	stw	r11,1204(sp)
   230ac:	00800044 	movi	r2,1
   230b0:	9f06b03a 	or	r3,r19,fp
   230b4:	003f0006 	br	22cb8 <__alt_data_end+0xfffe38b8>
   230b8:	1805883a 	mov	r2,r3
   230bc:	d8012e15 	stw	zero,1208(sp)
   230c0:	82fff404 	addi	r11,r16,-48
   230c4:	0019883a 	mov	r12,zero
   230c8:	14000007 	ldb	r16,0(r2)
   230cc:	630002a4 	muli	r12,r12,10
   230d0:	18c00044 	addi	r3,r3,1
   230d4:	1805883a 	mov	r2,r3
   230d8:	62d9883a 	add	r12,r12,r11
   230dc:	82fff404 	addi	r11,r16,-48
   230e0:	2afff92e 	bgeu	r5,r11,230c8 <__alt_data_end+0xfffe3cc8>
   230e4:	db012e15 	stw	r12,1208(sp)
   230e8:	003de906 	br	22890 <__alt_data_end+0xfffe3490>
   230ec:	8c400414 	ori	r17,r17,16
   230f0:	d8c12a15 	stw	r3,1192(sp)
   230f4:	d9812785 	stb	r6,1182(sp)
   230f8:	8880080c 	andi	r2,r17,32
   230fc:	d8c12d17 	ldw	r3,1204(sp)
   23100:	10007a26 	beq	r2,zero,232ec <___vfprintf_internal_r+0xbfc>
   23104:	db012d17 	ldw	r12,1204(sp)
   23108:	18800117 	ldw	r2,4(r3)
   2310c:	1cc00017 	ldw	r19,0(r3)
   23110:	63000204 	addi	r12,r12,8
   23114:	db012d15 	stw	r12,1204(sp)
   23118:	1039883a 	mov	fp,r2
   2311c:	10031016 	blt	r2,zero,23d60 <___vfprintf_internal_r+0x1670>
   23120:	dd412783 	ldbu	r21,1182(sp)
   23124:	da413215 	stw	r9,1224(sp)
   23128:	00800044 	movi	r2,1
   2312c:	9f06b03a 	or	r3,r19,fp
   23130:	003ee406 	br	22cc4 <__alt_data_end+0xfffe38c4>
   23134:	030000f4 	movhi	r12,3
   23138:	633f9d04 	addi	r12,r12,-396
   2313c:	d8c12a15 	stw	r3,1192(sp)
   23140:	d9812785 	stb	r6,1182(sp)
   23144:	db013b15 	stw	r12,1260(sp)
   23148:	88c0080c 	andi	r3,r17,32
   2314c:	d8812d17 	ldw	r2,1204(sp)
   23150:	18002b26 	beq	r3,zero,23200 <___vfprintf_internal_r+0xb10>
   23154:	dac12d17 	ldw	r11,1204(sp)
   23158:	14c00017 	ldw	r19,0(r2)
   2315c:	17000117 	ldw	fp,4(r2)
   23160:	5ac00204 	addi	r11,r11,8
   23164:	dac12d15 	stw	r11,1204(sp)
   23168:	8880004c 	andi	r2,r17,1
   2316c:	10025b26 	beq	r2,zero,23adc <___vfprintf_internal_r+0x13ec>
   23170:	9f06b03a 	or	r3,r19,fp
   23174:	18037026 	beq	r3,zero,23f38 <___vfprintf_internal_r+0x1848>
   23178:	00800c04 	movi	r2,48
   2317c:	d8812705 	stb	r2,1180(sp)
   23180:	dc012745 	stb	r16,1181(sp)
   23184:	8c400094 	ori	r17,r17,2
   23188:	00800084 	movi	r2,2
   2318c:	003eca06 	br	22cb8 <__alt_data_end+0xfffe38b8>
   23190:	8c400814 	ori	r17,r17,32
   23194:	1805883a 	mov	r2,r3
   23198:	1c000007 	ldb	r16,0(r3)
   2319c:	003dbb06 	br	2288c <__alt_data_end+0xfffe348c>
   231a0:	d8c12a15 	stw	r3,1192(sp)
   231a4:	88c0080c 	andi	r3,r17,32
   231a8:	d8812d17 	ldw	r2,1204(sp)
   231ac:	183fba1e 	bne	r3,zero,23098 <__alt_data_end+0xfffe3c98>
   231b0:	88c0040c 	andi	r3,r17,16
   231b4:	18024c1e 	bne	r3,zero,23ae8 <___vfprintf_internal_r+0x13f8>
   231b8:	88c0100c 	andi	r3,r17,64
   231bc:	18024a26 	beq	r3,zero,23ae8 <___vfprintf_internal_r+0x13f8>
   231c0:	dac12d17 	ldw	r11,1204(sp)
   231c4:	14c0000b 	ldhu	r19,0(r2)
   231c8:	0039883a 	mov	fp,zero
   231cc:	5ac00104 	addi	r11,r11,4
   231d0:	dac12d15 	stw	r11,1204(sp)
   231d4:	00800044 	movi	r2,1
   231d8:	9807883a 	mov	r3,r19
   231dc:	003eb606 	br	22cb8 <__alt_data_end+0xfffe38b8>
   231e0:	008000f4 	movhi	r2,3
   231e4:	10bfa204 	addi	r2,r2,-376
   231e8:	d8c12a15 	stw	r3,1192(sp)
   231ec:	d8813b15 	stw	r2,1260(sp)
   231f0:	d9812785 	stb	r6,1182(sp)
   231f4:	88c0080c 	andi	r3,r17,32
   231f8:	d8812d17 	ldw	r2,1204(sp)
   231fc:	183fd51e 	bne	r3,zero,23154 <__alt_data_end+0xfffe3d54>
   23200:	88c0040c 	andi	r3,r17,16
   23204:	18034126 	beq	r3,zero,23f0c <___vfprintf_internal_r+0x181c>
   23208:	db012d17 	ldw	r12,1204(sp)
   2320c:	14c00017 	ldw	r19,0(r2)
   23210:	0039883a 	mov	fp,zero
   23214:	63000104 	addi	r12,r12,4
   23218:	db012d15 	stw	r12,1204(sp)
   2321c:	003fd206 	br	23168 <__alt_data_end+0xfffe3d68>
   23220:	1c000007 	ldb	r16,0(r3)
   23224:	81c3d626 	beq	r16,r7,24180 <___vfprintf_internal_r+0x1a90>
   23228:	8c400414 	ori	r17,r17,16
   2322c:	1805883a 	mov	r2,r3
   23230:	003d9606 	br	2288c <__alt_data_end+0xfffe348c>
   23234:	d8c12a15 	stw	r3,1192(sp)
   23238:	d9812785 	stb	r6,1182(sp)
   2323c:	8880080c 	andi	r2,r17,32
   23240:	10033f26 	beq	r2,zero,23f40 <___vfprintf_internal_r+0x1850>
   23244:	db012d17 	ldw	r12,1204(sp)
   23248:	dac12f17 	ldw	r11,1212(sp)
   2324c:	60800017 	ldw	r2,0(r12)
   23250:	5807d7fa 	srai	r3,r11,31
   23254:	63000104 	addi	r12,r12,4
   23258:	db012d15 	stw	r12,1204(sp)
   2325c:	12c00015 	stw	r11,0(r2)
   23260:	10c00115 	stw	r3,4(r2)
   23264:	003d5f06 	br	227e4 <__alt_data_end+0xfffe33e4>
   23268:	d8c12a15 	stw	r3,1192(sp)
   2326c:	88c0080c 	andi	r3,r17,32
   23270:	d8812d17 	ldw	r2,1204(sp)
   23274:	183e891e 	bne	r3,zero,22c9c <__alt_data_end+0xfffe389c>
   23278:	88c0040c 	andi	r3,r17,16
   2327c:	1801ea1e 	bne	r3,zero,23a28 <___vfprintf_internal_r+0x1338>
   23280:	88c0100c 	andi	r3,r17,64
   23284:	1801e826 	beq	r3,zero,23a28 <___vfprintf_internal_r+0x1338>
   23288:	db012d17 	ldw	r12,1204(sp)
   2328c:	14c0000b 	ldhu	r19,0(r2)
   23290:	0039883a 	mov	fp,zero
   23294:	63000104 	addi	r12,r12,4
   23298:	db012d15 	stw	r12,1204(sp)
   2329c:	0005883a 	mov	r2,zero
   232a0:	9807883a 	mov	r3,r19
   232a4:	003e8406 	br	22cb8 <__alt_data_end+0xfffe38b8>
   232a8:	30803fcc 	andi	r2,r6,255
   232ac:	1080201c 	xori	r2,r2,128
   232b0:	10bfe004 	addi	r2,r2,-128
   232b4:	10031d1e 	bne	r2,zero,23f2c <___vfprintf_internal_r+0x183c>
   232b8:	1805883a 	mov	r2,r3
   232bc:	01800804 	movi	r6,32
   232c0:	1c000007 	ldb	r16,0(r3)
   232c4:	003d7106 	br	2288c <__alt_data_end+0xfffe348c>
   232c8:	8c400054 	ori	r17,r17,1
   232cc:	1805883a 	mov	r2,r3
   232d0:	1c000007 	ldb	r16,0(r3)
   232d4:	003d6d06 	br	2288c <__alt_data_end+0xfffe348c>
   232d8:	d8c12a15 	stw	r3,1192(sp)
   232dc:	d9812785 	stb	r6,1182(sp)
   232e0:	8880080c 	andi	r2,r17,32
   232e4:	d8c12d17 	ldw	r3,1204(sp)
   232e8:	103f861e 	bne	r2,zero,23104 <__alt_data_end+0xfffe3d04>
   232ec:	8880040c 	andi	r2,r17,16
   232f0:	1001f31e 	bne	r2,zero,23ac0 <___vfprintf_internal_r+0x13d0>
   232f4:	8880100c 	andi	r2,r17,64
   232f8:	1001f126 	beq	r2,zero,23ac0 <___vfprintf_internal_r+0x13d0>
   232fc:	1cc0000f 	ldh	r19,0(r3)
   23300:	db012d17 	ldw	r12,1204(sp)
   23304:	9839d7fa 	srai	fp,r19,31
   23308:	63000104 	addi	r12,r12,4
   2330c:	db012d15 	stw	r12,1204(sp)
   23310:	e005883a 	mov	r2,fp
   23314:	003f8106 	br	2311c <__alt_data_end+0xfffe3d1c>
   23318:	8c401014 	ori	r17,r17,64
   2331c:	1805883a 	mov	r2,r3
   23320:	1c000007 	ldb	r16,0(r3)
   23324:	003d5906 	br	2288c <__alt_data_end+0xfffe348c>
   23328:	db012d17 	ldw	r12,1204(sp)
   2332c:	d8c12a15 	stw	r3,1192(sp)
   23330:	00c00044 	movi	r3,1
   23334:	60800017 	ldw	r2,0(r12)
   23338:	63000104 	addi	r12,r12,4
   2333c:	d8c12b15 	stw	r3,1196(sp)
   23340:	d8012785 	stb	zero,1182(sp)
   23344:	d8810405 	stb	r2,1040(sp)
   23348:	db012d15 	stw	r12,1204(sp)
   2334c:	dac10404 	addi	r11,sp,1040
   23350:	1825883a 	mov	r18,r3
   23354:	d8013215 	stw	zero,1224(sp)
   23358:	d8013415 	stw	zero,1232(sp)
   2335c:	dac13115 	stw	r11,1220(sp)
   23360:	0005883a 	mov	r2,zero
   23364:	003e7d06 	br	22d5c <__alt_data_end+0xfffe395c>
   23368:	db012d17 	ldw	r12,1204(sp)
   2336c:	00800c04 	movi	r2,48
   23370:	d8812705 	stb	r2,1180(sp)
   23374:	64c00017 	ldw	r19,0(r12)
   23378:	00801e04 	movi	r2,120
   2337c:	d8812745 	stb	r2,1181(sp)
   23380:	008000f4 	movhi	r2,3
   23384:	10bfa204 	addi	r2,r2,-376
   23388:	63000104 	addi	r12,r12,4
   2338c:	d8c12a15 	stw	r3,1192(sp)
   23390:	d8813b15 	stw	r2,1260(sp)
   23394:	0039883a 	mov	fp,zero
   23398:	8c400094 	ori	r17,r17,2
   2339c:	db012d15 	stw	r12,1204(sp)
   233a0:	00800084 	movi	r2,2
   233a4:	04001e04 	movi	r16,120
   233a8:	9807883a 	mov	r3,r19
   233ac:	003e4206 	br	22cb8 <__alt_data_end+0xfffe38b8>
   233b0:	dac12d17 	ldw	r11,1204(sp)
   233b4:	db012d17 	ldw	r12,1204(sp)
   233b8:	d8c12a15 	stw	r3,1192(sp)
   233bc:	5ac00017 	ldw	r11,0(r11)
   233c0:	d8012785 	stb	zero,1182(sp)
   233c4:	64c00104 	addi	r19,r12,4
   233c8:	dac13115 	stw	r11,1220(sp)
   233cc:	5803e826 	beq	r11,zero,24370 <___vfprintf_internal_r+0x1c80>
   233d0:	d9013117 	ldw	r4,1220(sp)
   233d4:	48037a16 	blt	r9,zero,241c0 <___vfprintf_internal_r+0x1ad0>
   233d8:	480d883a 	mov	r6,r9
   233dc:	000b883a 	mov	r5,zero
   233e0:	da013f15 	stw	r8,1276(sp)
   233e4:	da413e15 	stw	r9,1272(sp)
   233e8:	0027bc80 	call	27bc8 <memchr>
   233ec:	da013f17 	ldw	r8,1276(sp)
   233f0:	da413e17 	ldw	r9,1272(sp)
   233f4:	10044426 	beq	r2,zero,24508 <___vfprintf_internal_r+0x1e18>
   233f8:	d8c13117 	ldw	r3,1220(sp)
   233fc:	10e5c83a 	sub	r18,r2,r3
   23400:	4c834416 	blt	r9,r18,24114 <___vfprintf_internal_r+0x1a24>
   23404:	9005883a 	mov	r2,r18
   23408:	90037216 	blt	r18,zero,241d4 <___vfprintf_internal_r+0x1ae4>
   2340c:	dd412783 	ldbu	r21,1182(sp)
   23410:	d8812b15 	stw	r2,1196(sp)
   23414:	dcc12d15 	stw	r19,1204(sp)
   23418:	d8013215 	stw	zero,1224(sp)
   2341c:	d8013415 	stw	zero,1232(sp)
   23420:	003e4706 	br	22d40 <__alt_data_end+0xfffe3940>
   23424:	dac12d17 	ldw	r11,1204(sp)
   23428:	db012d17 	ldw	r12,1204(sp)
   2342c:	5ac00017 	ldw	r11,0(r11)
   23430:	dac12e15 	stw	r11,1208(sp)
   23434:	62c00104 	addi	r11,r12,4
   23438:	db012e17 	ldw	r12,1208(sp)
   2343c:	60034a16 	blt	r12,zero,24168 <___vfprintf_internal_r+0x1a78>
   23440:	dac12d15 	stw	r11,1204(sp)
   23444:	1805883a 	mov	r2,r3
   23448:	1c000007 	ldb	r16,0(r3)
   2344c:	003d0f06 	br	2288c <__alt_data_end+0xfffe348c>
   23450:	1805883a 	mov	r2,r3
   23454:	01800ac4 	movi	r6,43
   23458:	1c000007 	ldb	r16,0(r3)
   2345c:	003d0b06 	br	2288c <__alt_data_end+0xfffe348c>
   23460:	d8c12a15 	stw	r3,1192(sp)
   23464:	d9812785 	stb	r6,1182(sp)
   23468:	803db226 	beq	r16,zero,22b34 <__alt_data_end+0xfffe3734>
   2346c:	00c00044 	movi	r3,1
   23470:	d8c12b15 	stw	r3,1196(sp)
   23474:	dc010405 	stb	r16,1040(sp)
   23478:	d8012785 	stb	zero,1182(sp)
   2347c:	003fb306 	br	2334c <__alt_data_end+0xfffe3f4c>
   23480:	d8c12017 	ldw	r3,1152(sp)
   23484:	003e6d06 	br	22e3c <__alt_data_end+0xfffe3a3c>
   23488:	10803fcc 	andi	r2,r2,255
   2348c:	00c00044 	movi	r3,1
   23490:	10fe141e 	bne	r2,r3,22ce4 <__alt_data_end+0xfffe38e4>
   23494:	e000021e 	bne	fp,zero,234a0 <___vfprintf_internal_r+0xdb0>
   23498:	00800244 	movi	r2,9
   2349c:	14c0202e 	bgeu	r2,r19,23520 <___vfprintf_internal_r+0xe30>
   234a0:	dc012b15 	stw	r16,1196(sp)
   234a4:	dc412c15 	stw	r17,1200(sp)
   234a8:	9821883a 	mov	r16,r19
   234ac:	e023883a 	mov	r17,fp
   234b0:	dc810e04 	addi	r18,sp,1080
   234b4:	4027883a 	mov	r19,r8
   234b8:	4839883a 	mov	fp,r9
   234bc:	8009883a 	mov	r4,r16
   234c0:	880b883a 	mov	r5,r17
   234c4:	01800284 	movi	r6,10
   234c8:	000f883a 	mov	r7,zero
   234cc:	002bbc80 	call	2bbc8 <__umoddi3>
   234d0:	10800c04 	addi	r2,r2,48
   234d4:	94bfffc4 	addi	r18,r18,-1
   234d8:	8009883a 	mov	r4,r16
   234dc:	880b883a 	mov	r5,r17
   234e0:	01800284 	movi	r6,10
   234e4:	000f883a 	mov	r7,zero
   234e8:	90800005 	stb	r2,0(r18)
   234ec:	002b6080 	call	2b608 <__udivdi3>
   234f0:	1021883a 	mov	r16,r2
   234f4:	10c4b03a 	or	r2,r2,r3
   234f8:	1823883a 	mov	r17,r3
   234fc:	103fef1e 	bne	r2,zero,234bc <__alt_data_end+0xfffe40bc>
   23500:	dac12817 	ldw	r11,1184(sp)
   23504:	dc813115 	stw	r18,1220(sp)
   23508:	dc012b17 	ldw	r16,1196(sp)
   2350c:	9811883a 	mov	r8,r19
   23510:	dc412c17 	ldw	r17,1200(sp)
   23514:	e013883a 	mov	r9,fp
   23518:	5ca5c83a 	sub	r18,r11,r18
   2351c:	003e0306 	br	22d2c <__alt_data_end+0xfffe392c>
   23520:	9cc00c04 	addi	r19,r19,48
   23524:	d8c10dc4 	addi	r3,sp,1079
   23528:	dcc10dc5 	stb	r19,1079(sp)
   2352c:	dc813c17 	ldw	r18,1264(sp)
   23530:	d8c13115 	stw	r3,1220(sp)
   23534:	003dfd06 	br	22d2c <__alt_data_end+0xfffe392c>
   23538:	00801944 	movi	r2,101
   2353c:	1400710e 	bge	r2,r16,23704 <___vfprintf_internal_r+0x1014>
   23540:	d9013717 	ldw	r4,1244(sp)
   23544:	d9413917 	ldw	r5,1252(sp)
   23548:	000d883a 	mov	r6,zero
   2354c:	000f883a 	mov	r7,zero
   23550:	d8c13d15 	stw	r3,1268(sp)
   23554:	da013f15 	stw	r8,1276(sp)
   23558:	002c9f40 	call	2c9f4 <__eqdf2>
   2355c:	d8c13d17 	ldw	r3,1268(sp)
   23560:	da013f17 	ldw	r8,1276(sp)
   23564:	1000ef1e 	bne	r2,zero,23924 <___vfprintf_internal_r+0x1234>
   23568:	d8811f17 	ldw	r2,1148(sp)
   2356c:	010000f4 	movhi	r4,3
   23570:	213fa904 	addi	r4,r4,-348
   23574:	18c00044 	addi	r3,r3,1
   23578:	10800044 	addi	r2,r2,1
   2357c:	41000015 	stw	r4,0(r8)
   23580:	01000044 	movi	r4,1
   23584:	41000115 	stw	r4,4(r8)
   23588:	d8c12015 	stw	r3,1152(sp)
   2358c:	d8811f15 	stw	r2,1148(sp)
   23590:	010001c4 	movi	r4,7
   23594:	20828e16 	blt	r4,r2,23fd0 <___vfprintf_internal_r+0x18e0>
   23598:	42000204 	addi	r8,r8,8
   2359c:	d8812617 	ldw	r2,1176(sp)
   235a0:	dac13317 	ldw	r11,1228(sp)
   235a4:	12c00216 	blt	r2,r11,235b0 <___vfprintf_internal_r+0xec0>
   235a8:	8880004c 	andi	r2,r17,1
   235ac:	103e7726 	beq	r2,zero,22f8c <__alt_data_end+0xfffe3b8c>
   235b0:	db013817 	ldw	r12,1248(sp)
   235b4:	d8811f17 	ldw	r2,1148(sp)
   235b8:	dac13517 	ldw	r11,1236(sp)
   235bc:	1b07883a 	add	r3,r3,r12
   235c0:	10800044 	addi	r2,r2,1
   235c4:	42c00015 	stw	r11,0(r8)
   235c8:	43000115 	stw	r12,4(r8)
   235cc:	d8c12015 	stw	r3,1152(sp)
   235d0:	d8811f15 	stw	r2,1148(sp)
   235d4:	010001c4 	movi	r4,7
   235d8:	2082ed16 	blt	r4,r2,24190 <___vfprintf_internal_r+0x1aa0>
   235dc:	42000204 	addi	r8,r8,8
   235e0:	db013317 	ldw	r12,1228(sp)
   235e4:	643fffc4 	addi	r16,r12,-1
   235e8:	043e680e 	bge	zero,r16,22f8c <__alt_data_end+0xfffe3b8c>
   235ec:	04800404 	movi	r18,16
   235f0:	d8811f17 	ldw	r2,1148(sp)
   235f4:	94007e0e 	bge	r18,r16,237f0 <___vfprintf_internal_r+0x1100>
   235f8:	014000f4 	movhi	r5,3
   235fc:	297fa984 	addi	r5,r5,-346
   23600:	d9412c15 	stw	r5,1200(sp)
   23604:	054001c4 	movi	r21,7
   23608:	00000306 	br	23618 <___vfprintf_internal_r+0xf28>
   2360c:	42000204 	addi	r8,r8,8
   23610:	843ffc04 	addi	r16,r16,-16
   23614:	9400790e 	bge	r18,r16,237fc <___vfprintf_internal_r+0x110c>
   23618:	18c00404 	addi	r3,r3,16
   2361c:	10800044 	addi	r2,r2,1
   23620:	45000015 	stw	r20,0(r8)
   23624:	44800115 	stw	r18,4(r8)
   23628:	d8c12015 	stw	r3,1152(sp)
   2362c:	d8811f15 	stw	r2,1148(sp)
   23630:	a8bff60e 	bge	r21,r2,2360c <__alt_data_end+0xfffe420c>
   23634:	b009883a 	mov	r4,r22
   23638:	b80b883a 	mov	r5,r23
   2363c:	d9811e04 	addi	r6,sp,1144
   23640:	00299380 	call	29938 <__sprint_r>
   23644:	103d411e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   23648:	d8c12017 	ldw	r3,1152(sp)
   2364c:	d8811f17 	ldw	r2,1148(sp)
   23650:	da000404 	addi	r8,sp,16
   23654:	003fee06 	br	23610 <__alt_data_end+0xfffe4210>
   23658:	dac12e17 	ldw	r11,1208(sp)
   2365c:	db012b17 	ldw	r12,1196(sp)
   23660:	5b2bc83a 	sub	r21,r11,r12
   23664:	057e130e 	bge	zero,r21,22eb4 <__alt_data_end+0xfffe3ab4>
   23668:	07000404 	movi	fp,16
   2366c:	d8811f17 	ldw	r2,1148(sp)
   23670:	e543640e 	bge	fp,r21,24404 <___vfprintf_internal_r+0x1d14>
   23674:	014000f4 	movhi	r5,3
   23678:	297fa984 	addi	r5,r5,-346
   2367c:	d9412c15 	stw	r5,1200(sp)
   23680:	04c001c4 	movi	r19,7
   23684:	00000306 	br	23694 <___vfprintf_internal_r+0xfa4>
   23688:	ad7ffc04 	addi	r21,r21,-16
   2368c:	42000204 	addi	r8,r8,8
   23690:	e540110e 	bge	fp,r21,236d8 <___vfprintf_internal_r+0xfe8>
   23694:	18c00404 	addi	r3,r3,16
   23698:	10800044 	addi	r2,r2,1
   2369c:	45000015 	stw	r20,0(r8)
   236a0:	47000115 	stw	fp,4(r8)
   236a4:	d8c12015 	stw	r3,1152(sp)
   236a8:	d8811f15 	stw	r2,1148(sp)
   236ac:	98bff60e 	bge	r19,r2,23688 <__alt_data_end+0xfffe4288>
   236b0:	b009883a 	mov	r4,r22
   236b4:	b80b883a 	mov	r5,r23
   236b8:	d9811e04 	addi	r6,sp,1144
   236bc:	00299380 	call	29938 <__sprint_r>
   236c0:	103d221e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   236c4:	ad7ffc04 	addi	r21,r21,-16
   236c8:	d8c12017 	ldw	r3,1152(sp)
   236cc:	d8811f17 	ldw	r2,1148(sp)
   236d0:	da000404 	addi	r8,sp,16
   236d4:	e57fef16 	blt	fp,r21,23694 <__alt_data_end+0xfffe4294>
   236d8:	dac12c17 	ldw	r11,1200(sp)
   236dc:	1d47883a 	add	r3,r3,r21
   236e0:	10800044 	addi	r2,r2,1
   236e4:	42c00015 	stw	r11,0(r8)
   236e8:	45400115 	stw	r21,4(r8)
   236ec:	d8c12015 	stw	r3,1152(sp)
   236f0:	d8811f15 	stw	r2,1148(sp)
   236f4:	010001c4 	movi	r4,7
   236f8:	20819116 	blt	r4,r2,23d40 <___vfprintf_internal_r+0x1650>
   236fc:	42000204 	addi	r8,r8,8
   23700:	003dec06 	br	22eb4 <__alt_data_end+0xfffe3ab4>
   23704:	db013317 	ldw	r12,1228(sp)
   23708:	00800044 	movi	r2,1
   2370c:	18c00044 	addi	r3,r3,1
   23710:	1301530e 	bge	r2,r12,23c60 <___vfprintf_internal_r+0x1570>
   23714:	dc011f17 	ldw	r16,1148(sp)
   23718:	dac13117 	ldw	r11,1220(sp)
   2371c:	00800044 	movi	r2,1
   23720:	84000044 	addi	r16,r16,1
   23724:	40800115 	stw	r2,4(r8)
   23728:	42c00015 	stw	r11,0(r8)
   2372c:	d8c12015 	stw	r3,1152(sp)
   23730:	dc011f15 	stw	r16,1148(sp)
   23734:	008001c4 	movi	r2,7
   23738:	14016b16 	blt	r2,r16,23ce8 <___vfprintf_internal_r+0x15f8>
   2373c:	42000204 	addi	r8,r8,8
   23740:	db013817 	ldw	r12,1248(sp)
   23744:	dac13517 	ldw	r11,1236(sp)
   23748:	84000044 	addi	r16,r16,1
   2374c:	1b07883a 	add	r3,r3,r12
   23750:	42c00015 	stw	r11,0(r8)
   23754:	43000115 	stw	r12,4(r8)
   23758:	d8c12015 	stw	r3,1152(sp)
   2375c:	dc011f15 	stw	r16,1148(sp)
   23760:	008001c4 	movi	r2,7
   23764:	14016916 	blt	r2,r16,23d0c <___vfprintf_internal_r+0x161c>
   23768:	44800204 	addi	r18,r8,8
   2376c:	d9013717 	ldw	r4,1244(sp)
   23770:	d9413917 	ldw	r5,1252(sp)
   23774:	000d883a 	mov	r6,zero
   23778:	000f883a 	mov	r7,zero
   2377c:	d8c13d15 	stw	r3,1268(sp)
   23780:	002c9f40 	call	2c9f4 <__eqdf2>
   23784:	d8c13d17 	ldw	r3,1268(sp)
   23788:	db013317 	ldw	r12,1228(sp)
   2378c:	1000ae26 	beq	r2,zero,23a48 <___vfprintf_internal_r+0x1358>
   23790:	dac13117 	ldw	r11,1220(sp)
   23794:	60bfffc4 	addi	r2,r12,-1
   23798:	1887883a 	add	r3,r3,r2
   2379c:	59000044 	addi	r4,r11,1
   237a0:	84000044 	addi	r16,r16,1
   237a4:	90800115 	stw	r2,4(r18)
   237a8:	91000015 	stw	r4,0(r18)
   237ac:	d8c12015 	stw	r3,1152(sp)
   237b0:	dc011f15 	stw	r16,1148(sp)
   237b4:	008001c4 	movi	r2,7
   237b8:	14014216 	blt	r2,r16,23cc4 <___vfprintf_internal_r+0x15d4>
   237bc:	94800204 	addi	r18,r18,8
   237c0:	dac13a17 	ldw	r11,1256(sp)
   237c4:	dd4122c4 	addi	r21,sp,1163
   237c8:	84000044 	addi	r16,r16,1
   237cc:	58c7883a 	add	r3,r11,r3
   237d0:	95400015 	stw	r21,0(r18)
   237d4:	92c00115 	stw	r11,4(r18)
   237d8:	d8c12015 	stw	r3,1152(sp)
   237dc:	dc011f15 	stw	r16,1148(sp)
   237e0:	008001c4 	movi	r2,7
   237e4:	14000e16 	blt	r2,r16,23820 <___vfprintf_internal_r+0x1130>
   237e8:	92000204 	addi	r8,r18,8
   237ec:	003de706 	br	22f8c <__alt_data_end+0xfffe3b8c>
   237f0:	010000f4 	movhi	r4,3
   237f4:	213fa984 	addi	r4,r4,-346
   237f8:	d9012c15 	stw	r4,1200(sp)
   237fc:	dac12c17 	ldw	r11,1200(sp)
   23800:	1c07883a 	add	r3,r3,r16
   23804:	44000115 	stw	r16,4(r8)
   23808:	42c00015 	stw	r11,0(r8)
   2380c:	10800044 	addi	r2,r2,1
   23810:	d8c12015 	stw	r3,1152(sp)
   23814:	d8811f15 	stw	r2,1148(sp)
   23818:	010001c4 	movi	r4,7
   2381c:	20bdda0e 	bge	r4,r2,22f88 <__alt_data_end+0xfffe3b88>
   23820:	b009883a 	mov	r4,r22
   23824:	b80b883a 	mov	r5,r23
   23828:	d9811e04 	addi	r6,sp,1144
   2382c:	00299380 	call	29938 <__sprint_r>
   23830:	103cc61e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   23834:	d8c12017 	ldw	r3,1152(sp)
   23838:	da000404 	addi	r8,sp,16
   2383c:	003dd306 	br	22f8c <__alt_data_end+0xfffe3b8c>
   23840:	b009883a 	mov	r4,r22
   23844:	b80b883a 	mov	r5,r23
   23848:	d9811e04 	addi	r6,sp,1144
   2384c:	00299380 	call	29938 <__sprint_r>
   23850:	103e0926 	beq	r2,zero,23078 <__alt_data_end+0xfffe3c78>
   23854:	003cbd06 	br	22b4c <__alt_data_end+0xfffe374c>
   23858:	10803fcc 	andi	r2,r2,255
   2385c:	1000651e 	bne	r2,zero,239f4 <___vfprintf_internal_r+0x1304>
   23860:	8880004c 	andi	r2,r17,1
   23864:	10013226 	beq	r2,zero,23d30 <___vfprintf_internal_r+0x1640>
   23868:	00800c04 	movi	r2,48
   2386c:	d8c10dc4 	addi	r3,sp,1079
   23870:	d8810dc5 	stb	r2,1079(sp)
   23874:	dc813c17 	ldw	r18,1264(sp)
   23878:	d8c13115 	stw	r3,1220(sp)
   2387c:	003d2b06 	br	22d2c <__alt_data_end+0xfffe392c>
   23880:	b009883a 	mov	r4,r22
   23884:	b80b883a 	mov	r5,r23
   23888:	d9811e04 	addi	r6,sp,1144
   2388c:	00299380 	call	29938 <__sprint_r>
   23890:	103cae1e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   23894:	d8c12017 	ldw	r3,1152(sp)
   23898:	da000404 	addi	r8,sp,16
   2389c:	003dae06 	br	22f58 <__alt_data_end+0xfffe3b58>
   238a0:	b009883a 	mov	r4,r22
   238a4:	b80b883a 	mov	r5,r23
   238a8:	d9811e04 	addi	r6,sp,1144
   238ac:	00299380 	call	29938 <__sprint_r>
   238b0:	103ca61e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   238b4:	d8c12017 	ldw	r3,1152(sp)
   238b8:	da000404 	addi	r8,sp,16
   238bc:	003d6c06 	br	22e70 <__alt_data_end+0xfffe3a70>
   238c0:	b009883a 	mov	r4,r22
   238c4:	b80b883a 	mov	r5,r23
   238c8:	d9811e04 	addi	r6,sp,1144
   238cc:	00299380 	call	29938 <__sprint_r>
   238d0:	103c9e1e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   238d4:	d8c12017 	ldw	r3,1152(sp)
   238d8:	da000404 	addi	r8,sp,16
   238dc:	003d7206 	br	22ea8 <__alt_data_end+0xfffe3aa8>
   238e0:	d9413b17 	ldw	r5,1260(sp)
   238e4:	d8c10e04 	addi	r3,sp,1080
   238e8:	988003cc 	andi	r2,r19,15
   238ec:	e008973a 	slli	r4,fp,28
   238f0:	2885883a 	add	r2,r5,r2
   238f4:	9826d13a 	srli	r19,r19,4
   238f8:	10800003 	ldbu	r2,0(r2)
   238fc:	e038d13a 	srli	fp,fp,4
   23900:	18ffffc4 	addi	r3,r3,-1
   23904:	24e6b03a 	or	r19,r4,r19
   23908:	18800005 	stb	r2,0(r3)
   2390c:	9f04b03a 	or	r2,r19,fp
   23910:	103ff51e 	bne	r2,zero,238e8 <__alt_data_end+0xfffe44e8>
   23914:	db012817 	ldw	r12,1184(sp)
   23918:	d8c13115 	stw	r3,1220(sp)
   2391c:	60e5c83a 	sub	r18,r12,r3
   23920:	003d0206 	br	22d2c <__alt_data_end+0xfffe392c>
   23924:	dc012617 	ldw	r16,1176(sp)
   23928:	0401b10e 	bge	zero,r16,23ff0 <___vfprintf_internal_r+0x1900>
   2392c:	db013117 	ldw	r12,1220(sp)
   23930:	dac13317 	ldw	r11,1228(sp)
   23934:	62e1883a 	add	r16,r12,r11
   23938:	db013417 	ldw	r12,1232(sp)
   2393c:	5825883a 	mov	r18,r11
   23940:	62c0010e 	bge	r12,r11,23948 <___vfprintf_internal_r+0x1258>
   23944:	6025883a 	mov	r18,r12
   23948:	04800b0e 	bge	zero,r18,23978 <___vfprintf_internal_r+0x1288>
   2394c:	d8811f17 	ldw	r2,1148(sp)
   23950:	dac13117 	ldw	r11,1220(sp)
   23954:	1c87883a 	add	r3,r3,r18
   23958:	10800044 	addi	r2,r2,1
   2395c:	42c00015 	stw	r11,0(r8)
   23960:	44800115 	stw	r18,4(r8)
   23964:	d8c12015 	stw	r3,1152(sp)
   23968:	d8811f15 	stw	r2,1148(sp)
   2396c:	010001c4 	movi	r4,7
   23970:	20824f16 	blt	r4,r2,242b0 <___vfprintf_internal_r+0x1bc0>
   23974:	42000204 	addi	r8,r8,8
   23978:	90024b16 	blt	r18,zero,242a8 <___vfprintf_internal_r+0x1bb8>
   2397c:	db013417 	ldw	r12,1232(sp)
   23980:	64a5c83a 	sub	r18,r12,r18
   23984:	0480730e 	bge	zero,r18,23b54 <___vfprintf_internal_r+0x1464>
   23988:	05400404 	movi	r21,16
   2398c:	d8811f17 	ldw	r2,1148(sp)
   23990:	ac817d0e 	bge	r21,r18,23f88 <___vfprintf_internal_r+0x1898>
   23994:	014000f4 	movhi	r5,3
   23998:	297fa984 	addi	r5,r5,-346
   2399c:	d9412c15 	stw	r5,1200(sp)
   239a0:	070001c4 	movi	fp,7
   239a4:	00000306 	br	239b4 <___vfprintf_internal_r+0x12c4>
   239a8:	42000204 	addi	r8,r8,8
   239ac:	94bffc04 	addi	r18,r18,-16
   239b0:	ac81780e 	bge	r21,r18,23f94 <___vfprintf_internal_r+0x18a4>
   239b4:	18c00404 	addi	r3,r3,16
   239b8:	10800044 	addi	r2,r2,1
   239bc:	45000015 	stw	r20,0(r8)
   239c0:	45400115 	stw	r21,4(r8)
   239c4:	d8c12015 	stw	r3,1152(sp)
   239c8:	d8811f15 	stw	r2,1148(sp)
   239cc:	e0bff60e 	bge	fp,r2,239a8 <__alt_data_end+0xfffe45a8>
   239d0:	b009883a 	mov	r4,r22
   239d4:	b80b883a 	mov	r5,r23
   239d8:	d9811e04 	addi	r6,sp,1144
   239dc:	00299380 	call	29938 <__sprint_r>
   239e0:	103c5a1e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   239e4:	d8c12017 	ldw	r3,1152(sp)
   239e8:	d8811f17 	ldw	r2,1148(sp)
   239ec:	da000404 	addi	r8,sp,16
   239f0:	003fee06 	br	239ac <__alt_data_end+0xfffe45ac>
   239f4:	dac10e04 	addi	r11,sp,1080
   239f8:	0025883a 	mov	r18,zero
   239fc:	dac13115 	stw	r11,1220(sp)
   23a00:	003cca06 	br	22d2c <__alt_data_end+0xfffe392c>
   23a04:	b009883a 	mov	r4,r22
   23a08:	b80b883a 	mov	r5,r23
   23a0c:	d9811e04 	addi	r6,sp,1144
   23a10:	00299380 	call	29938 <__sprint_r>
   23a14:	103c4d1e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   23a18:	d8c12017 	ldw	r3,1152(sp)
   23a1c:	d8812787 	ldb	r2,1182(sp)
   23a20:	da000404 	addi	r8,sp,16
   23a24:	003d0506 	br	22e3c <__alt_data_end+0xfffe3a3c>
   23a28:	dac12d17 	ldw	r11,1204(sp)
   23a2c:	14c00017 	ldw	r19,0(r2)
   23a30:	0039883a 	mov	fp,zero
   23a34:	5ac00104 	addi	r11,r11,4
   23a38:	dac12d15 	stw	r11,1204(sp)
   23a3c:	0005883a 	mov	r2,zero
   23a40:	9807883a 	mov	r3,r19
   23a44:	003c9c06 	br	22cb8 <__alt_data_end+0xfffe38b8>
   23a48:	657fffc4 	addi	r21,r12,-1
   23a4c:	057f5c0e 	bge	zero,r21,237c0 <__alt_data_end+0xfffe43c0>
   23a50:	07000404 	movi	fp,16
   23a54:	e5408f0e 	bge	fp,r21,23c94 <___vfprintf_internal_r+0x15a4>
   23a58:	010000f4 	movhi	r4,3
   23a5c:	213fa984 	addi	r4,r4,-346
   23a60:	d9012c15 	stw	r4,1200(sp)
   23a64:	01c001c4 	movi	r7,7
   23a68:	00000306 	br	23a78 <___vfprintf_internal_r+0x1388>
   23a6c:	94800204 	addi	r18,r18,8
   23a70:	ad7ffc04 	addi	r21,r21,-16
   23a74:	e5408a0e 	bge	fp,r21,23ca0 <___vfprintf_internal_r+0x15b0>
   23a78:	18c00404 	addi	r3,r3,16
   23a7c:	84000044 	addi	r16,r16,1
   23a80:	95000015 	stw	r20,0(r18)
   23a84:	97000115 	stw	fp,4(r18)
   23a88:	d8c12015 	stw	r3,1152(sp)
   23a8c:	dc011f15 	stw	r16,1148(sp)
   23a90:	3c3ff60e 	bge	r7,r16,23a6c <__alt_data_end+0xfffe466c>
   23a94:	b009883a 	mov	r4,r22
   23a98:	b80b883a 	mov	r5,r23
   23a9c:	d9811e04 	addi	r6,sp,1144
   23aa0:	d9c13d15 	stw	r7,1268(sp)
   23aa4:	00299380 	call	29938 <__sprint_r>
   23aa8:	d9c13d17 	ldw	r7,1268(sp)
   23aac:	103c271e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   23ab0:	d8c12017 	ldw	r3,1152(sp)
   23ab4:	dc011f17 	ldw	r16,1148(sp)
   23ab8:	dc800404 	addi	r18,sp,16
   23abc:	003fec06 	br	23a70 <__alt_data_end+0xfffe4670>
   23ac0:	1cc00017 	ldw	r19,0(r3)
   23ac4:	dac12d17 	ldw	r11,1204(sp)
   23ac8:	9839d7fa 	srai	fp,r19,31
   23acc:	5ac00104 	addi	r11,r11,4
   23ad0:	dac12d15 	stw	r11,1204(sp)
   23ad4:	e005883a 	mov	r2,fp
   23ad8:	003d9006 	br	2311c <__alt_data_end+0xfffe3d1c>
   23adc:	00800084 	movi	r2,2
   23ae0:	9f06b03a 	or	r3,r19,fp
   23ae4:	003c7406 	br	22cb8 <__alt_data_end+0xfffe38b8>
   23ae8:	db012d17 	ldw	r12,1204(sp)
   23aec:	14c00017 	ldw	r19,0(r2)
   23af0:	0039883a 	mov	fp,zero
   23af4:	63000104 	addi	r12,r12,4
   23af8:	db012d15 	stw	r12,1204(sp)
   23afc:	00800044 	movi	r2,1
   23b00:	9807883a 	mov	r3,r19
   23b04:	003c6c06 	br	22cb8 <__alt_data_end+0xfffe38b8>
   23b08:	10803fcc 	andi	r2,r2,255
   23b0c:	1080201c 	xori	r2,r2,128
   23b10:	10bfe004 	addi	r2,r2,-128
   23b14:	01000c04 	movi	r4,48
   23b18:	1101a526 	beq	r2,r4,241b0 <___vfprintf_internal_r+0x1ac0>
   23b1c:	dac13117 	ldw	r11,1220(sp)
   23b20:	db012817 	ldw	r12,1184(sp)
   23b24:	193fffc5 	stb	r4,-1(r3)
   23b28:	5affffc4 	addi	r11,r11,-1
   23b2c:	dac13115 	stw	r11,1220(sp)
   23b30:	62e5c83a 	sub	r18,r12,r11
   23b34:	003c7d06 	br	22d2c <__alt_data_end+0xfffe392c>
   23b38:	b009883a 	mov	r4,r22
   23b3c:	b80b883a 	mov	r5,r23
   23b40:	d9811e04 	addi	r6,sp,1144
   23b44:	00299380 	call	29938 <__sprint_r>
   23b48:	103c001e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   23b4c:	d8c12017 	ldw	r3,1152(sp)
   23b50:	da000404 	addi	r8,sp,16
   23b54:	db013117 	ldw	r12,1220(sp)
   23b58:	dac13417 	ldw	r11,1232(sp)
   23b5c:	d8812617 	ldw	r2,1176(sp)
   23b60:	62e5883a 	add	r18,r12,r11
   23b64:	db013317 	ldw	r12,1228(sp)
   23b68:	13000216 	blt	r2,r12,23b74 <___vfprintf_internal_r+0x1484>
   23b6c:	8900004c 	andi	r4,r17,1
   23b70:	20000c26 	beq	r4,zero,23ba4 <___vfprintf_internal_r+0x14b4>
   23b74:	dac13817 	ldw	r11,1248(sp)
   23b78:	d9011f17 	ldw	r4,1148(sp)
   23b7c:	db013517 	ldw	r12,1236(sp)
   23b80:	1ac7883a 	add	r3,r3,r11
   23b84:	21000044 	addi	r4,r4,1
   23b88:	43000015 	stw	r12,0(r8)
   23b8c:	42c00115 	stw	r11,4(r8)
   23b90:	d8c12015 	stw	r3,1152(sp)
   23b94:	d9011f15 	stw	r4,1148(sp)
   23b98:	014001c4 	movi	r5,7
   23b9c:	2901cc16 	blt	r5,r4,242d0 <___vfprintf_internal_r+0x1be0>
   23ba0:	42000204 	addi	r8,r8,8
   23ba4:	dac13317 	ldw	r11,1228(sp)
   23ba8:	8489c83a 	sub	r4,r16,r18
   23bac:	5885c83a 	sub	r2,r11,r2
   23bb0:	1021883a 	mov	r16,r2
   23bb4:	2080010e 	bge	r4,r2,23bbc <___vfprintf_internal_r+0x14cc>
   23bb8:	2021883a 	mov	r16,r4
   23bbc:	04000a0e 	bge	zero,r16,23be8 <___vfprintf_internal_r+0x14f8>
   23bc0:	d9011f17 	ldw	r4,1148(sp)
   23bc4:	1c07883a 	add	r3,r3,r16
   23bc8:	44800015 	stw	r18,0(r8)
   23bcc:	21000044 	addi	r4,r4,1
   23bd0:	44000115 	stw	r16,4(r8)
   23bd4:	d8c12015 	stw	r3,1152(sp)
   23bd8:	d9011f15 	stw	r4,1148(sp)
   23bdc:	014001c4 	movi	r5,7
   23be0:	2901d616 	blt	r5,r4,2433c <___vfprintf_internal_r+0x1c4c>
   23be4:	42000204 	addi	r8,r8,8
   23be8:	8001df16 	blt	r16,zero,24368 <___vfprintf_internal_r+0x1c78>
   23bec:	1421c83a 	sub	r16,r2,r16
   23bf0:	043ce60e 	bge	zero,r16,22f8c <__alt_data_end+0xfffe3b8c>
   23bf4:	04800404 	movi	r18,16
   23bf8:	d8811f17 	ldw	r2,1148(sp)
   23bfc:	943efc0e 	bge	r18,r16,237f0 <__alt_data_end+0xfffe43f0>
   23c00:	014000f4 	movhi	r5,3
   23c04:	297fa984 	addi	r5,r5,-346
   23c08:	d9412c15 	stw	r5,1200(sp)
   23c0c:	054001c4 	movi	r21,7
   23c10:	00000306 	br	23c20 <___vfprintf_internal_r+0x1530>
   23c14:	42000204 	addi	r8,r8,8
   23c18:	843ffc04 	addi	r16,r16,-16
   23c1c:	943ef70e 	bge	r18,r16,237fc <__alt_data_end+0xfffe43fc>
   23c20:	18c00404 	addi	r3,r3,16
   23c24:	10800044 	addi	r2,r2,1
   23c28:	45000015 	stw	r20,0(r8)
   23c2c:	44800115 	stw	r18,4(r8)
   23c30:	d8c12015 	stw	r3,1152(sp)
   23c34:	d8811f15 	stw	r2,1148(sp)
   23c38:	a8bff60e 	bge	r21,r2,23c14 <__alt_data_end+0xfffe4814>
   23c3c:	b009883a 	mov	r4,r22
   23c40:	b80b883a 	mov	r5,r23
   23c44:	d9811e04 	addi	r6,sp,1144
   23c48:	00299380 	call	29938 <__sprint_r>
   23c4c:	103bbf1e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   23c50:	d8c12017 	ldw	r3,1152(sp)
   23c54:	d8811f17 	ldw	r2,1148(sp)
   23c58:	da000404 	addi	r8,sp,16
   23c5c:	003fee06 	br	23c18 <__alt_data_end+0xfffe4818>
   23c60:	8888703a 	and	r4,r17,r2
   23c64:	203eab1e 	bne	r4,zero,23714 <__alt_data_end+0xfffe4314>
   23c68:	dc011f17 	ldw	r16,1148(sp)
   23c6c:	db013117 	ldw	r12,1220(sp)
   23c70:	40800115 	stw	r2,4(r8)
   23c74:	84000044 	addi	r16,r16,1
   23c78:	43000015 	stw	r12,0(r8)
   23c7c:	d8c12015 	stw	r3,1152(sp)
   23c80:	dc011f15 	stw	r16,1148(sp)
   23c84:	008001c4 	movi	r2,7
   23c88:	14000e16 	blt	r2,r16,23cc4 <___vfprintf_internal_r+0x15d4>
   23c8c:	44800204 	addi	r18,r8,8
   23c90:	003ecb06 	br	237c0 <__alt_data_end+0xfffe43c0>
   23c94:	008000f4 	movhi	r2,3
   23c98:	10bfa984 	addi	r2,r2,-346
   23c9c:	d8812c15 	stw	r2,1200(sp)
   23ca0:	dac12c17 	ldw	r11,1200(sp)
   23ca4:	1d47883a 	add	r3,r3,r21
   23ca8:	84000044 	addi	r16,r16,1
   23cac:	92c00015 	stw	r11,0(r18)
   23cb0:	95400115 	stw	r21,4(r18)
   23cb4:	d8c12015 	stw	r3,1152(sp)
   23cb8:	dc011f15 	stw	r16,1148(sp)
   23cbc:	008001c4 	movi	r2,7
   23cc0:	143ebe0e 	bge	r2,r16,237bc <__alt_data_end+0xfffe43bc>
   23cc4:	b009883a 	mov	r4,r22
   23cc8:	b80b883a 	mov	r5,r23
   23ccc:	d9811e04 	addi	r6,sp,1144
   23cd0:	00299380 	call	29938 <__sprint_r>
   23cd4:	103b9d1e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   23cd8:	d8c12017 	ldw	r3,1152(sp)
   23cdc:	dc011f17 	ldw	r16,1148(sp)
   23ce0:	dc800404 	addi	r18,sp,16
   23ce4:	003eb606 	br	237c0 <__alt_data_end+0xfffe43c0>
   23ce8:	b009883a 	mov	r4,r22
   23cec:	b80b883a 	mov	r5,r23
   23cf0:	d9811e04 	addi	r6,sp,1144
   23cf4:	00299380 	call	29938 <__sprint_r>
   23cf8:	103b941e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   23cfc:	d8c12017 	ldw	r3,1152(sp)
   23d00:	dc011f17 	ldw	r16,1148(sp)
   23d04:	da000404 	addi	r8,sp,16
   23d08:	003e8d06 	br	23740 <__alt_data_end+0xfffe4340>
   23d0c:	b009883a 	mov	r4,r22
   23d10:	b80b883a 	mov	r5,r23
   23d14:	d9811e04 	addi	r6,sp,1144
   23d18:	00299380 	call	29938 <__sprint_r>
   23d1c:	103b8b1e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   23d20:	d8c12017 	ldw	r3,1152(sp)
   23d24:	dc011f17 	ldw	r16,1148(sp)
   23d28:	dc800404 	addi	r18,sp,16
   23d2c:	003e8f06 	br	2376c <__alt_data_end+0xfffe436c>
   23d30:	db010e04 	addi	r12,sp,1080
   23d34:	0025883a 	mov	r18,zero
   23d38:	db013115 	stw	r12,1220(sp)
   23d3c:	003bfb06 	br	22d2c <__alt_data_end+0xfffe392c>
   23d40:	b009883a 	mov	r4,r22
   23d44:	b80b883a 	mov	r5,r23
   23d48:	d9811e04 	addi	r6,sp,1144
   23d4c:	00299380 	call	29938 <__sprint_r>
   23d50:	103b7e1e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   23d54:	d8c12017 	ldw	r3,1152(sp)
   23d58:	da000404 	addi	r8,sp,16
   23d5c:	003c5506 	br	22eb4 <__alt_data_end+0xfffe3ab4>
   23d60:	04e7c83a 	sub	r19,zero,r19
   23d64:	9804c03a 	cmpne	r2,r19,zero
   23d68:	0739c83a 	sub	fp,zero,fp
   23d6c:	e0b9c83a 	sub	fp,fp,r2
   23d70:	05400b44 	movi	r21,45
   23d74:	dd412785 	stb	r21,1182(sp)
   23d78:	da413215 	stw	r9,1224(sp)
   23d7c:	00800044 	movi	r2,1
   23d80:	9f06b03a 	or	r3,r19,fp
   23d84:	003bcf06 	br	22cc4 <__alt_data_end+0xfffe38c4>
   23d88:	da013f15 	stw	r8,1276(sp)
   23d8c:	da413e15 	stw	r9,1272(sp)
   23d90:	00295940 	call	29594 <__fpclassifyd>
   23d94:	da013f17 	ldw	r8,1276(sp)
   23d98:	da413e17 	ldw	r9,1272(sp)
   23d9c:	1000ce26 	beq	r2,zero,240d8 <___vfprintf_internal_r+0x19e8>
   23da0:	057ff7c4 	movi	r21,-33
   23da4:	00bfffc4 	movi	r2,-1
   23da8:	856a703a 	and	r21,r16,r21
   23dac:	4881f026 	beq	r9,r2,24570 <___vfprintf_internal_r+0x1e80>
   23db0:	008011c4 	movi	r2,71
   23db4:	a881e526 	beq	r21,r2,2454c <___vfprintf_internal_r+0x1e5c>
   23db8:	db013917 	ldw	r12,1252(sp)
   23dbc:	8ac04014 	ori	r11,r17,256
   23dc0:	dac12d15 	stw	r11,1204(sp)
   23dc4:	6001e416 	blt	r12,zero,24558 <___vfprintf_internal_r+0x1e68>
   23dc8:	dc813917 	ldw	r18,1252(sp)
   23dcc:	d8012b05 	stb	zero,1196(sp)
   23dd0:	00801984 	movi	r2,102
   23dd4:	80811826 	beq	r16,r2,24238 <___vfprintf_internal_r+0x1b48>
   23dd8:	00801184 	movi	r2,70
   23ddc:	80811626 	beq	r16,r2,24238 <___vfprintf_internal_r+0x1b48>
   23de0:	00801144 	movi	r2,69
   23de4:	a881e026 	beq	r21,r2,24568 <___vfprintf_internal_r+0x1e78>
   23de8:	4839883a 	mov	fp,r9
   23dec:	d8812604 	addi	r2,sp,1176
   23df0:	d8800115 	stw	r2,4(sp)
   23df4:	d9413717 	ldw	r5,1244(sp)
   23df8:	d8812504 	addi	r2,sp,1172
   23dfc:	d8800215 	stw	r2,8(sp)
   23e00:	d8812104 	addi	r2,sp,1156
   23e04:	df000015 	stw	fp,0(sp)
   23e08:	d8800315 	stw	r2,12(sp)
   23e0c:	b009883a 	mov	r4,r22
   23e10:	900d883a 	mov	r6,r18
   23e14:	01c00084 	movi	r7,2
   23e18:	da013f15 	stw	r8,1276(sp)
   23e1c:	da413e15 	stw	r9,1272(sp)
   23e20:	0024a400 	call	24a40 <_dtoa_r>
   23e24:	d8813115 	stw	r2,1220(sp)
   23e28:	008019c4 	movi	r2,103
   23e2c:	da013f17 	ldw	r8,1276(sp)
   23e30:	da413e17 	ldw	r9,1272(sp)
   23e34:	80800226 	beq	r16,r2,23e40 <___vfprintf_internal_r+0x1750>
   23e38:	008011c4 	movi	r2,71
   23e3c:	8081101e 	bne	r16,r2,24280 <___vfprintf_internal_r+0x1b90>
   23e40:	8880004c 	andi	r2,r17,1
   23e44:	1001df26 	beq	r2,zero,245c4 <___vfprintf_internal_r+0x1ed4>
   23e48:	db013117 	ldw	r12,1220(sp)
   23e4c:	6715883a 	add	r10,r12,fp
   23e50:	d9013717 	ldw	r4,1244(sp)
   23e54:	900b883a 	mov	r5,r18
   23e58:	000d883a 	mov	r6,zero
   23e5c:	000f883a 	mov	r7,zero
   23e60:	da013f15 	stw	r8,1276(sp)
   23e64:	da413e15 	stw	r9,1272(sp)
   23e68:	da813d15 	stw	r10,1268(sp)
   23e6c:	002c9f40 	call	2c9f4 <__eqdf2>
   23e70:	da013f17 	ldw	r8,1276(sp)
   23e74:	da413e17 	ldw	r9,1272(sp)
   23e78:	da813d17 	ldw	r10,1268(sp)
   23e7c:	10016526 	beq	r2,zero,24414 <___vfprintf_internal_r+0x1d24>
   23e80:	d8812117 	ldw	r2,1156(sp)
   23e84:	1280062e 	bgeu	r2,r10,23ea0 <___vfprintf_internal_r+0x17b0>
   23e88:	01000c04 	movi	r4,48
   23e8c:	10c00044 	addi	r3,r2,1
   23e90:	d8c12115 	stw	r3,1156(sp)
   23e94:	11000005 	stb	r4,0(r2)
   23e98:	d8812117 	ldw	r2,1156(sp)
   23e9c:	12bffb36 	bltu	r2,r10,23e8c <__alt_data_end+0xfffe4a8c>
   23ea0:	db013117 	ldw	r12,1220(sp)
   23ea4:	1305c83a 	sub	r2,r2,r12
   23ea8:	d8813315 	stw	r2,1228(sp)
   23eac:	008011c4 	movi	r2,71
   23eb0:	a8814a26 	beq	r21,r2,243dc <___vfprintf_internal_r+0x1cec>
   23eb4:	00801944 	movi	r2,101
   23eb8:	14020a0e 	bge	r2,r16,246e4 <___vfprintf_internal_r+0x1ff4>
   23ebc:	00801984 	movi	r2,102
   23ec0:	8081b626 	beq	r16,r2,2459c <___vfprintf_internal_r+0x1eac>
   23ec4:	db012617 	ldw	r12,1176(sp)
   23ec8:	db013415 	stw	r12,1232(sp)
   23ecc:	db013417 	ldw	r12,1232(sp)
   23ed0:	dac13317 	ldw	r11,1228(sp)
   23ed4:	62c1a816 	blt	r12,r11,24578 <___vfprintf_internal_r+0x1e88>
   23ed8:	8c40004c 	andi	r17,r17,1
   23edc:	8801ca1e 	bne	r17,zero,24608 <___vfprintf_internal_r+0x1f18>
   23ee0:	6005883a 	mov	r2,r12
   23ee4:	6001b516 	blt	r12,zero,245bc <___vfprintf_internal_r+0x1ecc>
   23ee8:	dc813417 	ldw	r18,1232(sp)
   23eec:	df012b07 	ldb	fp,1196(sp)
   23ef0:	e001321e 	bne	fp,zero,243bc <___vfprintf_internal_r+0x1ccc>
   23ef4:	dc412d17 	ldw	r17,1204(sp)
   23ef8:	dd412783 	ldbu	r21,1182(sp)
   23efc:	d8812b15 	stw	r2,1196(sp)
   23f00:	dcc12d15 	stw	r19,1204(sp)
   23f04:	d8013215 	stw	zero,1224(sp)
   23f08:	003b8d06 	br	22d40 <__alt_data_end+0xfffe3940>
   23f0c:	88c0100c 	andi	r3,r17,64
   23f10:	18008226 	beq	r3,zero,2411c <___vfprintf_internal_r+0x1a2c>
   23f14:	dac12d17 	ldw	r11,1204(sp)
   23f18:	14c0000b 	ldhu	r19,0(r2)
   23f1c:	0039883a 	mov	fp,zero
   23f20:	5ac00104 	addi	r11,r11,4
   23f24:	dac12d15 	stw	r11,1204(sp)
   23f28:	003c8f06 	br	23168 <__alt_data_end+0xfffe3d68>
   23f2c:	1c000007 	ldb	r16,0(r3)
   23f30:	1805883a 	mov	r2,r3
   23f34:	003a5506 	br	2288c <__alt_data_end+0xfffe348c>
   23f38:	00800084 	movi	r2,2
   23f3c:	003b5e06 	br	22cb8 <__alt_data_end+0xfffe38b8>
   23f40:	8880040c 	andi	r2,r17,16
   23f44:	1000091e 	bne	r2,zero,23f6c <___vfprintf_internal_r+0x187c>
   23f48:	8c40100c 	andi	r17,r17,64
   23f4c:	88000726 	beq	r17,zero,23f6c <___vfprintf_internal_r+0x187c>
   23f50:	db012d17 	ldw	r12,1204(sp)
   23f54:	dac12f17 	ldw	r11,1212(sp)
   23f58:	60800017 	ldw	r2,0(r12)
   23f5c:	63000104 	addi	r12,r12,4
   23f60:	db012d15 	stw	r12,1204(sp)
   23f64:	12c0000d 	sth	r11,0(r2)
   23f68:	003a1e06 	br	227e4 <__alt_data_end+0xfffe33e4>
   23f6c:	db012d17 	ldw	r12,1204(sp)
   23f70:	dac12f17 	ldw	r11,1212(sp)
   23f74:	60800017 	ldw	r2,0(r12)
   23f78:	63000104 	addi	r12,r12,4
   23f7c:	db012d15 	stw	r12,1204(sp)
   23f80:	12c00015 	stw	r11,0(r2)
   23f84:	003a1706 	br	227e4 <__alt_data_end+0xfffe33e4>
   23f88:	010000f4 	movhi	r4,3
   23f8c:	213fa984 	addi	r4,r4,-346
   23f90:	d9012c15 	stw	r4,1200(sp)
   23f94:	dac12c17 	ldw	r11,1200(sp)
   23f98:	1c87883a 	add	r3,r3,r18
   23f9c:	10800044 	addi	r2,r2,1
   23fa0:	42c00015 	stw	r11,0(r8)
   23fa4:	44800115 	stw	r18,4(r8)
   23fa8:	d8c12015 	stw	r3,1152(sp)
   23fac:	d8811f15 	stw	r2,1148(sp)
   23fb0:	010001c4 	movi	r4,7
   23fb4:	20bee016 	blt	r4,r2,23b38 <__alt_data_end+0xfffe4738>
   23fb8:	42000204 	addi	r8,r8,8
   23fbc:	003ee506 	br	23b54 <__alt_data_end+0xfffe4754>
   23fc0:	010000f4 	movhi	r4,3
   23fc4:	213fa984 	addi	r4,r4,-346
   23fc8:	d9012c15 	stw	r4,1200(sp)
   23fcc:	003bd806 	br	22f30 <__alt_data_end+0xfffe3b30>
   23fd0:	b009883a 	mov	r4,r22
   23fd4:	b80b883a 	mov	r5,r23
   23fd8:	d9811e04 	addi	r6,sp,1144
   23fdc:	00299380 	call	29938 <__sprint_r>
   23fe0:	103ada1e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   23fe4:	d8c12017 	ldw	r3,1152(sp)
   23fe8:	da000404 	addi	r8,sp,16
   23fec:	003d6b06 	br	2359c <__alt_data_end+0xfffe419c>
   23ff0:	d8811f17 	ldw	r2,1148(sp)
   23ff4:	030000f4 	movhi	r12,3
   23ff8:	01000044 	movi	r4,1
   23ffc:	18c00044 	addi	r3,r3,1
   24000:	10800044 	addi	r2,r2,1
   24004:	633fa904 	addi	r12,r12,-348
   24008:	41000115 	stw	r4,4(r8)
   2400c:	43000015 	stw	r12,0(r8)
   24010:	d8c12015 	stw	r3,1152(sp)
   24014:	d8811f15 	stw	r2,1148(sp)
   24018:	010001c4 	movi	r4,7
   2401c:	20804916 	blt	r4,r2,24144 <___vfprintf_internal_r+0x1a54>
   24020:	42000204 	addi	r8,r8,8
   24024:	8000041e 	bne	r16,zero,24038 <___vfprintf_internal_r+0x1948>
   24028:	dac13317 	ldw	r11,1228(sp)
   2402c:	5800021e 	bne	r11,zero,24038 <___vfprintf_internal_r+0x1948>
   24030:	8880004c 	andi	r2,r17,1
   24034:	103bd526 	beq	r2,zero,22f8c <__alt_data_end+0xfffe3b8c>
   24038:	db013817 	ldw	r12,1248(sp)
   2403c:	d8811f17 	ldw	r2,1148(sp)
   24040:	dac13517 	ldw	r11,1236(sp)
   24044:	1b07883a 	add	r3,r3,r12
   24048:	10800044 	addi	r2,r2,1
   2404c:	42c00015 	stw	r11,0(r8)
   24050:	43000115 	stw	r12,4(r8)
   24054:	d8c12015 	stw	r3,1152(sp)
   24058:	d8811f15 	stw	r2,1148(sp)
   2405c:	010001c4 	movi	r4,7
   24060:	20813016 	blt	r4,r2,24524 <___vfprintf_internal_r+0x1e34>
   24064:	42000204 	addi	r8,r8,8
   24068:	0421c83a 	sub	r16,zero,r16
   2406c:	0400630e 	bge	zero,r16,241fc <___vfprintf_internal_r+0x1b0c>
   24070:	04800404 	movi	r18,16
   24074:	94009f0e 	bge	r18,r16,242f4 <___vfprintf_internal_r+0x1c04>
   24078:	010000f4 	movhi	r4,3
   2407c:	213fa984 	addi	r4,r4,-346
   24080:	d9012c15 	stw	r4,1200(sp)
   24084:	054001c4 	movi	r21,7
   24088:	00000306 	br	24098 <___vfprintf_internal_r+0x19a8>
   2408c:	42000204 	addi	r8,r8,8
   24090:	843ffc04 	addi	r16,r16,-16
   24094:	94009a0e 	bge	r18,r16,24300 <___vfprintf_internal_r+0x1c10>
   24098:	18c00404 	addi	r3,r3,16
   2409c:	10800044 	addi	r2,r2,1
   240a0:	45000015 	stw	r20,0(r8)
   240a4:	44800115 	stw	r18,4(r8)
   240a8:	d8c12015 	stw	r3,1152(sp)
   240ac:	d8811f15 	stw	r2,1148(sp)
   240b0:	a8bff60e 	bge	r21,r2,2408c <__alt_data_end+0xfffe4c8c>
   240b4:	b009883a 	mov	r4,r22
   240b8:	b80b883a 	mov	r5,r23
   240bc:	d9811e04 	addi	r6,sp,1144
   240c0:	00299380 	call	29938 <__sprint_r>
   240c4:	103aa11e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   240c8:	d8c12017 	ldw	r3,1152(sp)
   240cc:	d8811f17 	ldw	r2,1148(sp)
   240d0:	da000404 	addi	r8,sp,16
   240d4:	003fee06 	br	24090 <__alt_data_end+0xfffe4c90>
   240d8:	008011c4 	movi	r2,71
   240dc:	1400b316 	blt	r2,r16,243ac <___vfprintf_internal_r+0x1cbc>
   240e0:	030000f4 	movhi	r12,3
   240e4:	633f9b04 	addi	r12,r12,-404
   240e8:	db013115 	stw	r12,1220(sp)
   240ec:	00c000c4 	movi	r3,3
   240f0:	00bfdfc4 	movi	r2,-129
   240f4:	d8c12b15 	stw	r3,1196(sp)
   240f8:	88a2703a 	and	r17,r17,r2
   240fc:	dd412783 	ldbu	r21,1182(sp)
   24100:	dcc12d15 	stw	r19,1204(sp)
   24104:	1825883a 	mov	r18,r3
   24108:	d8013215 	stw	zero,1224(sp)
   2410c:	d8013415 	stw	zero,1232(sp)
   24110:	003b0b06 	br	22d40 <__alt_data_end+0xfffe3940>
   24114:	4825883a 	mov	r18,r9
   24118:	003cba06 	br	23404 <__alt_data_end+0xfffe4004>
   2411c:	db012d17 	ldw	r12,1204(sp)
   24120:	14c00017 	ldw	r19,0(r2)
   24124:	0039883a 	mov	fp,zero
   24128:	63000104 	addi	r12,r12,4
   2412c:	db012d15 	stw	r12,1204(sp)
   24130:	003c0d06 	br	23168 <__alt_data_end+0xfffe3d68>
   24134:	008000f4 	movhi	r2,3
   24138:	10bf9904 	addi	r2,r2,-412
   2413c:	d8813115 	stw	r2,1220(sp)
   24140:	003ac406 	br	22c54 <__alt_data_end+0xfffe3854>
   24144:	b009883a 	mov	r4,r22
   24148:	b80b883a 	mov	r5,r23
   2414c:	d9811e04 	addi	r6,sp,1144
   24150:	00299380 	call	29938 <__sprint_r>
   24154:	103a7d1e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   24158:	dc012617 	ldw	r16,1176(sp)
   2415c:	d8c12017 	ldw	r3,1152(sp)
   24160:	da000404 	addi	r8,sp,16
   24164:	003faf06 	br	24024 <__alt_data_end+0xfffe4c24>
   24168:	db012e17 	ldw	r12,1208(sp)
   2416c:	1805883a 	mov	r2,r3
   24170:	dac12d15 	stw	r11,1204(sp)
   24174:	0319c83a 	sub	r12,zero,r12
   24178:	db012e15 	stw	r12,1208(sp)
   2417c:	003a7e06 	br	22b78 <__alt_data_end+0xfffe3778>
   24180:	18800044 	addi	r2,r3,1
   24184:	8c400814 	ori	r17,r17,32
   24188:	1c000047 	ldb	r16,1(r3)
   2418c:	0039bf06 	br	2288c <__alt_data_end+0xfffe348c>
   24190:	b009883a 	mov	r4,r22
   24194:	b80b883a 	mov	r5,r23
   24198:	d9811e04 	addi	r6,sp,1144
   2419c:	00299380 	call	29938 <__sprint_r>
   241a0:	103a6a1e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   241a4:	d8c12017 	ldw	r3,1152(sp)
   241a8:	da000404 	addi	r8,sp,16
   241ac:	003d0c06 	br	235e0 <__alt_data_end+0xfffe41e0>
   241b0:	db012817 	ldw	r12,1184(sp)
   241b4:	d8c13117 	ldw	r3,1220(sp)
   241b8:	60e5c83a 	sub	r18,r12,r3
   241bc:	003adb06 	br	22d2c <__alt_data_end+0xfffe392c>
   241c0:	da013f15 	stw	r8,1276(sp)
   241c4:	00226580 	call	22658 <strlen>
   241c8:	1025883a 	mov	r18,r2
   241cc:	da013f17 	ldw	r8,1276(sp)
   241d0:	903c8e0e 	bge	r18,zero,2340c <__alt_data_end+0xfffe400c>
   241d4:	0005883a 	mov	r2,zero
   241d8:	003c8c06 	br	2340c <__alt_data_end+0xfffe400c>
   241dc:	b009883a 	mov	r4,r22
   241e0:	b80b883a 	mov	r5,r23
   241e4:	d9811e04 	addi	r6,sp,1144
   241e8:	00299380 	call	29938 <__sprint_r>
   241ec:	103a571e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   241f0:	d8c12017 	ldw	r3,1152(sp)
   241f4:	d8811f17 	ldw	r2,1148(sp)
   241f8:	da000404 	addi	r8,sp,16
   241fc:	db013317 	ldw	r12,1228(sp)
   24200:	dac13117 	ldw	r11,1220(sp)
   24204:	10800044 	addi	r2,r2,1
   24208:	60c7883a 	add	r3,r12,r3
   2420c:	42c00015 	stw	r11,0(r8)
   24210:	43000115 	stw	r12,4(r8)
   24214:	d8c12015 	stw	r3,1152(sp)
   24218:	d8811f15 	stw	r2,1148(sp)
   2421c:	010001c4 	movi	r4,7
   24220:	20bb590e 	bge	r4,r2,22f88 <__alt_data_end+0xfffe3b88>
   24224:	003d7e06 	br	23820 <__alt_data_end+0xfffe4420>
   24228:	010000f4 	movhi	r4,3
   2422c:	213fad84 	addi	r4,r4,-330
   24230:	d9013615 	stw	r4,1240(sp)
   24234:	003af606 	br	22e10 <__alt_data_end+0xfffe3a10>
   24238:	d8812604 	addi	r2,sp,1176
   2423c:	d8800115 	stw	r2,4(sp)
   24240:	d9413717 	ldw	r5,1244(sp)
   24244:	d8812504 	addi	r2,sp,1172
   24248:	d8800215 	stw	r2,8(sp)
   2424c:	d8812104 	addi	r2,sp,1156
   24250:	da400015 	stw	r9,0(sp)
   24254:	d8800315 	stw	r2,12(sp)
   24258:	b009883a 	mov	r4,r22
   2425c:	900d883a 	mov	r6,r18
   24260:	01c000c4 	movi	r7,3
   24264:	da013f15 	stw	r8,1276(sp)
   24268:	da413e15 	stw	r9,1272(sp)
   2426c:	0024a400 	call	24a40 <_dtoa_r>
   24270:	da413e17 	ldw	r9,1272(sp)
   24274:	da013f17 	ldw	r8,1276(sp)
   24278:	d8813115 	stw	r2,1220(sp)
   2427c:	4839883a 	mov	fp,r9
   24280:	dac13117 	ldw	r11,1220(sp)
   24284:	00801184 	movi	r2,70
   24288:	5f15883a 	add	r10,r11,fp
   2428c:	a8bef01e 	bne	r21,r2,23e50 <__alt_data_end+0xfffe4a50>
   24290:	59000007 	ldb	r4,0(r11)
   24294:	00800c04 	movi	r2,48
   24298:	2080e026 	beq	r4,r2,2461c <___vfprintf_internal_r+0x1f2c>
   2429c:	d8c12617 	ldw	r3,1176(sp)
   242a0:	50d5883a 	add	r10,r10,r3
   242a4:	003eea06 	br	23e50 <__alt_data_end+0xfffe4a50>
   242a8:	0025883a 	mov	r18,zero
   242ac:	003db306 	br	2397c <__alt_data_end+0xfffe457c>
   242b0:	b009883a 	mov	r4,r22
   242b4:	b80b883a 	mov	r5,r23
   242b8:	d9811e04 	addi	r6,sp,1144
   242bc:	00299380 	call	29938 <__sprint_r>
   242c0:	103a221e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   242c4:	d8c12017 	ldw	r3,1152(sp)
   242c8:	da000404 	addi	r8,sp,16
   242cc:	003daa06 	br	23978 <__alt_data_end+0xfffe4578>
   242d0:	b009883a 	mov	r4,r22
   242d4:	b80b883a 	mov	r5,r23
   242d8:	d9811e04 	addi	r6,sp,1144
   242dc:	00299380 	call	29938 <__sprint_r>
   242e0:	103a1a1e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   242e4:	d8812617 	ldw	r2,1176(sp)
   242e8:	d8c12017 	ldw	r3,1152(sp)
   242ec:	da000404 	addi	r8,sp,16
   242f0:	003e2c06 	br	23ba4 <__alt_data_end+0xfffe47a4>
   242f4:	030000f4 	movhi	r12,3
   242f8:	633fa984 	addi	r12,r12,-346
   242fc:	db012c15 	stw	r12,1200(sp)
   24300:	dac12c17 	ldw	r11,1200(sp)
   24304:	1c07883a 	add	r3,r3,r16
   24308:	10800044 	addi	r2,r2,1
   2430c:	42c00015 	stw	r11,0(r8)
   24310:	44000115 	stw	r16,4(r8)
   24314:	d8c12015 	stw	r3,1152(sp)
   24318:	d8811f15 	stw	r2,1148(sp)
   2431c:	010001c4 	movi	r4,7
   24320:	20bfae16 	blt	r4,r2,241dc <__alt_data_end+0xfffe4ddc>
   24324:	42000204 	addi	r8,r8,8
   24328:	003fb406 	br	241fc <__alt_data_end+0xfffe4dfc>
   2432c:	030000f4 	movhi	r12,3
   24330:	633fad84 	addi	r12,r12,-330
   24334:	db013615 	stw	r12,1240(sp)
   24338:	003b3806 	br	2301c <__alt_data_end+0xfffe3c1c>
   2433c:	b009883a 	mov	r4,r22
   24340:	b80b883a 	mov	r5,r23
   24344:	d9811e04 	addi	r6,sp,1144
   24348:	00299380 	call	29938 <__sprint_r>
   2434c:	1039ff1e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   24350:	d8812617 	ldw	r2,1176(sp)
   24354:	db013317 	ldw	r12,1228(sp)
   24358:	d8c12017 	ldw	r3,1152(sp)
   2435c:	da000404 	addi	r8,sp,16
   24360:	6085c83a 	sub	r2,r12,r2
   24364:	003e2006 	br	23be8 <__alt_data_end+0xfffe47e8>
   24368:	0021883a 	mov	r16,zero
   2436c:	003e1f06 	br	23bec <__alt_data_end+0xfffe47ec>
   24370:	00800184 	movi	r2,6
   24374:	1240012e 	bgeu	r2,r9,2437c <___vfprintf_internal_r+0x1c8c>
   24378:	1013883a 	mov	r9,r2
   2437c:	4825883a 	mov	r18,r9
   24380:	4805883a 	mov	r2,r9
   24384:	48009e16 	blt	r9,zero,24600 <___vfprintf_internal_r+0x1f10>
   24388:	d8812b15 	stw	r2,1196(sp)
   2438c:	008000f4 	movhi	r2,3
   24390:	10bfa704 	addi	r2,r2,-356
   24394:	d8813115 	stw	r2,1220(sp)
   24398:	dcc12d15 	stw	r19,1204(sp)
   2439c:	d8013215 	stw	zero,1224(sp)
   243a0:	d8013415 	stw	zero,1232(sp)
   243a4:	0005883a 	mov	r2,zero
   243a8:	003a6c06 	br	22d5c <__alt_data_end+0xfffe395c>
   243ac:	008000f4 	movhi	r2,3
   243b0:	10bf9c04 	addi	r2,r2,-400
   243b4:	d8813115 	stw	r2,1220(sp)
   243b8:	003f4c06 	br	240ec <__alt_data_end+0xfffe4cec>
   243bc:	00c00b44 	movi	r3,45
   243c0:	d8812b15 	stw	r2,1196(sp)
   243c4:	dc412d17 	ldw	r17,1204(sp)
   243c8:	d8c12785 	stb	r3,1182(sp)
   243cc:	dcc12d15 	stw	r19,1204(sp)
   243d0:	d8013215 	stw	zero,1224(sp)
   243d4:	00800b44 	movi	r2,45
   243d8:	003a5d06 	br	22d50 <__alt_data_end+0xfffe3950>
   243dc:	d8c12617 	ldw	r3,1176(sp)
   243e0:	00bfff44 	movi	r2,-3
   243e4:	18800d16 	blt	r3,r2,2441c <___vfprintf_internal_r+0x1d2c>
   243e8:	48c00c16 	blt	r9,r3,2441c <___vfprintf_internal_r+0x1d2c>
   243ec:	d8c13415 	stw	r3,1232(sp)
   243f0:	040019c4 	movi	r16,103
   243f4:	003eb506 	br	23ecc <__alt_data_end+0xfffe4acc>
   243f8:	05400b44 	movi	r21,45
   243fc:	dd412785 	stb	r21,1182(sp)
   24400:	003a0f06 	br	22c40 <__alt_data_end+0xfffe3840>
   24404:	010000f4 	movhi	r4,3
   24408:	213fa984 	addi	r4,r4,-346
   2440c:	d9012c15 	stw	r4,1200(sp)
   24410:	003cb106 	br	236d8 <__alt_data_end+0xfffe42d8>
   24414:	5005883a 	mov	r2,r10
   24418:	003ea106 	br	23ea0 <__alt_data_end+0xfffe4aa0>
   2441c:	843fff84 	addi	r16,r16,-2
   24420:	1f3fffc4 	addi	fp,r3,-1
   24424:	df012615 	stw	fp,1176(sp)
   24428:	dc0122c5 	stb	r16,1163(sp)
   2442c:	e0009516 	blt	fp,zero,24684 <___vfprintf_internal_r+0x1f94>
   24430:	00800ac4 	movi	r2,43
   24434:	d8812305 	stb	r2,1164(sp)
   24438:	00800244 	movi	r2,9
   2443c:	1700690e 	bge	r2,fp,245e4 <___vfprintf_internal_r+0x1ef4>
   24440:	dd4122c4 	addi	r21,sp,1163
   24444:	dc012c15 	stw	r16,1200(sp)
   24448:	8825883a 	mov	r18,r17
   2444c:	a821883a 	mov	r16,r21
   24450:	4023883a 	mov	r17,r8
   24454:	e009883a 	mov	r4,fp
   24458:	01400284 	movi	r5,10
   2445c:	00224b80 	call	224b8 <__modsi3>
   24460:	10800c04 	addi	r2,r2,48
   24464:	843fffc4 	addi	r16,r16,-1
   24468:	e009883a 	mov	r4,fp
   2446c:	01400284 	movi	r5,10
   24470:	80800005 	stb	r2,0(r16)
   24474:	00224640 	call	22464 <__divsi3>
   24478:	1039883a 	mov	fp,r2
   2447c:	00800244 	movi	r2,9
   24480:	173ff416 	blt	r2,fp,24454 <__alt_data_end+0xfffe5054>
   24484:	8811883a 	mov	r8,r17
   24488:	e0800c04 	addi	r2,fp,48
   2448c:	9023883a 	mov	r17,r18
   24490:	8025883a 	mov	r18,r16
   24494:	913fffc4 	addi	r4,r18,-1
   24498:	90bfffc5 	stb	r2,-1(r18)
   2449c:	dc012c17 	ldw	r16,1200(sp)
   244a0:	25408e2e 	bgeu	r4,r21,246dc <___vfprintf_internal_r+0x1fec>
   244a4:	d9412384 	addi	r5,sp,1166
   244a8:	2c8bc83a 	sub	r5,r5,r18
   244ac:	d8c12344 	addi	r3,sp,1165
   244b0:	a94b883a 	add	r5,r21,r5
   244b4:	00000106 	br	244bc <___vfprintf_internal_r+0x1dcc>
   244b8:	20800003 	ldbu	r2,0(r4)
   244bc:	18800005 	stb	r2,0(r3)
   244c0:	18c00044 	addi	r3,r3,1
   244c4:	21000044 	addi	r4,r4,1
   244c8:	197ffb1e 	bne	r3,r5,244b8 <__alt_data_end+0xfffe50b8>
   244cc:	d8812304 	addi	r2,sp,1164
   244d0:	1485c83a 	sub	r2,r2,r18
   244d4:	d8c12344 	addi	r3,sp,1165
   244d8:	1885883a 	add	r2,r3,r2
   244dc:	dac13317 	ldw	r11,1228(sp)
   244e0:	156bc83a 	sub	r21,r2,r21
   244e4:	dd413a15 	stw	r21,1256(sp)
   244e8:	00800044 	movi	r2,1
   244ec:	5d65883a 	add	r18,r11,r21
   244f0:	12c0770e 	bge	r2,r11,246d0 <___vfprintf_internal_r+0x1fe0>
   244f4:	94800044 	addi	r18,r18,1
   244f8:	9005883a 	mov	r2,r18
   244fc:	90007216 	blt	r18,zero,246c8 <___vfprintf_internal_r+0x1fd8>
   24500:	d8013415 	stw	zero,1232(sp)
   24504:	003e7906 	br	23eec <__alt_data_end+0xfffe4aec>
   24508:	da412b15 	stw	r9,1196(sp)
   2450c:	dd412783 	ldbu	r21,1182(sp)
   24510:	4825883a 	mov	r18,r9
   24514:	dcc12d15 	stw	r19,1204(sp)
   24518:	d8013215 	stw	zero,1224(sp)
   2451c:	d8013415 	stw	zero,1232(sp)
   24520:	003a0706 	br	22d40 <__alt_data_end+0xfffe3940>
   24524:	b009883a 	mov	r4,r22
   24528:	b80b883a 	mov	r5,r23
   2452c:	d9811e04 	addi	r6,sp,1144
   24530:	00299380 	call	29938 <__sprint_r>
   24534:	1039851e 	bne	r2,zero,22b4c <__alt_data_end+0xfffe374c>
   24538:	dc012617 	ldw	r16,1176(sp)
   2453c:	d8c12017 	ldw	r3,1152(sp)
   24540:	d8811f17 	ldw	r2,1148(sp)
   24544:	da000404 	addi	r8,sp,16
   24548:	003ec706 	br	24068 <__alt_data_end+0xfffe4c68>
   2454c:	483e1a1e 	bne	r9,zero,23db8 <__alt_data_end+0xfffe49b8>
   24550:	9013883a 	mov	r9,r18
   24554:	003e1806 	br	23db8 <__alt_data_end+0xfffe49b8>
   24558:	00c00b44 	movi	r3,45
   2455c:	64a0003c 	xorhi	r18,r12,32768
   24560:	d8c12b05 	stb	r3,1196(sp)
   24564:	003e1a06 	br	23dd0 <__alt_data_end+0xfffe49d0>
   24568:	4f000044 	addi	fp,r9,1
   2456c:	003e1f06 	br	23dec <__alt_data_end+0xfffe49ec>
   24570:	02400184 	movi	r9,6
   24574:	003e1006 	br	23db8 <__alt_data_end+0xfffe49b8>
   24578:	d8c13417 	ldw	r3,1232(sp)
   2457c:	00c04b0e 	bge	zero,r3,246ac <___vfprintf_internal_r+0x1fbc>
   24580:	04800044 	movi	r18,1
   24584:	dac13317 	ldw	r11,1228(sp)
   24588:	92e5883a 	add	r18,r18,r11
   2458c:	9005883a 	mov	r2,r18
   24590:	903e560e 	bge	r18,zero,23eec <__alt_data_end+0xfffe4aec>
   24594:	0005883a 	mov	r2,zero
   24598:	003e5406 	br	23eec <__alt_data_end+0xfffe4aec>
   2459c:	d8c12617 	ldw	r3,1176(sp)
   245a0:	d8c13415 	stw	r3,1232(sp)
   245a4:	00c03b0e 	bge	zero,r3,24694 <___vfprintf_internal_r+0x1fa4>
   245a8:	4800081e 	bne	r9,zero,245cc <___vfprintf_internal_r+0x1edc>
   245ac:	8c40004c 	andi	r17,r17,1
   245b0:	8800061e 	bne	r17,zero,245cc <___vfprintf_internal_r+0x1edc>
   245b4:	1805883a 	mov	r2,r3
   245b8:	183e4b0e 	bge	r3,zero,23ee8 <__alt_data_end+0xfffe4ae8>
   245bc:	0005883a 	mov	r2,zero
   245c0:	003e4906 	br	23ee8 <__alt_data_end+0xfffe4ae8>
   245c4:	d8812117 	ldw	r2,1156(sp)
   245c8:	003e3506 	br	23ea0 <__alt_data_end+0xfffe4aa0>
   245cc:	dac13417 	ldw	r11,1232(sp)
   245d0:	4a400044 	addi	r9,r9,1
   245d4:	5a65883a 	add	r18,r11,r9
   245d8:	9005883a 	mov	r2,r18
   245dc:	903e430e 	bge	r18,zero,23eec <__alt_data_end+0xfffe4aec>
   245e0:	003fec06 	br	24594 <__alt_data_end+0xfffe5194>
   245e4:	00800c04 	movi	r2,48
   245e8:	e0c00c04 	addi	r3,fp,48
   245ec:	d8812345 	stb	r2,1165(sp)
   245f0:	d8c12385 	stb	r3,1166(sp)
   245f4:	d88123c4 	addi	r2,sp,1167
   245f8:	dd4122c4 	addi	r21,sp,1163
   245fc:	003fb706 	br	244dc <__alt_data_end+0xfffe50dc>
   24600:	0005883a 	mov	r2,zero
   24604:	003f6006 	br	24388 <__alt_data_end+0xfffe4f88>
   24608:	db013417 	ldw	r12,1232(sp)
   2460c:	64800044 	addi	r18,r12,1
   24610:	9005883a 	mov	r2,r18
   24614:	903e350e 	bge	r18,zero,23eec <__alt_data_end+0xfffe4aec>
   24618:	003fde06 	br	24594 <__alt_data_end+0xfffe5194>
   2461c:	d9013717 	ldw	r4,1244(sp)
   24620:	900b883a 	mov	r5,r18
   24624:	000d883a 	mov	r6,zero
   24628:	000f883a 	mov	r7,zero
   2462c:	da013f15 	stw	r8,1276(sp)
   24630:	da413e15 	stw	r9,1272(sp)
   24634:	da813d15 	stw	r10,1268(sp)
   24638:	002c9f40 	call	2c9f4 <__eqdf2>
   2463c:	da013f17 	ldw	r8,1276(sp)
   24640:	da413e17 	ldw	r9,1272(sp)
   24644:	da813d17 	ldw	r10,1268(sp)
   24648:	103f1426 	beq	r2,zero,2429c <__alt_data_end+0xfffe4e9c>
   2464c:	00800044 	movi	r2,1
   24650:	1707c83a 	sub	r3,r2,fp
   24654:	d8c12615 	stw	r3,1176(sp)
   24658:	003f1106 	br	242a0 <__alt_data_end+0xfffe4ea0>
   2465c:	dac12d17 	ldw	r11,1204(sp)
   24660:	5a400017 	ldw	r9,0(r11)
   24664:	5ac00104 	addi	r11,r11,4
   24668:	dac12d15 	stw	r11,1204(sp)
   2466c:	483ec60e 	bge	r9,zero,24188 <__alt_data_end+0xfffe4d88>
   24670:	027fffc4 	movi	r9,-1
   24674:	1c000047 	ldb	r16,1(r3)
   24678:	00388406 	br	2288c <__alt_data_end+0xfffe348c>
   2467c:	043fffc4 	movi	r16,-1
   24680:	00391006 	br	22ac4 <__alt_data_end+0xfffe36c4>
   24684:	00800b44 	movi	r2,45
   24688:	0739c83a 	sub	fp,zero,fp
   2468c:	d8812305 	stb	r2,1164(sp)
   24690:	003f6906 	br	24438 <__alt_data_end+0xfffe5038>
   24694:	4800081e 	bne	r9,zero,246b8 <___vfprintf_internal_r+0x1fc8>
   24698:	8c40004c 	andi	r17,r17,1
   2469c:	8800061e 	bne	r17,zero,246b8 <___vfprintf_internal_r+0x1fc8>
   246a0:	00800044 	movi	r2,1
   246a4:	1025883a 	mov	r18,r2
   246a8:	003e1006 	br	23eec <__alt_data_end+0xfffe4aec>
   246ac:	04800084 	movi	r18,2
   246b0:	90e5c83a 	sub	r18,r18,r3
   246b4:	003fb306 	br	24584 <__alt_data_end+0xfffe5184>
   246b8:	4c800084 	addi	r18,r9,2
   246bc:	9005883a 	mov	r2,r18
   246c0:	903e0a0e 	bge	r18,zero,23eec <__alt_data_end+0xfffe4aec>
   246c4:	003fb306 	br	24594 <__alt_data_end+0xfffe5194>
   246c8:	0005883a 	mov	r2,zero
   246cc:	003f8c06 	br	24500 <__alt_data_end+0xfffe5100>
   246d0:	88a2703a 	and	r17,r17,r2
   246d4:	883f8826 	beq	r17,zero,244f8 <__alt_data_end+0xfffe50f8>
   246d8:	003f8606 	br	244f4 <__alt_data_end+0xfffe50f4>
   246dc:	d8812344 	addi	r2,sp,1165
   246e0:	003f7e06 	br	244dc <__alt_data_end+0xfffe50dc>
   246e4:	d8c12617 	ldw	r3,1176(sp)
   246e8:	003f4d06 	br	24420 <__alt_data_end+0xfffe5020>

000246ec <__vfprintf_internal>:
   246ec:	2007883a 	mov	r3,r4
   246f0:	010000f4 	movhi	r4,3
   246f4:	2106f204 	addi	r4,r4,7112
   246f8:	21000017 	ldw	r4,0(r4)
   246fc:	2805883a 	mov	r2,r5
   24700:	300f883a 	mov	r7,r6
   24704:	180b883a 	mov	r5,r3
   24708:	100d883a 	mov	r6,r2
   2470c:	00226f01 	jmpi	226f0 <___vfprintf_internal_r>

00024710 <__swsetup_r>:
   24710:	008000f4 	movhi	r2,3
   24714:	defffd04 	addi	sp,sp,-12
   24718:	1086f204 	addi	r2,r2,7112
   2471c:	dc400115 	stw	r17,4(sp)
   24720:	2023883a 	mov	r17,r4
   24724:	11000017 	ldw	r4,0(r2)
   24728:	dc000015 	stw	r16,0(sp)
   2472c:	dfc00215 	stw	ra,8(sp)
   24730:	2821883a 	mov	r16,r5
   24734:	20000226 	beq	r4,zero,24740 <__swsetup_r+0x30>
   24738:	20c00e17 	ldw	r3,56(r4)
   2473c:	18002e26 	beq	r3,zero,247f8 <__swsetup_r+0xe8>
   24740:	8080030b 	ldhu	r2,12(r16)
   24744:	10c0020c 	andi	r3,r2,8
   24748:	100d883a 	mov	r6,r2
   2474c:	18000f26 	beq	r3,zero,2478c <__swsetup_r+0x7c>
   24750:	80c00417 	ldw	r3,16(r16)
   24754:	18001526 	beq	r3,zero,247ac <__swsetup_r+0x9c>
   24758:	1100004c 	andi	r4,r2,1
   2475c:	20001c1e 	bne	r4,zero,247d0 <__swsetup_r+0xc0>
   24760:	1080008c 	andi	r2,r2,2
   24764:	1000261e 	bne	r2,zero,24800 <__swsetup_r+0xf0>
   24768:	80800517 	ldw	r2,20(r16)
   2476c:	80800215 	stw	r2,8(r16)
   24770:	18001c26 	beq	r3,zero,247e4 <__swsetup_r+0xd4>
   24774:	0005883a 	mov	r2,zero
   24778:	dfc00217 	ldw	ra,8(sp)
   2477c:	dc400117 	ldw	r17,4(sp)
   24780:	dc000017 	ldw	r16,0(sp)
   24784:	dec00304 	addi	sp,sp,12
   24788:	f800283a 	ret
   2478c:	3080040c 	andi	r2,r6,16
   24790:	10001726 	beq	r2,zero,247f0 <__swsetup_r+0xe0>
   24794:	3080010c 	andi	r2,r6,4
   24798:	10001b1e 	bne	r2,zero,24808 <__swsetup_r+0xf8>
   2479c:	80c00417 	ldw	r3,16(r16)
   247a0:	30800214 	ori	r2,r6,8
   247a4:	8080030d 	sth	r2,12(r16)
   247a8:	183feb1e 	bne	r3,zero,24758 <__alt_data_end+0xfffe5358>
   247ac:	1140a00c 	andi	r5,r2,640
   247b0:	01008004 	movi	r4,512
   247b4:	293fe826 	beq	r5,r4,24758 <__alt_data_end+0xfffe5358>
   247b8:	8809883a 	mov	r4,r17
   247bc:	800b883a 	mov	r5,r16
   247c0:	00272680 	call	27268 <__smakebuf_r>
   247c4:	8080030b 	ldhu	r2,12(r16)
   247c8:	80c00417 	ldw	r3,16(r16)
   247cc:	003fe206 	br	24758 <__alt_data_end+0xfffe5358>
   247d0:	80800517 	ldw	r2,20(r16)
   247d4:	80000215 	stw	zero,8(r16)
   247d8:	0085c83a 	sub	r2,zero,r2
   247dc:	80800615 	stw	r2,24(r16)
   247e0:	183fe41e 	bne	r3,zero,24774 <__alt_data_end+0xfffe5374>
   247e4:	8080030b 	ldhu	r2,12(r16)
   247e8:	1080200c 	andi	r2,r2,128
   247ec:	103fe226 	beq	r2,zero,24778 <__alt_data_end+0xfffe5378>
   247f0:	00bfffc4 	movi	r2,-1
   247f4:	003fe006 	br	24778 <__alt_data_end+0xfffe5378>
   247f8:	00267100 	call	26710 <__sinit>
   247fc:	003fd006 	br	24740 <__alt_data_end+0xfffe5340>
   24800:	0005883a 	mov	r2,zero
   24804:	003fd906 	br	2476c <__alt_data_end+0xfffe536c>
   24808:	81400c17 	ldw	r5,48(r16)
   2480c:	28000626 	beq	r5,zero,24828 <__swsetup_r+0x118>
   24810:	80801004 	addi	r2,r16,64
   24814:	28800326 	beq	r5,r2,24824 <__swsetup_r+0x114>
   24818:	8809883a 	mov	r4,r17
   2481c:	00268840 	call	26884 <_free_r>
   24820:	8180030b 	ldhu	r6,12(r16)
   24824:	80000c15 	stw	zero,48(r16)
   24828:	80c00417 	ldw	r3,16(r16)
   2482c:	00bff6c4 	movi	r2,-37
   24830:	118c703a 	and	r6,r2,r6
   24834:	80000115 	stw	zero,4(r16)
   24838:	80c00015 	stw	r3,0(r16)
   2483c:	003fd806 	br	247a0 <__alt_data_end+0xfffe53a0>

00024840 <quorem>:
   24840:	defff704 	addi	sp,sp,-36
   24844:	dc800215 	stw	r18,8(sp)
   24848:	20800417 	ldw	r2,16(r4)
   2484c:	2c800417 	ldw	r18,16(r5)
   24850:	dfc00815 	stw	ra,32(sp)
   24854:	ddc00715 	stw	r23,28(sp)
   24858:	dd800615 	stw	r22,24(sp)
   2485c:	dd400515 	stw	r21,20(sp)
   24860:	dd000415 	stw	r20,16(sp)
   24864:	dcc00315 	stw	r19,12(sp)
   24868:	dc400115 	stw	r17,4(sp)
   2486c:	dc000015 	stw	r16,0(sp)
   24870:	14807116 	blt	r2,r18,24a38 <quorem+0x1f8>
   24874:	94bfffc4 	addi	r18,r18,-1
   24878:	94ad883a 	add	r22,r18,r18
   2487c:	b5ad883a 	add	r22,r22,r22
   24880:	2c400504 	addi	r17,r5,20
   24884:	8da9883a 	add	r20,r17,r22
   24888:	25400504 	addi	r21,r4,20
   2488c:	282f883a 	mov	r23,r5
   24890:	adad883a 	add	r22,r21,r22
   24894:	a1400017 	ldw	r5,0(r20)
   24898:	2021883a 	mov	r16,r4
   2489c:	b1000017 	ldw	r4,0(r22)
   248a0:	29400044 	addi	r5,r5,1
   248a4:	00225140 	call	22514 <__udivsi3>
   248a8:	1027883a 	mov	r19,r2
   248ac:	10002c26 	beq	r2,zero,24960 <quorem+0x120>
   248b0:	a813883a 	mov	r9,r21
   248b4:	8811883a 	mov	r8,r17
   248b8:	0009883a 	mov	r4,zero
   248bc:	000d883a 	mov	r6,zero
   248c0:	41c00017 	ldw	r7,0(r8)
   248c4:	49400017 	ldw	r5,0(r9)
   248c8:	42000104 	addi	r8,r8,4
   248cc:	38bfffcc 	andi	r2,r7,65535
   248d0:	14c5383a 	mul	r2,r2,r19
   248d4:	380ed43a 	srli	r7,r7,16
   248d8:	28ffffcc 	andi	r3,r5,65535
   248dc:	2085883a 	add	r2,r4,r2
   248e0:	1008d43a 	srli	r4,r2,16
   248e4:	3ccf383a 	mul	r7,r7,r19
   248e8:	198d883a 	add	r6,r3,r6
   248ec:	10ffffcc 	andi	r3,r2,65535
   248f0:	30c7c83a 	sub	r3,r6,r3
   248f4:	280ad43a 	srli	r5,r5,16
   248f8:	21c9883a 	add	r4,r4,r7
   248fc:	180dd43a 	srai	r6,r3,16
   24900:	20bfffcc 	andi	r2,r4,65535
   24904:	288bc83a 	sub	r5,r5,r2
   24908:	298b883a 	add	r5,r5,r6
   2490c:	280e943a 	slli	r7,r5,16
   24910:	18ffffcc 	andi	r3,r3,65535
   24914:	2008d43a 	srli	r4,r4,16
   24918:	38ceb03a 	or	r7,r7,r3
   2491c:	49c00015 	stw	r7,0(r9)
   24920:	280dd43a 	srai	r6,r5,16
   24924:	4a400104 	addi	r9,r9,4
   24928:	a23fe52e 	bgeu	r20,r8,248c0 <__alt_data_end+0xfffe54c0>
   2492c:	b0800017 	ldw	r2,0(r22)
   24930:	10000b1e 	bne	r2,zero,24960 <quorem+0x120>
   24934:	b0bfff04 	addi	r2,r22,-4
   24938:	a880082e 	bgeu	r21,r2,2495c <quorem+0x11c>
   2493c:	b0ffff17 	ldw	r3,-4(r22)
   24940:	18000326 	beq	r3,zero,24950 <quorem+0x110>
   24944:	00000506 	br	2495c <quorem+0x11c>
   24948:	10c00017 	ldw	r3,0(r2)
   2494c:	1800031e 	bne	r3,zero,2495c <quorem+0x11c>
   24950:	10bfff04 	addi	r2,r2,-4
   24954:	94bfffc4 	addi	r18,r18,-1
   24958:	a8bffb36 	bltu	r21,r2,24948 <__alt_data_end+0xfffe5548>
   2495c:	84800415 	stw	r18,16(r16)
   24960:	8009883a 	mov	r4,r16
   24964:	b80b883a 	mov	r5,r23
   24968:	00289280 	call	28928 <__mcmp>
   2496c:	10002616 	blt	r2,zero,24a08 <quorem+0x1c8>
   24970:	9cc00044 	addi	r19,r19,1
   24974:	a80d883a 	mov	r6,r21
   24978:	000b883a 	mov	r5,zero
   2497c:	31000017 	ldw	r4,0(r6)
   24980:	88800017 	ldw	r2,0(r17)
   24984:	31800104 	addi	r6,r6,4
   24988:	20ffffcc 	andi	r3,r4,65535
   2498c:	194b883a 	add	r5,r3,r5
   24990:	10ffffcc 	andi	r3,r2,65535
   24994:	28c7c83a 	sub	r3,r5,r3
   24998:	1004d43a 	srli	r2,r2,16
   2499c:	2008d43a 	srli	r4,r4,16
   249a0:	180bd43a 	srai	r5,r3,16
   249a4:	18ffffcc 	andi	r3,r3,65535
   249a8:	2089c83a 	sub	r4,r4,r2
   249ac:	2149883a 	add	r4,r4,r5
   249b0:	2004943a 	slli	r2,r4,16
   249b4:	8c400104 	addi	r17,r17,4
   249b8:	200bd43a 	srai	r5,r4,16
   249bc:	10c6b03a 	or	r3,r2,r3
   249c0:	30ffff15 	stw	r3,-4(r6)
   249c4:	a47fed2e 	bgeu	r20,r17,2497c <__alt_data_end+0xfffe557c>
   249c8:	9485883a 	add	r2,r18,r18
   249cc:	1085883a 	add	r2,r2,r2
   249d0:	a887883a 	add	r3,r21,r2
   249d4:	18800017 	ldw	r2,0(r3)
   249d8:	10000b1e 	bne	r2,zero,24a08 <quorem+0x1c8>
   249dc:	18bfff04 	addi	r2,r3,-4
   249e0:	a880082e 	bgeu	r21,r2,24a04 <quorem+0x1c4>
   249e4:	18ffff17 	ldw	r3,-4(r3)
   249e8:	18000326 	beq	r3,zero,249f8 <quorem+0x1b8>
   249ec:	00000506 	br	24a04 <quorem+0x1c4>
   249f0:	10c00017 	ldw	r3,0(r2)
   249f4:	1800031e 	bne	r3,zero,24a04 <quorem+0x1c4>
   249f8:	10bfff04 	addi	r2,r2,-4
   249fc:	94bfffc4 	addi	r18,r18,-1
   24a00:	a8bffb36 	bltu	r21,r2,249f0 <__alt_data_end+0xfffe55f0>
   24a04:	84800415 	stw	r18,16(r16)
   24a08:	9805883a 	mov	r2,r19
   24a0c:	dfc00817 	ldw	ra,32(sp)
   24a10:	ddc00717 	ldw	r23,28(sp)
   24a14:	dd800617 	ldw	r22,24(sp)
   24a18:	dd400517 	ldw	r21,20(sp)
   24a1c:	dd000417 	ldw	r20,16(sp)
   24a20:	dcc00317 	ldw	r19,12(sp)
   24a24:	dc800217 	ldw	r18,8(sp)
   24a28:	dc400117 	ldw	r17,4(sp)
   24a2c:	dc000017 	ldw	r16,0(sp)
   24a30:	dec00904 	addi	sp,sp,36
   24a34:	f800283a 	ret
   24a38:	0005883a 	mov	r2,zero
   24a3c:	003ff306 	br	24a0c <__alt_data_end+0xfffe560c>

00024a40 <_dtoa_r>:
   24a40:	20801017 	ldw	r2,64(r4)
   24a44:	deffde04 	addi	sp,sp,-136
   24a48:	dd401d15 	stw	r21,116(sp)
   24a4c:	dcc01b15 	stw	r19,108(sp)
   24a50:	dc801a15 	stw	r18,104(sp)
   24a54:	dc401915 	stw	r17,100(sp)
   24a58:	dc001815 	stw	r16,96(sp)
   24a5c:	dfc02115 	stw	ra,132(sp)
   24a60:	df002015 	stw	fp,128(sp)
   24a64:	ddc01f15 	stw	r23,124(sp)
   24a68:	dd801e15 	stw	r22,120(sp)
   24a6c:	dd001c15 	stw	r20,112(sp)
   24a70:	d9c00315 	stw	r7,12(sp)
   24a74:	2021883a 	mov	r16,r4
   24a78:	302b883a 	mov	r21,r6
   24a7c:	2825883a 	mov	r18,r5
   24a80:	dc402417 	ldw	r17,144(sp)
   24a84:	3027883a 	mov	r19,r6
   24a88:	10000826 	beq	r2,zero,24aac <_dtoa_r+0x6c>
   24a8c:	21801117 	ldw	r6,68(r4)
   24a90:	00c00044 	movi	r3,1
   24a94:	100b883a 	mov	r5,r2
   24a98:	1986983a 	sll	r3,r3,r6
   24a9c:	11800115 	stw	r6,4(r2)
   24aa0:	10c00215 	stw	r3,8(r2)
   24aa4:	00281100 	call	28110 <_Bfree>
   24aa8:	80001015 	stw	zero,64(r16)
   24aac:	a8002d16 	blt	r21,zero,24b64 <_dtoa_r+0x124>
   24ab0:	88000015 	stw	zero,0(r17)
   24ab4:	a8dffc2c 	andhi	r3,r21,32752
   24ab8:	009ffc34 	movhi	r2,32752
   24abc:	18801b26 	beq	r3,r2,24b2c <_dtoa_r+0xec>
   24ac0:	9009883a 	mov	r4,r18
   24ac4:	980b883a 	mov	r5,r19
   24ac8:	000d883a 	mov	r6,zero
   24acc:	000f883a 	mov	r7,zero
   24ad0:	002c9f40 	call	2c9f4 <__eqdf2>
   24ad4:	10002a1e 	bne	r2,zero,24b80 <_dtoa_r+0x140>
   24ad8:	d8c02317 	ldw	r3,140(sp)
   24adc:	d9002517 	ldw	r4,148(sp)
   24ae0:	00800044 	movi	r2,1
   24ae4:	18800015 	stw	r2,0(r3)
   24ae8:	2001a226 	beq	r4,zero,25174 <_dtoa_r+0x734>
   24aec:	008000f4 	movhi	r2,3
   24af0:	10bfa944 	addi	r2,r2,-347
   24af4:	20800015 	stw	r2,0(r4)
   24af8:	10bfffc4 	addi	r2,r2,-1
   24afc:	dfc02117 	ldw	ra,132(sp)
   24b00:	df002017 	ldw	fp,128(sp)
   24b04:	ddc01f17 	ldw	r23,124(sp)
   24b08:	dd801e17 	ldw	r22,120(sp)
   24b0c:	dd401d17 	ldw	r21,116(sp)
   24b10:	dd001c17 	ldw	r20,112(sp)
   24b14:	dcc01b17 	ldw	r19,108(sp)
   24b18:	dc801a17 	ldw	r18,104(sp)
   24b1c:	dc401917 	ldw	r17,100(sp)
   24b20:	dc001817 	ldw	r16,96(sp)
   24b24:	dec02204 	addi	sp,sp,136
   24b28:	f800283a 	ret
   24b2c:	d8c02317 	ldw	r3,140(sp)
   24b30:	0089c3c4 	movi	r2,9999
   24b34:	18800015 	stw	r2,0(r3)
   24b38:	90017c26 	beq	r18,zero,2512c <_dtoa_r+0x6ec>
   24b3c:	008000f4 	movhi	r2,3
   24b40:	10bfb504 	addi	r2,r2,-300
   24b44:	d9002517 	ldw	r4,148(sp)
   24b48:	203fec26 	beq	r4,zero,24afc <__alt_data_end+0xfffe56fc>
   24b4c:	10c000c7 	ldb	r3,3(r2)
   24b50:	18017d1e 	bne	r3,zero,25148 <_dtoa_r+0x708>
   24b54:	10c000c4 	addi	r3,r2,3
   24b58:	d9802517 	ldw	r6,148(sp)
   24b5c:	30c00015 	stw	r3,0(r6)
   24b60:	003fe606 	br	24afc <__alt_data_end+0xfffe56fc>
   24b64:	04e00034 	movhi	r19,32768
   24b68:	9cffffc4 	addi	r19,r19,-1
   24b6c:	00800044 	movi	r2,1
   24b70:	ace6703a 	and	r19,r21,r19
   24b74:	88800015 	stw	r2,0(r17)
   24b78:	982b883a 	mov	r21,r19
   24b7c:	003fcd06 	br	24ab4 <__alt_data_end+0xfffe56b4>
   24b80:	d8800204 	addi	r2,sp,8
   24b84:	a822d53a 	srli	r17,r21,20
   24b88:	d8800015 	stw	r2,0(sp)
   24b8c:	8009883a 	mov	r4,r16
   24b90:	900b883a 	mov	r5,r18
   24b94:	980d883a 	mov	r6,r19
   24b98:	d9c00104 	addi	r7,sp,4
   24b9c:	0028c9c0 	call	28c9c <__d2b>
   24ba0:	1039883a 	mov	fp,r2
   24ba4:	88016a1e 	bne	r17,zero,25150 <_dtoa_r+0x710>
   24ba8:	dd000217 	ldw	r20,8(sp)
   24bac:	dc400117 	ldw	r17,4(sp)
   24bb0:	00befbc4 	movi	r2,-1041
   24bb4:	a463883a 	add	r17,r20,r17
   24bb8:	8882ea16 	blt	r17,r2,25764 <_dtoa_r+0xd24>
   24bbc:	00bf0384 	movi	r2,-1010
   24bc0:	1445c83a 	sub	r2,r2,r17
   24bc4:	89010484 	addi	r4,r17,1042
   24bc8:	a8aa983a 	sll	r21,r21,r2
   24bcc:	9108d83a 	srl	r4,r18,r4
   24bd0:	a908b03a 	or	r4,r21,r4
   24bd4:	002cd080 	call	2cd08 <__floatunsidf>
   24bd8:	017f8434 	movhi	r5,65040
   24bdc:	01800044 	movi	r6,1
   24be0:	1009883a 	mov	r4,r2
   24be4:	194b883a 	add	r5,r3,r5
   24be8:	8c7fffc4 	addi	r17,r17,-1
   24bec:	d9800f15 	stw	r6,60(sp)
   24bf0:	000d883a 	mov	r6,zero
   24bf4:	01cffe34 	movhi	r7,16376
   24bf8:	00217940 	call	21794 <__subdf3>
   24bfc:	0198dbf4 	movhi	r6,25455
   24c00:	01cff4f4 	movhi	r7,16339
   24c04:	1009883a 	mov	r4,r2
   24c08:	180b883a 	mov	r5,r3
   24c0c:	3190d844 	addi	r6,r6,17249
   24c10:	39e1e9c4 	addi	r7,r7,-30809
   24c14:	00210700 	call	21070 <__muldf3>
   24c18:	01a2d874 	movhi	r6,35681
   24c1c:	01cff1f4 	movhi	r7,16327
   24c20:	180b883a 	mov	r5,r3
   24c24:	31b22cc4 	addi	r6,r6,-14157
   24c28:	39e28a04 	addi	r7,r7,-30168
   24c2c:	1009883a 	mov	r4,r2
   24c30:	002c1580 	call	2c158 <__adddf3>
   24c34:	8809883a 	mov	r4,r17
   24c38:	102d883a 	mov	r22,r2
   24c3c:	182b883a 	mov	r21,r3
   24c40:	002cc380 	call	2cc38 <__floatsidf>
   24c44:	019427f4 	movhi	r6,20639
   24c48:	01cff4f4 	movhi	r7,16339
   24c4c:	1009883a 	mov	r4,r2
   24c50:	180b883a 	mov	r5,r3
   24c54:	319e7ec4 	addi	r6,r6,31227
   24c58:	39d104c4 	addi	r7,r7,17427
   24c5c:	00210700 	call	21070 <__muldf3>
   24c60:	b009883a 	mov	r4,r22
   24c64:	a80b883a 	mov	r5,r21
   24c68:	100d883a 	mov	r6,r2
   24c6c:	180f883a 	mov	r7,r3
   24c70:	002c1580 	call	2c158 <__adddf3>
   24c74:	1009883a 	mov	r4,r2
   24c78:	180b883a 	mov	r5,r3
   24c7c:	102d883a 	mov	r22,r2
   24c80:	182b883a 	mov	r21,r3
   24c84:	00220640 	call	22064 <__fixdfsi>
   24c88:	b009883a 	mov	r4,r22
   24c8c:	a80b883a 	mov	r5,r21
   24c90:	000d883a 	mov	r6,zero
   24c94:	000f883a 	mov	r7,zero
   24c98:	d8800515 	stw	r2,20(sp)
   24c9c:	002cb580 	call	2cb58 <__ledf2>
   24ca0:	10023116 	blt	r2,zero,25568 <_dtoa_r+0xb28>
   24ca4:	d8c00517 	ldw	r3,20(sp)
   24ca8:	00800584 	movi	r2,22
   24cac:	10c21f36 	bltu	r2,r3,2552c <_dtoa_r+0xaec>
   24cb0:	180490fa 	slli	r2,r3,3
   24cb4:	00c000f4 	movhi	r3,3
   24cb8:	18ffd104 	addi	r3,r3,-188
   24cbc:	1885883a 	add	r2,r3,r2
   24cc0:	11000017 	ldw	r4,0(r2)
   24cc4:	11400117 	ldw	r5,4(r2)
   24cc8:	900d883a 	mov	r6,r18
   24ccc:	980f883a 	mov	r7,r19
   24cd0:	002ca780 	call	2ca78 <__gedf2>
   24cd4:	0082a70e 	bge	zero,r2,25774 <_dtoa_r+0xd34>
   24cd8:	d9000517 	ldw	r4,20(sp)
   24cdc:	d8000c15 	stw	zero,48(sp)
   24ce0:	213fffc4 	addi	r4,r4,-1
   24ce4:	d9000515 	stw	r4,20(sp)
   24ce8:	a463c83a 	sub	r17,r20,r17
   24cec:	8dbfffc4 	addi	r22,r17,-1
   24cf0:	b0021916 	blt	r22,zero,25558 <_dtoa_r+0xb18>
   24cf4:	d8000815 	stw	zero,32(sp)
   24cf8:	d8800517 	ldw	r2,20(sp)
   24cfc:	10020e16 	blt	r2,zero,25538 <_dtoa_r+0xaf8>
   24d00:	b0ad883a 	add	r22,r22,r2
   24d04:	d8800a15 	stw	r2,40(sp)
   24d08:	d8000915 	stw	zero,36(sp)
   24d0c:	d8c00317 	ldw	r3,12(sp)
   24d10:	00800244 	movi	r2,9
   24d14:	10c11a36 	bltu	r2,r3,25180 <_dtoa_r+0x740>
   24d18:	00800144 	movi	r2,5
   24d1c:	10c4fc0e 	bge	r2,r3,26110 <_dtoa_r+0x16d0>
   24d20:	18ffff04 	addi	r3,r3,-4
   24d24:	d8c00315 	stw	r3,12(sp)
   24d28:	0029883a 	mov	r20,zero
   24d2c:	d9800317 	ldw	r6,12(sp)
   24d30:	008000c4 	movi	r2,3
   24d34:	3083bd26 	beq	r6,r2,25c2c <_dtoa_r+0x11ec>
   24d38:	1183670e 	bge	r2,r6,25ad8 <_dtoa_r+0x1098>
   24d3c:	d8c00317 	ldw	r3,12(sp)
   24d40:	00800104 	movi	r2,4
   24d44:	1882e726 	beq	r3,r2,258e4 <_dtoa_r+0xea4>
   24d48:	00800144 	movi	r2,5
   24d4c:	1884f21e 	bne	r3,r2,26118 <_dtoa_r+0x16d8>
   24d50:	00800044 	movi	r2,1
   24d54:	d8800b15 	stw	r2,44(sp)
   24d58:	d8c02217 	ldw	r3,136(sp)
   24d5c:	d9000517 	ldw	r4,20(sp)
   24d60:	1907883a 	add	r3,r3,r4
   24d64:	19800044 	addi	r6,r3,1
   24d68:	d8c00d15 	stw	r3,52(sp)
   24d6c:	d9800615 	stw	r6,24(sp)
   24d70:	0183c30e 	bge	zero,r6,25c80 <_dtoa_r+0x1240>
   24d74:	d9800617 	ldw	r6,24(sp)
   24d78:	3023883a 	mov	r17,r6
   24d7c:	80001115 	stw	zero,68(r16)
   24d80:	008005c4 	movi	r2,23
   24d84:	1184f62e 	bgeu	r2,r6,26160 <_dtoa_r+0x1720>
   24d88:	00c00044 	movi	r3,1
   24d8c:	00800104 	movi	r2,4
   24d90:	1085883a 	add	r2,r2,r2
   24d94:	11000504 	addi	r4,r2,20
   24d98:	180b883a 	mov	r5,r3
   24d9c:	18c00044 	addi	r3,r3,1
   24da0:	313ffb2e 	bgeu	r6,r4,24d90 <__alt_data_end+0xfffe5990>
   24da4:	81401115 	stw	r5,68(r16)
   24da8:	8009883a 	mov	r4,r16
   24dac:	00280680 	call	28068 <_Balloc>
   24db0:	d8800715 	stw	r2,28(sp)
   24db4:	80801015 	stw	r2,64(r16)
   24db8:	00800384 	movi	r2,14
   24dbc:	1440fd36 	bltu	r2,r17,251b4 <_dtoa_r+0x774>
   24dc0:	a000fc26 	beq	r20,zero,251b4 <_dtoa_r+0x774>
   24dc4:	d8800517 	ldw	r2,20(sp)
   24dc8:	0083b90e 	bge	zero,r2,25cb0 <_dtoa_r+0x1270>
   24dcc:	d8c00517 	ldw	r3,20(sp)
   24dd0:	108003cc 	andi	r2,r2,15
   24dd4:	100490fa 	slli	r2,r2,3
   24dd8:	182fd13a 	srai	r23,r3,4
   24ddc:	00c000f4 	movhi	r3,3
   24de0:	18ffd104 	addi	r3,r3,-188
   24de4:	1885883a 	add	r2,r3,r2
   24de8:	b8c0040c 	andi	r3,r23,16
   24dec:	12c00017 	ldw	r11,0(r2)
   24df0:	12800117 	ldw	r10,4(r2)
   24df4:	18039726 	beq	r3,zero,25c54 <_dtoa_r+0x1214>
   24df8:	008000f4 	movhi	r2,3
   24dfc:	10bfc704 	addi	r2,r2,-228
   24e00:	11800817 	ldw	r6,32(r2)
   24e04:	11c00917 	ldw	r7,36(r2)
   24e08:	9009883a 	mov	r4,r18
   24e0c:	980b883a 	mov	r5,r19
   24e10:	da801615 	stw	r10,88(sp)
   24e14:	dac01515 	stw	r11,84(sp)
   24e18:	00207a40 	call	207a4 <__divdf3>
   24e1c:	da801617 	ldw	r10,88(sp)
   24e20:	dac01517 	ldw	r11,84(sp)
   24e24:	bdc003cc 	andi	r23,r23,15
   24e28:	044000c4 	movi	r17,3
   24e2c:	d8800e15 	stw	r2,56(sp)
   24e30:	182b883a 	mov	r21,r3
   24e34:	b8001126 	beq	r23,zero,24e7c <_dtoa_r+0x43c>
   24e38:	050000f4 	movhi	r20,3
   24e3c:	a53fc704 	addi	r20,r20,-228
   24e40:	5805883a 	mov	r2,r11
   24e44:	5007883a 	mov	r3,r10
   24e48:	b980004c 	andi	r6,r23,1
   24e4c:	1009883a 	mov	r4,r2
   24e50:	b82fd07a 	srai	r23,r23,1
   24e54:	180b883a 	mov	r5,r3
   24e58:	30000426 	beq	r6,zero,24e6c <_dtoa_r+0x42c>
   24e5c:	a1800017 	ldw	r6,0(r20)
   24e60:	a1c00117 	ldw	r7,4(r20)
   24e64:	8c400044 	addi	r17,r17,1
   24e68:	00210700 	call	21070 <__muldf3>
   24e6c:	a5000204 	addi	r20,r20,8
   24e70:	b83ff51e 	bne	r23,zero,24e48 <__alt_data_end+0xfffe5a48>
   24e74:	1017883a 	mov	r11,r2
   24e78:	1815883a 	mov	r10,r3
   24e7c:	d9000e17 	ldw	r4,56(sp)
   24e80:	a80b883a 	mov	r5,r21
   24e84:	580d883a 	mov	r6,r11
   24e88:	500f883a 	mov	r7,r10
   24e8c:	00207a40 	call	207a4 <__divdf3>
   24e90:	1029883a 	mov	r20,r2
   24e94:	182b883a 	mov	r21,r3
   24e98:	d9800c17 	ldw	r6,48(sp)
   24e9c:	30000626 	beq	r6,zero,24eb8 <_dtoa_r+0x478>
   24ea0:	a009883a 	mov	r4,r20
   24ea4:	a80b883a 	mov	r5,r21
   24ea8:	000d883a 	mov	r6,zero
   24eac:	01cffc34 	movhi	r7,16368
   24eb0:	002cb580 	call	2cb58 <__ledf2>
   24eb4:	10043216 	blt	r2,zero,25f80 <_dtoa_r+0x1540>
   24eb8:	8809883a 	mov	r4,r17
   24ebc:	002cc380 	call	2cc38 <__floatsidf>
   24ec0:	1009883a 	mov	r4,r2
   24ec4:	180b883a 	mov	r5,r3
   24ec8:	a00d883a 	mov	r6,r20
   24ecc:	a80f883a 	mov	r7,r21
   24ed0:	00210700 	call	21070 <__muldf3>
   24ed4:	000d883a 	mov	r6,zero
   24ed8:	1009883a 	mov	r4,r2
   24edc:	180b883a 	mov	r5,r3
   24ee0:	01d00734 	movhi	r7,16412
   24ee4:	002c1580 	call	2c158 <__adddf3>
   24ee8:	1023883a 	mov	r17,r2
   24eec:	d9800617 	ldw	r6,24(sp)
   24ef0:	00bf3034 	movhi	r2,64704
   24ef4:	1885883a 	add	r2,r3,r2
   24ef8:	d8800e15 	stw	r2,56(sp)
   24efc:	30032e26 	beq	r6,zero,25bb8 <_dtoa_r+0x1178>
   24f00:	d8c00517 	ldw	r3,20(sp)
   24f04:	da800617 	ldw	r10,24(sp)
   24f08:	d8c01215 	stw	r3,72(sp)
   24f0c:	d9000b17 	ldw	r4,44(sp)
   24f10:	2003b026 	beq	r4,zero,25dd4 <_dtoa_r+0x1394>
   24f14:	50bfffc4 	addi	r2,r10,-1
   24f18:	100490fa 	slli	r2,r2,3
   24f1c:	00c000f4 	movhi	r3,3
   24f20:	18ffd104 	addi	r3,r3,-188
   24f24:	1885883a 	add	r2,r3,r2
   24f28:	11800017 	ldw	r6,0(r2)
   24f2c:	11c00117 	ldw	r7,4(r2)
   24f30:	d8800717 	ldw	r2,28(sp)
   24f34:	0009883a 	mov	r4,zero
   24f38:	014ff834 	movhi	r5,16352
   24f3c:	da801615 	stw	r10,88(sp)
   24f40:	15c00044 	addi	r23,r2,1
   24f44:	00207a40 	call	207a4 <__divdf3>
   24f48:	d9c00e17 	ldw	r7,56(sp)
   24f4c:	880d883a 	mov	r6,r17
   24f50:	1009883a 	mov	r4,r2
   24f54:	180b883a 	mov	r5,r3
   24f58:	00217940 	call	21794 <__subdf3>
   24f5c:	a80b883a 	mov	r5,r21
   24f60:	a009883a 	mov	r4,r20
   24f64:	d8c01015 	stw	r3,64(sp)
   24f68:	d8800e15 	stw	r2,56(sp)
   24f6c:	00220640 	call	22064 <__fixdfsi>
   24f70:	1009883a 	mov	r4,r2
   24f74:	d8801715 	stw	r2,92(sp)
   24f78:	002cc380 	call	2cc38 <__floatsidf>
   24f7c:	a009883a 	mov	r4,r20
   24f80:	a80b883a 	mov	r5,r21
   24f84:	100d883a 	mov	r6,r2
   24f88:	180f883a 	mov	r7,r3
   24f8c:	00217940 	call	21794 <__subdf3>
   24f90:	da001717 	ldw	r8,92(sp)
   24f94:	1829883a 	mov	r20,r3
   24f98:	d8c00717 	ldw	r3,28(sp)
   24f9c:	d9000e17 	ldw	r4,56(sp)
   24fa0:	d9401017 	ldw	r5,64(sp)
   24fa4:	42000c04 	addi	r8,r8,48
   24fa8:	1023883a 	mov	r17,r2
   24fac:	1a000005 	stb	r8,0(r3)
   24fb0:	880d883a 	mov	r6,r17
   24fb4:	a00f883a 	mov	r7,r20
   24fb8:	402b883a 	mov	r21,r8
   24fbc:	002ca780 	call	2ca78 <__gedf2>
   24fc0:	00844516 	blt	zero,r2,260d8 <_dtoa_r+0x1698>
   24fc4:	0009883a 	mov	r4,zero
   24fc8:	014ffc34 	movhi	r5,16368
   24fcc:	880d883a 	mov	r6,r17
   24fd0:	a00f883a 	mov	r7,r20
   24fd4:	00217940 	call	21794 <__subdf3>
   24fd8:	d9000e17 	ldw	r4,56(sp)
   24fdc:	d9401017 	ldw	r5,64(sp)
   24fe0:	100d883a 	mov	r6,r2
   24fe4:	180f883a 	mov	r7,r3
   24fe8:	002ca780 	call	2ca78 <__gedf2>
   24fec:	da801617 	ldw	r10,88(sp)
   24ff0:	00843616 	blt	zero,r2,260cc <_dtoa_r+0x168c>
   24ff4:	00800044 	movi	r2,1
   24ff8:	12806e0e 	bge	r2,r10,251b4 <_dtoa_r+0x774>
   24ffc:	d9000717 	ldw	r4,28(sp)
   25000:	dd801315 	stw	r22,76(sp)
   25004:	dc001115 	stw	r16,68(sp)
   25008:	2295883a 	add	r10,r4,r10
   2500c:	dcc01415 	stw	r19,80(sp)
   25010:	502d883a 	mov	r22,r10
   25014:	dcc01017 	ldw	r19,64(sp)
   25018:	b821883a 	mov	r16,r23
   2501c:	dc801015 	stw	r18,64(sp)
   25020:	dc800e17 	ldw	r18,56(sp)
   25024:	00000906 	br	2504c <_dtoa_r+0x60c>
   25028:	00217940 	call	21794 <__subdf3>
   2502c:	1009883a 	mov	r4,r2
   25030:	180b883a 	mov	r5,r3
   25034:	900d883a 	mov	r6,r18
   25038:	980f883a 	mov	r7,r19
   2503c:	002cb580 	call	2cb58 <__ledf2>
   25040:	10040e16 	blt	r2,zero,2607c <_dtoa_r+0x163c>
   25044:	b821883a 	mov	r16,r23
   25048:	bd841026 	beq	r23,r22,2608c <_dtoa_r+0x164c>
   2504c:	9009883a 	mov	r4,r18
   25050:	980b883a 	mov	r5,r19
   25054:	000d883a 	mov	r6,zero
   25058:	01d00934 	movhi	r7,16420
   2505c:	00210700 	call	21070 <__muldf3>
   25060:	000d883a 	mov	r6,zero
   25064:	01d00934 	movhi	r7,16420
   25068:	8809883a 	mov	r4,r17
   2506c:	a00b883a 	mov	r5,r20
   25070:	1025883a 	mov	r18,r2
   25074:	1827883a 	mov	r19,r3
   25078:	00210700 	call	21070 <__muldf3>
   2507c:	180b883a 	mov	r5,r3
   25080:	1009883a 	mov	r4,r2
   25084:	1823883a 	mov	r17,r3
   25088:	1029883a 	mov	r20,r2
   2508c:	00220640 	call	22064 <__fixdfsi>
   25090:	1009883a 	mov	r4,r2
   25094:	102b883a 	mov	r21,r2
   25098:	002cc380 	call	2cc38 <__floatsidf>
   2509c:	a009883a 	mov	r4,r20
   250a0:	880b883a 	mov	r5,r17
   250a4:	100d883a 	mov	r6,r2
   250a8:	180f883a 	mov	r7,r3
   250ac:	00217940 	call	21794 <__subdf3>
   250b0:	ad400c04 	addi	r21,r21,48
   250b4:	1009883a 	mov	r4,r2
   250b8:	180b883a 	mov	r5,r3
   250bc:	900d883a 	mov	r6,r18
   250c0:	980f883a 	mov	r7,r19
   250c4:	85400005 	stb	r21,0(r16)
   250c8:	1023883a 	mov	r17,r2
   250cc:	1829883a 	mov	r20,r3
   250d0:	002cb580 	call	2cb58 <__ledf2>
   250d4:	bdc00044 	addi	r23,r23,1
   250d8:	0009883a 	mov	r4,zero
   250dc:	014ffc34 	movhi	r5,16368
   250e0:	880d883a 	mov	r6,r17
   250e4:	a00f883a 	mov	r7,r20
   250e8:	103fcf0e 	bge	r2,zero,25028 <__alt_data_end+0xfffe5c28>
   250ec:	d9801217 	ldw	r6,72(sp)
   250f0:	dc001117 	ldw	r16,68(sp)
   250f4:	d9800515 	stw	r6,20(sp)
   250f8:	8009883a 	mov	r4,r16
   250fc:	e00b883a 	mov	r5,fp
   25100:	00281100 	call	28110 <_Bfree>
   25104:	d8c00517 	ldw	r3,20(sp)
   25108:	d9002317 	ldw	r4,140(sp)
   2510c:	d9802517 	ldw	r6,148(sp)
   25110:	b8000005 	stb	zero,0(r23)
   25114:	18800044 	addi	r2,r3,1
   25118:	20800015 	stw	r2,0(r4)
   2511c:	30027226 	beq	r6,zero,25ae8 <_dtoa_r+0x10a8>
   25120:	35c00015 	stw	r23,0(r6)
   25124:	d8800717 	ldw	r2,28(sp)
   25128:	003e7406 	br	24afc <__alt_data_end+0xfffe56fc>
   2512c:	00800434 	movhi	r2,16
   25130:	10bfffc4 	addi	r2,r2,-1
   25134:	a8aa703a 	and	r21,r21,r2
   25138:	a83e801e 	bne	r21,zero,24b3c <__alt_data_end+0xfffe573c>
   2513c:	008000f4 	movhi	r2,3
   25140:	10bfb204 	addi	r2,r2,-312
   25144:	003e7f06 	br	24b44 <__alt_data_end+0xfffe5744>
   25148:	10c00204 	addi	r3,r2,8
   2514c:	003e8206 	br	24b58 <__alt_data_end+0xfffe5758>
   25150:	01400434 	movhi	r5,16
   25154:	297fffc4 	addi	r5,r5,-1
   25158:	994a703a 	and	r5,r19,r5
   2515c:	9009883a 	mov	r4,r18
   25160:	8c7f0044 	addi	r17,r17,-1023
   25164:	294ffc34 	orhi	r5,r5,16368
   25168:	dd000217 	ldw	r20,8(sp)
   2516c:	d8000f15 	stw	zero,60(sp)
   25170:	003e9f06 	br	24bf0 <__alt_data_end+0xfffe57f0>
   25174:	008000f4 	movhi	r2,3
   25178:	10bfa904 	addi	r2,r2,-348
   2517c:	003e5f06 	br	24afc <__alt_data_end+0xfffe56fc>
   25180:	80001115 	stw	zero,68(r16)
   25184:	8009883a 	mov	r4,r16
   25188:	000b883a 	mov	r5,zero
   2518c:	00280680 	call	28068 <_Balloc>
   25190:	01bfffc4 	movi	r6,-1
   25194:	d8800715 	stw	r2,28(sp)
   25198:	80801015 	stw	r2,64(r16)
   2519c:	00800044 	movi	r2,1
   251a0:	d9800615 	stw	r6,24(sp)
   251a4:	d8800b15 	stw	r2,44(sp)
   251a8:	d8002215 	stw	zero,136(sp)
   251ac:	d9800d15 	stw	r6,52(sp)
   251b0:	d8000315 	stw	zero,12(sp)
   251b4:	d8800117 	ldw	r2,4(sp)
   251b8:	10008e16 	blt	r2,zero,253f4 <_dtoa_r+0x9b4>
   251bc:	d9000517 	ldw	r4,20(sp)
   251c0:	00c00384 	movi	r3,14
   251c4:	19008b16 	blt	r3,r4,253f4 <_dtoa_r+0x9b4>
   251c8:	200490fa 	slli	r2,r4,3
   251cc:	00c000f4 	movhi	r3,3
   251d0:	d9802217 	ldw	r6,136(sp)
   251d4:	18ffd104 	addi	r3,r3,-188
   251d8:	1885883a 	add	r2,r3,r2
   251dc:	14400017 	ldw	r17,0(r2)
   251e0:	15000117 	ldw	r20,4(r2)
   251e4:	3001c716 	blt	r6,zero,25904 <_dtoa_r+0xec4>
   251e8:	880d883a 	mov	r6,r17
   251ec:	a00f883a 	mov	r7,r20
   251f0:	9009883a 	mov	r4,r18
   251f4:	980b883a 	mov	r5,r19
   251f8:	00207a40 	call	207a4 <__divdf3>
   251fc:	180b883a 	mov	r5,r3
   25200:	1009883a 	mov	r4,r2
   25204:	00220640 	call	22064 <__fixdfsi>
   25208:	1009883a 	mov	r4,r2
   2520c:	102d883a 	mov	r22,r2
   25210:	002cc380 	call	2cc38 <__floatsidf>
   25214:	1009883a 	mov	r4,r2
   25218:	180b883a 	mov	r5,r3
   2521c:	880d883a 	mov	r6,r17
   25220:	a00f883a 	mov	r7,r20
   25224:	00210700 	call	21070 <__muldf3>
   25228:	9009883a 	mov	r4,r18
   2522c:	980b883a 	mov	r5,r19
   25230:	100d883a 	mov	r6,r2
   25234:	180f883a 	mov	r7,r3
   25238:	00217940 	call	21794 <__subdf3>
   2523c:	d9000717 	ldw	r4,28(sp)
   25240:	d9800617 	ldw	r6,24(sp)
   25244:	180b883a 	mov	r5,r3
   25248:	b0c00c04 	addi	r3,r22,48
   2524c:	20c00005 	stb	r3,0(r4)
   25250:	25c00044 	addi	r23,r4,1
   25254:	01000044 	movi	r4,1
   25258:	1011883a 	mov	r8,r2
   2525c:	2807883a 	mov	r3,r5
   25260:	31003d26 	beq	r6,r4,25358 <_dtoa_r+0x918>
   25264:	000d883a 	mov	r6,zero
   25268:	01d00934 	movhi	r7,16420
   2526c:	1009883a 	mov	r4,r2
   25270:	00210700 	call	21070 <__muldf3>
   25274:	1009883a 	mov	r4,r2
   25278:	180b883a 	mov	r5,r3
   2527c:	000d883a 	mov	r6,zero
   25280:	000f883a 	mov	r7,zero
   25284:	1027883a 	mov	r19,r2
   25288:	182b883a 	mov	r21,r3
   2528c:	002c9f40 	call	2c9f4 <__eqdf2>
   25290:	103f9926 	beq	r2,zero,250f8 <__alt_data_end+0xfffe5cf8>
   25294:	d8c00617 	ldw	r3,24(sp)
   25298:	d9000717 	ldw	r4,28(sp)
   2529c:	b825883a 	mov	r18,r23
   252a0:	18bfffc4 	addi	r2,r3,-1
   252a4:	20ad883a 	add	r22,r4,r2
   252a8:	dc000315 	stw	r16,12(sp)
   252ac:	00000a06 	br	252d8 <_dtoa_r+0x898>
   252b0:	00210700 	call	21070 <__muldf3>
   252b4:	1009883a 	mov	r4,r2
   252b8:	180b883a 	mov	r5,r3
   252bc:	000d883a 	mov	r6,zero
   252c0:	000f883a 	mov	r7,zero
   252c4:	1027883a 	mov	r19,r2
   252c8:	182b883a 	mov	r21,r3
   252cc:	b825883a 	mov	r18,r23
   252d0:	002c9f40 	call	2c9f4 <__eqdf2>
   252d4:	10022626 	beq	r2,zero,25b70 <_dtoa_r+0x1130>
   252d8:	880d883a 	mov	r6,r17
   252dc:	a00f883a 	mov	r7,r20
   252e0:	9809883a 	mov	r4,r19
   252e4:	a80b883a 	mov	r5,r21
   252e8:	00207a40 	call	207a4 <__divdf3>
   252ec:	180b883a 	mov	r5,r3
   252f0:	1009883a 	mov	r4,r2
   252f4:	00220640 	call	22064 <__fixdfsi>
   252f8:	1009883a 	mov	r4,r2
   252fc:	1021883a 	mov	r16,r2
   25300:	002cc380 	call	2cc38 <__floatsidf>
   25304:	1009883a 	mov	r4,r2
   25308:	180b883a 	mov	r5,r3
   2530c:	880d883a 	mov	r6,r17
   25310:	a00f883a 	mov	r7,r20
   25314:	00210700 	call	21070 <__muldf3>
   25318:	9809883a 	mov	r4,r19
   2531c:	a80b883a 	mov	r5,r21
   25320:	100d883a 	mov	r6,r2
   25324:	180f883a 	mov	r7,r3
   25328:	00217940 	call	21794 <__subdf3>
   2532c:	82000c04 	addi	r8,r16,48
   25330:	92000005 	stb	r8,0(r18)
   25334:	1009883a 	mov	r4,r2
   25338:	180b883a 	mov	r5,r3
   2533c:	000d883a 	mov	r6,zero
   25340:	01d00934 	movhi	r7,16420
   25344:	1011883a 	mov	r8,r2
   25348:	bdc00044 	addi	r23,r23,1
   2534c:	95bfd81e 	bne	r18,r22,252b0 <__alt_data_end+0xfffe5eb0>
   25350:	802d883a 	mov	r22,r16
   25354:	dc000317 	ldw	r16,12(sp)
   25358:	4009883a 	mov	r4,r8
   2535c:	180b883a 	mov	r5,r3
   25360:	400d883a 	mov	r6,r8
   25364:	180f883a 	mov	r7,r3
   25368:	002c1580 	call	2c158 <__adddf3>
   2536c:	8809883a 	mov	r4,r17
   25370:	a00b883a 	mov	r5,r20
   25374:	100d883a 	mov	r6,r2
   25378:	180f883a 	mov	r7,r3
   2537c:	1027883a 	mov	r19,r2
   25380:	1825883a 	mov	r18,r3
   25384:	002cb580 	call	2cb58 <__ledf2>
   25388:	10000816 	blt	r2,zero,253ac <_dtoa_r+0x96c>
   2538c:	8809883a 	mov	r4,r17
   25390:	a00b883a 	mov	r5,r20
   25394:	980d883a 	mov	r6,r19
   25398:	900f883a 	mov	r7,r18
   2539c:	002c9f40 	call	2c9f4 <__eqdf2>
   253a0:	103f551e 	bne	r2,zero,250f8 <__alt_data_end+0xfffe5cf8>
   253a4:	b580004c 	andi	r22,r22,1
   253a8:	b03f5326 	beq	r22,zero,250f8 <__alt_data_end+0xfffe5cf8>
   253ac:	bd7fffc3 	ldbu	r21,-1(r23)
   253b0:	b8bfffc4 	addi	r2,r23,-1
   253b4:	1007883a 	mov	r3,r2
   253b8:	01400e44 	movi	r5,57
   253bc:	d9800717 	ldw	r6,28(sp)
   253c0:	00000506 	br	253d8 <_dtoa_r+0x998>
   253c4:	18ffffc4 	addi	r3,r3,-1
   253c8:	30825e26 	beq	r6,r2,25d44 <_dtoa_r+0x1304>
   253cc:	1d400003 	ldbu	r21,0(r3)
   253d0:	102f883a 	mov	r23,r2
   253d4:	10bfffc4 	addi	r2,r2,-1
   253d8:	a9003fcc 	andi	r4,r21,255
   253dc:	2100201c 	xori	r4,r4,128
   253e0:	213fe004 	addi	r4,r4,-128
   253e4:	217ff726 	beq	r4,r5,253c4 <__alt_data_end+0xfffe5fc4>
   253e8:	aa000044 	addi	r8,r21,1
   253ec:	12000005 	stb	r8,0(r2)
   253f0:	003f4106 	br	250f8 <__alt_data_end+0xfffe5cf8>
   253f4:	d8c00b17 	ldw	r3,44(sp)
   253f8:	18006726 	beq	r3,zero,25598 <_dtoa_r+0xb58>
   253fc:	d9000317 	ldw	r4,12(sp)
   25400:	00c00044 	movi	r3,1
   25404:	19016a0e 	bge	r3,r4,259b0 <_dtoa_r+0xf70>
   25408:	d8800617 	ldw	r2,24(sp)
   2540c:	d8c00917 	ldw	r3,36(sp)
   25410:	157fffc4 	addi	r21,r2,-1
   25414:	1d420716 	blt	r3,r21,25c34 <_dtoa_r+0x11f4>
   25418:	1d6bc83a 	sub	r21,r3,r21
   2541c:	d8800617 	ldw	r2,24(sp)
   25420:	1002c716 	blt	r2,zero,25f40 <_dtoa_r+0x1500>
   25424:	dd000817 	ldw	r20,32(sp)
   25428:	d8800617 	ldw	r2,24(sp)
   2542c:	d9800817 	ldw	r6,32(sp)
   25430:	8009883a 	mov	r4,r16
   25434:	01400044 	movi	r5,1
   25438:	308d883a 	add	r6,r6,r2
   2543c:	d9800815 	stw	r6,32(sp)
   25440:	b0ad883a 	add	r22,r22,r2
   25444:	00284680 	call	28468 <__i2b>
   25448:	1023883a 	mov	r17,r2
   2544c:	a0000826 	beq	r20,zero,25470 <_dtoa_r+0xa30>
   25450:	0580070e 	bge	zero,r22,25470 <_dtoa_r+0xa30>
   25454:	b005883a 	mov	r2,r22
   25458:	a5812016 	blt	r20,r22,258dc <_dtoa_r+0xe9c>
   2545c:	d8c00817 	ldw	r3,32(sp)
   25460:	a0a9c83a 	sub	r20,r20,r2
   25464:	b0adc83a 	sub	r22,r22,r2
   25468:	1887c83a 	sub	r3,r3,r2
   2546c:	d8c00815 	stw	r3,32(sp)
   25470:	d9000917 	ldw	r4,36(sp)
   25474:	0100140e 	bge	zero,r4,254c8 <_dtoa_r+0xa88>
   25478:	d9800b17 	ldw	r6,44(sp)
   2547c:	3001e526 	beq	r6,zero,25c14 <_dtoa_r+0x11d4>
   25480:	05400e0e 	bge	zero,r21,254bc <_dtoa_r+0xa7c>
   25484:	880b883a 	mov	r5,r17
   25488:	8009883a 	mov	r4,r16
   2548c:	a80d883a 	mov	r6,r21
   25490:	00286a00 	call	286a0 <__pow5mult>
   25494:	e00d883a 	mov	r6,fp
   25498:	8009883a 	mov	r4,r16
   2549c:	100b883a 	mov	r5,r2
   254a0:	1023883a 	mov	r17,r2
   254a4:	00284a40 	call	284a4 <__multiply>
   254a8:	102f883a 	mov	r23,r2
   254ac:	e00b883a 	mov	r5,fp
   254b0:	8009883a 	mov	r4,r16
   254b4:	00281100 	call	28110 <_Bfree>
   254b8:	b839883a 	mov	fp,r23
   254bc:	d8800917 	ldw	r2,36(sp)
   254c0:	154dc83a 	sub	r6,r2,r21
   254c4:	3001281e 	bne	r6,zero,25968 <_dtoa_r+0xf28>
   254c8:	05c00044 	movi	r23,1
   254cc:	8009883a 	mov	r4,r16
   254d0:	b80b883a 	mov	r5,r23
   254d4:	00284680 	call	28468 <__i2b>
   254d8:	d8c00a17 	ldw	r3,40(sp)
   254dc:	102b883a 	mov	r21,r2
   254e0:	00c0310e 	bge	zero,r3,255a8 <_dtoa_r+0xb68>
   254e4:	8009883a 	mov	r4,r16
   254e8:	100b883a 	mov	r5,r2
   254ec:	180d883a 	mov	r6,r3
   254f0:	00286a00 	call	286a0 <__pow5mult>
   254f4:	d9000317 	ldw	r4,12(sp)
   254f8:	102b883a 	mov	r21,r2
   254fc:	b9011f0e 	bge	r23,r4,2597c <_dtoa_r+0xf3c>
   25500:	0027883a 	mov	r19,zero
   25504:	a8800417 	ldw	r2,16(r21)
   25508:	10800104 	addi	r2,r2,4
   2550c:	1085883a 	add	r2,r2,r2
   25510:	1085883a 	add	r2,r2,r2
   25514:	a885883a 	add	r2,r21,r2
   25518:	11000017 	ldw	r4,0(r2)
   2551c:	00283500 	call	28350 <__hi0bits>
   25520:	00c00804 	movi	r3,32
   25524:	1885c83a 	sub	r2,r3,r2
   25528:	00002506 	br	255c0 <_dtoa_r+0xb80>
   2552c:	01800044 	movi	r6,1
   25530:	d9800c15 	stw	r6,48(sp)
   25534:	003dec06 	br	24ce8 <__alt_data_end+0xfffe58e8>
   25538:	d8c00817 	ldw	r3,32(sp)
   2553c:	d9000517 	ldw	r4,20(sp)
   25540:	d8000a15 	stw	zero,40(sp)
   25544:	1907c83a 	sub	r3,r3,r4
   25548:	010dc83a 	sub	r6,zero,r4
   2554c:	d8c00815 	stw	r3,32(sp)
   25550:	d9800915 	stw	r6,36(sp)
   25554:	003ded06 	br	24d0c <__alt_data_end+0xfffe590c>
   25558:	05adc83a 	sub	r22,zero,r22
   2555c:	dd800815 	stw	r22,32(sp)
   25560:	002d883a 	mov	r22,zero
   25564:	003de406 	br	24cf8 <__alt_data_end+0xfffe58f8>
   25568:	d9000517 	ldw	r4,20(sp)
   2556c:	002cc380 	call	2cc38 <__floatsidf>
   25570:	1009883a 	mov	r4,r2
   25574:	180b883a 	mov	r5,r3
   25578:	b00d883a 	mov	r6,r22
   2557c:	a80f883a 	mov	r7,r21
   25580:	002c9f40 	call	2c9f4 <__eqdf2>
   25584:	103dc726 	beq	r2,zero,24ca4 <__alt_data_end+0xfffe58a4>
   25588:	d8800517 	ldw	r2,20(sp)
   2558c:	10bfffc4 	addi	r2,r2,-1
   25590:	d8800515 	stw	r2,20(sp)
   25594:	003dc306 	br	24ca4 <__alt_data_end+0xfffe58a4>
   25598:	dd400917 	ldw	r21,36(sp)
   2559c:	dd000817 	ldw	r20,32(sp)
   255a0:	0023883a 	mov	r17,zero
   255a4:	003fa906 	br	2544c <__alt_data_end+0xfffe604c>
   255a8:	d9800317 	ldw	r6,12(sp)
   255ac:	b981670e 	bge	r23,r6,25b4c <_dtoa_r+0x110c>
   255b0:	0027883a 	mov	r19,zero
   255b4:	d8c00a17 	ldw	r3,40(sp)
   255b8:	183fd21e 	bne	r3,zero,25504 <__alt_data_end+0xfffe6104>
   255bc:	00800044 	movi	r2,1
   255c0:	1585883a 	add	r2,r2,r22
   255c4:	108007cc 	andi	r2,r2,31
   255c8:	10005f26 	beq	r2,zero,25748 <_dtoa_r+0xd08>
   255cc:	00c00804 	movi	r3,32
   255d0:	1887c83a 	sub	r3,r3,r2
   255d4:	01000104 	movi	r4,4
   255d8:	20c2dd0e 	bge	r4,r3,26150 <_dtoa_r+0x1710>
   255dc:	d9000817 	ldw	r4,32(sp)
   255e0:	00c00704 	movi	r3,28
   255e4:	1885c83a 	sub	r2,r3,r2
   255e8:	2089883a 	add	r4,r4,r2
   255ec:	d9000815 	stw	r4,32(sp)
   255f0:	a0a9883a 	add	r20,r20,r2
   255f4:	b0ad883a 	add	r22,r22,r2
   255f8:	d8800817 	ldw	r2,32(sp)
   255fc:	0080050e 	bge	zero,r2,25614 <_dtoa_r+0xbd4>
   25600:	e00b883a 	mov	r5,fp
   25604:	8009883a 	mov	r4,r16
   25608:	100d883a 	mov	r6,r2
   2560c:	00287e00 	call	287e0 <__lshift>
   25610:	1039883a 	mov	fp,r2
   25614:	0580050e 	bge	zero,r22,2562c <_dtoa_r+0xbec>
   25618:	a80b883a 	mov	r5,r21
   2561c:	8009883a 	mov	r4,r16
   25620:	b00d883a 	mov	r6,r22
   25624:	00287e00 	call	287e0 <__lshift>
   25628:	102b883a 	mov	r21,r2
   2562c:	d8c00c17 	ldw	r3,48(sp)
   25630:	1801161e 	bne	r3,zero,25a8c <_dtoa_r+0x104c>
   25634:	d8c00617 	ldw	r3,24(sp)
   25638:	00c12d0e 	bge	zero,r3,25af0 <_dtoa_r+0x10b0>
   2563c:	d8c00b17 	ldw	r3,44(sp)
   25640:	1800571e 	bne	r3,zero,257a0 <_dtoa_r+0xd60>
   25644:	dc800717 	ldw	r18,28(sp)
   25648:	dcc00617 	ldw	r19,24(sp)
   2564c:	9029883a 	mov	r20,r18
   25650:	00000206 	br	2565c <_dtoa_r+0xc1c>
   25654:	00281380 	call	28138 <__multadd>
   25658:	1039883a 	mov	fp,r2
   2565c:	e009883a 	mov	r4,fp
   25660:	a80b883a 	mov	r5,r21
   25664:	00248400 	call	24840 <quorem>
   25668:	10800c04 	addi	r2,r2,48
   2566c:	90800005 	stb	r2,0(r18)
   25670:	94800044 	addi	r18,r18,1
   25674:	9507c83a 	sub	r3,r18,r20
   25678:	8009883a 	mov	r4,r16
   2567c:	e00b883a 	mov	r5,fp
   25680:	01800284 	movi	r6,10
   25684:	000f883a 	mov	r7,zero
   25688:	1cfff216 	blt	r3,r19,25654 <__alt_data_end+0xfffe6254>
   2568c:	1011883a 	mov	r8,r2
   25690:	d8800617 	ldw	r2,24(sp)
   25694:	00822e0e 	bge	zero,r2,25f50 <_dtoa_r+0x1510>
   25698:	d9000717 	ldw	r4,28(sp)
   2569c:	0025883a 	mov	r18,zero
   256a0:	20af883a 	add	r23,r4,r2
   256a4:	e00b883a 	mov	r5,fp
   256a8:	01800044 	movi	r6,1
   256ac:	8009883a 	mov	r4,r16
   256b0:	da001715 	stw	r8,92(sp)
   256b4:	00287e00 	call	287e0 <__lshift>
   256b8:	1009883a 	mov	r4,r2
   256bc:	a80b883a 	mov	r5,r21
   256c0:	1039883a 	mov	fp,r2
   256c4:	00289280 	call	28928 <__mcmp>
   256c8:	da001717 	ldw	r8,92(sp)
   256cc:	00816e0e 	bge	zero,r2,25c88 <_dtoa_r+0x1248>
   256d0:	b93fffc3 	ldbu	r4,-1(r23)
   256d4:	b8bfffc4 	addi	r2,r23,-1
   256d8:	1007883a 	mov	r3,r2
   256dc:	01800e44 	movi	r6,57
   256e0:	d9c00717 	ldw	r7,28(sp)
   256e4:	00000506 	br	256fc <_dtoa_r+0xcbc>
   256e8:	18ffffc4 	addi	r3,r3,-1
   256ec:	38811926 	beq	r7,r2,25b54 <_dtoa_r+0x1114>
   256f0:	19000003 	ldbu	r4,0(r3)
   256f4:	102f883a 	mov	r23,r2
   256f8:	10bfffc4 	addi	r2,r2,-1
   256fc:	21403fcc 	andi	r5,r4,255
   25700:	2940201c 	xori	r5,r5,128
   25704:	297fe004 	addi	r5,r5,-128
   25708:	29bff726 	beq	r5,r6,256e8 <__alt_data_end+0xfffe62e8>
   2570c:	21000044 	addi	r4,r4,1
   25710:	11000005 	stb	r4,0(r2)
   25714:	8009883a 	mov	r4,r16
   25718:	a80b883a 	mov	r5,r21
   2571c:	00281100 	call	28110 <_Bfree>
   25720:	883e7526 	beq	r17,zero,250f8 <__alt_data_end+0xfffe5cf8>
   25724:	90000426 	beq	r18,zero,25738 <_dtoa_r+0xcf8>
   25728:	94400326 	beq	r18,r17,25738 <_dtoa_r+0xcf8>
   2572c:	8009883a 	mov	r4,r16
   25730:	900b883a 	mov	r5,r18
   25734:	00281100 	call	28110 <_Bfree>
   25738:	8009883a 	mov	r4,r16
   2573c:	880b883a 	mov	r5,r17
   25740:	00281100 	call	28110 <_Bfree>
   25744:	003e6c06 	br	250f8 <__alt_data_end+0xfffe5cf8>
   25748:	00800704 	movi	r2,28
   2574c:	d9800817 	ldw	r6,32(sp)
   25750:	a0a9883a 	add	r20,r20,r2
   25754:	b0ad883a 	add	r22,r22,r2
   25758:	308d883a 	add	r6,r6,r2
   2575c:	d9800815 	stw	r6,32(sp)
   25760:	003fa506 	br	255f8 <__alt_data_end+0xfffe61f8>
   25764:	013efb84 	movi	r4,-1042
   25768:	246bc83a 	sub	r21,r4,r17
   2576c:	9548983a 	sll	r4,r18,r21
   25770:	003d1806 	br	24bd4 <__alt_data_end+0xfffe57d4>
   25774:	d8000c15 	stw	zero,48(sp)
   25778:	003d5b06 	br	24ce8 <__alt_data_end+0xfffe58e8>
   2577c:	880b883a 	mov	r5,r17
   25780:	8009883a 	mov	r4,r16
   25784:	01800284 	movi	r6,10
   25788:	000f883a 	mov	r7,zero
   2578c:	00281380 	call	28138 <__multadd>
   25790:	1023883a 	mov	r17,r2
   25794:	d8800d17 	ldw	r2,52(sp)
   25798:	0082550e 	bge	zero,r2,260f0 <_dtoa_r+0x16b0>
   2579c:	d8800615 	stw	r2,24(sp)
   257a0:	0500050e 	bge	zero,r20,257b8 <_dtoa_r+0xd78>
   257a4:	880b883a 	mov	r5,r17
   257a8:	8009883a 	mov	r4,r16
   257ac:	a00d883a 	mov	r6,r20
   257b0:	00287e00 	call	287e0 <__lshift>
   257b4:	1023883a 	mov	r17,r2
   257b8:	98016a1e 	bne	r19,zero,25d64 <_dtoa_r+0x1324>
   257bc:	8829883a 	mov	r20,r17
   257c0:	d9000617 	ldw	r4,24(sp)
   257c4:	dcc00717 	ldw	r19,28(sp)
   257c8:	9480004c 	andi	r18,r18,1
   257cc:	20bfffc4 	addi	r2,r4,-1
   257d0:	9885883a 	add	r2,r19,r2
   257d4:	d8800415 	stw	r2,16(sp)
   257d8:	dc800615 	stw	r18,24(sp)
   257dc:	e009883a 	mov	r4,fp
   257e0:	a80b883a 	mov	r5,r21
   257e4:	00248400 	call	24840 <quorem>
   257e8:	e009883a 	mov	r4,fp
   257ec:	880b883a 	mov	r5,r17
   257f0:	102f883a 	mov	r23,r2
   257f4:	00289280 	call	28928 <__mcmp>
   257f8:	8009883a 	mov	r4,r16
   257fc:	a80b883a 	mov	r5,r21
   25800:	a00d883a 	mov	r6,r20
   25804:	102d883a 	mov	r22,r2
   25808:	00289880 	call	28988 <__mdiff>
   2580c:	1007883a 	mov	r3,r2
   25810:	10800317 	ldw	r2,12(r2)
   25814:	bc800c04 	addi	r18,r23,48
   25818:	1000971e 	bne	r2,zero,25a78 <_dtoa_r+0x1038>
   2581c:	180b883a 	mov	r5,r3
   25820:	e009883a 	mov	r4,fp
   25824:	d8c01515 	stw	r3,84(sp)
   25828:	00289280 	call	28928 <__mcmp>
   2582c:	d8c01517 	ldw	r3,84(sp)
   25830:	8009883a 	mov	r4,r16
   25834:	d8801515 	stw	r2,84(sp)
   25838:	180b883a 	mov	r5,r3
   2583c:	00281100 	call	28110 <_Bfree>
   25840:	d8801517 	ldw	r2,84(sp)
   25844:	1000041e 	bne	r2,zero,25858 <_dtoa_r+0xe18>
   25848:	d9800317 	ldw	r6,12(sp)
   2584c:	3000021e 	bne	r6,zero,25858 <_dtoa_r+0xe18>
   25850:	d8c00617 	ldw	r3,24(sp)
   25854:	18007626 	beq	r3,zero,25a30 <_dtoa_r+0xff0>
   25858:	b0005b16 	blt	r22,zero,259c8 <_dtoa_r+0xf88>
   2585c:	b000041e 	bne	r22,zero,25870 <_dtoa_r+0xe30>
   25860:	d9000317 	ldw	r4,12(sp)
   25864:	2000021e 	bne	r4,zero,25870 <_dtoa_r+0xe30>
   25868:	d8c00617 	ldw	r3,24(sp)
   2586c:	18005626 	beq	r3,zero,259c8 <_dtoa_r+0xf88>
   25870:	00814d16 	blt	zero,r2,25da8 <_dtoa_r+0x1368>
   25874:	d8c00417 	ldw	r3,16(sp)
   25878:	9d800044 	addi	r22,r19,1
   2587c:	9c800005 	stb	r18,0(r19)
   25880:	b02f883a 	mov	r23,r22
   25884:	98c14c26 	beq	r19,r3,25db8 <_dtoa_r+0x1378>
   25888:	e00b883a 	mov	r5,fp
   2588c:	8009883a 	mov	r4,r16
   25890:	01800284 	movi	r6,10
   25894:	000f883a 	mov	r7,zero
   25898:	00281380 	call	28138 <__multadd>
   2589c:	1039883a 	mov	fp,r2
   258a0:	8d006d26 	beq	r17,r20,25a58 <_dtoa_r+0x1018>
   258a4:	880b883a 	mov	r5,r17
   258a8:	01800284 	movi	r6,10
   258ac:	000f883a 	mov	r7,zero
   258b0:	8009883a 	mov	r4,r16
   258b4:	00281380 	call	28138 <__multadd>
   258b8:	a00b883a 	mov	r5,r20
   258bc:	8009883a 	mov	r4,r16
   258c0:	01800284 	movi	r6,10
   258c4:	000f883a 	mov	r7,zero
   258c8:	1023883a 	mov	r17,r2
   258cc:	00281380 	call	28138 <__multadd>
   258d0:	1029883a 	mov	r20,r2
   258d4:	b027883a 	mov	r19,r22
   258d8:	003fc006 	br	257dc <__alt_data_end+0xfffe63dc>
   258dc:	a005883a 	mov	r2,r20
   258e0:	003ede06 	br	2545c <__alt_data_end+0xfffe605c>
   258e4:	01000044 	movi	r4,1
   258e8:	d9000b15 	stw	r4,44(sp)
   258ec:	d9802217 	ldw	r6,136(sp)
   258f0:	0180dc0e 	bge	zero,r6,25c64 <_dtoa_r+0x1224>
   258f4:	3023883a 	mov	r17,r6
   258f8:	d9800d15 	stw	r6,52(sp)
   258fc:	d9800615 	stw	r6,24(sp)
   25900:	003d1e06 	br	24d7c <__alt_data_end+0xfffe597c>
   25904:	d8800617 	ldw	r2,24(sp)
   25908:	00be3716 	blt	zero,r2,251e8 <__alt_data_end+0xfffe5de8>
   2590c:	1000be1e 	bne	r2,zero,25c08 <_dtoa_r+0x11c8>
   25910:	8809883a 	mov	r4,r17
   25914:	a00b883a 	mov	r5,r20
   25918:	000d883a 	mov	r6,zero
   2591c:	01d00534 	movhi	r7,16404
   25920:	00210700 	call	21070 <__muldf3>
   25924:	1009883a 	mov	r4,r2
   25928:	180b883a 	mov	r5,r3
   2592c:	900d883a 	mov	r6,r18
   25930:	980f883a 	mov	r7,r19
   25934:	002ca780 	call	2ca78 <__gedf2>
   25938:	002b883a 	mov	r21,zero
   2593c:	0023883a 	mov	r17,zero
   25940:	10007a16 	blt	r2,zero,25b2c <_dtoa_r+0x10ec>
   25944:	d9002217 	ldw	r4,136(sp)
   25948:	ddc00717 	ldw	r23,28(sp)
   2594c:	0108303a 	nor	r4,zero,r4
   25950:	d9000515 	stw	r4,20(sp)
   25954:	8009883a 	mov	r4,r16
   25958:	a80b883a 	mov	r5,r21
   2595c:	00281100 	call	28110 <_Bfree>
   25960:	883f751e 	bne	r17,zero,25738 <__alt_data_end+0xfffe6338>
   25964:	003de406 	br	250f8 <__alt_data_end+0xfffe5cf8>
   25968:	e00b883a 	mov	r5,fp
   2596c:	8009883a 	mov	r4,r16
   25970:	00286a00 	call	286a0 <__pow5mult>
   25974:	1039883a 	mov	fp,r2
   25978:	003ed306 	br	254c8 <__alt_data_end+0xfffe60c8>
   2597c:	903ee01e 	bne	r18,zero,25500 <__alt_data_end+0xfffe6100>
   25980:	00800434 	movhi	r2,16
   25984:	10bfffc4 	addi	r2,r2,-1
   25988:	9884703a 	and	r2,r19,r2
   2598c:	103f081e 	bne	r2,zero,255b0 <__alt_data_end+0xfffe61b0>
   25990:	9cdffc2c 	andhi	r19,r19,32752
   25994:	983f0626 	beq	r19,zero,255b0 <__alt_data_end+0xfffe61b0>
   25998:	d8800817 	ldw	r2,32(sp)
   2599c:	b5800044 	addi	r22,r22,1
   259a0:	04c00044 	movi	r19,1
   259a4:	10800044 	addi	r2,r2,1
   259a8:	d8800815 	stw	r2,32(sp)
   259ac:	003f0106 	br	255b4 <__alt_data_end+0xfffe61b4>
   259b0:	d9800f17 	ldw	r6,60(sp)
   259b4:	30016826 	beq	r6,zero,25f58 <_dtoa_r+0x1518>
   259b8:	10810cc4 	addi	r2,r2,1075
   259bc:	dd400917 	ldw	r21,36(sp)
   259c0:	dd000817 	ldw	r20,32(sp)
   259c4:	003e9906 	br	2542c <__alt_data_end+0xfffe602c>
   259c8:	9011883a 	mov	r8,r18
   259cc:	4007883a 	mov	r3,r8
   259d0:	e02d883a 	mov	r22,fp
   259d4:	0080100e 	bge	zero,r2,25a18 <_dtoa_r+0xfd8>
   259d8:	01800044 	movi	r6,1
   259dc:	8009883a 	mov	r4,r16
   259e0:	e00b883a 	mov	r5,fp
   259e4:	da001515 	stw	r8,84(sp)
   259e8:	da001715 	stw	r8,92(sp)
   259ec:	00287e00 	call	287e0 <__lshift>
   259f0:	1009883a 	mov	r4,r2
   259f4:	a80b883a 	mov	r5,r21
   259f8:	102d883a 	mov	r22,r2
   259fc:	00289280 	call	28928 <__mcmp>
   25a00:	d8c01517 	ldw	r3,84(sp)
   25a04:	da001717 	ldw	r8,92(sp)
   25a08:	0081a50e 	bge	zero,r2,260a0 <_dtoa_r+0x1660>
   25a0c:	00800e44 	movi	r2,57
   25a10:	40817b26 	beq	r8,r2,26000 <_dtoa_r+0x15c0>
   25a14:	40c00044 	addi	r3,r8,1
   25a18:	8825883a 	mov	r18,r17
   25a1c:	9dc00044 	addi	r23,r19,1
   25a20:	98c00005 	stb	r3,0(r19)
   25a24:	a023883a 	mov	r17,r20
   25a28:	b039883a 	mov	fp,r22
   25a2c:	003f3906 	br	25714 <__alt_data_end+0xfffe6314>
   25a30:	00800e44 	movi	r2,57
   25a34:	9011883a 	mov	r8,r18
   25a38:	90817226 	beq	r18,r2,26004 <_dtoa_r+0x15c4>
   25a3c:	0580010e 	bge	zero,r22,25a44 <_dtoa_r+0x1004>
   25a40:	ba000c44 	addi	r8,r23,49
   25a44:	8825883a 	mov	r18,r17
   25a48:	9dc00044 	addi	r23,r19,1
   25a4c:	9a000005 	stb	r8,0(r19)
   25a50:	a023883a 	mov	r17,r20
   25a54:	003f2f06 	br	25714 <__alt_data_end+0xfffe6314>
   25a58:	880b883a 	mov	r5,r17
   25a5c:	8009883a 	mov	r4,r16
   25a60:	01800284 	movi	r6,10
   25a64:	000f883a 	mov	r7,zero
   25a68:	00281380 	call	28138 <__multadd>
   25a6c:	1023883a 	mov	r17,r2
   25a70:	1029883a 	mov	r20,r2
   25a74:	003f9706 	br	258d4 <__alt_data_end+0xfffe64d4>
   25a78:	8009883a 	mov	r4,r16
   25a7c:	180b883a 	mov	r5,r3
   25a80:	00281100 	call	28110 <_Bfree>
   25a84:	00800044 	movi	r2,1
   25a88:	003f7306 	br	25858 <__alt_data_end+0xfffe6458>
   25a8c:	e009883a 	mov	r4,fp
   25a90:	a80b883a 	mov	r5,r21
   25a94:	00289280 	call	28928 <__mcmp>
   25a98:	103ee60e 	bge	r2,zero,25634 <__alt_data_end+0xfffe6234>
   25a9c:	8009883a 	mov	r4,r16
   25aa0:	e00b883a 	mov	r5,fp
   25aa4:	01800284 	movi	r6,10
   25aa8:	000f883a 	mov	r7,zero
   25aac:	00281380 	call	28138 <__multadd>
   25ab0:	d9000517 	ldw	r4,20(sp)
   25ab4:	d9800b17 	ldw	r6,44(sp)
   25ab8:	1039883a 	mov	fp,r2
   25abc:	213fffc4 	addi	r4,r4,-1
   25ac0:	d9000515 	stw	r4,20(sp)
   25ac4:	303f2d1e 	bne	r6,zero,2577c <__alt_data_end+0xfffe637c>
   25ac8:	d9000d17 	ldw	r4,52(sp)
   25acc:	0101780e 	bge	zero,r4,260b0 <_dtoa_r+0x1670>
   25ad0:	d9000615 	stw	r4,24(sp)
   25ad4:	003edb06 	br	25644 <__alt_data_end+0xfffe6244>
   25ad8:	00800084 	movi	r2,2
   25adc:	30818e1e 	bne	r6,r2,26118 <_dtoa_r+0x16d8>
   25ae0:	d8000b15 	stw	zero,44(sp)
   25ae4:	003f8106 	br	258ec <__alt_data_end+0xfffe64ec>
   25ae8:	d8800717 	ldw	r2,28(sp)
   25aec:	003c0306 	br	24afc <__alt_data_end+0xfffe56fc>
   25af0:	d9000317 	ldw	r4,12(sp)
   25af4:	00800084 	movi	r2,2
   25af8:	113ed00e 	bge	r2,r4,2563c <__alt_data_end+0xfffe623c>
   25afc:	d8c00617 	ldw	r3,24(sp)
   25b00:	183f901e 	bne	r3,zero,25944 <__alt_data_end+0xfffe6544>
   25b04:	a80b883a 	mov	r5,r21
   25b08:	8009883a 	mov	r4,r16
   25b0c:	01800144 	movi	r6,5
   25b10:	000f883a 	mov	r7,zero
   25b14:	00281380 	call	28138 <__multadd>
   25b18:	e009883a 	mov	r4,fp
   25b1c:	100b883a 	mov	r5,r2
   25b20:	102b883a 	mov	r21,r2
   25b24:	00289280 	call	28928 <__mcmp>
   25b28:	00bf860e 	bge	zero,r2,25944 <__alt_data_end+0xfffe6544>
   25b2c:	d9800717 	ldw	r6,28(sp)
   25b30:	00800c44 	movi	r2,49
   25b34:	30800005 	stb	r2,0(r6)
   25b38:	d8800517 	ldw	r2,20(sp)
   25b3c:	35c00044 	addi	r23,r6,1
   25b40:	10800044 	addi	r2,r2,1
   25b44:	d8800515 	stw	r2,20(sp)
   25b48:	003f8206 	br	25954 <__alt_data_end+0xfffe6554>
   25b4c:	903e981e 	bne	r18,zero,255b0 <__alt_data_end+0xfffe61b0>
   25b50:	003f8b06 	br	25980 <__alt_data_end+0xfffe6580>
   25b54:	d9800517 	ldw	r6,20(sp)
   25b58:	d8c00717 	ldw	r3,28(sp)
   25b5c:	00800c44 	movi	r2,49
   25b60:	31800044 	addi	r6,r6,1
   25b64:	d9800515 	stw	r6,20(sp)
   25b68:	18800005 	stb	r2,0(r3)
   25b6c:	003ee906 	br	25714 <__alt_data_end+0xfffe6314>
   25b70:	dc000317 	ldw	r16,12(sp)
   25b74:	003d6006 	br	250f8 <__alt_data_end+0xfffe5cf8>
   25b78:	8809883a 	mov	r4,r17
   25b7c:	002cc380 	call	2cc38 <__floatsidf>
   25b80:	a009883a 	mov	r4,r20
   25b84:	a80b883a 	mov	r5,r21
   25b88:	100d883a 	mov	r6,r2
   25b8c:	180f883a 	mov	r7,r3
   25b90:	00210700 	call	21070 <__muldf3>
   25b94:	1009883a 	mov	r4,r2
   25b98:	180b883a 	mov	r5,r3
   25b9c:	000d883a 	mov	r6,zero
   25ba0:	01d00734 	movhi	r7,16412
   25ba4:	002c1580 	call	2c158 <__adddf3>
   25ba8:	1023883a 	mov	r17,r2
   25bac:	00bf3034 	movhi	r2,64704
   25bb0:	1885883a 	add	r2,r3,r2
   25bb4:	d8800e15 	stw	r2,56(sp)
   25bb8:	a009883a 	mov	r4,r20
   25bbc:	a80b883a 	mov	r5,r21
   25bc0:	000d883a 	mov	r6,zero
   25bc4:	01d00534 	movhi	r7,16404
   25bc8:	00217940 	call	21794 <__subdf3>
   25bcc:	d9c00e17 	ldw	r7,56(sp)
   25bd0:	1009883a 	mov	r4,r2
   25bd4:	180b883a 	mov	r5,r3
   25bd8:	880d883a 	mov	r6,r17
   25bdc:	102b883a 	mov	r21,r2
   25be0:	1829883a 	mov	r20,r3
   25be4:	002ca780 	call	2ca78 <__gedf2>
   25be8:	00807716 	blt	zero,r2,25dc8 <_dtoa_r+0x1388>
   25bec:	d8800e17 	ldw	r2,56(sp)
   25bf0:	a809883a 	mov	r4,r21
   25bf4:	a00b883a 	mov	r5,r20
   25bf8:	11e0003c 	xorhi	r7,r2,32768
   25bfc:	880d883a 	mov	r6,r17
   25c00:	002cb580 	call	2cb58 <__ledf2>
   25c04:	103d6b0e 	bge	r2,zero,251b4 <__alt_data_end+0xfffe5db4>
   25c08:	002b883a 	mov	r21,zero
   25c0c:	0023883a 	mov	r17,zero
   25c10:	003f4c06 	br	25944 <__alt_data_end+0xfffe6544>
   25c14:	d9800917 	ldw	r6,36(sp)
   25c18:	e00b883a 	mov	r5,fp
   25c1c:	8009883a 	mov	r4,r16
   25c20:	00286a00 	call	286a0 <__pow5mult>
   25c24:	1039883a 	mov	fp,r2
   25c28:	003e2706 	br	254c8 <__alt_data_end+0xfffe60c8>
   25c2c:	d8000b15 	stw	zero,44(sp)
   25c30:	003c4906 	br	24d58 <__alt_data_end+0xfffe5958>
   25c34:	d9000917 	ldw	r4,36(sp)
   25c38:	d9800a17 	ldw	r6,40(sp)
   25c3c:	dd400915 	stw	r21,36(sp)
   25c40:	a905c83a 	sub	r2,r21,r4
   25c44:	308d883a 	add	r6,r6,r2
   25c48:	d9800a15 	stw	r6,40(sp)
   25c4c:	002b883a 	mov	r21,zero
   25c50:	003df206 	br	2541c <__alt_data_end+0xfffe601c>
   25c54:	dc800e15 	stw	r18,56(sp)
   25c58:	982b883a 	mov	r21,r19
   25c5c:	04400084 	movi	r17,2
   25c60:	003c7406 	br	24e34 <__alt_data_end+0xfffe5a34>
   25c64:	04400044 	movi	r17,1
   25c68:	dc400d15 	stw	r17,52(sp)
   25c6c:	dc400615 	stw	r17,24(sp)
   25c70:	dc402215 	stw	r17,136(sp)
   25c74:	80001115 	stw	zero,68(r16)
   25c78:	000b883a 	mov	r5,zero
   25c7c:	003c4a06 	br	24da8 <__alt_data_end+0xfffe59a8>
   25c80:	3023883a 	mov	r17,r6
   25c84:	003ffb06 	br	25c74 <__alt_data_end+0xfffe6874>
   25c88:	1000021e 	bne	r2,zero,25c94 <_dtoa_r+0x1254>
   25c8c:	4200004c 	andi	r8,r8,1
   25c90:	403e8f1e 	bne	r8,zero,256d0 <__alt_data_end+0xfffe62d0>
   25c94:	01000c04 	movi	r4,48
   25c98:	00000106 	br	25ca0 <_dtoa_r+0x1260>
   25c9c:	102f883a 	mov	r23,r2
   25ca0:	b8bfffc4 	addi	r2,r23,-1
   25ca4:	10c00007 	ldb	r3,0(r2)
   25ca8:	193ffc26 	beq	r3,r4,25c9c <__alt_data_end+0xfffe689c>
   25cac:	003e9906 	br	25714 <__alt_data_end+0xfffe6314>
   25cb0:	d9000517 	ldw	r4,20(sp)
   25cb4:	012fc83a 	sub	r23,zero,r4
   25cb8:	b800ad26 	beq	r23,zero,25f70 <_dtoa_r+0x1530>
   25cbc:	b88003cc 	andi	r2,r23,15
   25cc0:	100490fa 	slli	r2,r2,3
   25cc4:	00c000f4 	movhi	r3,3
   25cc8:	18ffd104 	addi	r3,r3,-188
   25ccc:	1885883a 	add	r2,r3,r2
   25cd0:	11800017 	ldw	r6,0(r2)
   25cd4:	11c00117 	ldw	r7,4(r2)
   25cd8:	b82fd13a 	srai	r23,r23,4
   25cdc:	9009883a 	mov	r4,r18
   25ce0:	980b883a 	mov	r5,r19
   25ce4:	00210700 	call	21070 <__muldf3>
   25ce8:	1029883a 	mov	r20,r2
   25cec:	182b883a 	mov	r21,r3
   25cf0:	b800f426 	beq	r23,zero,260c4 <_dtoa_r+0x1684>
   25cf4:	020000f4 	movhi	r8,3
   25cf8:	423fc704 	addi	r8,r8,-228
   25cfc:	8029883a 	mov	r20,r16
   25d00:	04400084 	movi	r17,2
   25d04:	4021883a 	mov	r16,r8
   25d08:	b980004c 	andi	r6,r23,1
   25d0c:	1009883a 	mov	r4,r2
   25d10:	b82fd07a 	srai	r23,r23,1
   25d14:	180b883a 	mov	r5,r3
   25d18:	30000426 	beq	r6,zero,25d2c <_dtoa_r+0x12ec>
   25d1c:	81800017 	ldw	r6,0(r16)
   25d20:	81c00117 	ldw	r7,4(r16)
   25d24:	8c400044 	addi	r17,r17,1
   25d28:	00210700 	call	21070 <__muldf3>
   25d2c:	84000204 	addi	r16,r16,8
   25d30:	b83ff51e 	bne	r23,zero,25d08 <__alt_data_end+0xfffe6908>
   25d34:	a021883a 	mov	r16,r20
   25d38:	182b883a 	mov	r21,r3
   25d3c:	1029883a 	mov	r20,r2
   25d40:	003c5506 	br	24e98 <__alt_data_end+0xfffe5a98>
   25d44:	d9800517 	ldw	r6,20(sp)
   25d48:	d9000717 	ldw	r4,28(sp)
   25d4c:	00c00c04 	movi	r3,48
   25d50:	31800044 	addi	r6,r6,1
   25d54:	d9800515 	stw	r6,20(sp)
   25d58:	20c00005 	stb	r3,0(r4)
   25d5c:	02000c44 	movi	r8,49
   25d60:	003da206 	br	253ec <__alt_data_end+0xfffe5fec>
   25d64:	89400117 	ldw	r5,4(r17)
   25d68:	8009883a 	mov	r4,r16
   25d6c:	00280680 	call	28068 <_Balloc>
   25d70:	89800417 	ldw	r6,16(r17)
   25d74:	11000304 	addi	r4,r2,12
   25d78:	89400304 	addi	r5,r17,12
   25d7c:	31800084 	addi	r6,r6,2
   25d80:	318d883a 	add	r6,r6,r6
   25d84:	318d883a 	add	r6,r6,r6
   25d88:	1027883a 	mov	r19,r2
   25d8c:	0027cb00 	call	27cb0 <memcpy>
   25d90:	8009883a 	mov	r4,r16
   25d94:	980b883a 	mov	r5,r19
   25d98:	01800044 	movi	r6,1
   25d9c:	00287e00 	call	287e0 <__lshift>
   25da0:	1029883a 	mov	r20,r2
   25da4:	003e8606 	br	257c0 <__alt_data_end+0xfffe63c0>
   25da8:	00800e44 	movi	r2,57
   25dac:	90809526 	beq	r18,r2,26004 <_dtoa_r+0x15c4>
   25db0:	92000044 	addi	r8,r18,1
   25db4:	003f2306 	br	25a44 <__alt_data_end+0xfffe6644>
   25db8:	9011883a 	mov	r8,r18
   25dbc:	8825883a 	mov	r18,r17
   25dc0:	a023883a 	mov	r17,r20
   25dc4:	003e3706 	br	256a4 <__alt_data_end+0xfffe62a4>
   25dc8:	002b883a 	mov	r21,zero
   25dcc:	0023883a 	mov	r17,zero
   25dd0:	003f5606 	br	25b2c <__alt_data_end+0xfffe672c>
   25dd4:	51bfffc4 	addi	r6,r10,-1
   25dd8:	300490fa 	slli	r2,r6,3
   25ddc:	00c000f4 	movhi	r3,3
   25de0:	18ffd104 	addi	r3,r3,-188
   25de4:	1885883a 	add	r2,r3,r2
   25de8:	d9c00e17 	ldw	r7,56(sp)
   25dec:	11000017 	ldw	r4,0(r2)
   25df0:	11400117 	ldw	r5,4(r2)
   25df4:	d8800717 	ldw	r2,28(sp)
   25df8:	d9801015 	stw	r6,64(sp)
   25dfc:	880d883a 	mov	r6,r17
   25e00:	da801615 	stw	r10,88(sp)
   25e04:	15c00044 	addi	r23,r2,1
   25e08:	00210700 	call	21070 <__muldf3>
   25e0c:	a80b883a 	mov	r5,r21
   25e10:	a009883a 	mov	r4,r20
   25e14:	d8c01115 	stw	r3,68(sp)
   25e18:	d8800e15 	stw	r2,56(sp)
   25e1c:	00220640 	call	22064 <__fixdfsi>
   25e20:	1009883a 	mov	r4,r2
   25e24:	1023883a 	mov	r17,r2
   25e28:	002cc380 	call	2cc38 <__floatsidf>
   25e2c:	a009883a 	mov	r4,r20
   25e30:	a80b883a 	mov	r5,r21
   25e34:	100d883a 	mov	r6,r2
   25e38:	180f883a 	mov	r7,r3
   25e3c:	00217940 	call	21794 <__subdf3>
   25e40:	1813883a 	mov	r9,r3
   25e44:	d8c00717 	ldw	r3,28(sp)
   25e48:	8c400c04 	addi	r17,r17,48
   25e4c:	1011883a 	mov	r8,r2
   25e50:	1c400005 	stb	r17,0(r3)
   25e54:	da801617 	ldw	r10,88(sp)
   25e58:	00800044 	movi	r2,1
   25e5c:	50802326 	beq	r10,r2,25eec <_dtoa_r+0x14ac>
   25e60:	d8800717 	ldw	r2,28(sp)
   25e64:	b82b883a 	mov	r21,r23
   25e68:	dc001315 	stw	r16,76(sp)
   25e6c:	12a9883a 	add	r20,r2,r10
   25e70:	4807883a 	mov	r3,r9
   25e74:	4005883a 	mov	r2,r8
   25e78:	dc801415 	stw	r18,80(sp)
   25e7c:	000d883a 	mov	r6,zero
   25e80:	01d00934 	movhi	r7,16420
   25e84:	1009883a 	mov	r4,r2
   25e88:	180b883a 	mov	r5,r3
   25e8c:	00210700 	call	21070 <__muldf3>
   25e90:	180b883a 	mov	r5,r3
   25e94:	1009883a 	mov	r4,r2
   25e98:	1821883a 	mov	r16,r3
   25e9c:	1025883a 	mov	r18,r2
   25ea0:	00220640 	call	22064 <__fixdfsi>
   25ea4:	1009883a 	mov	r4,r2
   25ea8:	1023883a 	mov	r17,r2
   25eac:	002cc380 	call	2cc38 <__floatsidf>
   25eb0:	9009883a 	mov	r4,r18
   25eb4:	800b883a 	mov	r5,r16
   25eb8:	100d883a 	mov	r6,r2
   25ebc:	180f883a 	mov	r7,r3
   25ec0:	8c400c04 	addi	r17,r17,48
   25ec4:	00217940 	call	21794 <__subdf3>
   25ec8:	ad400044 	addi	r21,r21,1
   25ecc:	ac7fffc5 	stb	r17,-1(r21)
   25ed0:	ad3fea1e 	bne	r21,r20,25e7c <__alt_data_end+0xfffe6a7c>
   25ed4:	1813883a 	mov	r9,r3
   25ed8:	d8c01017 	ldw	r3,64(sp)
   25edc:	dc001317 	ldw	r16,76(sp)
   25ee0:	dc801417 	ldw	r18,80(sp)
   25ee4:	1011883a 	mov	r8,r2
   25ee8:	b8ef883a 	add	r23,r23,r3
   25eec:	d9000e17 	ldw	r4,56(sp)
   25ef0:	d9401117 	ldw	r5,68(sp)
   25ef4:	000d883a 	mov	r6,zero
   25ef8:	01cff834 	movhi	r7,16352
   25efc:	da001715 	stw	r8,92(sp)
   25f00:	da401515 	stw	r9,84(sp)
   25f04:	002c1580 	call	2c158 <__adddf3>
   25f08:	da001717 	ldw	r8,92(sp)
   25f0c:	da401517 	ldw	r9,84(sp)
   25f10:	1009883a 	mov	r4,r2
   25f14:	400d883a 	mov	r6,r8
   25f18:	480f883a 	mov	r7,r9
   25f1c:	180b883a 	mov	r5,r3
   25f20:	002cb580 	call	2cb58 <__ledf2>
   25f24:	da001717 	ldw	r8,92(sp)
   25f28:	da401517 	ldw	r9,84(sp)
   25f2c:	10003b0e 	bge	r2,zero,2601c <_dtoa_r+0x15dc>
   25f30:	d9001217 	ldw	r4,72(sp)
   25f34:	bd7fffc3 	ldbu	r21,-1(r23)
   25f38:	d9000515 	stw	r4,20(sp)
   25f3c:	003d1c06 	br	253b0 <__alt_data_end+0xfffe5fb0>
   25f40:	d8c00817 	ldw	r3,32(sp)
   25f44:	18a9c83a 	sub	r20,r3,r2
   25f48:	0005883a 	mov	r2,zero
   25f4c:	003d3706 	br	2542c <__alt_data_end+0xfffe602c>
   25f50:	00800044 	movi	r2,1
   25f54:	003dd006 	br	25698 <__alt_data_end+0xfffe6298>
   25f58:	d8c00217 	ldw	r3,8(sp)
   25f5c:	00800d84 	movi	r2,54
   25f60:	dd400917 	ldw	r21,36(sp)
   25f64:	10c5c83a 	sub	r2,r2,r3
   25f68:	dd000817 	ldw	r20,32(sp)
   25f6c:	003d2f06 	br	2542c <__alt_data_end+0xfffe602c>
   25f70:	9029883a 	mov	r20,r18
   25f74:	982b883a 	mov	r21,r19
   25f78:	04400084 	movi	r17,2
   25f7c:	003bc606 	br	24e98 <__alt_data_end+0xfffe5a98>
   25f80:	d8800617 	ldw	r2,24(sp)
   25f84:	103efc26 	beq	r2,zero,25b78 <__alt_data_end+0xfffe6778>
   25f88:	d8c00d17 	ldw	r3,52(sp)
   25f8c:	00fc890e 	bge	zero,r3,251b4 <__alt_data_end+0xfffe5db4>
   25f90:	a80b883a 	mov	r5,r21
   25f94:	a009883a 	mov	r4,r20
   25f98:	000d883a 	mov	r6,zero
   25f9c:	01d00934 	movhi	r7,16420
   25fa0:	00210700 	call	21070 <__muldf3>
   25fa4:	89000044 	addi	r4,r17,1
   25fa8:	1029883a 	mov	r20,r2
   25fac:	182b883a 	mov	r21,r3
   25fb0:	002cc380 	call	2cc38 <__floatsidf>
   25fb4:	a009883a 	mov	r4,r20
   25fb8:	a80b883a 	mov	r5,r21
   25fbc:	100d883a 	mov	r6,r2
   25fc0:	180f883a 	mov	r7,r3
   25fc4:	00210700 	call	21070 <__muldf3>
   25fc8:	1009883a 	mov	r4,r2
   25fcc:	180b883a 	mov	r5,r3
   25fd0:	000d883a 	mov	r6,zero
   25fd4:	01d00734 	movhi	r7,16412
   25fd8:	002c1580 	call	2c158 <__adddf3>
   25fdc:	d9000517 	ldw	r4,20(sp)
   25fe0:	1023883a 	mov	r17,r2
   25fe4:	00bf3034 	movhi	r2,64704
   25fe8:	213fffc4 	addi	r4,r4,-1
   25fec:	1885883a 	add	r2,r3,r2
   25ff0:	d9001215 	stw	r4,72(sp)
   25ff4:	d8800e15 	stw	r2,56(sp)
   25ff8:	da800d17 	ldw	r10,52(sp)
   25ffc:	003bc306 	br	24f0c <__alt_data_end+0xfffe5b0c>
   26000:	b039883a 	mov	fp,r22
   26004:	01000e44 	movi	r4,57
   26008:	8825883a 	mov	r18,r17
   2600c:	9dc00044 	addi	r23,r19,1
   26010:	99000005 	stb	r4,0(r19)
   26014:	a023883a 	mov	r17,r20
   26018:	003dae06 	br	256d4 <__alt_data_end+0xfffe62d4>
   2601c:	d9800e17 	ldw	r6,56(sp)
   26020:	d9c01117 	ldw	r7,68(sp)
   26024:	0009883a 	mov	r4,zero
   26028:	014ff834 	movhi	r5,16352
   2602c:	da001715 	stw	r8,92(sp)
   26030:	da401515 	stw	r9,84(sp)
   26034:	00217940 	call	21794 <__subdf3>
   26038:	da001717 	ldw	r8,92(sp)
   2603c:	da401517 	ldw	r9,84(sp)
   26040:	1009883a 	mov	r4,r2
   26044:	180b883a 	mov	r5,r3
   26048:	400d883a 	mov	r6,r8
   2604c:	480f883a 	mov	r7,r9
   26050:	002ca780 	call	2ca78 <__gedf2>
   26054:	00bc570e 	bge	zero,r2,251b4 <__alt_data_end+0xfffe5db4>
   26058:	01000c04 	movi	r4,48
   2605c:	00000106 	br	26064 <_dtoa_r+0x1624>
   26060:	102f883a 	mov	r23,r2
   26064:	b8bfffc4 	addi	r2,r23,-1
   26068:	10c00007 	ldb	r3,0(r2)
   2606c:	193ffc26 	beq	r3,r4,26060 <__alt_data_end+0xfffe6c60>
   26070:	d9801217 	ldw	r6,72(sp)
   26074:	d9800515 	stw	r6,20(sp)
   26078:	003c1f06 	br	250f8 <__alt_data_end+0xfffe5cf8>
   2607c:	d8801217 	ldw	r2,72(sp)
   26080:	dc001117 	ldw	r16,68(sp)
   26084:	d8800515 	stw	r2,20(sp)
   26088:	003cc906 	br	253b0 <__alt_data_end+0xfffe5fb0>
   2608c:	dd801317 	ldw	r22,76(sp)
   26090:	dc001117 	ldw	r16,68(sp)
   26094:	dcc01417 	ldw	r19,80(sp)
   26098:	dc801017 	ldw	r18,64(sp)
   2609c:	003c4506 	br	251b4 <__alt_data_end+0xfffe5db4>
   260a0:	103e5d1e 	bne	r2,zero,25a18 <__alt_data_end+0xfffe6618>
   260a4:	4080004c 	andi	r2,r8,1
   260a8:	103e5b26 	beq	r2,zero,25a18 <__alt_data_end+0xfffe6618>
   260ac:	003e5706 	br	25a0c <__alt_data_end+0xfffe660c>
   260b0:	d8c00317 	ldw	r3,12(sp)
   260b4:	00800084 	movi	r2,2
   260b8:	10c00a16 	blt	r2,r3,260e4 <_dtoa_r+0x16a4>
   260bc:	d9000d17 	ldw	r4,52(sp)
   260c0:	003e8306 	br	25ad0 <__alt_data_end+0xfffe66d0>
   260c4:	04400084 	movi	r17,2
   260c8:	003b7306 	br	24e98 <__alt_data_end+0xfffe5a98>
   260cc:	d9801217 	ldw	r6,72(sp)
   260d0:	d9800515 	stw	r6,20(sp)
   260d4:	003cb606 	br	253b0 <__alt_data_end+0xfffe5fb0>
   260d8:	d9001217 	ldw	r4,72(sp)
   260dc:	d9000515 	stw	r4,20(sp)
   260e0:	003c0506 	br	250f8 <__alt_data_end+0xfffe5cf8>
   260e4:	d9800d17 	ldw	r6,52(sp)
   260e8:	d9800615 	stw	r6,24(sp)
   260ec:	003e8306 	br	25afc <__alt_data_end+0xfffe66fc>
   260f0:	d9800317 	ldw	r6,12(sp)
   260f4:	00800084 	movi	r2,2
   260f8:	11800216 	blt	r2,r6,26104 <_dtoa_r+0x16c4>
   260fc:	d8800d17 	ldw	r2,52(sp)
   26100:	003da606 	br	2579c <__alt_data_end+0xfffe639c>
   26104:	d8800d17 	ldw	r2,52(sp)
   26108:	d8800615 	stw	r2,24(sp)
   2610c:	003e7b06 	br	25afc <__alt_data_end+0xfffe66fc>
   26110:	05000044 	movi	r20,1
   26114:	003b0506 	br	24d2c <__alt_data_end+0xfffe592c>
   26118:	8009883a 	mov	r4,r16
   2611c:	80001115 	stw	zero,68(r16)
   26120:	000b883a 	mov	r5,zero
   26124:	00280680 	call	28068 <_Balloc>
   26128:	d8800715 	stw	r2,28(sp)
   2612c:	d8c00717 	ldw	r3,28(sp)
   26130:	00bfffc4 	movi	r2,-1
   26134:	01000044 	movi	r4,1
   26138:	d8800615 	stw	r2,24(sp)
   2613c:	80c01015 	stw	r3,64(r16)
   26140:	d9000b15 	stw	r4,44(sp)
   26144:	d8002215 	stw	zero,136(sp)
   26148:	d8800d15 	stw	r2,52(sp)
   2614c:	003c1906 	br	251b4 <__alt_data_end+0xfffe5db4>
   26150:	193d2926 	beq	r3,r4,255f8 <__alt_data_end+0xfffe61f8>
   26154:	00c00f04 	movi	r3,60
   26158:	1885c83a 	sub	r2,r3,r2
   2615c:	003d7b06 	br	2574c <__alt_data_end+0xfffe634c>
   26160:	000b883a 	mov	r5,zero
   26164:	003b1006 	br	24da8 <__alt_data_end+0xfffe59a8>

00026168 <_fflush_r>:
   26168:	defffb04 	addi	sp,sp,-20
   2616c:	dcc00315 	stw	r19,12(sp)
   26170:	dc000015 	stw	r16,0(sp)
   26174:	dfc00415 	stw	ra,16(sp)
   26178:	dc800215 	stw	r18,8(sp)
   2617c:	dc400115 	stw	r17,4(sp)
   26180:	2027883a 	mov	r19,r4
   26184:	2821883a 	mov	r16,r5
   26188:	20000226 	beq	r4,zero,26194 <_fflush_r+0x2c>
   2618c:	20800e17 	ldw	r2,56(r4)
   26190:	10005326 	beq	r2,zero,262e0 <_fflush_r+0x178>
   26194:	8080030b 	ldhu	r2,12(r16)
   26198:	10ffffcc 	andi	r3,r2,65535
   2619c:	18e0001c 	xori	r3,r3,32768
   261a0:	18e00004 	addi	r3,r3,-32768
   261a4:	18002c26 	beq	r3,zero,26258 <_fflush_r+0xf0>
   261a8:	10c0020c 	andi	r3,r2,8
   261ac:	1800321e 	bne	r3,zero,26278 <_fflush_r+0x110>
   261b0:	80c00117 	ldw	r3,4(r16)
   261b4:	10820014 	ori	r2,r2,2048
   261b8:	8080030d 	sth	r2,12(r16)
   261bc:	00c0570e 	bge	zero,r3,2631c <_fflush_r+0x1b4>
   261c0:	82000a17 	ldw	r8,40(r16)
   261c4:	40002426 	beq	r8,zero,26258 <_fflush_r+0xf0>
   261c8:	9c400017 	ldw	r17,0(r19)
   261cc:	10c4000c 	andi	r3,r2,4096
   261d0:	98000015 	stw	zero,0(r19)
   261d4:	18004626 	beq	r3,zero,262f0 <_fflush_r+0x188>
   261d8:	81801417 	ldw	r6,80(r16)
   261dc:	10c0010c 	andi	r3,r2,4
   261e0:	18000626 	beq	r3,zero,261fc <_fflush_r+0x94>
   261e4:	80c00117 	ldw	r3,4(r16)
   261e8:	80800c17 	ldw	r2,48(r16)
   261ec:	30cdc83a 	sub	r6,r6,r3
   261f0:	10000226 	beq	r2,zero,261fc <_fflush_r+0x94>
   261f4:	80800f17 	ldw	r2,60(r16)
   261f8:	308dc83a 	sub	r6,r6,r2
   261fc:	81400717 	ldw	r5,28(r16)
   26200:	9809883a 	mov	r4,r19
   26204:	000f883a 	mov	r7,zero
   26208:	403ee83a 	callr	r8
   2620c:	00ffffc4 	movi	r3,-1
   26210:	10c04526 	beq	r2,r3,26328 <_fflush_r+0x1c0>
   26214:	80c0030b 	ldhu	r3,12(r16)
   26218:	81000417 	ldw	r4,16(r16)
   2621c:	80000115 	stw	zero,4(r16)
   26220:	197dffcc 	andi	r5,r3,63487
   26224:	8140030d 	sth	r5,12(r16)
   26228:	81000015 	stw	r4,0(r16)
   2622c:	18c4000c 	andi	r3,r3,4096
   26230:	18000126 	beq	r3,zero,26238 <_fflush_r+0xd0>
   26234:	80801415 	stw	r2,80(r16)
   26238:	81400c17 	ldw	r5,48(r16)
   2623c:	9c400015 	stw	r17,0(r19)
   26240:	28000526 	beq	r5,zero,26258 <_fflush_r+0xf0>
   26244:	80801004 	addi	r2,r16,64
   26248:	28800226 	beq	r5,r2,26254 <_fflush_r+0xec>
   2624c:	9809883a 	mov	r4,r19
   26250:	00268840 	call	26884 <_free_r>
   26254:	80000c15 	stw	zero,48(r16)
   26258:	0005883a 	mov	r2,zero
   2625c:	dfc00417 	ldw	ra,16(sp)
   26260:	dcc00317 	ldw	r19,12(sp)
   26264:	dc800217 	ldw	r18,8(sp)
   26268:	dc400117 	ldw	r17,4(sp)
   2626c:	dc000017 	ldw	r16,0(sp)
   26270:	dec00504 	addi	sp,sp,20
   26274:	f800283a 	ret
   26278:	84800417 	ldw	r18,16(r16)
   2627c:	903ff626 	beq	r18,zero,26258 <__alt_data_end+0xfffe6e58>
   26280:	84400017 	ldw	r17,0(r16)
   26284:	108000cc 	andi	r2,r2,3
   26288:	84800015 	stw	r18,0(r16)
   2628c:	8ca3c83a 	sub	r17,r17,r18
   26290:	10001526 	beq	r2,zero,262e8 <_fflush_r+0x180>
   26294:	0005883a 	mov	r2,zero
   26298:	80800215 	stw	r2,8(r16)
   2629c:	04400316 	blt	zero,r17,262ac <_fflush_r+0x144>
   262a0:	003fed06 	br	26258 <__alt_data_end+0xfffe6e58>
   262a4:	90a5883a 	add	r18,r18,r2
   262a8:	047feb0e 	bge	zero,r17,26258 <__alt_data_end+0xfffe6e58>
   262ac:	80800917 	ldw	r2,36(r16)
   262b0:	81400717 	ldw	r5,28(r16)
   262b4:	880f883a 	mov	r7,r17
   262b8:	900d883a 	mov	r6,r18
   262bc:	9809883a 	mov	r4,r19
   262c0:	103ee83a 	callr	r2
   262c4:	88a3c83a 	sub	r17,r17,r2
   262c8:	00bff616 	blt	zero,r2,262a4 <__alt_data_end+0xfffe6ea4>
   262cc:	80c0030b 	ldhu	r3,12(r16)
   262d0:	00bfffc4 	movi	r2,-1
   262d4:	18c01014 	ori	r3,r3,64
   262d8:	80c0030d 	sth	r3,12(r16)
   262dc:	003fdf06 	br	2625c <__alt_data_end+0xfffe6e5c>
   262e0:	00267100 	call	26710 <__sinit>
   262e4:	003fab06 	br	26194 <__alt_data_end+0xfffe6d94>
   262e8:	80800517 	ldw	r2,20(r16)
   262ec:	003fea06 	br	26298 <__alt_data_end+0xfffe6e98>
   262f0:	81400717 	ldw	r5,28(r16)
   262f4:	000d883a 	mov	r6,zero
   262f8:	9809883a 	mov	r4,r19
   262fc:	01c00044 	movi	r7,1
   26300:	403ee83a 	callr	r8
   26304:	100d883a 	mov	r6,r2
   26308:	00bfffc4 	movi	r2,-1
   2630c:	30801326 	beq	r6,r2,2635c <_fflush_r+0x1f4>
   26310:	8080030b 	ldhu	r2,12(r16)
   26314:	82000a17 	ldw	r8,40(r16)
   26318:	003fb006 	br	261dc <__alt_data_end+0xfffe6ddc>
   2631c:	80c00f17 	ldw	r3,60(r16)
   26320:	00ffa716 	blt	zero,r3,261c0 <__alt_data_end+0xfffe6dc0>
   26324:	003fcc06 	br	26258 <__alt_data_end+0xfffe6e58>
   26328:	98c00017 	ldw	r3,0(r19)
   2632c:	183fb926 	beq	r3,zero,26214 <__alt_data_end+0xfffe6e14>
   26330:	01000744 	movi	r4,29
   26334:	19000226 	beq	r3,r4,26340 <_fflush_r+0x1d8>
   26338:	01000584 	movi	r4,22
   2633c:	1900101e 	bne	r3,r4,26380 <_fflush_r+0x218>
   26340:	8080030b 	ldhu	r2,12(r16)
   26344:	80c00417 	ldw	r3,16(r16)
   26348:	80000115 	stw	zero,4(r16)
   2634c:	10bdffcc 	andi	r2,r2,63487
   26350:	8080030d 	sth	r2,12(r16)
   26354:	80c00015 	stw	r3,0(r16)
   26358:	003fb706 	br	26238 <__alt_data_end+0xfffe6e38>
   2635c:	98800017 	ldw	r2,0(r19)
   26360:	103feb26 	beq	r2,zero,26310 <__alt_data_end+0xfffe6f10>
   26364:	00c00744 	movi	r3,29
   26368:	10c00226 	beq	r2,r3,26374 <_fflush_r+0x20c>
   2636c:	00c00584 	movi	r3,22
   26370:	10ffd61e 	bne	r2,r3,262cc <__alt_data_end+0xfffe6ecc>
   26374:	9c400015 	stw	r17,0(r19)
   26378:	0005883a 	mov	r2,zero
   2637c:	003fb706 	br	2625c <__alt_data_end+0xfffe6e5c>
   26380:	80c0030b 	ldhu	r3,12(r16)
   26384:	18c01014 	ori	r3,r3,64
   26388:	80c0030d 	sth	r3,12(r16)
   2638c:	003fb306 	br	2625c <__alt_data_end+0xfffe6e5c>

00026390 <fflush>:
   26390:	20000526 	beq	r4,zero,263a8 <fflush+0x18>
   26394:	008000f4 	movhi	r2,3
   26398:	1086f204 	addi	r2,r2,7112
   2639c:	200b883a 	mov	r5,r4
   263a0:	11000017 	ldw	r4,0(r2)
   263a4:	00261681 	jmpi	26168 <_fflush_r>
   263a8:	008000f4 	movhi	r2,3
   263ac:	1086f104 	addi	r2,r2,7108
   263b0:	11000017 	ldw	r4,0(r2)
   263b4:	014000b4 	movhi	r5,2
   263b8:	29585a04 	addi	r5,r5,24936
   263bc:	00270d01 	jmpi	270d0 <_fwalk_reent>

000263c0 <__fp_lock>:
   263c0:	0005883a 	mov	r2,zero
   263c4:	f800283a 	ret

000263c8 <__fp_unlock>:
   263c8:	0005883a 	mov	r2,zero
   263cc:	f800283a 	ret

000263d0 <_cleanup_r>:
   263d0:	014000f4 	movhi	r5,3
   263d4:	296bd104 	addi	r5,r5,-20668
   263d8:	00270181 	jmpi	27018 <_fwalk>

000263dc <__sinit.part.1>:
   263dc:	defff604 	addi	sp,sp,-40
   263e0:	00c000b4 	movhi	r3,2
   263e4:	dfc00915 	stw	ra,36(sp)
   263e8:	df000815 	stw	fp,32(sp)
   263ec:	ddc00715 	stw	r23,28(sp)
   263f0:	dd800615 	stw	r22,24(sp)
   263f4:	dd400515 	stw	r21,20(sp)
   263f8:	dd000415 	stw	r20,16(sp)
   263fc:	dcc00315 	stw	r19,12(sp)
   26400:	dc800215 	stw	r18,8(sp)
   26404:	dc400115 	stw	r17,4(sp)
   26408:	dc000015 	stw	r16,0(sp)
   2640c:	18d8f404 	addi	r3,r3,25552
   26410:	24000117 	ldw	r16,4(r4)
   26414:	20c00f15 	stw	r3,60(r4)
   26418:	07000044 	movi	fp,1
   2641c:	00c000c4 	movi	r3,3
   26420:	2080bb04 	addi	r2,r4,748
   26424:	20c0b915 	stw	r3,740(r4)
   26428:	27000e15 	stw	fp,56(r4)
   2642c:	2080ba15 	stw	r2,744(r4)
   26430:	2000b815 	stw	zero,736(r4)
   26434:	05c00204 	movi	r23,8
   26438:	00800104 	movi	r2,4
   2643c:	2025883a 	mov	r18,r4
   26440:	b80d883a 	mov	r6,r23
   26444:	81001704 	addi	r4,r16,92
   26448:	000b883a 	mov	r5,zero
   2644c:	80000015 	stw	zero,0(r16)
   26450:	80000115 	stw	zero,4(r16)
   26454:	80000215 	stw	zero,8(r16)
   26458:	8080030d 	sth	r2,12(r16)
   2645c:	80001915 	stw	zero,100(r16)
   26460:	8000038d 	sth	zero,14(r16)
   26464:	80000415 	stw	zero,16(r16)
   26468:	80000515 	stw	zero,20(r16)
   2646c:	80000615 	stw	zero,24(r16)
   26470:	0027f440 	call	27f44 <memset>
   26474:	058000f4 	movhi	r22,3
   26478:	94400217 	ldw	r17,8(r18)
   2647c:	054000f4 	movhi	r21,3
   26480:	050000f4 	movhi	r20,3
   26484:	04c000f4 	movhi	r19,3
   26488:	b5a59704 	addi	r22,r22,-27044
   2648c:	ad65ae04 	addi	r21,r21,-26952
   26490:	a525cd04 	addi	r20,r20,-26828
   26494:	9ce5e404 	addi	r19,r19,-26736
   26498:	85800815 	stw	r22,32(r16)
   2649c:	85400915 	stw	r21,36(r16)
   264a0:	85000a15 	stw	r20,40(r16)
   264a4:	84c00b15 	stw	r19,44(r16)
   264a8:	84000715 	stw	r16,28(r16)
   264ac:	00800284 	movi	r2,10
   264b0:	89001704 	addi	r4,r17,92
   264b4:	b80d883a 	mov	r6,r23
   264b8:	000b883a 	mov	r5,zero
   264bc:	88000015 	stw	zero,0(r17)
   264c0:	88000115 	stw	zero,4(r17)
   264c4:	88000215 	stw	zero,8(r17)
   264c8:	8880030d 	sth	r2,12(r17)
   264cc:	88001915 	stw	zero,100(r17)
   264d0:	8f00038d 	sth	fp,14(r17)
   264d4:	88000415 	stw	zero,16(r17)
   264d8:	88000515 	stw	zero,20(r17)
   264dc:	88000615 	stw	zero,24(r17)
   264e0:	0027f440 	call	27f44 <memset>
   264e4:	94000317 	ldw	r16,12(r18)
   264e8:	00800484 	movi	r2,18
   264ec:	8c400715 	stw	r17,28(r17)
   264f0:	8d800815 	stw	r22,32(r17)
   264f4:	8d400915 	stw	r21,36(r17)
   264f8:	8d000a15 	stw	r20,40(r17)
   264fc:	8cc00b15 	stw	r19,44(r17)
   26500:	8080030d 	sth	r2,12(r16)
   26504:	00800084 	movi	r2,2
   26508:	80000015 	stw	zero,0(r16)
   2650c:	80000115 	stw	zero,4(r16)
   26510:	80000215 	stw	zero,8(r16)
   26514:	80001915 	stw	zero,100(r16)
   26518:	8080038d 	sth	r2,14(r16)
   2651c:	80000415 	stw	zero,16(r16)
   26520:	80000515 	stw	zero,20(r16)
   26524:	80000615 	stw	zero,24(r16)
   26528:	81001704 	addi	r4,r16,92
   2652c:	000b883a 	mov	r5,zero
   26530:	b80d883a 	mov	r6,r23
   26534:	0027f440 	call	27f44 <memset>
   26538:	84000715 	stw	r16,28(r16)
   2653c:	85800815 	stw	r22,32(r16)
   26540:	85400915 	stw	r21,36(r16)
   26544:	85000a15 	stw	r20,40(r16)
   26548:	84c00b15 	stw	r19,44(r16)
   2654c:	dfc00917 	ldw	ra,36(sp)
   26550:	df000817 	ldw	fp,32(sp)
   26554:	ddc00717 	ldw	r23,28(sp)
   26558:	dd800617 	ldw	r22,24(sp)
   2655c:	dd400517 	ldw	r21,20(sp)
   26560:	dd000417 	ldw	r20,16(sp)
   26564:	dcc00317 	ldw	r19,12(sp)
   26568:	dc800217 	ldw	r18,8(sp)
   2656c:	dc400117 	ldw	r17,4(sp)
   26570:	dc000017 	ldw	r16,0(sp)
   26574:	dec00a04 	addi	sp,sp,40
   26578:	f800283a 	ret

0002657c <__sfmoreglue>:
   2657c:	defffc04 	addi	sp,sp,-16
   26580:	dc400115 	stw	r17,4(sp)
   26584:	2c401a24 	muli	r17,r5,104
   26588:	dc800215 	stw	r18,8(sp)
   2658c:	2825883a 	mov	r18,r5
   26590:	89400304 	addi	r5,r17,12
   26594:	dc000015 	stw	r16,0(sp)
   26598:	dfc00315 	stw	ra,12(sp)
   2659c:	00274200 	call	27420 <_malloc_r>
   265a0:	1021883a 	mov	r16,r2
   265a4:	10000726 	beq	r2,zero,265c4 <__sfmoreglue+0x48>
   265a8:	11000304 	addi	r4,r2,12
   265ac:	10000015 	stw	zero,0(r2)
   265b0:	14800115 	stw	r18,4(r2)
   265b4:	11000215 	stw	r4,8(r2)
   265b8:	000b883a 	mov	r5,zero
   265bc:	880d883a 	mov	r6,r17
   265c0:	0027f440 	call	27f44 <memset>
   265c4:	8005883a 	mov	r2,r16
   265c8:	dfc00317 	ldw	ra,12(sp)
   265cc:	dc800217 	ldw	r18,8(sp)
   265d0:	dc400117 	ldw	r17,4(sp)
   265d4:	dc000017 	ldw	r16,0(sp)
   265d8:	dec00404 	addi	sp,sp,16
   265dc:	f800283a 	ret

000265e0 <__sfp>:
   265e0:	008000f4 	movhi	r2,3
   265e4:	defffb04 	addi	sp,sp,-20
   265e8:	1086f104 	addi	r2,r2,7108
   265ec:	dc800215 	stw	r18,8(sp)
   265f0:	14800017 	ldw	r18,0(r2)
   265f4:	dcc00315 	stw	r19,12(sp)
   265f8:	dfc00415 	stw	ra,16(sp)
   265fc:	90800e17 	ldw	r2,56(r18)
   26600:	dc400115 	stw	r17,4(sp)
   26604:	dc000015 	stw	r16,0(sp)
   26608:	2027883a 	mov	r19,r4
   2660c:	1000021e 	bne	r2,zero,26618 <__sfp+0x38>
   26610:	9009883a 	mov	r4,r18
   26614:	00263dc0 	call	263dc <__sinit.part.1>
   26618:	9480b804 	addi	r18,r18,736
   2661c:	047fffc4 	movi	r17,-1
   26620:	91400117 	ldw	r5,4(r18)
   26624:	94000217 	ldw	r16,8(r18)
   26628:	297fffc4 	addi	r5,r5,-1
   2662c:	28000a16 	blt	r5,zero,26658 <__sfp+0x78>
   26630:	8080030f 	ldh	r2,12(r16)
   26634:	10000c26 	beq	r2,zero,26668 <__sfp+0x88>
   26638:	80c01d04 	addi	r3,r16,116
   2663c:	00000206 	br	26648 <__sfp+0x68>
   26640:	18bfe60f 	ldh	r2,-104(r3)
   26644:	10000826 	beq	r2,zero,26668 <__sfp+0x88>
   26648:	297fffc4 	addi	r5,r5,-1
   2664c:	1c3ffd04 	addi	r16,r3,-12
   26650:	18c01a04 	addi	r3,r3,104
   26654:	2c7ffa1e 	bne	r5,r17,26640 <__alt_data_end+0xfffe7240>
   26658:	90800017 	ldw	r2,0(r18)
   2665c:	10001d26 	beq	r2,zero,266d4 <__sfp+0xf4>
   26660:	1025883a 	mov	r18,r2
   26664:	003fee06 	br	26620 <__alt_data_end+0xfffe7220>
   26668:	00bfffc4 	movi	r2,-1
   2666c:	8080038d 	sth	r2,14(r16)
   26670:	00800044 	movi	r2,1
   26674:	8080030d 	sth	r2,12(r16)
   26678:	80001915 	stw	zero,100(r16)
   2667c:	80000015 	stw	zero,0(r16)
   26680:	80000215 	stw	zero,8(r16)
   26684:	80000115 	stw	zero,4(r16)
   26688:	80000415 	stw	zero,16(r16)
   2668c:	80000515 	stw	zero,20(r16)
   26690:	80000615 	stw	zero,24(r16)
   26694:	81001704 	addi	r4,r16,92
   26698:	000b883a 	mov	r5,zero
   2669c:	01800204 	movi	r6,8
   266a0:	0027f440 	call	27f44 <memset>
   266a4:	8005883a 	mov	r2,r16
   266a8:	80000c15 	stw	zero,48(r16)
   266ac:	80000d15 	stw	zero,52(r16)
   266b0:	80001115 	stw	zero,68(r16)
   266b4:	80001215 	stw	zero,72(r16)
   266b8:	dfc00417 	ldw	ra,16(sp)
   266bc:	dcc00317 	ldw	r19,12(sp)
   266c0:	dc800217 	ldw	r18,8(sp)
   266c4:	dc400117 	ldw	r17,4(sp)
   266c8:	dc000017 	ldw	r16,0(sp)
   266cc:	dec00504 	addi	sp,sp,20
   266d0:	f800283a 	ret
   266d4:	9809883a 	mov	r4,r19
   266d8:	01400104 	movi	r5,4
   266dc:	002657c0 	call	2657c <__sfmoreglue>
   266e0:	90800015 	stw	r2,0(r18)
   266e4:	103fde1e 	bne	r2,zero,26660 <__alt_data_end+0xfffe7260>
   266e8:	00800304 	movi	r2,12
   266ec:	98800015 	stw	r2,0(r19)
   266f0:	0005883a 	mov	r2,zero
   266f4:	003ff006 	br	266b8 <__alt_data_end+0xfffe72b8>

000266f8 <_cleanup>:
   266f8:	008000f4 	movhi	r2,3
   266fc:	1086f104 	addi	r2,r2,7108
   26700:	11000017 	ldw	r4,0(r2)
   26704:	014000f4 	movhi	r5,3
   26708:	296bd104 	addi	r5,r5,-20668
   2670c:	00270181 	jmpi	27018 <_fwalk>

00026710 <__sinit>:
   26710:	20800e17 	ldw	r2,56(r4)
   26714:	10000126 	beq	r2,zero,2671c <__sinit+0xc>
   26718:	f800283a 	ret
   2671c:	00263dc1 	jmpi	263dc <__sinit.part.1>

00026720 <__sfp_lock_acquire>:
   26720:	f800283a 	ret

00026724 <__sfp_lock_release>:
   26724:	f800283a 	ret

00026728 <__sinit_lock_acquire>:
   26728:	f800283a 	ret

0002672c <__sinit_lock_release>:
   2672c:	f800283a 	ret

00026730 <__fp_lock_all>:
   26730:	008000f4 	movhi	r2,3
   26734:	1086f204 	addi	r2,r2,7112
   26738:	11000017 	ldw	r4,0(r2)
   2673c:	014000b4 	movhi	r5,2
   26740:	2958f004 	addi	r5,r5,25536
   26744:	00270181 	jmpi	27018 <_fwalk>

00026748 <__fp_unlock_all>:
   26748:	008000f4 	movhi	r2,3
   2674c:	1086f204 	addi	r2,r2,7112
   26750:	11000017 	ldw	r4,0(r2)
   26754:	014000b4 	movhi	r5,2
   26758:	2958f204 	addi	r5,r5,25544
   2675c:	00270181 	jmpi	27018 <_fwalk>

00026760 <_malloc_trim_r>:
   26760:	defffb04 	addi	sp,sp,-20
   26764:	dcc00315 	stw	r19,12(sp)
   26768:	04c000f4 	movhi	r19,3
   2676c:	dc800215 	stw	r18,8(sp)
   26770:	dc400115 	stw	r17,4(sp)
   26774:	dc000015 	stw	r16,0(sp)
   26778:	dfc00415 	stw	ra,16(sp)
   2677c:	2821883a 	mov	r16,r5
   26780:	9cc14f04 	addi	r19,r19,1340
   26784:	2025883a 	mov	r18,r4
   26788:	002d36c0 	call	2d36c <__malloc_lock>
   2678c:	98800217 	ldw	r2,8(r19)
   26790:	14400117 	ldw	r17,4(r2)
   26794:	00bfff04 	movi	r2,-4
   26798:	88a2703a 	and	r17,r17,r2
   2679c:	8c21c83a 	sub	r16,r17,r16
   267a0:	8403fbc4 	addi	r16,r16,4079
   267a4:	8020d33a 	srli	r16,r16,12
   267a8:	0083ffc4 	movi	r2,4095
   267ac:	843fffc4 	addi	r16,r16,-1
   267b0:	8020933a 	slli	r16,r16,12
   267b4:	1400060e 	bge	r2,r16,267d0 <_malloc_trim_r+0x70>
   267b8:	9009883a 	mov	r4,r18
   267bc:	000b883a 	mov	r5,zero
   267c0:	00296080 	call	29608 <_sbrk_r>
   267c4:	98c00217 	ldw	r3,8(r19)
   267c8:	1c47883a 	add	r3,r3,r17
   267cc:	10c00a26 	beq	r2,r3,267f8 <_malloc_trim_r+0x98>
   267d0:	9009883a 	mov	r4,r18
   267d4:	002d38c0 	call	2d38c <__malloc_unlock>
   267d8:	0005883a 	mov	r2,zero
   267dc:	dfc00417 	ldw	ra,16(sp)
   267e0:	dcc00317 	ldw	r19,12(sp)
   267e4:	dc800217 	ldw	r18,8(sp)
   267e8:	dc400117 	ldw	r17,4(sp)
   267ec:	dc000017 	ldw	r16,0(sp)
   267f0:	dec00504 	addi	sp,sp,20
   267f4:	f800283a 	ret
   267f8:	9009883a 	mov	r4,r18
   267fc:	040bc83a 	sub	r5,zero,r16
   26800:	00296080 	call	29608 <_sbrk_r>
   26804:	00ffffc4 	movi	r3,-1
   26808:	10c00d26 	beq	r2,r3,26840 <_malloc_trim_r+0xe0>
   2680c:	00c000f4 	movhi	r3,3
   26810:	18cdec04 	addi	r3,r3,14256
   26814:	18800017 	ldw	r2,0(r3)
   26818:	99000217 	ldw	r4,8(r19)
   2681c:	8c23c83a 	sub	r17,r17,r16
   26820:	8c400054 	ori	r17,r17,1
   26824:	1421c83a 	sub	r16,r2,r16
   26828:	24400115 	stw	r17,4(r4)
   2682c:	9009883a 	mov	r4,r18
   26830:	1c000015 	stw	r16,0(r3)
   26834:	002d38c0 	call	2d38c <__malloc_unlock>
   26838:	00800044 	movi	r2,1
   2683c:	003fe706 	br	267dc <__alt_data_end+0xfffe73dc>
   26840:	9009883a 	mov	r4,r18
   26844:	000b883a 	mov	r5,zero
   26848:	00296080 	call	29608 <_sbrk_r>
   2684c:	99000217 	ldw	r4,8(r19)
   26850:	014003c4 	movi	r5,15
   26854:	1107c83a 	sub	r3,r2,r4
   26858:	28ffdd0e 	bge	r5,r3,267d0 <__alt_data_end+0xfffe73d0>
   2685c:	014000f4 	movhi	r5,3
   26860:	2946f404 	addi	r5,r5,7120
   26864:	29400017 	ldw	r5,0(r5)
   26868:	18c00054 	ori	r3,r3,1
   2686c:	20c00115 	stw	r3,4(r4)
   26870:	00c000f4 	movhi	r3,3
   26874:	1145c83a 	sub	r2,r2,r5
   26878:	18cdec04 	addi	r3,r3,14256
   2687c:	18800015 	stw	r2,0(r3)
   26880:	003fd306 	br	267d0 <__alt_data_end+0xfffe73d0>

00026884 <_free_r>:
   26884:	28004c26 	beq	r5,zero,269b8 <_free_r+0x134>
   26888:	defffd04 	addi	sp,sp,-12
   2688c:	dc400115 	stw	r17,4(sp)
   26890:	dc000015 	stw	r16,0(sp)
   26894:	2023883a 	mov	r17,r4
   26898:	2821883a 	mov	r16,r5
   2689c:	dfc00215 	stw	ra,8(sp)
   268a0:	002d36c0 	call	2d36c <__malloc_lock>
   268a4:	813fff17 	ldw	r4,-4(r16)
   268a8:	00bfff84 	movi	r2,-2
   268ac:	024000f4 	movhi	r9,3
   268b0:	81bffe04 	addi	r6,r16,-8
   268b4:	2084703a 	and	r2,r4,r2
   268b8:	4a414f04 	addi	r9,r9,1340
   268bc:	308b883a 	add	r5,r6,r2
   268c0:	2a000117 	ldw	r8,4(r5)
   268c4:	49c00217 	ldw	r7,8(r9)
   268c8:	00ffff04 	movi	r3,-4
   268cc:	40c6703a 	and	r3,r8,r3
   268d0:	39405326 	beq	r7,r5,26a20 <_free_r+0x19c>
   268d4:	28c00115 	stw	r3,4(r5)
   268d8:	2100004c 	andi	r4,r4,1
   268dc:	2000091e 	bne	r4,zero,26904 <_free_r+0x80>
   268e0:	81fffe17 	ldw	r7,-8(r16)
   268e4:	4a000204 	addi	r8,r9,8
   268e8:	31cdc83a 	sub	r6,r6,r7
   268ec:	31000217 	ldw	r4,8(r6)
   268f0:	11c5883a 	add	r2,r2,r7
   268f4:	22006126 	beq	r4,r8,26a7c <_free_r+0x1f8>
   268f8:	31c00317 	ldw	r7,12(r6)
   268fc:	21c00315 	stw	r7,12(r4)
   26900:	39000215 	stw	r4,8(r7)
   26904:	28c9883a 	add	r4,r5,r3
   26908:	21c00117 	ldw	r7,4(r4)
   2690c:	39c0004c 	andi	r7,r7,1
   26910:	38000d1e 	bne	r7,zero,26948 <_free_r+0xc4>
   26914:	29000217 	ldw	r4,8(r5)
   26918:	10c5883a 	add	r2,r2,r3
   2691c:	00c000f4 	movhi	r3,3
   26920:	18c15104 	addi	r3,r3,1348
   26924:	20c07526 	beq	r4,r3,26afc <_free_r+0x278>
   26928:	29c00317 	ldw	r7,12(r5)
   2692c:	11400054 	ori	r5,r2,1
   26930:	3087883a 	add	r3,r6,r2
   26934:	21c00315 	stw	r7,12(r4)
   26938:	39000215 	stw	r4,8(r7)
   2693c:	31400115 	stw	r5,4(r6)
   26940:	18800015 	stw	r2,0(r3)
   26944:	00000406 	br	26958 <_free_r+0xd4>
   26948:	10c00054 	ori	r3,r2,1
   2694c:	30c00115 	stw	r3,4(r6)
   26950:	3087883a 	add	r3,r6,r2
   26954:	18800015 	stw	r2,0(r3)
   26958:	00c07fc4 	movi	r3,511
   2695c:	18801736 	bltu	r3,r2,269bc <_free_r+0x138>
   26960:	1004d0fa 	srli	r2,r2,3
   26964:	01400044 	movi	r5,1
   26968:	49000117 	ldw	r4,4(r9)
   2696c:	1087883a 	add	r3,r2,r2
   26970:	18c7883a 	add	r3,r3,r3
   26974:	1005d0ba 	srai	r2,r2,2
   26978:	18c7883a 	add	r3,r3,r3
   2697c:	1a47883a 	add	r3,r3,r9
   26980:	19c00217 	ldw	r7,8(r3)
   26984:	2884983a 	sll	r2,r5,r2
   26988:	30c00315 	stw	r3,12(r6)
   2698c:	31c00215 	stw	r7,8(r6)
   26990:	1104b03a 	or	r2,r2,r4
   26994:	19800215 	stw	r6,8(r3)
   26998:	48800115 	stw	r2,4(r9)
   2699c:	39800315 	stw	r6,12(r7)
   269a0:	8809883a 	mov	r4,r17
   269a4:	dfc00217 	ldw	ra,8(sp)
   269a8:	dc400117 	ldw	r17,4(sp)
   269ac:	dc000017 	ldw	r16,0(sp)
   269b0:	dec00304 	addi	sp,sp,12
   269b4:	002d38c1 	jmpi	2d38c <__malloc_unlock>
   269b8:	f800283a 	ret
   269bc:	1006d27a 	srli	r3,r2,9
   269c0:	01000104 	movi	r4,4
   269c4:	20c04036 	bltu	r4,r3,26ac8 <_free_r+0x244>
   269c8:	1006d1ba 	srli	r3,r2,6
   269cc:	19400e04 	addi	r5,r3,56
   269d0:	2947883a 	add	r3,r5,r5
   269d4:	18c7883a 	add	r3,r3,r3
   269d8:	18c7883a 	add	r3,r3,r3
   269dc:	1a49883a 	add	r4,r3,r9
   269e0:	20c00217 	ldw	r3,8(r4)
   269e4:	01c000f4 	movhi	r7,3
   269e8:	39c14f04 	addi	r7,r7,1340
   269ec:	19003b26 	beq	r3,r4,26adc <_free_r+0x258>
   269f0:	01ffff04 	movi	r7,-4
   269f4:	19400117 	ldw	r5,4(r3)
   269f8:	29ca703a 	and	r5,r5,r7
   269fc:	1140022e 	bgeu	r2,r5,26a08 <_free_r+0x184>
   26a00:	18c00217 	ldw	r3,8(r3)
   26a04:	20fffb1e 	bne	r4,r3,269f4 <__alt_data_end+0xfffe75f4>
   26a08:	18800317 	ldw	r2,12(r3)
   26a0c:	30800315 	stw	r2,12(r6)
   26a10:	30c00215 	stw	r3,8(r6)
   26a14:	11800215 	stw	r6,8(r2)
   26a18:	19800315 	stw	r6,12(r3)
   26a1c:	003fe006 	br	269a0 <__alt_data_end+0xfffe75a0>
   26a20:	2100004c 	andi	r4,r4,1
   26a24:	1885883a 	add	r2,r3,r2
   26a28:	2000071e 	bne	r4,zero,26a48 <_free_r+0x1c4>
   26a2c:	817ffe17 	ldw	r5,-8(r16)
   26a30:	314dc83a 	sub	r6,r6,r5
   26a34:	30c00317 	ldw	r3,12(r6)
   26a38:	31000217 	ldw	r4,8(r6)
   26a3c:	1145883a 	add	r2,r2,r5
   26a40:	20c00315 	stw	r3,12(r4)
   26a44:	19000215 	stw	r4,8(r3)
   26a48:	10c00054 	ori	r3,r2,1
   26a4c:	30c00115 	stw	r3,4(r6)
   26a50:	00c000f4 	movhi	r3,3
   26a54:	18c6f504 	addi	r3,r3,7124
   26a58:	18c00017 	ldw	r3,0(r3)
   26a5c:	49800215 	stw	r6,8(r9)
   26a60:	10ffcf36 	bltu	r2,r3,269a0 <__alt_data_end+0xfffe75a0>
   26a64:	008000f4 	movhi	r2,3
   26a68:	108de304 	addi	r2,r2,14220
   26a6c:	11400017 	ldw	r5,0(r2)
   26a70:	8809883a 	mov	r4,r17
   26a74:	00267600 	call	26760 <_malloc_trim_r>
   26a78:	003fc906 	br	269a0 <__alt_data_end+0xfffe75a0>
   26a7c:	28c9883a 	add	r4,r5,r3
   26a80:	21000117 	ldw	r4,4(r4)
   26a84:	2100004c 	andi	r4,r4,1
   26a88:	20000a1e 	bne	r4,zero,26ab4 <_free_r+0x230>
   26a8c:	29000317 	ldw	r4,12(r5)
   26a90:	29400217 	ldw	r5,8(r5)
   26a94:	10c5883a 	add	r2,r2,r3
   26a98:	10c00054 	ori	r3,r2,1
   26a9c:	29000315 	stw	r4,12(r5)
   26aa0:	21400215 	stw	r5,8(r4)
   26aa4:	30c00115 	stw	r3,4(r6)
   26aa8:	308d883a 	add	r6,r6,r2
   26aac:	30800015 	stw	r2,0(r6)
   26ab0:	003fbb06 	br	269a0 <__alt_data_end+0xfffe75a0>
   26ab4:	10c00054 	ori	r3,r2,1
   26ab8:	30c00115 	stw	r3,4(r6)
   26abc:	308d883a 	add	r6,r6,r2
   26ac0:	30800015 	stw	r2,0(r6)
   26ac4:	003fb606 	br	269a0 <__alt_data_end+0xfffe75a0>
   26ac8:	01000504 	movi	r4,20
   26acc:	20c01436 	bltu	r4,r3,26b20 <_free_r+0x29c>
   26ad0:	194016c4 	addi	r5,r3,91
   26ad4:	2947883a 	add	r3,r5,r5
   26ad8:	003fbe06 	br	269d4 <__alt_data_end+0xfffe75d4>
   26adc:	280bd0ba 	srai	r5,r5,2
   26ae0:	00800044 	movi	r2,1
   26ae4:	39000117 	ldw	r4,4(r7)
   26ae8:	114a983a 	sll	r5,r2,r5
   26aec:	1805883a 	mov	r2,r3
   26af0:	2908b03a 	or	r4,r5,r4
   26af4:	39000115 	stw	r4,4(r7)
   26af8:	003fc406 	br	26a0c <__alt_data_end+0xfffe760c>
   26afc:	49800515 	stw	r6,20(r9)
   26b00:	49800415 	stw	r6,16(r9)
   26b04:	10c00054 	ori	r3,r2,1
   26b08:	31000315 	stw	r4,12(r6)
   26b0c:	31000215 	stw	r4,8(r6)
   26b10:	30c00115 	stw	r3,4(r6)
   26b14:	308d883a 	add	r6,r6,r2
   26b18:	30800015 	stw	r2,0(r6)
   26b1c:	003fa006 	br	269a0 <__alt_data_end+0xfffe75a0>
   26b20:	01001504 	movi	r4,84
   26b24:	20c00436 	bltu	r4,r3,26b38 <_free_r+0x2b4>
   26b28:	1006d33a 	srli	r3,r2,12
   26b2c:	19401b84 	addi	r5,r3,110
   26b30:	2947883a 	add	r3,r5,r5
   26b34:	003fa706 	br	269d4 <__alt_data_end+0xfffe75d4>
   26b38:	01005504 	movi	r4,340
   26b3c:	20c00436 	bltu	r4,r3,26b50 <_free_r+0x2cc>
   26b40:	1006d3fa 	srli	r3,r2,15
   26b44:	19401dc4 	addi	r5,r3,119
   26b48:	2947883a 	add	r3,r5,r5
   26b4c:	003fa106 	br	269d4 <__alt_data_end+0xfffe75d4>
   26b50:	01015504 	movi	r4,1364
   26b54:	20c00436 	bltu	r4,r3,26b68 <_free_r+0x2e4>
   26b58:	1006d4ba 	srli	r3,r2,18
   26b5c:	19401f04 	addi	r5,r3,124
   26b60:	2947883a 	add	r3,r5,r5
   26b64:	003f9b06 	br	269d4 <__alt_data_end+0xfffe75d4>
   26b68:	00c03f04 	movi	r3,252
   26b6c:	01401f84 	movi	r5,126
   26b70:	003f9806 	br	269d4 <__alt_data_end+0xfffe75d4>

00026b74 <__sfvwrite_r>:
   26b74:	30800217 	ldw	r2,8(r6)
   26b78:	10004526 	beq	r2,zero,26c90 <__sfvwrite_r+0x11c>
   26b7c:	28c0030b 	ldhu	r3,12(r5)
   26b80:	defff404 	addi	sp,sp,-48
   26b84:	dd400715 	stw	r21,28(sp)
   26b88:	dcc00515 	stw	r19,20(sp)
   26b8c:	dc000215 	stw	r16,8(sp)
   26b90:	dfc00b15 	stw	ra,44(sp)
   26b94:	df000a15 	stw	fp,40(sp)
   26b98:	ddc00915 	stw	r23,36(sp)
   26b9c:	dd800815 	stw	r22,32(sp)
   26ba0:	dd000615 	stw	r20,24(sp)
   26ba4:	dc800415 	stw	r18,16(sp)
   26ba8:	dc400315 	stw	r17,12(sp)
   26bac:	1880020c 	andi	r2,r3,8
   26bb0:	2821883a 	mov	r16,r5
   26bb4:	202b883a 	mov	r21,r4
   26bb8:	3027883a 	mov	r19,r6
   26bbc:	10002526 	beq	r2,zero,26c54 <__sfvwrite_r+0xe0>
   26bc0:	28800417 	ldw	r2,16(r5)
   26bc4:	10002326 	beq	r2,zero,26c54 <__sfvwrite_r+0xe0>
   26bc8:	1880008c 	andi	r2,r3,2
   26bcc:	9c400017 	ldw	r17,0(r19)
   26bd0:	10003126 	beq	r2,zero,26c98 <__sfvwrite_r+0x124>
   26bd4:	0029883a 	mov	r20,zero
   26bd8:	0025883a 	mov	r18,zero
   26bdc:	05810004 	movi	r22,1024
   26be0:	a00d883a 	mov	r6,r20
   26be4:	a809883a 	mov	r4,r21
   26be8:	90002526 	beq	r18,zero,26c80 <__sfvwrite_r+0x10c>
   26bec:	900f883a 	mov	r7,r18
   26bf0:	81400717 	ldw	r5,28(r16)
   26bf4:	b480012e 	bgeu	r22,r18,26bfc <__sfvwrite_r+0x88>
   26bf8:	01c10004 	movi	r7,1024
   26bfc:	80800917 	ldw	r2,36(r16)
   26c00:	103ee83a 	callr	r2
   26c04:	0080510e 	bge	zero,r2,26d4c <__sfvwrite_r+0x1d8>
   26c08:	98c00217 	ldw	r3,8(r19)
   26c0c:	a0a9883a 	add	r20,r20,r2
   26c10:	90a5c83a 	sub	r18,r18,r2
   26c14:	1885c83a 	sub	r2,r3,r2
   26c18:	98800215 	stw	r2,8(r19)
   26c1c:	103ff01e 	bne	r2,zero,26be0 <__alt_data_end+0xfffe77e0>
   26c20:	0005883a 	mov	r2,zero
   26c24:	dfc00b17 	ldw	ra,44(sp)
   26c28:	df000a17 	ldw	fp,40(sp)
   26c2c:	ddc00917 	ldw	r23,36(sp)
   26c30:	dd800817 	ldw	r22,32(sp)
   26c34:	dd400717 	ldw	r21,28(sp)
   26c38:	dd000617 	ldw	r20,24(sp)
   26c3c:	dcc00517 	ldw	r19,20(sp)
   26c40:	dc800417 	ldw	r18,16(sp)
   26c44:	dc400317 	ldw	r17,12(sp)
   26c48:	dc000217 	ldw	r16,8(sp)
   26c4c:	dec00c04 	addi	sp,sp,48
   26c50:	f800283a 	ret
   26c54:	a809883a 	mov	r4,r21
   26c58:	800b883a 	mov	r5,r16
   26c5c:	00247100 	call	24710 <__swsetup_r>
   26c60:	80c0030b 	ldhu	r3,12(r16)
   26c64:	103fd826 	beq	r2,zero,26bc8 <__alt_data_end+0xfffe77c8>
   26c68:	18c01014 	ori	r3,r3,64
   26c6c:	80c0030d 	sth	r3,12(r16)
   26c70:	00c00244 	movi	r3,9
   26c74:	00bfffc4 	movi	r2,-1
   26c78:	a8c00015 	stw	r3,0(r21)
   26c7c:	003fe906 	br	26c24 <__alt_data_end+0xfffe7824>
   26c80:	8d000017 	ldw	r20,0(r17)
   26c84:	8c800117 	ldw	r18,4(r17)
   26c88:	8c400204 	addi	r17,r17,8
   26c8c:	003fd406 	br	26be0 <__alt_data_end+0xfffe77e0>
   26c90:	0005883a 	mov	r2,zero
   26c94:	f800283a 	ret
   26c98:	1880004c 	andi	r2,r3,1
   26c9c:	1000301e 	bne	r2,zero,26d60 <__sfvwrite_r+0x1ec>
   26ca0:	002f883a 	mov	r23,zero
   26ca4:	0025883a 	mov	r18,zero
   26ca8:	90001c26 	beq	r18,zero,26d1c <__sfvwrite_r+0x1a8>
   26cac:	1880800c 	andi	r2,r3,512
   26cb0:	85000217 	ldw	r20,8(r16)
   26cb4:	10006c26 	beq	r2,zero,26e68 <__sfvwrite_r+0x2f4>
   26cb8:	a02d883a 	mov	r22,r20
   26cbc:	95008536 	bltu	r18,r20,26ed4 <__sfvwrite_r+0x360>
   26cc0:	1881200c 	andi	r2,r3,1152
   26cc4:	10009d1e 	bne	r2,zero,26f3c <__sfvwrite_r+0x3c8>
   26cc8:	81000017 	ldw	r4,0(r16)
   26ccc:	a039883a 	mov	fp,r20
   26cd0:	9029883a 	mov	r20,r18
   26cd4:	b80b883a 	mov	r5,r23
   26cd8:	b00d883a 	mov	r6,r22
   26cdc:	0027de80 	call	27de8 <memmove>
   26ce0:	80c00217 	ldw	r3,8(r16)
   26ce4:	81000017 	ldw	r4,0(r16)
   26ce8:	9005883a 	mov	r2,r18
   26cec:	1f39c83a 	sub	fp,r3,fp
   26cf0:	258f883a 	add	r7,r4,r22
   26cf4:	87000215 	stw	fp,8(r16)
   26cf8:	81c00015 	stw	r7,0(r16)
   26cfc:	98c00217 	ldw	r3,8(r19)
   26d00:	b8af883a 	add	r23,r23,r2
   26d04:	90a5c83a 	sub	r18,r18,r2
   26d08:	1d05c83a 	sub	r2,r3,r20
   26d0c:	98800215 	stw	r2,8(r19)
   26d10:	103fc326 	beq	r2,zero,26c20 <__alt_data_end+0xfffe7820>
   26d14:	80c0030b 	ldhu	r3,12(r16)
   26d18:	903fe41e 	bne	r18,zero,26cac <__alt_data_end+0xfffe78ac>
   26d1c:	8dc00017 	ldw	r23,0(r17)
   26d20:	8c800117 	ldw	r18,4(r17)
   26d24:	8c400204 	addi	r17,r17,8
   26d28:	003fdf06 	br	26ca8 <__alt_data_end+0xfffe78a8>
   26d2c:	0028ff40 	call	28ff4 <_realloc_r>
   26d30:	102d883a 	mov	r22,r2
   26d34:	1000a01e 	bne	r2,zero,26fb8 <__sfvwrite_r+0x444>
   26d38:	81400417 	ldw	r5,16(r16)
   26d3c:	a809883a 	mov	r4,r21
   26d40:	00268840 	call	26884 <_free_r>
   26d44:	00800304 	movi	r2,12
   26d48:	a8800015 	stw	r2,0(r21)
   26d4c:	80c0030b 	ldhu	r3,12(r16)
   26d50:	00bfffc4 	movi	r2,-1
   26d54:	18c01014 	ori	r3,r3,64
   26d58:	80c0030d 	sth	r3,12(r16)
   26d5c:	003fb106 	br	26c24 <__alt_data_end+0xfffe7824>
   26d60:	0029883a 	mov	r20,zero
   26d64:	0011883a 	mov	r8,zero
   26d68:	0039883a 	mov	fp,zero
   26d6c:	0025883a 	mov	r18,zero
   26d70:	90001f26 	beq	r18,zero,26df0 <__sfvwrite_r+0x27c>
   26d74:	40006826 	beq	r8,zero,26f18 <__sfvwrite_r+0x3a4>
   26d78:	a02f883a 	mov	r23,r20
   26d7c:	9500012e 	bgeu	r18,r20,26d84 <__sfvwrite_r+0x210>
   26d80:	902f883a 	mov	r23,r18
   26d84:	81000017 	ldw	r4,0(r16)
   26d88:	80800417 	ldw	r2,16(r16)
   26d8c:	b82d883a 	mov	r22,r23
   26d90:	81800217 	ldw	r6,8(r16)
   26d94:	81c00517 	ldw	r7,20(r16)
   26d98:	1100022e 	bgeu	r2,r4,26da4 <__sfvwrite_r+0x230>
   26d9c:	31c7883a 	add	r3,r6,r7
   26da0:	1dc01816 	blt	r3,r23,26e04 <__sfvwrite_r+0x290>
   26da4:	b9c03f16 	blt	r23,r7,26ea4 <__sfvwrite_r+0x330>
   26da8:	80800917 	ldw	r2,36(r16)
   26dac:	81400717 	ldw	r5,28(r16)
   26db0:	a809883a 	mov	r4,r21
   26db4:	da000115 	stw	r8,4(sp)
   26db8:	e00d883a 	mov	r6,fp
   26dbc:	103ee83a 	callr	r2
   26dc0:	102d883a 	mov	r22,r2
   26dc4:	da000117 	ldw	r8,4(sp)
   26dc8:	00bfe00e 	bge	zero,r2,26d4c <__alt_data_end+0xfffe794c>
   26dcc:	a5a9c83a 	sub	r20,r20,r22
   26dd0:	a0001f26 	beq	r20,zero,26e50 <__sfvwrite_r+0x2dc>
   26dd4:	98800217 	ldw	r2,8(r19)
   26dd8:	e5b9883a 	add	fp,fp,r22
   26ddc:	95a5c83a 	sub	r18,r18,r22
   26de0:	15adc83a 	sub	r22,r2,r22
   26de4:	9d800215 	stw	r22,8(r19)
   26de8:	b03f8d26 	beq	r22,zero,26c20 <__alt_data_end+0xfffe7820>
   26dec:	903fe11e 	bne	r18,zero,26d74 <__alt_data_end+0xfffe7974>
   26df0:	8f000017 	ldw	fp,0(r17)
   26df4:	8c800117 	ldw	r18,4(r17)
   26df8:	0011883a 	mov	r8,zero
   26dfc:	8c400204 	addi	r17,r17,8
   26e00:	003fdb06 	br	26d70 <__alt_data_end+0xfffe7970>
   26e04:	180d883a 	mov	r6,r3
   26e08:	e00b883a 	mov	r5,fp
   26e0c:	da000115 	stw	r8,4(sp)
   26e10:	d8c00015 	stw	r3,0(sp)
   26e14:	0027de80 	call	27de8 <memmove>
   26e18:	d8c00017 	ldw	r3,0(sp)
   26e1c:	80800017 	ldw	r2,0(r16)
   26e20:	a809883a 	mov	r4,r21
   26e24:	800b883a 	mov	r5,r16
   26e28:	10c5883a 	add	r2,r2,r3
   26e2c:	80800015 	stw	r2,0(r16)
   26e30:	d8c00015 	stw	r3,0(sp)
   26e34:	00261680 	call	26168 <_fflush_r>
   26e38:	d8c00017 	ldw	r3,0(sp)
   26e3c:	da000117 	ldw	r8,4(sp)
   26e40:	103fc21e 	bne	r2,zero,26d4c <__alt_data_end+0xfffe794c>
   26e44:	182d883a 	mov	r22,r3
   26e48:	a5a9c83a 	sub	r20,r20,r22
   26e4c:	a03fe11e 	bne	r20,zero,26dd4 <__alt_data_end+0xfffe79d4>
   26e50:	a809883a 	mov	r4,r21
   26e54:	800b883a 	mov	r5,r16
   26e58:	00261680 	call	26168 <_fflush_r>
   26e5c:	103fbb1e 	bne	r2,zero,26d4c <__alt_data_end+0xfffe794c>
   26e60:	0011883a 	mov	r8,zero
   26e64:	003fdb06 	br	26dd4 <__alt_data_end+0xfffe79d4>
   26e68:	81000017 	ldw	r4,0(r16)
   26e6c:	80800417 	ldw	r2,16(r16)
   26e70:	1100012e 	bgeu	r2,r4,26e78 <__sfvwrite_r+0x304>
   26e74:	a4805a36 	bltu	r20,r18,26fe0 <__sfvwrite_r+0x46c>
   26e78:	81c00517 	ldw	r7,20(r16)
   26e7c:	91c01a36 	bltu	r18,r7,26ee8 <__sfvwrite_r+0x374>
   26e80:	80800917 	ldw	r2,36(r16)
   26e84:	81400717 	ldw	r5,28(r16)
   26e88:	a809883a 	mov	r4,r21
   26e8c:	b80d883a 	mov	r6,r23
   26e90:	103ee83a 	callr	r2
   26e94:	1029883a 	mov	r20,r2
   26e98:	00bfac0e 	bge	zero,r2,26d4c <__alt_data_end+0xfffe794c>
   26e9c:	a005883a 	mov	r2,r20
   26ea0:	003f9606 	br	26cfc <__alt_data_end+0xfffe78fc>
   26ea4:	b80d883a 	mov	r6,r23
   26ea8:	e00b883a 	mov	r5,fp
   26eac:	da000115 	stw	r8,4(sp)
   26eb0:	0027de80 	call	27de8 <memmove>
   26eb4:	80800217 	ldw	r2,8(r16)
   26eb8:	80c00017 	ldw	r3,0(r16)
   26ebc:	da000117 	ldw	r8,4(sp)
   26ec0:	15c5c83a 	sub	r2,r2,r23
   26ec4:	1def883a 	add	r23,r3,r23
   26ec8:	80800215 	stw	r2,8(r16)
   26ecc:	85c00015 	stw	r23,0(r16)
   26ed0:	003fbe06 	br	26dcc <__alt_data_end+0xfffe79cc>
   26ed4:	81000017 	ldw	r4,0(r16)
   26ed8:	9039883a 	mov	fp,r18
   26edc:	9029883a 	mov	r20,r18
   26ee0:	902d883a 	mov	r22,r18
   26ee4:	003f7b06 	br	26cd4 <__alt_data_end+0xfffe78d4>
   26ee8:	b80b883a 	mov	r5,r23
   26eec:	900d883a 	mov	r6,r18
   26ef0:	0027de80 	call	27de8 <memmove>
   26ef4:	80c00217 	ldw	r3,8(r16)
   26ef8:	80800017 	ldw	r2,0(r16)
   26efc:	9029883a 	mov	r20,r18
   26f00:	1c87c83a 	sub	r3,r3,r18
   26f04:	1485883a 	add	r2,r2,r18
   26f08:	80800015 	stw	r2,0(r16)
   26f0c:	80c00215 	stw	r3,8(r16)
   26f10:	9005883a 	mov	r2,r18
   26f14:	003f7906 	br	26cfc <__alt_data_end+0xfffe78fc>
   26f18:	e009883a 	mov	r4,fp
   26f1c:	01400284 	movi	r5,10
   26f20:	900d883a 	mov	r6,r18
   26f24:	0027bc80 	call	27bc8 <memchr>
   26f28:	10003826 	beq	r2,zero,2700c <__sfvwrite_r+0x498>
   26f2c:	10800044 	addi	r2,r2,1
   26f30:	1729c83a 	sub	r20,r2,fp
   26f34:	02000044 	movi	r8,1
   26f38:	003f8f06 	br	26d78 <__alt_data_end+0xfffe7978>
   26f3c:	80800517 	ldw	r2,20(r16)
   26f40:	81400417 	ldw	r5,16(r16)
   26f44:	87000017 	ldw	fp,0(r16)
   26f48:	10a9883a 	add	r20,r2,r2
   26f4c:	a085883a 	add	r2,r20,r2
   26f50:	1028d7fa 	srli	r20,r2,31
   26f54:	e179c83a 	sub	fp,fp,r5
   26f58:	e1000044 	addi	r4,fp,1
   26f5c:	a085883a 	add	r2,r20,r2
   26f60:	1029d07a 	srai	r20,r2,1
   26f64:	2485883a 	add	r2,r4,r18
   26f68:	a00d883a 	mov	r6,r20
   26f6c:	a080022e 	bgeu	r20,r2,26f78 <__sfvwrite_r+0x404>
   26f70:	1029883a 	mov	r20,r2
   26f74:	100d883a 	mov	r6,r2
   26f78:	18c1000c 	andi	r3,r3,1024
   26f7c:	a809883a 	mov	r4,r21
   26f80:	183f6a26 	beq	r3,zero,26d2c <__alt_data_end+0xfffe792c>
   26f84:	300b883a 	mov	r5,r6
   26f88:	00274200 	call	27420 <_malloc_r>
   26f8c:	102d883a 	mov	r22,r2
   26f90:	103f6c26 	beq	r2,zero,26d44 <__alt_data_end+0xfffe7944>
   26f94:	81400417 	ldw	r5,16(r16)
   26f98:	1009883a 	mov	r4,r2
   26f9c:	e00d883a 	mov	r6,fp
   26fa0:	0027cb00 	call	27cb0 <memcpy>
   26fa4:	8080030b 	ldhu	r2,12(r16)
   26fa8:	00fedfc4 	movi	r3,-1153
   26fac:	10c4703a 	and	r2,r2,r3
   26fb0:	10802014 	ori	r2,r2,128
   26fb4:	8080030d 	sth	r2,12(r16)
   26fb8:	b709883a 	add	r4,r22,fp
   26fbc:	a707c83a 	sub	r3,r20,fp
   26fc0:	85800415 	stw	r22,16(r16)
   26fc4:	85000515 	stw	r20,20(r16)
   26fc8:	81000015 	stw	r4,0(r16)
   26fcc:	9039883a 	mov	fp,r18
   26fd0:	80c00215 	stw	r3,8(r16)
   26fd4:	9029883a 	mov	r20,r18
   26fd8:	902d883a 	mov	r22,r18
   26fdc:	003f3d06 	br	26cd4 <__alt_data_end+0xfffe78d4>
   26fe0:	b80b883a 	mov	r5,r23
   26fe4:	a00d883a 	mov	r6,r20
   26fe8:	0027de80 	call	27de8 <memmove>
   26fec:	80800017 	ldw	r2,0(r16)
   26ff0:	a809883a 	mov	r4,r21
   26ff4:	800b883a 	mov	r5,r16
   26ff8:	1505883a 	add	r2,r2,r20
   26ffc:	80800015 	stw	r2,0(r16)
   27000:	00261680 	call	26168 <_fflush_r>
   27004:	103fa526 	beq	r2,zero,26e9c <__alt_data_end+0xfffe7a9c>
   27008:	003f5006 	br	26d4c <__alt_data_end+0xfffe794c>
   2700c:	95000044 	addi	r20,r18,1
   27010:	02000044 	movi	r8,1
   27014:	003f5806 	br	26d78 <__alt_data_end+0xfffe7978>

00027018 <_fwalk>:
   27018:	defff804 	addi	sp,sp,-32
   2701c:	dd400515 	stw	r21,20(sp)
   27020:	2540b804 	addi	r21,r4,736
   27024:	dd800615 	stw	r22,24(sp)
   27028:	dd000415 	stw	r20,16(sp)
   2702c:	dfc00715 	stw	ra,28(sp)
   27030:	dcc00315 	stw	r19,12(sp)
   27034:	dc800215 	stw	r18,8(sp)
   27038:	dc400115 	stw	r17,4(sp)
   2703c:	dc000015 	stw	r16,0(sp)
   27040:	2829883a 	mov	r20,r5
   27044:	002d883a 	mov	r22,zero
   27048:	00267200 	call	26720 <__sfp_lock_acquire>
   2704c:	a8001426 	beq	r21,zero,270a0 <_fwalk+0x88>
   27050:	04ffffc4 	movi	r19,-1
   27054:	ac400117 	ldw	r17,4(r21)
   27058:	ac800217 	ldw	r18,8(r21)
   2705c:	8c7fffc4 	addi	r17,r17,-1
   27060:	88000d16 	blt	r17,zero,27098 <_fwalk+0x80>
   27064:	94000304 	addi	r16,r18,12
   27068:	94800384 	addi	r18,r18,14
   2706c:	80c0000f 	ldh	r3,0(r16)
   27070:	8c7fffc4 	addi	r17,r17,-1
   27074:	813ffd04 	addi	r4,r16,-12
   27078:	18000426 	beq	r3,zero,2708c <_fwalk+0x74>
   2707c:	90c0000f 	ldh	r3,0(r18)
   27080:	1cc00226 	beq	r3,r19,2708c <_fwalk+0x74>
   27084:	a03ee83a 	callr	r20
   27088:	b0acb03a 	or	r22,r22,r2
   2708c:	84001a04 	addi	r16,r16,104
   27090:	94801a04 	addi	r18,r18,104
   27094:	8cfff51e 	bne	r17,r19,2706c <__alt_data_end+0xfffe7c6c>
   27098:	ad400017 	ldw	r21,0(r21)
   2709c:	a83fed1e 	bne	r21,zero,27054 <__alt_data_end+0xfffe7c54>
   270a0:	00267240 	call	26724 <__sfp_lock_release>
   270a4:	b005883a 	mov	r2,r22
   270a8:	dfc00717 	ldw	ra,28(sp)
   270ac:	dd800617 	ldw	r22,24(sp)
   270b0:	dd400517 	ldw	r21,20(sp)
   270b4:	dd000417 	ldw	r20,16(sp)
   270b8:	dcc00317 	ldw	r19,12(sp)
   270bc:	dc800217 	ldw	r18,8(sp)
   270c0:	dc400117 	ldw	r17,4(sp)
   270c4:	dc000017 	ldw	r16,0(sp)
   270c8:	dec00804 	addi	sp,sp,32
   270cc:	f800283a 	ret

000270d0 <_fwalk_reent>:
   270d0:	defff804 	addi	sp,sp,-32
   270d4:	dd400515 	stw	r21,20(sp)
   270d8:	2540b804 	addi	r21,r4,736
   270dc:	dd800615 	stw	r22,24(sp)
   270e0:	dd000415 	stw	r20,16(sp)
   270e4:	dcc00315 	stw	r19,12(sp)
   270e8:	dfc00715 	stw	ra,28(sp)
   270ec:	dc800215 	stw	r18,8(sp)
   270f0:	dc400115 	stw	r17,4(sp)
   270f4:	dc000015 	stw	r16,0(sp)
   270f8:	2027883a 	mov	r19,r4
   270fc:	2829883a 	mov	r20,r5
   27100:	002d883a 	mov	r22,zero
   27104:	00267200 	call	26720 <__sfp_lock_acquire>
   27108:	a8001326 	beq	r21,zero,27158 <_fwalk_reent+0x88>
   2710c:	04bfffc4 	movi	r18,-1
   27110:	ac400117 	ldw	r17,4(r21)
   27114:	ac000217 	ldw	r16,8(r21)
   27118:	8c7fffc4 	addi	r17,r17,-1
   2711c:	88000c16 	blt	r17,zero,27150 <_fwalk_reent+0x80>
   27120:	84000304 	addi	r16,r16,12
   27124:	80c0000f 	ldh	r3,0(r16)
   27128:	8c7fffc4 	addi	r17,r17,-1
   2712c:	817ffd04 	addi	r5,r16,-12
   27130:	18000526 	beq	r3,zero,27148 <_fwalk_reent+0x78>
   27134:	80c0008f 	ldh	r3,2(r16)
   27138:	9809883a 	mov	r4,r19
   2713c:	1c800226 	beq	r3,r18,27148 <_fwalk_reent+0x78>
   27140:	a03ee83a 	callr	r20
   27144:	b0acb03a 	or	r22,r22,r2
   27148:	84001a04 	addi	r16,r16,104
   2714c:	8cbff51e 	bne	r17,r18,27124 <__alt_data_end+0xfffe7d24>
   27150:	ad400017 	ldw	r21,0(r21)
   27154:	a83fee1e 	bne	r21,zero,27110 <__alt_data_end+0xfffe7d10>
   27158:	00267240 	call	26724 <__sfp_lock_release>
   2715c:	b005883a 	mov	r2,r22
   27160:	dfc00717 	ldw	ra,28(sp)
   27164:	dd800617 	ldw	r22,24(sp)
   27168:	dd400517 	ldw	r21,20(sp)
   2716c:	dd000417 	ldw	r20,16(sp)
   27170:	dcc00317 	ldw	r19,12(sp)
   27174:	dc800217 	ldw	r18,8(sp)
   27178:	dc400117 	ldw	r17,4(sp)
   2717c:	dc000017 	ldw	r16,0(sp)
   27180:	dec00804 	addi	sp,sp,32
   27184:	f800283a 	ret

00027188 <_setlocale_r>:
   27188:	30001b26 	beq	r6,zero,271f8 <_setlocale_r+0x70>
   2718c:	014000f4 	movhi	r5,3
   27190:	defffe04 	addi	sp,sp,-8
   27194:	297fb704 	addi	r5,r5,-292
   27198:	3009883a 	mov	r4,r6
   2719c:	dc000015 	stw	r16,0(sp)
   271a0:	dfc00115 	stw	ra,4(sp)
   271a4:	3021883a 	mov	r16,r6
   271a8:	00297980 	call	29798 <strcmp>
   271ac:	1000061e 	bne	r2,zero,271c8 <_setlocale_r+0x40>
   271b0:	008000f4 	movhi	r2,3
   271b4:	10bfb604 	addi	r2,r2,-296
   271b8:	dfc00117 	ldw	ra,4(sp)
   271bc:	dc000017 	ldw	r16,0(sp)
   271c0:	dec00204 	addi	sp,sp,8
   271c4:	f800283a 	ret
   271c8:	014000f4 	movhi	r5,3
   271cc:	297fb604 	addi	r5,r5,-296
   271d0:	8009883a 	mov	r4,r16
   271d4:	00297980 	call	29798 <strcmp>
   271d8:	103ff526 	beq	r2,zero,271b0 <__alt_data_end+0xfffe7db0>
   271dc:	014000f4 	movhi	r5,3
   271e0:	297fa104 	addi	r5,r5,-380
   271e4:	8009883a 	mov	r4,r16
   271e8:	00297980 	call	29798 <strcmp>
   271ec:	103ff026 	beq	r2,zero,271b0 <__alt_data_end+0xfffe7db0>
   271f0:	0005883a 	mov	r2,zero
   271f4:	003ff006 	br	271b8 <__alt_data_end+0xfffe7db8>
   271f8:	008000f4 	movhi	r2,3
   271fc:	10bfb604 	addi	r2,r2,-296
   27200:	f800283a 	ret

00027204 <__locale_charset>:
   27204:	008000f4 	movhi	r2,3
   27208:	10813904 	addi	r2,r2,1252
   2720c:	f800283a 	ret

00027210 <__locale_mb_cur_max>:
   27210:	008000f4 	movhi	r2,3
   27214:	1086f304 	addi	r2,r2,7116
   27218:	10800017 	ldw	r2,0(r2)
   2721c:	f800283a 	ret

00027220 <__locale_msgcharset>:
   27220:	008000f4 	movhi	r2,3
   27224:	10813104 	addi	r2,r2,1220
   27228:	f800283a 	ret

0002722c <__locale_cjk_lang>:
   2722c:	0005883a 	mov	r2,zero
   27230:	f800283a 	ret

00027234 <_localeconv_r>:
   27234:	008000f4 	movhi	r2,3
   27238:	10814104 	addi	r2,r2,1284
   2723c:	f800283a 	ret

00027240 <setlocale>:
   27240:	00c000f4 	movhi	r3,3
   27244:	18c6f204 	addi	r3,r3,7112
   27248:	2005883a 	mov	r2,r4
   2724c:	19000017 	ldw	r4,0(r3)
   27250:	280d883a 	mov	r6,r5
   27254:	100b883a 	mov	r5,r2
   27258:	00271881 	jmpi	27188 <_setlocale_r>

0002725c <localeconv>:
   2725c:	008000f4 	movhi	r2,3
   27260:	10814104 	addi	r2,r2,1284
   27264:	f800283a 	ret

00027268 <__smakebuf_r>:
   27268:	2880030b 	ldhu	r2,12(r5)
   2726c:	10c0008c 	andi	r3,r2,2
   27270:	1800401e 	bne	r3,zero,27374 <__smakebuf_r+0x10c>
   27274:	deffec04 	addi	sp,sp,-80
   27278:	dc000f15 	stw	r16,60(sp)
   2727c:	2821883a 	mov	r16,r5
   27280:	2940038f 	ldh	r5,14(r5)
   27284:	dc401015 	stw	r17,64(sp)
   27288:	dfc01315 	stw	ra,76(sp)
   2728c:	dcc01215 	stw	r19,72(sp)
   27290:	dc801115 	stw	r18,68(sp)
   27294:	2023883a 	mov	r17,r4
   27298:	28001b16 	blt	r5,zero,27308 <__smakebuf_r+0xa0>
   2729c:	d80d883a 	mov	r6,sp
   272a0:	002b1340 	call	2b134 <_fstat_r>
   272a4:	10001716 	blt	r2,zero,27304 <__smakebuf_r+0x9c>
   272a8:	d8800117 	ldw	r2,4(sp)
   272ac:	00e00014 	movui	r3,32768
   272b0:	10bc000c 	andi	r2,r2,61440
   272b4:	10c03726 	beq	r2,r3,27394 <__smakebuf_r+0x12c>
   272b8:	80c0030b 	ldhu	r3,12(r16)
   272bc:	18c20014 	ori	r3,r3,2048
   272c0:	80c0030d 	sth	r3,12(r16)
   272c4:	00c80004 	movi	r3,8192
   272c8:	10c03c1e 	bne	r2,r3,273bc <__smakebuf_r+0x154>
   272cc:	8140038f 	ldh	r5,14(r16)
   272d0:	8809883a 	mov	r4,r17
   272d4:	002b18c0 	call	2b18c <_isatty_r>
   272d8:	10004e26 	beq	r2,zero,27414 <__smakebuf_r+0x1ac>
   272dc:	8080030b 	ldhu	r2,12(r16)
   272e0:	04c00044 	movi	r19,1
   272e4:	80c010c4 	addi	r3,r16,67
   272e8:	14c4b03a 	or	r2,r2,r19
   272ec:	8080030d 	sth	r2,12(r16)
   272f0:	80c00015 	stw	r3,0(r16)
   272f4:	80c00415 	stw	r3,16(r16)
   272f8:	84c00515 	stw	r19,20(r16)
   272fc:	04810004 	movi	r18,1024
   27300:	00000706 	br	27320 <__smakebuf_r+0xb8>
   27304:	8080030b 	ldhu	r2,12(r16)
   27308:	10c0200c 	andi	r3,r2,128
   2730c:	18001f1e 	bne	r3,zero,2738c <__smakebuf_r+0x124>
   27310:	04810004 	movi	r18,1024
   27314:	10820014 	ori	r2,r2,2048
   27318:	8080030d 	sth	r2,12(r16)
   2731c:	0027883a 	mov	r19,zero
   27320:	8809883a 	mov	r4,r17
   27324:	900b883a 	mov	r5,r18
   27328:	00274200 	call	27420 <_malloc_r>
   2732c:	10002e26 	beq	r2,zero,273e8 <__smakebuf_r+0x180>
   27330:	80c0030b 	ldhu	r3,12(r16)
   27334:	010000b4 	movhi	r4,2
   27338:	2118f404 	addi	r4,r4,25552
   2733c:	89000f15 	stw	r4,60(r17)
   27340:	18c02014 	ori	r3,r3,128
   27344:	80c0030d 	sth	r3,12(r16)
   27348:	80800015 	stw	r2,0(r16)
   2734c:	80800415 	stw	r2,16(r16)
   27350:	84800515 	stw	r18,20(r16)
   27354:	98001c1e 	bne	r19,zero,273c8 <__smakebuf_r+0x160>
   27358:	dfc01317 	ldw	ra,76(sp)
   2735c:	dcc01217 	ldw	r19,72(sp)
   27360:	dc801117 	ldw	r18,68(sp)
   27364:	dc401017 	ldw	r17,64(sp)
   27368:	dc000f17 	ldw	r16,60(sp)
   2736c:	dec01404 	addi	sp,sp,80
   27370:	f800283a 	ret
   27374:	288010c4 	addi	r2,r5,67
   27378:	28800015 	stw	r2,0(r5)
   2737c:	28800415 	stw	r2,16(r5)
   27380:	00800044 	movi	r2,1
   27384:	28800515 	stw	r2,20(r5)
   27388:	f800283a 	ret
   2738c:	04801004 	movi	r18,64
   27390:	003fe006 	br	27314 <__alt_data_end+0xfffe7f14>
   27394:	81000a17 	ldw	r4,40(r16)
   27398:	00c000f4 	movhi	r3,3
   2739c:	18e5cd04 	addi	r3,r3,-26828
   273a0:	20ffc51e 	bne	r4,r3,272b8 <__alt_data_end+0xfffe7eb8>
   273a4:	80c0030b 	ldhu	r3,12(r16)
   273a8:	01010004 	movi	r4,1024
   273ac:	81001315 	stw	r4,76(r16)
   273b0:	1906b03a 	or	r3,r3,r4
   273b4:	80c0030d 	sth	r3,12(r16)
   273b8:	003fc206 	br	272c4 <__alt_data_end+0xfffe7ec4>
   273bc:	0027883a 	mov	r19,zero
   273c0:	04810004 	movi	r18,1024
   273c4:	003fd606 	br	27320 <__alt_data_end+0xfffe7f20>
   273c8:	8140038f 	ldh	r5,14(r16)
   273cc:	8809883a 	mov	r4,r17
   273d0:	002b18c0 	call	2b18c <_isatty_r>
   273d4:	103fe026 	beq	r2,zero,27358 <__alt_data_end+0xfffe7f58>
   273d8:	8080030b 	ldhu	r2,12(r16)
   273dc:	10800054 	ori	r2,r2,1
   273e0:	8080030d 	sth	r2,12(r16)
   273e4:	003fdc06 	br	27358 <__alt_data_end+0xfffe7f58>
   273e8:	8080030b 	ldhu	r2,12(r16)
   273ec:	10c0800c 	andi	r3,r2,512
   273f0:	183fd91e 	bne	r3,zero,27358 <__alt_data_end+0xfffe7f58>
   273f4:	10800094 	ori	r2,r2,2
   273f8:	80c010c4 	addi	r3,r16,67
   273fc:	8080030d 	sth	r2,12(r16)
   27400:	00800044 	movi	r2,1
   27404:	80c00015 	stw	r3,0(r16)
   27408:	80c00415 	stw	r3,16(r16)
   2740c:	80800515 	stw	r2,20(r16)
   27410:	003fd106 	br	27358 <__alt_data_end+0xfffe7f58>
   27414:	04c00044 	movi	r19,1
   27418:	04810004 	movi	r18,1024
   2741c:	003fc006 	br	27320 <__alt_data_end+0xfffe7f20>

00027420 <_malloc_r>:
   27420:	defff504 	addi	sp,sp,-44
   27424:	dc800315 	stw	r18,12(sp)
   27428:	dfc00a15 	stw	ra,40(sp)
   2742c:	df000915 	stw	fp,36(sp)
   27430:	ddc00815 	stw	r23,32(sp)
   27434:	dd800715 	stw	r22,28(sp)
   27438:	dd400615 	stw	r21,24(sp)
   2743c:	dd000515 	stw	r20,20(sp)
   27440:	dcc00415 	stw	r19,16(sp)
   27444:	dc400215 	stw	r17,8(sp)
   27448:	dc000115 	stw	r16,4(sp)
   2744c:	288002c4 	addi	r2,r5,11
   27450:	00c00584 	movi	r3,22
   27454:	2025883a 	mov	r18,r4
   27458:	18802a2e 	bgeu	r3,r2,27504 <_malloc_r+0xe4>
   2745c:	047ffe04 	movi	r17,-8
   27460:	1462703a 	and	r17,r2,r17
   27464:	88009e16 	blt	r17,zero,276e0 <_malloc_r+0x2c0>
   27468:	89409d36 	bltu	r17,r5,276e0 <_malloc_r+0x2c0>
   2746c:	002d36c0 	call	2d36c <__malloc_lock>
   27470:	00807dc4 	movi	r2,503
   27474:	14402736 	bltu	r2,r17,27514 <_malloc_r+0xf4>
   27478:	8806d0fa 	srli	r3,r17,3
   2747c:	04c000f4 	movhi	r19,3
   27480:	9cc14f04 	addi	r19,r19,1340
   27484:	18c5883a 	add	r2,r3,r3
   27488:	1085883a 	add	r2,r2,r2
   2748c:	1085883a 	add	r2,r2,r2
   27490:	9885883a 	add	r2,r19,r2
   27494:	14000317 	ldw	r16,12(r2)
   27498:	80814a26 	beq	r16,r2,279c4 <_malloc_r+0x5a4>
   2749c:	80c00117 	ldw	r3,4(r16)
   274a0:	81000317 	ldw	r4,12(r16)
   274a4:	00bfff04 	movi	r2,-4
   274a8:	1884703a 	and	r2,r3,r2
   274ac:	81400217 	ldw	r5,8(r16)
   274b0:	8085883a 	add	r2,r16,r2
   274b4:	10c00117 	ldw	r3,4(r2)
   274b8:	29000315 	stw	r4,12(r5)
   274bc:	21400215 	stw	r5,8(r4)
   274c0:	18c00054 	ori	r3,r3,1
   274c4:	10c00115 	stw	r3,4(r2)
   274c8:	9009883a 	mov	r4,r18
   274cc:	002d38c0 	call	2d38c <__malloc_unlock>
   274d0:	80800204 	addi	r2,r16,8
   274d4:	dfc00a17 	ldw	ra,40(sp)
   274d8:	df000917 	ldw	fp,36(sp)
   274dc:	ddc00817 	ldw	r23,32(sp)
   274e0:	dd800717 	ldw	r22,28(sp)
   274e4:	dd400617 	ldw	r21,24(sp)
   274e8:	dd000517 	ldw	r20,20(sp)
   274ec:	dcc00417 	ldw	r19,16(sp)
   274f0:	dc800317 	ldw	r18,12(sp)
   274f4:	dc400217 	ldw	r17,8(sp)
   274f8:	dc000117 	ldw	r16,4(sp)
   274fc:	dec00b04 	addi	sp,sp,44
   27500:	f800283a 	ret
   27504:	04400404 	movi	r17,16
   27508:	89407536 	bltu	r17,r5,276e0 <_malloc_r+0x2c0>
   2750c:	002d36c0 	call	2d36c <__malloc_lock>
   27510:	003fd906 	br	27478 <__alt_data_end+0xfffe8078>
   27514:	8806d27a 	srli	r3,r17,9
   27518:	18007526 	beq	r3,zero,276f0 <_malloc_r+0x2d0>
   2751c:	00800104 	movi	r2,4
   27520:	10c0ef36 	bltu	r2,r3,278e0 <_malloc_r+0x4c0>
   27524:	8806d1ba 	srli	r3,r17,6
   27528:	19c00e04 	addi	r7,r3,56
   2752c:	39cb883a 	add	r5,r7,r7
   27530:	04c000f4 	movhi	r19,3
   27534:	294b883a 	add	r5,r5,r5
   27538:	9cc14f04 	addi	r19,r19,1340
   2753c:	294b883a 	add	r5,r5,r5
   27540:	994b883a 	add	r5,r19,r5
   27544:	2c000317 	ldw	r16,12(r5)
   27548:	2c000e26 	beq	r5,r16,27584 <_malloc_r+0x164>
   2754c:	80800117 	ldw	r2,4(r16)
   27550:	01bfff04 	movi	r6,-4
   27554:	010003c4 	movi	r4,15
   27558:	1184703a 	and	r2,r2,r6
   2755c:	1447c83a 	sub	r3,r2,r17
   27560:	20c00716 	blt	r4,r3,27580 <_malloc_r+0x160>
   27564:	1800650e 	bge	r3,zero,276fc <_malloc_r+0x2dc>
   27568:	84000317 	ldw	r16,12(r16)
   2756c:	2c000526 	beq	r5,r16,27584 <_malloc_r+0x164>
   27570:	80800117 	ldw	r2,4(r16)
   27574:	1184703a 	and	r2,r2,r6
   27578:	1447c83a 	sub	r3,r2,r17
   2757c:	20fff90e 	bge	r4,r3,27564 <__alt_data_end+0xfffe8164>
   27580:	39ffffc4 	addi	r7,r7,-1
   27584:	38c00044 	addi	r3,r7,1
   27588:	018000f4 	movhi	r6,3
   2758c:	9c000417 	ldw	r16,16(r19)
   27590:	31814f04 	addi	r6,r6,1340
   27594:	32400204 	addi	r9,r6,8
   27598:	82410326 	beq	r16,r9,279a8 <_malloc_r+0x588>
   2759c:	81000117 	ldw	r4,4(r16)
   275a0:	00bfff04 	movi	r2,-4
   275a4:	208e703a 	and	r7,r4,r2
   275a8:	3c45c83a 	sub	r2,r7,r17
   275ac:	010003c4 	movi	r4,15
   275b0:	2080ee16 	blt	r4,r2,2796c <_malloc_r+0x54c>
   275b4:	32400515 	stw	r9,20(r6)
   275b8:	32400415 	stw	r9,16(r6)
   275bc:	1000510e 	bge	r2,zero,27704 <_malloc_r+0x2e4>
   275c0:	00807fc4 	movi	r2,511
   275c4:	11c0ce36 	bltu	r2,r7,27900 <_malloc_r+0x4e0>
   275c8:	3808d0fa 	srli	r4,r7,3
   275cc:	01c00044 	movi	r7,1
   275d0:	30800117 	ldw	r2,4(r6)
   275d4:	210b883a 	add	r5,r4,r4
   275d8:	294b883a 	add	r5,r5,r5
   275dc:	2009d0ba 	srai	r4,r4,2
   275e0:	294b883a 	add	r5,r5,r5
   275e4:	298b883a 	add	r5,r5,r6
   275e8:	2a000217 	ldw	r8,8(r5)
   275ec:	3908983a 	sll	r4,r7,r4
   275f0:	81400315 	stw	r5,12(r16)
   275f4:	82000215 	stw	r8,8(r16)
   275f8:	2088b03a 	or	r4,r4,r2
   275fc:	2c000215 	stw	r16,8(r5)
   27600:	31000115 	stw	r4,4(r6)
   27604:	44000315 	stw	r16,12(r8)
   27608:	1805d0ba 	srai	r2,r3,2
   2760c:	01400044 	movi	r5,1
   27610:	288a983a 	sll	r5,r5,r2
   27614:	21404336 	bltu	r4,r5,27724 <_malloc_r+0x304>
   27618:	2144703a 	and	r2,r4,r5
   2761c:	10000a1e 	bne	r2,zero,27648 <_malloc_r+0x228>
   27620:	00bfff04 	movi	r2,-4
   27624:	294b883a 	add	r5,r5,r5
   27628:	1886703a 	and	r3,r3,r2
   2762c:	2144703a 	and	r2,r4,r5
   27630:	18c00104 	addi	r3,r3,4
   27634:	1000041e 	bne	r2,zero,27648 <_malloc_r+0x228>
   27638:	294b883a 	add	r5,r5,r5
   2763c:	2144703a 	and	r2,r4,r5
   27640:	18c00104 	addi	r3,r3,4
   27644:	103ffc26 	beq	r2,zero,27638 <__alt_data_end+0xfffe8238>
   27648:	023fff04 	movi	r8,-4
   2764c:	01c003c4 	movi	r7,15
   27650:	18c5883a 	add	r2,r3,r3
   27654:	1085883a 	add	r2,r2,r2
   27658:	1085883a 	add	r2,r2,r2
   2765c:	9895883a 	add	r10,r19,r2
   27660:	52c00304 	addi	r11,r10,12
   27664:	1819883a 	mov	r12,r3
   27668:	5c000017 	ldw	r16,0(r11)
   2766c:	59bffd04 	addi	r6,r11,-12
   27670:	8180041e 	bne	r16,r6,27684 <_malloc_r+0x264>
   27674:	0000ce06 	br	279b0 <_malloc_r+0x590>
   27678:	2000d70e 	bge	r4,zero,279d8 <_malloc_r+0x5b8>
   2767c:	84000317 	ldw	r16,12(r16)
   27680:	8180cb26 	beq	r16,r6,279b0 <_malloc_r+0x590>
   27684:	80800117 	ldw	r2,4(r16)
   27688:	1204703a 	and	r2,r2,r8
   2768c:	1449c83a 	sub	r4,r2,r17
   27690:	393ff90e 	bge	r7,r4,27678 <__alt_data_end+0xfffe8278>
   27694:	80800317 	ldw	r2,12(r16)
   27698:	80c00217 	ldw	r3,8(r16)
   2769c:	89400054 	ori	r5,r17,1
   276a0:	81400115 	stw	r5,4(r16)
   276a4:	18800315 	stw	r2,12(r3)
   276a8:	10c00215 	stw	r3,8(r2)
   276ac:	8463883a 	add	r17,r16,r17
   276b0:	9c400515 	stw	r17,20(r19)
   276b4:	9c400415 	stw	r17,16(r19)
   276b8:	20800054 	ori	r2,r4,1
   276bc:	88800115 	stw	r2,4(r17)
   276c0:	8a400315 	stw	r9,12(r17)
   276c4:	8a400215 	stw	r9,8(r17)
   276c8:	8923883a 	add	r17,r17,r4
   276cc:	89000015 	stw	r4,0(r17)
   276d0:	9009883a 	mov	r4,r18
   276d4:	002d38c0 	call	2d38c <__malloc_unlock>
   276d8:	80800204 	addi	r2,r16,8
   276dc:	003f7d06 	br	274d4 <__alt_data_end+0xfffe80d4>
   276e0:	00800304 	movi	r2,12
   276e4:	90800015 	stw	r2,0(r18)
   276e8:	0005883a 	mov	r2,zero
   276ec:	003f7906 	br	274d4 <__alt_data_end+0xfffe80d4>
   276f0:	01401f84 	movi	r5,126
   276f4:	01c00fc4 	movi	r7,63
   276f8:	003f8d06 	br	27530 <__alt_data_end+0xfffe8130>
   276fc:	81000317 	ldw	r4,12(r16)
   27700:	003f6a06 	br	274ac <__alt_data_end+0xfffe80ac>
   27704:	81c5883a 	add	r2,r16,r7
   27708:	10c00117 	ldw	r3,4(r2)
   2770c:	9009883a 	mov	r4,r18
   27710:	18c00054 	ori	r3,r3,1
   27714:	10c00115 	stw	r3,4(r2)
   27718:	002d38c0 	call	2d38c <__malloc_unlock>
   2771c:	80800204 	addi	r2,r16,8
   27720:	003f6c06 	br	274d4 <__alt_data_end+0xfffe80d4>
   27724:	9c000217 	ldw	r16,8(r19)
   27728:	00bfff04 	movi	r2,-4
   2772c:	85800117 	ldw	r22,4(r16)
   27730:	b0ac703a 	and	r22,r22,r2
   27734:	b4400336 	bltu	r22,r17,27744 <_malloc_r+0x324>
   27738:	b445c83a 	sub	r2,r22,r17
   2773c:	00c003c4 	movi	r3,15
   27740:	18805d16 	blt	r3,r2,278b8 <_malloc_r+0x498>
   27744:	05c000f4 	movhi	r23,3
   27748:	008000f4 	movhi	r2,3
   2774c:	bdc6f404 	addi	r23,r23,7120
   27750:	108de304 	addi	r2,r2,14220
   27754:	15400017 	ldw	r21,0(r2)
   27758:	b9000017 	ldw	r4,0(r23)
   2775c:	00ffffc4 	movi	r3,-1
   27760:	858d883a 	add	r6,r16,r22
   27764:	8d6b883a 	add	r21,r17,r21
   27768:	20c0e426 	beq	r4,r3,27afc <_malloc_r+0x6dc>
   2776c:	ad4403c4 	addi	r21,r21,4111
   27770:	00fc0004 	movi	r3,-4096
   27774:	a8ea703a 	and	r21,r21,r3
   27778:	9009883a 	mov	r4,r18
   2777c:	a80b883a 	mov	r5,r21
   27780:	d9800015 	stw	r6,0(sp)
   27784:	00296080 	call	29608 <_sbrk_r>
   27788:	00ffffc4 	movi	r3,-1
   2778c:	1029883a 	mov	r20,r2
   27790:	d9800017 	ldw	r6,0(sp)
   27794:	10c0a426 	beq	r2,r3,27a28 <_malloc_r+0x608>
   27798:	1180a236 	bltu	r2,r6,27a24 <_malloc_r+0x604>
   2779c:	070000f4 	movhi	fp,3
   277a0:	e70dec04 	addi	fp,fp,14256
   277a4:	e0c00017 	ldw	r3,0(fp)
   277a8:	a8c7883a 	add	r3,r21,r3
   277ac:	e0c00015 	stw	r3,0(fp)
   277b0:	3500da26 	beq	r6,r20,27b1c <_malloc_r+0x6fc>
   277b4:	b9000017 	ldw	r4,0(r23)
   277b8:	00bfffc4 	movi	r2,-1
   277bc:	2080e426 	beq	r4,r2,27b50 <_malloc_r+0x730>
   277c0:	a185c83a 	sub	r2,r20,r6
   277c4:	1885883a 	add	r2,r3,r2
   277c8:	e0800015 	stw	r2,0(fp)
   277cc:	a0c001cc 	andi	r3,r20,7
   277d0:	1800b526 	beq	r3,zero,27aa8 <_malloc_r+0x688>
   277d4:	a0e9c83a 	sub	r20,r20,r3
   277d8:	00840204 	movi	r2,4104
   277dc:	a5000204 	addi	r20,r20,8
   277e0:	10c7c83a 	sub	r3,r2,r3
   277e4:	a545883a 	add	r2,r20,r21
   277e8:	1083ffcc 	andi	r2,r2,4095
   277ec:	18abc83a 	sub	r21,r3,r2
   277f0:	9009883a 	mov	r4,r18
   277f4:	a80b883a 	mov	r5,r21
   277f8:	00296080 	call	29608 <_sbrk_r>
   277fc:	00ffffc4 	movi	r3,-1
   27800:	10c0d026 	beq	r2,r3,27b44 <_malloc_r+0x724>
   27804:	1507c83a 	sub	r3,r2,r20
   27808:	a8c7883a 	add	r3,r21,r3
   2780c:	18c00054 	ori	r3,r3,1
   27810:	e0800017 	ldw	r2,0(fp)
   27814:	9d000215 	stw	r20,8(r19)
   27818:	a0c00115 	stw	r3,4(r20)
   2781c:	a887883a 	add	r3,r21,r2
   27820:	e0c00015 	stw	r3,0(fp)
   27824:	84c00e26 	beq	r16,r19,27860 <_malloc_r+0x440>
   27828:	018003c4 	movi	r6,15
   2782c:	3580a02e 	bgeu	r6,r22,27ab0 <_malloc_r+0x690>
   27830:	81400117 	ldw	r5,4(r16)
   27834:	013ffe04 	movi	r4,-8
   27838:	b0bffd04 	addi	r2,r22,-12
   2783c:	1104703a 	and	r2,r2,r4
   27840:	2900004c 	andi	r4,r5,1
   27844:	1108b03a 	or	r4,r2,r4
   27848:	81000115 	stw	r4,4(r16)
   2784c:	01400144 	movi	r5,5
   27850:	8089883a 	add	r4,r16,r2
   27854:	21400115 	stw	r5,4(r4)
   27858:	21400215 	stw	r5,8(r4)
   2785c:	3080c036 	bltu	r6,r2,27b60 <_malloc_r+0x740>
   27860:	008000f4 	movhi	r2,3
   27864:	108de204 	addi	r2,r2,14216
   27868:	11000017 	ldw	r4,0(r2)
   2786c:	20c0012e 	bgeu	r4,r3,27874 <_malloc_r+0x454>
   27870:	10c00015 	stw	r3,0(r2)
   27874:	008000f4 	movhi	r2,3
   27878:	108de104 	addi	r2,r2,14212
   2787c:	11000017 	ldw	r4,0(r2)
   27880:	9c000217 	ldw	r16,8(r19)
   27884:	20c0012e 	bgeu	r4,r3,2788c <_malloc_r+0x46c>
   27888:	10c00015 	stw	r3,0(r2)
   2788c:	80c00117 	ldw	r3,4(r16)
   27890:	00bfff04 	movi	r2,-4
   27894:	1886703a 	and	r3,r3,r2
   27898:	1c45c83a 	sub	r2,r3,r17
   2789c:	1c400236 	bltu	r3,r17,278a8 <_malloc_r+0x488>
   278a0:	00c003c4 	movi	r3,15
   278a4:	18800416 	blt	r3,r2,278b8 <_malloc_r+0x498>
   278a8:	9009883a 	mov	r4,r18
   278ac:	002d38c0 	call	2d38c <__malloc_unlock>
   278b0:	0005883a 	mov	r2,zero
   278b4:	003f0706 	br	274d4 <__alt_data_end+0xfffe80d4>
   278b8:	88c00054 	ori	r3,r17,1
   278bc:	80c00115 	stw	r3,4(r16)
   278c0:	8463883a 	add	r17,r16,r17
   278c4:	10800054 	ori	r2,r2,1
   278c8:	9c400215 	stw	r17,8(r19)
   278cc:	88800115 	stw	r2,4(r17)
   278d0:	9009883a 	mov	r4,r18
   278d4:	002d38c0 	call	2d38c <__malloc_unlock>
   278d8:	80800204 	addi	r2,r16,8
   278dc:	003efd06 	br	274d4 <__alt_data_end+0xfffe80d4>
   278e0:	00800504 	movi	r2,20
   278e4:	10c0482e 	bgeu	r2,r3,27a08 <_malloc_r+0x5e8>
   278e8:	00801504 	movi	r2,84
   278ec:	10c06836 	bltu	r2,r3,27a90 <_malloc_r+0x670>
   278f0:	8806d33a 	srli	r3,r17,12
   278f4:	19c01b84 	addi	r7,r3,110
   278f8:	39cb883a 	add	r5,r7,r7
   278fc:	003f0c06 	br	27530 <__alt_data_end+0xfffe8130>
   27900:	3804d27a 	srli	r2,r7,9
   27904:	01000104 	movi	r4,4
   27908:	2080422e 	bgeu	r4,r2,27a14 <_malloc_r+0x5f4>
   2790c:	01000504 	movi	r4,20
   27910:	20807c36 	bltu	r4,r2,27b04 <_malloc_r+0x6e4>
   27914:	110016c4 	addi	r4,r2,91
   27918:	210b883a 	add	r5,r4,r4
   2791c:	294b883a 	add	r5,r5,r5
   27920:	294b883a 	add	r5,r5,r5
   27924:	994b883a 	add	r5,r19,r5
   27928:	28800217 	ldw	r2,8(r5)
   2792c:	020000f4 	movhi	r8,3
   27930:	42014f04 	addi	r8,r8,1340
   27934:	11406326 	beq	r2,r5,27ac4 <_malloc_r+0x6a4>
   27938:	01bfff04 	movi	r6,-4
   2793c:	11000117 	ldw	r4,4(r2)
   27940:	2188703a 	and	r4,r4,r6
   27944:	3900022e 	bgeu	r7,r4,27950 <_malloc_r+0x530>
   27948:	10800217 	ldw	r2,8(r2)
   2794c:	28bffb1e 	bne	r5,r2,2793c <__alt_data_end+0xfffe853c>
   27950:	11800317 	ldw	r6,12(r2)
   27954:	99000117 	ldw	r4,4(r19)
   27958:	81800315 	stw	r6,12(r16)
   2795c:	80800215 	stw	r2,8(r16)
   27960:	34000215 	stw	r16,8(r6)
   27964:	14000315 	stw	r16,12(r2)
   27968:	003f2706 	br	27608 <__alt_data_end+0xfffe8208>
   2796c:	88c00054 	ori	r3,r17,1
   27970:	80c00115 	stw	r3,4(r16)
   27974:	8463883a 	add	r17,r16,r17
   27978:	34400515 	stw	r17,20(r6)
   2797c:	34400415 	stw	r17,16(r6)
   27980:	10c00054 	ori	r3,r2,1
   27984:	8a400315 	stw	r9,12(r17)
   27988:	8a400215 	stw	r9,8(r17)
   2798c:	88c00115 	stw	r3,4(r17)
   27990:	88a3883a 	add	r17,r17,r2
   27994:	88800015 	stw	r2,0(r17)
   27998:	9009883a 	mov	r4,r18
   2799c:	002d38c0 	call	2d38c <__malloc_unlock>
   279a0:	80800204 	addi	r2,r16,8
   279a4:	003ecb06 	br	274d4 <__alt_data_end+0xfffe80d4>
   279a8:	31000117 	ldw	r4,4(r6)
   279ac:	003f1606 	br	27608 <__alt_data_end+0xfffe8208>
   279b0:	63000044 	addi	r12,r12,1
   279b4:	608000cc 	andi	r2,r12,3
   279b8:	5ac00204 	addi	r11,r11,8
   279bc:	103f2a1e 	bne	r2,zero,27668 <__alt_data_end+0xfffe8268>
   279c0:	00002106 	br	27a48 <_malloc_r+0x628>
   279c4:	80800204 	addi	r2,r16,8
   279c8:	84000517 	ldw	r16,20(r16)
   279cc:	143eb31e 	bne	r2,r16,2749c <__alt_data_end+0xfffe809c>
   279d0:	18c00084 	addi	r3,r3,2
   279d4:	003eec06 	br	27588 <__alt_data_end+0xfffe8188>
   279d8:	8085883a 	add	r2,r16,r2
   279dc:	10c00117 	ldw	r3,4(r2)
   279e0:	81000317 	ldw	r4,12(r16)
   279e4:	81400217 	ldw	r5,8(r16)
   279e8:	18c00054 	ori	r3,r3,1
   279ec:	10c00115 	stw	r3,4(r2)
   279f0:	29000315 	stw	r4,12(r5)
   279f4:	21400215 	stw	r5,8(r4)
   279f8:	9009883a 	mov	r4,r18
   279fc:	002d38c0 	call	2d38c <__malloc_unlock>
   27a00:	80800204 	addi	r2,r16,8
   27a04:	003eb306 	br	274d4 <__alt_data_end+0xfffe80d4>
   27a08:	19c016c4 	addi	r7,r3,91
   27a0c:	39cb883a 	add	r5,r7,r7
   27a10:	003ec706 	br	27530 <__alt_data_end+0xfffe8130>
   27a14:	3804d1ba 	srli	r2,r7,6
   27a18:	11000e04 	addi	r4,r2,56
   27a1c:	210b883a 	add	r5,r4,r4
   27a20:	003fbe06 	br	2791c <__alt_data_end+0xfffe851c>
   27a24:	84ff5d26 	beq	r16,r19,2779c <__alt_data_end+0xfffe839c>
   27a28:	9c000217 	ldw	r16,8(r19)
   27a2c:	00bfff04 	movi	r2,-4
   27a30:	80c00117 	ldw	r3,4(r16)
   27a34:	1886703a 	and	r3,r3,r2
   27a38:	003f9706 	br	27898 <__alt_data_end+0xfffe8498>
   27a3c:	52800017 	ldw	r10,0(r10)
   27a40:	18ffffc4 	addi	r3,r3,-1
   27a44:	50805c1e 	bne	r10,r2,27bb8 <_malloc_r+0x798>
   27a48:	190000cc 	andi	r4,r3,3
   27a4c:	50bffe04 	addi	r2,r10,-8
   27a50:	203ffa1e 	bne	r4,zero,27a3c <__alt_data_end+0xfffe863c>
   27a54:	98800117 	ldw	r2,4(r19)
   27a58:	0146303a 	nor	r3,zero,r5
   27a5c:	1884703a 	and	r2,r3,r2
   27a60:	98800115 	stw	r2,4(r19)
   27a64:	294b883a 	add	r5,r5,r5
   27a68:	117f2e36 	bltu	r2,r5,27724 <__alt_data_end+0xfffe8324>
   27a6c:	283f2d26 	beq	r5,zero,27724 <__alt_data_end+0xfffe8324>
   27a70:	1146703a 	and	r3,r2,r5
   27a74:	1800521e 	bne	r3,zero,27bc0 <_malloc_r+0x7a0>
   27a78:	6007883a 	mov	r3,r12
   27a7c:	294b883a 	add	r5,r5,r5
   27a80:	1148703a 	and	r4,r2,r5
   27a84:	18c00104 	addi	r3,r3,4
   27a88:	203ffc26 	beq	r4,zero,27a7c <__alt_data_end+0xfffe867c>
   27a8c:	003ef006 	br	27650 <__alt_data_end+0xfffe8250>
   27a90:	00805504 	movi	r2,340
   27a94:	10c01336 	bltu	r2,r3,27ae4 <_malloc_r+0x6c4>
   27a98:	8806d3fa 	srli	r3,r17,15
   27a9c:	19c01dc4 	addi	r7,r3,119
   27aa0:	39cb883a 	add	r5,r7,r7
   27aa4:	003ea206 	br	27530 <__alt_data_end+0xfffe8130>
   27aa8:	00c40004 	movi	r3,4096
   27aac:	003f4d06 	br	277e4 <__alt_data_end+0xfffe83e4>
   27ab0:	00800044 	movi	r2,1
   27ab4:	a0800115 	stw	r2,4(r20)
   27ab8:	a021883a 	mov	r16,r20
   27abc:	0007883a 	mov	r3,zero
   27ac0:	003f7506 	br	27898 <__alt_data_end+0xfffe8498>
   27ac4:	200bd0ba 	srai	r5,r4,2
   27ac8:	01800044 	movi	r6,1
   27acc:	41000117 	ldw	r4,4(r8)
   27ad0:	314a983a 	sll	r5,r6,r5
   27ad4:	100d883a 	mov	r6,r2
   27ad8:	2908b03a 	or	r4,r5,r4
   27adc:	41000115 	stw	r4,4(r8)
   27ae0:	003f9d06 	br	27958 <__alt_data_end+0xfffe8558>
   27ae4:	00815504 	movi	r2,1364
   27ae8:	10c01336 	bltu	r2,r3,27b38 <_malloc_r+0x718>
   27aec:	8806d4ba 	srli	r3,r17,18
   27af0:	19c01f04 	addi	r7,r3,124
   27af4:	39cb883a 	add	r5,r7,r7
   27af8:	003e8d06 	br	27530 <__alt_data_end+0xfffe8130>
   27afc:	ad400404 	addi	r21,r21,16
   27b00:	003f1d06 	br	27778 <__alt_data_end+0xfffe8378>
   27b04:	01001504 	movi	r4,84
   27b08:	20801c36 	bltu	r4,r2,27b7c <_malloc_r+0x75c>
   27b0c:	3804d33a 	srli	r2,r7,12
   27b10:	11001b84 	addi	r4,r2,110
   27b14:	210b883a 	add	r5,r4,r4
   27b18:	003f8006 	br	2791c <__alt_data_end+0xfffe851c>
   27b1c:	3083ffcc 	andi	r2,r6,4095
   27b20:	103f241e 	bne	r2,zero,277b4 <__alt_data_end+0xfffe83b4>
   27b24:	99000217 	ldw	r4,8(r19)
   27b28:	ad85883a 	add	r2,r21,r22
   27b2c:	10800054 	ori	r2,r2,1
   27b30:	20800115 	stw	r2,4(r4)
   27b34:	003f4a06 	br	27860 <__alt_data_end+0xfffe8460>
   27b38:	01403f04 	movi	r5,252
   27b3c:	01c01f84 	movi	r7,126
   27b40:	003e7b06 	br	27530 <__alt_data_end+0xfffe8130>
   27b44:	00c00044 	movi	r3,1
   27b48:	002b883a 	mov	r21,zero
   27b4c:	003f3006 	br	27810 <__alt_data_end+0xfffe8410>
   27b50:	008000f4 	movhi	r2,3
   27b54:	1086f404 	addi	r2,r2,7120
   27b58:	15000015 	stw	r20,0(r2)
   27b5c:	003f1b06 	br	277cc <__alt_data_end+0xfffe83cc>
   27b60:	9009883a 	mov	r4,r18
   27b64:	81400204 	addi	r5,r16,8
   27b68:	00268840 	call	26884 <_free_r>
   27b6c:	008000f4 	movhi	r2,3
   27b70:	108dec04 	addi	r2,r2,14256
   27b74:	10c00017 	ldw	r3,0(r2)
   27b78:	003f3906 	br	27860 <__alt_data_end+0xfffe8460>
   27b7c:	01005504 	movi	r4,340
   27b80:	20800436 	bltu	r4,r2,27b94 <_malloc_r+0x774>
   27b84:	3804d3fa 	srli	r2,r7,15
   27b88:	11001dc4 	addi	r4,r2,119
   27b8c:	210b883a 	add	r5,r4,r4
   27b90:	003f6206 	br	2791c <__alt_data_end+0xfffe851c>
   27b94:	01015504 	movi	r4,1364
   27b98:	20800436 	bltu	r4,r2,27bac <_malloc_r+0x78c>
   27b9c:	3804d4ba 	srli	r2,r7,18
   27ba0:	11001f04 	addi	r4,r2,124
   27ba4:	210b883a 	add	r5,r4,r4
   27ba8:	003f5c06 	br	2791c <__alt_data_end+0xfffe851c>
   27bac:	01403f04 	movi	r5,252
   27bb0:	01001f84 	movi	r4,126
   27bb4:	003f5906 	br	2791c <__alt_data_end+0xfffe851c>
   27bb8:	98800117 	ldw	r2,4(r19)
   27bbc:	003fa906 	br	27a64 <__alt_data_end+0xfffe8664>
   27bc0:	6007883a 	mov	r3,r12
   27bc4:	003ea206 	br	27650 <__alt_data_end+0xfffe8250>

00027bc8 <memchr>:
   27bc8:	208000cc 	andi	r2,r4,3
   27bcc:	280f883a 	mov	r7,r5
   27bd0:	10003526 	beq	r2,zero,27ca8 <memchr+0xe0>
   27bd4:	30bfffc4 	addi	r2,r6,-1
   27bd8:	30001b26 	beq	r6,zero,27c48 <memchr+0x80>
   27bdc:	21800003 	ldbu	r6,0(r4)
   27be0:	28c03fcc 	andi	r3,r5,255
   27be4:	30c01a26 	beq	r6,r3,27c50 <memchr+0x88>
   27be8:	180d883a 	mov	r6,r3
   27bec:	00000406 	br	27c00 <memchr+0x38>
   27bf0:	10001526 	beq	r2,zero,27c48 <memchr+0x80>
   27bf4:	20c00003 	ldbu	r3,0(r4)
   27bf8:	10bfffc4 	addi	r2,r2,-1
   27bfc:	19801426 	beq	r3,r6,27c50 <memchr+0x88>
   27c00:	21000044 	addi	r4,r4,1
   27c04:	20c000cc 	andi	r3,r4,3
   27c08:	183ff91e 	bne	r3,zero,27bf0 <__alt_data_end+0xfffe87f0>
   27c0c:	024000c4 	movi	r9,3
   27c10:	48801136 	bltu	r9,r2,27c58 <memchr+0x90>
   27c14:	10000c26 	beq	r2,zero,27c48 <memchr+0x80>
   27c18:	20c00003 	ldbu	r3,0(r4)
   27c1c:	29403fcc 	andi	r5,r5,255
   27c20:	19400b26 	beq	r3,r5,27c50 <memchr+0x88>
   27c24:	20c00044 	addi	r3,r4,1
   27c28:	2085883a 	add	r2,r4,r2
   27c2c:	39803fcc 	andi	r6,r7,255
   27c30:	00000306 	br	27c40 <memchr+0x78>
   27c34:	18c00044 	addi	r3,r3,1
   27c38:	197fffc3 	ldbu	r5,-1(r3)
   27c3c:	29800426 	beq	r5,r6,27c50 <memchr+0x88>
   27c40:	1809883a 	mov	r4,r3
   27c44:	18bffb1e 	bne	r3,r2,27c34 <__alt_data_end+0xfffe8834>
   27c48:	0005883a 	mov	r2,zero
   27c4c:	f800283a 	ret
   27c50:	2005883a 	mov	r2,r4
   27c54:	f800283a 	ret
   27c58:	28c03fcc 	andi	r3,r5,255
   27c5c:	1810923a 	slli	r8,r3,8
   27c60:	02ffbff4 	movhi	r11,65279
   27c64:	02a02074 	movhi	r10,32897
   27c68:	40c6b03a 	or	r3,r8,r3
   27c6c:	1810943a 	slli	r8,r3,16
   27c70:	5affbfc4 	addi	r11,r11,-257
   27c74:	52a02004 	addi	r10,r10,-32640
   27c78:	40d0b03a 	or	r8,r8,r3
   27c7c:	20c00017 	ldw	r3,0(r4)
   27c80:	40c6f03a 	xor	r3,r8,r3
   27c84:	1acd883a 	add	r6,r3,r11
   27c88:	00c6303a 	nor	r3,zero,r3
   27c8c:	30c6703a 	and	r3,r6,r3
   27c90:	1a86703a 	and	r3,r3,r10
   27c94:	183fdf1e 	bne	r3,zero,27c14 <__alt_data_end+0xfffe8814>
   27c98:	10bfff04 	addi	r2,r2,-4
   27c9c:	21000104 	addi	r4,r4,4
   27ca0:	48bff636 	bltu	r9,r2,27c7c <__alt_data_end+0xfffe887c>
   27ca4:	003fdb06 	br	27c14 <__alt_data_end+0xfffe8814>
   27ca8:	3005883a 	mov	r2,r6
   27cac:	003fd706 	br	27c0c <__alt_data_end+0xfffe880c>

00027cb0 <memcpy>:
   27cb0:	deffff04 	addi	sp,sp,-4
   27cb4:	dc000015 	stw	r16,0(sp)
   27cb8:	00c003c4 	movi	r3,15
   27cbc:	2005883a 	mov	r2,r4
   27cc0:	1980432e 	bgeu	r3,r6,27dd0 <memcpy+0x120>
   27cc4:	2146b03a 	or	r3,r4,r5
   27cc8:	18c000cc 	andi	r3,r3,3
   27ccc:	1800421e 	bne	r3,zero,27dd8 <memcpy+0x128>
   27cd0:	343ffc04 	addi	r16,r6,-16
   27cd4:	8020d13a 	srli	r16,r16,4
   27cd8:	28c00104 	addi	r3,r5,4
   27cdc:	23400104 	addi	r13,r4,4
   27ce0:	801e913a 	slli	r15,r16,4
   27ce4:	2b000204 	addi	r12,r5,8
   27ce8:	22c00204 	addi	r11,r4,8
   27cec:	7bc00504 	addi	r15,r15,20
   27cf0:	2a800304 	addi	r10,r5,12
   27cf4:	22400304 	addi	r9,r4,12
   27cf8:	2bdf883a 	add	r15,r5,r15
   27cfc:	2811883a 	mov	r8,r5
   27d00:	200f883a 	mov	r7,r4
   27d04:	41000017 	ldw	r4,0(r8)
   27d08:	39c00404 	addi	r7,r7,16
   27d0c:	18c00404 	addi	r3,r3,16
   27d10:	393ffc15 	stw	r4,-16(r7)
   27d14:	1bbffc17 	ldw	r14,-16(r3)
   27d18:	6b400404 	addi	r13,r13,16
   27d1c:	5ac00404 	addi	r11,r11,16
   27d20:	6bbffc15 	stw	r14,-16(r13)
   27d24:	63800017 	ldw	r14,0(r12)
   27d28:	4a400404 	addi	r9,r9,16
   27d2c:	42000404 	addi	r8,r8,16
   27d30:	5bbffc15 	stw	r14,-16(r11)
   27d34:	53800017 	ldw	r14,0(r10)
   27d38:	63000404 	addi	r12,r12,16
   27d3c:	52800404 	addi	r10,r10,16
   27d40:	4bbffc15 	stw	r14,-16(r9)
   27d44:	1bffef1e 	bne	r3,r15,27d04 <__alt_data_end+0xfffe8904>
   27d48:	81c00044 	addi	r7,r16,1
   27d4c:	380e913a 	slli	r7,r7,4
   27d50:	310003cc 	andi	r4,r6,15
   27d54:	02c000c4 	movi	r11,3
   27d58:	11c7883a 	add	r3,r2,r7
   27d5c:	29cb883a 	add	r5,r5,r7
   27d60:	59001f2e 	bgeu	r11,r4,27de0 <memcpy+0x130>
   27d64:	1813883a 	mov	r9,r3
   27d68:	2811883a 	mov	r8,r5
   27d6c:	200f883a 	mov	r7,r4
   27d70:	42800017 	ldw	r10,0(r8)
   27d74:	4a400104 	addi	r9,r9,4
   27d78:	39ffff04 	addi	r7,r7,-4
   27d7c:	4abfff15 	stw	r10,-4(r9)
   27d80:	42000104 	addi	r8,r8,4
   27d84:	59fffa36 	bltu	r11,r7,27d70 <__alt_data_end+0xfffe8970>
   27d88:	213fff04 	addi	r4,r4,-4
   27d8c:	2008d0ba 	srli	r4,r4,2
   27d90:	318000cc 	andi	r6,r6,3
   27d94:	21000044 	addi	r4,r4,1
   27d98:	2109883a 	add	r4,r4,r4
   27d9c:	2109883a 	add	r4,r4,r4
   27da0:	1907883a 	add	r3,r3,r4
   27da4:	290b883a 	add	r5,r5,r4
   27da8:	30000626 	beq	r6,zero,27dc4 <memcpy+0x114>
   27dac:	198d883a 	add	r6,r3,r6
   27db0:	29c00003 	ldbu	r7,0(r5)
   27db4:	18c00044 	addi	r3,r3,1
   27db8:	29400044 	addi	r5,r5,1
   27dbc:	19ffffc5 	stb	r7,-1(r3)
   27dc0:	19bffb1e 	bne	r3,r6,27db0 <__alt_data_end+0xfffe89b0>
   27dc4:	dc000017 	ldw	r16,0(sp)
   27dc8:	dec00104 	addi	sp,sp,4
   27dcc:	f800283a 	ret
   27dd0:	2007883a 	mov	r3,r4
   27dd4:	003ff406 	br	27da8 <__alt_data_end+0xfffe89a8>
   27dd8:	2007883a 	mov	r3,r4
   27ddc:	003ff306 	br	27dac <__alt_data_end+0xfffe89ac>
   27de0:	200d883a 	mov	r6,r4
   27de4:	003ff006 	br	27da8 <__alt_data_end+0xfffe89a8>

00027de8 <memmove>:
   27de8:	2005883a 	mov	r2,r4
   27dec:	29000b2e 	bgeu	r5,r4,27e1c <memmove+0x34>
   27df0:	298f883a 	add	r7,r5,r6
   27df4:	21c0092e 	bgeu	r4,r7,27e1c <memmove+0x34>
   27df8:	2187883a 	add	r3,r4,r6
   27dfc:	198bc83a 	sub	r5,r3,r6
   27e00:	30004b26 	beq	r6,zero,27f30 <memmove+0x148>
   27e04:	39ffffc4 	addi	r7,r7,-1
   27e08:	39000003 	ldbu	r4,0(r7)
   27e0c:	18ffffc4 	addi	r3,r3,-1
   27e10:	19000005 	stb	r4,0(r3)
   27e14:	197ffb1e 	bne	r3,r5,27e04 <__alt_data_end+0xfffe8a04>
   27e18:	f800283a 	ret
   27e1c:	00c003c4 	movi	r3,15
   27e20:	1980412e 	bgeu	r3,r6,27f28 <memmove+0x140>
   27e24:	1146b03a 	or	r3,r2,r5
   27e28:	18c000cc 	andi	r3,r3,3
   27e2c:	1800411e 	bne	r3,zero,27f34 <memmove+0x14c>
   27e30:	33fffc04 	addi	r15,r6,-16
   27e34:	781ed13a 	srli	r15,r15,4
   27e38:	28c00104 	addi	r3,r5,4
   27e3c:	13400104 	addi	r13,r2,4
   27e40:	781c913a 	slli	r14,r15,4
   27e44:	2b000204 	addi	r12,r5,8
   27e48:	12c00204 	addi	r11,r2,8
   27e4c:	73800504 	addi	r14,r14,20
   27e50:	2a800304 	addi	r10,r5,12
   27e54:	12400304 	addi	r9,r2,12
   27e58:	2b9d883a 	add	r14,r5,r14
   27e5c:	2811883a 	mov	r8,r5
   27e60:	100f883a 	mov	r7,r2
   27e64:	41000017 	ldw	r4,0(r8)
   27e68:	39c00404 	addi	r7,r7,16
   27e6c:	18c00404 	addi	r3,r3,16
   27e70:	393ffc15 	stw	r4,-16(r7)
   27e74:	193ffc17 	ldw	r4,-16(r3)
   27e78:	6b400404 	addi	r13,r13,16
   27e7c:	5ac00404 	addi	r11,r11,16
   27e80:	693ffc15 	stw	r4,-16(r13)
   27e84:	61000017 	ldw	r4,0(r12)
   27e88:	4a400404 	addi	r9,r9,16
   27e8c:	42000404 	addi	r8,r8,16
   27e90:	593ffc15 	stw	r4,-16(r11)
   27e94:	51000017 	ldw	r4,0(r10)
   27e98:	63000404 	addi	r12,r12,16
   27e9c:	52800404 	addi	r10,r10,16
   27ea0:	493ffc15 	stw	r4,-16(r9)
   27ea4:	1bbfef1e 	bne	r3,r14,27e64 <__alt_data_end+0xfffe8a64>
   27ea8:	79000044 	addi	r4,r15,1
   27eac:	2008913a 	slli	r4,r4,4
   27eb0:	328003cc 	andi	r10,r6,15
   27eb4:	02c000c4 	movi	r11,3
   27eb8:	1107883a 	add	r3,r2,r4
   27ebc:	290b883a 	add	r5,r5,r4
   27ec0:	5a801e2e 	bgeu	r11,r10,27f3c <memmove+0x154>
   27ec4:	1813883a 	mov	r9,r3
   27ec8:	2811883a 	mov	r8,r5
   27ecc:	500f883a 	mov	r7,r10
   27ed0:	41000017 	ldw	r4,0(r8)
   27ed4:	4a400104 	addi	r9,r9,4
   27ed8:	39ffff04 	addi	r7,r7,-4
   27edc:	493fff15 	stw	r4,-4(r9)
   27ee0:	42000104 	addi	r8,r8,4
   27ee4:	59fffa36 	bltu	r11,r7,27ed0 <__alt_data_end+0xfffe8ad0>
   27ee8:	513fff04 	addi	r4,r10,-4
   27eec:	2008d0ba 	srli	r4,r4,2
   27ef0:	318000cc 	andi	r6,r6,3
   27ef4:	21000044 	addi	r4,r4,1
   27ef8:	2109883a 	add	r4,r4,r4
   27efc:	2109883a 	add	r4,r4,r4
   27f00:	1907883a 	add	r3,r3,r4
   27f04:	290b883a 	add	r5,r5,r4
   27f08:	30000926 	beq	r6,zero,27f30 <memmove+0x148>
   27f0c:	198d883a 	add	r6,r3,r6
   27f10:	29c00003 	ldbu	r7,0(r5)
   27f14:	18c00044 	addi	r3,r3,1
   27f18:	29400044 	addi	r5,r5,1
   27f1c:	19ffffc5 	stb	r7,-1(r3)
   27f20:	19bffb1e 	bne	r3,r6,27f10 <__alt_data_end+0xfffe8b10>
   27f24:	f800283a 	ret
   27f28:	1007883a 	mov	r3,r2
   27f2c:	003ff606 	br	27f08 <__alt_data_end+0xfffe8b08>
   27f30:	f800283a 	ret
   27f34:	1007883a 	mov	r3,r2
   27f38:	003ff406 	br	27f0c <__alt_data_end+0xfffe8b0c>
   27f3c:	500d883a 	mov	r6,r10
   27f40:	003ff106 	br	27f08 <__alt_data_end+0xfffe8b08>

00027f44 <memset>:
   27f44:	20c000cc 	andi	r3,r4,3
   27f48:	2005883a 	mov	r2,r4
   27f4c:	18004326 	beq	r3,zero,2805c <memset+0x118>
   27f50:	31ffffc4 	addi	r7,r6,-1
   27f54:	30004026 	beq	r6,zero,28058 <memset+0x114>
   27f58:	2813883a 	mov	r9,r5
   27f5c:	200d883a 	mov	r6,r4
   27f60:	2007883a 	mov	r3,r4
   27f64:	00000406 	br	27f78 <memset+0x34>
   27f68:	3a3fffc4 	addi	r8,r7,-1
   27f6c:	31800044 	addi	r6,r6,1
   27f70:	38003926 	beq	r7,zero,28058 <memset+0x114>
   27f74:	400f883a 	mov	r7,r8
   27f78:	18c00044 	addi	r3,r3,1
   27f7c:	32400005 	stb	r9,0(r6)
   27f80:	1a0000cc 	andi	r8,r3,3
   27f84:	403ff81e 	bne	r8,zero,27f68 <__alt_data_end+0xfffe8b68>
   27f88:	010000c4 	movi	r4,3
   27f8c:	21c02d2e 	bgeu	r4,r7,28044 <memset+0x100>
   27f90:	29803fcc 	andi	r6,r5,255
   27f94:	3008923a 	slli	r4,r6,8
   27f98:	218cb03a 	or	r6,r4,r6
   27f9c:	3008943a 	slli	r4,r6,16
   27fa0:	218cb03a 	or	r6,r4,r6
   27fa4:	010003c4 	movi	r4,15
   27fa8:	21c0182e 	bgeu	r4,r7,2800c <memset+0xc8>
   27fac:	3b3ffc04 	addi	r12,r7,-16
   27fb0:	6018d13a 	srli	r12,r12,4
   27fb4:	1a000104 	addi	r8,r3,4
   27fb8:	1ac00204 	addi	r11,r3,8
   27fbc:	6008913a 	slli	r4,r12,4
   27fc0:	1a800304 	addi	r10,r3,12
   27fc4:	1813883a 	mov	r9,r3
   27fc8:	21000504 	addi	r4,r4,20
   27fcc:	1909883a 	add	r4,r3,r4
   27fd0:	49800015 	stw	r6,0(r9)
   27fd4:	41800015 	stw	r6,0(r8)
   27fd8:	59800015 	stw	r6,0(r11)
   27fdc:	51800015 	stw	r6,0(r10)
   27fe0:	42000404 	addi	r8,r8,16
   27fe4:	4a400404 	addi	r9,r9,16
   27fe8:	5ac00404 	addi	r11,r11,16
   27fec:	52800404 	addi	r10,r10,16
   27ff0:	413ff71e 	bne	r8,r4,27fd0 <__alt_data_end+0xfffe8bd0>
   27ff4:	63000044 	addi	r12,r12,1
   27ff8:	6018913a 	slli	r12,r12,4
   27ffc:	39c003cc 	andi	r7,r7,15
   28000:	010000c4 	movi	r4,3
   28004:	1b07883a 	add	r3,r3,r12
   28008:	21c00e2e 	bgeu	r4,r7,28044 <memset+0x100>
   2800c:	1813883a 	mov	r9,r3
   28010:	3811883a 	mov	r8,r7
   28014:	010000c4 	movi	r4,3
   28018:	49800015 	stw	r6,0(r9)
   2801c:	423fff04 	addi	r8,r8,-4
   28020:	4a400104 	addi	r9,r9,4
   28024:	223ffc36 	bltu	r4,r8,28018 <__alt_data_end+0xfffe8c18>
   28028:	393fff04 	addi	r4,r7,-4
   2802c:	2008d0ba 	srli	r4,r4,2
   28030:	39c000cc 	andi	r7,r7,3
   28034:	21000044 	addi	r4,r4,1
   28038:	2109883a 	add	r4,r4,r4
   2803c:	2109883a 	add	r4,r4,r4
   28040:	1907883a 	add	r3,r3,r4
   28044:	38000426 	beq	r7,zero,28058 <memset+0x114>
   28048:	19cf883a 	add	r7,r3,r7
   2804c:	19400005 	stb	r5,0(r3)
   28050:	18c00044 	addi	r3,r3,1
   28054:	19fffd1e 	bne	r3,r7,2804c <__alt_data_end+0xfffe8c4c>
   28058:	f800283a 	ret
   2805c:	2007883a 	mov	r3,r4
   28060:	300f883a 	mov	r7,r6
   28064:	003fc806 	br	27f88 <__alt_data_end+0xfffe8b88>

00028068 <_Balloc>:
   28068:	20801317 	ldw	r2,76(r4)
   2806c:	defffc04 	addi	sp,sp,-16
   28070:	dc400115 	stw	r17,4(sp)
   28074:	dc000015 	stw	r16,0(sp)
   28078:	dfc00315 	stw	ra,12(sp)
   2807c:	dc800215 	stw	r18,8(sp)
   28080:	2023883a 	mov	r17,r4
   28084:	2821883a 	mov	r16,r5
   28088:	10000f26 	beq	r2,zero,280c8 <_Balloc+0x60>
   2808c:	8407883a 	add	r3,r16,r16
   28090:	18c7883a 	add	r3,r3,r3
   28094:	10c7883a 	add	r3,r2,r3
   28098:	18800017 	ldw	r2,0(r3)
   2809c:	10001126 	beq	r2,zero,280e4 <_Balloc+0x7c>
   280a0:	11000017 	ldw	r4,0(r2)
   280a4:	19000015 	stw	r4,0(r3)
   280a8:	10000415 	stw	zero,16(r2)
   280ac:	10000315 	stw	zero,12(r2)
   280b0:	dfc00317 	ldw	ra,12(sp)
   280b4:	dc800217 	ldw	r18,8(sp)
   280b8:	dc400117 	ldw	r17,4(sp)
   280bc:	dc000017 	ldw	r16,0(sp)
   280c0:	dec00404 	addi	sp,sp,16
   280c4:	f800283a 	ret
   280c8:	01400104 	movi	r5,4
   280cc:	01800844 	movi	r6,33
   280d0:	002ad800 	call	2ad80 <_calloc_r>
   280d4:	88801315 	stw	r2,76(r17)
   280d8:	103fec1e 	bne	r2,zero,2808c <__alt_data_end+0xfffe8c8c>
   280dc:	0005883a 	mov	r2,zero
   280e0:	003ff306 	br	280b0 <__alt_data_end+0xfffe8cb0>
   280e4:	01400044 	movi	r5,1
   280e8:	2c24983a 	sll	r18,r5,r16
   280ec:	8809883a 	mov	r4,r17
   280f0:	91800144 	addi	r6,r18,5
   280f4:	318d883a 	add	r6,r6,r6
   280f8:	318d883a 	add	r6,r6,r6
   280fc:	002ad800 	call	2ad80 <_calloc_r>
   28100:	103ff626 	beq	r2,zero,280dc <__alt_data_end+0xfffe8cdc>
   28104:	14000115 	stw	r16,4(r2)
   28108:	14800215 	stw	r18,8(r2)
   2810c:	003fe606 	br	280a8 <__alt_data_end+0xfffe8ca8>

00028110 <_Bfree>:
   28110:	28000826 	beq	r5,zero,28134 <_Bfree+0x24>
   28114:	28c00117 	ldw	r3,4(r5)
   28118:	20801317 	ldw	r2,76(r4)
   2811c:	18c7883a 	add	r3,r3,r3
   28120:	18c7883a 	add	r3,r3,r3
   28124:	10c5883a 	add	r2,r2,r3
   28128:	10c00017 	ldw	r3,0(r2)
   2812c:	28c00015 	stw	r3,0(r5)
   28130:	11400015 	stw	r5,0(r2)
   28134:	f800283a 	ret

00028138 <__multadd>:
   28138:	defffa04 	addi	sp,sp,-24
   2813c:	dc000115 	stw	r16,4(sp)
   28140:	2c000417 	ldw	r16,16(r5)
   28144:	dc800315 	stw	r18,12(sp)
   28148:	dc400215 	stw	r17,8(sp)
   2814c:	dfc00515 	stw	ra,20(sp)
   28150:	dcc00415 	stw	r19,16(sp)
   28154:	2823883a 	mov	r17,r5
   28158:	2025883a 	mov	r18,r4
   2815c:	2a400504 	addi	r9,r5,20
   28160:	0015883a 	mov	r10,zero
   28164:	4a000017 	ldw	r8,0(r9)
   28168:	4a400104 	addi	r9,r9,4
   2816c:	52800044 	addi	r10,r10,1
   28170:	40ffffcc 	andi	r3,r8,65535
   28174:	1987383a 	mul	r3,r3,r6
   28178:	4010d43a 	srli	r8,r8,16
   2817c:	19cf883a 	add	r7,r3,r7
   28180:	4191383a 	mul	r8,r8,r6
   28184:	3816d43a 	srli	r11,r7,16
   28188:	38ffffcc 	andi	r3,r7,65535
   2818c:	5a0f883a 	add	r7,r11,r8
   28190:	3810943a 	slli	r8,r7,16
   28194:	380ed43a 	srli	r7,r7,16
   28198:	40c7883a 	add	r3,r8,r3
   2819c:	48ffff15 	stw	r3,-4(r9)
   281a0:	543ff016 	blt	r10,r16,28164 <__alt_data_end+0xfffe8d64>
   281a4:	38000926 	beq	r7,zero,281cc <__multadd+0x94>
   281a8:	88800217 	ldw	r2,8(r17)
   281ac:	80800f0e 	bge	r16,r2,281ec <__multadd+0xb4>
   281b0:	80800144 	addi	r2,r16,5
   281b4:	1085883a 	add	r2,r2,r2
   281b8:	1085883a 	add	r2,r2,r2
   281bc:	8885883a 	add	r2,r17,r2
   281c0:	11c00015 	stw	r7,0(r2)
   281c4:	84000044 	addi	r16,r16,1
   281c8:	8c000415 	stw	r16,16(r17)
   281cc:	8805883a 	mov	r2,r17
   281d0:	dfc00517 	ldw	ra,20(sp)
   281d4:	dcc00417 	ldw	r19,16(sp)
   281d8:	dc800317 	ldw	r18,12(sp)
   281dc:	dc400217 	ldw	r17,8(sp)
   281e0:	dc000117 	ldw	r16,4(sp)
   281e4:	dec00604 	addi	sp,sp,24
   281e8:	f800283a 	ret
   281ec:	89400117 	ldw	r5,4(r17)
   281f0:	9009883a 	mov	r4,r18
   281f4:	d9c00015 	stw	r7,0(sp)
   281f8:	29400044 	addi	r5,r5,1
   281fc:	00280680 	call	28068 <_Balloc>
   28200:	89800417 	ldw	r6,16(r17)
   28204:	89400304 	addi	r5,r17,12
   28208:	11000304 	addi	r4,r2,12
   2820c:	31800084 	addi	r6,r6,2
   28210:	318d883a 	add	r6,r6,r6
   28214:	318d883a 	add	r6,r6,r6
   28218:	1027883a 	mov	r19,r2
   2821c:	0027cb00 	call	27cb0 <memcpy>
   28220:	89000117 	ldw	r4,4(r17)
   28224:	90c01317 	ldw	r3,76(r18)
   28228:	d9c00017 	ldw	r7,0(sp)
   2822c:	2109883a 	add	r4,r4,r4
   28230:	2109883a 	add	r4,r4,r4
   28234:	1907883a 	add	r3,r3,r4
   28238:	18800017 	ldw	r2,0(r3)
   2823c:	88800015 	stw	r2,0(r17)
   28240:	1c400015 	stw	r17,0(r3)
   28244:	9823883a 	mov	r17,r19
   28248:	003fd906 	br	281b0 <__alt_data_end+0xfffe8db0>

0002824c <__s2b>:
   2824c:	defff904 	addi	sp,sp,-28
   28250:	dc400115 	stw	r17,4(sp)
   28254:	dc000015 	stw	r16,0(sp)
   28258:	2023883a 	mov	r17,r4
   2825c:	2821883a 	mov	r16,r5
   28260:	39000204 	addi	r4,r7,8
   28264:	01400244 	movi	r5,9
   28268:	dcc00315 	stw	r19,12(sp)
   2826c:	dc800215 	stw	r18,8(sp)
   28270:	dfc00615 	stw	ra,24(sp)
   28274:	dd400515 	stw	r21,20(sp)
   28278:	dd000415 	stw	r20,16(sp)
   2827c:	3825883a 	mov	r18,r7
   28280:	3027883a 	mov	r19,r6
   28284:	00224640 	call	22464 <__divsi3>
   28288:	00c00044 	movi	r3,1
   2828c:	000b883a 	mov	r5,zero
   28290:	1880030e 	bge	r3,r2,282a0 <__s2b+0x54>
   28294:	18c7883a 	add	r3,r3,r3
   28298:	29400044 	addi	r5,r5,1
   2829c:	18bffd16 	blt	r3,r2,28294 <__alt_data_end+0xfffe8e94>
   282a0:	8809883a 	mov	r4,r17
   282a4:	00280680 	call	28068 <_Balloc>
   282a8:	d8c00717 	ldw	r3,28(sp)
   282ac:	10c00515 	stw	r3,20(r2)
   282b0:	00c00044 	movi	r3,1
   282b4:	10c00415 	stw	r3,16(r2)
   282b8:	00c00244 	movi	r3,9
   282bc:	1cc0210e 	bge	r3,r19,28344 <__s2b+0xf8>
   282c0:	80eb883a 	add	r21,r16,r3
   282c4:	a829883a 	mov	r20,r21
   282c8:	84e1883a 	add	r16,r16,r19
   282cc:	a1c00007 	ldb	r7,0(r20)
   282d0:	8809883a 	mov	r4,r17
   282d4:	a5000044 	addi	r20,r20,1
   282d8:	100b883a 	mov	r5,r2
   282dc:	01800284 	movi	r6,10
   282e0:	39fff404 	addi	r7,r7,-48
   282e4:	00281380 	call	28138 <__multadd>
   282e8:	a43ff81e 	bne	r20,r16,282cc <__alt_data_end+0xfffe8ecc>
   282ec:	ace1883a 	add	r16,r21,r19
   282f0:	843ffe04 	addi	r16,r16,-8
   282f4:	9c800a0e 	bge	r19,r18,28320 <__s2b+0xd4>
   282f8:	94e5c83a 	sub	r18,r18,r19
   282fc:	84a5883a 	add	r18,r16,r18
   28300:	81c00007 	ldb	r7,0(r16)
   28304:	8809883a 	mov	r4,r17
   28308:	84000044 	addi	r16,r16,1
   2830c:	100b883a 	mov	r5,r2
   28310:	01800284 	movi	r6,10
   28314:	39fff404 	addi	r7,r7,-48
   28318:	00281380 	call	28138 <__multadd>
   2831c:	84bff81e 	bne	r16,r18,28300 <__alt_data_end+0xfffe8f00>
   28320:	dfc00617 	ldw	ra,24(sp)
   28324:	dd400517 	ldw	r21,20(sp)
   28328:	dd000417 	ldw	r20,16(sp)
   2832c:	dcc00317 	ldw	r19,12(sp)
   28330:	dc800217 	ldw	r18,8(sp)
   28334:	dc400117 	ldw	r17,4(sp)
   28338:	dc000017 	ldw	r16,0(sp)
   2833c:	dec00704 	addi	sp,sp,28
   28340:	f800283a 	ret
   28344:	84000284 	addi	r16,r16,10
   28348:	1827883a 	mov	r19,r3
   2834c:	003fe906 	br	282f4 <__alt_data_end+0xfffe8ef4>

00028350 <__hi0bits>:
   28350:	20bfffec 	andhi	r2,r4,65535
   28354:	1000141e 	bne	r2,zero,283a8 <__hi0bits+0x58>
   28358:	2008943a 	slli	r4,r4,16
   2835c:	00800404 	movi	r2,16
   28360:	20ffc02c 	andhi	r3,r4,65280
   28364:	1800021e 	bne	r3,zero,28370 <__hi0bits+0x20>
   28368:	2008923a 	slli	r4,r4,8
   2836c:	10800204 	addi	r2,r2,8
   28370:	20fc002c 	andhi	r3,r4,61440
   28374:	1800021e 	bne	r3,zero,28380 <__hi0bits+0x30>
   28378:	2008913a 	slli	r4,r4,4
   2837c:	10800104 	addi	r2,r2,4
   28380:	20f0002c 	andhi	r3,r4,49152
   28384:	1800031e 	bne	r3,zero,28394 <__hi0bits+0x44>
   28388:	2109883a 	add	r4,r4,r4
   2838c:	10800084 	addi	r2,r2,2
   28390:	2109883a 	add	r4,r4,r4
   28394:	20000316 	blt	r4,zero,283a4 <__hi0bits+0x54>
   28398:	2110002c 	andhi	r4,r4,16384
   2839c:	2000041e 	bne	r4,zero,283b0 <__hi0bits+0x60>
   283a0:	00800804 	movi	r2,32
   283a4:	f800283a 	ret
   283a8:	0005883a 	mov	r2,zero
   283ac:	003fec06 	br	28360 <__alt_data_end+0xfffe8f60>
   283b0:	10800044 	addi	r2,r2,1
   283b4:	f800283a 	ret

000283b8 <__lo0bits>:
   283b8:	20c00017 	ldw	r3,0(r4)
   283bc:	188001cc 	andi	r2,r3,7
   283c0:	10000826 	beq	r2,zero,283e4 <__lo0bits+0x2c>
   283c4:	1880004c 	andi	r2,r3,1
   283c8:	1000211e 	bne	r2,zero,28450 <__lo0bits+0x98>
   283cc:	1880008c 	andi	r2,r3,2
   283d0:	1000211e 	bne	r2,zero,28458 <__lo0bits+0xa0>
   283d4:	1806d0ba 	srli	r3,r3,2
   283d8:	00800084 	movi	r2,2
   283dc:	20c00015 	stw	r3,0(r4)
   283e0:	f800283a 	ret
   283e4:	18bfffcc 	andi	r2,r3,65535
   283e8:	10001326 	beq	r2,zero,28438 <__lo0bits+0x80>
   283ec:	0005883a 	mov	r2,zero
   283f0:	19403fcc 	andi	r5,r3,255
   283f4:	2800021e 	bne	r5,zero,28400 <__lo0bits+0x48>
   283f8:	1806d23a 	srli	r3,r3,8
   283fc:	10800204 	addi	r2,r2,8
   28400:	194003cc 	andi	r5,r3,15
   28404:	2800021e 	bne	r5,zero,28410 <__lo0bits+0x58>
   28408:	1806d13a 	srli	r3,r3,4
   2840c:	10800104 	addi	r2,r2,4
   28410:	194000cc 	andi	r5,r3,3
   28414:	2800021e 	bne	r5,zero,28420 <__lo0bits+0x68>
   28418:	1806d0ba 	srli	r3,r3,2
   2841c:	10800084 	addi	r2,r2,2
   28420:	1940004c 	andi	r5,r3,1
   28424:	2800081e 	bne	r5,zero,28448 <__lo0bits+0x90>
   28428:	1806d07a 	srli	r3,r3,1
   2842c:	1800051e 	bne	r3,zero,28444 <__lo0bits+0x8c>
   28430:	00800804 	movi	r2,32
   28434:	f800283a 	ret
   28438:	1806d43a 	srli	r3,r3,16
   2843c:	00800404 	movi	r2,16
   28440:	003feb06 	br	283f0 <__alt_data_end+0xfffe8ff0>
   28444:	10800044 	addi	r2,r2,1
   28448:	20c00015 	stw	r3,0(r4)
   2844c:	f800283a 	ret
   28450:	0005883a 	mov	r2,zero
   28454:	f800283a 	ret
   28458:	1806d07a 	srli	r3,r3,1
   2845c:	00800044 	movi	r2,1
   28460:	20c00015 	stw	r3,0(r4)
   28464:	f800283a 	ret

00028468 <__i2b>:
   28468:	defffd04 	addi	sp,sp,-12
   2846c:	dc000015 	stw	r16,0(sp)
   28470:	04000044 	movi	r16,1
   28474:	dc400115 	stw	r17,4(sp)
   28478:	2823883a 	mov	r17,r5
   2847c:	800b883a 	mov	r5,r16
   28480:	dfc00215 	stw	ra,8(sp)
   28484:	00280680 	call	28068 <_Balloc>
   28488:	14400515 	stw	r17,20(r2)
   2848c:	14000415 	stw	r16,16(r2)
   28490:	dfc00217 	ldw	ra,8(sp)
   28494:	dc400117 	ldw	r17,4(sp)
   28498:	dc000017 	ldw	r16,0(sp)
   2849c:	dec00304 	addi	sp,sp,12
   284a0:	f800283a 	ret

000284a4 <__multiply>:
   284a4:	defffa04 	addi	sp,sp,-24
   284a8:	dcc00315 	stw	r19,12(sp)
   284ac:	dc800215 	stw	r18,8(sp)
   284b0:	2cc00417 	ldw	r19,16(r5)
   284b4:	34800417 	ldw	r18,16(r6)
   284b8:	dd000415 	stw	r20,16(sp)
   284bc:	dc400115 	stw	r17,4(sp)
   284c0:	dfc00515 	stw	ra,20(sp)
   284c4:	dc000015 	stw	r16,0(sp)
   284c8:	2829883a 	mov	r20,r5
   284cc:	3023883a 	mov	r17,r6
   284d0:	9c807016 	blt	r19,r18,28694 <__multiply+0x1f0>
   284d4:	9005883a 	mov	r2,r18
   284d8:	9825883a 	mov	r18,r19
   284dc:	1027883a 	mov	r19,r2
   284e0:	a0800217 	ldw	r2,8(r20)
   284e4:	94e1883a 	add	r16,r18,r19
   284e8:	a1400117 	ldw	r5,4(r20)
   284ec:	1400010e 	bge	r2,r16,284f4 <__multiply+0x50>
   284f0:	29400044 	addi	r5,r5,1
   284f4:	00280680 	call	28068 <_Balloc>
   284f8:	8417883a 	add	r11,r16,r16
   284fc:	13000504 	addi	r12,r2,20
   28500:	5ad7883a 	add	r11,r11,r11
   28504:	62d7883a 	add	r11,r12,r11
   28508:	6007883a 	mov	r3,r12
   2850c:	62c0032e 	bgeu	r12,r11,2851c <__multiply+0x78>
   28510:	18000015 	stw	zero,0(r3)
   28514:	18c00104 	addi	r3,r3,4
   28518:	1afffd36 	bltu	r3,r11,28510 <__alt_data_end+0xfffe9110>
   2851c:	9ce7883a 	add	r19,r19,r19
   28520:	94a5883a 	add	r18,r18,r18
   28524:	89800504 	addi	r6,r17,20
   28528:	9ce7883a 	add	r19,r19,r19
   2852c:	a3800504 	addi	r14,r20,20
   28530:	94a5883a 	add	r18,r18,r18
   28534:	34db883a 	add	r13,r6,r19
   28538:	7495883a 	add	r10,r14,r18
   2853c:	3340422e 	bgeu	r6,r13,28648 <__multiply+0x1a4>
   28540:	34400017 	ldw	r17,0(r6)
   28544:	8cbfffcc 	andi	r18,r17,65535
   28548:	90001b26 	beq	r18,zero,285b8 <__multiply+0x114>
   2854c:	6013883a 	mov	r9,r12
   28550:	7023883a 	mov	r17,r14
   28554:	0011883a 	mov	r8,zero
   28558:	88c00017 	ldw	r3,0(r17)
   2855c:	4bc00017 	ldw	r15,0(r9)
   28560:	8c400104 	addi	r17,r17,4
   28564:	19ffffcc 	andi	r7,r3,65535
   28568:	3c8f383a 	mul	r7,r7,r18
   2856c:	1808d43a 	srli	r4,r3,16
   28570:	797fffcc 	andi	r5,r15,65535
   28574:	29cb883a 	add	r5,r5,r7
   28578:	2a0b883a 	add	r5,r5,r8
   2857c:	2489383a 	mul	r4,r4,r18
   28580:	7806d43a 	srli	r3,r15,16
   28584:	2810d43a 	srli	r8,r5,16
   28588:	297fffcc 	andi	r5,r5,65535
   2858c:	1907883a 	add	r3,r3,r4
   28590:	1a07883a 	add	r3,r3,r8
   28594:	1808943a 	slli	r4,r3,16
   28598:	480f883a 	mov	r7,r9
   2859c:	1810d43a 	srli	r8,r3,16
   285a0:	214ab03a 	or	r5,r4,r5
   285a4:	49400015 	stw	r5,0(r9)
   285a8:	4a400104 	addi	r9,r9,4
   285ac:	8abfea36 	bltu	r17,r10,28558 <__alt_data_end+0xfffe9158>
   285b0:	3a000115 	stw	r8,4(r7)
   285b4:	34400017 	ldw	r17,0(r6)
   285b8:	8822d43a 	srli	r17,r17,16
   285bc:	88001f26 	beq	r17,zero,2863c <__multiply+0x198>
   285c0:	60c00017 	ldw	r3,0(r12)
   285c4:	7013883a 	mov	r9,r14
   285c8:	601f883a 	mov	r15,r12
   285cc:	1811883a 	mov	r8,r3
   285d0:	6027883a 	mov	r19,r12
   285d4:	000f883a 	mov	r7,zero
   285d8:	00000106 	br	285e0 <__multiply+0x13c>
   285dc:	9027883a 	mov	r19,r18
   285e0:	4940000b 	ldhu	r5,0(r9)
   285e4:	4010d43a 	srli	r8,r8,16
   285e8:	193fffcc 	andi	r4,r3,65535
   285ec:	2c4b383a 	mul	r5,r5,r17
   285f0:	7bc00104 	addi	r15,r15,4
   285f4:	4a400104 	addi	r9,r9,4
   285f8:	2a0b883a 	add	r5,r5,r8
   285fc:	29cb883a 	add	r5,r5,r7
   28600:	2806943a 	slli	r3,r5,16
   28604:	9c800104 	addi	r18,r19,4
   28608:	280ad43a 	srli	r5,r5,16
   2860c:	1908b03a 	or	r4,r3,r4
   28610:	793fff15 	stw	r4,-4(r15)
   28614:	48ffff17 	ldw	r3,-4(r9)
   28618:	92000017 	ldw	r8,0(r18)
   2861c:	1806d43a 	srli	r3,r3,16
   28620:	413fffcc 	andi	r4,r8,65535
   28624:	1c47383a 	mul	r3,r3,r17
   28628:	1907883a 	add	r3,r3,r4
   2862c:	1947883a 	add	r3,r3,r5
   28630:	180ed43a 	srli	r7,r3,16
   28634:	4abfe936 	bltu	r9,r10,285dc <__alt_data_end+0xfffe91dc>
   28638:	98c00115 	stw	r3,4(r19)
   2863c:	31800104 	addi	r6,r6,4
   28640:	63000104 	addi	r12,r12,4
   28644:	337fbe36 	bltu	r6,r13,28540 <__alt_data_end+0xfffe9140>
   28648:	0400090e 	bge	zero,r16,28670 <__multiply+0x1cc>
   2864c:	58ffff17 	ldw	r3,-4(r11)
   28650:	5affff04 	addi	r11,r11,-4
   28654:	18000326 	beq	r3,zero,28664 <__multiply+0x1c0>
   28658:	00000506 	br	28670 <__multiply+0x1cc>
   2865c:	58c00017 	ldw	r3,0(r11)
   28660:	1800031e 	bne	r3,zero,28670 <__multiply+0x1cc>
   28664:	843fffc4 	addi	r16,r16,-1
   28668:	5affff04 	addi	r11,r11,-4
   2866c:	803ffb1e 	bne	r16,zero,2865c <__alt_data_end+0xfffe925c>
   28670:	14000415 	stw	r16,16(r2)
   28674:	dfc00517 	ldw	ra,20(sp)
   28678:	dd000417 	ldw	r20,16(sp)
   2867c:	dcc00317 	ldw	r19,12(sp)
   28680:	dc800217 	ldw	r18,8(sp)
   28684:	dc400117 	ldw	r17,4(sp)
   28688:	dc000017 	ldw	r16,0(sp)
   2868c:	dec00604 	addi	sp,sp,24
   28690:	f800283a 	ret
   28694:	3029883a 	mov	r20,r6
   28698:	2823883a 	mov	r17,r5
   2869c:	003f9006 	br	284e0 <__alt_data_end+0xfffe90e0>

000286a0 <__pow5mult>:
   286a0:	defffa04 	addi	sp,sp,-24
   286a4:	dcc00315 	stw	r19,12(sp)
   286a8:	dc800215 	stw	r18,8(sp)
   286ac:	dc000015 	stw	r16,0(sp)
   286b0:	dfc00515 	stw	ra,20(sp)
   286b4:	dd000415 	stw	r20,16(sp)
   286b8:	dc400115 	stw	r17,4(sp)
   286bc:	308000cc 	andi	r2,r6,3
   286c0:	3021883a 	mov	r16,r6
   286c4:	2027883a 	mov	r19,r4
   286c8:	2825883a 	mov	r18,r5
   286cc:	10002e1e 	bne	r2,zero,28788 <__pow5mult+0xe8>
   286d0:	8021d0ba 	srai	r16,r16,2
   286d4:	80001a26 	beq	r16,zero,28740 <__pow5mult+0xa0>
   286d8:	9c401217 	ldw	r17,72(r19)
   286dc:	8800061e 	bne	r17,zero,286f8 <__pow5mult+0x58>
   286e0:	00003406 	br	287b4 <__pow5mult+0x114>
   286e4:	8021d07a 	srai	r16,r16,1
   286e8:	80001526 	beq	r16,zero,28740 <__pow5mult+0xa0>
   286ec:	88800017 	ldw	r2,0(r17)
   286f0:	10001c26 	beq	r2,zero,28764 <__pow5mult+0xc4>
   286f4:	1023883a 	mov	r17,r2
   286f8:	80c0004c 	andi	r3,r16,1
   286fc:	183ff926 	beq	r3,zero,286e4 <__alt_data_end+0xfffe92e4>
   28700:	900b883a 	mov	r5,r18
   28704:	880d883a 	mov	r6,r17
   28708:	9809883a 	mov	r4,r19
   2870c:	00284a40 	call	284a4 <__multiply>
   28710:	90001b26 	beq	r18,zero,28780 <__pow5mult+0xe0>
   28714:	91c00117 	ldw	r7,4(r18)
   28718:	98c01317 	ldw	r3,76(r19)
   2871c:	8021d07a 	srai	r16,r16,1
   28720:	39cf883a 	add	r7,r7,r7
   28724:	39cf883a 	add	r7,r7,r7
   28728:	19c7883a 	add	r3,r3,r7
   2872c:	19000017 	ldw	r4,0(r3)
   28730:	91000015 	stw	r4,0(r18)
   28734:	1c800015 	stw	r18,0(r3)
   28738:	1025883a 	mov	r18,r2
   2873c:	803feb1e 	bne	r16,zero,286ec <__alt_data_end+0xfffe92ec>
   28740:	9005883a 	mov	r2,r18
   28744:	dfc00517 	ldw	ra,20(sp)
   28748:	dd000417 	ldw	r20,16(sp)
   2874c:	dcc00317 	ldw	r19,12(sp)
   28750:	dc800217 	ldw	r18,8(sp)
   28754:	dc400117 	ldw	r17,4(sp)
   28758:	dc000017 	ldw	r16,0(sp)
   2875c:	dec00604 	addi	sp,sp,24
   28760:	f800283a 	ret
   28764:	9809883a 	mov	r4,r19
   28768:	880b883a 	mov	r5,r17
   2876c:	880d883a 	mov	r6,r17
   28770:	00284a40 	call	284a4 <__multiply>
   28774:	88800015 	stw	r2,0(r17)
   28778:	10000015 	stw	zero,0(r2)
   2877c:	003fdd06 	br	286f4 <__alt_data_end+0xfffe92f4>
   28780:	1025883a 	mov	r18,r2
   28784:	003fd706 	br	286e4 <__alt_data_end+0xfffe92e4>
   28788:	10bfffc4 	addi	r2,r2,-1
   2878c:	1085883a 	add	r2,r2,r2
   28790:	00c000f4 	movhi	r3,3
   28794:	18ffba04 	addi	r3,r3,-280
   28798:	1085883a 	add	r2,r2,r2
   2879c:	1885883a 	add	r2,r3,r2
   287a0:	11800017 	ldw	r6,0(r2)
   287a4:	000f883a 	mov	r7,zero
   287a8:	00281380 	call	28138 <__multadd>
   287ac:	1025883a 	mov	r18,r2
   287b0:	003fc706 	br	286d0 <__alt_data_end+0xfffe92d0>
   287b4:	05000044 	movi	r20,1
   287b8:	9809883a 	mov	r4,r19
   287bc:	a00b883a 	mov	r5,r20
   287c0:	00280680 	call	28068 <_Balloc>
   287c4:	1023883a 	mov	r17,r2
   287c8:	00809c44 	movi	r2,625
   287cc:	88800515 	stw	r2,20(r17)
   287d0:	8d000415 	stw	r20,16(r17)
   287d4:	9c401215 	stw	r17,72(r19)
   287d8:	88000015 	stw	zero,0(r17)
   287dc:	003fc606 	br	286f8 <__alt_data_end+0xfffe92f8>

000287e0 <__lshift>:
   287e0:	defff904 	addi	sp,sp,-28
   287e4:	dd000415 	stw	r20,16(sp)
   287e8:	dcc00315 	stw	r19,12(sp)
   287ec:	3029d17a 	srai	r20,r6,5
   287f0:	2cc00417 	ldw	r19,16(r5)
   287f4:	28800217 	ldw	r2,8(r5)
   287f8:	dd400515 	stw	r21,20(sp)
   287fc:	a4e7883a 	add	r19,r20,r19
   28800:	dc800215 	stw	r18,8(sp)
   28804:	dc400115 	stw	r17,4(sp)
   28808:	dc000015 	stw	r16,0(sp)
   2880c:	dfc00615 	stw	ra,24(sp)
   28810:	9c000044 	addi	r16,r19,1
   28814:	2823883a 	mov	r17,r5
   28818:	302b883a 	mov	r21,r6
   2881c:	2025883a 	mov	r18,r4
   28820:	29400117 	ldw	r5,4(r5)
   28824:	1400030e 	bge	r2,r16,28834 <__lshift+0x54>
   28828:	1085883a 	add	r2,r2,r2
   2882c:	29400044 	addi	r5,r5,1
   28830:	143ffd16 	blt	r2,r16,28828 <__alt_data_end+0xfffe9428>
   28834:	9009883a 	mov	r4,r18
   28838:	00280680 	call	28068 <_Balloc>
   2883c:	11c00504 	addi	r7,r2,20
   28840:	0500090e 	bge	zero,r20,28868 <__lshift+0x88>
   28844:	3811883a 	mov	r8,r7
   28848:	0007883a 	mov	r3,zero
   2884c:	40000015 	stw	zero,0(r8)
   28850:	18c00044 	addi	r3,r3,1
   28854:	42000104 	addi	r8,r8,4
   28858:	1d3ffc1e 	bne	r3,r20,2884c <__alt_data_end+0xfffe944c>
   2885c:	18c7883a 	add	r3,r3,r3
   28860:	18c7883a 	add	r3,r3,r3
   28864:	38cf883a 	add	r7,r7,r3
   28868:	89000417 	ldw	r4,16(r17)
   2886c:	88c00504 	addi	r3,r17,20
   28870:	a98007cc 	andi	r6,r21,31
   28874:	2109883a 	add	r4,r4,r4
   28878:	2109883a 	add	r4,r4,r4
   2887c:	1909883a 	add	r4,r3,r4
   28880:	30002326 	beq	r6,zero,28910 <__lshift+0x130>
   28884:	01400804 	movi	r5,32
   28888:	298bc83a 	sub	r5,r5,r6
   2888c:	0013883a 	mov	r9,zero
   28890:	1a000017 	ldw	r8,0(r3)
   28894:	3815883a 	mov	r10,r7
   28898:	39c00104 	addi	r7,r7,4
   2889c:	4190983a 	sll	r8,r8,r6
   288a0:	18c00104 	addi	r3,r3,4
   288a4:	4a10b03a 	or	r8,r9,r8
   288a8:	3a3fff15 	stw	r8,-4(r7)
   288ac:	1a3fff17 	ldw	r8,-4(r3)
   288b0:	4152d83a 	srl	r9,r8,r5
   288b4:	193ff636 	bltu	r3,r4,28890 <__alt_data_end+0xfffe9490>
   288b8:	52400115 	stw	r9,4(r10)
   288bc:	48000126 	beq	r9,zero,288c4 <__lshift+0xe4>
   288c0:	9c000084 	addi	r16,r19,2
   288c4:	89000117 	ldw	r4,4(r17)
   288c8:	90c01317 	ldw	r3,76(r18)
   288cc:	843fffc4 	addi	r16,r16,-1
   288d0:	2109883a 	add	r4,r4,r4
   288d4:	2109883a 	add	r4,r4,r4
   288d8:	1907883a 	add	r3,r3,r4
   288dc:	19000017 	ldw	r4,0(r3)
   288e0:	14000415 	stw	r16,16(r2)
   288e4:	89000015 	stw	r4,0(r17)
   288e8:	1c400015 	stw	r17,0(r3)
   288ec:	dfc00617 	ldw	ra,24(sp)
   288f0:	dd400517 	ldw	r21,20(sp)
   288f4:	dd000417 	ldw	r20,16(sp)
   288f8:	dcc00317 	ldw	r19,12(sp)
   288fc:	dc800217 	ldw	r18,8(sp)
   28900:	dc400117 	ldw	r17,4(sp)
   28904:	dc000017 	ldw	r16,0(sp)
   28908:	dec00704 	addi	sp,sp,28
   2890c:	f800283a 	ret
   28910:	19400017 	ldw	r5,0(r3)
   28914:	39c00104 	addi	r7,r7,4
   28918:	18c00104 	addi	r3,r3,4
   2891c:	397fff15 	stw	r5,-4(r7)
   28920:	193ffb36 	bltu	r3,r4,28910 <__alt_data_end+0xfffe9510>
   28924:	003fe706 	br	288c4 <__alt_data_end+0xfffe94c4>

00028928 <__mcmp>:
   28928:	20800417 	ldw	r2,16(r4)
   2892c:	28c00417 	ldw	r3,16(r5)
   28930:	10c5c83a 	sub	r2,r2,r3
   28934:	1000111e 	bne	r2,zero,2897c <__mcmp+0x54>
   28938:	18c7883a 	add	r3,r3,r3
   2893c:	18c7883a 	add	r3,r3,r3
   28940:	21000504 	addi	r4,r4,20
   28944:	29400504 	addi	r5,r5,20
   28948:	20c5883a 	add	r2,r4,r3
   2894c:	28cb883a 	add	r5,r5,r3
   28950:	00000106 	br	28958 <__mcmp+0x30>
   28954:	20800a2e 	bgeu	r4,r2,28980 <__mcmp+0x58>
   28958:	10bfff04 	addi	r2,r2,-4
   2895c:	297fff04 	addi	r5,r5,-4
   28960:	11800017 	ldw	r6,0(r2)
   28964:	28c00017 	ldw	r3,0(r5)
   28968:	30fffa26 	beq	r6,r3,28954 <__alt_data_end+0xfffe9554>
   2896c:	30c00236 	bltu	r6,r3,28978 <__mcmp+0x50>
   28970:	00800044 	movi	r2,1
   28974:	f800283a 	ret
   28978:	00bfffc4 	movi	r2,-1
   2897c:	f800283a 	ret
   28980:	0005883a 	mov	r2,zero
   28984:	f800283a 	ret

00028988 <__mdiff>:
   28988:	defffb04 	addi	sp,sp,-20
   2898c:	dc000015 	stw	r16,0(sp)
   28990:	2821883a 	mov	r16,r5
   28994:	dcc00315 	stw	r19,12(sp)
   28998:	300b883a 	mov	r5,r6
   2899c:	2027883a 	mov	r19,r4
   289a0:	8009883a 	mov	r4,r16
   289a4:	dc800215 	stw	r18,8(sp)
   289a8:	dfc00415 	stw	ra,16(sp)
   289ac:	dc400115 	stw	r17,4(sp)
   289b0:	3025883a 	mov	r18,r6
   289b4:	00289280 	call	28928 <__mcmp>
   289b8:	10005226 	beq	r2,zero,28b04 <__mdiff+0x17c>
   289bc:	10004c16 	blt	r2,zero,28af0 <__mdiff+0x168>
   289c0:	0023883a 	mov	r17,zero
   289c4:	81400117 	ldw	r5,4(r16)
   289c8:	9809883a 	mov	r4,r19
   289cc:	00280680 	call	28068 <_Balloc>
   289d0:	83400417 	ldw	r13,16(r16)
   289d4:	93800417 	ldw	r14,16(r18)
   289d8:	81000504 	addi	r4,r16,20
   289dc:	6b59883a 	add	r12,r13,r13
   289e0:	739d883a 	add	r14,r14,r14
   289e4:	6319883a 	add	r12,r12,r12
   289e8:	91800504 	addi	r6,r18,20
   289ec:	739d883a 	add	r14,r14,r14
   289f0:	14400315 	stw	r17,12(r2)
   289f4:	2319883a 	add	r12,r4,r12
   289f8:	339d883a 	add	r14,r6,r14
   289fc:	12400504 	addi	r9,r2,20
   28a00:	0007883a 	mov	r3,zero
   28a04:	22000017 	ldw	r8,0(r4)
   28a08:	32800017 	ldw	r10,0(r6)
   28a0c:	4ac00104 	addi	r11,r9,4
   28a10:	41ffffcc 	andi	r7,r8,65535
   28a14:	38c7883a 	add	r3,r7,r3
   28a18:	51ffffcc 	andi	r7,r10,65535
   28a1c:	19cfc83a 	sub	r7,r3,r7
   28a20:	4010d43a 	srli	r8,r8,16
   28a24:	5014d43a 	srli	r10,r10,16
   28a28:	3807d43a 	srai	r3,r7,16
   28a2c:	39ffffcc 	andi	r7,r7,65535
   28a30:	4291c83a 	sub	r8,r8,r10
   28a34:	40c7883a 	add	r3,r8,r3
   28a38:	1810943a 	slli	r8,r3,16
   28a3c:	31800104 	addi	r6,r6,4
   28a40:	21000104 	addi	r4,r4,4
   28a44:	41ceb03a 	or	r7,r8,r7
   28a48:	49c00015 	stw	r7,0(r9)
   28a4c:	1807d43a 	srai	r3,r3,16
   28a50:	580b883a 	mov	r5,r11
   28a54:	5813883a 	mov	r9,r11
   28a58:	33bfea36 	bltu	r6,r14,28a04 <__alt_data_end+0xfffe9604>
   28a5c:	2011883a 	mov	r8,r4
   28a60:	2300152e 	bgeu	r4,r12,28ab8 <__mdiff+0x130>
   28a64:	21400017 	ldw	r5,0(r4)
   28a68:	4a400104 	addi	r9,r9,4
   28a6c:	21000104 	addi	r4,r4,4
   28a70:	29ffffcc 	andi	r7,r5,65535
   28a74:	38c7883a 	add	r3,r7,r3
   28a78:	280ad43a 	srli	r5,r5,16
   28a7c:	180dd43a 	srai	r6,r3,16
   28a80:	19ffffcc 	andi	r7,r3,65535
   28a84:	3147883a 	add	r3,r6,r5
   28a88:	180a943a 	slli	r5,r3,16
   28a8c:	1807d43a 	srai	r3,r3,16
   28a90:	29ceb03a 	or	r7,r5,r7
   28a94:	49ffff15 	stw	r7,-4(r9)
   28a98:	233ff236 	bltu	r4,r12,28a64 <__alt_data_end+0xfffe9664>
   28a9c:	0206303a 	nor	r3,zero,r8
   28aa0:	1b07883a 	add	r3,r3,r12
   28aa4:	1806d0ba 	srli	r3,r3,2
   28aa8:	18c00044 	addi	r3,r3,1
   28aac:	18c7883a 	add	r3,r3,r3
   28ab0:	18c7883a 	add	r3,r3,r3
   28ab4:	58cb883a 	add	r5,r11,r3
   28ab8:	28ffff04 	addi	r3,r5,-4
   28abc:	3800041e 	bne	r7,zero,28ad0 <__mdiff+0x148>
   28ac0:	18ffff04 	addi	r3,r3,-4
   28ac4:	19000017 	ldw	r4,0(r3)
   28ac8:	6b7fffc4 	addi	r13,r13,-1
   28acc:	203ffc26 	beq	r4,zero,28ac0 <__alt_data_end+0xfffe96c0>
   28ad0:	13400415 	stw	r13,16(r2)
   28ad4:	dfc00417 	ldw	ra,16(sp)
   28ad8:	dcc00317 	ldw	r19,12(sp)
   28adc:	dc800217 	ldw	r18,8(sp)
   28ae0:	dc400117 	ldw	r17,4(sp)
   28ae4:	dc000017 	ldw	r16,0(sp)
   28ae8:	dec00504 	addi	sp,sp,20
   28aec:	f800283a 	ret
   28af0:	8005883a 	mov	r2,r16
   28af4:	04400044 	movi	r17,1
   28af8:	9021883a 	mov	r16,r18
   28afc:	1025883a 	mov	r18,r2
   28b00:	003fb006 	br	289c4 <__alt_data_end+0xfffe95c4>
   28b04:	9809883a 	mov	r4,r19
   28b08:	000b883a 	mov	r5,zero
   28b0c:	00280680 	call	28068 <_Balloc>
   28b10:	00c00044 	movi	r3,1
   28b14:	10c00415 	stw	r3,16(r2)
   28b18:	10000515 	stw	zero,20(r2)
   28b1c:	003fed06 	br	28ad4 <__alt_data_end+0xfffe96d4>

00028b20 <__ulp>:
   28b20:	295ffc2c 	andhi	r5,r5,32752
   28b24:	00bf3034 	movhi	r2,64704
   28b28:	2887883a 	add	r3,r5,r2
   28b2c:	00c0020e 	bge	zero,r3,28b38 <__ulp+0x18>
   28b30:	0005883a 	mov	r2,zero
   28b34:	f800283a 	ret
   28b38:	00c7c83a 	sub	r3,zero,r3
   28b3c:	180bd53a 	srai	r5,r3,20
   28b40:	008004c4 	movi	r2,19
   28b44:	11400a0e 	bge	r2,r5,28b70 <__ulp+0x50>
   28b48:	00800c84 	movi	r2,50
   28b4c:	0007883a 	mov	r3,zero
   28b50:	11400516 	blt	r2,r5,28b68 <__ulp+0x48>
   28b54:	00800cc4 	movi	r2,51
   28b58:	114bc83a 	sub	r5,r2,r5
   28b5c:	00800044 	movi	r2,1
   28b60:	1144983a 	sll	r2,r2,r5
   28b64:	f800283a 	ret
   28b68:	00800044 	movi	r2,1
   28b6c:	f800283a 	ret
   28b70:	00800234 	movhi	r2,8
   28b74:	1147d83a 	sra	r3,r2,r5
   28b78:	0005883a 	mov	r2,zero
   28b7c:	f800283a 	ret

00028b80 <__b2d>:
   28b80:	defffa04 	addi	sp,sp,-24
   28b84:	dc000015 	stw	r16,0(sp)
   28b88:	24000417 	ldw	r16,16(r4)
   28b8c:	dc400115 	stw	r17,4(sp)
   28b90:	24400504 	addi	r17,r4,20
   28b94:	8421883a 	add	r16,r16,r16
   28b98:	8421883a 	add	r16,r16,r16
   28b9c:	8c21883a 	add	r16,r17,r16
   28ba0:	dc800215 	stw	r18,8(sp)
   28ba4:	84bfff17 	ldw	r18,-4(r16)
   28ba8:	dd000415 	stw	r20,16(sp)
   28bac:	dcc00315 	stw	r19,12(sp)
   28bb0:	9009883a 	mov	r4,r18
   28bb4:	2829883a 	mov	r20,r5
   28bb8:	dfc00515 	stw	ra,20(sp)
   28bbc:	00283500 	call	28350 <__hi0bits>
   28bc0:	00c00804 	movi	r3,32
   28bc4:	1887c83a 	sub	r3,r3,r2
   28bc8:	a0c00015 	stw	r3,0(r20)
   28bcc:	00c00284 	movi	r3,10
   28bd0:	84ffff04 	addi	r19,r16,-4
   28bd4:	18801216 	blt	r3,r2,28c20 <__b2d+0xa0>
   28bd8:	014002c4 	movi	r5,11
   28bdc:	2889c83a 	sub	r4,r5,r2
   28be0:	9106d83a 	srl	r3,r18,r4
   28be4:	18cffc34 	orhi	r3,r3,16368
   28be8:	8cc0282e 	bgeu	r17,r19,28c8c <__b2d+0x10c>
   28bec:	817ffe17 	ldw	r5,-8(r16)
   28bf0:	290ad83a 	srl	r5,r5,r4
   28bf4:	10800544 	addi	r2,r2,21
   28bf8:	9084983a 	sll	r2,r18,r2
   28bfc:	2884b03a 	or	r2,r5,r2
   28c00:	dfc00517 	ldw	ra,20(sp)
   28c04:	dd000417 	ldw	r20,16(sp)
   28c08:	dcc00317 	ldw	r19,12(sp)
   28c0c:	dc800217 	ldw	r18,8(sp)
   28c10:	dc400117 	ldw	r17,4(sp)
   28c14:	dc000017 	ldw	r16,0(sp)
   28c18:	dec00604 	addi	sp,sp,24
   28c1c:	f800283a 	ret
   28c20:	113ffd44 	addi	r4,r2,-11
   28c24:	8cc00f2e 	bgeu	r17,r19,28c64 <__b2d+0xe4>
   28c28:	81bffe04 	addi	r6,r16,-8
   28c2c:	817ffe17 	ldw	r5,-8(r16)
   28c30:	20001326 	beq	r4,zero,28c80 <__b2d+0x100>
   28c34:	00c00ac4 	movi	r3,43
   28c38:	1885c83a 	sub	r2,r3,r2
   28c3c:	2886d83a 	srl	r3,r5,r2
   28c40:	9124983a 	sll	r18,r18,r4
   28c44:	90e4b03a 	or	r18,r18,r3
   28c48:	90cffc34 	orhi	r3,r18,16368
   28c4c:	8980112e 	bgeu	r17,r6,28c94 <__b2d+0x114>
   28c50:	81bffd17 	ldw	r6,-12(r16)
   28c54:	308cd83a 	srl	r6,r6,r2
   28c58:	2904983a 	sll	r2,r5,r4
   28c5c:	1184b03a 	or	r2,r2,r6
   28c60:	003fe706 	br	28c00 <__alt_data_end+0xfffe9800>
   28c64:	20000526 	beq	r4,zero,28c7c <__b2d+0xfc>
   28c68:	9124983a 	sll	r18,r18,r4
   28c6c:	000d883a 	mov	r6,zero
   28c70:	000b883a 	mov	r5,zero
   28c74:	90cffc34 	orhi	r3,r18,16368
   28c78:	003ff706 	br	28c58 <__alt_data_end+0xfffe9858>
   28c7c:	000b883a 	mov	r5,zero
   28c80:	90cffc34 	orhi	r3,r18,16368
   28c84:	2805883a 	mov	r2,r5
   28c88:	003fdd06 	br	28c00 <__alt_data_end+0xfffe9800>
   28c8c:	000b883a 	mov	r5,zero
   28c90:	003fd806 	br	28bf4 <__alt_data_end+0xfffe97f4>
   28c94:	000d883a 	mov	r6,zero
   28c98:	003fef06 	br	28c58 <__alt_data_end+0xfffe9858>

00028c9c <__d2b>:
   28c9c:	defff704 	addi	sp,sp,-36
   28ca0:	dc000215 	stw	r16,8(sp)
   28ca4:	3021883a 	mov	r16,r6
   28ca8:	dc400315 	stw	r17,12(sp)
   28cac:	8022907a 	slli	r17,r16,1
   28cb0:	dd400715 	stw	r21,28(sp)
   28cb4:	282b883a 	mov	r21,r5
   28cb8:	01400044 	movi	r5,1
   28cbc:	dd000615 	stw	r20,24(sp)
   28cc0:	dcc00515 	stw	r19,20(sp)
   28cc4:	dc800415 	stw	r18,16(sp)
   28cc8:	dfc00815 	stw	ra,32(sp)
   28ccc:	3829883a 	mov	r20,r7
   28cd0:	dc800917 	ldw	r18,36(sp)
   28cd4:	8822d57a 	srli	r17,r17,21
   28cd8:	00280680 	call	28068 <_Balloc>
   28cdc:	1027883a 	mov	r19,r2
   28ce0:	00800434 	movhi	r2,16
   28ce4:	10bfffc4 	addi	r2,r2,-1
   28ce8:	808c703a 	and	r6,r16,r2
   28cec:	88000126 	beq	r17,zero,28cf4 <__d2b+0x58>
   28cf0:	31800434 	orhi	r6,r6,16
   28cf4:	d9800015 	stw	r6,0(sp)
   28cf8:	a8001f26 	beq	r21,zero,28d78 <__d2b+0xdc>
   28cfc:	d9000104 	addi	r4,sp,4
   28d00:	dd400115 	stw	r21,4(sp)
   28d04:	00283b80 	call	283b8 <__lo0bits>
   28d08:	d8c00017 	ldw	r3,0(sp)
   28d0c:	1000291e 	bne	r2,zero,28db4 <__d2b+0x118>
   28d10:	d9000117 	ldw	r4,4(sp)
   28d14:	99000515 	stw	r4,20(r19)
   28d18:	1820c03a 	cmpne	r16,r3,zero
   28d1c:	84000044 	addi	r16,r16,1
   28d20:	98c00615 	stw	r3,24(r19)
   28d24:	9c000415 	stw	r16,16(r19)
   28d28:	88001b1e 	bne	r17,zero,28d98 <__d2b+0xfc>
   28d2c:	800690ba 	slli	r3,r16,2
   28d30:	10bef384 	addi	r2,r2,-1074
   28d34:	a0800015 	stw	r2,0(r20)
   28d38:	98c5883a 	add	r2,r19,r3
   28d3c:	11000417 	ldw	r4,16(r2)
   28d40:	8020917a 	slli	r16,r16,5
   28d44:	00283500 	call	28350 <__hi0bits>
   28d48:	8085c83a 	sub	r2,r16,r2
   28d4c:	90800015 	stw	r2,0(r18)
   28d50:	9805883a 	mov	r2,r19
   28d54:	dfc00817 	ldw	ra,32(sp)
   28d58:	dd400717 	ldw	r21,28(sp)
   28d5c:	dd000617 	ldw	r20,24(sp)
   28d60:	dcc00517 	ldw	r19,20(sp)
   28d64:	dc800417 	ldw	r18,16(sp)
   28d68:	dc400317 	ldw	r17,12(sp)
   28d6c:	dc000217 	ldw	r16,8(sp)
   28d70:	dec00904 	addi	sp,sp,36
   28d74:	f800283a 	ret
   28d78:	d809883a 	mov	r4,sp
   28d7c:	00283b80 	call	283b8 <__lo0bits>
   28d80:	d8c00017 	ldw	r3,0(sp)
   28d84:	04000044 	movi	r16,1
   28d88:	9c000415 	stw	r16,16(r19)
   28d8c:	98c00515 	stw	r3,20(r19)
   28d90:	10800804 	addi	r2,r2,32
   28d94:	883fe526 	beq	r17,zero,28d2c <__alt_data_end+0xfffe992c>
   28d98:	8c7ef344 	addi	r17,r17,-1075
   28d9c:	88a3883a 	add	r17,r17,r2
   28da0:	00c00d44 	movi	r3,53
   28da4:	a4400015 	stw	r17,0(r20)
   28da8:	1885c83a 	sub	r2,r3,r2
   28dac:	90800015 	stw	r2,0(r18)
   28db0:	003fe706 	br	28d50 <__alt_data_end+0xfffe9950>
   28db4:	01000804 	movi	r4,32
   28db8:	2089c83a 	sub	r4,r4,r2
   28dbc:	1908983a 	sll	r4,r3,r4
   28dc0:	d9400117 	ldw	r5,4(sp)
   28dc4:	1886d83a 	srl	r3,r3,r2
   28dc8:	2148b03a 	or	r4,r4,r5
   28dcc:	99000515 	stw	r4,20(r19)
   28dd0:	d8c00015 	stw	r3,0(sp)
   28dd4:	003fd006 	br	28d18 <__alt_data_end+0xfffe9918>

00028dd8 <__ratio>:
   28dd8:	defff904 	addi	sp,sp,-28
   28ddc:	dc400315 	stw	r17,12(sp)
   28de0:	2823883a 	mov	r17,r5
   28de4:	d9400104 	addi	r5,sp,4
   28de8:	dfc00615 	stw	ra,24(sp)
   28dec:	dcc00515 	stw	r19,20(sp)
   28df0:	dc800415 	stw	r18,16(sp)
   28df4:	2027883a 	mov	r19,r4
   28df8:	dc000215 	stw	r16,8(sp)
   28dfc:	0028b800 	call	28b80 <__b2d>
   28e00:	8809883a 	mov	r4,r17
   28e04:	d80b883a 	mov	r5,sp
   28e08:	1025883a 	mov	r18,r2
   28e0c:	1821883a 	mov	r16,r3
   28e10:	0028b800 	call	28b80 <__b2d>
   28e14:	8a400417 	ldw	r9,16(r17)
   28e18:	9a000417 	ldw	r8,16(r19)
   28e1c:	100d883a 	mov	r6,r2
   28e20:	d8800017 	ldw	r2,0(sp)
   28e24:	4251c83a 	sub	r8,r8,r9
   28e28:	4012917a 	slli	r9,r8,5
   28e2c:	da000117 	ldw	r8,4(sp)
   28e30:	4091c83a 	sub	r8,r8,r2
   28e34:	4251883a 	add	r8,r8,r9
   28e38:	02000d0e 	bge	zero,r8,28e70 <__ratio+0x98>
   28e3c:	4010953a 	slli	r8,r8,20
   28e40:	4421883a 	add	r16,r8,r16
   28e44:	9009883a 	mov	r4,r18
   28e48:	800b883a 	mov	r5,r16
   28e4c:	180f883a 	mov	r7,r3
   28e50:	00207a40 	call	207a4 <__divdf3>
   28e54:	dfc00617 	ldw	ra,24(sp)
   28e58:	dcc00517 	ldw	r19,20(sp)
   28e5c:	dc800417 	ldw	r18,16(sp)
   28e60:	dc400317 	ldw	r17,12(sp)
   28e64:	dc000217 	ldw	r16,8(sp)
   28e68:	dec00704 	addi	sp,sp,28
   28e6c:	f800283a 	ret
   28e70:	4010953a 	slli	r8,r8,20
   28e74:	1a07c83a 	sub	r3,r3,r8
   28e78:	003ff206 	br	28e44 <__alt_data_end+0xfffe9a44>

00028e7c <_mprec_log10>:
   28e7c:	defffe04 	addi	sp,sp,-8
   28e80:	dc000015 	stw	r16,0(sp)
   28e84:	dfc00115 	stw	ra,4(sp)
   28e88:	008005c4 	movi	r2,23
   28e8c:	2021883a 	mov	r16,r4
   28e90:	11000d0e 	bge	r2,r4,28ec8 <_mprec_log10+0x4c>
   28e94:	0005883a 	mov	r2,zero
   28e98:	00cffc34 	movhi	r3,16368
   28e9c:	843fffc4 	addi	r16,r16,-1
   28ea0:	1009883a 	mov	r4,r2
   28ea4:	180b883a 	mov	r5,r3
   28ea8:	000d883a 	mov	r6,zero
   28eac:	01d00934 	movhi	r7,16420
   28eb0:	00210700 	call	21070 <__muldf3>
   28eb4:	803ff91e 	bne	r16,zero,28e9c <__alt_data_end+0xfffe9a9c>
   28eb8:	dfc00117 	ldw	ra,4(sp)
   28ebc:	dc000017 	ldw	r16,0(sp)
   28ec0:	dec00204 	addi	sp,sp,8
   28ec4:	f800283a 	ret
   28ec8:	202090fa 	slli	r16,r4,3
   28ecc:	008000f4 	movhi	r2,3
   28ed0:	10bfd104 	addi	r2,r2,-188
   28ed4:	1421883a 	add	r16,r2,r16
   28ed8:	80800017 	ldw	r2,0(r16)
   28edc:	80c00117 	ldw	r3,4(r16)
   28ee0:	dfc00117 	ldw	ra,4(sp)
   28ee4:	dc000017 	ldw	r16,0(sp)
   28ee8:	dec00204 	addi	sp,sp,8
   28eec:	f800283a 	ret

00028ef0 <__copybits>:
   28ef0:	297fffc4 	addi	r5,r5,-1
   28ef4:	280fd17a 	srai	r7,r5,5
   28ef8:	30c00417 	ldw	r3,16(r6)
   28efc:	30800504 	addi	r2,r6,20
   28f00:	39c00044 	addi	r7,r7,1
   28f04:	18c7883a 	add	r3,r3,r3
   28f08:	39cf883a 	add	r7,r7,r7
   28f0c:	18c7883a 	add	r3,r3,r3
   28f10:	39cf883a 	add	r7,r7,r7
   28f14:	10c7883a 	add	r3,r2,r3
   28f18:	21cf883a 	add	r7,r4,r7
   28f1c:	10c00d2e 	bgeu	r2,r3,28f54 <__copybits+0x64>
   28f20:	200b883a 	mov	r5,r4
   28f24:	12000017 	ldw	r8,0(r2)
   28f28:	29400104 	addi	r5,r5,4
   28f2c:	10800104 	addi	r2,r2,4
   28f30:	2a3fff15 	stw	r8,-4(r5)
   28f34:	10fffb36 	bltu	r2,r3,28f24 <__alt_data_end+0xfffe9b24>
   28f38:	1985c83a 	sub	r2,r3,r6
   28f3c:	10bffac4 	addi	r2,r2,-21
   28f40:	1004d0ba 	srli	r2,r2,2
   28f44:	10800044 	addi	r2,r2,1
   28f48:	1085883a 	add	r2,r2,r2
   28f4c:	1085883a 	add	r2,r2,r2
   28f50:	2089883a 	add	r4,r4,r2
   28f54:	21c0032e 	bgeu	r4,r7,28f64 <__copybits+0x74>
   28f58:	20000015 	stw	zero,0(r4)
   28f5c:	21000104 	addi	r4,r4,4
   28f60:	21fffd36 	bltu	r4,r7,28f58 <__alt_data_end+0xfffe9b58>
   28f64:	f800283a 	ret

00028f68 <__any_on>:
   28f68:	20c00417 	ldw	r3,16(r4)
   28f6c:	2805d17a 	srai	r2,r5,5
   28f70:	21000504 	addi	r4,r4,20
   28f74:	18800d0e 	bge	r3,r2,28fac <__any_on+0x44>
   28f78:	18c7883a 	add	r3,r3,r3
   28f7c:	18c7883a 	add	r3,r3,r3
   28f80:	20c7883a 	add	r3,r4,r3
   28f84:	20c0192e 	bgeu	r4,r3,28fec <__any_on+0x84>
   28f88:	18bfff17 	ldw	r2,-4(r3)
   28f8c:	18ffff04 	addi	r3,r3,-4
   28f90:	1000041e 	bne	r2,zero,28fa4 <__any_on+0x3c>
   28f94:	20c0142e 	bgeu	r4,r3,28fe8 <__any_on+0x80>
   28f98:	18ffff04 	addi	r3,r3,-4
   28f9c:	19400017 	ldw	r5,0(r3)
   28fa0:	283ffc26 	beq	r5,zero,28f94 <__alt_data_end+0xfffe9b94>
   28fa4:	00800044 	movi	r2,1
   28fa8:	f800283a 	ret
   28fac:	10c00a0e 	bge	r2,r3,28fd8 <__any_on+0x70>
   28fb0:	1085883a 	add	r2,r2,r2
   28fb4:	1085883a 	add	r2,r2,r2
   28fb8:	294007cc 	andi	r5,r5,31
   28fbc:	2087883a 	add	r3,r4,r2
   28fc0:	283ff026 	beq	r5,zero,28f84 <__alt_data_end+0xfffe9b84>
   28fc4:	19800017 	ldw	r6,0(r3)
   28fc8:	3144d83a 	srl	r2,r6,r5
   28fcc:	114a983a 	sll	r5,r2,r5
   28fd0:	29bff41e 	bne	r5,r6,28fa4 <__alt_data_end+0xfffe9ba4>
   28fd4:	003feb06 	br	28f84 <__alt_data_end+0xfffe9b84>
   28fd8:	1085883a 	add	r2,r2,r2
   28fdc:	1085883a 	add	r2,r2,r2
   28fe0:	2087883a 	add	r3,r4,r2
   28fe4:	003fe706 	br	28f84 <__alt_data_end+0xfffe9b84>
   28fe8:	f800283a 	ret
   28fec:	0005883a 	mov	r2,zero
   28ff0:	f800283a 	ret

00028ff4 <_realloc_r>:
   28ff4:	defff604 	addi	sp,sp,-40
   28ff8:	dcc00315 	stw	r19,12(sp)
   28ffc:	dc400115 	stw	r17,4(sp)
   29000:	dfc00915 	stw	ra,36(sp)
   29004:	df000815 	stw	fp,32(sp)
   29008:	ddc00715 	stw	r23,28(sp)
   2900c:	dd800615 	stw	r22,24(sp)
   29010:	dd400515 	stw	r21,20(sp)
   29014:	dd000415 	stw	r20,16(sp)
   29018:	dc800215 	stw	r18,8(sp)
   2901c:	dc000015 	stw	r16,0(sp)
   29020:	2827883a 	mov	r19,r5
   29024:	3023883a 	mov	r17,r6
   29028:	2800bf26 	beq	r5,zero,29328 <_realloc_r+0x334>
   2902c:	2025883a 	mov	r18,r4
   29030:	002d36c0 	call	2d36c <__malloc_lock>
   29034:	98ffff17 	ldw	r3,-4(r19)
   29038:	01bfff04 	movi	r6,-4
   2903c:	890002c4 	addi	r4,r17,11
   29040:	01c00584 	movi	r7,22
   29044:	9d7ffe04 	addi	r21,r19,-8
   29048:	19a0703a 	and	r16,r3,r6
   2904c:	39003f2e 	bgeu	r7,r4,2914c <_realloc_r+0x158>
   29050:	053ffe04 	movi	r20,-8
   29054:	2528703a 	and	r20,r4,r20
   29058:	a00f883a 	mov	r7,r20
   2905c:	a0008216 	blt	r20,zero,29268 <_realloc_r+0x274>
   29060:	a4408136 	bltu	r20,r17,29268 <_realloc_r+0x274>
   29064:	81c03c0e 	bge	r16,r7,29158 <_realloc_r+0x164>
   29068:	070000f4 	movhi	fp,3
   2906c:	e7014f04 	addi	fp,fp,1340
   29070:	e1000217 	ldw	r4,8(fp)
   29074:	ac05883a 	add	r2,r21,r16
   29078:	2080bf26 	beq	r4,r2,29378 <_realloc_r+0x384>
   2907c:	11000117 	ldw	r4,4(r2)
   29080:	023fff84 	movi	r8,-2
   29084:	2210703a 	and	r8,r4,r8
   29088:	1211883a 	add	r8,r2,r8
   2908c:	41400117 	ldw	r5,4(r8)
   29090:	2940004c 	andi	r5,r5,1
   29094:	28004a1e 	bne	r5,zero,291c0 <_realloc_r+0x1cc>
   29098:	017fff04 	movi	r5,-4
   2909c:	2148703a 	and	r4,r4,r5
   290a0:	2409883a 	add	r4,r4,r16
   290a4:	21c0ad0e 	bge	r4,r7,2935c <_realloc_r+0x368>
   290a8:	18c0004c 	andi	r3,r3,1
   290ac:	18007f1e 	bne	r3,zero,292ac <_realloc_r+0x2b8>
   290b0:	9dfffe17 	ldw	r23,-8(r19)
   290b4:	adefc83a 	sub	r23,r21,r23
   290b8:	bd800117 	ldw	r22,4(r23)
   290bc:	b14a703a 	and	r5,r22,r5
   290c0:	216d883a 	add	r22,r4,r5
   290c4:	b1c04516 	blt	r22,r7,291dc <_realloc_r+0x1e8>
   290c8:	10c00317 	ldw	r3,12(r2)
   290cc:	10800217 	ldw	r2,8(r2)
   290d0:	81bfff04 	addi	r6,r16,-4
   290d4:	bc400204 	addi	r17,r23,8
   290d8:	10c00315 	stw	r3,12(r2)
   290dc:	18800215 	stw	r2,8(r3)
   290e0:	b9400217 	ldw	r5,8(r23)
   290e4:	b8c00317 	ldw	r3,12(r23)
   290e8:	00800904 	movi	r2,36
   290ec:	28c00315 	stw	r3,12(r5)
   290f0:	19400215 	stw	r5,8(r3)
   290f4:	1180ef36 	bltu	r2,r6,294b4 <_realloc_r+0x4c0>
   290f8:	008004c4 	movi	r2,19
   290fc:	1180da2e 	bgeu	r2,r6,29468 <_realloc_r+0x474>
   29100:	98800017 	ldw	r2,0(r19)
   29104:	b8800215 	stw	r2,8(r23)
   29108:	98800117 	ldw	r2,4(r19)
   2910c:	b8800315 	stw	r2,12(r23)
   29110:	008006c4 	movi	r2,27
   29114:	1180fc2e 	bgeu	r2,r6,29508 <_realloc_r+0x514>
   29118:	98800217 	ldw	r2,8(r19)
   2911c:	b8800415 	stw	r2,16(r23)
   29120:	98800317 	ldw	r2,12(r19)
   29124:	b8800515 	stw	r2,20(r23)
   29128:	00800904 	movi	r2,36
   2912c:	3080421e 	bne	r6,r2,29238 <_realloc_r+0x244>
   29130:	98800417 	ldw	r2,16(r19)
   29134:	9cc00604 	addi	r19,r19,24
   29138:	b8c00804 	addi	r3,r23,32
   2913c:	b8800615 	stw	r2,24(r23)
   29140:	98bfff17 	ldw	r2,-4(r19)
   29144:	b8800715 	stw	r2,28(r23)
   29148:	00003d06 	br	29240 <_realloc_r+0x24c>
   2914c:	01c00404 	movi	r7,16
   29150:	3829883a 	mov	r20,r7
   29154:	003fc206 	br	29060 <__alt_data_end+0xfffe9c60>
   29158:	9823883a 	mov	r17,r19
   2915c:	850fc83a 	sub	r7,r16,r20
   29160:	008003c4 	movi	r2,15
   29164:	18c0004c 	andi	r3,r3,1
   29168:	11c04336 	bltu	r2,r7,29278 <_realloc_r+0x284>
   2916c:	1c06b03a 	or	r3,r3,r16
   29170:	a8c00115 	stw	r3,4(r21)
   29174:	ac21883a 	add	r16,r21,r16
   29178:	80c00117 	ldw	r3,4(r16)
   2917c:	18c00054 	ori	r3,r3,1
   29180:	80c00115 	stw	r3,4(r16)
   29184:	9009883a 	mov	r4,r18
   29188:	002d38c0 	call	2d38c <__malloc_unlock>
   2918c:	8805883a 	mov	r2,r17
   29190:	dfc00917 	ldw	ra,36(sp)
   29194:	df000817 	ldw	fp,32(sp)
   29198:	ddc00717 	ldw	r23,28(sp)
   2919c:	dd800617 	ldw	r22,24(sp)
   291a0:	dd400517 	ldw	r21,20(sp)
   291a4:	dd000417 	ldw	r20,16(sp)
   291a8:	dcc00317 	ldw	r19,12(sp)
   291ac:	dc800217 	ldw	r18,8(sp)
   291b0:	dc400117 	ldw	r17,4(sp)
   291b4:	dc000017 	ldw	r16,0(sp)
   291b8:	dec00a04 	addi	sp,sp,40
   291bc:	f800283a 	ret
   291c0:	18c0004c 	andi	r3,r3,1
   291c4:	1800391e 	bne	r3,zero,292ac <_realloc_r+0x2b8>
   291c8:	9dfffe17 	ldw	r23,-8(r19)
   291cc:	00bfff04 	movi	r2,-4
   291d0:	adefc83a 	sub	r23,r21,r23
   291d4:	b9400117 	ldw	r5,4(r23)
   291d8:	288a703a 	and	r5,r5,r2
   291dc:	2c2d883a 	add	r22,r5,r16
   291e0:	b1c03216 	blt	r22,r7,292ac <_realloc_r+0x2b8>
   291e4:	b8800317 	ldw	r2,12(r23)
   291e8:	b8c00217 	ldw	r3,8(r23)
   291ec:	81bfff04 	addi	r6,r16,-4
   291f0:	01000904 	movi	r4,36
   291f4:	18800315 	stw	r2,12(r3)
   291f8:	10c00215 	stw	r3,8(r2)
   291fc:	bc400204 	addi	r17,r23,8
   29200:	2180ac36 	bltu	r4,r6,294b4 <_realloc_r+0x4c0>
   29204:	008004c4 	movi	r2,19
   29208:	1180972e 	bgeu	r2,r6,29468 <_realloc_r+0x474>
   2920c:	98800017 	ldw	r2,0(r19)
   29210:	b8800215 	stw	r2,8(r23)
   29214:	98800117 	ldw	r2,4(r19)
   29218:	b8800315 	stw	r2,12(r23)
   2921c:	008006c4 	movi	r2,27
   29220:	1180b92e 	bgeu	r2,r6,29508 <_realloc_r+0x514>
   29224:	98800217 	ldw	r2,8(r19)
   29228:	b8800415 	stw	r2,16(r23)
   2922c:	98800317 	ldw	r2,12(r19)
   29230:	b8800515 	stw	r2,20(r23)
   29234:	313fbe26 	beq	r6,r4,29130 <__alt_data_end+0xfffe9d30>
   29238:	b8c00604 	addi	r3,r23,24
   2923c:	9cc00404 	addi	r19,r19,16
   29240:	98800017 	ldw	r2,0(r19)
   29244:	b021883a 	mov	r16,r22
   29248:	b82b883a 	mov	r21,r23
   2924c:	18800015 	stw	r2,0(r3)
   29250:	98800117 	ldw	r2,4(r19)
   29254:	18800115 	stw	r2,4(r3)
   29258:	98800217 	ldw	r2,8(r19)
   2925c:	18800215 	stw	r2,8(r3)
   29260:	b8c00117 	ldw	r3,4(r23)
   29264:	003fbd06 	br	2915c <__alt_data_end+0xfffe9d5c>
   29268:	00800304 	movi	r2,12
   2926c:	90800015 	stw	r2,0(r18)
   29270:	0005883a 	mov	r2,zero
   29274:	003fc606 	br	29190 <__alt_data_end+0xfffe9d90>
   29278:	1d06b03a 	or	r3,r3,r20
   2927c:	ad0b883a 	add	r5,r21,r20
   29280:	a8c00115 	stw	r3,4(r21)
   29284:	38800054 	ori	r2,r7,1
   29288:	28800115 	stw	r2,4(r5)
   2928c:	29cf883a 	add	r7,r5,r7
   29290:	38800117 	ldw	r2,4(r7)
   29294:	9009883a 	mov	r4,r18
   29298:	29400204 	addi	r5,r5,8
   2929c:	10800054 	ori	r2,r2,1
   292a0:	38800115 	stw	r2,4(r7)
   292a4:	00268840 	call	26884 <_free_r>
   292a8:	003fb606 	br	29184 <__alt_data_end+0xfffe9d84>
   292ac:	880b883a 	mov	r5,r17
   292b0:	9009883a 	mov	r4,r18
   292b4:	00274200 	call	27420 <_malloc_r>
   292b8:	1023883a 	mov	r17,r2
   292bc:	1000aa26 	beq	r2,zero,29568 <_realloc_r+0x574>
   292c0:	98ffff17 	ldw	r3,-4(r19)
   292c4:	113ffe04 	addi	r4,r2,-8
   292c8:	00bfff84 	movi	r2,-2
   292cc:	1884703a 	and	r2,r3,r2
   292d0:	a885883a 	add	r2,r21,r2
   292d4:	20808626 	beq	r4,r2,294f0 <_realloc_r+0x4fc>
   292d8:	81bfff04 	addi	r6,r16,-4
   292dc:	00800904 	movi	r2,36
   292e0:	11807036 	bltu	r2,r6,294a4 <_realloc_r+0x4b0>
   292e4:	00c004c4 	movi	r3,19
   292e8:	19805636 	bltu	r3,r6,29444 <_realloc_r+0x450>
   292ec:	8805883a 	mov	r2,r17
   292f0:	9807883a 	mov	r3,r19
   292f4:	19000017 	ldw	r4,0(r3)
   292f8:	11000015 	stw	r4,0(r2)
   292fc:	19000117 	ldw	r4,4(r3)
   29300:	11000115 	stw	r4,4(r2)
   29304:	18c00217 	ldw	r3,8(r3)
   29308:	10c00215 	stw	r3,8(r2)
   2930c:	980b883a 	mov	r5,r19
   29310:	9009883a 	mov	r4,r18
   29314:	00268840 	call	26884 <_free_r>
   29318:	9009883a 	mov	r4,r18
   2931c:	002d38c0 	call	2d38c <__malloc_unlock>
   29320:	8805883a 	mov	r2,r17
   29324:	003f9a06 	br	29190 <__alt_data_end+0xfffe9d90>
   29328:	300b883a 	mov	r5,r6
   2932c:	dfc00917 	ldw	ra,36(sp)
   29330:	df000817 	ldw	fp,32(sp)
   29334:	ddc00717 	ldw	r23,28(sp)
   29338:	dd800617 	ldw	r22,24(sp)
   2933c:	dd400517 	ldw	r21,20(sp)
   29340:	dd000417 	ldw	r20,16(sp)
   29344:	dcc00317 	ldw	r19,12(sp)
   29348:	dc800217 	ldw	r18,8(sp)
   2934c:	dc400117 	ldw	r17,4(sp)
   29350:	dc000017 	ldw	r16,0(sp)
   29354:	dec00a04 	addi	sp,sp,40
   29358:	00274201 	jmpi	27420 <_malloc_r>
   2935c:	11400317 	ldw	r5,12(r2)
   29360:	10800217 	ldw	r2,8(r2)
   29364:	9823883a 	mov	r17,r19
   29368:	2021883a 	mov	r16,r4
   2936c:	11400315 	stw	r5,12(r2)
   29370:	28800215 	stw	r2,8(r5)
   29374:	003f7906 	br	2915c <__alt_data_end+0xfffe9d5c>
   29378:	21000117 	ldw	r4,4(r4)
   2937c:	00bfff04 	movi	r2,-4
   29380:	a1800404 	addi	r6,r20,16
   29384:	2088703a 	and	r4,r4,r2
   29388:	2409883a 	add	r4,r4,r16
   2938c:	2180380e 	bge	r4,r6,29470 <_realloc_r+0x47c>
   29390:	18c0004c 	andi	r3,r3,1
   29394:	183fc51e 	bne	r3,zero,292ac <__alt_data_end+0xfffe9eac>
   29398:	9dfffe17 	ldw	r23,-8(r19)
   2939c:	adefc83a 	sub	r23,r21,r23
   293a0:	b9400117 	ldw	r5,4(r23)
   293a4:	288a703a 	and	r5,r5,r2
   293a8:	216d883a 	add	r22,r4,r5
   293ac:	b1bf8b16 	blt	r22,r6,291dc <__alt_data_end+0xfffe9ddc>
   293b0:	b8800317 	ldw	r2,12(r23)
   293b4:	b8c00217 	ldw	r3,8(r23)
   293b8:	81bfff04 	addi	r6,r16,-4
   293bc:	01000904 	movi	r4,36
   293c0:	18800315 	stw	r2,12(r3)
   293c4:	10c00215 	stw	r3,8(r2)
   293c8:	bc400204 	addi	r17,r23,8
   293cc:	21805a36 	bltu	r4,r6,29538 <_realloc_r+0x544>
   293d0:	008004c4 	movi	r2,19
   293d4:	1180562e 	bgeu	r2,r6,29530 <_realloc_r+0x53c>
   293d8:	98800017 	ldw	r2,0(r19)
   293dc:	b8800215 	stw	r2,8(r23)
   293e0:	98800117 	ldw	r2,4(r19)
   293e4:	b8800315 	stw	r2,12(r23)
   293e8:	008006c4 	movi	r2,27
   293ec:	11805636 	bltu	r2,r6,29548 <_realloc_r+0x554>
   293f0:	b8800404 	addi	r2,r23,16
   293f4:	9cc00204 	addi	r19,r19,8
   293f8:	98c00017 	ldw	r3,0(r19)
   293fc:	10c00015 	stw	r3,0(r2)
   29400:	98c00117 	ldw	r3,4(r19)
   29404:	10c00115 	stw	r3,4(r2)
   29408:	98c00217 	ldw	r3,8(r19)
   2940c:	10c00215 	stw	r3,8(r2)
   29410:	bd07883a 	add	r3,r23,r20
   29414:	b505c83a 	sub	r2,r22,r20
   29418:	e0c00215 	stw	r3,8(fp)
   2941c:	10800054 	ori	r2,r2,1
   29420:	18800115 	stw	r2,4(r3)
   29424:	b8800117 	ldw	r2,4(r23)
   29428:	9009883a 	mov	r4,r18
   2942c:	1080004c 	andi	r2,r2,1
   29430:	a0a8b03a 	or	r20,r20,r2
   29434:	bd000115 	stw	r20,4(r23)
   29438:	002d38c0 	call	2d38c <__malloc_unlock>
   2943c:	8805883a 	mov	r2,r17
   29440:	003f5306 	br	29190 <__alt_data_end+0xfffe9d90>
   29444:	98c00017 	ldw	r3,0(r19)
   29448:	88c00015 	stw	r3,0(r17)
   2944c:	98c00117 	ldw	r3,4(r19)
   29450:	88c00115 	stw	r3,4(r17)
   29454:	00c006c4 	movi	r3,27
   29458:	19801d36 	bltu	r3,r6,294d0 <_realloc_r+0x4dc>
   2945c:	88800204 	addi	r2,r17,8
   29460:	98c00204 	addi	r3,r19,8
   29464:	003fa306 	br	292f4 <__alt_data_end+0xfffe9ef4>
   29468:	8807883a 	mov	r3,r17
   2946c:	003f7406 	br	29240 <__alt_data_end+0xfffe9e40>
   29470:	ad2b883a 	add	r21,r21,r20
   29474:	2505c83a 	sub	r2,r4,r20
   29478:	e5400215 	stw	r21,8(fp)
   2947c:	10800054 	ori	r2,r2,1
   29480:	a8800115 	stw	r2,4(r21)
   29484:	98bfff17 	ldw	r2,-4(r19)
   29488:	9009883a 	mov	r4,r18
   2948c:	1080004c 	andi	r2,r2,1
   29490:	a0a8b03a 	or	r20,r20,r2
   29494:	9d3fff15 	stw	r20,-4(r19)
   29498:	002d38c0 	call	2d38c <__malloc_unlock>
   2949c:	9805883a 	mov	r2,r19
   294a0:	003f3b06 	br	29190 <__alt_data_end+0xfffe9d90>
   294a4:	8809883a 	mov	r4,r17
   294a8:	980b883a 	mov	r5,r19
   294ac:	0027de80 	call	27de8 <memmove>
   294b0:	003f9606 	br	2930c <__alt_data_end+0xfffe9f0c>
   294b4:	8809883a 	mov	r4,r17
   294b8:	980b883a 	mov	r5,r19
   294bc:	0027de80 	call	27de8 <memmove>
   294c0:	b8c00117 	ldw	r3,4(r23)
   294c4:	b021883a 	mov	r16,r22
   294c8:	b82b883a 	mov	r21,r23
   294cc:	003f2306 	br	2915c <__alt_data_end+0xfffe9d5c>
   294d0:	98c00217 	ldw	r3,8(r19)
   294d4:	88c00215 	stw	r3,8(r17)
   294d8:	98c00317 	ldw	r3,12(r19)
   294dc:	88c00315 	stw	r3,12(r17)
   294e0:	30800c26 	beq	r6,r2,29514 <_realloc_r+0x520>
   294e4:	88800404 	addi	r2,r17,16
   294e8:	98c00404 	addi	r3,r19,16
   294ec:	003f8106 	br	292f4 <__alt_data_end+0xfffe9ef4>
   294f0:	893fff17 	ldw	r4,-4(r17)
   294f4:	00bfff04 	movi	r2,-4
   294f8:	9823883a 	mov	r17,r19
   294fc:	2084703a 	and	r2,r4,r2
   29500:	80a1883a 	add	r16,r16,r2
   29504:	003f1506 	br	2915c <__alt_data_end+0xfffe9d5c>
   29508:	b8c00404 	addi	r3,r23,16
   2950c:	9cc00204 	addi	r19,r19,8
   29510:	003f4b06 	br	29240 <__alt_data_end+0xfffe9e40>
   29514:	99000417 	ldw	r4,16(r19)
   29518:	88800604 	addi	r2,r17,24
   2951c:	98c00604 	addi	r3,r19,24
   29520:	89000415 	stw	r4,16(r17)
   29524:	99000517 	ldw	r4,20(r19)
   29528:	89000515 	stw	r4,20(r17)
   2952c:	003f7106 	br	292f4 <__alt_data_end+0xfffe9ef4>
   29530:	8805883a 	mov	r2,r17
   29534:	003fb006 	br	293f8 <__alt_data_end+0xfffe9ff8>
   29538:	8809883a 	mov	r4,r17
   2953c:	980b883a 	mov	r5,r19
   29540:	0027de80 	call	27de8 <memmove>
   29544:	003fb206 	br	29410 <__alt_data_end+0xfffea010>
   29548:	98800217 	ldw	r2,8(r19)
   2954c:	b8800415 	stw	r2,16(r23)
   29550:	98800317 	ldw	r2,12(r19)
   29554:	b8800515 	stw	r2,20(r23)
   29558:	31000726 	beq	r6,r4,29578 <_realloc_r+0x584>
   2955c:	b8800604 	addi	r2,r23,24
   29560:	9cc00404 	addi	r19,r19,16
   29564:	003fa406 	br	293f8 <__alt_data_end+0xfffe9ff8>
   29568:	9009883a 	mov	r4,r18
   2956c:	002d38c0 	call	2d38c <__malloc_unlock>
   29570:	0005883a 	mov	r2,zero
   29574:	003f0606 	br	29190 <__alt_data_end+0xfffe9d90>
   29578:	98c00417 	ldw	r3,16(r19)
   2957c:	9cc00604 	addi	r19,r19,24
   29580:	b8800804 	addi	r2,r23,32
   29584:	b8c00615 	stw	r3,24(r23)
   29588:	98ffff17 	ldw	r3,-4(r19)
   2958c:	b8c00715 	stw	r3,28(r23)
   29590:	003f9906 	br	293f8 <__alt_data_end+0xfffe9ff8>

00029594 <__fpclassifyd>:
   29594:	00a00034 	movhi	r2,32768
   29598:	10bfffc4 	addi	r2,r2,-1
   2959c:	2884703a 	and	r2,r5,r2
   295a0:	10000726 	beq	r2,zero,295c0 <__fpclassifyd+0x2c>
   295a4:	00fffc34 	movhi	r3,65520
   295a8:	019ff834 	movhi	r6,32736
   295ac:	28c7883a 	add	r3,r5,r3
   295b0:	31bfffc4 	addi	r6,r6,-1
   295b4:	30c00536 	bltu	r6,r3,295cc <__fpclassifyd+0x38>
   295b8:	00800104 	movi	r2,4
   295bc:	f800283a 	ret
   295c0:	2000021e 	bne	r4,zero,295cc <__fpclassifyd+0x38>
   295c4:	00800084 	movi	r2,2
   295c8:	f800283a 	ret
   295cc:	00dffc34 	movhi	r3,32752
   295d0:	019ff834 	movhi	r6,32736
   295d4:	28cb883a 	add	r5,r5,r3
   295d8:	31bfffc4 	addi	r6,r6,-1
   295dc:	317ff62e 	bgeu	r6,r5,295b8 <__alt_data_end+0xfffea1b8>
   295e0:	01400434 	movhi	r5,16
   295e4:	297fffc4 	addi	r5,r5,-1
   295e8:	28800236 	bltu	r5,r2,295f4 <__fpclassifyd+0x60>
   295ec:	008000c4 	movi	r2,3
   295f0:	f800283a 	ret
   295f4:	10c00226 	beq	r2,r3,29600 <__fpclassifyd+0x6c>
   295f8:	0005883a 	mov	r2,zero
   295fc:	f800283a 	ret
   29600:	2005003a 	cmpeq	r2,r4,zero
   29604:	f800283a 	ret

00029608 <_sbrk_r>:
   29608:	defffd04 	addi	sp,sp,-12
   2960c:	dc000015 	stw	r16,0(sp)
   29610:	040000f4 	movhi	r16,3
   29614:	dc400115 	stw	r17,4(sp)
   29618:	840de404 	addi	r16,r16,14224
   2961c:	2023883a 	mov	r17,r4
   29620:	2809883a 	mov	r4,r5
   29624:	dfc00215 	stw	ra,8(sp)
   29628:	80000015 	stw	zero,0(r16)
   2962c:	002d5580 	call	2d558 <sbrk>
   29630:	00ffffc4 	movi	r3,-1
   29634:	10c00526 	beq	r2,r3,2964c <_sbrk_r+0x44>
   29638:	dfc00217 	ldw	ra,8(sp)
   2963c:	dc400117 	ldw	r17,4(sp)
   29640:	dc000017 	ldw	r16,0(sp)
   29644:	dec00304 	addi	sp,sp,12
   29648:	f800283a 	ret
   2964c:	80c00017 	ldw	r3,0(r16)
   29650:	183ff926 	beq	r3,zero,29638 <__alt_data_end+0xfffea238>
   29654:	88c00015 	stw	r3,0(r17)
   29658:	003ff706 	br	29638 <__alt_data_end+0xfffea238>

0002965c <__sread>:
   2965c:	defffe04 	addi	sp,sp,-8
   29660:	dc000015 	stw	r16,0(sp)
   29664:	2821883a 	mov	r16,r5
   29668:	2940038f 	ldh	r5,14(r5)
   2966c:	dfc00115 	stw	ra,4(sp)
   29670:	002b23c0 	call	2b23c <_read_r>
   29674:	10000716 	blt	r2,zero,29694 <__sread+0x38>
   29678:	80c01417 	ldw	r3,80(r16)
   2967c:	1887883a 	add	r3,r3,r2
   29680:	80c01415 	stw	r3,80(r16)
   29684:	dfc00117 	ldw	ra,4(sp)
   29688:	dc000017 	ldw	r16,0(sp)
   2968c:	dec00204 	addi	sp,sp,8
   29690:	f800283a 	ret
   29694:	80c0030b 	ldhu	r3,12(r16)
   29698:	18fbffcc 	andi	r3,r3,61439
   2969c:	80c0030d 	sth	r3,12(r16)
   296a0:	dfc00117 	ldw	ra,4(sp)
   296a4:	dc000017 	ldw	r16,0(sp)
   296a8:	dec00204 	addi	sp,sp,8
   296ac:	f800283a 	ret

000296b0 <__seofread>:
   296b0:	0005883a 	mov	r2,zero
   296b4:	f800283a 	ret

000296b8 <__swrite>:
   296b8:	2880030b 	ldhu	r2,12(r5)
   296bc:	defffb04 	addi	sp,sp,-20
   296c0:	dcc00315 	stw	r19,12(sp)
   296c4:	dc800215 	stw	r18,8(sp)
   296c8:	dc400115 	stw	r17,4(sp)
   296cc:	dc000015 	stw	r16,0(sp)
   296d0:	dfc00415 	stw	ra,16(sp)
   296d4:	10c0400c 	andi	r3,r2,256
   296d8:	2821883a 	mov	r16,r5
   296dc:	2027883a 	mov	r19,r4
   296e0:	3025883a 	mov	r18,r6
   296e4:	3823883a 	mov	r17,r7
   296e8:	18000526 	beq	r3,zero,29700 <__swrite+0x48>
   296ec:	2940038f 	ldh	r5,14(r5)
   296f0:	000d883a 	mov	r6,zero
   296f4:	01c00084 	movi	r7,2
   296f8:	002b1e00 	call	2b1e0 <_lseek_r>
   296fc:	8080030b 	ldhu	r2,12(r16)
   29700:	8140038f 	ldh	r5,14(r16)
   29704:	10bbffcc 	andi	r2,r2,61439
   29708:	9809883a 	mov	r4,r19
   2970c:	900d883a 	mov	r6,r18
   29710:	880f883a 	mov	r7,r17
   29714:	8080030d 	sth	r2,12(r16)
   29718:	dfc00417 	ldw	ra,16(sp)
   2971c:	dcc00317 	ldw	r19,12(sp)
   29720:	dc800217 	ldw	r18,8(sp)
   29724:	dc400117 	ldw	r17,4(sp)
   29728:	dc000017 	ldw	r16,0(sp)
   2972c:	dec00504 	addi	sp,sp,20
   29730:	002acd01 	jmpi	2acd0 <_write_r>

00029734 <__sseek>:
   29734:	defffe04 	addi	sp,sp,-8
   29738:	dc000015 	stw	r16,0(sp)
   2973c:	2821883a 	mov	r16,r5
   29740:	2940038f 	ldh	r5,14(r5)
   29744:	dfc00115 	stw	ra,4(sp)
   29748:	002b1e00 	call	2b1e0 <_lseek_r>
   2974c:	00ffffc4 	movi	r3,-1
   29750:	10c00826 	beq	r2,r3,29774 <__sseek+0x40>
   29754:	80c0030b 	ldhu	r3,12(r16)
   29758:	80801415 	stw	r2,80(r16)
   2975c:	18c40014 	ori	r3,r3,4096
   29760:	80c0030d 	sth	r3,12(r16)
   29764:	dfc00117 	ldw	ra,4(sp)
   29768:	dc000017 	ldw	r16,0(sp)
   2976c:	dec00204 	addi	sp,sp,8
   29770:	f800283a 	ret
   29774:	80c0030b 	ldhu	r3,12(r16)
   29778:	18fbffcc 	andi	r3,r3,61439
   2977c:	80c0030d 	sth	r3,12(r16)
   29780:	dfc00117 	ldw	ra,4(sp)
   29784:	dc000017 	ldw	r16,0(sp)
   29788:	dec00204 	addi	sp,sp,8
   2978c:	f800283a 	ret

00029790 <__sclose>:
   29790:	2940038f 	ldh	r5,14(r5)
   29794:	002ad2c1 	jmpi	2ad2c <_close_r>

00029798 <strcmp>:
   29798:	2144b03a 	or	r2,r4,r5
   2979c:	108000cc 	andi	r2,r2,3
   297a0:	1000171e 	bne	r2,zero,29800 <strcmp+0x68>
   297a4:	20800017 	ldw	r2,0(r4)
   297a8:	28c00017 	ldw	r3,0(r5)
   297ac:	10c0141e 	bne	r2,r3,29800 <strcmp+0x68>
   297b0:	027fbff4 	movhi	r9,65279
   297b4:	4a7fbfc4 	addi	r9,r9,-257
   297b8:	0086303a 	nor	r3,zero,r2
   297bc:	02202074 	movhi	r8,32897
   297c0:	1245883a 	add	r2,r2,r9
   297c4:	42202004 	addi	r8,r8,-32640
   297c8:	10c4703a 	and	r2,r2,r3
   297cc:	1204703a 	and	r2,r2,r8
   297d0:	10000226 	beq	r2,zero,297dc <strcmp+0x44>
   297d4:	00001706 	br	29834 <strcmp+0x9c>
   297d8:	1000161e 	bne	r2,zero,29834 <strcmp+0x9c>
   297dc:	21000104 	addi	r4,r4,4
   297e0:	20c00017 	ldw	r3,0(r4)
   297e4:	29400104 	addi	r5,r5,4
   297e8:	29800017 	ldw	r6,0(r5)
   297ec:	1a4f883a 	add	r7,r3,r9
   297f0:	00c4303a 	nor	r2,zero,r3
   297f4:	3884703a 	and	r2,r7,r2
   297f8:	1204703a 	and	r2,r2,r8
   297fc:	19bff626 	beq	r3,r6,297d8 <__alt_data_end+0xfffea3d8>
   29800:	20800007 	ldb	r2,0(r4)
   29804:	1000051e 	bne	r2,zero,2981c <strcmp+0x84>
   29808:	00000606 	br	29824 <strcmp+0x8c>
   2980c:	21000044 	addi	r4,r4,1
   29810:	20800007 	ldb	r2,0(r4)
   29814:	29400044 	addi	r5,r5,1
   29818:	10000226 	beq	r2,zero,29824 <strcmp+0x8c>
   2981c:	28c00007 	ldb	r3,0(r5)
   29820:	10fffa26 	beq	r2,r3,2980c <__alt_data_end+0xfffea40c>
   29824:	20800003 	ldbu	r2,0(r4)
   29828:	28c00003 	ldbu	r3,0(r5)
   2982c:	10c5c83a 	sub	r2,r2,r3
   29830:	f800283a 	ret
   29834:	0005883a 	mov	r2,zero
   29838:	f800283a 	ret

0002983c <__sprint_r.part.0>:
   2983c:	28801917 	ldw	r2,100(r5)
   29840:	defff604 	addi	sp,sp,-40
   29844:	dd400515 	stw	r21,20(sp)
   29848:	dcc00315 	stw	r19,12(sp)
   2984c:	dfc00915 	stw	ra,36(sp)
   29850:	df000815 	stw	fp,32(sp)
   29854:	ddc00715 	stw	r23,28(sp)
   29858:	dd800615 	stw	r22,24(sp)
   2985c:	dd000415 	stw	r20,16(sp)
   29860:	dc800215 	stw	r18,8(sp)
   29864:	dc400115 	stw	r17,4(sp)
   29868:	dc000015 	stw	r16,0(sp)
   2986c:	1088000c 	andi	r2,r2,8192
   29870:	2827883a 	mov	r19,r5
   29874:	302b883a 	mov	r21,r6
   29878:	10002d26 	beq	r2,zero,29930 <__sprint_r.part.0+0xf4>
   2987c:	30800217 	ldw	r2,8(r6)
   29880:	35800017 	ldw	r22,0(r6)
   29884:	10002826 	beq	r2,zero,29928 <__sprint_r.part.0+0xec>
   29888:	2029883a 	mov	r20,r4
   2988c:	b5c00104 	addi	r23,r22,4
   29890:	04bfffc4 	movi	r18,-1
   29894:	bc400017 	ldw	r17,0(r23)
   29898:	b4000017 	ldw	r16,0(r22)
   2989c:	0039883a 	mov	fp,zero
   298a0:	8822d0ba 	srli	r17,r17,2
   298a4:	04400316 	blt	zero,r17,298b4 <__sprint_r.part.0+0x78>
   298a8:	00001706 	br	29908 <__sprint_r.part.0+0xcc>
   298ac:	84000104 	addi	r16,r16,4
   298b0:	8f001526 	beq	r17,fp,29908 <__sprint_r.part.0+0xcc>
   298b4:	81400017 	ldw	r5,0(r16)
   298b8:	a009883a 	mov	r4,r20
   298bc:	980d883a 	mov	r6,r19
   298c0:	002af580 	call	2af58 <_fputwc_r>
   298c4:	e7000044 	addi	fp,fp,1
   298c8:	14bff81e 	bne	r2,r18,298ac <__alt_data_end+0xfffea4ac>
   298cc:	9005883a 	mov	r2,r18
   298d0:	a8000215 	stw	zero,8(r21)
   298d4:	a8000115 	stw	zero,4(r21)
   298d8:	dfc00917 	ldw	ra,36(sp)
   298dc:	df000817 	ldw	fp,32(sp)
   298e0:	ddc00717 	ldw	r23,28(sp)
   298e4:	dd800617 	ldw	r22,24(sp)
   298e8:	dd400517 	ldw	r21,20(sp)
   298ec:	dd000417 	ldw	r20,16(sp)
   298f0:	dcc00317 	ldw	r19,12(sp)
   298f4:	dc800217 	ldw	r18,8(sp)
   298f8:	dc400117 	ldw	r17,4(sp)
   298fc:	dc000017 	ldw	r16,0(sp)
   29900:	dec00a04 	addi	sp,sp,40
   29904:	f800283a 	ret
   29908:	a8c00217 	ldw	r3,8(r21)
   2990c:	8c63883a 	add	r17,r17,r17
   29910:	8c63883a 	add	r17,r17,r17
   29914:	1c45c83a 	sub	r2,r3,r17
   29918:	a8800215 	stw	r2,8(r21)
   2991c:	b5800204 	addi	r22,r22,8
   29920:	bdc00204 	addi	r23,r23,8
   29924:	103fdb1e 	bne	r2,zero,29894 <__alt_data_end+0xfffea494>
   29928:	0005883a 	mov	r2,zero
   2992c:	003fe806 	br	298d0 <__alt_data_end+0xfffea4d0>
   29930:	0026b740 	call	26b74 <__sfvwrite_r>
   29934:	003fe606 	br	298d0 <__alt_data_end+0xfffea4d0>

00029938 <__sprint_r>:
   29938:	30c00217 	ldw	r3,8(r6)
   2993c:	18000126 	beq	r3,zero,29944 <__sprint_r+0xc>
   29940:	002983c1 	jmpi	2983c <__sprint_r.part.0>
   29944:	30000115 	stw	zero,4(r6)
   29948:	0005883a 	mov	r2,zero
   2994c:	f800283a 	ret

00029950 <___vfiprintf_internal_r>:
   29950:	defeca04 	addi	sp,sp,-1240
   29954:	dd813215 	stw	r22,1224(sp)
   29958:	dd013015 	stw	r20,1216(sp)
   2995c:	dfc13515 	stw	ra,1236(sp)
   29960:	df013415 	stw	fp,1232(sp)
   29964:	ddc13315 	stw	r23,1228(sp)
   29968:	dd413115 	stw	r21,1220(sp)
   2996c:	dcc12f15 	stw	r19,1212(sp)
   29970:	dc812e15 	stw	r18,1208(sp)
   29974:	dc412d15 	stw	r17,1204(sp)
   29978:	dc012c15 	stw	r16,1200(sp)
   2997c:	d9012015 	stw	r4,1152(sp)
   29980:	d9c12115 	stw	r7,1156(sp)
   29984:	2829883a 	mov	r20,r5
   29988:	302d883a 	mov	r22,r6
   2998c:	20000226 	beq	r4,zero,29998 <___vfiprintf_internal_r+0x48>
   29990:	20800e17 	ldw	r2,56(r4)
   29994:	1001d326 	beq	r2,zero,2a0e4 <___vfiprintf_internal_r+0x794>
   29998:	a0c0030b 	ldhu	r3,12(r20)
   2999c:	1908000c 	andi	r4,r3,8192
   299a0:	1805883a 	mov	r2,r3
   299a4:	2000071e 	bne	r4,zero,299c4 <___vfiprintf_internal_r+0x74>
   299a8:	a1001917 	ldw	r4,100(r20)
   299ac:	18880014 	ori	r2,r3,8192
   299b0:	00f7ffc4 	movi	r3,-8193
   299b4:	20c8703a 	and	r4,r4,r3
   299b8:	a080030d 	sth	r2,12(r20)
   299bc:	1007883a 	mov	r3,r2
   299c0:	a1001915 	stw	r4,100(r20)
   299c4:	1100020c 	andi	r4,r2,8
   299c8:	20018926 	beq	r4,zero,29ff0 <___vfiprintf_internal_r+0x6a0>
   299cc:	a1000417 	ldw	r4,16(r20)
   299d0:	20018726 	beq	r4,zero,29ff0 <___vfiprintf_internal_r+0x6a0>
   299d4:	1080068c 	andi	r2,r2,26
   299d8:	01000284 	movi	r4,10
   299dc:	11018d26 	beq	r2,r4,2a014 <___vfiprintf_internal_r+0x6c4>
   299e0:	da810a04 	addi	r10,sp,1064
   299e4:	dac109c4 	addi	r11,sp,1063
   299e8:	070000f4 	movhi	fp,3
   299ec:	05c000f4 	movhi	r23,3
   299f0:	da811e15 	stw	r10,1144(sp)
   299f4:	52d5c83a 	sub	r10,r10,r11
   299f8:	e7000704 	addi	fp,fp,28
   299fc:	bdc00304 	addi	r23,r23,12
   29a00:	dac11f15 	stw	r11,1148(sp)
   29a04:	dec11a15 	stw	sp,1128(sp)
   29a08:	d8011c15 	stw	zero,1136(sp)
   29a0c:	d8011b15 	stw	zero,1132(sp)
   29a10:	d8012615 	stw	zero,1176(sp)
   29a14:	d8012215 	stw	zero,1160(sp)
   29a18:	da812715 	stw	r10,1180(sp)
   29a1c:	d811883a 	mov	r8,sp
   29a20:	b021883a 	mov	r16,r22
   29a24:	80800007 	ldb	r2,0(r16)
   29a28:	10039c26 	beq	r2,zero,2a89c <___vfiprintf_internal_r+0xf4c>
   29a2c:	01000944 	movi	r4,37
   29a30:	11039a26 	beq	r2,r4,2a89c <___vfiprintf_internal_r+0xf4c>
   29a34:	8005883a 	mov	r2,r16
   29a38:	00000106 	br	29a40 <___vfiprintf_internal_r+0xf0>
   29a3c:	19000326 	beq	r3,r4,29a4c <___vfiprintf_internal_r+0xfc>
   29a40:	10800044 	addi	r2,r2,1
   29a44:	10c00007 	ldb	r3,0(r2)
   29a48:	183ffc1e 	bne	r3,zero,29a3c <__alt_data_end+0xfffea63c>
   29a4c:	1425c83a 	sub	r18,r2,r16
   29a50:	1023883a 	mov	r17,r2
   29a54:	90001026 	beq	r18,zero,29a98 <___vfiprintf_internal_r+0x148>
   29a58:	d8c11c17 	ldw	r3,1136(sp)
   29a5c:	d8811b17 	ldw	r2,1132(sp)
   29a60:	44000015 	stw	r16,0(r8)
   29a64:	90c7883a 	add	r3,r18,r3
   29a68:	10800044 	addi	r2,r2,1
   29a6c:	44800115 	stw	r18,4(r8)
   29a70:	d8c11c15 	stw	r3,1136(sp)
   29a74:	d8811b15 	stw	r2,1132(sp)
   29a78:	010001c4 	movi	r4,7
   29a7c:	2080750e 	bge	r4,r2,29c54 <___vfiprintf_internal_r+0x304>
   29a80:	18039d1e 	bne	r3,zero,2a8f8 <___vfiprintf_internal_r+0xfa8>
   29a84:	dac12217 	ldw	r11,1160(sp)
   29a88:	d8011b15 	stw	zero,1132(sp)
   29a8c:	d811883a 	mov	r8,sp
   29a90:	5c97883a 	add	r11,r11,r18
   29a94:	dac12215 	stw	r11,1160(sp)
   29a98:	88800007 	ldb	r2,0(r17)
   29a9c:	1002e026 	beq	r2,zero,2a620 <___vfiprintf_internal_r+0xcd0>
   29aa0:	88c00047 	ldb	r3,1(r17)
   29aa4:	8c000044 	addi	r16,r17,1
   29aa8:	d8011d85 	stb	zero,1142(sp)
   29aac:	000d883a 	mov	r6,zero
   29ab0:	027fffc4 	movi	r9,-1
   29ab4:	0027883a 	mov	r19,zero
   29ab8:	002b883a 	mov	r21,zero
   29abc:	01001604 	movi	r4,88
   29ac0:	01400244 	movi	r5,9
   29ac4:	03000a84 	movi	r12,42
   29ac8:	01c01b04 	movi	r7,108
   29acc:	84000044 	addi	r16,r16,1
   29ad0:	18bff804 	addi	r2,r3,-32
   29ad4:	20825f36 	bltu	r4,r2,2a454 <___vfiprintf_internal_r+0xb04>
   29ad8:	100490ba 	slli	r2,r2,2
   29adc:	028000f4 	movhi	r10,3
   29ae0:	52a6bc04 	addi	r10,r10,-25872
   29ae4:	1285883a 	add	r2,r2,r10
   29ae8:	10800017 	ldw	r2,0(r2)
   29aec:	1000683a 	jmp	r2
   29af0:	0002a2c4 	movi	zero,2699
   29af4:	0002a454 	movui	zero,2705
   29af8:	0002a454 	movui	zero,2705
   29afc:	0002a448 	cmpgei	zero,zero,2705
   29b00:	0002a454 	movui	zero,2705
   29b04:	0002a454 	movui	zero,2705
   29b08:	0002a454 	movui	zero,2705
   29b0c:	0002a454 	movui	zero,2705
   29b10:	0002a454 	movui	zero,2705
   29b14:	0002a454 	movui	zero,2705
   29b18:	0002a420 	cmpeqi	zero,zero,2704
   29b1c:	0002a43c 	xorhi	zero,zero,2704
   29b20:	0002a454 	movui	zero,2705
   29b24:	0002a0f4 	movhi	zero,2691
   29b28:	0002a254 	movui	zero,2697
   29b2c:	0002a454 	movui	zero,2705
   29b30:	0002a1d8 	cmpnei	zero,zero,2695
   29b34:	0002a1e4 	muli	zero,zero,2695
   29b38:	0002a1e4 	muli	zero,zero,2695
   29b3c:	0002a1e4 	muli	zero,zero,2695
   29b40:	0002a1e4 	muli	zero,zero,2695
   29b44:	0002a1e4 	muli	zero,zero,2695
   29b48:	0002a1e4 	muli	zero,zero,2695
   29b4c:	0002a1e4 	muli	zero,zero,2695
   29b50:	0002a1e4 	muli	zero,zero,2695
   29b54:	0002a1e4 	muli	zero,zero,2695
   29b58:	0002a454 	movui	zero,2705
   29b5c:	0002a454 	movui	zero,2705
   29b60:	0002a454 	movui	zero,2705
   29b64:	0002a454 	movui	zero,2705
   29b68:	0002a454 	movui	zero,2705
   29b6c:	0002a454 	movui	zero,2705
   29b70:	0002a454 	movui	zero,2705
   29b74:	0002a454 	movui	zero,2705
   29b78:	0002a454 	movui	zero,2705
   29b7c:	0002a454 	movui	zero,2705
   29b80:	0002a210 	cmplti	zero,zero,2696
   29b84:	0002a454 	movui	zero,2705
   29b88:	0002a454 	movui	zero,2705
   29b8c:	0002a454 	movui	zero,2705
   29b90:	0002a454 	movui	zero,2705
   29b94:	0002a454 	movui	zero,2705
   29b98:	0002a454 	movui	zero,2705
   29b9c:	0002a454 	movui	zero,2705
   29ba0:	0002a454 	movui	zero,2705
   29ba4:	0002a454 	movui	zero,2705
   29ba8:	0002a454 	movui	zero,2705
   29bac:	00029ca4 	muli	zero,zero,2674
   29bb0:	0002a454 	movui	zero,2705
   29bb4:	0002a454 	movui	zero,2705
   29bb8:	0002a454 	movui	zero,2705
   29bbc:	0002a454 	movui	zero,2705
   29bc0:	0002a454 	movui	zero,2705
   29bc4:	00029c68 	cmpgeui	zero,zero,2673
   29bc8:	0002a454 	movui	zero,2705
   29bcc:	0002a454 	movui	zero,2705
   29bd0:	0002a150 	cmplti	zero,zero,2693
   29bd4:	0002a454 	movui	zero,2705
   29bd8:	0002a454 	movui	zero,2705
   29bdc:	0002a454 	movui	zero,2705
   29be0:	0002a454 	movui	zero,2705
   29be4:	0002a454 	movui	zero,2705
   29be8:	0002a454 	movui	zero,2705
   29bec:	0002a454 	movui	zero,2705
   29bf0:	0002a454 	movui	zero,2705
   29bf4:	0002a454 	movui	zero,2705
   29bf8:	0002a454 	movui	zero,2705
   29bfc:	0002a1a8 	cmpgeui	zero,zero,2694
   29c00:	0002a340 	call	2a34 <__reset-0x1d5cc>
   29c04:	0002a454 	movui	zero,2705
   29c08:	0002a454 	movui	zero,2705
   29c0c:	0002a454 	movui	zero,2705
   29c10:	0002a3c8 	cmpgei	zero,zero,2703
   29c14:	0002a340 	call	2a34 <__reset-0x1d5cc>
   29c18:	0002a454 	movui	zero,2705
   29c1c:	0002a454 	movui	zero,2705
   29c20:	0002a3d4 	movui	zero,2703
   29c24:	0002a454 	movui	zero,2705
   29c28:	0002a294 	movui	zero,2698
   29c2c:	00029ca8 	cmpgeui	zero,zero,2674
   29c30:	0002a37c 	xorhi	zero,zero,2701
   29c34:	0002a3bc 	xorhi	zero,zero,2702
   29c38:	0002a454 	movui	zero,2705
   29c3c:	0002a2e0 	cmpeqi	zero,zero,2699
   29c40:	0002a454 	movui	zero,2705
   29c44:	00029c6c 	andhi	zero,zero,2673
   29c48:	0002a454 	movui	zero,2705
   29c4c:	0002a454 	movui	zero,2705
   29c50:	0002a3e4 	muli	zero,zero,2703
   29c54:	42000204 	addi	r8,r8,8
   29c58:	dac12217 	ldw	r11,1160(sp)
   29c5c:	5c97883a 	add	r11,r11,r18
   29c60:	dac12215 	stw	r11,1160(sp)
   29c64:	003f8c06 	br	29a98 <__alt_data_end+0xfffea698>
   29c68:	ad400414 	ori	r21,r21,16
   29c6c:	a880080c 	andi	r2,r21,32
   29c70:	10012f1e 	bne	r2,zero,2a130 <___vfiprintf_internal_r+0x7e0>
   29c74:	a880040c 	andi	r2,r21,16
   29c78:	1001ff1e 	bne	r2,zero,2a478 <___vfiprintf_internal_r+0xb28>
   29c7c:	a880100c 	andi	r2,r21,64
   29c80:	1001fd26 	beq	r2,zero,2a478 <___vfiprintf_internal_r+0xb28>
   29c84:	da812117 	ldw	r10,1156(sp)
   29c88:	002d883a 	mov	r22,zero
   29c8c:	00800044 	movi	r2,1
   29c90:	5480000b 	ldhu	r18,0(r10)
   29c94:	52800104 	addi	r10,r10,4
   29c98:	da812115 	stw	r10,1156(sp)
   29c9c:	9009883a 	mov	r4,r18
   29ca0:	00000a06 	br	29ccc <___vfiprintf_internal_r+0x37c>
   29ca4:	ad400414 	ori	r21,r21,16
   29ca8:	a880080c 	andi	r2,r21,32
   29cac:	10011426 	beq	r2,zero,2a100 <___vfiprintf_internal_r+0x7b0>
   29cb0:	da812117 	ldw	r10,1156(sp)
   29cb4:	0005883a 	mov	r2,zero
   29cb8:	54800017 	ldw	r18,0(r10)
   29cbc:	55800117 	ldw	r22,4(r10)
   29cc0:	52800204 	addi	r10,r10,8
   29cc4:	da812115 	stw	r10,1156(sp)
   29cc8:	9588b03a 	or	r4,r18,r22
   29ccc:	d8011d85 	stb	zero,1142(sp)
   29cd0:	4823883a 	mov	r17,r9
   29cd4:	0019883a 	mov	r12,zero
   29cd8:	48000216 	blt	r9,zero,29ce4 <___vfiprintf_internal_r+0x394>
   29cdc:	00ffdfc4 	movi	r3,-129
   29ce0:	a8ea703a 	and	r21,r21,r3
   29ce4:	2002221e 	bne	r4,zero,2a570 <___vfiprintf_internal_r+0xc20>
   29ce8:	4802c726 	beq	r9,zero,2a808 <___vfiprintf_internal_r+0xeb8>
   29cec:	10803fcc 	andi	r2,r2,255
   29cf0:	00c00044 	movi	r3,1
   29cf4:	10c24426 	beq	r2,r3,2a608 <___vfiprintf_internal_r+0xcb8>
   29cf8:	00c00084 	movi	r3,2
   29cfc:	10c2cc26 	beq	r2,r3,2a830 <___vfiprintf_internal_r+0xee0>
   29d00:	d8c10a04 	addi	r3,sp,1064
   29d04:	9008d0fa 	srli	r4,r18,3
   29d08:	b00a977a 	slli	r5,r22,29
   29d0c:	b02cd0fa 	srli	r22,r22,3
   29d10:	948001cc 	andi	r18,r18,7
   29d14:	90800c04 	addi	r2,r18,48
   29d18:	18ffffc4 	addi	r3,r3,-1
   29d1c:	2924b03a 	or	r18,r5,r4
   29d20:	18800005 	stb	r2,0(r3)
   29d24:	9588b03a 	or	r4,r18,r22
   29d28:	203ff61e 	bne	r4,zero,29d04 <__alt_data_end+0xfffea904>
   29d2c:	a900004c 	andi	r4,r21,1
   29d30:	d8c12415 	stw	r3,1168(sp)
   29d34:	2002fb1e 	bne	r4,zero,2a924 <___vfiprintf_internal_r+0xfd4>
   29d38:	da811e17 	ldw	r10,1144(sp)
   29d3c:	50e3c83a 	sub	r17,r10,r3
   29d40:	8825883a 	mov	r18,r17
   29d44:	8a40010e 	bge	r17,r9,29d4c <___vfiprintf_internal_r+0x3fc>
   29d48:	4825883a 	mov	r18,r9
   29d4c:	63003fcc 	andi	r12,r12,255
   29d50:	6300201c 	xori	r12,r12,128
   29d54:	633fe004 	addi	r12,r12,-128
   29d58:	60000126 	beq	r12,zero,29d60 <___vfiprintf_internal_r+0x410>
   29d5c:	94800044 	addi	r18,r18,1
   29d60:	ab80008c 	andi	r14,r21,2
   29d64:	70000126 	beq	r14,zero,29d6c <___vfiprintf_internal_r+0x41c>
   29d68:	94800084 	addi	r18,r18,2
   29d6c:	ad80210c 	andi	r22,r21,132
   29d70:	b001df1e 	bne	r22,zero,2a4f0 <___vfiprintf_internal_r+0xba0>
   29d74:	9c8fc83a 	sub	r7,r19,r18
   29d78:	01c1dd0e 	bge	zero,r7,2a4f0 <___vfiprintf_internal_r+0xba0>
   29d7c:	03000404 	movi	r12,16
   29d80:	d8811c17 	ldw	r2,1136(sp)
   29d84:	61c3920e 	bge	r12,r7,2abd0 <___vfiprintf_internal_r+0x1280>
   29d88:	028000f4 	movhi	r10,3
   29d8c:	52800704 	addi	r10,r10,28
   29d90:	dc012915 	stw	r16,1188(sp)
   29d94:	d9811b17 	ldw	r6,1132(sp)
   29d98:	da812315 	stw	r10,1164(sp)
   29d9c:	00c001c4 	movi	r3,7
   29da0:	da412515 	stw	r9,1172(sp)
   29da4:	db812815 	stw	r14,1184(sp)
   29da8:	3821883a 	mov	r16,r7
   29dac:	00000506 	br	29dc4 <___vfiprintf_internal_r+0x474>
   29db0:	31400084 	addi	r5,r6,2
   29db4:	42000204 	addi	r8,r8,8
   29db8:	200d883a 	mov	r6,r4
   29dbc:	843ffc04 	addi	r16,r16,-16
   29dc0:	64000d0e 	bge	r12,r16,29df8 <___vfiprintf_internal_r+0x4a8>
   29dc4:	10800404 	addi	r2,r2,16
   29dc8:	31000044 	addi	r4,r6,1
   29dcc:	47000015 	stw	fp,0(r8)
   29dd0:	43000115 	stw	r12,4(r8)
   29dd4:	d8811c15 	stw	r2,1136(sp)
   29dd8:	d9011b15 	stw	r4,1132(sp)
   29ddc:	193ff40e 	bge	r3,r4,29db0 <__alt_data_end+0xfffea9b0>
   29de0:	1001b51e 	bne	r2,zero,2a4b8 <___vfiprintf_internal_r+0xb68>
   29de4:	843ffc04 	addi	r16,r16,-16
   29de8:	000d883a 	mov	r6,zero
   29dec:	01400044 	movi	r5,1
   29df0:	d811883a 	mov	r8,sp
   29df4:	643ff316 	blt	r12,r16,29dc4 <__alt_data_end+0xfffea9c4>
   29df8:	800f883a 	mov	r7,r16
   29dfc:	da412517 	ldw	r9,1172(sp)
   29e00:	db812817 	ldw	r14,1184(sp)
   29e04:	dc012917 	ldw	r16,1188(sp)
   29e08:	dac12317 	ldw	r11,1164(sp)
   29e0c:	3887883a 	add	r3,r7,r2
   29e10:	41c00115 	stw	r7,4(r8)
   29e14:	42c00015 	stw	r11,0(r8)
   29e18:	d8c11c15 	stw	r3,1136(sp)
   29e1c:	d9411b15 	stw	r5,1132(sp)
   29e20:	008001c4 	movi	r2,7
   29e24:	11429316 	blt	r2,r5,2a874 <___vfiprintf_internal_r+0xf24>
   29e28:	d9011d87 	ldb	r4,1142(sp)
   29e2c:	42000204 	addi	r8,r8,8
   29e30:	28800044 	addi	r2,r5,1
   29e34:	2001b31e 	bne	r4,zero,2a504 <___vfiprintf_internal_r+0xbb4>
   29e38:	70000c26 	beq	r14,zero,29e6c <___vfiprintf_internal_r+0x51c>
   29e3c:	d9011d04 	addi	r4,sp,1140
   29e40:	18c00084 	addi	r3,r3,2
   29e44:	41000015 	stw	r4,0(r8)
   29e48:	01000084 	movi	r4,2
   29e4c:	41000115 	stw	r4,4(r8)
   29e50:	d8c11c15 	stw	r3,1136(sp)
   29e54:	d8811b15 	stw	r2,1132(sp)
   29e58:	010001c4 	movi	r4,7
   29e5c:	20826516 	blt	r4,r2,2a7f4 <___vfiprintf_internal_r+0xea4>
   29e60:	100b883a 	mov	r5,r2
   29e64:	42000204 	addi	r8,r8,8
   29e68:	10800044 	addi	r2,r2,1
   29e6c:	01002004 	movi	r4,128
   29e70:	b1021a26 	beq	r22,r4,2a6dc <___vfiprintf_internal_r+0xd8c>
   29e74:	4c6dc83a 	sub	r22,r9,r17
   29e78:	0580230e 	bge	zero,r22,29f08 <___vfiprintf_internal_r+0x5b8>
   29e7c:	01c00404 	movi	r7,16
   29e80:	3d83300e 	bge	r7,r22,2ab44 <___vfiprintf_internal_r+0x11f4>
   29e84:	008000f4 	movhi	r2,3
   29e88:	10800304 	addi	r2,r2,12
   29e8c:	d8812315 	stw	r2,1164(sp)
   29e90:	030001c4 	movi	r12,7
   29e94:	00000506 	br	29eac <___vfiprintf_internal_r+0x55c>
   29e98:	28800084 	addi	r2,r5,2
   29e9c:	42000204 	addi	r8,r8,8
   29ea0:	200b883a 	mov	r5,r4
   29ea4:	b5bffc04 	addi	r22,r22,-16
   29ea8:	3d800d0e 	bge	r7,r22,29ee0 <___vfiprintf_internal_r+0x590>
   29eac:	18c00404 	addi	r3,r3,16
   29eb0:	29000044 	addi	r4,r5,1
   29eb4:	45c00015 	stw	r23,0(r8)
   29eb8:	41c00115 	stw	r7,4(r8)
   29ebc:	d8c11c15 	stw	r3,1136(sp)
   29ec0:	d9011b15 	stw	r4,1132(sp)
   29ec4:	613ff40e 	bge	r12,r4,29e98 <__alt_data_end+0xfffeaa98>
   29ec8:	18019b1e 	bne	r3,zero,2a538 <___vfiprintf_internal_r+0xbe8>
   29ecc:	b5bffc04 	addi	r22,r22,-16
   29ed0:	000b883a 	mov	r5,zero
   29ed4:	00800044 	movi	r2,1
   29ed8:	d811883a 	mov	r8,sp
   29edc:	3dbff316 	blt	r7,r22,29eac <__alt_data_end+0xfffeaaac>
   29ee0:	da812317 	ldw	r10,1164(sp)
   29ee4:	1d87883a 	add	r3,r3,r22
   29ee8:	45800115 	stw	r22,4(r8)
   29eec:	42800015 	stw	r10,0(r8)
   29ef0:	d8c11c15 	stw	r3,1136(sp)
   29ef4:	d8811b15 	stw	r2,1132(sp)
   29ef8:	010001c4 	movi	r4,7
   29efc:	2081dd16 	blt	r4,r2,2a674 <___vfiprintf_internal_r+0xd24>
   29f00:	42000204 	addi	r8,r8,8
   29f04:	10800044 	addi	r2,r2,1
   29f08:	da812417 	ldw	r10,1168(sp)
   29f0c:	1c47883a 	add	r3,r3,r17
   29f10:	44400115 	stw	r17,4(r8)
   29f14:	42800015 	stw	r10,0(r8)
   29f18:	d8c11c15 	stw	r3,1136(sp)
   29f1c:	d8811b15 	stw	r2,1132(sp)
   29f20:	010001c4 	movi	r4,7
   29f24:	2081dc0e 	bge	r4,r2,2a698 <___vfiprintf_internal_r+0xd48>
   29f28:	1802611e 	bne	r3,zero,2a8b0 <___vfiprintf_internal_r+0xf60>
   29f2c:	d8011b15 	stw	zero,1132(sp)
   29f30:	aac0010c 	andi	r11,r21,4
   29f34:	58002726 	beq	r11,zero,29fd4 <___vfiprintf_internal_r+0x684>
   29f38:	9ca3c83a 	sub	r17,r19,r18
   29f3c:	d811883a 	mov	r8,sp
   29f40:	0443510e 	bge	zero,r17,2ac88 <___vfiprintf_internal_r+0x1338>
   29f44:	01c00404 	movi	r7,16
   29f48:	3c43320e 	bge	r7,r17,2ac14 <___vfiprintf_internal_r+0x12c4>
   29f4c:	008000f4 	movhi	r2,3
   29f50:	10800704 	addi	r2,r2,28
   29f54:	d9011b17 	ldw	r4,1132(sp)
   29f58:	d8812315 	stw	r2,1164(sp)
   29f5c:	382d883a 	mov	r22,r7
   29f60:	054001c4 	movi	r21,7
   29f64:	00000506 	br	29f7c <___vfiprintf_internal_r+0x62c>
   29f68:	21400084 	addi	r5,r4,2
   29f6c:	42000204 	addi	r8,r8,8
   29f70:	1009883a 	mov	r4,r2
   29f74:	8c7ffc04 	addi	r17,r17,-16
   29f78:	b4400d0e 	bge	r22,r17,29fb0 <___vfiprintf_internal_r+0x660>
   29f7c:	18c00404 	addi	r3,r3,16
   29f80:	20800044 	addi	r2,r4,1
   29f84:	47000015 	stw	fp,0(r8)
   29f88:	45800115 	stw	r22,4(r8)
   29f8c:	d8c11c15 	stw	r3,1136(sp)
   29f90:	d8811b15 	stw	r2,1132(sp)
   29f94:	a8bff40e 	bge	r21,r2,29f68 <__alt_data_end+0xfffeab68>
   29f98:	1801ac1e 	bne	r3,zero,2a64c <___vfiprintf_internal_r+0xcfc>
   29f9c:	8c7ffc04 	addi	r17,r17,-16
   29fa0:	0009883a 	mov	r4,zero
   29fa4:	01400044 	movi	r5,1
   29fa8:	d811883a 	mov	r8,sp
   29fac:	b47ff316 	blt	r22,r17,29f7c <__alt_data_end+0xfffeab7c>
   29fb0:	da812317 	ldw	r10,1164(sp)
   29fb4:	1c47883a 	add	r3,r3,r17
   29fb8:	44400115 	stw	r17,4(r8)
   29fbc:	42800015 	stw	r10,0(r8)
   29fc0:	d8c11c15 	stw	r3,1136(sp)
   29fc4:	d9411b15 	stw	r5,1132(sp)
   29fc8:	008001c4 	movi	r2,7
   29fcc:	1141b70e 	bge	r2,r5,2a6ac <___vfiprintf_internal_r+0xd5c>
   29fd0:	1802cf1e 	bne	r3,zero,2ab10 <___vfiprintf_internal_r+0x11c0>
   29fd4:	94c2ca16 	blt	r18,r19,2ab00 <___vfiprintf_internal_r+0x11b0>
   29fd8:	dac12217 	ldw	r11,1160(sp)
   29fdc:	5c97883a 	add	r11,r11,r18
   29fe0:	dac12215 	stw	r11,1160(sp)
   29fe4:	d8011b15 	stw	zero,1132(sp)
   29fe8:	d811883a 	mov	r8,sp
   29fec:	003e8d06 	br	29a24 <__alt_data_end+0xfffea624>
   29ff0:	d9012017 	ldw	r4,1152(sp)
   29ff4:	a00b883a 	mov	r5,r20
   29ff8:	00247100 	call	24710 <__swsetup_r>
   29ffc:	10002c1e 	bne	r2,zero,2a0b0 <___vfiprintf_internal_r+0x760>
   2a000:	a0c0030b 	ldhu	r3,12(r20)
   2a004:	01000284 	movi	r4,10
   2a008:	1805883a 	mov	r2,r3
   2a00c:	1080068c 	andi	r2,r2,26
   2a010:	113e731e 	bne	r2,r4,299e0 <__alt_data_end+0xfffea5e0>
   2a014:	a080038b 	ldhu	r2,14(r20)
   2a018:	113fffcc 	andi	r4,r2,65535
   2a01c:	2120001c 	xori	r4,r4,32768
   2a020:	21200004 	addi	r4,r4,-32768
   2a024:	203e6e16 	blt	r4,zero,299e0 <__alt_data_end+0xfffea5e0>
   2a028:	a3001917 	ldw	r12,100(r20)
   2a02c:	a2c00717 	ldw	r11,28(r20)
   2a030:	a2800917 	ldw	r10,36(r20)
   2a034:	d9012017 	ldw	r4,1152(sp)
   2a038:	d9c12117 	ldw	r7,1156(sp)
   2a03c:	02410004 	movi	r9,1024
   2a040:	18ffff4c 	andi	r3,r3,65533
   2a044:	da4b883a 	add	r5,sp,r9
   2a048:	b00d883a 	mov	r6,r22
   2a04c:	d8c1030d 	sth	r3,1036(sp)
   2a050:	db011915 	stw	r12,1124(sp)
   2a054:	d881038d 	sth	r2,1038(sp)
   2a058:	dac10715 	stw	r11,1052(sp)
   2a05c:	da810915 	stw	r10,1060(sp)
   2a060:	dec10015 	stw	sp,1024(sp)
   2a064:	dec10415 	stw	sp,1040(sp)
   2a068:	da410215 	stw	r9,1032(sp)
   2a06c:	da410515 	stw	r9,1044(sp)
   2a070:	d8010615 	stw	zero,1048(sp)
   2a074:	00299500 	call	29950 <___vfiprintf_internal_r>
   2a078:	1021883a 	mov	r16,r2
   2a07c:	10000416 	blt	r2,zero,2a090 <___vfiprintf_internal_r+0x740>
   2a080:	d9012017 	ldw	r4,1152(sp)
   2a084:	d9410004 	addi	r5,sp,1024
   2a088:	00261680 	call	26168 <_fflush_r>
   2a08c:	1002fc1e 	bne	r2,zero,2ac80 <___vfiprintf_internal_r+0x1330>
   2a090:	d881030b 	ldhu	r2,1036(sp)
   2a094:	1080100c 	andi	r2,r2,64
   2a098:	10000326 	beq	r2,zero,2a0a8 <___vfiprintf_internal_r+0x758>
   2a09c:	a080030b 	ldhu	r2,12(r20)
   2a0a0:	10801014 	ori	r2,r2,64
   2a0a4:	a080030d 	sth	r2,12(r20)
   2a0a8:	8005883a 	mov	r2,r16
   2a0ac:	00000106 	br	2a0b4 <___vfiprintf_internal_r+0x764>
   2a0b0:	00bfffc4 	movi	r2,-1
   2a0b4:	dfc13517 	ldw	ra,1236(sp)
   2a0b8:	df013417 	ldw	fp,1232(sp)
   2a0bc:	ddc13317 	ldw	r23,1228(sp)
   2a0c0:	dd813217 	ldw	r22,1224(sp)
   2a0c4:	dd413117 	ldw	r21,1220(sp)
   2a0c8:	dd013017 	ldw	r20,1216(sp)
   2a0cc:	dcc12f17 	ldw	r19,1212(sp)
   2a0d0:	dc812e17 	ldw	r18,1208(sp)
   2a0d4:	dc412d17 	ldw	r17,1204(sp)
   2a0d8:	dc012c17 	ldw	r16,1200(sp)
   2a0dc:	dec13604 	addi	sp,sp,1240
   2a0e0:	f800283a 	ret
   2a0e4:	00267100 	call	26710 <__sinit>
   2a0e8:	003e2b06 	br	29998 <__alt_data_end+0xfffea598>
   2a0ec:	04e7c83a 	sub	r19,zero,r19
   2a0f0:	d8812115 	stw	r2,1156(sp)
   2a0f4:	ad400114 	ori	r21,r21,4
   2a0f8:	80c00007 	ldb	r3,0(r16)
   2a0fc:	003e7306 	br	29acc <__alt_data_end+0xfffea6cc>
   2a100:	a880040c 	andi	r2,r21,16
   2a104:	1000e41e 	bne	r2,zero,2a498 <___vfiprintf_internal_r+0xb48>
   2a108:	a880100c 	andi	r2,r21,64
   2a10c:	1000e226 	beq	r2,zero,2a498 <___vfiprintf_internal_r+0xb48>
   2a110:	da812117 	ldw	r10,1156(sp)
   2a114:	002d883a 	mov	r22,zero
   2a118:	0005883a 	mov	r2,zero
   2a11c:	5480000b 	ldhu	r18,0(r10)
   2a120:	52800104 	addi	r10,r10,4
   2a124:	da812115 	stw	r10,1156(sp)
   2a128:	9009883a 	mov	r4,r18
   2a12c:	003ee706 	br	29ccc <__alt_data_end+0xfffea8cc>
   2a130:	da812117 	ldw	r10,1156(sp)
   2a134:	00800044 	movi	r2,1
   2a138:	54800017 	ldw	r18,0(r10)
   2a13c:	55800117 	ldw	r22,4(r10)
   2a140:	52800204 	addi	r10,r10,8
   2a144:	da812115 	stw	r10,1156(sp)
   2a148:	9588b03a 	or	r4,r18,r22
   2a14c:	003edf06 	br	29ccc <__alt_data_end+0xfffea8cc>
   2a150:	02c000f4 	movhi	r11,3
   2a154:	5aff9d04 	addi	r11,r11,-396
   2a158:	d9811d85 	stb	r6,1142(sp)
   2a15c:	dac12615 	stw	r11,1176(sp)
   2a160:	a900080c 	andi	r4,r21,32
   2a164:	d8812117 	ldw	r2,1156(sp)
   2a168:	2000a526 	beq	r4,zero,2a400 <___vfiprintf_internal_r+0xab0>
   2a16c:	da812117 	ldw	r10,1156(sp)
   2a170:	14800017 	ldw	r18,0(r2)
   2a174:	15800117 	ldw	r22,4(r2)
   2a178:	52800204 	addi	r10,r10,8
   2a17c:	da812115 	stw	r10,1156(sp)
   2a180:	a880004c 	andi	r2,r21,1
   2a184:	1001d926 	beq	r2,zero,2a8ec <___vfiprintf_internal_r+0xf9c>
   2a188:	9588b03a 	or	r4,r18,r22
   2a18c:	20024426 	beq	r4,zero,2aaa0 <___vfiprintf_internal_r+0x1150>
   2a190:	00800c04 	movi	r2,48
   2a194:	d8811d05 	stb	r2,1140(sp)
   2a198:	d8c11d45 	stb	r3,1141(sp)
   2a19c:	ad400094 	ori	r21,r21,2
   2a1a0:	00800084 	movi	r2,2
   2a1a4:	003ec906 	br	29ccc <__alt_data_end+0xfffea8cc>
   2a1a8:	da812117 	ldw	r10,1156(sp)
   2a1ac:	04800044 	movi	r18,1
   2a1b0:	dac10004 	addi	r11,sp,1024
   2a1b4:	50800017 	ldw	r2,0(r10)
   2a1b8:	52800104 	addi	r10,r10,4
   2a1bc:	d8011d85 	stb	zero,1142(sp)
   2a1c0:	d8810005 	stb	r2,1024(sp)
   2a1c4:	da812115 	stw	r10,1156(sp)
   2a1c8:	9023883a 	mov	r17,r18
   2a1cc:	dac12415 	stw	r11,1168(sp)
   2a1d0:	0013883a 	mov	r9,zero
   2a1d4:	003ee206 	br	29d60 <__alt_data_end+0xfffea960>
   2a1d8:	ad402014 	ori	r21,r21,128
   2a1dc:	80c00007 	ldb	r3,0(r16)
   2a1e0:	003e3a06 	br	29acc <__alt_data_end+0xfffea6cc>
   2a1e4:	8015883a 	mov	r10,r16
   2a1e8:	0027883a 	mov	r19,zero
   2a1ec:	18bff404 	addi	r2,r3,-48
   2a1f0:	50c00007 	ldb	r3,0(r10)
   2a1f4:	9cc002a4 	muli	r19,r19,10
   2a1f8:	84000044 	addi	r16,r16,1
   2a1fc:	8015883a 	mov	r10,r16
   2a200:	98a7883a 	add	r19,r19,r2
   2a204:	18bff404 	addi	r2,r3,-48
   2a208:	28bff92e 	bgeu	r5,r2,2a1f0 <__alt_data_end+0xfffeadf0>
   2a20c:	003e3006 	br	29ad0 <__alt_data_end+0xfffea6d0>
   2a210:	ad400414 	ori	r21,r21,16
   2a214:	d9811d85 	stb	r6,1142(sp)
   2a218:	a880080c 	andi	r2,r21,32
   2a21c:	d8c12117 	ldw	r3,1156(sp)
   2a220:	10004b26 	beq	r2,zero,2a350 <___vfiprintf_internal_r+0xa00>
   2a224:	da812117 	ldw	r10,1156(sp)
   2a228:	18800117 	ldw	r2,4(r3)
   2a22c:	1c800017 	ldw	r18,0(r3)
   2a230:	52800204 	addi	r10,r10,8
   2a234:	da812115 	stw	r10,1156(sp)
   2a238:	102d883a 	mov	r22,r2
   2a23c:	1001f116 	blt	r2,zero,2aa04 <___vfiprintf_internal_r+0x10b4>
   2a240:	db011d83 	ldbu	r12,1142(sp)
   2a244:	4823883a 	mov	r17,r9
   2a248:	00800044 	movi	r2,1
   2a24c:	9588b03a 	or	r4,r18,r22
   2a250:	003ea106 	br	29cd8 <__alt_data_end+0xfffea8d8>
   2a254:	80c00007 	ldb	r3,0(r16)
   2a258:	82800044 	addi	r10,r16,1
   2a25c:	1b027f26 	beq	r3,r12,2ac5c <___vfiprintf_internal_r+0x130c>
   2a260:	18bff404 	addi	r2,r3,-48
   2a264:	5021883a 	mov	r16,r10
   2a268:	0013883a 	mov	r9,zero
   2a26c:	28be1836 	bltu	r5,r2,29ad0 <__alt_data_end+0xfffea6d0>
   2a270:	80c00007 	ldb	r3,0(r16)
   2a274:	4a4002a4 	muli	r9,r9,10
   2a278:	84000044 	addi	r16,r16,1
   2a27c:	1253883a 	add	r9,r2,r9
   2a280:	18bff404 	addi	r2,r3,-48
   2a284:	28bffa2e 	bgeu	r5,r2,2a270 <__alt_data_end+0xfffeae70>
   2a288:	483e110e 	bge	r9,zero,29ad0 <__alt_data_end+0xfffea6d0>
   2a28c:	027fffc4 	movi	r9,-1
   2a290:	003e0f06 	br	29ad0 <__alt_data_end+0xfffea6d0>
   2a294:	d9811d85 	stb	r6,1142(sp)
   2a298:	a880080c 	andi	r2,r21,32
   2a29c:	1001ee26 	beq	r2,zero,2aa58 <___vfiprintf_internal_r+0x1108>
   2a2a0:	da812117 	ldw	r10,1156(sp)
   2a2a4:	dac12217 	ldw	r11,1160(sp)
   2a2a8:	50800017 	ldw	r2,0(r10)
   2a2ac:	5807d7fa 	srai	r3,r11,31
   2a2b0:	52800104 	addi	r10,r10,4
   2a2b4:	da812115 	stw	r10,1156(sp)
   2a2b8:	12c00015 	stw	r11,0(r2)
   2a2bc:	10c00115 	stw	r3,4(r2)
   2a2c0:	003dd806 	br	29a24 <__alt_data_end+0xfffea624>
   2a2c4:	30803fcc 	andi	r2,r6,255
   2a2c8:	1080201c 	xori	r2,r2,128
   2a2cc:	10bfe004 	addi	r2,r2,-128
   2a2d0:	1001df1e 	bne	r2,zero,2aa50 <___vfiprintf_internal_r+0x1100>
   2a2d4:	01800804 	movi	r6,32
   2a2d8:	80c00007 	ldb	r3,0(r16)
   2a2dc:	003dfb06 	br	29acc <__alt_data_end+0xfffea6cc>
   2a2e0:	da812117 	ldw	r10,1156(sp)
   2a2e4:	dac12117 	ldw	r11,1156(sp)
   2a2e8:	d8011d85 	stb	zero,1142(sp)
   2a2ec:	52800017 	ldw	r10,0(r10)
   2a2f0:	5d800104 	addi	r22,r11,4
   2a2f4:	da812415 	stw	r10,1168(sp)
   2a2f8:	50023b26 	beq	r10,zero,2abe8 <___vfiprintf_internal_r+0x1298>
   2a2fc:	d9012417 	ldw	r4,1168(sp)
   2a300:	48021f16 	blt	r9,zero,2ab80 <___vfiprintf_internal_r+0x1230>
   2a304:	480d883a 	mov	r6,r9
   2a308:	000b883a 	mov	r5,zero
   2a30c:	da012a15 	stw	r8,1192(sp)
   2a310:	da412b15 	stw	r9,1196(sp)
   2a314:	0027bc80 	call	27bc8 <memchr>
   2a318:	da012a17 	ldw	r8,1192(sp)
   2a31c:	da412b17 	ldw	r9,1196(sp)
   2a320:	10024726 	beq	r2,zero,2ac40 <___vfiprintf_internal_r+0x12f0>
   2a324:	d8c12417 	ldw	r3,1168(sp)
   2a328:	10e3c83a 	sub	r17,r2,r3
   2a32c:	4c41f616 	blt	r9,r17,2ab08 <___vfiprintf_internal_r+0x11b8>
   2a330:	db011d83 	ldbu	r12,1142(sp)
   2a334:	dd812115 	stw	r22,1156(sp)
   2a338:	0013883a 	mov	r9,zero
   2a33c:	003e8006 	br	29d40 <__alt_data_end+0xfffea940>
   2a340:	d9811d85 	stb	r6,1142(sp)
   2a344:	a880080c 	andi	r2,r21,32
   2a348:	d8c12117 	ldw	r3,1156(sp)
   2a34c:	103fb51e 	bne	r2,zero,2a224 <__alt_data_end+0xfffeae24>
   2a350:	a880040c 	andi	r2,r21,16
   2a354:	10015e1e 	bne	r2,zero,2a8d0 <___vfiprintf_internal_r+0xf80>
   2a358:	a880100c 	andi	r2,r21,64
   2a35c:	10015c26 	beq	r2,zero,2a8d0 <___vfiprintf_internal_r+0xf80>
   2a360:	1c80000f 	ldh	r18,0(r3)
   2a364:	da812117 	ldw	r10,1156(sp)
   2a368:	902dd7fa 	srai	r22,r18,31
   2a36c:	52800104 	addi	r10,r10,4
   2a370:	da812115 	stw	r10,1156(sp)
   2a374:	b005883a 	mov	r2,r22
   2a378:	003fb006 	br	2a23c <__alt_data_end+0xfffeae3c>
   2a37c:	da812117 	ldw	r10,1156(sp)
   2a380:	00800c04 	movi	r2,48
   2a384:	02c000f4 	movhi	r11,3
   2a388:	54800017 	ldw	r18,0(r10)
   2a38c:	d8811d05 	stb	r2,1140(sp)
   2a390:	52800104 	addi	r10,r10,4
   2a394:	00801e04 	movi	r2,120
   2a398:	5affa204 	addi	r11,r11,-376
   2a39c:	d8811d45 	stb	r2,1141(sp)
   2a3a0:	002d883a 	mov	r22,zero
   2a3a4:	ad400094 	ori	r21,r21,2
   2a3a8:	da812115 	stw	r10,1156(sp)
   2a3ac:	dac12615 	stw	r11,1176(sp)
   2a3b0:	00800084 	movi	r2,2
   2a3b4:	9009883a 	mov	r4,r18
   2a3b8:	003e4406 	br	29ccc <__alt_data_end+0xfffea8cc>
   2a3bc:	ad400814 	ori	r21,r21,32
   2a3c0:	80c00007 	ldb	r3,0(r16)
   2a3c4:	003dc106 	br	29acc <__alt_data_end+0xfffea6cc>
   2a3c8:	ad401014 	ori	r21,r21,64
   2a3cc:	80c00007 	ldb	r3,0(r16)
   2a3d0:	003dbe06 	br	29acc <__alt_data_end+0xfffea6cc>
   2a3d4:	80c00007 	ldb	r3,0(r16)
   2a3d8:	19c1de26 	beq	r3,r7,2ab54 <___vfiprintf_internal_r+0x1204>
   2a3dc:	ad400414 	ori	r21,r21,16
   2a3e0:	003dba06 	br	29acc <__alt_data_end+0xfffea6cc>
   2a3e4:	008000f4 	movhi	r2,3
   2a3e8:	10bfa204 	addi	r2,r2,-376
   2a3ec:	d8812615 	stw	r2,1176(sp)
   2a3f0:	d9811d85 	stb	r6,1142(sp)
   2a3f4:	a900080c 	andi	r4,r21,32
   2a3f8:	d8812117 	ldw	r2,1156(sp)
   2a3fc:	203f5b1e 	bne	r4,zero,2a16c <__alt_data_end+0xfffead6c>
   2a400:	a900040c 	andi	r4,r21,16
   2a404:	2001a826 	beq	r4,zero,2aaa8 <___vfiprintf_internal_r+0x1158>
   2a408:	dac12117 	ldw	r11,1156(sp)
   2a40c:	14800017 	ldw	r18,0(r2)
   2a410:	002d883a 	mov	r22,zero
   2a414:	5ac00104 	addi	r11,r11,4
   2a418:	dac12115 	stw	r11,1156(sp)
   2a41c:	003f5806 	br	2a180 <__alt_data_end+0xfffead80>
   2a420:	da812117 	ldw	r10,1156(sp)
   2a424:	54c00017 	ldw	r19,0(r10)
   2a428:	50800104 	addi	r2,r10,4
   2a42c:	983f2f16 	blt	r19,zero,2a0ec <__alt_data_end+0xfffeacec>
   2a430:	d8812115 	stw	r2,1156(sp)
   2a434:	80c00007 	ldb	r3,0(r16)
   2a438:	003da406 	br	29acc <__alt_data_end+0xfffea6cc>
   2a43c:	01800ac4 	movi	r6,43
   2a440:	80c00007 	ldb	r3,0(r16)
   2a444:	003da106 	br	29acc <__alt_data_end+0xfffea6cc>
   2a448:	ad400054 	ori	r21,r21,1
   2a44c:	80c00007 	ldb	r3,0(r16)
   2a450:	003d9e06 	br	29acc <__alt_data_end+0xfffea6cc>
   2a454:	d9811d85 	stb	r6,1142(sp)
   2a458:	18007126 	beq	r3,zero,2a620 <___vfiprintf_internal_r+0xcd0>
   2a45c:	04800044 	movi	r18,1
   2a460:	d8c10005 	stb	r3,1024(sp)
   2a464:	d8c10004 	addi	r3,sp,1024
   2a468:	d8011d85 	stb	zero,1142(sp)
   2a46c:	9023883a 	mov	r17,r18
   2a470:	d8c12415 	stw	r3,1168(sp)
   2a474:	003f5606 	br	2a1d0 <__alt_data_end+0xfffeadd0>
   2a478:	dac12117 	ldw	r11,1156(sp)
   2a47c:	002d883a 	mov	r22,zero
   2a480:	00800044 	movi	r2,1
   2a484:	5c800017 	ldw	r18,0(r11)
   2a488:	5ac00104 	addi	r11,r11,4
   2a48c:	dac12115 	stw	r11,1156(sp)
   2a490:	9009883a 	mov	r4,r18
   2a494:	003e0d06 	br	29ccc <__alt_data_end+0xfffea8cc>
   2a498:	dac12117 	ldw	r11,1156(sp)
   2a49c:	002d883a 	mov	r22,zero
   2a4a0:	0005883a 	mov	r2,zero
   2a4a4:	5c800017 	ldw	r18,0(r11)
   2a4a8:	5ac00104 	addi	r11,r11,4
   2a4ac:	dac12115 	stw	r11,1156(sp)
   2a4b0:	9009883a 	mov	r4,r18
   2a4b4:	003e0506 	br	29ccc <__alt_data_end+0xfffea8cc>
   2a4b8:	d9012017 	ldw	r4,1152(sp)
   2a4bc:	a00b883a 	mov	r5,r20
   2a4c0:	d9811a04 	addi	r6,sp,1128
   2a4c4:	d8c12a15 	stw	r3,1192(sp)
   2a4c8:	db012b15 	stw	r12,1196(sp)
   2a4cc:	002983c0 	call	2983c <__sprint_r.part.0>
   2a4d0:	d8c12a17 	ldw	r3,1192(sp)
   2a4d4:	db012b17 	ldw	r12,1196(sp)
   2a4d8:	1000571e 	bne	r2,zero,2a638 <___vfiprintf_internal_r+0xce8>
   2a4dc:	d9811b17 	ldw	r6,1132(sp)
   2a4e0:	d8811c17 	ldw	r2,1136(sp)
   2a4e4:	d811883a 	mov	r8,sp
   2a4e8:	31400044 	addi	r5,r6,1
   2a4ec:	003e3306 	br	29dbc <__alt_data_end+0xfffea9bc>
   2a4f0:	d9411b17 	ldw	r5,1132(sp)
   2a4f4:	d8c11c17 	ldw	r3,1136(sp)
   2a4f8:	28800044 	addi	r2,r5,1
   2a4fc:	d9011d87 	ldb	r4,1142(sp)
   2a500:	203e4d26 	beq	r4,zero,29e38 <__alt_data_end+0xfffeaa38>
   2a504:	01000044 	movi	r4,1
   2a508:	d9411d84 	addi	r5,sp,1142
   2a50c:	1907883a 	add	r3,r3,r4
   2a510:	41400015 	stw	r5,0(r8)
   2a514:	41000115 	stw	r4,4(r8)
   2a518:	d8c11c15 	stw	r3,1136(sp)
   2a51c:	d8811b15 	stw	r2,1132(sp)
   2a520:	014001c4 	movi	r5,7
   2a524:	2880aa16 	blt	r5,r2,2a7d0 <___vfiprintf_internal_r+0xe80>
   2a528:	100b883a 	mov	r5,r2
   2a52c:	42000204 	addi	r8,r8,8
   2a530:	10800044 	addi	r2,r2,1
   2a534:	003e4006 	br	29e38 <__alt_data_end+0xfffeaa38>
   2a538:	d9012017 	ldw	r4,1152(sp)
   2a53c:	a00b883a 	mov	r5,r20
   2a540:	d9811a04 	addi	r6,sp,1128
   2a544:	d9c12a15 	stw	r7,1192(sp)
   2a548:	db012b15 	stw	r12,1196(sp)
   2a54c:	002983c0 	call	2983c <__sprint_r.part.0>
   2a550:	d9c12a17 	ldw	r7,1192(sp)
   2a554:	db012b17 	ldw	r12,1196(sp)
   2a558:	1000371e 	bne	r2,zero,2a638 <___vfiprintf_internal_r+0xce8>
   2a55c:	d9411b17 	ldw	r5,1132(sp)
   2a560:	d8c11c17 	ldw	r3,1136(sp)
   2a564:	d811883a 	mov	r8,sp
   2a568:	28800044 	addi	r2,r5,1
   2a56c:	003e4d06 	br	29ea4 <__alt_data_end+0xfffeaaa4>
   2a570:	10803fcc 	andi	r2,r2,255
   2a574:	00c00044 	movi	r3,1
   2a578:	10fddf1e 	bne	r2,r3,29cf8 <__alt_data_end+0xfffea8f8>
   2a57c:	b000021e 	bne	r22,zero,2a588 <___vfiprintf_internal_r+0xc38>
   2a580:	00800244 	movi	r2,9
   2a584:	1480202e 	bgeu	r2,r18,2a608 <___vfiprintf_internal_r+0xcb8>
   2a588:	dc012515 	stw	r16,1172(sp)
   2a58c:	dc410a04 	addi	r17,sp,1064
   2a590:	9021883a 	mov	r16,r18
   2a594:	da012415 	stw	r8,1168(sp)
   2a598:	b025883a 	mov	r18,r22
   2a59c:	da412315 	stw	r9,1164(sp)
   2a5a0:	602d883a 	mov	r22,r12
   2a5a4:	8009883a 	mov	r4,r16
   2a5a8:	900b883a 	mov	r5,r18
   2a5ac:	01800284 	movi	r6,10
   2a5b0:	000f883a 	mov	r7,zero
   2a5b4:	002bbc80 	call	2bbc8 <__umoddi3>
   2a5b8:	10800c04 	addi	r2,r2,48
   2a5bc:	8c7fffc4 	addi	r17,r17,-1
   2a5c0:	8009883a 	mov	r4,r16
   2a5c4:	900b883a 	mov	r5,r18
   2a5c8:	01800284 	movi	r6,10
   2a5cc:	000f883a 	mov	r7,zero
   2a5d0:	88800005 	stb	r2,0(r17)
   2a5d4:	002b6080 	call	2b608 <__udivdi3>
   2a5d8:	1021883a 	mov	r16,r2
   2a5dc:	10c4b03a 	or	r2,r2,r3
   2a5e0:	1825883a 	mov	r18,r3
   2a5e4:	103fef1e 	bne	r2,zero,2a5a4 <__alt_data_end+0xfffeb1a4>
   2a5e8:	da811e17 	ldw	r10,1144(sp)
   2a5ec:	da012417 	ldw	r8,1168(sp)
   2a5f0:	da412317 	ldw	r9,1164(sp)
   2a5f4:	dc412415 	stw	r17,1168(sp)
   2a5f8:	b019883a 	mov	r12,r22
   2a5fc:	dc012517 	ldw	r16,1172(sp)
   2a600:	5463c83a 	sub	r17,r10,r17
   2a604:	003dce06 	br	29d40 <__alt_data_end+0xfffea940>
   2a608:	94800c04 	addi	r18,r18,48
   2a60c:	d8c109c4 	addi	r3,sp,1063
   2a610:	dc8109c5 	stb	r18,1063(sp)
   2a614:	dc412717 	ldw	r17,1180(sp)
   2a618:	d8c12415 	stw	r3,1168(sp)
   2a61c:	003dc806 	br	29d40 <__alt_data_end+0xfffea940>
   2a620:	d8811c17 	ldw	r2,1136(sp)
   2a624:	10000426 	beq	r2,zero,2a638 <___vfiprintf_internal_r+0xce8>
   2a628:	d9012017 	ldw	r4,1152(sp)
   2a62c:	a00b883a 	mov	r5,r20
   2a630:	d9811a04 	addi	r6,sp,1128
   2a634:	002983c0 	call	2983c <__sprint_r.part.0>
   2a638:	a080030b 	ldhu	r2,12(r20)
   2a63c:	1080100c 	andi	r2,r2,64
   2a640:	103e9b1e 	bne	r2,zero,2a0b0 <__alt_data_end+0xfffeacb0>
   2a644:	d8812217 	ldw	r2,1160(sp)
   2a648:	003e9a06 	br	2a0b4 <__alt_data_end+0xfffeacb4>
   2a64c:	d9012017 	ldw	r4,1152(sp)
   2a650:	a00b883a 	mov	r5,r20
   2a654:	d9811a04 	addi	r6,sp,1128
   2a658:	002983c0 	call	2983c <__sprint_r.part.0>
   2a65c:	103ff61e 	bne	r2,zero,2a638 <__alt_data_end+0xfffeb238>
   2a660:	d9011b17 	ldw	r4,1132(sp)
   2a664:	d8c11c17 	ldw	r3,1136(sp)
   2a668:	d811883a 	mov	r8,sp
   2a66c:	21400044 	addi	r5,r4,1
   2a670:	003e4006 	br	29f74 <__alt_data_end+0xfffeab74>
   2a674:	1800d61e 	bne	r3,zero,2a9d0 <___vfiprintf_internal_r+0x1080>
   2a678:	dac12417 	ldw	r11,1168(sp)
   2a67c:	00800044 	movi	r2,1
   2a680:	dc400115 	stw	r17,4(sp)
   2a684:	dac00015 	stw	r11,0(sp)
   2a688:	dc411c15 	stw	r17,1136(sp)
   2a68c:	d8811b15 	stw	r2,1132(sp)
   2a690:	8807883a 	mov	r3,r17
   2a694:	d811883a 	mov	r8,sp
   2a698:	42000204 	addi	r8,r8,8
   2a69c:	aac0010c 	andi	r11,r21,4
   2a6a0:	58000226 	beq	r11,zero,2a6ac <___vfiprintf_internal_r+0xd5c>
   2a6a4:	9ca3c83a 	sub	r17,r19,r18
   2a6a8:	047e2616 	blt	zero,r17,29f44 <__alt_data_end+0xfffeab44>
   2a6ac:	94c0010e 	bge	r18,r19,2a6b4 <___vfiprintf_internal_r+0xd64>
   2a6b0:	9825883a 	mov	r18,r19
   2a6b4:	da812217 	ldw	r10,1160(sp)
   2a6b8:	5495883a 	add	r10,r10,r18
   2a6bc:	da812215 	stw	r10,1160(sp)
   2a6c0:	183e4826 	beq	r3,zero,29fe4 <__alt_data_end+0xfffeabe4>
   2a6c4:	d9012017 	ldw	r4,1152(sp)
   2a6c8:	a00b883a 	mov	r5,r20
   2a6cc:	d9811a04 	addi	r6,sp,1128
   2a6d0:	002983c0 	call	2983c <__sprint_r.part.0>
   2a6d4:	103e4326 	beq	r2,zero,29fe4 <__alt_data_end+0xfffeabe4>
   2a6d8:	003fd706 	br	2a638 <__alt_data_end+0xfffeb238>
   2a6dc:	9cadc83a 	sub	r22,r19,r18
   2a6e0:	05bde40e 	bge	zero,r22,29e74 <__alt_data_end+0xfffeaa74>
   2a6e4:	03000404 	movi	r12,16
   2a6e8:	6581500e 	bge	r12,r22,2ac2c <___vfiprintf_internal_r+0x12dc>
   2a6ec:	008000f4 	movhi	r2,3
   2a6f0:	10800304 	addi	r2,r2,12
   2a6f4:	d8812315 	stw	r2,1164(sp)
   2a6f8:	8005883a 	mov	r2,r16
   2a6fc:	038001c4 	movi	r14,7
   2a700:	b021883a 	mov	r16,r22
   2a704:	da412515 	stw	r9,1172(sp)
   2a708:	102d883a 	mov	r22,r2
   2a70c:	00000506 	br	2a724 <___vfiprintf_internal_r+0xdd4>
   2a710:	29000084 	addi	r4,r5,2
   2a714:	42000204 	addi	r8,r8,8
   2a718:	100b883a 	mov	r5,r2
   2a71c:	843ffc04 	addi	r16,r16,-16
   2a720:	64000d0e 	bge	r12,r16,2a758 <___vfiprintf_internal_r+0xe08>
   2a724:	18c00404 	addi	r3,r3,16
   2a728:	28800044 	addi	r2,r5,1
   2a72c:	45c00015 	stw	r23,0(r8)
   2a730:	43000115 	stw	r12,4(r8)
   2a734:	d8c11c15 	stw	r3,1136(sp)
   2a738:	d8811b15 	stw	r2,1132(sp)
   2a73c:	70bff40e 	bge	r14,r2,2a710 <__alt_data_end+0xfffeb310>
   2a740:	1800151e 	bne	r3,zero,2a798 <___vfiprintf_internal_r+0xe48>
   2a744:	843ffc04 	addi	r16,r16,-16
   2a748:	000b883a 	mov	r5,zero
   2a74c:	01000044 	movi	r4,1
   2a750:	d811883a 	mov	r8,sp
   2a754:	643ff316 	blt	r12,r16,2a724 <__alt_data_end+0xfffeb324>
   2a758:	da412517 	ldw	r9,1172(sp)
   2a75c:	b005883a 	mov	r2,r22
   2a760:	802d883a 	mov	r22,r16
   2a764:	1021883a 	mov	r16,r2
   2a768:	da812317 	ldw	r10,1164(sp)
   2a76c:	1d87883a 	add	r3,r3,r22
   2a770:	45800115 	stw	r22,4(r8)
   2a774:	42800015 	stw	r10,0(r8)
   2a778:	d8c11c15 	stw	r3,1136(sp)
   2a77c:	d9011b15 	stw	r4,1132(sp)
   2a780:	008001c4 	movi	r2,7
   2a784:	11008d16 	blt	r2,r4,2a9bc <___vfiprintf_internal_r+0x106c>
   2a788:	42000204 	addi	r8,r8,8
   2a78c:	20800044 	addi	r2,r4,1
   2a790:	200b883a 	mov	r5,r4
   2a794:	003db706 	br	29e74 <__alt_data_end+0xfffeaa74>
   2a798:	d9012017 	ldw	r4,1152(sp)
   2a79c:	a00b883a 	mov	r5,r20
   2a7a0:	d9811a04 	addi	r6,sp,1128
   2a7a4:	db012b15 	stw	r12,1196(sp)
   2a7a8:	db812a15 	stw	r14,1192(sp)
   2a7ac:	002983c0 	call	2983c <__sprint_r.part.0>
   2a7b0:	db012b17 	ldw	r12,1196(sp)
   2a7b4:	db812a17 	ldw	r14,1192(sp)
   2a7b8:	103f9f1e 	bne	r2,zero,2a638 <__alt_data_end+0xfffeb238>
   2a7bc:	d9411b17 	ldw	r5,1132(sp)
   2a7c0:	d8c11c17 	ldw	r3,1136(sp)
   2a7c4:	d811883a 	mov	r8,sp
   2a7c8:	29000044 	addi	r4,r5,1
   2a7cc:	003fd306 	br	2a71c <__alt_data_end+0xfffeb31c>
   2a7d0:	18006c1e 	bne	r3,zero,2a984 <___vfiprintf_internal_r+0x1034>
   2a7d4:	70004f26 	beq	r14,zero,2a914 <___vfiprintf_internal_r+0xfc4>
   2a7d8:	d8811d04 	addi	r2,sp,1140
   2a7dc:	00c00084 	movi	r3,2
   2a7e0:	d8800015 	stw	r2,0(sp)
   2a7e4:	d8c00115 	stw	r3,4(sp)
   2a7e8:	2005883a 	mov	r2,r4
   2a7ec:	d811883a 	mov	r8,sp
   2a7f0:	003d9b06 	br	29e60 <__alt_data_end+0xfffeaa60>
   2a7f4:	1800571e 	bne	r3,zero,2a954 <___vfiprintf_internal_r+0x1004>
   2a7f8:	000b883a 	mov	r5,zero
   2a7fc:	00800044 	movi	r2,1
   2a800:	d811883a 	mov	r8,sp
   2a804:	003d9906 	br	29e6c <__alt_data_end+0xfffeaa6c>
   2a808:	10803fcc 	andi	r2,r2,255
   2a80c:	1000251e 	bne	r2,zero,2a8a4 <___vfiprintf_internal_r+0xf54>
   2a810:	a880004c 	andi	r2,r21,1
   2a814:	10007826 	beq	r2,zero,2a9f8 <___vfiprintf_internal_r+0x10a8>
   2a818:	00800c04 	movi	r2,48
   2a81c:	d8c109c4 	addi	r3,sp,1063
   2a820:	d88109c5 	stb	r2,1063(sp)
   2a824:	dc412717 	ldw	r17,1180(sp)
   2a828:	d8c12415 	stw	r3,1168(sp)
   2a82c:	003d4406 	br	29d40 <__alt_data_end+0xfffea940>
   2a830:	d9012617 	ldw	r4,1176(sp)
   2a834:	dc410a04 	addi	r17,sp,1064
   2a838:	908003cc 	andi	r2,r18,15
   2a83c:	b006973a 	slli	r3,r22,28
   2a840:	2085883a 	add	r2,r4,r2
   2a844:	9024d13a 	srli	r18,r18,4
   2a848:	10800003 	ldbu	r2,0(r2)
   2a84c:	b02cd13a 	srli	r22,r22,4
   2a850:	8c7fffc4 	addi	r17,r17,-1
   2a854:	1ca4b03a 	or	r18,r3,r18
   2a858:	88800005 	stb	r2,0(r17)
   2a85c:	9584b03a 	or	r2,r18,r22
   2a860:	103ff51e 	bne	r2,zero,2a838 <__alt_data_end+0xfffeb438>
   2a864:	dac11e17 	ldw	r11,1144(sp)
   2a868:	dc412415 	stw	r17,1168(sp)
   2a86c:	5c63c83a 	sub	r17,r11,r17
   2a870:	003d3306 	br	29d40 <__alt_data_end+0xfffea940>
   2a874:	1800941e 	bne	r3,zero,2aac8 <___vfiprintf_internal_r+0x1178>
   2a878:	d8811d87 	ldb	r2,1142(sp)
   2a87c:	10006b26 	beq	r2,zero,2aa2c <___vfiprintf_internal_r+0x10dc>
   2a880:	00c00044 	movi	r3,1
   2a884:	d9011d84 	addi	r4,sp,1142
   2a888:	1805883a 	mov	r2,r3
   2a88c:	d9000015 	stw	r4,0(sp)
   2a890:	d8c00115 	stw	r3,4(sp)
   2a894:	d811883a 	mov	r8,sp
   2a898:	003f2306 	br	2a528 <__alt_data_end+0xfffeb128>
   2a89c:	8023883a 	mov	r17,r16
   2a8a0:	003c7d06 	br	29a98 <__alt_data_end+0xfffea698>
   2a8a4:	da810a04 	addi	r10,sp,1064
   2a8a8:	da812415 	stw	r10,1168(sp)
   2a8ac:	003d2406 	br	29d40 <__alt_data_end+0xfffea940>
   2a8b0:	d9012017 	ldw	r4,1152(sp)
   2a8b4:	a00b883a 	mov	r5,r20
   2a8b8:	d9811a04 	addi	r6,sp,1128
   2a8bc:	002983c0 	call	2983c <__sprint_r.part.0>
   2a8c0:	103f5d1e 	bne	r2,zero,2a638 <__alt_data_end+0xfffeb238>
   2a8c4:	d8c11c17 	ldw	r3,1136(sp)
   2a8c8:	d811883a 	mov	r8,sp
   2a8cc:	003f7306 	br	2a69c <__alt_data_end+0xfffeb29c>
   2a8d0:	1c800017 	ldw	r18,0(r3)
   2a8d4:	dac12117 	ldw	r11,1156(sp)
   2a8d8:	902dd7fa 	srai	r22,r18,31
   2a8dc:	5ac00104 	addi	r11,r11,4
   2a8e0:	dac12115 	stw	r11,1156(sp)
   2a8e4:	b005883a 	mov	r2,r22
   2a8e8:	003e5406 	br	2a23c <__alt_data_end+0xfffeae3c>
   2a8ec:	00800084 	movi	r2,2
   2a8f0:	9588b03a 	or	r4,r18,r22
   2a8f4:	003cf506 	br	29ccc <__alt_data_end+0xfffea8cc>
   2a8f8:	d9012017 	ldw	r4,1152(sp)
   2a8fc:	a00b883a 	mov	r5,r20
   2a900:	d9811a04 	addi	r6,sp,1128
   2a904:	002983c0 	call	2983c <__sprint_r.part.0>
   2a908:	103f4b1e 	bne	r2,zero,2a638 <__alt_data_end+0xfffeb238>
   2a90c:	d811883a 	mov	r8,sp
   2a910:	003cd106 	br	29c58 <__alt_data_end+0xfffea858>
   2a914:	000b883a 	mov	r5,zero
   2a918:	2005883a 	mov	r2,r4
   2a91c:	d811883a 	mov	r8,sp
   2a920:	003d5206 	br	29e6c <__alt_data_end+0xfffeaa6c>
   2a924:	10803fcc 	andi	r2,r2,255
   2a928:	1080201c 	xori	r2,r2,128
   2a92c:	10bfe004 	addi	r2,r2,-128
   2a930:	01000c04 	movi	r4,48
   2a934:	11008e26 	beq	r2,r4,2ab70 <___vfiprintf_internal_r+0x1220>
   2a938:	da812417 	ldw	r10,1168(sp)
   2a93c:	dac11e17 	ldw	r11,1144(sp)
   2a940:	193fffc5 	stb	r4,-1(r3)
   2a944:	52bfffc4 	addi	r10,r10,-1
   2a948:	da812415 	stw	r10,1168(sp)
   2a94c:	5aa3c83a 	sub	r17,r11,r10
   2a950:	003cfb06 	br	29d40 <__alt_data_end+0xfffea940>
   2a954:	d9012017 	ldw	r4,1152(sp)
   2a958:	a00b883a 	mov	r5,r20
   2a95c:	d9811a04 	addi	r6,sp,1128
   2a960:	da412b15 	stw	r9,1196(sp)
   2a964:	002983c0 	call	2983c <__sprint_r.part.0>
   2a968:	da412b17 	ldw	r9,1196(sp)
   2a96c:	103f321e 	bne	r2,zero,2a638 <__alt_data_end+0xfffeb238>
   2a970:	d9411b17 	ldw	r5,1132(sp)
   2a974:	d8c11c17 	ldw	r3,1136(sp)
   2a978:	d811883a 	mov	r8,sp
   2a97c:	28800044 	addi	r2,r5,1
   2a980:	003d3a06 	br	29e6c <__alt_data_end+0xfffeaa6c>
   2a984:	d9012017 	ldw	r4,1152(sp)
   2a988:	a00b883a 	mov	r5,r20
   2a98c:	d9811a04 	addi	r6,sp,1128
   2a990:	da412b15 	stw	r9,1196(sp)
   2a994:	db812a15 	stw	r14,1192(sp)
   2a998:	002983c0 	call	2983c <__sprint_r.part.0>
   2a99c:	da412b17 	ldw	r9,1196(sp)
   2a9a0:	db812a17 	ldw	r14,1192(sp)
   2a9a4:	103f241e 	bne	r2,zero,2a638 <__alt_data_end+0xfffeb238>
   2a9a8:	d9411b17 	ldw	r5,1132(sp)
   2a9ac:	d8c11c17 	ldw	r3,1136(sp)
   2a9b0:	d811883a 	mov	r8,sp
   2a9b4:	28800044 	addi	r2,r5,1
   2a9b8:	003d1f06 	br	29e38 <__alt_data_end+0xfffeaa38>
   2a9bc:	1800781e 	bne	r3,zero,2aba0 <___vfiprintf_internal_r+0x1250>
   2a9c0:	000b883a 	mov	r5,zero
   2a9c4:	00800044 	movi	r2,1
   2a9c8:	d811883a 	mov	r8,sp
   2a9cc:	003d2906 	br	29e74 <__alt_data_end+0xfffeaa74>
   2a9d0:	d9012017 	ldw	r4,1152(sp)
   2a9d4:	a00b883a 	mov	r5,r20
   2a9d8:	d9811a04 	addi	r6,sp,1128
   2a9dc:	002983c0 	call	2983c <__sprint_r.part.0>
   2a9e0:	103f151e 	bne	r2,zero,2a638 <__alt_data_end+0xfffeb238>
   2a9e4:	d8811b17 	ldw	r2,1132(sp)
   2a9e8:	d8c11c17 	ldw	r3,1136(sp)
   2a9ec:	d811883a 	mov	r8,sp
   2a9f0:	10800044 	addi	r2,r2,1
   2a9f4:	003d4406 	br	29f08 <__alt_data_end+0xfffeab08>
   2a9f8:	dac10a04 	addi	r11,sp,1064
   2a9fc:	dac12415 	stw	r11,1168(sp)
   2aa00:	003ccf06 	br	29d40 <__alt_data_end+0xfffea940>
   2aa04:	04a5c83a 	sub	r18,zero,r18
   2aa08:	9004c03a 	cmpne	r2,r18,zero
   2aa0c:	05adc83a 	sub	r22,zero,r22
   2aa10:	b0adc83a 	sub	r22,r22,r2
   2aa14:	03000b44 	movi	r12,45
   2aa18:	db011d85 	stb	r12,1142(sp)
   2aa1c:	4823883a 	mov	r17,r9
   2aa20:	00800044 	movi	r2,1
   2aa24:	9588b03a 	or	r4,r18,r22
   2aa28:	003cab06 	br	29cd8 <__alt_data_end+0xfffea8d8>
   2aa2c:	000b883a 	mov	r5,zero
   2aa30:	00800044 	movi	r2,1
   2aa34:	d811883a 	mov	r8,sp
   2aa38:	703d0c26 	beq	r14,zero,29e6c <__alt_data_end+0xfffeaa6c>
   2aa3c:	00c00084 	movi	r3,2
   2aa40:	d9011d04 	addi	r4,sp,1140
   2aa44:	d9000015 	stw	r4,0(sp)
   2aa48:	d8c00115 	stw	r3,4(sp)
   2aa4c:	003d0406 	br	29e60 <__alt_data_end+0xfffeaa60>
   2aa50:	80c00007 	ldb	r3,0(r16)
   2aa54:	003c1d06 	br	29acc <__alt_data_end+0xfffea6cc>
   2aa58:	a880040c 	andi	r2,r21,16
   2aa5c:	1000091e 	bne	r2,zero,2aa84 <___vfiprintf_internal_r+0x1134>
   2aa60:	aac0100c 	andi	r11,r21,64
   2aa64:	58000726 	beq	r11,zero,2aa84 <___vfiprintf_internal_r+0x1134>
   2aa68:	da812117 	ldw	r10,1156(sp)
   2aa6c:	dac12217 	ldw	r11,1160(sp)
   2aa70:	50800017 	ldw	r2,0(r10)
   2aa74:	52800104 	addi	r10,r10,4
   2aa78:	da812115 	stw	r10,1156(sp)
   2aa7c:	12c0000d 	sth	r11,0(r2)
   2aa80:	003be806 	br	29a24 <__alt_data_end+0xfffea624>
   2aa84:	da812117 	ldw	r10,1156(sp)
   2aa88:	dac12217 	ldw	r11,1160(sp)
   2aa8c:	50800017 	ldw	r2,0(r10)
   2aa90:	52800104 	addi	r10,r10,4
   2aa94:	da812115 	stw	r10,1156(sp)
   2aa98:	12c00015 	stw	r11,0(r2)
   2aa9c:	003be106 	br	29a24 <__alt_data_end+0xfffea624>
   2aaa0:	00800084 	movi	r2,2
   2aaa4:	003c8906 	br	29ccc <__alt_data_end+0xfffea8cc>
   2aaa8:	a900100c 	andi	r4,r21,64
   2aaac:	20001f26 	beq	r4,zero,2ab2c <___vfiprintf_internal_r+0x11dc>
   2aab0:	da812117 	ldw	r10,1156(sp)
   2aab4:	1480000b 	ldhu	r18,0(r2)
   2aab8:	002d883a 	mov	r22,zero
   2aabc:	52800104 	addi	r10,r10,4
   2aac0:	da812115 	stw	r10,1156(sp)
   2aac4:	003dae06 	br	2a180 <__alt_data_end+0xfffead80>
   2aac8:	d9012017 	ldw	r4,1152(sp)
   2aacc:	a00b883a 	mov	r5,r20
   2aad0:	d9811a04 	addi	r6,sp,1128
   2aad4:	da412b15 	stw	r9,1196(sp)
   2aad8:	db812a15 	stw	r14,1192(sp)
   2aadc:	002983c0 	call	2983c <__sprint_r.part.0>
   2aae0:	da412b17 	ldw	r9,1196(sp)
   2aae4:	db812a17 	ldw	r14,1192(sp)
   2aae8:	103ed31e 	bne	r2,zero,2a638 <__alt_data_end+0xfffeb238>
   2aaec:	d9411b17 	ldw	r5,1132(sp)
   2aaf0:	d8c11c17 	ldw	r3,1136(sp)
   2aaf4:	d811883a 	mov	r8,sp
   2aaf8:	28800044 	addi	r2,r5,1
   2aafc:	003e7f06 	br	2a4fc <__alt_data_end+0xfffeb0fc>
   2ab00:	9825883a 	mov	r18,r19
   2ab04:	003d3406 	br	29fd8 <__alt_data_end+0xfffeabd8>
   2ab08:	4823883a 	mov	r17,r9
   2ab0c:	003e0806 	br	2a330 <__alt_data_end+0xfffeaf30>
   2ab10:	d9012017 	ldw	r4,1152(sp)
   2ab14:	a00b883a 	mov	r5,r20
   2ab18:	d9811a04 	addi	r6,sp,1128
   2ab1c:	002983c0 	call	2983c <__sprint_r.part.0>
   2ab20:	103ec51e 	bne	r2,zero,2a638 <__alt_data_end+0xfffeb238>
   2ab24:	d8c11c17 	ldw	r3,1136(sp)
   2ab28:	003ee006 	br	2a6ac <__alt_data_end+0xfffeb2ac>
   2ab2c:	dac12117 	ldw	r11,1156(sp)
   2ab30:	14800017 	ldw	r18,0(r2)
   2ab34:	002d883a 	mov	r22,zero
   2ab38:	5ac00104 	addi	r11,r11,4
   2ab3c:	dac12115 	stw	r11,1156(sp)
   2ab40:	003d8f06 	br	2a180 <__alt_data_end+0xfffead80>
   2ab44:	02c000f4 	movhi	r11,3
   2ab48:	5ac00304 	addi	r11,r11,12
   2ab4c:	dac12315 	stw	r11,1164(sp)
   2ab50:	003ce306 	br	29ee0 <__alt_data_end+0xfffeaae0>
   2ab54:	80c00043 	ldbu	r3,1(r16)
   2ab58:	ad400814 	ori	r21,r21,32
   2ab5c:	84000044 	addi	r16,r16,1
   2ab60:	18c03fcc 	andi	r3,r3,255
   2ab64:	18c0201c 	xori	r3,r3,128
   2ab68:	18ffe004 	addi	r3,r3,-128
   2ab6c:	003bd706 	br	29acc <__alt_data_end+0xfffea6cc>
   2ab70:	dac11e17 	ldw	r11,1144(sp)
   2ab74:	d8c12417 	ldw	r3,1168(sp)
   2ab78:	58e3c83a 	sub	r17,r11,r3
   2ab7c:	003c7006 	br	29d40 <__alt_data_end+0xfffea940>
   2ab80:	da012a15 	stw	r8,1192(sp)
   2ab84:	00226580 	call	22658 <strlen>
   2ab88:	1023883a 	mov	r17,r2
   2ab8c:	db011d83 	ldbu	r12,1142(sp)
   2ab90:	dd812115 	stw	r22,1156(sp)
   2ab94:	0013883a 	mov	r9,zero
   2ab98:	da012a17 	ldw	r8,1192(sp)
   2ab9c:	003c6806 	br	29d40 <__alt_data_end+0xfffea940>
   2aba0:	d9012017 	ldw	r4,1152(sp)
   2aba4:	a00b883a 	mov	r5,r20
   2aba8:	d9811a04 	addi	r6,sp,1128
   2abac:	da412b15 	stw	r9,1196(sp)
   2abb0:	002983c0 	call	2983c <__sprint_r.part.0>
   2abb4:	da412b17 	ldw	r9,1196(sp)
   2abb8:	103e9f1e 	bne	r2,zero,2a638 <__alt_data_end+0xfffeb238>
   2abbc:	d9411b17 	ldw	r5,1132(sp)
   2abc0:	d8c11c17 	ldw	r3,1136(sp)
   2abc4:	d811883a 	mov	r8,sp
   2abc8:	28800044 	addi	r2,r5,1
   2abcc:	003ca906 	br	29e74 <__alt_data_end+0xfffeaa74>
   2abd0:	d9411b17 	ldw	r5,1132(sp)
   2abd4:	010000f4 	movhi	r4,3
   2abd8:	21000704 	addi	r4,r4,28
   2abdc:	d9012315 	stw	r4,1164(sp)
   2abe0:	29400044 	addi	r5,r5,1
   2abe4:	003c8806 	br	29e08 <__alt_data_end+0xfffeaa08>
   2abe8:	00800184 	movi	r2,6
   2abec:	1240012e 	bgeu	r2,r9,2abf4 <___vfiprintf_internal_r+0x12a4>
   2abf0:	1013883a 	mov	r9,r2
   2abf4:	4823883a 	mov	r17,r9
   2abf8:	4825883a 	mov	r18,r9
   2abfc:	48001516 	blt	r9,zero,2ac54 <___vfiprintf_internal_r+0x1304>
   2ac00:	008000f4 	movhi	r2,3
   2ac04:	10bfa704 	addi	r2,r2,-356
   2ac08:	dd812115 	stw	r22,1156(sp)
   2ac0c:	d8812415 	stw	r2,1168(sp)
   2ac10:	003d6f06 	br	2a1d0 <__alt_data_end+0xfffeadd0>
   2ac14:	d9411b17 	ldw	r5,1132(sp)
   2ac18:	02c000f4 	movhi	r11,3
   2ac1c:	5ac00704 	addi	r11,r11,28
   2ac20:	dac12315 	stw	r11,1164(sp)
   2ac24:	29400044 	addi	r5,r5,1
   2ac28:	003ce106 	br	29fb0 <__alt_data_end+0xfffeabb0>
   2ac2c:	010000f4 	movhi	r4,3
   2ac30:	21000304 	addi	r4,r4,12
   2ac34:	d9012315 	stw	r4,1164(sp)
   2ac38:	1009883a 	mov	r4,r2
   2ac3c:	003eca06 	br	2a768 <__alt_data_end+0xfffeb368>
   2ac40:	4823883a 	mov	r17,r9
   2ac44:	db011d83 	ldbu	r12,1142(sp)
   2ac48:	dd812115 	stw	r22,1156(sp)
   2ac4c:	0013883a 	mov	r9,zero
   2ac50:	003c3b06 	br	29d40 <__alt_data_end+0xfffea940>
   2ac54:	0025883a 	mov	r18,zero
   2ac58:	003fe906 	br	2ac00 <__alt_data_end+0xfffeb800>
   2ac5c:	dac12117 	ldw	r11,1156(sp)
   2ac60:	8005883a 	mov	r2,r16
   2ac64:	5021883a 	mov	r16,r10
   2ac68:	5a400017 	ldw	r9,0(r11)
   2ac6c:	58c00104 	addi	r3,r11,4
   2ac70:	d8c12115 	stw	r3,1156(sp)
   2ac74:	48000a16 	blt	r9,zero,2aca0 <___vfiprintf_internal_r+0x1350>
   2ac78:	10c00047 	ldb	r3,1(r2)
   2ac7c:	003b9306 	br	29acc <__alt_data_end+0xfffea6cc>
   2ac80:	043fffc4 	movi	r16,-1
   2ac84:	003d0206 	br	2a090 <__alt_data_end+0xfffeac90>
   2ac88:	94c0010e 	bge	r18,r19,2ac90 <___vfiprintf_internal_r+0x1340>
   2ac8c:	9825883a 	mov	r18,r19
   2ac90:	da812217 	ldw	r10,1160(sp)
   2ac94:	5495883a 	add	r10,r10,r18
   2ac98:	da812215 	stw	r10,1160(sp)
   2ac9c:	003cd106 	br	29fe4 <__alt_data_end+0xfffeabe4>
   2aca0:	027fffc4 	movi	r9,-1
   2aca4:	10c00047 	ldb	r3,1(r2)
   2aca8:	003b8806 	br	29acc <__alt_data_end+0xfffea6cc>

0002acac <__vfiprintf_internal>:
   2acac:	2007883a 	mov	r3,r4
   2acb0:	010000f4 	movhi	r4,3
   2acb4:	2106f204 	addi	r4,r4,7112
   2acb8:	21000017 	ldw	r4,0(r4)
   2acbc:	2805883a 	mov	r2,r5
   2acc0:	300f883a 	mov	r7,r6
   2acc4:	180b883a 	mov	r5,r3
   2acc8:	100d883a 	mov	r6,r2
   2accc:	00299501 	jmpi	29950 <___vfiprintf_internal_r>

0002acd0 <_write_r>:
   2acd0:	defffd04 	addi	sp,sp,-12
   2acd4:	dc000015 	stw	r16,0(sp)
   2acd8:	040000f4 	movhi	r16,3
   2acdc:	dc400115 	stw	r17,4(sp)
   2ace0:	840de404 	addi	r16,r16,14224
   2ace4:	2023883a 	mov	r17,r4
   2ace8:	2809883a 	mov	r4,r5
   2acec:	300b883a 	mov	r5,r6
   2acf0:	380d883a 	mov	r6,r7
   2acf4:	dfc00215 	stw	ra,8(sp)
   2acf8:	80000015 	stw	zero,0(r16)
   2acfc:	002d6880 	call	2d688 <write>
   2ad00:	00ffffc4 	movi	r3,-1
   2ad04:	10c00526 	beq	r2,r3,2ad1c <_write_r+0x4c>
   2ad08:	dfc00217 	ldw	ra,8(sp)
   2ad0c:	dc400117 	ldw	r17,4(sp)
   2ad10:	dc000017 	ldw	r16,0(sp)
   2ad14:	dec00304 	addi	sp,sp,12
   2ad18:	f800283a 	ret
   2ad1c:	80c00017 	ldw	r3,0(r16)
   2ad20:	183ff926 	beq	r3,zero,2ad08 <__alt_data_end+0xfffeb908>
   2ad24:	88c00015 	stw	r3,0(r17)
   2ad28:	003ff706 	br	2ad08 <__alt_data_end+0xfffeb908>

0002ad2c <_close_r>:
   2ad2c:	defffd04 	addi	sp,sp,-12
   2ad30:	dc000015 	stw	r16,0(sp)
   2ad34:	040000f4 	movhi	r16,3
   2ad38:	dc400115 	stw	r17,4(sp)
   2ad3c:	840de404 	addi	r16,r16,14224
   2ad40:	2023883a 	mov	r17,r4
   2ad44:	2809883a 	mov	r4,r5
   2ad48:	dfc00215 	stw	ra,8(sp)
   2ad4c:	80000015 	stw	zero,0(r16)
   2ad50:	002cdfc0 	call	2cdfc <close>
   2ad54:	00ffffc4 	movi	r3,-1
   2ad58:	10c00526 	beq	r2,r3,2ad70 <_close_r+0x44>
   2ad5c:	dfc00217 	ldw	ra,8(sp)
   2ad60:	dc400117 	ldw	r17,4(sp)
   2ad64:	dc000017 	ldw	r16,0(sp)
   2ad68:	dec00304 	addi	sp,sp,12
   2ad6c:	f800283a 	ret
   2ad70:	80c00017 	ldw	r3,0(r16)
   2ad74:	183ff926 	beq	r3,zero,2ad5c <__alt_data_end+0xfffeb95c>
   2ad78:	88c00015 	stw	r3,0(r17)
   2ad7c:	003ff706 	br	2ad5c <__alt_data_end+0xfffeb95c>

0002ad80 <_calloc_r>:
   2ad80:	298b383a 	mul	r5,r5,r6
   2ad84:	defffe04 	addi	sp,sp,-8
   2ad88:	dc000015 	stw	r16,0(sp)
   2ad8c:	dfc00115 	stw	ra,4(sp)
   2ad90:	00274200 	call	27420 <_malloc_r>
   2ad94:	1021883a 	mov	r16,r2
   2ad98:	10002826 	beq	r2,zero,2ae3c <_calloc_r+0xbc>
   2ad9c:	11bfff17 	ldw	r6,-4(r2)
   2ada0:	00bfff04 	movi	r2,-4
   2ada4:	00c00904 	movi	r3,36
   2ada8:	308c703a 	and	r6,r6,r2
   2adac:	308d883a 	add	r6,r6,r2
   2adb0:	19801436 	bltu	r3,r6,2ae04 <_calloc_r+0x84>
   2adb4:	008004c4 	movi	r2,19
   2adb8:	11800936 	bltu	r2,r6,2ade0 <_calloc_r+0x60>
   2adbc:	8005883a 	mov	r2,r16
   2adc0:	10000015 	stw	zero,0(r2)
   2adc4:	10000115 	stw	zero,4(r2)
   2adc8:	10000215 	stw	zero,8(r2)
   2adcc:	8005883a 	mov	r2,r16
   2add0:	dfc00117 	ldw	ra,4(sp)
   2add4:	dc000017 	ldw	r16,0(sp)
   2add8:	dec00204 	addi	sp,sp,8
   2addc:	f800283a 	ret
   2ade0:	80000015 	stw	zero,0(r16)
   2ade4:	80000115 	stw	zero,4(r16)
   2ade8:	008006c4 	movi	r2,27
   2adec:	11800d2e 	bgeu	r2,r6,2ae24 <_calloc_r+0xa4>
   2adf0:	80000215 	stw	zero,8(r16)
   2adf4:	80000315 	stw	zero,12(r16)
   2adf8:	30c00c26 	beq	r6,r3,2ae2c <_calloc_r+0xac>
   2adfc:	80800404 	addi	r2,r16,16
   2ae00:	003fef06 	br	2adc0 <__alt_data_end+0xfffeb9c0>
   2ae04:	8009883a 	mov	r4,r16
   2ae08:	000b883a 	mov	r5,zero
   2ae0c:	0027f440 	call	27f44 <memset>
   2ae10:	8005883a 	mov	r2,r16
   2ae14:	dfc00117 	ldw	ra,4(sp)
   2ae18:	dc000017 	ldw	r16,0(sp)
   2ae1c:	dec00204 	addi	sp,sp,8
   2ae20:	f800283a 	ret
   2ae24:	80800204 	addi	r2,r16,8
   2ae28:	003fe506 	br	2adc0 <__alt_data_end+0xfffeb9c0>
   2ae2c:	80000415 	stw	zero,16(r16)
   2ae30:	80800604 	addi	r2,r16,24
   2ae34:	80000515 	stw	zero,20(r16)
   2ae38:	003fe106 	br	2adc0 <__alt_data_end+0xfffeb9c0>
   2ae3c:	0005883a 	mov	r2,zero
   2ae40:	003fe306 	br	2add0 <__alt_data_end+0xfffeb9d0>

0002ae44 <_fclose_r>:
   2ae44:	28003226 	beq	r5,zero,2af10 <_fclose_r+0xcc>
   2ae48:	defffc04 	addi	sp,sp,-16
   2ae4c:	dc400115 	stw	r17,4(sp)
   2ae50:	2023883a 	mov	r17,r4
   2ae54:	dc000015 	stw	r16,0(sp)
   2ae58:	dfc00315 	stw	ra,12(sp)
   2ae5c:	dc800215 	stw	r18,8(sp)
   2ae60:	2821883a 	mov	r16,r5
   2ae64:	00267200 	call	26720 <__sfp_lock_acquire>
   2ae68:	88000226 	beq	r17,zero,2ae74 <_fclose_r+0x30>
   2ae6c:	88800e17 	ldw	r2,56(r17)
   2ae70:	10002926 	beq	r2,zero,2af18 <_fclose_r+0xd4>
   2ae74:	8080030f 	ldh	r2,12(r16)
   2ae78:	10002226 	beq	r2,zero,2af04 <_fclose_r+0xc0>
   2ae7c:	8809883a 	mov	r4,r17
   2ae80:	800b883a 	mov	r5,r16
   2ae84:	00261680 	call	26168 <_fflush_r>
   2ae88:	1025883a 	mov	r18,r2
   2ae8c:	80800b17 	ldw	r2,44(r16)
   2ae90:	10000426 	beq	r2,zero,2aea4 <_fclose_r+0x60>
   2ae94:	81400717 	ldw	r5,28(r16)
   2ae98:	8809883a 	mov	r4,r17
   2ae9c:	103ee83a 	callr	r2
   2aea0:	10002616 	blt	r2,zero,2af3c <_fclose_r+0xf8>
   2aea4:	8080030b 	ldhu	r2,12(r16)
   2aea8:	1080200c 	andi	r2,r2,128
   2aeac:	10001f1e 	bne	r2,zero,2af2c <_fclose_r+0xe8>
   2aeb0:	81400c17 	ldw	r5,48(r16)
   2aeb4:	28000526 	beq	r5,zero,2aecc <_fclose_r+0x88>
   2aeb8:	80801004 	addi	r2,r16,64
   2aebc:	28800226 	beq	r5,r2,2aec8 <_fclose_r+0x84>
   2aec0:	8809883a 	mov	r4,r17
   2aec4:	00268840 	call	26884 <_free_r>
   2aec8:	80000c15 	stw	zero,48(r16)
   2aecc:	81401117 	ldw	r5,68(r16)
   2aed0:	28000326 	beq	r5,zero,2aee0 <_fclose_r+0x9c>
   2aed4:	8809883a 	mov	r4,r17
   2aed8:	00268840 	call	26884 <_free_r>
   2aedc:	80001115 	stw	zero,68(r16)
   2aee0:	8000030d 	sth	zero,12(r16)
   2aee4:	00267240 	call	26724 <__sfp_lock_release>
   2aee8:	9005883a 	mov	r2,r18
   2aeec:	dfc00317 	ldw	ra,12(sp)
   2aef0:	dc800217 	ldw	r18,8(sp)
   2aef4:	dc400117 	ldw	r17,4(sp)
   2aef8:	dc000017 	ldw	r16,0(sp)
   2aefc:	dec00404 	addi	sp,sp,16
   2af00:	f800283a 	ret
   2af04:	00267240 	call	26724 <__sfp_lock_release>
   2af08:	0005883a 	mov	r2,zero
   2af0c:	003ff706 	br	2aeec <__alt_data_end+0xfffebaec>
   2af10:	0005883a 	mov	r2,zero
   2af14:	f800283a 	ret
   2af18:	8809883a 	mov	r4,r17
   2af1c:	00267100 	call	26710 <__sinit>
   2af20:	8080030f 	ldh	r2,12(r16)
   2af24:	103fd51e 	bne	r2,zero,2ae7c <__alt_data_end+0xfffeba7c>
   2af28:	003ff606 	br	2af04 <__alt_data_end+0xfffebb04>
   2af2c:	81400417 	ldw	r5,16(r16)
   2af30:	8809883a 	mov	r4,r17
   2af34:	00268840 	call	26884 <_free_r>
   2af38:	003fdd06 	br	2aeb0 <__alt_data_end+0xfffebab0>
   2af3c:	04bfffc4 	movi	r18,-1
   2af40:	003fd806 	br	2aea4 <__alt_data_end+0xfffebaa4>

0002af44 <fclose>:
   2af44:	008000f4 	movhi	r2,3
   2af48:	1086f204 	addi	r2,r2,7112
   2af4c:	200b883a 	mov	r5,r4
   2af50:	11000017 	ldw	r4,0(r2)
   2af54:	002ae441 	jmpi	2ae44 <_fclose_r>

0002af58 <_fputwc_r>:
   2af58:	3080030b 	ldhu	r2,12(r6)
   2af5c:	defff804 	addi	sp,sp,-32
   2af60:	dcc00415 	stw	r19,16(sp)
   2af64:	dc800315 	stw	r18,12(sp)
   2af68:	dc000115 	stw	r16,4(sp)
   2af6c:	dfc00715 	stw	ra,28(sp)
   2af70:	dd400615 	stw	r21,24(sp)
   2af74:	dd000515 	stw	r20,20(sp)
   2af78:	dc400215 	stw	r17,8(sp)
   2af7c:	10c8000c 	andi	r3,r2,8192
   2af80:	3021883a 	mov	r16,r6
   2af84:	2027883a 	mov	r19,r4
   2af88:	2825883a 	mov	r18,r5
   2af8c:	1800051e 	bne	r3,zero,2afa4 <_fputwc_r+0x4c>
   2af90:	30c01917 	ldw	r3,100(r6)
   2af94:	10880014 	ori	r2,r2,8192
   2af98:	3080030d 	sth	r2,12(r6)
   2af9c:	18880014 	ori	r2,r3,8192
   2afa0:	30801915 	stw	r2,100(r6)
   2afa4:	00272100 	call	27210 <__locale_mb_cur_max>
   2afa8:	00c00044 	movi	r3,1
   2afac:	10c03e26 	beq	r2,r3,2b0a8 <_fputwc_r+0x150>
   2afb0:	9809883a 	mov	r4,r19
   2afb4:	d80b883a 	mov	r5,sp
   2afb8:	900d883a 	mov	r6,r18
   2afbc:	81c01704 	addi	r7,r16,92
   2afc0:	002b4080 	call	2b408 <_wcrtomb_r>
   2afc4:	1029883a 	mov	r20,r2
   2afc8:	00bfffc4 	movi	r2,-1
   2afcc:	a0802026 	beq	r20,r2,2b050 <_fputwc_r+0xf8>
   2afd0:	d9400003 	ldbu	r5,0(sp)
   2afd4:	a0001c26 	beq	r20,zero,2b048 <_fputwc_r+0xf0>
   2afd8:	0023883a 	mov	r17,zero
   2afdc:	05400284 	movi	r21,10
   2afe0:	00000906 	br	2b008 <_fputwc_r+0xb0>
   2afe4:	80800017 	ldw	r2,0(r16)
   2afe8:	11400005 	stb	r5,0(r2)
   2afec:	80c00017 	ldw	r3,0(r16)
   2aff0:	18c00044 	addi	r3,r3,1
   2aff4:	80c00015 	stw	r3,0(r16)
   2aff8:	8c400044 	addi	r17,r17,1
   2affc:	dc45883a 	add	r2,sp,r17
   2b000:	8d00112e 	bgeu	r17,r20,2b048 <_fputwc_r+0xf0>
   2b004:	11400003 	ldbu	r5,0(r2)
   2b008:	80c00217 	ldw	r3,8(r16)
   2b00c:	18ffffc4 	addi	r3,r3,-1
   2b010:	80c00215 	stw	r3,8(r16)
   2b014:	183ff30e 	bge	r3,zero,2afe4 <__alt_data_end+0xfffebbe4>
   2b018:	80800617 	ldw	r2,24(r16)
   2b01c:	18801916 	blt	r3,r2,2b084 <_fputwc_r+0x12c>
   2b020:	80800017 	ldw	r2,0(r16)
   2b024:	11400005 	stb	r5,0(r2)
   2b028:	80800017 	ldw	r2,0(r16)
   2b02c:	10c00003 	ldbu	r3,0(r2)
   2b030:	10800044 	addi	r2,r2,1
   2b034:	1d402326 	beq	r3,r21,2b0c4 <_fputwc_r+0x16c>
   2b038:	80800015 	stw	r2,0(r16)
   2b03c:	8c400044 	addi	r17,r17,1
   2b040:	dc45883a 	add	r2,sp,r17
   2b044:	8d3fef36 	bltu	r17,r20,2b004 <__alt_data_end+0xfffebc04>
   2b048:	9005883a 	mov	r2,r18
   2b04c:	00000406 	br	2b060 <_fputwc_r+0x108>
   2b050:	80c0030b 	ldhu	r3,12(r16)
   2b054:	a005883a 	mov	r2,r20
   2b058:	18c01014 	ori	r3,r3,64
   2b05c:	80c0030d 	sth	r3,12(r16)
   2b060:	dfc00717 	ldw	ra,28(sp)
   2b064:	dd400617 	ldw	r21,24(sp)
   2b068:	dd000517 	ldw	r20,20(sp)
   2b06c:	dcc00417 	ldw	r19,16(sp)
   2b070:	dc800317 	ldw	r18,12(sp)
   2b074:	dc400217 	ldw	r17,8(sp)
   2b078:	dc000117 	ldw	r16,4(sp)
   2b07c:	dec00804 	addi	sp,sp,32
   2b080:	f800283a 	ret
   2b084:	9809883a 	mov	r4,r19
   2b088:	29403fcc 	andi	r5,r5,255
   2b08c:	800d883a 	mov	r6,r16
   2b090:	002b2980 	call	2b298 <__swbuf_r>
   2b094:	10bfffe0 	cmpeqi	r2,r2,-1
   2b098:	10803fcc 	andi	r2,r2,255
   2b09c:	103fd626 	beq	r2,zero,2aff8 <__alt_data_end+0xfffebbf8>
   2b0a0:	00bfffc4 	movi	r2,-1
   2b0a4:	003fee06 	br	2b060 <__alt_data_end+0xfffebc60>
   2b0a8:	90ffffc4 	addi	r3,r18,-1
   2b0ac:	01003f84 	movi	r4,254
   2b0b0:	20ffbf36 	bltu	r4,r3,2afb0 <__alt_data_end+0xfffebbb0>
   2b0b4:	900b883a 	mov	r5,r18
   2b0b8:	dc800005 	stb	r18,0(sp)
   2b0bc:	1029883a 	mov	r20,r2
   2b0c0:	003fc506 	br	2afd8 <__alt_data_end+0xfffebbd8>
   2b0c4:	9809883a 	mov	r4,r19
   2b0c8:	a80b883a 	mov	r5,r21
   2b0cc:	800d883a 	mov	r6,r16
   2b0d0:	002b2980 	call	2b298 <__swbuf_r>
   2b0d4:	10bfffe0 	cmpeqi	r2,r2,-1
   2b0d8:	003fef06 	br	2b098 <__alt_data_end+0xfffebc98>

0002b0dc <fputwc>:
   2b0dc:	defffc04 	addi	sp,sp,-16
   2b0e0:	dc000115 	stw	r16,4(sp)
   2b0e4:	040000f4 	movhi	r16,3
   2b0e8:	8406f204 	addi	r16,r16,7112
   2b0ec:	dc400215 	stw	r17,8(sp)
   2b0f0:	2023883a 	mov	r17,r4
   2b0f4:	81000017 	ldw	r4,0(r16)
   2b0f8:	dfc00315 	stw	ra,12(sp)
   2b0fc:	280d883a 	mov	r6,r5
   2b100:	20000626 	beq	r4,zero,2b11c <fputwc+0x40>
   2b104:	20800e17 	ldw	r2,56(r4)
   2b108:	1000041e 	bne	r2,zero,2b11c <fputwc+0x40>
   2b10c:	d9400015 	stw	r5,0(sp)
   2b110:	00267100 	call	26710 <__sinit>
   2b114:	81000017 	ldw	r4,0(r16)
   2b118:	d9800017 	ldw	r6,0(sp)
   2b11c:	880b883a 	mov	r5,r17
   2b120:	dfc00317 	ldw	ra,12(sp)
   2b124:	dc400217 	ldw	r17,8(sp)
   2b128:	dc000117 	ldw	r16,4(sp)
   2b12c:	dec00404 	addi	sp,sp,16
   2b130:	002af581 	jmpi	2af58 <_fputwc_r>

0002b134 <_fstat_r>:
   2b134:	defffd04 	addi	sp,sp,-12
   2b138:	dc000015 	stw	r16,0(sp)
   2b13c:	040000f4 	movhi	r16,3
   2b140:	dc400115 	stw	r17,4(sp)
   2b144:	840de404 	addi	r16,r16,14224
   2b148:	2023883a 	mov	r17,r4
   2b14c:	2809883a 	mov	r4,r5
   2b150:	300b883a 	mov	r5,r6
   2b154:	dfc00215 	stw	ra,8(sp)
   2b158:	80000015 	stw	zero,0(r16)
   2b15c:	002cf480 	call	2cf48 <fstat>
   2b160:	00ffffc4 	movi	r3,-1
   2b164:	10c00526 	beq	r2,r3,2b17c <_fstat_r+0x48>
   2b168:	dfc00217 	ldw	ra,8(sp)
   2b16c:	dc400117 	ldw	r17,4(sp)
   2b170:	dc000017 	ldw	r16,0(sp)
   2b174:	dec00304 	addi	sp,sp,12
   2b178:	f800283a 	ret
   2b17c:	80c00017 	ldw	r3,0(r16)
   2b180:	183ff926 	beq	r3,zero,2b168 <__alt_data_end+0xfffebd68>
   2b184:	88c00015 	stw	r3,0(r17)
   2b188:	003ff706 	br	2b168 <__alt_data_end+0xfffebd68>

0002b18c <_isatty_r>:
   2b18c:	defffd04 	addi	sp,sp,-12
   2b190:	dc000015 	stw	r16,0(sp)
   2b194:	040000f4 	movhi	r16,3
   2b198:	dc400115 	stw	r17,4(sp)
   2b19c:	840de404 	addi	r16,r16,14224
   2b1a0:	2023883a 	mov	r17,r4
   2b1a4:	2809883a 	mov	r4,r5
   2b1a8:	dfc00215 	stw	ra,8(sp)
   2b1ac:	80000015 	stw	zero,0(r16)
   2b1b0:	002d0480 	call	2d048 <isatty>
   2b1b4:	00ffffc4 	movi	r3,-1
   2b1b8:	10c00526 	beq	r2,r3,2b1d0 <_isatty_r+0x44>
   2b1bc:	dfc00217 	ldw	ra,8(sp)
   2b1c0:	dc400117 	ldw	r17,4(sp)
   2b1c4:	dc000017 	ldw	r16,0(sp)
   2b1c8:	dec00304 	addi	sp,sp,12
   2b1cc:	f800283a 	ret
   2b1d0:	80c00017 	ldw	r3,0(r16)
   2b1d4:	183ff926 	beq	r3,zero,2b1bc <__alt_data_end+0xfffebdbc>
   2b1d8:	88c00015 	stw	r3,0(r17)
   2b1dc:	003ff706 	br	2b1bc <__alt_data_end+0xfffebdbc>

0002b1e0 <_lseek_r>:
   2b1e0:	defffd04 	addi	sp,sp,-12
   2b1e4:	dc000015 	stw	r16,0(sp)
   2b1e8:	040000f4 	movhi	r16,3
   2b1ec:	dc400115 	stw	r17,4(sp)
   2b1f0:	840de404 	addi	r16,r16,14224
   2b1f4:	2023883a 	mov	r17,r4
   2b1f8:	2809883a 	mov	r4,r5
   2b1fc:	300b883a 	mov	r5,r6
   2b200:	380d883a 	mov	r6,r7
   2b204:	dfc00215 	stw	ra,8(sp)
   2b208:	80000015 	stw	zero,0(r16)
   2b20c:	002d2200 	call	2d220 <lseek>
   2b210:	00ffffc4 	movi	r3,-1
   2b214:	10c00526 	beq	r2,r3,2b22c <_lseek_r+0x4c>
   2b218:	dfc00217 	ldw	ra,8(sp)
   2b21c:	dc400117 	ldw	r17,4(sp)
   2b220:	dc000017 	ldw	r16,0(sp)
   2b224:	dec00304 	addi	sp,sp,12
   2b228:	f800283a 	ret
   2b22c:	80c00017 	ldw	r3,0(r16)
   2b230:	183ff926 	beq	r3,zero,2b218 <__alt_data_end+0xfffebe18>
   2b234:	88c00015 	stw	r3,0(r17)
   2b238:	003ff706 	br	2b218 <__alt_data_end+0xfffebe18>

0002b23c <_read_r>:
   2b23c:	defffd04 	addi	sp,sp,-12
   2b240:	dc000015 	stw	r16,0(sp)
   2b244:	040000f4 	movhi	r16,3
   2b248:	dc400115 	stw	r17,4(sp)
   2b24c:	840de404 	addi	r16,r16,14224
   2b250:	2023883a 	mov	r17,r4
   2b254:	2809883a 	mov	r4,r5
   2b258:	300b883a 	mov	r5,r6
   2b25c:	380d883a 	mov	r6,r7
   2b260:	dfc00215 	stw	ra,8(sp)
   2b264:	80000015 	stw	zero,0(r16)
   2b268:	002d3fc0 	call	2d3fc <read>
   2b26c:	00ffffc4 	movi	r3,-1
   2b270:	10c00526 	beq	r2,r3,2b288 <_read_r+0x4c>
   2b274:	dfc00217 	ldw	ra,8(sp)
   2b278:	dc400117 	ldw	r17,4(sp)
   2b27c:	dc000017 	ldw	r16,0(sp)
   2b280:	dec00304 	addi	sp,sp,12
   2b284:	f800283a 	ret
   2b288:	80c00017 	ldw	r3,0(r16)
   2b28c:	183ff926 	beq	r3,zero,2b274 <__alt_data_end+0xfffebe74>
   2b290:	88c00015 	stw	r3,0(r17)
   2b294:	003ff706 	br	2b274 <__alt_data_end+0xfffebe74>

0002b298 <__swbuf_r>:
   2b298:	defffc04 	addi	sp,sp,-16
   2b29c:	dc800215 	stw	r18,8(sp)
   2b2a0:	dc400115 	stw	r17,4(sp)
   2b2a4:	dc000015 	stw	r16,0(sp)
   2b2a8:	dfc00315 	stw	ra,12(sp)
   2b2ac:	2025883a 	mov	r18,r4
   2b2b0:	2823883a 	mov	r17,r5
   2b2b4:	3021883a 	mov	r16,r6
   2b2b8:	20000226 	beq	r4,zero,2b2c4 <__swbuf_r+0x2c>
   2b2bc:	20800e17 	ldw	r2,56(r4)
   2b2c0:	10004126 	beq	r2,zero,2b3c8 <__swbuf_r+0x130>
   2b2c4:	80c00617 	ldw	r3,24(r16)
   2b2c8:	8180030b 	ldhu	r6,12(r16)
   2b2cc:	80c00215 	stw	r3,8(r16)
   2b2d0:	30c0020c 	andi	r3,r6,8
   2b2d4:	18003526 	beq	r3,zero,2b3ac <__swbuf_r+0x114>
   2b2d8:	80c00417 	ldw	r3,16(r16)
   2b2dc:	18003326 	beq	r3,zero,2b3ac <__swbuf_r+0x114>
   2b2e0:	3088000c 	andi	r2,r6,8192
   2b2e4:	8c403fcc 	andi	r17,r17,255
   2b2e8:	10001726 	beq	r2,zero,2b348 <__swbuf_r+0xb0>
   2b2ec:	80800017 	ldw	r2,0(r16)
   2b2f0:	81000517 	ldw	r4,20(r16)
   2b2f4:	10c7c83a 	sub	r3,r2,r3
   2b2f8:	19001d0e 	bge	r3,r4,2b370 <__swbuf_r+0xd8>
   2b2fc:	18c00044 	addi	r3,r3,1
   2b300:	81400217 	ldw	r5,8(r16)
   2b304:	11000044 	addi	r4,r2,1
   2b308:	81000015 	stw	r4,0(r16)
   2b30c:	297fffc4 	addi	r5,r5,-1
   2b310:	81400215 	stw	r5,8(r16)
   2b314:	14400005 	stb	r17,0(r2)
   2b318:	80800517 	ldw	r2,20(r16)
   2b31c:	10c01d26 	beq	r2,r3,2b394 <__swbuf_r+0xfc>
   2b320:	8080030b 	ldhu	r2,12(r16)
   2b324:	1080004c 	andi	r2,r2,1
   2b328:	1000181e 	bne	r2,zero,2b38c <__swbuf_r+0xf4>
   2b32c:	8805883a 	mov	r2,r17
   2b330:	dfc00317 	ldw	ra,12(sp)
   2b334:	dc800217 	ldw	r18,8(sp)
   2b338:	dc400117 	ldw	r17,4(sp)
   2b33c:	dc000017 	ldw	r16,0(sp)
   2b340:	dec00404 	addi	sp,sp,16
   2b344:	f800283a 	ret
   2b348:	81001917 	ldw	r4,100(r16)
   2b34c:	00b7ffc4 	movi	r2,-8193
   2b350:	31880014 	ori	r6,r6,8192
   2b354:	2084703a 	and	r2,r4,r2
   2b358:	80801915 	stw	r2,100(r16)
   2b35c:	80800017 	ldw	r2,0(r16)
   2b360:	81000517 	ldw	r4,20(r16)
   2b364:	8180030d 	sth	r6,12(r16)
   2b368:	10c7c83a 	sub	r3,r2,r3
   2b36c:	193fe316 	blt	r3,r4,2b2fc <__alt_data_end+0xfffebefc>
   2b370:	9009883a 	mov	r4,r18
   2b374:	800b883a 	mov	r5,r16
   2b378:	00261680 	call	26168 <_fflush_r>
   2b37c:	1000091e 	bne	r2,zero,2b3a4 <__swbuf_r+0x10c>
   2b380:	80800017 	ldw	r2,0(r16)
   2b384:	00c00044 	movi	r3,1
   2b388:	003fdd06 	br	2b300 <__alt_data_end+0xfffebf00>
   2b38c:	00800284 	movi	r2,10
   2b390:	88bfe61e 	bne	r17,r2,2b32c <__alt_data_end+0xfffebf2c>
   2b394:	9009883a 	mov	r4,r18
   2b398:	800b883a 	mov	r5,r16
   2b39c:	00261680 	call	26168 <_fflush_r>
   2b3a0:	103fe226 	beq	r2,zero,2b32c <__alt_data_end+0xfffebf2c>
   2b3a4:	00bfffc4 	movi	r2,-1
   2b3a8:	003fe106 	br	2b330 <__alt_data_end+0xfffebf30>
   2b3ac:	9009883a 	mov	r4,r18
   2b3b0:	800b883a 	mov	r5,r16
   2b3b4:	00247100 	call	24710 <__swsetup_r>
   2b3b8:	1000051e 	bne	r2,zero,2b3d0 <__swbuf_r+0x138>
   2b3bc:	8180030b 	ldhu	r6,12(r16)
   2b3c0:	80c00417 	ldw	r3,16(r16)
   2b3c4:	003fc606 	br	2b2e0 <__alt_data_end+0xfffebee0>
   2b3c8:	00267100 	call	26710 <__sinit>
   2b3cc:	003fbd06 	br	2b2c4 <__alt_data_end+0xfffebec4>
   2b3d0:	80c0030b 	ldhu	r3,12(r16)
   2b3d4:	00bfffc4 	movi	r2,-1
   2b3d8:	18c01014 	ori	r3,r3,64
   2b3dc:	80c0030d 	sth	r3,12(r16)
   2b3e0:	00c00244 	movi	r3,9
   2b3e4:	90c00015 	stw	r3,0(r18)
   2b3e8:	003fd106 	br	2b330 <__alt_data_end+0xfffebf30>

0002b3ec <__swbuf>:
   2b3ec:	00c000f4 	movhi	r3,3
   2b3f0:	18c6f204 	addi	r3,r3,7112
   2b3f4:	2005883a 	mov	r2,r4
   2b3f8:	19000017 	ldw	r4,0(r3)
   2b3fc:	280d883a 	mov	r6,r5
   2b400:	100b883a 	mov	r5,r2
   2b404:	002b2981 	jmpi	2b298 <__swbuf_r>

0002b408 <_wcrtomb_r>:
   2b408:	defff604 	addi	sp,sp,-40
   2b40c:	008000f4 	movhi	r2,3
   2b410:	dc800815 	stw	r18,32(sp)
   2b414:	dc400715 	stw	r17,28(sp)
   2b418:	dc000615 	stw	r16,24(sp)
   2b41c:	1086f604 	addi	r2,r2,7128
   2b420:	dfc00915 	stw	ra,36(sp)
   2b424:	2021883a 	mov	r16,r4
   2b428:	3823883a 	mov	r17,r7
   2b42c:	14800017 	ldw	r18,0(r2)
   2b430:	28001426 	beq	r5,zero,2b484 <_wcrtomb_r+0x7c>
   2b434:	d9400415 	stw	r5,16(sp)
   2b438:	d9800515 	stw	r6,20(sp)
   2b43c:	00272040 	call	27204 <__locale_charset>
   2b440:	d9400417 	ldw	r5,16(sp)
   2b444:	d9800517 	ldw	r6,20(sp)
   2b448:	8009883a 	mov	r4,r16
   2b44c:	dc400015 	stw	r17,0(sp)
   2b450:	100f883a 	mov	r7,r2
   2b454:	903ee83a 	callr	r18
   2b458:	00ffffc4 	movi	r3,-1
   2b45c:	10c0031e 	bne	r2,r3,2b46c <_wcrtomb_r+0x64>
   2b460:	88000015 	stw	zero,0(r17)
   2b464:	00c02284 	movi	r3,138
   2b468:	80c00015 	stw	r3,0(r16)
   2b46c:	dfc00917 	ldw	ra,36(sp)
   2b470:	dc800817 	ldw	r18,32(sp)
   2b474:	dc400717 	ldw	r17,28(sp)
   2b478:	dc000617 	ldw	r16,24(sp)
   2b47c:	dec00a04 	addi	sp,sp,40
   2b480:	f800283a 	ret
   2b484:	00272040 	call	27204 <__locale_charset>
   2b488:	8009883a 	mov	r4,r16
   2b48c:	dc400015 	stw	r17,0(sp)
   2b490:	d9400104 	addi	r5,sp,4
   2b494:	000d883a 	mov	r6,zero
   2b498:	100f883a 	mov	r7,r2
   2b49c:	903ee83a 	callr	r18
   2b4a0:	003fed06 	br	2b458 <__alt_data_end+0xfffec058>

0002b4a4 <wcrtomb>:
   2b4a4:	defff504 	addi	sp,sp,-44
   2b4a8:	dc400515 	stw	r17,20(sp)
   2b4ac:	dc000415 	stw	r16,16(sp)
   2b4b0:	dfc00a15 	stw	ra,40(sp)
   2b4b4:	dd400915 	stw	r21,36(sp)
   2b4b8:	dd000815 	stw	r20,32(sp)
   2b4bc:	dcc00715 	stw	r19,28(sp)
   2b4c0:	dc800615 	stw	r18,24(sp)
   2b4c4:	2021883a 	mov	r16,r4
   2b4c8:	3023883a 	mov	r17,r6
   2b4cc:	20001d26 	beq	r4,zero,2b544 <wcrtomb+0xa0>
   2b4d0:	048000f4 	movhi	r18,3
   2b4d4:	9486f204 	addi	r18,r18,7112
   2b4d8:	008000f4 	movhi	r2,3
   2b4dc:	95400017 	ldw	r21,0(r18)
   2b4e0:	1086f604 	addi	r2,r2,7128
   2b4e4:	15000017 	ldw	r20,0(r2)
   2b4e8:	2827883a 	mov	r19,r5
   2b4ec:	00272040 	call	27204 <__locale_charset>
   2b4f0:	a809883a 	mov	r4,r21
   2b4f4:	dc400015 	stw	r17,0(sp)
   2b4f8:	800b883a 	mov	r5,r16
   2b4fc:	980d883a 	mov	r6,r19
   2b500:	100f883a 	mov	r7,r2
   2b504:	a03ee83a 	callr	r20
   2b508:	00ffffc4 	movi	r3,-1
   2b50c:	10c0041e 	bne	r2,r3,2b520 <wcrtomb+0x7c>
   2b510:	90c00017 	ldw	r3,0(r18)
   2b514:	01002284 	movi	r4,138
   2b518:	88000015 	stw	zero,0(r17)
   2b51c:	19000015 	stw	r4,0(r3)
   2b520:	dfc00a17 	ldw	ra,40(sp)
   2b524:	dd400917 	ldw	r21,36(sp)
   2b528:	dd000817 	ldw	r20,32(sp)
   2b52c:	dcc00717 	ldw	r19,28(sp)
   2b530:	dc800617 	ldw	r18,24(sp)
   2b534:	dc400517 	ldw	r17,20(sp)
   2b538:	dc000417 	ldw	r16,16(sp)
   2b53c:	dec00b04 	addi	sp,sp,44
   2b540:	f800283a 	ret
   2b544:	048000f4 	movhi	r18,3
   2b548:	9486f204 	addi	r18,r18,7112
   2b54c:	008000f4 	movhi	r2,3
   2b550:	94c00017 	ldw	r19,0(r18)
   2b554:	1086f604 	addi	r2,r2,7128
   2b558:	14000017 	ldw	r16,0(r2)
   2b55c:	00272040 	call	27204 <__locale_charset>
   2b560:	9809883a 	mov	r4,r19
   2b564:	dc400015 	stw	r17,0(sp)
   2b568:	d9400104 	addi	r5,sp,4
   2b56c:	000d883a 	mov	r6,zero
   2b570:	100f883a 	mov	r7,r2
   2b574:	803ee83a 	callr	r16
   2b578:	003fe306 	br	2b508 <__alt_data_end+0xfffec108>

0002b57c <__ascii_wctomb>:
   2b57c:	28000526 	beq	r5,zero,2b594 <__ascii_wctomb+0x18>
   2b580:	00803fc4 	movi	r2,255
   2b584:	11800536 	bltu	r2,r6,2b59c <__ascii_wctomb+0x20>
   2b588:	29800005 	stb	r6,0(r5)
   2b58c:	00800044 	movi	r2,1
   2b590:	f800283a 	ret
   2b594:	0005883a 	mov	r2,zero
   2b598:	f800283a 	ret
   2b59c:	00802284 	movi	r2,138
   2b5a0:	20800015 	stw	r2,0(r4)
   2b5a4:	00bfffc4 	movi	r2,-1
   2b5a8:	f800283a 	ret

0002b5ac <_wctomb_r>:
   2b5ac:	008000f4 	movhi	r2,3
   2b5b0:	defff904 	addi	sp,sp,-28
   2b5b4:	1086f604 	addi	r2,r2,7128
   2b5b8:	dfc00615 	stw	ra,24(sp)
   2b5bc:	dc400515 	stw	r17,20(sp)
   2b5c0:	dc000415 	stw	r16,16(sp)
   2b5c4:	3823883a 	mov	r17,r7
   2b5c8:	14000017 	ldw	r16,0(r2)
   2b5cc:	d9000115 	stw	r4,4(sp)
   2b5d0:	d9400215 	stw	r5,8(sp)
   2b5d4:	d9800315 	stw	r6,12(sp)
   2b5d8:	00272040 	call	27204 <__locale_charset>
   2b5dc:	d9000117 	ldw	r4,4(sp)
   2b5e0:	d9400217 	ldw	r5,8(sp)
   2b5e4:	d9800317 	ldw	r6,12(sp)
   2b5e8:	dc400015 	stw	r17,0(sp)
   2b5ec:	100f883a 	mov	r7,r2
   2b5f0:	803ee83a 	callr	r16
   2b5f4:	dfc00617 	ldw	ra,24(sp)
   2b5f8:	dc400517 	ldw	r17,20(sp)
   2b5fc:	dc000417 	ldw	r16,16(sp)
   2b600:	dec00704 	addi	sp,sp,28
   2b604:	f800283a 	ret

0002b608 <__udivdi3>:
   2b608:	defff504 	addi	sp,sp,-44
   2b60c:	dcc00415 	stw	r19,16(sp)
   2b610:	dc000115 	stw	r16,4(sp)
   2b614:	dfc00a15 	stw	ra,40(sp)
   2b618:	df000915 	stw	fp,36(sp)
   2b61c:	ddc00815 	stw	r23,32(sp)
   2b620:	dd800715 	stw	r22,28(sp)
   2b624:	dd400615 	stw	r21,24(sp)
   2b628:	dd000515 	stw	r20,20(sp)
   2b62c:	dc800315 	stw	r18,12(sp)
   2b630:	dc400215 	stw	r17,8(sp)
   2b634:	2027883a 	mov	r19,r4
   2b638:	2821883a 	mov	r16,r5
   2b63c:	3800421e 	bne	r7,zero,2b748 <__udivdi3+0x140>
   2b640:	3025883a 	mov	r18,r6
   2b644:	2023883a 	mov	r17,r4
   2b648:	2980542e 	bgeu	r5,r6,2b79c <__udivdi3+0x194>
   2b64c:	00bfffd4 	movui	r2,65535
   2b650:	282d883a 	mov	r22,r5
   2b654:	1180a836 	bltu	r2,r6,2b8f8 <__udivdi3+0x2f0>
   2b658:	00803fc4 	movi	r2,255
   2b65c:	1181422e 	bgeu	r2,r6,2bb68 <__udivdi3+0x560>
   2b660:	00800204 	movi	r2,8
   2b664:	1007883a 	mov	r3,r2
   2b668:	3084d83a 	srl	r2,r6,r2
   2b66c:	010000f4 	movhi	r4,3
   2b670:	213f5804 	addi	r4,r4,-672
   2b674:	2085883a 	add	r2,r4,r2
   2b678:	10800003 	ldbu	r2,0(r2)
   2b67c:	10c7883a 	add	r3,r2,r3
   2b680:	00800804 	movi	r2,32
   2b684:	10c5c83a 	sub	r2,r2,r3
   2b688:	10000526 	beq	r2,zero,2b6a0 <__udivdi3+0x98>
   2b68c:	80a0983a 	sll	r16,r16,r2
   2b690:	98c6d83a 	srl	r3,r19,r3
   2b694:	30a4983a 	sll	r18,r6,r2
   2b698:	98a2983a 	sll	r17,r19,r2
   2b69c:	80ecb03a 	or	r22,r16,r3
   2b6a0:	902ad43a 	srli	r21,r18,16
   2b6a4:	b009883a 	mov	r4,r22
   2b6a8:	953fffcc 	andi	r20,r18,65535
   2b6ac:	a80b883a 	mov	r5,r21
   2b6b0:	002251c0 	call	2251c <__umodsi3>
   2b6b4:	b009883a 	mov	r4,r22
   2b6b8:	a80b883a 	mov	r5,r21
   2b6bc:	1027883a 	mov	r19,r2
   2b6c0:	00225140 	call	22514 <__udivsi3>
   2b6c4:	1021883a 	mov	r16,r2
   2b6c8:	8806d43a 	srli	r3,r17,16
   2b6cc:	9804943a 	slli	r2,r19,16
   2b6d0:	8527383a 	mul	r19,r16,r20
   2b6d4:	10c4b03a 	or	r2,r2,r3
   2b6d8:	14c0052e 	bgeu	r2,r19,2b6f0 <__udivdi3+0xe8>
   2b6dc:	1485883a 	add	r2,r2,r18
   2b6e0:	80ffffc4 	addi	r3,r16,-1
   2b6e4:	14800136 	bltu	r2,r18,2b6ec <__udivdi3+0xe4>
   2b6e8:	14c13436 	bltu	r2,r19,2bbbc <__udivdi3+0x5b4>
   2b6ec:	1821883a 	mov	r16,r3
   2b6f0:	14e7c83a 	sub	r19,r2,r19
   2b6f4:	9809883a 	mov	r4,r19
   2b6f8:	a80b883a 	mov	r5,r21
   2b6fc:	002251c0 	call	2251c <__umodsi3>
   2b700:	102d883a 	mov	r22,r2
   2b704:	9809883a 	mov	r4,r19
   2b708:	a80b883a 	mov	r5,r21
   2b70c:	00225140 	call	22514 <__udivsi3>
   2b710:	b02c943a 	slli	r22,r22,16
   2b714:	1529383a 	mul	r20,r2,r20
   2b718:	8c7fffcc 	andi	r17,r17,65535
   2b71c:	b462b03a 	or	r17,r22,r17
   2b720:	8d00052e 	bgeu	r17,r20,2b738 <__udivdi3+0x130>
   2b724:	8ca3883a 	add	r17,r17,r18
   2b728:	10ffffc4 	addi	r3,r2,-1
   2b72c:	8c80f636 	bltu	r17,r18,2bb08 <__udivdi3+0x500>
   2b730:	8d00f52e 	bgeu	r17,r20,2bb08 <__udivdi3+0x500>
   2b734:	10bfff84 	addi	r2,r2,-2
   2b738:	8020943a 	slli	r16,r16,16
   2b73c:	0007883a 	mov	r3,zero
   2b740:	1404b03a 	or	r2,r2,r16
   2b744:	00005b06 	br	2b8b4 <__udivdi3+0x2ac>
   2b748:	29c05836 	bltu	r5,r7,2b8ac <__udivdi3+0x2a4>
   2b74c:	00bfffd4 	movui	r2,65535
   2b750:	11c0642e 	bgeu	r2,r7,2b8e4 <__udivdi3+0x2dc>
   2b754:	00804034 	movhi	r2,256
   2b758:	10bfffc4 	addi	r2,r2,-1
   2b75c:	11c0f32e 	bgeu	r2,r7,2bb2c <__udivdi3+0x524>
   2b760:	00c00604 	movi	r3,24
   2b764:	180b883a 	mov	r5,r3
   2b768:	38c6d83a 	srl	r3,r7,r3
   2b76c:	008000f4 	movhi	r2,3
   2b770:	10bf5804 	addi	r2,r2,-672
   2b774:	10c7883a 	add	r3,r2,r3
   2b778:	18c00003 	ldbu	r3,0(r3)
   2b77c:	01000804 	movi	r4,32
   2b780:	1947883a 	add	r3,r3,r5
   2b784:	20e5c83a 	sub	r18,r4,r3
   2b788:	9000661e 	bne	r18,zero,2b924 <__udivdi3+0x31c>
   2b78c:	3c00f936 	bltu	r7,r16,2bb74 <__udivdi3+0x56c>
   2b790:	9985403a 	cmpgeu	r2,r19,r6
   2b794:	0007883a 	mov	r3,zero
   2b798:	00004606 	br	2b8b4 <__udivdi3+0x2ac>
   2b79c:	3000041e 	bne	r6,zero,2b7b0 <__udivdi3+0x1a8>
   2b7a0:	01000044 	movi	r4,1
   2b7a4:	000b883a 	mov	r5,zero
   2b7a8:	00225140 	call	22514 <__udivsi3>
   2b7ac:	1025883a 	mov	r18,r2
   2b7b0:	00bfffd4 	movui	r2,65535
   2b7b4:	1480562e 	bgeu	r2,r18,2b910 <__udivdi3+0x308>
   2b7b8:	00804034 	movhi	r2,256
   2b7bc:	10bfffc4 	addi	r2,r2,-1
   2b7c0:	1480e32e 	bgeu	r2,r18,2bb50 <__udivdi3+0x548>
   2b7c4:	00800604 	movi	r2,24
   2b7c8:	1007883a 	mov	r3,r2
   2b7cc:	9084d83a 	srl	r2,r18,r2
   2b7d0:	010000f4 	movhi	r4,3
   2b7d4:	213f5804 	addi	r4,r4,-672
   2b7d8:	2085883a 	add	r2,r4,r2
   2b7dc:	10800003 	ldbu	r2,0(r2)
   2b7e0:	10c5883a 	add	r2,r2,r3
   2b7e4:	00c00804 	movi	r3,32
   2b7e8:	1887c83a 	sub	r3,r3,r2
   2b7ec:	1800911e 	bne	r3,zero,2ba34 <__udivdi3+0x42c>
   2b7f0:	9028d43a 	srli	r20,r18,16
   2b7f4:	84a1c83a 	sub	r16,r16,r18
   2b7f8:	957fffcc 	andi	r21,r18,65535
   2b7fc:	00c00044 	movi	r3,1
   2b800:	8009883a 	mov	r4,r16
   2b804:	a00b883a 	mov	r5,r20
   2b808:	d8c00015 	stw	r3,0(sp)
   2b80c:	002251c0 	call	2251c <__umodsi3>
   2b810:	8009883a 	mov	r4,r16
   2b814:	a00b883a 	mov	r5,r20
   2b818:	1027883a 	mov	r19,r2
   2b81c:	00225140 	call	22514 <__udivsi3>
   2b820:	1021883a 	mov	r16,r2
   2b824:	880cd43a 	srli	r6,r17,16
   2b828:	9804943a 	slli	r2,r19,16
   2b82c:	8567383a 	mul	r19,r16,r21
   2b830:	d8c00017 	ldw	r3,0(sp)
   2b834:	1188b03a 	or	r4,r2,r6
   2b838:	24c0052e 	bgeu	r4,r19,2b850 <__udivdi3+0x248>
   2b83c:	2489883a 	add	r4,r4,r18
   2b840:	80bfffc4 	addi	r2,r16,-1
   2b844:	24800136 	bltu	r4,r18,2b84c <__udivdi3+0x244>
   2b848:	24c0d936 	bltu	r4,r19,2bbb0 <__udivdi3+0x5a8>
   2b84c:	1021883a 	mov	r16,r2
   2b850:	24e7c83a 	sub	r19,r4,r19
   2b854:	9809883a 	mov	r4,r19
   2b858:	a00b883a 	mov	r5,r20
   2b85c:	d8c00015 	stw	r3,0(sp)
   2b860:	002251c0 	call	2251c <__umodsi3>
   2b864:	102d883a 	mov	r22,r2
   2b868:	9809883a 	mov	r4,r19
   2b86c:	a00b883a 	mov	r5,r20
   2b870:	00225140 	call	22514 <__udivsi3>
   2b874:	b02c943a 	slli	r22,r22,16
   2b878:	156b383a 	mul	r21,r2,r21
   2b87c:	8c7fffcc 	andi	r17,r17,65535
   2b880:	b462b03a 	or	r17,r22,r17
   2b884:	d8c00017 	ldw	r3,0(sp)
   2b888:	8d40052e 	bgeu	r17,r21,2b8a0 <__udivdi3+0x298>
   2b88c:	8ca3883a 	add	r17,r17,r18
   2b890:	113fffc4 	addi	r4,r2,-1
   2b894:	8c809a36 	bltu	r17,r18,2bb00 <__udivdi3+0x4f8>
   2b898:	8d40992e 	bgeu	r17,r21,2bb00 <__udivdi3+0x4f8>
   2b89c:	10bfff84 	addi	r2,r2,-2
   2b8a0:	8020943a 	slli	r16,r16,16
   2b8a4:	1404b03a 	or	r2,r2,r16
   2b8a8:	00000206 	br	2b8b4 <__udivdi3+0x2ac>
   2b8ac:	0007883a 	mov	r3,zero
   2b8b0:	0005883a 	mov	r2,zero
   2b8b4:	dfc00a17 	ldw	ra,40(sp)
   2b8b8:	df000917 	ldw	fp,36(sp)
   2b8bc:	ddc00817 	ldw	r23,32(sp)
   2b8c0:	dd800717 	ldw	r22,28(sp)
   2b8c4:	dd400617 	ldw	r21,24(sp)
   2b8c8:	dd000517 	ldw	r20,20(sp)
   2b8cc:	dcc00417 	ldw	r19,16(sp)
   2b8d0:	dc800317 	ldw	r18,12(sp)
   2b8d4:	dc400217 	ldw	r17,8(sp)
   2b8d8:	dc000117 	ldw	r16,4(sp)
   2b8dc:	dec00b04 	addi	sp,sp,44
   2b8e0:	f800283a 	ret
   2b8e4:	00803fc4 	movi	r2,255
   2b8e8:	11c0932e 	bgeu	r2,r7,2bb38 <__udivdi3+0x530>
   2b8ec:	00c00204 	movi	r3,8
   2b8f0:	180b883a 	mov	r5,r3
   2b8f4:	003f9c06 	br	2b768 <__alt_data_end+0xfffec368>
   2b8f8:	00804034 	movhi	r2,256
   2b8fc:	10bfffc4 	addi	r2,r2,-1
   2b900:	1180902e 	bgeu	r2,r6,2bb44 <__udivdi3+0x53c>
   2b904:	00800604 	movi	r2,24
   2b908:	1007883a 	mov	r3,r2
   2b90c:	003f5606 	br	2b668 <__alt_data_end+0xfffec268>
   2b910:	00803fc4 	movi	r2,255
   2b914:	1480912e 	bgeu	r2,r18,2bb5c <__udivdi3+0x554>
   2b918:	00800204 	movi	r2,8
   2b91c:	1007883a 	mov	r3,r2
   2b920:	003faa06 	br	2b7cc <__alt_data_end+0xfffec3cc>
   2b924:	30eed83a 	srl	r23,r6,r3
   2b928:	3c8e983a 	sll	r7,r7,r18
   2b92c:	80f8d83a 	srl	fp,r16,r3
   2b930:	98c6d83a 	srl	r3,r19,r3
   2b934:	3deeb03a 	or	r23,r7,r23
   2b938:	b828d43a 	srli	r20,r23,16
   2b93c:	84a0983a 	sll	r16,r16,r18
   2b940:	e009883a 	mov	r4,fp
   2b944:	a00b883a 	mov	r5,r20
   2b948:	80e2b03a 	or	r17,r16,r3
   2b94c:	34aa983a 	sll	r21,r6,r18
   2b950:	002251c0 	call	2251c <__umodsi3>
   2b954:	e009883a 	mov	r4,fp
   2b958:	a00b883a 	mov	r5,r20
   2b95c:	102d883a 	mov	r22,r2
   2b960:	00225140 	call	22514 <__udivsi3>
   2b964:	1021883a 	mov	r16,r2
   2b968:	bf3fffcc 	andi	fp,r23,65535
   2b96c:	b004943a 	slli	r2,r22,16
   2b970:	8808d43a 	srli	r4,r17,16
   2b974:	872d383a 	mul	r22,r16,fp
   2b978:	1104b03a 	or	r2,r2,r4
   2b97c:	1580042e 	bgeu	r2,r22,2b990 <__udivdi3+0x388>
   2b980:	15c5883a 	add	r2,r2,r23
   2b984:	80ffffc4 	addi	r3,r16,-1
   2b988:	15c0812e 	bgeu	r2,r23,2bb90 <__udivdi3+0x588>
   2b98c:	1821883a 	mov	r16,r3
   2b990:	15adc83a 	sub	r22,r2,r22
   2b994:	b009883a 	mov	r4,r22
   2b998:	a00b883a 	mov	r5,r20
   2b99c:	002251c0 	call	2251c <__umodsi3>
   2b9a0:	a00b883a 	mov	r5,r20
   2b9a4:	b009883a 	mov	r4,r22
   2b9a8:	d8800015 	stw	r2,0(sp)
   2b9ac:	00225140 	call	22514 <__udivsi3>
   2b9b0:	d8c00017 	ldw	r3,0(sp)
   2b9b4:	170b383a 	mul	r5,r2,fp
   2b9b8:	8c7fffcc 	andi	r17,r17,65535
   2b9bc:	1806943a 	slli	r3,r3,16
   2b9c0:	1c46b03a 	or	r3,r3,r17
   2b9c4:	1940042e 	bgeu	r3,r5,2b9d8 <__udivdi3+0x3d0>
   2b9c8:	1dc7883a 	add	r3,r3,r23
   2b9cc:	113fffc4 	addi	r4,r2,-1
   2b9d0:	1dc06b2e 	bgeu	r3,r23,2bb80 <__udivdi3+0x578>
   2b9d4:	2005883a 	mov	r2,r4
   2b9d8:	8020943a 	slli	r16,r16,16
   2b9dc:	a9ffffcc 	andi	r7,r21,65535
   2b9e0:	a82ad43a 	srli	r21,r21,16
   2b9e4:	1404b03a 	or	r2,r2,r16
   2b9e8:	113fffcc 	andi	r4,r2,65535
   2b9ec:	100cd43a 	srli	r6,r2,16
   2b9f0:	21d3383a 	mul	r9,r4,r7
   2b9f4:	2549383a 	mul	r4,r4,r21
   2b9f8:	31cf383a 	mul	r7,r6,r7
   2b9fc:	4810d43a 	srli	r8,r9,16
   2ba00:	1947c83a 	sub	r3,r3,r5
   2ba04:	3909883a 	add	r4,r7,r4
   2ba08:	2209883a 	add	r4,r4,r8
   2ba0c:	354d383a 	mul	r6,r6,r21
   2ba10:	21c0022e 	bgeu	r4,r7,2ba1c <__udivdi3+0x414>
   2ba14:	01400074 	movhi	r5,1
   2ba18:	314d883a 	add	r6,r6,r5
   2ba1c:	202ad43a 	srli	r21,r4,16
   2ba20:	354d883a 	add	r6,r6,r21
   2ba24:	19803f36 	bltu	r3,r6,2bb24 <__udivdi3+0x51c>
   2ba28:	19803926 	beq	r3,r6,2bb10 <__udivdi3+0x508>
   2ba2c:	0007883a 	mov	r3,zero
   2ba30:	003fa006 	br	2b8b4 <__alt_data_end+0xfffec4b4>
   2ba34:	90e4983a 	sll	r18,r18,r3
   2ba38:	80aad83a 	srl	r21,r16,r2
   2ba3c:	80e0983a 	sll	r16,r16,r3
   2ba40:	9028d43a 	srli	r20,r18,16
   2ba44:	9884d83a 	srl	r2,r19,r2
   2ba48:	a809883a 	mov	r4,r21
   2ba4c:	a00b883a 	mov	r5,r20
   2ba50:	80acb03a 	or	r22,r16,r2
   2ba54:	98e2983a 	sll	r17,r19,r3
   2ba58:	002251c0 	call	2251c <__umodsi3>
   2ba5c:	a809883a 	mov	r4,r21
   2ba60:	a00b883a 	mov	r5,r20
   2ba64:	1021883a 	mov	r16,r2
   2ba68:	00225140 	call	22514 <__udivsi3>
   2ba6c:	957fffcc 	andi	r21,r18,65535
   2ba70:	8020943a 	slli	r16,r16,16
   2ba74:	b00ad43a 	srli	r5,r22,16
   2ba78:	1567383a 	mul	r19,r2,r21
   2ba7c:	102f883a 	mov	r23,r2
   2ba80:	8148b03a 	or	r4,r16,r5
   2ba84:	24c0062e 	bgeu	r4,r19,2baa0 <__udivdi3+0x498>
   2ba88:	2489883a 	add	r4,r4,r18
   2ba8c:	10bfffc4 	addi	r2,r2,-1
   2ba90:	24804536 	bltu	r4,r18,2bba8 <__udivdi3+0x5a0>
   2ba94:	24c0442e 	bgeu	r4,r19,2bba8 <__udivdi3+0x5a0>
   2ba98:	bdffff84 	addi	r23,r23,-2
   2ba9c:	2489883a 	add	r4,r4,r18
   2baa0:	24e7c83a 	sub	r19,r4,r19
   2baa4:	9809883a 	mov	r4,r19
   2baa8:	a00b883a 	mov	r5,r20
   2baac:	002251c0 	call	2251c <__umodsi3>
   2bab0:	1021883a 	mov	r16,r2
   2bab4:	9809883a 	mov	r4,r19
   2bab8:	a00b883a 	mov	r5,r20
   2babc:	00225140 	call	22514 <__udivsi3>
   2bac0:	8020943a 	slli	r16,r16,16
   2bac4:	1007883a 	mov	r3,r2
   2bac8:	1545383a 	mul	r2,r2,r21
   2bacc:	b13fffcc 	andi	r4,r22,65535
   2bad0:	8108b03a 	or	r4,r16,r4
   2bad4:	2080062e 	bgeu	r4,r2,2baf0 <__udivdi3+0x4e8>
   2bad8:	2489883a 	add	r4,r4,r18
   2badc:	197fffc4 	addi	r5,r3,-1
   2bae0:	24802f36 	bltu	r4,r18,2bba0 <__udivdi3+0x598>
   2bae4:	20802e2e 	bgeu	r4,r2,2bba0 <__udivdi3+0x598>
   2bae8:	18ffff84 	addi	r3,r3,-2
   2baec:	2489883a 	add	r4,r4,r18
   2baf0:	b82e943a 	slli	r23,r23,16
   2baf4:	20a1c83a 	sub	r16,r4,r2
   2baf8:	1dc6b03a 	or	r3,r3,r23
   2bafc:	003f4006 	br	2b800 <__alt_data_end+0xfffec400>
   2bb00:	2005883a 	mov	r2,r4
   2bb04:	003f6606 	br	2b8a0 <__alt_data_end+0xfffec4a0>
   2bb08:	1805883a 	mov	r2,r3
   2bb0c:	003f0a06 	br	2b738 <__alt_data_end+0xfffec338>
   2bb10:	2006943a 	slli	r3,r4,16
   2bb14:	9c88983a 	sll	r4,r19,r18
   2bb18:	4a7fffcc 	andi	r9,r9,65535
   2bb1c:	1a47883a 	add	r3,r3,r9
   2bb20:	20ffc22e 	bgeu	r4,r3,2ba2c <__alt_data_end+0xfffec62c>
   2bb24:	10bfffc4 	addi	r2,r2,-1
   2bb28:	003fc006 	br	2ba2c <__alt_data_end+0xfffec62c>
   2bb2c:	00c00404 	movi	r3,16
   2bb30:	180b883a 	mov	r5,r3
   2bb34:	003f0c06 	br	2b768 <__alt_data_end+0xfffec368>
   2bb38:	0007883a 	mov	r3,zero
   2bb3c:	000b883a 	mov	r5,zero
   2bb40:	003f0906 	br	2b768 <__alt_data_end+0xfffec368>
   2bb44:	00800404 	movi	r2,16
   2bb48:	1007883a 	mov	r3,r2
   2bb4c:	003ec606 	br	2b668 <__alt_data_end+0xfffec268>
   2bb50:	00800404 	movi	r2,16
   2bb54:	1007883a 	mov	r3,r2
   2bb58:	003f1c06 	br	2b7cc <__alt_data_end+0xfffec3cc>
   2bb5c:	0005883a 	mov	r2,zero
   2bb60:	0007883a 	mov	r3,zero
   2bb64:	003f1906 	br	2b7cc <__alt_data_end+0xfffec3cc>
   2bb68:	0005883a 	mov	r2,zero
   2bb6c:	0007883a 	mov	r3,zero
   2bb70:	003ebd06 	br	2b668 <__alt_data_end+0xfffec268>
   2bb74:	0007883a 	mov	r3,zero
   2bb78:	00800044 	movi	r2,1
   2bb7c:	003f4d06 	br	2b8b4 <__alt_data_end+0xfffec4b4>
   2bb80:	197f942e 	bgeu	r3,r5,2b9d4 <__alt_data_end+0xfffec5d4>
   2bb84:	10bfff84 	addi	r2,r2,-2
   2bb88:	1dc7883a 	add	r3,r3,r23
   2bb8c:	003f9206 	br	2b9d8 <__alt_data_end+0xfffec5d8>
   2bb90:	15bf7e2e 	bgeu	r2,r22,2b98c <__alt_data_end+0xfffec58c>
   2bb94:	843fff84 	addi	r16,r16,-2
   2bb98:	15c5883a 	add	r2,r2,r23
   2bb9c:	003f7c06 	br	2b990 <__alt_data_end+0xfffec590>
   2bba0:	2807883a 	mov	r3,r5
   2bba4:	003fd206 	br	2baf0 <__alt_data_end+0xfffec6f0>
   2bba8:	102f883a 	mov	r23,r2
   2bbac:	003fbc06 	br	2baa0 <__alt_data_end+0xfffec6a0>
   2bbb0:	843fff84 	addi	r16,r16,-2
   2bbb4:	2489883a 	add	r4,r4,r18
   2bbb8:	003f2506 	br	2b850 <__alt_data_end+0xfffec450>
   2bbbc:	843fff84 	addi	r16,r16,-2
   2bbc0:	1485883a 	add	r2,r2,r18
   2bbc4:	003eca06 	br	2b6f0 <__alt_data_end+0xfffec2f0>

0002bbc8 <__umoddi3>:
   2bbc8:	defff404 	addi	sp,sp,-48
   2bbcc:	ddc00915 	stw	r23,36(sp)
   2bbd0:	dc400315 	stw	r17,12(sp)
   2bbd4:	dc000215 	stw	r16,8(sp)
   2bbd8:	dfc00b15 	stw	ra,44(sp)
   2bbdc:	df000a15 	stw	fp,40(sp)
   2bbe0:	dd800815 	stw	r22,32(sp)
   2bbe4:	dd400715 	stw	r21,28(sp)
   2bbe8:	dd000615 	stw	r20,24(sp)
   2bbec:	dcc00515 	stw	r19,20(sp)
   2bbf0:	dc800415 	stw	r18,16(sp)
   2bbf4:	2021883a 	mov	r16,r4
   2bbf8:	2823883a 	mov	r17,r5
   2bbfc:	282f883a 	mov	r23,r5
   2bc00:	3800381e 	bne	r7,zero,2bce4 <__umoddi3+0x11c>
   2bc04:	3027883a 	mov	r19,r6
   2bc08:	2029883a 	mov	r20,r4
   2bc0c:	29804e2e 	bgeu	r5,r6,2bd48 <__umoddi3+0x180>
   2bc10:	00bfffd4 	movui	r2,65535
   2bc14:	11809c36 	bltu	r2,r6,2be88 <__umoddi3+0x2c0>
   2bc18:	00803fc4 	movi	r2,255
   2bc1c:	11813b2e 	bgeu	r2,r6,2c10c <__umoddi3+0x544>
   2bc20:	01400204 	movi	r5,8
   2bc24:	2805883a 	mov	r2,r5
   2bc28:	314ad83a 	srl	r5,r6,r5
   2bc2c:	00c000f4 	movhi	r3,3
   2bc30:	18ff5804 	addi	r3,r3,-672
   2bc34:	194b883a 	add	r5,r3,r5
   2bc38:	29000003 	ldbu	r4,0(r5)
   2bc3c:	2089883a 	add	r4,r4,r2
   2bc40:	00800804 	movi	r2,32
   2bc44:	1105c83a 	sub	r2,r2,r4
   2bc48:	1000ec26 	beq	r2,zero,2bffc <__umoddi3+0x434>
   2bc4c:	88a2983a 	sll	r17,r17,r2
   2bc50:	8108d83a 	srl	r4,r16,r4
   2bc54:	30a6983a 	sll	r19,r6,r2
   2bc58:	80a8983a 	sll	r20,r16,r2
   2bc5c:	1025883a 	mov	r18,r2
   2bc60:	892eb03a 	or	r23,r17,r4
   2bc64:	982cd43a 	srli	r22,r19,16
   2bc68:	b809883a 	mov	r4,r23
   2bc6c:	9d7fffcc 	andi	r21,r19,65535
   2bc70:	b00b883a 	mov	r5,r22
   2bc74:	002251c0 	call	2251c <__umodsi3>
   2bc78:	b809883a 	mov	r4,r23
   2bc7c:	b00b883a 	mov	r5,r22
   2bc80:	1021883a 	mov	r16,r2
   2bc84:	00225140 	call	22514 <__udivsi3>
   2bc88:	8020943a 	slli	r16,r16,16
   2bc8c:	a00cd43a 	srli	r6,r20,16
   2bc90:	1545383a 	mul	r2,r2,r21
   2bc94:	8188b03a 	or	r4,r16,r6
   2bc98:	2080042e 	bgeu	r4,r2,2bcac <__umoddi3+0xe4>
   2bc9c:	24c9883a 	add	r4,r4,r19
   2bca0:	24c00236 	bltu	r4,r19,2bcac <__umoddi3+0xe4>
   2bca4:	2080012e 	bgeu	r4,r2,2bcac <__umoddi3+0xe4>
   2bca8:	24c9883a 	add	r4,r4,r19
   2bcac:	20a3c83a 	sub	r17,r4,r2
   2bcb0:	8809883a 	mov	r4,r17
   2bcb4:	b00b883a 	mov	r5,r22
   2bcb8:	002251c0 	call	2251c <__umodsi3>
   2bcbc:	8809883a 	mov	r4,r17
   2bcc0:	b00b883a 	mov	r5,r22
   2bcc4:	1021883a 	mov	r16,r2
   2bcc8:	00225140 	call	22514 <__udivsi3>
   2bccc:	8006943a 	slli	r3,r16,16
   2bcd0:	1545383a 	mul	r2,r2,r21
   2bcd4:	a13fffcc 	andi	r4,r20,65535
   2bcd8:	1906b03a 	or	r3,r3,r4
   2bcdc:	1880532e 	bgeu	r3,r2,2be2c <__umoddi3+0x264>
   2bce0:	00004e06 	br	2be1c <__umoddi3+0x254>
   2bce4:	29c05536 	bltu	r5,r7,2be3c <__umoddi3+0x274>
   2bce8:	00bfffd4 	movui	r2,65535
   2bcec:	11c0612e 	bgeu	r2,r7,2be74 <__umoddi3+0x2ac>
   2bcf0:	00804034 	movhi	r2,256
   2bcf4:	10bfffc4 	addi	r2,r2,-1
   2bcf8:	11c0f82e 	bgeu	r2,r7,2c0dc <__umoddi3+0x514>
   2bcfc:	01400604 	movi	r5,24
   2bd00:	282b883a 	mov	r21,r5
   2bd04:	394ad83a 	srl	r5,r7,r5
   2bd08:	00c000f4 	movhi	r3,3
   2bd0c:	18ff5804 	addi	r3,r3,-672
   2bd10:	194b883a 	add	r5,r3,r5
   2bd14:	28800003 	ldbu	r2,0(r5)
   2bd18:	00c00804 	movi	r3,32
   2bd1c:	156b883a 	add	r21,r2,r21
   2bd20:	1d69c83a 	sub	r20,r3,r21
   2bd24:	a000631e 	bne	r20,zero,2beb4 <__umoddi3+0x2ec>
   2bd28:	3c400136 	bltu	r7,r17,2bd30 <__umoddi3+0x168>
   2bd2c:	81810436 	bltu	r16,r6,2c140 <__umoddi3+0x578>
   2bd30:	8185c83a 	sub	r2,r16,r6
   2bd34:	89e3c83a 	sub	r17,r17,r7
   2bd38:	8087803a 	cmpltu	r3,r16,r2
   2bd3c:	88efc83a 	sub	r23,r17,r3
   2bd40:	b807883a 	mov	r3,r23
   2bd44:	00003f06 	br	2be44 <__umoddi3+0x27c>
   2bd48:	3000041e 	bne	r6,zero,2bd5c <__umoddi3+0x194>
   2bd4c:	01000044 	movi	r4,1
   2bd50:	000b883a 	mov	r5,zero
   2bd54:	00225140 	call	22514 <__udivsi3>
   2bd58:	1027883a 	mov	r19,r2
   2bd5c:	00bfffd4 	movui	r2,65535
   2bd60:	14c04f2e 	bgeu	r2,r19,2bea0 <__umoddi3+0x2d8>
   2bd64:	00804034 	movhi	r2,256
   2bd68:	10bfffc4 	addi	r2,r2,-1
   2bd6c:	14c0e42e 	bgeu	r2,r19,2c100 <__umoddi3+0x538>
   2bd70:	00800604 	movi	r2,24
   2bd74:	1007883a 	mov	r3,r2
   2bd78:	9884d83a 	srl	r2,r19,r2
   2bd7c:	010000f4 	movhi	r4,3
   2bd80:	213f5804 	addi	r4,r4,-672
   2bd84:	2085883a 	add	r2,r4,r2
   2bd88:	11000003 	ldbu	r4,0(r2)
   2bd8c:	00800804 	movi	r2,32
   2bd90:	20c7883a 	add	r3,r4,r3
   2bd94:	10c5c83a 	sub	r2,r2,r3
   2bd98:	10009a1e 	bne	r2,zero,2c004 <__umoddi3+0x43c>
   2bd9c:	982cd43a 	srli	r22,r19,16
   2bda0:	8ce3c83a 	sub	r17,r17,r19
   2bda4:	9c3fffcc 	andi	r16,r19,65535
   2bda8:	0025883a 	mov	r18,zero
   2bdac:	8809883a 	mov	r4,r17
   2bdb0:	b00b883a 	mov	r5,r22
   2bdb4:	002251c0 	call	2251c <__umodsi3>
   2bdb8:	8809883a 	mov	r4,r17
   2bdbc:	b00b883a 	mov	r5,r22
   2bdc0:	102b883a 	mov	r21,r2
   2bdc4:	00225140 	call	22514 <__udivsi3>
   2bdc8:	a806943a 	slli	r3,r21,16
   2bdcc:	a008d43a 	srli	r4,r20,16
   2bdd0:	1405383a 	mul	r2,r2,r16
   2bdd4:	190cb03a 	or	r6,r3,r4
   2bdd8:	3080032e 	bgeu	r6,r2,2bde8 <__umoddi3+0x220>
   2bddc:	34cd883a 	add	r6,r6,r19
   2bde0:	34c00136 	bltu	r6,r19,2bde8 <__umoddi3+0x220>
   2bde4:	3080d436 	bltu	r6,r2,2c138 <__umoddi3+0x570>
   2bde8:	30abc83a 	sub	r21,r6,r2
   2bdec:	a809883a 	mov	r4,r21
   2bdf0:	b00b883a 	mov	r5,r22
   2bdf4:	002251c0 	call	2251c <__umodsi3>
   2bdf8:	1023883a 	mov	r17,r2
   2bdfc:	a809883a 	mov	r4,r21
   2be00:	b00b883a 	mov	r5,r22
   2be04:	00225140 	call	22514 <__udivsi3>
   2be08:	8822943a 	slli	r17,r17,16
   2be0c:	1405383a 	mul	r2,r2,r16
   2be10:	a13fffcc 	andi	r4,r20,65535
   2be14:	8906b03a 	or	r3,r17,r4
   2be18:	1880042e 	bgeu	r3,r2,2be2c <__umoddi3+0x264>
   2be1c:	1cc7883a 	add	r3,r3,r19
   2be20:	1cc00236 	bltu	r3,r19,2be2c <__umoddi3+0x264>
   2be24:	1880012e 	bgeu	r3,r2,2be2c <__umoddi3+0x264>
   2be28:	1cc7883a 	add	r3,r3,r19
   2be2c:	1887c83a 	sub	r3,r3,r2
   2be30:	1c84d83a 	srl	r2,r3,r18
   2be34:	0007883a 	mov	r3,zero
   2be38:	00000206 	br	2be44 <__umoddi3+0x27c>
   2be3c:	2005883a 	mov	r2,r4
   2be40:	2807883a 	mov	r3,r5
   2be44:	dfc00b17 	ldw	ra,44(sp)
   2be48:	df000a17 	ldw	fp,40(sp)
   2be4c:	ddc00917 	ldw	r23,36(sp)
   2be50:	dd800817 	ldw	r22,32(sp)
   2be54:	dd400717 	ldw	r21,28(sp)
   2be58:	dd000617 	ldw	r20,24(sp)
   2be5c:	dcc00517 	ldw	r19,20(sp)
   2be60:	dc800417 	ldw	r18,16(sp)
   2be64:	dc400317 	ldw	r17,12(sp)
   2be68:	dc000217 	ldw	r16,8(sp)
   2be6c:	dec00c04 	addi	sp,sp,48
   2be70:	f800283a 	ret
   2be74:	00803fc4 	movi	r2,255
   2be78:	11c0952e 	bgeu	r2,r7,2c0d0 <__umoddi3+0x508>
   2be7c:	01400204 	movi	r5,8
   2be80:	282b883a 	mov	r21,r5
   2be84:	003f9f06 	br	2bd04 <__alt_data_end+0xfffec904>
   2be88:	00804034 	movhi	r2,256
   2be8c:	10bfffc4 	addi	r2,r2,-1
   2be90:	1180952e 	bgeu	r2,r6,2c0e8 <__umoddi3+0x520>
   2be94:	01400604 	movi	r5,24
   2be98:	2805883a 	mov	r2,r5
   2be9c:	003f6206 	br	2bc28 <__alt_data_end+0xfffec828>
   2bea0:	00803fc4 	movi	r2,255
   2bea4:	14c0932e 	bgeu	r2,r19,2c0f4 <__umoddi3+0x52c>
   2bea8:	00800204 	movi	r2,8
   2beac:	1007883a 	mov	r3,r2
   2beb0:	003fb106 	br	2bd78 <__alt_data_end+0xfffec978>
   2beb4:	3548d83a 	srl	r4,r6,r21
   2beb8:	3d0e983a 	sll	r7,r7,r20
   2bebc:	8d10983a 	sll	r8,r17,r20
   2bec0:	8d6cd83a 	srl	r22,r17,r21
   2bec4:	3922b03a 	or	r17,r7,r4
   2bec8:	882ed43a 	srli	r23,r17,16
   2becc:	8564d83a 	srl	r18,r16,r21
   2bed0:	b009883a 	mov	r4,r22
   2bed4:	b80b883a 	mov	r5,r23
   2bed8:	44a4b03a 	or	r18,r8,r18
   2bedc:	3526983a 	sll	r19,r6,r20
   2bee0:	002251c0 	call	2251c <__umodsi3>
   2bee4:	b009883a 	mov	r4,r22
   2bee8:	b80b883a 	mov	r5,r23
   2beec:	1039883a 	mov	fp,r2
   2bef0:	00225140 	call	22514 <__udivsi3>
   2bef4:	102d883a 	mov	r22,r2
   2bef8:	8a3fffcc 	andi	r8,r17,65535
   2befc:	e004943a 	slli	r2,fp,16
   2bf00:	900cd43a 	srli	r6,r18,16
   2bf04:	b239383a 	mul	fp,r22,r8
   2bf08:	8520983a 	sll	r16,r16,r20
   2bf0c:	118ab03a 	or	r5,r2,r6
   2bf10:	2f00042e 	bgeu	r5,fp,2bf24 <__umoddi3+0x35c>
   2bf14:	2c4b883a 	add	r5,r5,r17
   2bf18:	b0bfffc4 	addi	r2,r22,-1
   2bf1c:	2c40822e 	bgeu	r5,r17,2c128 <__umoddi3+0x560>
   2bf20:	102d883a 	mov	r22,r2
   2bf24:	2f39c83a 	sub	fp,r5,fp
   2bf28:	e009883a 	mov	r4,fp
   2bf2c:	b80b883a 	mov	r5,r23
   2bf30:	da000115 	stw	r8,4(sp)
   2bf34:	002251c0 	call	2251c <__umodsi3>
   2bf38:	e009883a 	mov	r4,fp
   2bf3c:	b80b883a 	mov	r5,r23
   2bf40:	d8800015 	stw	r2,0(sp)
   2bf44:	00225140 	call	22514 <__udivsi3>
   2bf48:	d9800017 	ldw	r6,0(sp)
   2bf4c:	da000117 	ldw	r8,4(sp)
   2bf50:	94bfffcc 	andi	r18,r18,65535
   2bf54:	300c943a 	slli	r6,r6,16
   2bf58:	1209383a 	mul	r4,r2,r8
   2bf5c:	3490b03a 	or	r8,r6,r18
   2bf60:	4100042e 	bgeu	r8,r4,2bf74 <__umoddi3+0x3ac>
   2bf64:	4451883a 	add	r8,r8,r17
   2bf68:	10ffffc4 	addi	r3,r2,-1
   2bf6c:	44406a2e 	bgeu	r8,r17,2c118 <__umoddi3+0x550>
   2bf70:	1805883a 	mov	r2,r3
   2bf74:	b012943a 	slli	r9,r22,16
   2bf78:	9abfffcc 	andi	r10,r19,65535
   2bf7c:	980ed43a 	srli	r7,r19,16
   2bf80:	124ab03a 	or	r5,r2,r9
   2bf84:	2a7fffcc 	andi	r9,r5,65535
   2bf88:	280ad43a 	srli	r5,r5,16
   2bf8c:	4a8d383a 	mul	r6,r9,r10
   2bf90:	49d3383a 	mul	r9,r9,r7
   2bf94:	2a95383a 	mul	r10,r5,r10
   2bf98:	3004d43a 	srli	r2,r6,16
   2bf9c:	4111c83a 	sub	r8,r8,r4
   2bfa0:	5253883a 	add	r9,r10,r9
   2bfa4:	4893883a 	add	r9,r9,r2
   2bfa8:	29cb383a 	mul	r5,r5,r7
   2bfac:	4a80022e 	bgeu	r9,r10,2bfb8 <__umoddi3+0x3f0>
   2bfb0:	00800074 	movhi	r2,1
   2bfb4:	288b883a 	add	r5,r5,r2
   2bfb8:	4808d43a 	srli	r4,r9,16
   2bfbc:	4812943a 	slli	r9,r9,16
   2bfc0:	31bfffcc 	andi	r6,r6,65535
   2bfc4:	290b883a 	add	r5,r5,r4
   2bfc8:	498d883a 	add	r6,r9,r6
   2bfcc:	41403a36 	bltu	r8,r5,2c0b8 <__umoddi3+0x4f0>
   2bfd0:	41405d26 	beq	r8,r5,2c148 <__umoddi3+0x580>
   2bfd4:	4149c83a 	sub	r4,r8,r5
   2bfd8:	300f883a 	mov	r7,r6
   2bfdc:	81cfc83a 	sub	r7,r16,r7
   2bfe0:	81c7803a 	cmpltu	r3,r16,r7
   2bfe4:	20c7c83a 	sub	r3,r4,r3
   2bfe8:	1d44983a 	sll	r2,r3,r21
   2bfec:	3d0ed83a 	srl	r7,r7,r20
   2bff0:	1d06d83a 	srl	r3,r3,r20
   2bff4:	11c4b03a 	or	r2,r2,r7
   2bff8:	003f9206 	br	2be44 <__alt_data_end+0xfffeca44>
   2bffc:	0025883a 	mov	r18,zero
   2c000:	003f1806 	br	2bc64 <__alt_data_end+0xfffec864>
   2c004:	98a6983a 	sll	r19,r19,r2
   2c008:	88e8d83a 	srl	r20,r17,r3
   2c00c:	80c6d83a 	srl	r3,r16,r3
   2c010:	982cd43a 	srli	r22,r19,16
   2c014:	88a2983a 	sll	r17,r17,r2
   2c018:	a009883a 	mov	r4,r20
   2c01c:	b00b883a 	mov	r5,r22
   2c020:	88eab03a 	or	r21,r17,r3
   2c024:	1025883a 	mov	r18,r2
   2c028:	002251c0 	call	2251c <__umodsi3>
   2c02c:	a009883a 	mov	r4,r20
   2c030:	b00b883a 	mov	r5,r22
   2c034:	1023883a 	mov	r17,r2
   2c038:	00225140 	call	22514 <__udivsi3>
   2c03c:	9f3fffcc 	andi	fp,r19,65535
   2c040:	8822943a 	slli	r17,r17,16
   2c044:	a80ad43a 	srli	r5,r21,16
   2c048:	1705383a 	mul	r2,r2,fp
   2c04c:	84a8983a 	sll	r20,r16,r18
   2c050:	8948b03a 	or	r4,r17,r5
   2c054:	2080042e 	bgeu	r4,r2,2c068 <__umoddi3+0x4a0>
   2c058:	24c9883a 	add	r4,r4,r19
   2c05c:	24c00236 	bltu	r4,r19,2c068 <__umoddi3+0x4a0>
   2c060:	2080012e 	bgeu	r4,r2,2c068 <__umoddi3+0x4a0>
   2c064:	24c9883a 	add	r4,r4,r19
   2c068:	20afc83a 	sub	r23,r4,r2
   2c06c:	b809883a 	mov	r4,r23
   2c070:	b00b883a 	mov	r5,r22
   2c074:	002251c0 	call	2251c <__umodsi3>
   2c078:	1023883a 	mov	r17,r2
   2c07c:	b809883a 	mov	r4,r23
   2c080:	b00b883a 	mov	r5,r22
   2c084:	00225140 	call	22514 <__udivsi3>
   2c088:	8822943a 	slli	r17,r17,16
   2c08c:	1705383a 	mul	r2,r2,fp
   2c090:	a93fffcc 	andi	r4,r21,65535
   2c094:	8908b03a 	or	r4,r17,r4
   2c098:	2080042e 	bgeu	r4,r2,2c0ac <__umoddi3+0x4e4>
   2c09c:	24c9883a 	add	r4,r4,r19
   2c0a0:	24c00236 	bltu	r4,r19,2c0ac <__umoddi3+0x4e4>
   2c0a4:	2080012e 	bgeu	r4,r2,2c0ac <__umoddi3+0x4e4>
   2c0a8:	24c9883a 	add	r4,r4,r19
   2c0ac:	20a3c83a 	sub	r17,r4,r2
   2c0b0:	e021883a 	mov	r16,fp
   2c0b4:	003f3d06 	br	2bdac <__alt_data_end+0xfffec9ac>
   2c0b8:	34cfc83a 	sub	r7,r6,r19
   2c0bc:	2c4bc83a 	sub	r5,r5,r17
   2c0c0:	31cd803a 	cmpltu	r6,r6,r7
   2c0c4:	298dc83a 	sub	r6,r5,r6
   2c0c8:	4189c83a 	sub	r4,r8,r6
   2c0cc:	003fc306 	br	2bfdc <__alt_data_end+0xfffecbdc>
   2c0d0:	000b883a 	mov	r5,zero
   2c0d4:	002b883a 	mov	r21,zero
   2c0d8:	003f0a06 	br	2bd04 <__alt_data_end+0xfffec904>
   2c0dc:	01400404 	movi	r5,16
   2c0e0:	282b883a 	mov	r21,r5
   2c0e4:	003f0706 	br	2bd04 <__alt_data_end+0xfffec904>
   2c0e8:	01400404 	movi	r5,16
   2c0ec:	2805883a 	mov	r2,r5
   2c0f0:	003ecd06 	br	2bc28 <__alt_data_end+0xfffec828>
   2c0f4:	0005883a 	mov	r2,zero
   2c0f8:	0007883a 	mov	r3,zero
   2c0fc:	003f1e06 	br	2bd78 <__alt_data_end+0xfffec978>
   2c100:	00800404 	movi	r2,16
   2c104:	1007883a 	mov	r3,r2
   2c108:	003f1b06 	br	2bd78 <__alt_data_end+0xfffec978>
   2c10c:	000b883a 	mov	r5,zero
   2c110:	0005883a 	mov	r2,zero
   2c114:	003ec406 	br	2bc28 <__alt_data_end+0xfffec828>
   2c118:	413f952e 	bgeu	r8,r4,2bf70 <__alt_data_end+0xfffecb70>
   2c11c:	10bfff84 	addi	r2,r2,-2
   2c120:	4451883a 	add	r8,r8,r17
   2c124:	003f9306 	br	2bf74 <__alt_data_end+0xfffecb74>
   2c128:	2f3f7d2e 	bgeu	r5,fp,2bf20 <__alt_data_end+0xfffecb20>
   2c12c:	b5bfff84 	addi	r22,r22,-2
   2c130:	2c4b883a 	add	r5,r5,r17
   2c134:	003f7b06 	br	2bf24 <__alt_data_end+0xfffecb24>
   2c138:	34cd883a 	add	r6,r6,r19
   2c13c:	003f2a06 	br	2bde8 <__alt_data_end+0xfffec9e8>
   2c140:	8005883a 	mov	r2,r16
   2c144:	003efe06 	br	2bd40 <__alt_data_end+0xfffec940>
   2c148:	81bfdb36 	bltu	r16,r6,2c0b8 <__alt_data_end+0xfffeccb8>
   2c14c:	300f883a 	mov	r7,r6
   2c150:	0009883a 	mov	r4,zero
   2c154:	003fa106 	br	2bfdc <__alt_data_end+0xfffecbdc>

0002c158 <__adddf3>:
   2c158:	02000434 	movhi	r8,16
   2c15c:	423fffc4 	addi	r8,r8,-1
   2c160:	defffb04 	addi	sp,sp,-20
   2c164:	2a12703a 	and	r9,r5,r8
   2c168:	2806d7fa 	srli	r3,r5,31
   2c16c:	3a10703a 	and	r8,r7,r8
   2c170:	3804d53a 	srli	r2,r7,20
   2c174:	3014d77a 	srli	r10,r6,29
   2c178:	dc000015 	stw	r16,0(sp)
   2c17c:	481290fa 	slli	r9,r9,3
   2c180:	2820d53a 	srli	r16,r5,20
   2c184:	401090fa 	slli	r8,r8,3
   2c188:	200ad77a 	srli	r5,r4,29
   2c18c:	380ed7fa 	srli	r7,r7,31
   2c190:	dc800215 	stw	r18,8(sp)
   2c194:	dc400115 	stw	r17,4(sp)
   2c198:	dfc00415 	stw	ra,16(sp)
   2c19c:	dcc00315 	stw	r19,12(sp)
   2c1a0:	1c803fcc 	andi	r18,r3,255
   2c1a4:	8401ffcc 	andi	r16,r16,2047
   2c1a8:	494ab03a 	or	r5,r9,r5
   2c1ac:	202290fa 	slli	r17,r4,3
   2c1b0:	1081ffcc 	andi	r2,r2,2047
   2c1b4:	4290b03a 	or	r8,r8,r10
   2c1b8:	300c90fa 	slli	r6,r6,3
   2c1bc:	91c07026 	beq	r18,r7,2c380 <__adddf3+0x228>
   2c1c0:	8087c83a 	sub	r3,r16,r2
   2c1c4:	00c0b30e 	bge	zero,r3,2c494 <__adddf3+0x33c>
   2c1c8:	10002a1e 	bne	r2,zero,2c274 <__adddf3+0x11c>
   2c1cc:	4184b03a 	or	r2,r8,r6
   2c1d0:	1000991e 	bne	r2,zero,2c438 <__adddf3+0x2e0>
   2c1d4:	888001cc 	andi	r2,r17,7
   2c1d8:	10005b26 	beq	r2,zero,2c348 <__adddf3+0x1f0>
   2c1dc:	88c003cc 	andi	r3,r17,15
   2c1e0:	00800104 	movi	r2,4
   2c1e4:	18805826 	beq	r3,r2,2c348 <__adddf3+0x1f0>
   2c1e8:	89800104 	addi	r6,r17,4
   2c1ec:	3463803a 	cmpltu	r17,r6,r17
   2c1f0:	2c4b883a 	add	r5,r5,r17
   2c1f4:	2880202c 	andhi	r2,r5,128
   2c1f8:	9007883a 	mov	r3,r18
   2c1fc:	3023883a 	mov	r17,r6
   2c200:	10005426 	beq	r2,zero,2c354 <__adddf3+0x1fc>
   2c204:	84000044 	addi	r16,r16,1
   2c208:	0081ffc4 	movi	r2,2047
   2c20c:	8080c126 	beq	r16,r2,2c514 <__adddf3+0x3bc>
   2c210:	013fe034 	movhi	r4,65408
   2c214:	213fffc4 	addi	r4,r4,-1
   2c218:	290a703a 	and	r5,r5,r4
   2c21c:	2804977a 	slli	r2,r5,29
   2c220:	280a927a 	slli	r5,r5,9
   2c224:	8822d0fa 	srli	r17,r17,3
   2c228:	8401ffcc 	andi	r16,r16,2047
   2c22c:	2808d33a 	srli	r4,r5,12
   2c230:	1444b03a 	or	r2,r2,r17
   2c234:	8401ffcc 	andi	r16,r16,2047
   2c238:	800a953a 	slli	r5,r16,20
   2c23c:	18c03fcc 	andi	r3,r3,255
   2c240:	04000434 	movhi	r16,16
   2c244:	180697fa 	slli	r3,r3,31
   2c248:	843fffc4 	addi	r16,r16,-1
   2c24c:	2420703a 	and	r16,r4,r16
   2c250:	8160b03a 	or	r16,r16,r5
   2c254:	80c6b03a 	or	r3,r16,r3
   2c258:	dfc00417 	ldw	ra,16(sp)
   2c25c:	dcc00317 	ldw	r19,12(sp)
   2c260:	dc800217 	ldw	r18,8(sp)
   2c264:	dc400117 	ldw	r17,4(sp)
   2c268:	dc000017 	ldw	r16,0(sp)
   2c26c:	dec00504 	addi	sp,sp,20
   2c270:	f800283a 	ret
   2c274:	0081ffc4 	movi	r2,2047
   2c278:	80bfd626 	beq	r16,r2,2c1d4 <__alt_data_end+0xfffecdd4>
   2c27c:	42002034 	orhi	r8,r8,128
   2c280:	00800e04 	movi	r2,56
   2c284:	10c0a616 	blt	r2,r3,2c520 <__adddf3+0x3c8>
   2c288:	008007c4 	movi	r2,31
   2c28c:	10c0c916 	blt	r2,r3,2c5b4 <__adddf3+0x45c>
   2c290:	00800804 	movi	r2,32
   2c294:	10c5c83a 	sub	r2,r2,r3
   2c298:	408e983a 	sll	r7,r8,r2
   2c29c:	30c8d83a 	srl	r4,r6,r3
   2c2a0:	3084983a 	sll	r2,r6,r2
   2c2a4:	40c6d83a 	srl	r3,r8,r3
   2c2a8:	390cb03a 	or	r6,r7,r4
   2c2ac:	1004c03a 	cmpne	r2,r2,zero
   2c2b0:	308cb03a 	or	r6,r6,r2
   2c2b4:	898dc83a 	sub	r6,r17,r6
   2c2b8:	89a3803a 	cmpltu	r17,r17,r6
   2c2bc:	28cbc83a 	sub	r5,r5,r3
   2c2c0:	2c4bc83a 	sub	r5,r5,r17
   2c2c4:	3023883a 	mov	r17,r6
   2c2c8:	2880202c 	andhi	r2,r5,128
   2c2cc:	10006d26 	beq	r2,zero,2c484 <__adddf3+0x32c>
   2c2d0:	04c02034 	movhi	r19,128
   2c2d4:	9cffffc4 	addi	r19,r19,-1
   2c2d8:	2ce6703a 	and	r19,r5,r19
   2c2dc:	98007e26 	beq	r19,zero,2c4d8 <__adddf3+0x380>
   2c2e0:	9809883a 	mov	r4,r19
   2c2e4:	00223940 	call	22394 <__clzsi2>
   2c2e8:	10fffe04 	addi	r3,r2,-8
   2c2ec:	010007c4 	movi	r4,31
   2c2f0:	20c07f16 	blt	r4,r3,2c4f0 <__adddf3+0x398>
   2c2f4:	01400a04 	movi	r5,40
   2c2f8:	2885c83a 	sub	r2,r5,r2
   2c2fc:	888ad83a 	srl	r5,r17,r2
   2c300:	98e6983a 	sll	r19,r19,r3
   2c304:	88e2983a 	sll	r17,r17,r3
   2c308:	2ce6b03a 	or	r19,r5,r19
   2c30c:	1c007c16 	blt	r3,r16,2c500 <__adddf3+0x3a8>
   2c310:	1c21c83a 	sub	r16,r3,r16
   2c314:	81400044 	addi	r5,r16,1
   2c318:	00c007c4 	movi	r3,31
   2c31c:	19409816 	blt	r3,r5,2c580 <__adddf3+0x428>
   2c320:	1c21c83a 	sub	r16,r3,r16
   2c324:	8c08983a 	sll	r4,r17,r16
   2c328:	8946d83a 	srl	r3,r17,r5
   2c32c:	9c20983a 	sll	r16,r19,r16
   2c330:	2008c03a 	cmpne	r4,r4,zero
   2c334:	994ad83a 	srl	r5,r19,r5
   2c338:	1c06b03a 	or	r3,r3,r16
   2c33c:	1922b03a 	or	r17,r3,r4
   2c340:	0021883a 	mov	r16,zero
   2c344:	003fa306 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c348:	2880202c 	andhi	r2,r5,128
   2c34c:	9007883a 	mov	r3,r18
   2c350:	103fac1e 	bne	r2,zero,2c204 <__alt_data_end+0xfffece04>
   2c354:	2804977a 	slli	r2,r5,29
   2c358:	8822d0fa 	srli	r17,r17,3
   2c35c:	0101ffc4 	movi	r4,2047
   2c360:	280ad0fa 	srli	r5,r5,3
   2c364:	1444b03a 	or	r2,r2,r17
   2c368:	81002c26 	beq	r16,r4,2c41c <__adddf3+0x2c4>
   2c36c:	8120703a 	and	r16,r16,r4
   2c370:	01000434 	movhi	r4,16
   2c374:	213fffc4 	addi	r4,r4,-1
   2c378:	2908703a 	and	r4,r5,r4
   2c37c:	003fad06 	br	2c234 <__alt_data_end+0xfffece34>
   2c380:	8089c83a 	sub	r4,r16,r2
   2c384:	01006a0e 	bge	zero,r4,2c530 <__adddf3+0x3d8>
   2c388:	10003326 	beq	r2,zero,2c458 <__adddf3+0x300>
   2c38c:	0081ffc4 	movi	r2,2047
   2c390:	80bf9026 	beq	r16,r2,2c1d4 <__alt_data_end+0xfffecdd4>
   2c394:	42002034 	orhi	r8,r8,128
   2c398:	00800e04 	movi	r2,56
   2c39c:	1100b116 	blt	r2,r4,2c664 <__adddf3+0x50c>
   2c3a0:	008007c4 	movi	r2,31
   2c3a4:	1100e216 	blt	r2,r4,2c730 <__adddf3+0x5d8>
   2c3a8:	00800804 	movi	r2,32
   2c3ac:	1105c83a 	sub	r2,r2,r4
   2c3b0:	4092983a 	sll	r9,r8,r2
   2c3b4:	310ed83a 	srl	r7,r6,r4
   2c3b8:	3084983a 	sll	r2,r6,r2
   2c3bc:	4110d83a 	srl	r8,r8,r4
   2c3c0:	49ccb03a 	or	r6,r9,r7
   2c3c4:	1004c03a 	cmpne	r2,r2,zero
   2c3c8:	308cb03a 	or	r6,r6,r2
   2c3cc:	344d883a 	add	r6,r6,r17
   2c3d0:	3463803a 	cmpltu	r17,r6,r17
   2c3d4:	414b883a 	add	r5,r8,r5
   2c3d8:	2c4b883a 	add	r5,r5,r17
   2c3dc:	3023883a 	mov	r17,r6
   2c3e0:	2880202c 	andhi	r2,r5,128
   2c3e4:	10002726 	beq	r2,zero,2c484 <__adddf3+0x32c>
   2c3e8:	84000044 	addi	r16,r16,1
   2c3ec:	0081ffc4 	movi	r2,2047
   2c3f0:	8080ae26 	beq	r16,r2,2c6ac <__adddf3+0x554>
   2c3f4:	00bfe034 	movhi	r2,65408
   2c3f8:	10bfffc4 	addi	r2,r2,-1
   2c3fc:	288a703a 	and	r5,r5,r2
   2c400:	880cd07a 	srli	r6,r17,1
   2c404:	280897fa 	slli	r4,r5,31
   2c408:	88c0004c 	andi	r3,r17,1
   2c40c:	30e2b03a 	or	r17,r6,r3
   2c410:	280ad07a 	srli	r5,r5,1
   2c414:	8922b03a 	or	r17,r17,r4
   2c418:	003f6e06 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c41c:	1148b03a 	or	r4,r2,r5
   2c420:	20003c26 	beq	r4,zero,2c514 <__adddf3+0x3bc>
   2c424:	29000234 	orhi	r4,r5,8
   2c428:	01400434 	movhi	r5,16
   2c42c:	297fffc4 	addi	r5,r5,-1
   2c430:	2148703a 	and	r4,r4,r5
   2c434:	003f7f06 	br	2c234 <__alt_data_end+0xfffece34>
   2c438:	18ffffc4 	addi	r3,r3,-1
   2c43c:	18004d1e 	bne	r3,zero,2c574 <__adddf3+0x41c>
   2c440:	898dc83a 	sub	r6,r17,r6
   2c444:	89a3803a 	cmpltu	r17,r17,r6
   2c448:	2a0bc83a 	sub	r5,r5,r8
   2c44c:	2c4bc83a 	sub	r5,r5,r17
   2c450:	3023883a 	mov	r17,r6
   2c454:	003f9c06 	br	2c2c8 <__alt_data_end+0xfffecec8>
   2c458:	4184b03a 	or	r2,r8,r6
   2c45c:	103f5d26 	beq	r2,zero,2c1d4 <__alt_data_end+0xfffecdd4>
   2c460:	213fffc4 	addi	r4,r4,-1
   2c464:	203fd926 	beq	r4,zero,2c3cc <__alt_data_end+0xfffecfcc>
   2c468:	0081ffc4 	movi	r2,2047
   2c46c:	80bfca1e 	bne	r16,r2,2c398 <__alt_data_end+0xfffecf98>
   2c470:	003f5806 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c474:	10c8b03a 	or	r4,r2,r3
   2c478:	20008b26 	beq	r4,zero,2c6a8 <__adddf3+0x550>
   2c47c:	100b883a 	mov	r5,r2
   2c480:	1823883a 	mov	r17,r3
   2c484:	888001cc 	andi	r2,r17,7
   2c488:	103f541e 	bne	r2,zero,2c1dc <__alt_data_end+0xfffecddc>
   2c48c:	9007883a 	mov	r3,r18
   2c490:	003fb006 	br	2c354 <__alt_data_end+0xfffecf54>
   2c494:	1800531e 	bne	r3,zero,2c5e4 <__adddf3+0x48c>
   2c498:	80800044 	addi	r2,r16,1
   2c49c:	1081ffcc 	andi	r2,r2,2047
   2c4a0:	00c00044 	movi	r3,1
   2c4a4:	1880990e 	bge	r3,r2,2c70c <__adddf3+0x5b4>
   2c4a8:	8985c83a 	sub	r2,r17,r6
   2c4ac:	8887803a 	cmpltu	r3,r17,r2
   2c4b0:	2a27c83a 	sub	r19,r5,r8
   2c4b4:	98e7c83a 	sub	r19,r19,r3
   2c4b8:	98c0202c 	andhi	r3,r19,128
   2c4bc:	18006226 	beq	r3,zero,2c648 <__adddf3+0x4f0>
   2c4c0:	3463c83a 	sub	r17,r6,r17
   2c4c4:	4151c83a 	sub	r8,r8,r5
   2c4c8:	344d803a 	cmpltu	r6,r6,r17
   2c4cc:	41a7c83a 	sub	r19,r8,r6
   2c4d0:	3825883a 	mov	r18,r7
   2c4d4:	983f821e 	bne	r19,zero,2c2e0 <__alt_data_end+0xfffecee0>
   2c4d8:	8809883a 	mov	r4,r17
   2c4dc:	00223940 	call	22394 <__clzsi2>
   2c4e0:	10800804 	addi	r2,r2,32
   2c4e4:	10fffe04 	addi	r3,r2,-8
   2c4e8:	010007c4 	movi	r4,31
   2c4ec:	20ff810e 	bge	r4,r3,2c2f4 <__alt_data_end+0xfffecef4>
   2c4f0:	14fff604 	addi	r19,r2,-40
   2c4f4:	8ce6983a 	sll	r19,r17,r19
   2c4f8:	0023883a 	mov	r17,zero
   2c4fc:	1c3f840e 	bge	r3,r16,2c310 <__alt_data_end+0xfffecf10>
   2c500:	017fe034 	movhi	r5,65408
   2c504:	297fffc4 	addi	r5,r5,-1
   2c508:	80e1c83a 	sub	r16,r16,r3
   2c50c:	994a703a 	and	r5,r19,r5
   2c510:	003f3006 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c514:	0009883a 	mov	r4,zero
   2c518:	0005883a 	mov	r2,zero
   2c51c:	003f4506 	br	2c234 <__alt_data_end+0xfffece34>
   2c520:	418cb03a 	or	r6,r8,r6
   2c524:	300cc03a 	cmpne	r6,r6,zero
   2c528:	0007883a 	mov	r3,zero
   2c52c:	003f6106 	br	2c2b4 <__alt_data_end+0xfffeceb4>
   2c530:	2000921e 	bne	r4,zero,2c77c <__adddf3+0x624>
   2c534:	80800044 	addi	r2,r16,1
   2c538:	11c1ffcc 	andi	r7,r2,2047
   2c53c:	01000044 	movi	r4,1
   2c540:	21c0610e 	bge	r4,r7,2c6c8 <__adddf3+0x570>
   2c544:	0101ffc4 	movi	r4,2047
   2c548:	1100a326 	beq	r2,r4,2c7d8 <__adddf3+0x680>
   2c54c:	344d883a 	add	r6,r6,r17
   2c550:	3463803a 	cmpltu	r17,r6,r17
   2c554:	414b883a 	add	r5,r8,r5
   2c558:	2c4b883a 	add	r5,r5,r17
   2c55c:	282297fa 	slli	r17,r5,31
   2c560:	300cd07a 	srli	r6,r6,1
   2c564:	280ad07a 	srli	r5,r5,1
   2c568:	1021883a 	mov	r16,r2
   2c56c:	89a2b03a 	or	r17,r17,r6
   2c570:	003f1806 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c574:	0081ffc4 	movi	r2,2047
   2c578:	80bf411e 	bne	r16,r2,2c280 <__alt_data_end+0xfffece80>
   2c57c:	003f1506 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c580:	80bff844 	addi	r2,r16,-31
   2c584:	00c00804 	movi	r3,32
   2c588:	9884d83a 	srl	r2,r19,r2
   2c58c:	28c04a26 	beq	r5,r3,2c6b8 <__adddf3+0x560>
   2c590:	00c00fc4 	movi	r3,63
   2c594:	1c21c83a 	sub	r16,r3,r16
   2c598:	9c26983a 	sll	r19,r19,r16
   2c59c:	9c62b03a 	or	r17,r19,r17
   2c5a0:	8822c03a 	cmpne	r17,r17,zero
   2c5a4:	88a2b03a 	or	r17,r17,r2
   2c5a8:	000b883a 	mov	r5,zero
   2c5ac:	0021883a 	mov	r16,zero
   2c5b0:	003fb406 	br	2c484 <__alt_data_end+0xfffed084>
   2c5b4:	18bff804 	addi	r2,r3,-32
   2c5b8:	01000804 	movi	r4,32
   2c5bc:	4084d83a 	srl	r2,r8,r2
   2c5c0:	19003f26 	beq	r3,r4,2c6c0 <__adddf3+0x568>
   2c5c4:	01001004 	movi	r4,64
   2c5c8:	20c7c83a 	sub	r3,r4,r3
   2c5cc:	40d0983a 	sll	r8,r8,r3
   2c5d0:	418cb03a 	or	r6,r8,r6
   2c5d4:	300cc03a 	cmpne	r6,r6,zero
   2c5d8:	308cb03a 	or	r6,r6,r2
   2c5dc:	0007883a 	mov	r3,zero
   2c5e0:	003f3406 	br	2c2b4 <__alt_data_end+0xfffeceb4>
   2c5e4:	80002326 	beq	r16,zero,2c674 <__adddf3+0x51c>
   2c5e8:	0101ffc4 	movi	r4,2047
   2c5ec:	11005e26 	beq	r2,r4,2c768 <__adddf3+0x610>
   2c5f0:	00c7c83a 	sub	r3,zero,r3
   2c5f4:	29402034 	orhi	r5,r5,128
   2c5f8:	01000e04 	movi	r4,56
   2c5fc:	20c07216 	blt	r4,r3,2c7c8 <__adddf3+0x670>
   2c600:	010007c4 	movi	r4,31
   2c604:	20c0ce16 	blt	r4,r3,2c940 <__adddf3+0x7e8>
   2c608:	01000804 	movi	r4,32
   2c60c:	20c9c83a 	sub	r4,r4,r3
   2c610:	2914983a 	sll	r10,r5,r4
   2c614:	88d2d83a 	srl	r9,r17,r3
   2c618:	8908983a 	sll	r4,r17,r4
   2c61c:	28c6d83a 	srl	r3,r5,r3
   2c620:	5262b03a 	or	r17,r10,r9
   2c624:	2008c03a 	cmpne	r4,r4,zero
   2c628:	8922b03a 	or	r17,r17,r4
   2c62c:	3463c83a 	sub	r17,r6,r17
   2c630:	40c7c83a 	sub	r3,r8,r3
   2c634:	344d803a 	cmpltu	r6,r6,r17
   2c638:	198bc83a 	sub	r5,r3,r6
   2c63c:	1021883a 	mov	r16,r2
   2c640:	3825883a 	mov	r18,r7
   2c644:	003f2006 	br	2c2c8 <__alt_data_end+0xfffecec8>
   2c648:	9886b03a 	or	r3,r19,r2
   2c64c:	1800141e 	bne	r3,zero,2c6a0 <__adddf3+0x548>
   2c650:	0007883a 	mov	r3,zero
   2c654:	000b883a 	mov	r5,zero
   2c658:	0023883a 	mov	r17,zero
   2c65c:	0021883a 	mov	r16,zero
   2c660:	003f3c06 	br	2c354 <__alt_data_end+0xfffecf54>
   2c664:	418cb03a 	or	r6,r8,r6
   2c668:	300cc03a 	cmpne	r6,r6,zero
   2c66c:	0011883a 	mov	r8,zero
   2c670:	003f5606 	br	2c3cc <__alt_data_end+0xfffecfcc>
   2c674:	2c48b03a 	or	r4,r5,r17
   2c678:	20003b26 	beq	r4,zero,2c768 <__adddf3+0x610>
   2c67c:	00c6303a 	nor	r3,zero,r3
   2c680:	1800371e 	bne	r3,zero,2c760 <__adddf3+0x608>
   2c684:	3463c83a 	sub	r17,r6,r17
   2c688:	414bc83a 	sub	r5,r8,r5
   2c68c:	344d803a 	cmpltu	r6,r6,r17
   2c690:	298bc83a 	sub	r5,r5,r6
   2c694:	1021883a 	mov	r16,r2
   2c698:	3825883a 	mov	r18,r7
   2c69c:	003f0a06 	br	2c2c8 <__alt_data_end+0xfffecec8>
   2c6a0:	1023883a 	mov	r17,r2
   2c6a4:	003f0d06 	br	2c2dc <__alt_data_end+0xfffecedc>
   2c6a8:	0007883a 	mov	r3,zero
   2c6ac:	000b883a 	mov	r5,zero
   2c6b0:	0023883a 	mov	r17,zero
   2c6b4:	003f2706 	br	2c354 <__alt_data_end+0xfffecf54>
   2c6b8:	0027883a 	mov	r19,zero
   2c6bc:	003fb706 	br	2c59c <__alt_data_end+0xfffed19c>
   2c6c0:	0011883a 	mov	r8,zero
   2c6c4:	003fc206 	br	2c5d0 <__alt_data_end+0xfffed1d0>
   2c6c8:	2c44b03a 	or	r2,r5,r17
   2c6cc:	8000871e 	bne	r16,zero,2c8ec <__adddf3+0x794>
   2c6d0:	1000b126 	beq	r2,zero,2c998 <__adddf3+0x840>
   2c6d4:	4184b03a 	or	r2,r8,r6
   2c6d8:	103ebe26 	beq	r2,zero,2c1d4 <__alt_data_end+0xfffecdd4>
   2c6dc:	3445883a 	add	r2,r6,r17
   2c6e0:	1463803a 	cmpltu	r17,r2,r17
   2c6e4:	414b883a 	add	r5,r8,r5
   2c6e8:	2c4b883a 	add	r5,r5,r17
   2c6ec:	28c0202c 	andhi	r3,r5,128
   2c6f0:	1023883a 	mov	r17,r2
   2c6f4:	183f6326 	beq	r3,zero,2c484 <__alt_data_end+0xfffed084>
   2c6f8:	00bfe034 	movhi	r2,65408
   2c6fc:	10bfffc4 	addi	r2,r2,-1
   2c700:	2021883a 	mov	r16,r4
   2c704:	288a703a 	and	r5,r5,r2
   2c708:	003eb206 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c70c:	2c44b03a 	or	r2,r5,r17
   2c710:	8000251e 	bne	r16,zero,2c7a8 <__adddf3+0x650>
   2c714:	10004b1e 	bne	r2,zero,2c844 <__adddf3+0x6ec>
   2c718:	4184b03a 	or	r2,r8,r6
   2c71c:	103fe226 	beq	r2,zero,2c6a8 <__alt_data_end+0xfffed2a8>
   2c720:	400b883a 	mov	r5,r8
   2c724:	3023883a 	mov	r17,r6
   2c728:	3825883a 	mov	r18,r7
   2c72c:	003ea906 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c730:	20bff804 	addi	r2,r4,-32
   2c734:	01c00804 	movi	r7,32
   2c738:	4084d83a 	srl	r2,r8,r2
   2c73c:	21c07e26 	beq	r4,r7,2c938 <__adddf3+0x7e0>
   2c740:	01c01004 	movi	r7,64
   2c744:	3909c83a 	sub	r4,r7,r4
   2c748:	4110983a 	sll	r8,r8,r4
   2c74c:	418cb03a 	or	r6,r8,r6
   2c750:	300cc03a 	cmpne	r6,r6,zero
   2c754:	308cb03a 	or	r6,r6,r2
   2c758:	0011883a 	mov	r8,zero
   2c75c:	003f1b06 	br	2c3cc <__alt_data_end+0xfffecfcc>
   2c760:	0101ffc4 	movi	r4,2047
   2c764:	113fa41e 	bne	r2,r4,2c5f8 <__alt_data_end+0xfffed1f8>
   2c768:	400b883a 	mov	r5,r8
   2c76c:	3023883a 	mov	r17,r6
   2c770:	1021883a 	mov	r16,r2
   2c774:	3825883a 	mov	r18,r7
   2c778:	003e9606 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c77c:	80001a1e 	bne	r16,zero,2c7e8 <__adddf3+0x690>
   2c780:	2c4eb03a 	or	r7,r5,r17
   2c784:	38005526 	beq	r7,zero,2c8dc <__adddf3+0x784>
   2c788:	0108303a 	nor	r4,zero,r4
   2c78c:	2000511e 	bne	r4,zero,2c8d4 <__adddf3+0x77c>
   2c790:	89a3883a 	add	r17,r17,r6
   2c794:	414b883a 	add	r5,r8,r5
   2c798:	898d803a 	cmpltu	r6,r17,r6
   2c79c:	298b883a 	add	r5,r5,r6
   2c7a0:	1021883a 	mov	r16,r2
   2c7a4:	003f0e06 	br	2c3e0 <__alt_data_end+0xfffecfe0>
   2c7a8:	1000341e 	bne	r2,zero,2c87c <__adddf3+0x724>
   2c7ac:	4184b03a 	or	r2,r8,r6
   2c7b0:	10006f26 	beq	r2,zero,2c970 <__adddf3+0x818>
   2c7b4:	400b883a 	mov	r5,r8
   2c7b8:	3023883a 	mov	r17,r6
   2c7bc:	3825883a 	mov	r18,r7
   2c7c0:	0401ffc4 	movi	r16,2047
   2c7c4:	003e8306 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c7c8:	2c62b03a 	or	r17,r5,r17
   2c7cc:	8822c03a 	cmpne	r17,r17,zero
   2c7d0:	0007883a 	mov	r3,zero
   2c7d4:	003f9506 	br	2c62c <__alt_data_end+0xfffed22c>
   2c7d8:	1021883a 	mov	r16,r2
   2c7dc:	000b883a 	mov	r5,zero
   2c7e0:	0023883a 	mov	r17,zero
   2c7e4:	003edb06 	br	2c354 <__alt_data_end+0xfffecf54>
   2c7e8:	01c1ffc4 	movi	r7,2047
   2c7ec:	11c03b26 	beq	r2,r7,2c8dc <__adddf3+0x784>
   2c7f0:	0109c83a 	sub	r4,zero,r4
   2c7f4:	29402034 	orhi	r5,r5,128
   2c7f8:	01c00e04 	movi	r7,56
   2c7fc:	39006216 	blt	r7,r4,2c988 <__adddf3+0x830>
   2c800:	01c007c4 	movi	r7,31
   2c804:	39006b16 	blt	r7,r4,2c9b4 <__adddf3+0x85c>
   2c808:	01c00804 	movi	r7,32
   2c80c:	390fc83a 	sub	r7,r7,r4
   2c810:	29d4983a 	sll	r10,r5,r7
   2c814:	8912d83a 	srl	r9,r17,r4
   2c818:	89ce983a 	sll	r7,r17,r7
   2c81c:	2908d83a 	srl	r4,r5,r4
   2c820:	5262b03a 	or	r17,r10,r9
   2c824:	380ac03a 	cmpne	r5,r7,zero
   2c828:	8962b03a 	or	r17,r17,r5
   2c82c:	89a3883a 	add	r17,r17,r6
   2c830:	2211883a 	add	r8,r4,r8
   2c834:	898d803a 	cmpltu	r6,r17,r6
   2c838:	418b883a 	add	r5,r8,r6
   2c83c:	1021883a 	mov	r16,r2
   2c840:	003ee706 	br	2c3e0 <__alt_data_end+0xfffecfe0>
   2c844:	4184b03a 	or	r2,r8,r6
   2c848:	103e6226 	beq	r2,zero,2c1d4 <__alt_data_end+0xfffecdd4>
   2c84c:	8987c83a 	sub	r3,r17,r6
   2c850:	88c9803a 	cmpltu	r4,r17,r3
   2c854:	2a05c83a 	sub	r2,r5,r8
   2c858:	1105c83a 	sub	r2,r2,r4
   2c85c:	1100202c 	andhi	r4,r2,128
   2c860:	203f0426 	beq	r4,zero,2c474 <__alt_data_end+0xfffed074>
   2c864:	3463c83a 	sub	r17,r6,r17
   2c868:	414bc83a 	sub	r5,r8,r5
   2c86c:	344d803a 	cmpltu	r6,r6,r17
   2c870:	298bc83a 	sub	r5,r5,r6
   2c874:	3825883a 	mov	r18,r7
   2c878:	003e5606 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c87c:	4184b03a 	or	r2,r8,r6
   2c880:	10002b26 	beq	r2,zero,2c930 <__adddf3+0x7d8>
   2c884:	2804d0fa 	srli	r2,r5,3
   2c888:	8822d0fa 	srli	r17,r17,3
   2c88c:	280a977a 	slli	r5,r5,29
   2c890:	10c0022c 	andhi	r3,r2,8
   2c894:	2c62b03a 	or	r17,r5,r17
   2c898:	18000826 	beq	r3,zero,2c8bc <__adddf3+0x764>
   2c89c:	4008d0fa 	srli	r4,r8,3
   2c8a0:	20c0022c 	andhi	r3,r4,8
   2c8a4:	1800051e 	bne	r3,zero,2c8bc <__adddf3+0x764>
   2c8a8:	300cd0fa 	srli	r6,r6,3
   2c8ac:	4010977a 	slli	r8,r8,29
   2c8b0:	2005883a 	mov	r2,r4
   2c8b4:	3825883a 	mov	r18,r7
   2c8b8:	41a2b03a 	or	r17,r8,r6
   2c8bc:	880ad77a 	srli	r5,r17,29
   2c8c0:	100490fa 	slli	r2,r2,3
   2c8c4:	882290fa 	slli	r17,r17,3
   2c8c8:	0401ffc4 	movi	r16,2047
   2c8cc:	288ab03a 	or	r5,r5,r2
   2c8d0:	003e4006 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c8d4:	01c1ffc4 	movi	r7,2047
   2c8d8:	11ffc71e 	bne	r2,r7,2c7f8 <__alt_data_end+0xfffed3f8>
   2c8dc:	400b883a 	mov	r5,r8
   2c8e0:	3023883a 	mov	r17,r6
   2c8e4:	1021883a 	mov	r16,r2
   2c8e8:	003e3a06 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c8ec:	10002d26 	beq	r2,zero,2c9a4 <__adddf3+0x84c>
   2c8f0:	4184b03a 	or	r2,r8,r6
   2c8f4:	10000e26 	beq	r2,zero,2c930 <__adddf3+0x7d8>
   2c8f8:	2804d0fa 	srli	r2,r5,3
   2c8fc:	8822d0fa 	srli	r17,r17,3
   2c900:	280a977a 	slli	r5,r5,29
   2c904:	10c0022c 	andhi	r3,r2,8
   2c908:	2c62b03a 	or	r17,r5,r17
   2c90c:	183feb26 	beq	r3,zero,2c8bc <__alt_data_end+0xfffed4bc>
   2c910:	4008d0fa 	srli	r4,r8,3
   2c914:	20c0022c 	andhi	r3,r4,8
   2c918:	183fe81e 	bne	r3,zero,2c8bc <__alt_data_end+0xfffed4bc>
   2c91c:	300cd0fa 	srli	r6,r6,3
   2c920:	4010977a 	slli	r8,r8,29
   2c924:	2005883a 	mov	r2,r4
   2c928:	41a2b03a 	or	r17,r8,r6
   2c92c:	003fe306 	br	2c8bc <__alt_data_end+0xfffed4bc>
   2c930:	0401ffc4 	movi	r16,2047
   2c934:	003e2706 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c938:	0011883a 	mov	r8,zero
   2c93c:	003f8306 	br	2c74c <__alt_data_end+0xfffed34c>
   2c940:	193ff804 	addi	r4,r3,-32
   2c944:	02400804 	movi	r9,32
   2c948:	2908d83a 	srl	r4,r5,r4
   2c94c:	1a402526 	beq	r3,r9,2c9e4 <__adddf3+0x88c>
   2c950:	02401004 	movi	r9,64
   2c954:	48c7c83a 	sub	r3,r9,r3
   2c958:	28ca983a 	sll	r5,r5,r3
   2c95c:	2c62b03a 	or	r17,r5,r17
   2c960:	8822c03a 	cmpne	r17,r17,zero
   2c964:	8922b03a 	or	r17,r17,r4
   2c968:	0007883a 	mov	r3,zero
   2c96c:	003f2f06 	br	2c62c <__alt_data_end+0xfffed22c>
   2c970:	01402034 	movhi	r5,128
   2c974:	0007883a 	mov	r3,zero
   2c978:	297fffc4 	addi	r5,r5,-1
   2c97c:	047ffe04 	movi	r17,-8
   2c980:	0401ffc4 	movi	r16,2047
   2c984:	003e7306 	br	2c354 <__alt_data_end+0xfffecf54>
   2c988:	2c62b03a 	or	r17,r5,r17
   2c98c:	8822c03a 	cmpne	r17,r17,zero
   2c990:	0009883a 	mov	r4,zero
   2c994:	003fa506 	br	2c82c <__alt_data_end+0xfffed42c>
   2c998:	400b883a 	mov	r5,r8
   2c99c:	3023883a 	mov	r17,r6
   2c9a0:	003e0c06 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c9a4:	400b883a 	mov	r5,r8
   2c9a8:	3023883a 	mov	r17,r6
   2c9ac:	0401ffc4 	movi	r16,2047
   2c9b0:	003e0806 	br	2c1d4 <__alt_data_end+0xfffecdd4>
   2c9b4:	21fff804 	addi	r7,r4,-32
   2c9b8:	02400804 	movi	r9,32
   2c9bc:	29ced83a 	srl	r7,r5,r7
   2c9c0:	22400a26 	beq	r4,r9,2c9ec <__adddf3+0x894>
   2c9c4:	02401004 	movi	r9,64
   2c9c8:	4909c83a 	sub	r4,r9,r4
   2c9cc:	290a983a 	sll	r5,r5,r4
   2c9d0:	2c62b03a 	or	r17,r5,r17
   2c9d4:	8822c03a 	cmpne	r17,r17,zero
   2c9d8:	89e2b03a 	or	r17,r17,r7
   2c9dc:	0009883a 	mov	r4,zero
   2c9e0:	003f9206 	br	2c82c <__alt_data_end+0xfffed42c>
   2c9e4:	000b883a 	mov	r5,zero
   2c9e8:	003fdc06 	br	2c95c <__alt_data_end+0xfffed55c>
   2c9ec:	000b883a 	mov	r5,zero
   2c9f0:	003ff706 	br	2c9d0 <__alt_data_end+0xfffed5d0>

0002c9f4 <__eqdf2>:
   2c9f4:	2804d53a 	srli	r2,r5,20
   2c9f8:	3806d53a 	srli	r3,r7,20
   2c9fc:	02000434 	movhi	r8,16
   2ca00:	423fffc4 	addi	r8,r8,-1
   2ca04:	1081ffcc 	andi	r2,r2,2047
   2ca08:	0241ffc4 	movi	r9,2047
   2ca0c:	2a14703a 	and	r10,r5,r8
   2ca10:	18c1ffcc 	andi	r3,r3,2047
   2ca14:	3a10703a 	and	r8,r7,r8
   2ca18:	280ad7fa 	srli	r5,r5,31
   2ca1c:	380ed7fa 	srli	r7,r7,31
   2ca20:	12400f26 	beq	r2,r9,2ca60 <__eqdf2+0x6c>
   2ca24:	0241ffc4 	movi	r9,2047
   2ca28:	1a400326 	beq	r3,r9,2ca38 <__eqdf2+0x44>
   2ca2c:	10c00526 	beq	r2,r3,2ca44 <__eqdf2+0x50>
   2ca30:	00800044 	movi	r2,1
   2ca34:	f800283a 	ret
   2ca38:	4192b03a 	or	r9,r8,r6
   2ca3c:	483ffc1e 	bne	r9,zero,2ca30 <__alt_data_end+0xfffed630>
   2ca40:	10fffb1e 	bne	r2,r3,2ca30 <__alt_data_end+0xfffed630>
   2ca44:	523ffa1e 	bne	r10,r8,2ca30 <__alt_data_end+0xfffed630>
   2ca48:	21bff91e 	bne	r4,r6,2ca30 <__alt_data_end+0xfffed630>
   2ca4c:	29c00826 	beq	r5,r7,2ca70 <__eqdf2+0x7c>
   2ca50:	103ff71e 	bne	r2,zero,2ca30 <__alt_data_end+0xfffed630>
   2ca54:	5104b03a 	or	r2,r10,r4
   2ca58:	1004c03a 	cmpne	r2,r2,zero
   2ca5c:	f800283a 	ret
   2ca60:	5112b03a 	or	r9,r10,r4
   2ca64:	483fef26 	beq	r9,zero,2ca24 <__alt_data_end+0xfffed624>
   2ca68:	00800044 	movi	r2,1
   2ca6c:	f800283a 	ret
   2ca70:	0005883a 	mov	r2,zero
   2ca74:	f800283a 	ret

0002ca78 <__gedf2>:
   2ca78:	2804d53a 	srli	r2,r5,20
   2ca7c:	3806d53a 	srli	r3,r7,20
   2ca80:	02000434 	movhi	r8,16
   2ca84:	423fffc4 	addi	r8,r8,-1
   2ca88:	0241ffc4 	movi	r9,2047
   2ca8c:	1081ffcc 	andi	r2,r2,2047
   2ca90:	2a14703a 	and	r10,r5,r8
   2ca94:	1a46703a 	and	r3,r3,r9
   2ca98:	3a10703a 	and	r8,r7,r8
   2ca9c:	280ad7fa 	srli	r5,r5,31
   2caa0:	380ed7fa 	srli	r7,r7,31
   2caa4:	12400b26 	beq	r2,r9,2cad4 <__gedf2+0x5c>
   2caa8:	1a401626 	beq	r3,r9,2cb04 <__gedf2+0x8c>
   2caac:	10000c1e 	bne	r2,zero,2cae0 <__gedf2+0x68>
   2cab0:	5112b03a 	or	r9,r10,r4
   2cab4:	4813003a 	cmpeq	r9,r9,zero
   2cab8:	4817883a 	mov	r11,r9
   2cabc:	18000c1e 	bne	r3,zero,2caf0 <__gedf2+0x78>
   2cac0:	4198b03a 	or	r12,r8,r6
   2cac4:	60000a1e 	bne	r12,zero,2caf0 <__gedf2+0x78>
   2cac8:	48001326 	beq	r9,zero,2cb18 <__gedf2+0xa0>
   2cacc:	0005883a 	mov	r2,zero
   2cad0:	f800283a 	ret
   2cad4:	5112b03a 	or	r9,r10,r4
   2cad8:	4800191e 	bne	r9,zero,2cb40 <__gedf2+0xc8>
   2cadc:	18800926 	beq	r3,r2,2cb04 <__gedf2+0x8c>
   2cae0:	18000b1e 	bne	r3,zero,2cb10 <__gedf2+0x98>
   2cae4:	4192b03a 	or	r9,r8,r6
   2cae8:	0017883a 	mov	r11,zero
   2caec:	48000a26 	beq	r9,zero,2cb18 <__gedf2+0xa0>
   2caf0:	39c03fcc 	andi	r7,r7,255
   2caf4:	58000726 	beq	r11,zero,2cb14 <__gedf2+0x9c>
   2caf8:	3800081e 	bne	r7,zero,2cb1c <__gedf2+0xa4>
   2cafc:	00bfffc4 	movi	r2,-1
   2cb00:	f800283a 	ret
   2cb04:	4192b03a 	or	r9,r8,r6
   2cb08:	48000d1e 	bne	r9,zero,2cb40 <__gedf2+0xc8>
   2cb0c:	103fe826 	beq	r2,zero,2cab0 <__alt_data_end+0xfffed6b0>
   2cb10:	39c03fcc 	andi	r7,r7,255
   2cb14:	29c00326 	beq	r5,r7,2cb24 <__gedf2+0xac>
   2cb18:	283ff81e 	bne	r5,zero,2cafc <__alt_data_end+0xfffed6fc>
   2cb1c:	00800044 	movi	r2,1
   2cb20:	f800283a 	ret
   2cb24:	18bffc16 	blt	r3,r2,2cb18 <__alt_data_end+0xfffed718>
   2cb28:	10c00316 	blt	r2,r3,2cb38 <__gedf2+0xc0>
   2cb2c:	42bffa36 	bltu	r8,r10,2cb18 <__alt_data_end+0xfffed718>
   2cb30:	52000526 	beq	r10,r8,2cb48 <__gedf2+0xd0>
   2cb34:	523fe52e 	bgeu	r10,r8,2cacc <__alt_data_end+0xfffed6cc>
   2cb38:	283ff026 	beq	r5,zero,2cafc <__alt_data_end+0xfffed6fc>
   2cb3c:	003ff706 	br	2cb1c <__alt_data_end+0xfffed71c>
   2cb40:	00bfff84 	movi	r2,-2
   2cb44:	f800283a 	ret
   2cb48:	313ff336 	bltu	r6,r4,2cb18 <__alt_data_end+0xfffed718>
   2cb4c:	21bfdf2e 	bgeu	r4,r6,2cacc <__alt_data_end+0xfffed6cc>
   2cb50:	283fea26 	beq	r5,zero,2cafc <__alt_data_end+0xfffed6fc>
   2cb54:	003ff106 	br	2cb1c <__alt_data_end+0xfffed71c>

0002cb58 <__ledf2>:
   2cb58:	2804d53a 	srli	r2,r5,20
   2cb5c:	3810d53a 	srli	r8,r7,20
   2cb60:	00c00434 	movhi	r3,16
   2cb64:	18ffffc4 	addi	r3,r3,-1
   2cb68:	0241ffc4 	movi	r9,2047
   2cb6c:	1081ffcc 	andi	r2,r2,2047
   2cb70:	28d4703a 	and	r10,r5,r3
   2cb74:	4250703a 	and	r8,r8,r9
   2cb78:	38c6703a 	and	r3,r7,r3
   2cb7c:	280ad7fa 	srli	r5,r5,31
   2cb80:	380ed7fa 	srli	r7,r7,31
   2cb84:	12400b26 	beq	r2,r9,2cbb4 <__ledf2+0x5c>
   2cb88:	42401926 	beq	r8,r9,2cbf0 <__ledf2+0x98>
   2cb8c:	10000c1e 	bne	r2,zero,2cbc0 <__ledf2+0x68>
   2cb90:	5112b03a 	or	r9,r10,r4
   2cb94:	4813003a 	cmpeq	r9,r9,zero
   2cb98:	4817883a 	mov	r11,r9
   2cb9c:	40000f26 	beq	r8,zero,2cbdc <__ledf2+0x84>
   2cba0:	39c03fcc 	andi	r7,r7,255
   2cba4:	58001826 	beq	r11,zero,2cc08 <__ledf2+0xb0>
   2cba8:	38000a1e 	bne	r7,zero,2cbd4 <__ledf2+0x7c>
   2cbac:	00bfffc4 	movi	r2,-1
   2cbb0:	f800283a 	ret
   2cbb4:	5112b03a 	or	r9,r10,r4
   2cbb8:	48000f1e 	bne	r9,zero,2cbf8 <__ledf2+0xa0>
   2cbbc:	40800c26 	beq	r8,r2,2cbf0 <__ledf2+0x98>
   2cbc0:	4000101e 	bne	r8,zero,2cc04 <__ledf2+0xac>
   2cbc4:	1992b03a 	or	r9,r3,r6
   2cbc8:	0017883a 	mov	r11,zero
   2cbcc:	483ff41e 	bne	r9,zero,2cba0 <__alt_data_end+0xfffed7a0>
   2cbd0:	283ff61e 	bne	r5,zero,2cbac <__alt_data_end+0xfffed7ac>
   2cbd4:	00800044 	movi	r2,1
   2cbd8:	f800283a 	ret
   2cbdc:	1998b03a 	or	r12,r3,r6
   2cbe0:	603fef1e 	bne	r12,zero,2cba0 <__alt_data_end+0xfffed7a0>
   2cbe4:	483ffa26 	beq	r9,zero,2cbd0 <__alt_data_end+0xfffed7d0>
   2cbe8:	0005883a 	mov	r2,zero
   2cbec:	f800283a 	ret
   2cbf0:	1992b03a 	or	r9,r3,r6
   2cbf4:	48000226 	beq	r9,zero,2cc00 <__ledf2+0xa8>
   2cbf8:	00800084 	movi	r2,2
   2cbfc:	f800283a 	ret
   2cc00:	103fe326 	beq	r2,zero,2cb90 <__alt_data_end+0xfffed790>
   2cc04:	39c03fcc 	andi	r7,r7,255
   2cc08:	29fff11e 	bne	r5,r7,2cbd0 <__alt_data_end+0xfffed7d0>
   2cc0c:	40bff016 	blt	r8,r2,2cbd0 <__alt_data_end+0xfffed7d0>
   2cc10:	12000316 	blt	r2,r8,2cc20 <__ledf2+0xc8>
   2cc14:	1abfee36 	bltu	r3,r10,2cbd0 <__alt_data_end+0xfffed7d0>
   2cc18:	50c00326 	beq	r10,r3,2cc28 <__ledf2+0xd0>
   2cc1c:	50fff22e 	bgeu	r10,r3,2cbe8 <__alt_data_end+0xfffed7e8>
   2cc20:	283fe226 	beq	r5,zero,2cbac <__alt_data_end+0xfffed7ac>
   2cc24:	003feb06 	br	2cbd4 <__alt_data_end+0xfffed7d4>
   2cc28:	313fe936 	bltu	r6,r4,2cbd0 <__alt_data_end+0xfffed7d0>
   2cc2c:	21bfee2e 	bgeu	r4,r6,2cbe8 <__alt_data_end+0xfffed7e8>
   2cc30:	283fde26 	beq	r5,zero,2cbac <__alt_data_end+0xfffed7ac>
   2cc34:	003fe706 	br	2cbd4 <__alt_data_end+0xfffed7d4>

0002cc38 <__floatsidf>:
   2cc38:	defffd04 	addi	sp,sp,-12
   2cc3c:	dc400115 	stw	r17,4(sp)
   2cc40:	dfc00215 	stw	ra,8(sp)
   2cc44:	dc000015 	stw	r16,0(sp)
   2cc48:	2023883a 	mov	r17,r4
   2cc4c:	20001426 	beq	r4,zero,2cca0 <__floatsidf+0x68>
   2cc50:	2020d7fa 	srli	r16,r4,31
   2cc54:	80000126 	beq	r16,zero,2cc5c <__floatsidf+0x24>
   2cc58:	0123c83a 	sub	r17,zero,r4
   2cc5c:	8809883a 	mov	r4,r17
   2cc60:	00223940 	call	22394 <__clzsi2>
   2cc64:	01410784 	movi	r5,1054
   2cc68:	00c00284 	movi	r3,10
   2cc6c:	288bc83a 	sub	r5,r5,r2
   2cc70:	18801c16 	blt	r3,r2,2cce4 <__floatsidf+0xac>
   2cc74:	00c002c4 	movi	r3,11
   2cc78:	1887c83a 	sub	r3,r3,r2
   2cc7c:	88c8d83a 	srl	r4,r17,r3
   2cc80:	00c00434 	movhi	r3,16
   2cc84:	18ffffc4 	addi	r3,r3,-1
   2cc88:	10800544 	addi	r2,r2,21
   2cc8c:	20c8703a 	and	r4,r4,r3
   2cc90:	8884983a 	sll	r2,r17,r2
   2cc94:	28c1ffcc 	andi	r3,r5,2047
   2cc98:	800d883a 	mov	r6,r16
   2cc9c:	00000406 	br	2ccb0 <__floatsidf+0x78>
   2cca0:	000d883a 	mov	r6,zero
   2cca4:	0007883a 	mov	r3,zero
   2cca8:	0009883a 	mov	r4,zero
   2ccac:	0005883a 	mov	r2,zero
   2ccb0:	180a953a 	slli	r5,r3,20
   2ccb4:	31803fcc 	andi	r6,r6,255
   2ccb8:	00c00434 	movhi	r3,16
   2ccbc:	300c97fa 	slli	r6,r6,31
   2ccc0:	18ffffc4 	addi	r3,r3,-1
   2ccc4:	20c6703a 	and	r3,r4,r3
   2ccc8:	1946b03a 	or	r3,r3,r5
   2cccc:	1986b03a 	or	r3,r3,r6
   2ccd0:	dfc00217 	ldw	ra,8(sp)
   2ccd4:	dc400117 	ldw	r17,4(sp)
   2ccd8:	dc000017 	ldw	r16,0(sp)
   2ccdc:	dec00304 	addi	sp,sp,12
   2cce0:	f800283a 	ret
   2cce4:	10fffd44 	addi	r3,r2,-11
   2cce8:	88c8983a 	sll	r4,r17,r3
   2ccec:	00800434 	movhi	r2,16
   2ccf0:	10bfffc4 	addi	r2,r2,-1
   2ccf4:	2088703a 	and	r4,r4,r2
   2ccf8:	28c1ffcc 	andi	r3,r5,2047
   2ccfc:	800d883a 	mov	r6,r16
   2cd00:	0005883a 	mov	r2,zero
   2cd04:	003fea06 	br	2ccb0 <__alt_data_end+0xfffed8b0>

0002cd08 <__floatunsidf>:
   2cd08:	defffe04 	addi	sp,sp,-8
   2cd0c:	dc000015 	stw	r16,0(sp)
   2cd10:	dfc00115 	stw	ra,4(sp)
   2cd14:	2021883a 	mov	r16,r4
   2cd18:	20001026 	beq	r4,zero,2cd5c <__floatunsidf+0x54>
   2cd1c:	00223940 	call	22394 <__clzsi2>
   2cd20:	01410784 	movi	r5,1054
   2cd24:	100d883a 	mov	r6,r2
   2cd28:	288bc83a 	sub	r5,r5,r2
   2cd2c:	00800284 	movi	r2,10
   2cd30:	11801616 	blt	r2,r6,2cd8c <__floatunsidf+0x84>
   2cd34:	008002c4 	movi	r2,11
   2cd38:	1185c83a 	sub	r2,r2,r6
   2cd3c:	8084d83a 	srl	r2,r16,r2
   2cd40:	00c00434 	movhi	r3,16
   2cd44:	31c00544 	addi	r7,r6,21
   2cd48:	18ffffc4 	addi	r3,r3,-1
   2cd4c:	81e0983a 	sll	r16,r16,r7
   2cd50:	10cc703a 	and	r6,r2,r3
   2cd54:	2941ffcc 	andi	r5,r5,2047
   2cd58:	00000206 	br	2cd64 <__floatunsidf+0x5c>
   2cd5c:	000b883a 	mov	r5,zero
   2cd60:	000d883a 	mov	r6,zero
   2cd64:	280a953a 	slli	r5,r5,20
   2cd68:	00c00434 	movhi	r3,16
   2cd6c:	18ffffc4 	addi	r3,r3,-1
   2cd70:	30c6703a 	and	r3,r6,r3
   2cd74:	8005883a 	mov	r2,r16
   2cd78:	1946b03a 	or	r3,r3,r5
   2cd7c:	dfc00117 	ldw	ra,4(sp)
   2cd80:	dc000017 	ldw	r16,0(sp)
   2cd84:	dec00204 	addi	sp,sp,8
   2cd88:	f800283a 	ret
   2cd8c:	31bffd44 	addi	r6,r6,-11
   2cd90:	818c983a 	sll	r6,r16,r6
   2cd94:	00800434 	movhi	r2,16
   2cd98:	10bfffc4 	addi	r2,r2,-1
   2cd9c:	2941ffcc 	andi	r5,r5,2047
   2cda0:	0021883a 	mov	r16,zero
   2cda4:	308c703a 	and	r6,r6,r2
   2cda8:	003fee06 	br	2cd64 <__alt_data_end+0xfffed964>

0002cdac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2cdac:	defffe04 	addi	sp,sp,-8
   2cdb0:	dfc00115 	stw	ra,4(sp)
   2cdb4:	df000015 	stw	fp,0(sp)
   2cdb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2cdbc:	008000f4 	movhi	r2,3
   2cdc0:	1086fc04 	addi	r2,r2,7152
   2cdc4:	10800017 	ldw	r2,0(r2)
   2cdc8:	10000526 	beq	r2,zero,2cde0 <alt_get_errno+0x34>
   2cdcc:	008000f4 	movhi	r2,3
   2cdd0:	1086fc04 	addi	r2,r2,7152
   2cdd4:	10800017 	ldw	r2,0(r2)
   2cdd8:	103ee83a 	callr	r2
   2cddc:	00000206 	br	2cde8 <alt_get_errno+0x3c>
   2cde0:	008000f4 	movhi	r2,3
   2cde4:	108de404 	addi	r2,r2,14224
}
   2cde8:	e037883a 	mov	sp,fp
   2cdec:	dfc00117 	ldw	ra,4(sp)
   2cdf0:	df000017 	ldw	fp,0(sp)
   2cdf4:	dec00204 	addi	sp,sp,8
   2cdf8:	f800283a 	ret

0002cdfc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2cdfc:	defffb04 	addi	sp,sp,-20
   2ce00:	dfc00415 	stw	ra,16(sp)
   2ce04:	df000315 	stw	fp,12(sp)
   2ce08:	df000304 	addi	fp,sp,12
   2ce0c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2ce10:	e0bfff17 	ldw	r2,-4(fp)
   2ce14:	10000616 	blt	r2,zero,2ce30 <close+0x34>
   2ce18:	e0bfff17 	ldw	r2,-4(fp)
   2ce1c:	10c00324 	muli	r3,r2,12
   2ce20:	008000f4 	movhi	r2,3
   2ce24:	10825b04 	addi	r2,r2,2412
   2ce28:	1885883a 	add	r2,r3,r2
   2ce2c:	00000106 	br	2ce34 <close+0x38>
   2ce30:	0005883a 	mov	r2,zero
   2ce34:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2ce38:	e0bffd17 	ldw	r2,-12(fp)
   2ce3c:	10001926 	beq	r2,zero,2cea4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2ce40:	e0bffd17 	ldw	r2,-12(fp)
   2ce44:	10800017 	ldw	r2,0(r2)
   2ce48:	10800417 	ldw	r2,16(r2)
   2ce4c:	10000626 	beq	r2,zero,2ce68 <close+0x6c>
   2ce50:	e0bffd17 	ldw	r2,-12(fp)
   2ce54:	10800017 	ldw	r2,0(r2)
   2ce58:	10800417 	ldw	r2,16(r2)
   2ce5c:	e13ffd17 	ldw	r4,-12(fp)
   2ce60:	103ee83a 	callr	r2
   2ce64:	00000106 	br	2ce6c <close+0x70>
   2ce68:	0005883a 	mov	r2,zero
   2ce6c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2ce70:	e13fff17 	ldw	r4,-4(fp)
   2ce74:	002d4f80 	call	2d4f8 <alt_release_fd>
    if (rval < 0)
   2ce78:	e0bffe17 	ldw	r2,-8(fp)
   2ce7c:	1000070e 	bge	r2,zero,2ce9c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2ce80:	002cdac0 	call	2cdac <alt_get_errno>
   2ce84:	1007883a 	mov	r3,r2
   2ce88:	e0bffe17 	ldw	r2,-8(fp)
   2ce8c:	0085c83a 	sub	r2,zero,r2
   2ce90:	18800015 	stw	r2,0(r3)
      return -1;
   2ce94:	00bfffc4 	movi	r2,-1
   2ce98:	00000706 	br	2ceb8 <close+0xbc>
    }
    return 0;
   2ce9c:	0005883a 	mov	r2,zero
   2cea0:	00000506 	br	2ceb8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2cea4:	002cdac0 	call	2cdac <alt_get_errno>
   2cea8:	1007883a 	mov	r3,r2
   2ceac:	00801444 	movi	r2,81
   2ceb0:	18800015 	stw	r2,0(r3)
    return -1;
   2ceb4:	00bfffc4 	movi	r2,-1
  }
}
   2ceb8:	e037883a 	mov	sp,fp
   2cebc:	dfc00117 	ldw	ra,4(sp)
   2cec0:	df000017 	ldw	fp,0(sp)
   2cec4:	dec00204 	addi	sp,sp,8
   2cec8:	f800283a 	ret

0002cecc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2cecc:	defffc04 	addi	sp,sp,-16
   2ced0:	df000315 	stw	fp,12(sp)
   2ced4:	df000304 	addi	fp,sp,12
   2ced8:	e13ffd15 	stw	r4,-12(fp)
   2cedc:	e17ffe15 	stw	r5,-8(fp)
   2cee0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2cee4:	e0bfff17 	ldw	r2,-4(fp)
}
   2cee8:	e037883a 	mov	sp,fp
   2ceec:	df000017 	ldw	fp,0(sp)
   2cef0:	dec00104 	addi	sp,sp,4
   2cef4:	f800283a 	ret

0002cef8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2cef8:	defffe04 	addi	sp,sp,-8
   2cefc:	dfc00115 	stw	ra,4(sp)
   2cf00:	df000015 	stw	fp,0(sp)
   2cf04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2cf08:	008000f4 	movhi	r2,3
   2cf0c:	1086fc04 	addi	r2,r2,7152
   2cf10:	10800017 	ldw	r2,0(r2)
   2cf14:	10000526 	beq	r2,zero,2cf2c <alt_get_errno+0x34>
   2cf18:	008000f4 	movhi	r2,3
   2cf1c:	1086fc04 	addi	r2,r2,7152
   2cf20:	10800017 	ldw	r2,0(r2)
   2cf24:	103ee83a 	callr	r2
   2cf28:	00000206 	br	2cf34 <alt_get_errno+0x3c>
   2cf2c:	008000f4 	movhi	r2,3
   2cf30:	108de404 	addi	r2,r2,14224
}
   2cf34:	e037883a 	mov	sp,fp
   2cf38:	dfc00117 	ldw	ra,4(sp)
   2cf3c:	df000017 	ldw	fp,0(sp)
   2cf40:	dec00204 	addi	sp,sp,8
   2cf44:	f800283a 	ret

0002cf48 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2cf48:	defffb04 	addi	sp,sp,-20
   2cf4c:	dfc00415 	stw	ra,16(sp)
   2cf50:	df000315 	stw	fp,12(sp)
   2cf54:	df000304 	addi	fp,sp,12
   2cf58:	e13ffe15 	stw	r4,-8(fp)
   2cf5c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2cf60:	e0bffe17 	ldw	r2,-8(fp)
   2cf64:	10000616 	blt	r2,zero,2cf80 <fstat+0x38>
   2cf68:	e0bffe17 	ldw	r2,-8(fp)
   2cf6c:	10c00324 	muli	r3,r2,12
   2cf70:	008000f4 	movhi	r2,3
   2cf74:	10825b04 	addi	r2,r2,2412
   2cf78:	1885883a 	add	r2,r3,r2
   2cf7c:	00000106 	br	2cf84 <fstat+0x3c>
   2cf80:	0005883a 	mov	r2,zero
   2cf84:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2cf88:	e0bffd17 	ldw	r2,-12(fp)
   2cf8c:	10001026 	beq	r2,zero,2cfd0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2cf90:	e0bffd17 	ldw	r2,-12(fp)
   2cf94:	10800017 	ldw	r2,0(r2)
   2cf98:	10800817 	ldw	r2,32(r2)
   2cf9c:	10000726 	beq	r2,zero,2cfbc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   2cfa0:	e0bffd17 	ldw	r2,-12(fp)
   2cfa4:	10800017 	ldw	r2,0(r2)
   2cfa8:	10800817 	ldw	r2,32(r2)
   2cfac:	e13ffd17 	ldw	r4,-12(fp)
   2cfb0:	e17fff17 	ldw	r5,-4(fp)
   2cfb4:	103ee83a 	callr	r2
   2cfb8:	00000a06 	br	2cfe4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2cfbc:	e0bfff17 	ldw	r2,-4(fp)
   2cfc0:	00c80004 	movi	r3,8192
   2cfc4:	10c00115 	stw	r3,4(r2)
      return 0;
   2cfc8:	0005883a 	mov	r2,zero
   2cfcc:	00000506 	br	2cfe4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2cfd0:	002cef80 	call	2cef8 <alt_get_errno>
   2cfd4:	1007883a 	mov	r3,r2
   2cfd8:	00801444 	movi	r2,81
   2cfdc:	18800015 	stw	r2,0(r3)
    return -1;
   2cfe0:	00bfffc4 	movi	r2,-1
  }
}
   2cfe4:	e037883a 	mov	sp,fp
   2cfe8:	dfc00117 	ldw	ra,4(sp)
   2cfec:	df000017 	ldw	fp,0(sp)
   2cff0:	dec00204 	addi	sp,sp,8
   2cff4:	f800283a 	ret

0002cff8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2cff8:	defffe04 	addi	sp,sp,-8
   2cffc:	dfc00115 	stw	ra,4(sp)
   2d000:	df000015 	stw	fp,0(sp)
   2d004:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d008:	008000f4 	movhi	r2,3
   2d00c:	1086fc04 	addi	r2,r2,7152
   2d010:	10800017 	ldw	r2,0(r2)
   2d014:	10000526 	beq	r2,zero,2d02c <alt_get_errno+0x34>
   2d018:	008000f4 	movhi	r2,3
   2d01c:	1086fc04 	addi	r2,r2,7152
   2d020:	10800017 	ldw	r2,0(r2)
   2d024:	103ee83a 	callr	r2
   2d028:	00000206 	br	2d034 <alt_get_errno+0x3c>
   2d02c:	008000f4 	movhi	r2,3
   2d030:	108de404 	addi	r2,r2,14224
}
   2d034:	e037883a 	mov	sp,fp
   2d038:	dfc00117 	ldw	ra,4(sp)
   2d03c:	df000017 	ldw	fp,0(sp)
   2d040:	dec00204 	addi	sp,sp,8
   2d044:	f800283a 	ret

0002d048 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2d048:	deffed04 	addi	sp,sp,-76
   2d04c:	dfc01215 	stw	ra,72(sp)
   2d050:	df001115 	stw	fp,68(sp)
   2d054:	df001104 	addi	fp,sp,68
   2d058:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d05c:	e0bfff17 	ldw	r2,-4(fp)
   2d060:	10000616 	blt	r2,zero,2d07c <isatty+0x34>
   2d064:	e0bfff17 	ldw	r2,-4(fp)
   2d068:	10c00324 	muli	r3,r2,12
   2d06c:	008000f4 	movhi	r2,3
   2d070:	10825b04 	addi	r2,r2,2412
   2d074:	1885883a 	add	r2,r3,r2
   2d078:	00000106 	br	2d080 <isatty+0x38>
   2d07c:	0005883a 	mov	r2,zero
   2d080:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2d084:	e0bfef17 	ldw	r2,-68(fp)
   2d088:	10000e26 	beq	r2,zero,2d0c4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2d08c:	e0bfef17 	ldw	r2,-68(fp)
   2d090:	10800017 	ldw	r2,0(r2)
   2d094:	10800817 	ldw	r2,32(r2)
   2d098:	1000021e 	bne	r2,zero,2d0a4 <isatty+0x5c>
    {
      return 1;
   2d09c:	00800044 	movi	r2,1
   2d0a0:	00000d06 	br	2d0d8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2d0a4:	e0bff004 	addi	r2,fp,-64
   2d0a8:	e13fff17 	ldw	r4,-4(fp)
   2d0ac:	100b883a 	mov	r5,r2
   2d0b0:	002cf480 	call	2cf48 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2d0b4:	e0bff117 	ldw	r2,-60(fp)
   2d0b8:	10880020 	cmpeqi	r2,r2,8192
   2d0bc:	10803fcc 	andi	r2,r2,255
   2d0c0:	00000506 	br	2d0d8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d0c4:	002cff80 	call	2cff8 <alt_get_errno>
   2d0c8:	1007883a 	mov	r3,r2
   2d0cc:	00801444 	movi	r2,81
   2d0d0:	18800015 	stw	r2,0(r3)
    return 0;
   2d0d4:	0005883a 	mov	r2,zero
  }
}
   2d0d8:	e037883a 	mov	sp,fp
   2d0dc:	dfc00117 	ldw	ra,4(sp)
   2d0e0:	df000017 	ldw	fp,0(sp)
   2d0e4:	dec00204 	addi	sp,sp,8
   2d0e8:	f800283a 	ret

0002d0ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2d0ec:	defffc04 	addi	sp,sp,-16
   2d0f0:	df000315 	stw	fp,12(sp)
   2d0f4:	df000304 	addi	fp,sp,12
   2d0f8:	e13ffd15 	stw	r4,-12(fp)
   2d0fc:	e17ffe15 	stw	r5,-8(fp)
   2d100:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2d104:	e0fffe17 	ldw	r3,-8(fp)
   2d108:	e0bffd17 	ldw	r2,-12(fp)
   2d10c:	18800c26 	beq	r3,r2,2d140 <alt_load_section+0x54>
  {
    while( to != end )
   2d110:	00000806 	br	2d134 <alt_load_section+0x48>
    {
      *to++ = *from++;
   2d114:	e0bffe17 	ldw	r2,-8(fp)
   2d118:	10c00104 	addi	r3,r2,4
   2d11c:	e0fffe15 	stw	r3,-8(fp)
   2d120:	e0fffd17 	ldw	r3,-12(fp)
   2d124:	19000104 	addi	r4,r3,4
   2d128:	e13ffd15 	stw	r4,-12(fp)
   2d12c:	18c00017 	ldw	r3,0(r3)
   2d130:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2d134:	e0fffe17 	ldw	r3,-8(fp)
   2d138:	e0bfff17 	ldw	r2,-4(fp)
   2d13c:	18bff51e 	bne	r3,r2,2d114 <__alt_data_end+0xfffedd14>
    {
      *to++ = *from++;
    }
  }
}
   2d140:	e037883a 	mov	sp,fp
   2d144:	df000017 	ldw	fp,0(sp)
   2d148:	dec00104 	addi	sp,sp,4
   2d14c:	f800283a 	ret

0002d150 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2d150:	defffe04 	addi	sp,sp,-8
   2d154:	dfc00115 	stw	ra,4(sp)
   2d158:	df000015 	stw	fp,0(sp)
   2d15c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2d160:	010000f4 	movhi	r4,3
   2d164:	21070304 	addi	r4,r4,7180
   2d168:	014000f4 	movhi	r5,3
   2d16c:	29402804 	addi	r5,r5,160
   2d170:	018000f4 	movhi	r6,3
   2d174:	31870304 	addi	r6,r6,7180
   2d178:	002d0ec0 	call	2d0ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2d17c:	010000b4 	movhi	r4,2
   2d180:	21000804 	addi	r4,r4,32
   2d184:	014000b4 	movhi	r5,2
   2d188:	29400804 	addi	r5,r5,32
   2d18c:	018000b4 	movhi	r6,2
   2d190:	31809004 	addi	r6,r6,576
   2d194:	002d0ec0 	call	2d0ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2d198:	010000f4 	movhi	r4,3
   2d19c:	213f4404 	addi	r4,r4,-752
   2d1a0:	014000f4 	movhi	r5,3
   2d1a4:	297f4404 	addi	r5,r5,-752
   2d1a8:	018000f4 	movhi	r6,3
   2d1ac:	31802804 	addi	r6,r6,160
   2d1b0:	002d0ec0 	call	2d0ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2d1b4:	002eb940 	call	2eb94 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2d1b8:	002ee140 	call	2ee14 <alt_icache_flush_all>
}
   2d1bc:	e037883a 	mov	sp,fp
   2d1c0:	dfc00117 	ldw	ra,4(sp)
   2d1c4:	df000017 	ldw	fp,0(sp)
   2d1c8:	dec00204 	addi	sp,sp,8
   2d1cc:	f800283a 	ret

0002d1d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d1d0:	defffe04 	addi	sp,sp,-8
   2d1d4:	dfc00115 	stw	ra,4(sp)
   2d1d8:	df000015 	stw	fp,0(sp)
   2d1dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d1e0:	008000f4 	movhi	r2,3
   2d1e4:	1086fc04 	addi	r2,r2,7152
   2d1e8:	10800017 	ldw	r2,0(r2)
   2d1ec:	10000526 	beq	r2,zero,2d204 <alt_get_errno+0x34>
   2d1f0:	008000f4 	movhi	r2,3
   2d1f4:	1086fc04 	addi	r2,r2,7152
   2d1f8:	10800017 	ldw	r2,0(r2)
   2d1fc:	103ee83a 	callr	r2
   2d200:	00000206 	br	2d20c <alt_get_errno+0x3c>
   2d204:	008000f4 	movhi	r2,3
   2d208:	108de404 	addi	r2,r2,14224
}
   2d20c:	e037883a 	mov	sp,fp
   2d210:	dfc00117 	ldw	ra,4(sp)
   2d214:	df000017 	ldw	fp,0(sp)
   2d218:	dec00204 	addi	sp,sp,8
   2d21c:	f800283a 	ret

0002d220 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2d220:	defff904 	addi	sp,sp,-28
   2d224:	dfc00615 	stw	ra,24(sp)
   2d228:	df000515 	stw	fp,20(sp)
   2d22c:	df000504 	addi	fp,sp,20
   2d230:	e13ffd15 	stw	r4,-12(fp)
   2d234:	e17ffe15 	stw	r5,-8(fp)
   2d238:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2d23c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d240:	e0bffd17 	ldw	r2,-12(fp)
   2d244:	10000616 	blt	r2,zero,2d260 <lseek+0x40>
   2d248:	e0bffd17 	ldw	r2,-12(fp)
   2d24c:	10c00324 	muli	r3,r2,12
   2d250:	008000f4 	movhi	r2,3
   2d254:	10825b04 	addi	r2,r2,2412
   2d258:	1885883a 	add	r2,r3,r2
   2d25c:	00000106 	br	2d264 <lseek+0x44>
   2d260:	0005883a 	mov	r2,zero
   2d264:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2d268:	e0bffc17 	ldw	r2,-16(fp)
   2d26c:	10001026 	beq	r2,zero,2d2b0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2d270:	e0bffc17 	ldw	r2,-16(fp)
   2d274:	10800017 	ldw	r2,0(r2)
   2d278:	10800717 	ldw	r2,28(r2)
   2d27c:	10000926 	beq	r2,zero,2d2a4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2d280:	e0bffc17 	ldw	r2,-16(fp)
   2d284:	10800017 	ldw	r2,0(r2)
   2d288:	10800717 	ldw	r2,28(r2)
   2d28c:	e13ffc17 	ldw	r4,-16(fp)
   2d290:	e17ffe17 	ldw	r5,-8(fp)
   2d294:	e1bfff17 	ldw	r6,-4(fp)
   2d298:	103ee83a 	callr	r2
   2d29c:	e0bffb15 	stw	r2,-20(fp)
   2d2a0:	00000506 	br	2d2b8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2d2a4:	00bfde84 	movi	r2,-134
   2d2a8:	e0bffb15 	stw	r2,-20(fp)
   2d2ac:	00000206 	br	2d2b8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   2d2b0:	00bfebc4 	movi	r2,-81
   2d2b4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2d2b8:	e0bffb17 	ldw	r2,-20(fp)
   2d2bc:	1000070e 	bge	r2,zero,2d2dc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   2d2c0:	002d1d00 	call	2d1d0 <alt_get_errno>
   2d2c4:	1007883a 	mov	r3,r2
   2d2c8:	e0bffb17 	ldw	r2,-20(fp)
   2d2cc:	0085c83a 	sub	r2,zero,r2
   2d2d0:	18800015 	stw	r2,0(r3)
    rc = -1;
   2d2d4:	00bfffc4 	movi	r2,-1
   2d2d8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2d2dc:	e0bffb17 	ldw	r2,-20(fp)
}
   2d2e0:	e037883a 	mov	sp,fp
   2d2e4:	dfc00117 	ldw	ra,4(sp)
   2d2e8:	df000017 	ldw	fp,0(sp)
   2d2ec:	dec00204 	addi	sp,sp,8
   2d2f0:	f800283a 	ret

0002d2f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2d2f4:	defffd04 	addi	sp,sp,-12
   2d2f8:	dfc00215 	stw	ra,8(sp)
   2d2fc:	df000115 	stw	fp,4(sp)
   2d300:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2d304:	0009883a 	mov	r4,zero
   2d308:	002d7b80 	call	2d7b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2d30c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2d310:	002d7ec0 	call	2d7ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2d314:	010000f4 	movhi	r4,3
   2d318:	21000e04 	addi	r4,r4,56
   2d31c:	014000f4 	movhi	r5,3
   2d320:	29400e04 	addi	r5,r5,56
   2d324:	018000f4 	movhi	r6,3
   2d328:	31800e04 	addi	r6,r6,56
   2d32c:	002f1d40 	call	2f1d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2d330:	002eccc0 	call	2eccc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2d334:	010000f4 	movhi	r4,3
   2d338:	213b4a04 	addi	r4,r4,-4824
   2d33c:	002f96c0 	call	2f96c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2d340:	d126f417 	ldw	r4,-25648(gp)
   2d344:	d0e6f517 	ldw	r3,-25644(gp)
   2d348:	d0a6f617 	ldw	r2,-25640(gp)
   2d34c:	180b883a 	mov	r5,r3
   2d350:	100d883a 	mov	r6,r2
   2d354:	002028c0 	call	2028c <main>
   2d358:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2d35c:	01000044 	movi	r4,1
   2d360:	002cdfc0 	call	2cdfc <close>
  exit (result);
   2d364:	e13fff17 	ldw	r4,-4(fp)
   2d368:	002f9800 	call	2f980 <exit>

0002d36c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2d36c:	defffe04 	addi	sp,sp,-8
   2d370:	df000115 	stw	fp,4(sp)
   2d374:	df000104 	addi	fp,sp,4
   2d378:	e13fff15 	stw	r4,-4(fp)
}
   2d37c:	e037883a 	mov	sp,fp
   2d380:	df000017 	ldw	fp,0(sp)
   2d384:	dec00104 	addi	sp,sp,4
   2d388:	f800283a 	ret

0002d38c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2d38c:	defffe04 	addi	sp,sp,-8
   2d390:	df000115 	stw	fp,4(sp)
   2d394:	df000104 	addi	fp,sp,4
   2d398:	e13fff15 	stw	r4,-4(fp)
}
   2d39c:	e037883a 	mov	sp,fp
   2d3a0:	df000017 	ldw	fp,0(sp)
   2d3a4:	dec00104 	addi	sp,sp,4
   2d3a8:	f800283a 	ret

0002d3ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d3ac:	defffe04 	addi	sp,sp,-8
   2d3b0:	dfc00115 	stw	ra,4(sp)
   2d3b4:	df000015 	stw	fp,0(sp)
   2d3b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d3bc:	008000f4 	movhi	r2,3
   2d3c0:	1086fc04 	addi	r2,r2,7152
   2d3c4:	10800017 	ldw	r2,0(r2)
   2d3c8:	10000526 	beq	r2,zero,2d3e0 <alt_get_errno+0x34>
   2d3cc:	008000f4 	movhi	r2,3
   2d3d0:	1086fc04 	addi	r2,r2,7152
   2d3d4:	10800017 	ldw	r2,0(r2)
   2d3d8:	103ee83a 	callr	r2
   2d3dc:	00000206 	br	2d3e8 <alt_get_errno+0x3c>
   2d3e0:	008000f4 	movhi	r2,3
   2d3e4:	108de404 	addi	r2,r2,14224
}
   2d3e8:	e037883a 	mov	sp,fp
   2d3ec:	dfc00117 	ldw	ra,4(sp)
   2d3f0:	df000017 	ldw	fp,0(sp)
   2d3f4:	dec00204 	addi	sp,sp,8
   2d3f8:	f800283a 	ret

0002d3fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2d3fc:	defff904 	addi	sp,sp,-28
   2d400:	dfc00615 	stw	ra,24(sp)
   2d404:	df000515 	stw	fp,20(sp)
   2d408:	df000504 	addi	fp,sp,20
   2d40c:	e13ffd15 	stw	r4,-12(fp)
   2d410:	e17ffe15 	stw	r5,-8(fp)
   2d414:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d418:	e0bffd17 	ldw	r2,-12(fp)
   2d41c:	10000616 	blt	r2,zero,2d438 <read+0x3c>
   2d420:	e0bffd17 	ldw	r2,-12(fp)
   2d424:	10c00324 	muli	r3,r2,12
   2d428:	008000f4 	movhi	r2,3
   2d42c:	10825b04 	addi	r2,r2,2412
   2d430:	1885883a 	add	r2,r3,r2
   2d434:	00000106 	br	2d43c <read+0x40>
   2d438:	0005883a 	mov	r2,zero
   2d43c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2d440:	e0bffb17 	ldw	r2,-20(fp)
   2d444:	10002226 	beq	r2,zero,2d4d0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2d448:	e0bffb17 	ldw	r2,-20(fp)
   2d44c:	10800217 	ldw	r2,8(r2)
   2d450:	108000cc 	andi	r2,r2,3
   2d454:	10800060 	cmpeqi	r2,r2,1
   2d458:	1000181e 	bne	r2,zero,2d4bc <read+0xc0>
        (fd->dev->read))
   2d45c:	e0bffb17 	ldw	r2,-20(fp)
   2d460:	10800017 	ldw	r2,0(r2)
   2d464:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2d468:	10001426 	beq	r2,zero,2d4bc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2d46c:	e0bffb17 	ldw	r2,-20(fp)
   2d470:	10800017 	ldw	r2,0(r2)
   2d474:	10800517 	ldw	r2,20(r2)
   2d478:	e0ffff17 	ldw	r3,-4(fp)
   2d47c:	e13ffb17 	ldw	r4,-20(fp)
   2d480:	e17ffe17 	ldw	r5,-8(fp)
   2d484:	180d883a 	mov	r6,r3
   2d488:	103ee83a 	callr	r2
   2d48c:	e0bffc15 	stw	r2,-16(fp)
   2d490:	e0bffc17 	ldw	r2,-16(fp)
   2d494:	1000070e 	bge	r2,zero,2d4b4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2d498:	002d3ac0 	call	2d3ac <alt_get_errno>
   2d49c:	1007883a 	mov	r3,r2
   2d4a0:	e0bffc17 	ldw	r2,-16(fp)
   2d4a4:	0085c83a 	sub	r2,zero,r2
   2d4a8:	18800015 	stw	r2,0(r3)
          return -1;
   2d4ac:	00bfffc4 	movi	r2,-1
   2d4b0:	00000c06 	br	2d4e4 <read+0xe8>
        }
        return rval;
   2d4b4:	e0bffc17 	ldw	r2,-16(fp)
   2d4b8:	00000a06 	br	2d4e4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2d4bc:	002d3ac0 	call	2d3ac <alt_get_errno>
   2d4c0:	1007883a 	mov	r3,r2
   2d4c4:	00800344 	movi	r2,13
   2d4c8:	18800015 	stw	r2,0(r3)
   2d4cc:	00000406 	br	2d4e0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2d4d0:	002d3ac0 	call	2d3ac <alt_get_errno>
   2d4d4:	1007883a 	mov	r3,r2
   2d4d8:	00801444 	movi	r2,81
   2d4dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2d4e0:	00bfffc4 	movi	r2,-1
}
   2d4e4:	e037883a 	mov	sp,fp
   2d4e8:	dfc00117 	ldw	ra,4(sp)
   2d4ec:	df000017 	ldw	fp,0(sp)
   2d4f0:	dec00204 	addi	sp,sp,8
   2d4f4:	f800283a 	ret

0002d4f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2d4f8:	defffe04 	addi	sp,sp,-8
   2d4fc:	df000115 	stw	fp,4(sp)
   2d500:	df000104 	addi	fp,sp,4
   2d504:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2d508:	e0bfff17 	ldw	r2,-4(fp)
   2d50c:	108000d0 	cmplti	r2,r2,3
   2d510:	10000d1e 	bne	r2,zero,2d548 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   2d514:	008000f4 	movhi	r2,3
   2d518:	10825b04 	addi	r2,r2,2412
   2d51c:	e0ffff17 	ldw	r3,-4(fp)
   2d520:	18c00324 	muli	r3,r3,12
   2d524:	10c5883a 	add	r2,r2,r3
   2d528:	10800204 	addi	r2,r2,8
   2d52c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2d530:	008000f4 	movhi	r2,3
   2d534:	10825b04 	addi	r2,r2,2412
   2d538:	e0ffff17 	ldw	r3,-4(fp)
   2d53c:	18c00324 	muli	r3,r3,12
   2d540:	10c5883a 	add	r2,r2,r3
   2d544:	10000015 	stw	zero,0(r2)
  }
}
   2d548:	e037883a 	mov	sp,fp
   2d54c:	df000017 	ldw	fp,0(sp)
   2d550:	dec00104 	addi	sp,sp,4
   2d554:	f800283a 	ret

0002d558 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2d558:	defff904 	addi	sp,sp,-28
   2d55c:	df000615 	stw	fp,24(sp)
   2d560:	df000604 	addi	fp,sp,24
   2d564:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d568:	0005303a 	rdctl	r2,status
   2d56c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d570:	e0fffc17 	ldw	r3,-16(fp)
   2d574:	00bfff84 	movi	r2,-2
   2d578:	1884703a 	and	r2,r3,r2
   2d57c:	1001703a 	wrctl	status,r2
  
  return context;
   2d580:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2d584:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2d588:	d0a00c17 	ldw	r2,-32720(gp)
   2d58c:	10c000c4 	addi	r3,r2,3
   2d590:	00bfff04 	movi	r2,-4
   2d594:	1884703a 	and	r2,r3,r2
   2d598:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2d59c:	d0e00c17 	ldw	r3,-32720(gp)
   2d5a0:	e0bfff17 	ldw	r2,-4(fp)
   2d5a4:	1887883a 	add	r3,r3,r2
   2d5a8:	00800134 	movhi	r2,4
   2d5ac:	10bd0004 	addi	r2,r2,-3072
   2d5b0:	10c0062e 	bgeu	r2,r3,2d5cc <sbrk+0x74>
   2d5b4:	e0bffa17 	ldw	r2,-24(fp)
   2d5b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d5bc:	e0bffd17 	ldw	r2,-12(fp)
   2d5c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2d5c4:	00bfffc4 	movi	r2,-1
   2d5c8:	00000b06 	br	2d5f8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2d5cc:	d0a00c17 	ldw	r2,-32720(gp)
   2d5d0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   2d5d4:	d0e00c17 	ldw	r3,-32720(gp)
   2d5d8:	e0bfff17 	ldw	r2,-4(fp)
   2d5dc:	1885883a 	add	r2,r3,r2
   2d5e0:	d0a00c15 	stw	r2,-32720(gp)
   2d5e4:	e0bffa17 	ldw	r2,-24(fp)
   2d5e8:	e0bffe15 	stw	r2,-8(fp)
   2d5ec:	e0bffe17 	ldw	r2,-8(fp)
   2d5f0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2d5f4:	e0bffb17 	ldw	r2,-20(fp)
} 
   2d5f8:	e037883a 	mov	sp,fp
   2d5fc:	df000017 	ldw	fp,0(sp)
   2d600:	dec00104 	addi	sp,sp,4
   2d604:	f800283a 	ret

0002d608 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   2d608:	defffd04 	addi	sp,sp,-12
   2d60c:	dfc00215 	stw	ra,8(sp)
   2d610:	df000115 	stw	fp,4(sp)
   2d614:	df000104 	addi	fp,sp,4
   2d618:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   2d61c:	e13fff17 	ldw	r4,-4(fp)
   2d620:	002ea3c0 	call	2ea3c <alt_busy_sleep>
}
   2d624:	e037883a 	mov	sp,fp
   2d628:	dfc00117 	ldw	ra,4(sp)
   2d62c:	df000017 	ldw	fp,0(sp)
   2d630:	dec00204 	addi	sp,sp,8
   2d634:	f800283a 	ret

0002d638 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d638:	defffe04 	addi	sp,sp,-8
   2d63c:	dfc00115 	stw	ra,4(sp)
   2d640:	df000015 	stw	fp,0(sp)
   2d644:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d648:	008000f4 	movhi	r2,3
   2d64c:	1086fc04 	addi	r2,r2,7152
   2d650:	10800017 	ldw	r2,0(r2)
   2d654:	10000526 	beq	r2,zero,2d66c <alt_get_errno+0x34>
   2d658:	008000f4 	movhi	r2,3
   2d65c:	1086fc04 	addi	r2,r2,7152
   2d660:	10800017 	ldw	r2,0(r2)
   2d664:	103ee83a 	callr	r2
   2d668:	00000206 	br	2d674 <alt_get_errno+0x3c>
   2d66c:	008000f4 	movhi	r2,3
   2d670:	108de404 	addi	r2,r2,14224
}
   2d674:	e037883a 	mov	sp,fp
   2d678:	dfc00117 	ldw	ra,4(sp)
   2d67c:	df000017 	ldw	fp,0(sp)
   2d680:	dec00204 	addi	sp,sp,8
   2d684:	f800283a 	ret

0002d688 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2d688:	defff904 	addi	sp,sp,-28
   2d68c:	dfc00615 	stw	ra,24(sp)
   2d690:	df000515 	stw	fp,20(sp)
   2d694:	df000504 	addi	fp,sp,20
   2d698:	e13ffd15 	stw	r4,-12(fp)
   2d69c:	e17ffe15 	stw	r5,-8(fp)
   2d6a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d6a4:	e0bffd17 	ldw	r2,-12(fp)
   2d6a8:	10000616 	blt	r2,zero,2d6c4 <write+0x3c>
   2d6ac:	e0bffd17 	ldw	r2,-12(fp)
   2d6b0:	10c00324 	muli	r3,r2,12
   2d6b4:	008000f4 	movhi	r2,3
   2d6b8:	10825b04 	addi	r2,r2,2412
   2d6bc:	1885883a 	add	r2,r3,r2
   2d6c0:	00000106 	br	2d6c8 <write+0x40>
   2d6c4:	0005883a 	mov	r2,zero
   2d6c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2d6cc:	e0bffb17 	ldw	r2,-20(fp)
   2d6d0:	10002126 	beq	r2,zero,2d758 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2d6d4:	e0bffb17 	ldw	r2,-20(fp)
   2d6d8:	10800217 	ldw	r2,8(r2)
   2d6dc:	108000cc 	andi	r2,r2,3
   2d6e0:	10001826 	beq	r2,zero,2d744 <write+0xbc>
   2d6e4:	e0bffb17 	ldw	r2,-20(fp)
   2d6e8:	10800017 	ldw	r2,0(r2)
   2d6ec:	10800617 	ldw	r2,24(r2)
   2d6f0:	10001426 	beq	r2,zero,2d744 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2d6f4:	e0bffb17 	ldw	r2,-20(fp)
   2d6f8:	10800017 	ldw	r2,0(r2)
   2d6fc:	10800617 	ldw	r2,24(r2)
   2d700:	e0ffff17 	ldw	r3,-4(fp)
   2d704:	e13ffb17 	ldw	r4,-20(fp)
   2d708:	e17ffe17 	ldw	r5,-8(fp)
   2d70c:	180d883a 	mov	r6,r3
   2d710:	103ee83a 	callr	r2
   2d714:	e0bffc15 	stw	r2,-16(fp)
   2d718:	e0bffc17 	ldw	r2,-16(fp)
   2d71c:	1000070e 	bge	r2,zero,2d73c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2d720:	002d6380 	call	2d638 <alt_get_errno>
   2d724:	1007883a 	mov	r3,r2
   2d728:	e0bffc17 	ldw	r2,-16(fp)
   2d72c:	0085c83a 	sub	r2,zero,r2
   2d730:	18800015 	stw	r2,0(r3)
        return -1;
   2d734:	00bfffc4 	movi	r2,-1
   2d738:	00000c06 	br	2d76c <write+0xe4>
      }
      return rval;
   2d73c:	e0bffc17 	ldw	r2,-16(fp)
   2d740:	00000a06 	br	2d76c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2d744:	002d6380 	call	2d638 <alt_get_errno>
   2d748:	1007883a 	mov	r3,r2
   2d74c:	00800344 	movi	r2,13
   2d750:	18800015 	stw	r2,0(r3)
   2d754:	00000406 	br	2d768 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2d758:	002d6380 	call	2d638 <alt_get_errno>
   2d75c:	1007883a 	mov	r3,r2
   2d760:	00801444 	movi	r2,81
   2d764:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2d768:	00bfffc4 	movi	r2,-1
}
   2d76c:	e037883a 	mov	sp,fp
   2d770:	dfc00117 	ldw	ra,4(sp)
   2d774:	df000017 	ldw	fp,0(sp)
   2d778:	dec00204 	addi	sp,sp,8
   2d77c:	f800283a 	ret

0002d780 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2d780:	defffd04 	addi	sp,sp,-12
   2d784:	dfc00215 	stw	ra,8(sp)
   2d788:	df000115 	stw	fp,4(sp)
   2d78c:	df000104 	addi	fp,sp,4
   2d790:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2d794:	e13fff17 	ldw	r4,-4(fp)
   2d798:	014000f4 	movhi	r5,3
   2d79c:	2946f904 	addi	r5,r5,7140
   2d7a0:	002ec280 	call	2ec28 <alt_dev_llist_insert>
}
   2d7a4:	e037883a 	mov	sp,fp
   2d7a8:	dfc00117 	ldw	ra,4(sp)
   2d7ac:	df000017 	ldw	fp,0(sp)
   2d7b0:	dec00204 	addi	sp,sp,8
   2d7b4:	f800283a 	ret

0002d7b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2d7b8:	defffd04 	addi	sp,sp,-12
   2d7bc:	dfc00215 	stw	ra,8(sp)
   2d7c0:	df000115 	stw	fp,4(sp)
   2d7c4:	df000104 	addi	fp,sp,4
   2d7c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   2d7cc:	002f65c0 	call	2f65c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2d7d0:	00800044 	movi	r2,1
   2d7d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2d7d8:	e037883a 	mov	sp,fp
   2d7dc:	dfc00117 	ldw	ra,4(sp)
   2d7e0:	df000017 	ldw	fp,0(sp)
   2d7e4:	dec00204 	addi	sp,sp,8
   2d7e8:	f800283a 	ret

0002d7ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2d7ec:	defffe04 	addi	sp,sp,-8
   2d7f0:	dfc00115 	stw	ra,4(sp)
   2d7f4:	df000015 	stw	fp,0(sp)
   2d7f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   2d7fc:	01000134 	movhi	r4,4
   2d800:	21050004 	addi	r4,r4,5120
   2d804:	000b883a 	mov	r5,zero
   2d808:	000d883a 	mov	r6,zero
   2d80c:	01c0fa04 	movi	r7,1000
   2d810:	002e3340 	call	2e334 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   2d814:	010000f4 	movhi	r4,3
   2d818:	2102c504 	addi	r4,r4,2836
   2d81c:	000b883a 	mov	r5,zero
   2d820:	01800044 	movi	r6,1
   2d824:	002d9d80 	call	2d9d8 <altera_avalon_jtag_uart_init>
   2d828:	010000f4 	movhi	r4,3
   2d82c:	2102bb04 	addi	r4,r4,2796
   2d830:	002d7800 	call	2d780 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   2d834:	0001883a 	nop
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
   2d838:	010000f4 	movhi	r4,3
   2d83c:	2106d304 	addi	r4,r4,6988
   2d840:	017fffc4 	movi	r5,-1
   2d844:	01bfffc4 	movi	r6,-1
   2d848:	002e50c0 	call	2e50c <altera_modular_adc_init>
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_1, modular_adc_1);
   2d84c:	010000f4 	movhi	r4,3
   2d850:	2106e204 	addi	r4,r4,7048
   2d854:	017fffc4 	movi	r5,-1
   2d858:	01bfffc4 	movi	r6,-1
   2d85c:	002e50c0 	call	2e50c <altera_modular_adc_init>
}
   2d860:	e037883a 	mov	sp,fp
   2d864:	dfc00117 	ldw	ra,4(sp)
   2d868:	df000017 	ldw	fp,0(sp)
   2d86c:	dec00204 	addi	sp,sp,8
   2d870:	f800283a 	ret

0002d874 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2d874:	defffa04 	addi	sp,sp,-24
   2d878:	dfc00515 	stw	ra,20(sp)
   2d87c:	df000415 	stw	fp,16(sp)
   2d880:	df000404 	addi	fp,sp,16
   2d884:	e13ffd15 	stw	r4,-12(fp)
   2d888:	e17ffe15 	stw	r5,-8(fp)
   2d88c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2d890:	e0bffd17 	ldw	r2,-12(fp)
   2d894:	10800017 	ldw	r2,0(r2)
   2d898:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2d89c:	e0bffc17 	ldw	r2,-16(fp)
   2d8a0:	10c00a04 	addi	r3,r2,40
   2d8a4:	e0bffd17 	ldw	r2,-12(fp)
   2d8a8:	10800217 	ldw	r2,8(r2)
   2d8ac:	1809883a 	mov	r4,r3
   2d8b0:	e17ffe17 	ldw	r5,-8(fp)
   2d8b4:	e1bfff17 	ldw	r6,-4(fp)
   2d8b8:	100f883a 	mov	r7,r2
   2d8bc:	002de9c0 	call	2de9c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2d8c0:	e037883a 	mov	sp,fp
   2d8c4:	dfc00117 	ldw	ra,4(sp)
   2d8c8:	df000017 	ldw	fp,0(sp)
   2d8cc:	dec00204 	addi	sp,sp,8
   2d8d0:	f800283a 	ret

0002d8d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2d8d4:	defffa04 	addi	sp,sp,-24
   2d8d8:	dfc00515 	stw	ra,20(sp)
   2d8dc:	df000415 	stw	fp,16(sp)
   2d8e0:	df000404 	addi	fp,sp,16
   2d8e4:	e13ffd15 	stw	r4,-12(fp)
   2d8e8:	e17ffe15 	stw	r5,-8(fp)
   2d8ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2d8f0:	e0bffd17 	ldw	r2,-12(fp)
   2d8f4:	10800017 	ldw	r2,0(r2)
   2d8f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2d8fc:	e0bffc17 	ldw	r2,-16(fp)
   2d900:	10c00a04 	addi	r3,r2,40
   2d904:	e0bffd17 	ldw	r2,-12(fp)
   2d908:	10800217 	ldw	r2,8(r2)
   2d90c:	1809883a 	mov	r4,r3
   2d910:	e17ffe17 	ldw	r5,-8(fp)
   2d914:	e1bfff17 	ldw	r6,-4(fp)
   2d918:	100f883a 	mov	r7,r2
   2d91c:	002e0a80 	call	2e0a8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2d920:	e037883a 	mov	sp,fp
   2d924:	dfc00117 	ldw	ra,4(sp)
   2d928:	df000017 	ldw	fp,0(sp)
   2d92c:	dec00204 	addi	sp,sp,8
   2d930:	f800283a 	ret

0002d934 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2d934:	defffc04 	addi	sp,sp,-16
   2d938:	dfc00315 	stw	ra,12(sp)
   2d93c:	df000215 	stw	fp,8(sp)
   2d940:	df000204 	addi	fp,sp,8
   2d944:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2d948:	e0bfff17 	ldw	r2,-4(fp)
   2d94c:	10800017 	ldw	r2,0(r2)
   2d950:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2d954:	e0bffe17 	ldw	r2,-8(fp)
   2d958:	10c00a04 	addi	r3,r2,40
   2d95c:	e0bfff17 	ldw	r2,-4(fp)
   2d960:	10800217 	ldw	r2,8(r2)
   2d964:	1809883a 	mov	r4,r3
   2d968:	100b883a 	mov	r5,r2
   2d96c:	002dd480 	call	2dd48 <altera_avalon_jtag_uart_close>
}
   2d970:	e037883a 	mov	sp,fp
   2d974:	dfc00117 	ldw	ra,4(sp)
   2d978:	df000017 	ldw	fp,0(sp)
   2d97c:	dec00204 	addi	sp,sp,8
   2d980:	f800283a 	ret

0002d984 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2d984:	defffa04 	addi	sp,sp,-24
   2d988:	dfc00515 	stw	ra,20(sp)
   2d98c:	df000415 	stw	fp,16(sp)
   2d990:	df000404 	addi	fp,sp,16
   2d994:	e13ffd15 	stw	r4,-12(fp)
   2d998:	e17ffe15 	stw	r5,-8(fp)
   2d99c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2d9a0:	e0bffd17 	ldw	r2,-12(fp)
   2d9a4:	10800017 	ldw	r2,0(r2)
   2d9a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2d9ac:	e0bffc17 	ldw	r2,-16(fp)
   2d9b0:	10800a04 	addi	r2,r2,40
   2d9b4:	1009883a 	mov	r4,r2
   2d9b8:	e17ffe17 	ldw	r5,-8(fp)
   2d9bc:	e1bfff17 	ldw	r6,-4(fp)
   2d9c0:	002ddb00 	call	2ddb0 <altera_avalon_jtag_uart_ioctl>
}
   2d9c4:	e037883a 	mov	sp,fp
   2d9c8:	dfc00117 	ldw	ra,4(sp)
   2d9cc:	df000017 	ldw	fp,0(sp)
   2d9d0:	dec00204 	addi	sp,sp,8
   2d9d4:	f800283a 	ret

0002d9d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2d9d8:	defffa04 	addi	sp,sp,-24
   2d9dc:	dfc00515 	stw	ra,20(sp)
   2d9e0:	df000415 	stw	fp,16(sp)
   2d9e4:	df000404 	addi	fp,sp,16
   2d9e8:	e13ffd15 	stw	r4,-12(fp)
   2d9ec:	e17ffe15 	stw	r5,-8(fp)
   2d9f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2d9f4:	e0bffd17 	ldw	r2,-12(fp)
   2d9f8:	00c00044 	movi	r3,1
   2d9fc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2da00:	e0bffd17 	ldw	r2,-12(fp)
   2da04:	10800017 	ldw	r2,0(r2)
   2da08:	10800104 	addi	r2,r2,4
   2da0c:	1007883a 	mov	r3,r2
   2da10:	e0bffd17 	ldw	r2,-12(fp)
   2da14:	10800817 	ldw	r2,32(r2)
   2da18:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2da1c:	e0fffe17 	ldw	r3,-8(fp)
   2da20:	e0bfff17 	ldw	r2,-4(fp)
   2da24:	d8000015 	stw	zero,0(sp)
   2da28:	1809883a 	mov	r4,r3
   2da2c:	100b883a 	mov	r5,r2
   2da30:	018000f4 	movhi	r6,3
   2da34:	31b6a704 	addi	r6,r6,-9572
   2da38:	e1fffd17 	ldw	r7,-12(fp)
   2da3c:	002ee440 	call	2ee44 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2da40:	e0bffd17 	ldw	r2,-12(fp)
   2da44:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2da48:	e0bffd17 	ldw	r2,-12(fp)
   2da4c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2da50:	008000f4 	movhi	r2,3
   2da54:	108de904 	addi	r2,r2,14244
   2da58:	10800017 	ldw	r2,0(r2)
   2da5c:	1809883a 	mov	r4,r3
   2da60:	100b883a 	mov	r5,r2
   2da64:	018000f4 	movhi	r6,3
   2da68:	31b72804 	addi	r6,r6,-9056
   2da6c:	e1fffd17 	ldw	r7,-12(fp)
   2da70:	002e8fc0 	call	2e8fc <alt_alarm_start>
   2da74:	1000040e 	bge	r2,zero,2da88 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2da78:	e0fffd17 	ldw	r3,-12(fp)
   2da7c:	00a00034 	movhi	r2,32768
   2da80:	10bfffc4 	addi	r2,r2,-1
   2da84:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2da88:	e037883a 	mov	sp,fp
   2da8c:	dfc00117 	ldw	ra,4(sp)
   2da90:	df000017 	ldw	fp,0(sp)
   2da94:	dec00204 	addi	sp,sp,8
   2da98:	f800283a 	ret

0002da9c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2da9c:	defff804 	addi	sp,sp,-32
   2daa0:	df000715 	stw	fp,28(sp)
   2daa4:	df000704 	addi	fp,sp,28
   2daa8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2daac:	e0bfff17 	ldw	r2,-4(fp)
   2dab0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2dab4:	e0bffb17 	ldw	r2,-20(fp)
   2dab8:	10800017 	ldw	r2,0(r2)
   2dabc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2dac0:	e0bffc17 	ldw	r2,-16(fp)
   2dac4:	10800104 	addi	r2,r2,4
   2dac8:	10800037 	ldwio	r2,0(r2)
   2dacc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2dad0:	e0bffd17 	ldw	r2,-12(fp)
   2dad4:	1080c00c 	andi	r2,r2,768
   2dad8:	1000011e 	bne	r2,zero,2dae0 <altera_avalon_jtag_uart_irq+0x44>
      break;
   2dadc:	00006c06 	br	2dc90 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2dae0:	e0bffd17 	ldw	r2,-12(fp)
   2dae4:	1080400c 	andi	r2,r2,256
   2dae8:	10003426 	beq	r2,zero,2dbbc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2daec:	00800074 	movhi	r2,1
   2daf0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2daf4:	e0bffb17 	ldw	r2,-20(fp)
   2daf8:	10800a17 	ldw	r2,40(r2)
   2dafc:	10800044 	addi	r2,r2,1
   2db00:	1081ffcc 	andi	r2,r2,2047
   2db04:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2db08:	e0bffb17 	ldw	r2,-20(fp)
   2db0c:	10c00b17 	ldw	r3,44(r2)
   2db10:	e0bffe17 	ldw	r2,-8(fp)
   2db14:	1880011e 	bne	r3,r2,2db1c <altera_avalon_jtag_uart_irq+0x80>
          break;
   2db18:	00001606 	br	2db74 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2db1c:	e0bffc17 	ldw	r2,-16(fp)
   2db20:	10800037 	ldwio	r2,0(r2)
   2db24:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2db28:	e0bff917 	ldw	r2,-28(fp)
   2db2c:	10a0000c 	andi	r2,r2,32768
   2db30:	1000011e 	bne	r2,zero,2db38 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   2db34:	00000f06 	br	2db74 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2db38:	e0bffb17 	ldw	r2,-20(fp)
   2db3c:	10800a17 	ldw	r2,40(r2)
   2db40:	e0fff917 	ldw	r3,-28(fp)
   2db44:	1809883a 	mov	r4,r3
   2db48:	e0fffb17 	ldw	r3,-20(fp)
   2db4c:	1885883a 	add	r2,r3,r2
   2db50:	10800e04 	addi	r2,r2,56
   2db54:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2db58:	e0bffb17 	ldw	r2,-20(fp)
   2db5c:	10800a17 	ldw	r2,40(r2)
   2db60:	10800044 	addi	r2,r2,1
   2db64:	10c1ffcc 	andi	r3,r2,2047
   2db68:	e0bffb17 	ldw	r2,-20(fp)
   2db6c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2db70:	003fe006 	br	2daf4 <__alt_data_end+0xfffee6f4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2db74:	e0bff917 	ldw	r2,-28(fp)
   2db78:	10bfffec 	andhi	r2,r2,65535
   2db7c:	10000f26 	beq	r2,zero,2dbbc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2db80:	e0bffb17 	ldw	r2,-20(fp)
   2db84:	10c00817 	ldw	r3,32(r2)
   2db88:	00bfff84 	movi	r2,-2
   2db8c:	1886703a 	and	r3,r3,r2
   2db90:	e0bffb17 	ldw	r2,-20(fp)
   2db94:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2db98:	e0bffc17 	ldw	r2,-16(fp)
   2db9c:	10800104 	addi	r2,r2,4
   2dba0:	1007883a 	mov	r3,r2
   2dba4:	e0bffb17 	ldw	r2,-20(fp)
   2dba8:	10800817 	ldw	r2,32(r2)
   2dbac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2dbb0:	e0bffc17 	ldw	r2,-16(fp)
   2dbb4:	10800104 	addi	r2,r2,4
   2dbb8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2dbbc:	e0bffd17 	ldw	r2,-12(fp)
   2dbc0:	1080800c 	andi	r2,r2,512
   2dbc4:	10003126 	beq	r2,zero,2dc8c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2dbc8:	e0bffd17 	ldw	r2,-12(fp)
   2dbcc:	1004d43a 	srli	r2,r2,16
   2dbd0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2dbd4:	00001406 	br	2dc28 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2dbd8:	e0bffc17 	ldw	r2,-16(fp)
   2dbdc:	e0fffb17 	ldw	r3,-20(fp)
   2dbe0:	18c00d17 	ldw	r3,52(r3)
   2dbe4:	e13ffb17 	ldw	r4,-20(fp)
   2dbe8:	20c7883a 	add	r3,r4,r3
   2dbec:	18c20e04 	addi	r3,r3,2104
   2dbf0:	18c00003 	ldbu	r3,0(r3)
   2dbf4:	18c03fcc 	andi	r3,r3,255
   2dbf8:	18c0201c 	xori	r3,r3,128
   2dbfc:	18ffe004 	addi	r3,r3,-128
   2dc00:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2dc04:	e0bffb17 	ldw	r2,-20(fp)
   2dc08:	10800d17 	ldw	r2,52(r2)
   2dc0c:	10800044 	addi	r2,r2,1
   2dc10:	10c1ffcc 	andi	r3,r2,2047
   2dc14:	e0bffb17 	ldw	r2,-20(fp)
   2dc18:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2dc1c:	e0bffa17 	ldw	r2,-24(fp)
   2dc20:	10bfffc4 	addi	r2,r2,-1
   2dc24:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2dc28:	e0bffa17 	ldw	r2,-24(fp)
   2dc2c:	10000526 	beq	r2,zero,2dc44 <altera_avalon_jtag_uart_irq+0x1a8>
   2dc30:	e0bffb17 	ldw	r2,-20(fp)
   2dc34:	10c00d17 	ldw	r3,52(r2)
   2dc38:	e0bffb17 	ldw	r2,-20(fp)
   2dc3c:	10800c17 	ldw	r2,48(r2)
   2dc40:	18bfe51e 	bne	r3,r2,2dbd8 <__alt_data_end+0xfffee7d8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2dc44:	e0bffa17 	ldw	r2,-24(fp)
   2dc48:	10001026 	beq	r2,zero,2dc8c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2dc4c:	e0bffb17 	ldw	r2,-20(fp)
   2dc50:	10c00817 	ldw	r3,32(r2)
   2dc54:	00bfff44 	movi	r2,-3
   2dc58:	1886703a 	and	r3,r3,r2
   2dc5c:	e0bffb17 	ldw	r2,-20(fp)
   2dc60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2dc64:	e0bffb17 	ldw	r2,-20(fp)
   2dc68:	10800017 	ldw	r2,0(r2)
   2dc6c:	10800104 	addi	r2,r2,4
   2dc70:	1007883a 	mov	r3,r2
   2dc74:	e0bffb17 	ldw	r2,-20(fp)
   2dc78:	10800817 	ldw	r2,32(r2)
   2dc7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2dc80:	e0bffc17 	ldw	r2,-16(fp)
   2dc84:	10800104 	addi	r2,r2,4
   2dc88:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2dc8c:	003f8c06 	br	2dac0 <__alt_data_end+0xfffee6c0>
}
   2dc90:	e037883a 	mov	sp,fp
   2dc94:	df000017 	ldw	fp,0(sp)
   2dc98:	dec00104 	addi	sp,sp,4
   2dc9c:	f800283a 	ret

0002dca0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2dca0:	defff804 	addi	sp,sp,-32
   2dca4:	df000715 	stw	fp,28(sp)
   2dca8:	df000704 	addi	fp,sp,28
   2dcac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2dcb0:	e0bffb17 	ldw	r2,-20(fp)
   2dcb4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2dcb8:	e0bff917 	ldw	r2,-28(fp)
   2dcbc:	10800017 	ldw	r2,0(r2)
   2dcc0:	10800104 	addi	r2,r2,4
   2dcc4:	10800037 	ldwio	r2,0(r2)
   2dcc8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2dccc:	e0bffa17 	ldw	r2,-24(fp)
   2dcd0:	1081000c 	andi	r2,r2,1024
   2dcd4:	10000b26 	beq	r2,zero,2dd04 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2dcd8:	e0bff917 	ldw	r2,-28(fp)
   2dcdc:	10800017 	ldw	r2,0(r2)
   2dce0:	10800104 	addi	r2,r2,4
   2dce4:	1007883a 	mov	r3,r2
   2dce8:	e0bff917 	ldw	r2,-28(fp)
   2dcec:	10800817 	ldw	r2,32(r2)
   2dcf0:	10810014 	ori	r2,r2,1024
   2dcf4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2dcf8:	e0bff917 	ldw	r2,-28(fp)
   2dcfc:	10000915 	stw	zero,36(r2)
   2dd00:	00000a06 	br	2dd2c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2dd04:	e0bff917 	ldw	r2,-28(fp)
   2dd08:	10c00917 	ldw	r3,36(r2)
   2dd0c:	00a00034 	movhi	r2,32768
   2dd10:	10bfff04 	addi	r2,r2,-4
   2dd14:	10c00536 	bltu	r2,r3,2dd2c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   2dd18:	e0bff917 	ldw	r2,-28(fp)
   2dd1c:	10800917 	ldw	r2,36(r2)
   2dd20:	10c00044 	addi	r3,r2,1
   2dd24:	e0bff917 	ldw	r2,-28(fp)
   2dd28:	10c00915 	stw	r3,36(r2)
   2dd2c:	008000f4 	movhi	r2,3
   2dd30:	108de904 	addi	r2,r2,14244
   2dd34:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2dd38:	e037883a 	mov	sp,fp
   2dd3c:	df000017 	ldw	fp,0(sp)
   2dd40:	dec00104 	addi	sp,sp,4
   2dd44:	f800283a 	ret

0002dd48 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2dd48:	defffd04 	addi	sp,sp,-12
   2dd4c:	df000215 	stw	fp,8(sp)
   2dd50:	df000204 	addi	fp,sp,8
   2dd54:	e13ffe15 	stw	r4,-8(fp)
   2dd58:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2dd5c:	00000506 	br	2dd74 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2dd60:	e0bfff17 	ldw	r2,-4(fp)
   2dd64:	1090000c 	andi	r2,r2,16384
   2dd68:	10000226 	beq	r2,zero,2dd74 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2dd6c:	00bffd44 	movi	r2,-11
   2dd70:	00000b06 	br	2dda0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2dd74:	e0bffe17 	ldw	r2,-8(fp)
   2dd78:	10c00d17 	ldw	r3,52(r2)
   2dd7c:	e0bffe17 	ldw	r2,-8(fp)
   2dd80:	10800c17 	ldw	r2,48(r2)
   2dd84:	18800526 	beq	r3,r2,2dd9c <altera_avalon_jtag_uart_close+0x54>
   2dd88:	e0bffe17 	ldw	r2,-8(fp)
   2dd8c:	10c00917 	ldw	r3,36(r2)
   2dd90:	e0bffe17 	ldw	r2,-8(fp)
   2dd94:	10800117 	ldw	r2,4(r2)
   2dd98:	18bff136 	bltu	r3,r2,2dd60 <__alt_data_end+0xfffee960>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2dd9c:	0005883a 	mov	r2,zero
}
   2dda0:	e037883a 	mov	sp,fp
   2dda4:	df000017 	ldw	fp,0(sp)
   2dda8:	dec00104 	addi	sp,sp,4
   2ddac:	f800283a 	ret

0002ddb0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2ddb0:	defffa04 	addi	sp,sp,-24
   2ddb4:	df000515 	stw	fp,20(sp)
   2ddb8:	df000504 	addi	fp,sp,20
   2ddbc:	e13ffd15 	stw	r4,-12(fp)
   2ddc0:	e17ffe15 	stw	r5,-8(fp)
   2ddc4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2ddc8:	00bff9c4 	movi	r2,-25
   2ddcc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2ddd0:	e0bffe17 	ldw	r2,-8(fp)
   2ddd4:	10da8060 	cmpeqi	r3,r2,27137
   2ddd8:	1800031e 	bne	r3,zero,2dde8 <altera_avalon_jtag_uart_ioctl+0x38>
   2dddc:	109a80a0 	cmpeqi	r2,r2,27138
   2dde0:	1000191e 	bne	r2,zero,2de48 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   2dde4:	00002806 	br	2de88 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2dde8:	e0bffd17 	ldw	r2,-12(fp)
   2ddec:	10c00117 	ldw	r3,4(r2)
   2ddf0:	00a00034 	movhi	r2,32768
   2ddf4:	10bfffc4 	addi	r2,r2,-1
   2ddf8:	18801226 	beq	r3,r2,2de44 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   2ddfc:	e0bfff17 	ldw	r2,-4(fp)
   2de00:	10800017 	ldw	r2,0(r2)
   2de04:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2de08:	e0bffc17 	ldw	r2,-16(fp)
   2de0c:	10800090 	cmplti	r2,r2,2
   2de10:	1000061e 	bne	r2,zero,2de2c <altera_avalon_jtag_uart_ioctl+0x7c>
   2de14:	e0fffc17 	ldw	r3,-16(fp)
   2de18:	00a00034 	movhi	r2,32768
   2de1c:	10bfffc4 	addi	r2,r2,-1
   2de20:	18800226 	beq	r3,r2,2de2c <altera_avalon_jtag_uart_ioctl+0x7c>
   2de24:	e0bffc17 	ldw	r2,-16(fp)
   2de28:	00000206 	br	2de34 <altera_avalon_jtag_uart_ioctl+0x84>
   2de2c:	00a00034 	movhi	r2,32768
   2de30:	10bfff84 	addi	r2,r2,-2
   2de34:	e0fffd17 	ldw	r3,-12(fp)
   2de38:	18800115 	stw	r2,4(r3)
      rc = 0;
   2de3c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2de40:	00001106 	br	2de88 <altera_avalon_jtag_uart_ioctl+0xd8>
   2de44:	00001006 	br	2de88 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2de48:	e0bffd17 	ldw	r2,-12(fp)
   2de4c:	10c00117 	ldw	r3,4(r2)
   2de50:	00a00034 	movhi	r2,32768
   2de54:	10bfffc4 	addi	r2,r2,-1
   2de58:	18800a26 	beq	r3,r2,2de84 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2de5c:	e0bffd17 	ldw	r2,-12(fp)
   2de60:	10c00917 	ldw	r3,36(r2)
   2de64:	e0bffd17 	ldw	r2,-12(fp)
   2de68:	10800117 	ldw	r2,4(r2)
   2de6c:	1885803a 	cmpltu	r2,r3,r2
   2de70:	10c03fcc 	andi	r3,r2,255
   2de74:	e0bfff17 	ldw	r2,-4(fp)
   2de78:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2de7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2de80:	00000006 	br	2de84 <altera_avalon_jtag_uart_ioctl+0xd4>
   2de84:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2de88:	e0bffb17 	ldw	r2,-20(fp)
}
   2de8c:	e037883a 	mov	sp,fp
   2de90:	df000017 	ldw	fp,0(sp)
   2de94:	dec00104 	addi	sp,sp,4
   2de98:	f800283a 	ret

0002de9c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2de9c:	defff304 	addi	sp,sp,-52
   2dea0:	dfc00c15 	stw	ra,48(sp)
   2dea4:	df000b15 	stw	fp,44(sp)
   2dea8:	df000b04 	addi	fp,sp,44
   2deac:	e13ffc15 	stw	r4,-16(fp)
   2deb0:	e17ffd15 	stw	r5,-12(fp)
   2deb4:	e1bffe15 	stw	r6,-8(fp)
   2deb8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2debc:	e0bffd17 	ldw	r2,-12(fp)
   2dec0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2dec4:	00004906 	br	2dfec <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2dec8:	e0bffc17 	ldw	r2,-16(fp)
   2decc:	10800a17 	ldw	r2,40(r2)
   2ded0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2ded4:	e0bffc17 	ldw	r2,-16(fp)
   2ded8:	10800b17 	ldw	r2,44(r2)
   2dedc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2dee0:	e0fff717 	ldw	r3,-36(fp)
   2dee4:	e0bff817 	ldw	r2,-32(fp)
   2dee8:	18800536 	bltu	r3,r2,2df00 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2deec:	e0fff717 	ldw	r3,-36(fp)
   2def0:	e0bff817 	ldw	r2,-32(fp)
   2def4:	1885c83a 	sub	r2,r3,r2
   2def8:	e0bff615 	stw	r2,-40(fp)
   2defc:	00000406 	br	2df10 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2df00:	00c20004 	movi	r3,2048
   2df04:	e0bff817 	ldw	r2,-32(fp)
   2df08:	1885c83a 	sub	r2,r3,r2
   2df0c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2df10:	e0bff617 	ldw	r2,-40(fp)
   2df14:	1000011e 	bne	r2,zero,2df1c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   2df18:	00001d06 	br	2df90 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   2df1c:	e0fffe17 	ldw	r3,-8(fp)
   2df20:	e0bff617 	ldw	r2,-40(fp)
   2df24:	1880022e 	bgeu	r3,r2,2df30 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   2df28:	e0bffe17 	ldw	r2,-8(fp)
   2df2c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2df30:	e0bff817 	ldw	r2,-32(fp)
   2df34:	10800e04 	addi	r2,r2,56
   2df38:	e0fffc17 	ldw	r3,-16(fp)
   2df3c:	1885883a 	add	r2,r3,r2
   2df40:	e13ff517 	ldw	r4,-44(fp)
   2df44:	100b883a 	mov	r5,r2
   2df48:	e1bff617 	ldw	r6,-40(fp)
   2df4c:	0027cb00 	call	27cb0 <memcpy>
      ptr   += n;
   2df50:	e0fff517 	ldw	r3,-44(fp)
   2df54:	e0bff617 	ldw	r2,-40(fp)
   2df58:	1885883a 	add	r2,r3,r2
   2df5c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2df60:	e0fffe17 	ldw	r3,-8(fp)
   2df64:	e0bff617 	ldw	r2,-40(fp)
   2df68:	1885c83a 	sub	r2,r3,r2
   2df6c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2df70:	e0fff817 	ldw	r3,-32(fp)
   2df74:	e0bff617 	ldw	r2,-40(fp)
   2df78:	1885883a 	add	r2,r3,r2
   2df7c:	10c1ffcc 	andi	r3,r2,2047
   2df80:	e0bffc17 	ldw	r2,-16(fp)
   2df84:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2df88:	e0bffe17 	ldw	r2,-8(fp)
   2df8c:	00bfce16 	blt	zero,r2,2dec8 <__alt_data_end+0xfffeeac8>

    /* If we read any data then return it */
    if (ptr != buffer)
   2df90:	e0fff517 	ldw	r3,-44(fp)
   2df94:	e0bffd17 	ldw	r2,-12(fp)
   2df98:	18800126 	beq	r3,r2,2dfa0 <altera_avalon_jtag_uart_read+0x104>
      break;
   2df9c:	00001506 	br	2dff4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2dfa0:	e0bfff17 	ldw	r2,-4(fp)
   2dfa4:	1090000c 	andi	r2,r2,16384
   2dfa8:	10000126 	beq	r2,zero,2dfb0 <altera_avalon_jtag_uart_read+0x114>
      break;
   2dfac:	00001106 	br	2dff4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2dfb0:	0001883a 	nop
   2dfb4:	e0bffc17 	ldw	r2,-16(fp)
   2dfb8:	10c00a17 	ldw	r3,40(r2)
   2dfbc:	e0bff717 	ldw	r2,-36(fp)
   2dfc0:	1880051e 	bne	r3,r2,2dfd8 <altera_avalon_jtag_uart_read+0x13c>
   2dfc4:	e0bffc17 	ldw	r2,-16(fp)
   2dfc8:	10c00917 	ldw	r3,36(r2)
   2dfcc:	e0bffc17 	ldw	r2,-16(fp)
   2dfd0:	10800117 	ldw	r2,4(r2)
   2dfd4:	18bff736 	bltu	r3,r2,2dfb4 <__alt_data_end+0xfffeebb4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2dfd8:	e0bffc17 	ldw	r2,-16(fp)
   2dfdc:	10c00a17 	ldw	r3,40(r2)
   2dfe0:	e0bff717 	ldw	r2,-36(fp)
   2dfe4:	1880011e 	bne	r3,r2,2dfec <altera_avalon_jtag_uart_read+0x150>
      break;
   2dfe8:	00000206 	br	2dff4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2dfec:	e0bffe17 	ldw	r2,-8(fp)
   2dff0:	00bfb516 	blt	zero,r2,2dec8 <__alt_data_end+0xfffeeac8>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2dff4:	e0fff517 	ldw	r3,-44(fp)
   2dff8:	e0bffd17 	ldw	r2,-12(fp)
   2dffc:	18801826 	beq	r3,r2,2e060 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e000:	0005303a 	rdctl	r2,status
   2e004:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e008:	e0fffa17 	ldw	r3,-24(fp)
   2e00c:	00bfff84 	movi	r2,-2
   2e010:	1884703a 	and	r2,r3,r2
   2e014:	1001703a 	wrctl	status,r2
  
  return context;
   2e018:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2e01c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e020:	e0bffc17 	ldw	r2,-16(fp)
   2e024:	10800817 	ldw	r2,32(r2)
   2e028:	10c00054 	ori	r3,r2,1
   2e02c:	e0bffc17 	ldw	r2,-16(fp)
   2e030:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2e034:	e0bffc17 	ldw	r2,-16(fp)
   2e038:	10800017 	ldw	r2,0(r2)
   2e03c:	10800104 	addi	r2,r2,4
   2e040:	1007883a 	mov	r3,r2
   2e044:	e0bffc17 	ldw	r2,-16(fp)
   2e048:	10800817 	ldw	r2,32(r2)
   2e04c:	18800035 	stwio	r2,0(r3)
   2e050:	e0bff917 	ldw	r2,-28(fp)
   2e054:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e058:	e0bffb17 	ldw	r2,-20(fp)
   2e05c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2e060:	e0fff517 	ldw	r3,-44(fp)
   2e064:	e0bffd17 	ldw	r2,-12(fp)
   2e068:	18800426 	beq	r3,r2,2e07c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   2e06c:	e0fff517 	ldw	r3,-44(fp)
   2e070:	e0bffd17 	ldw	r2,-12(fp)
   2e074:	1885c83a 	sub	r2,r3,r2
   2e078:	00000606 	br	2e094 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   2e07c:	e0bfff17 	ldw	r2,-4(fp)
   2e080:	1090000c 	andi	r2,r2,16384
   2e084:	10000226 	beq	r2,zero,2e090 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   2e088:	00bffd44 	movi	r2,-11
   2e08c:	00000106 	br	2e094 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   2e090:	00bffec4 	movi	r2,-5
}
   2e094:	e037883a 	mov	sp,fp
   2e098:	dfc00117 	ldw	ra,4(sp)
   2e09c:	df000017 	ldw	fp,0(sp)
   2e0a0:	dec00204 	addi	sp,sp,8
   2e0a4:	f800283a 	ret

0002e0a8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2e0a8:	defff304 	addi	sp,sp,-52
   2e0ac:	dfc00c15 	stw	ra,48(sp)
   2e0b0:	df000b15 	stw	fp,44(sp)
   2e0b4:	df000b04 	addi	fp,sp,44
   2e0b8:	e13ffc15 	stw	r4,-16(fp)
   2e0bc:	e17ffd15 	stw	r5,-12(fp)
   2e0c0:	e1bffe15 	stw	r6,-8(fp)
   2e0c4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2e0c8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2e0cc:	e0bffd17 	ldw	r2,-12(fp)
   2e0d0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2e0d4:	00003806 	br	2e1b8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2e0d8:	e0bffc17 	ldw	r2,-16(fp)
   2e0dc:	10800c17 	ldw	r2,48(r2)
   2e0e0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   2e0e4:	e0bffc17 	ldw	r2,-16(fp)
   2e0e8:	10800d17 	ldw	r2,52(r2)
   2e0ec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2e0f0:	e0fff817 	ldw	r3,-32(fp)
   2e0f4:	e0bff517 	ldw	r2,-44(fp)
   2e0f8:	1880062e 	bgeu	r3,r2,2e114 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2e0fc:	e0fff517 	ldw	r3,-44(fp)
   2e100:	e0bff817 	ldw	r2,-32(fp)
   2e104:	1885c83a 	sub	r2,r3,r2
   2e108:	10bfffc4 	addi	r2,r2,-1
   2e10c:	e0bff615 	stw	r2,-40(fp)
   2e110:	00000b06 	br	2e140 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2e114:	e0bff517 	ldw	r2,-44(fp)
   2e118:	10000526 	beq	r2,zero,2e130 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2e11c:	00c20004 	movi	r3,2048
   2e120:	e0bff817 	ldw	r2,-32(fp)
   2e124:	1885c83a 	sub	r2,r3,r2
   2e128:	e0bff615 	stw	r2,-40(fp)
   2e12c:	00000406 	br	2e140 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2e130:	00c1ffc4 	movi	r3,2047
   2e134:	e0bff817 	ldw	r2,-32(fp)
   2e138:	1885c83a 	sub	r2,r3,r2
   2e13c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2e140:	e0bff617 	ldw	r2,-40(fp)
   2e144:	1000011e 	bne	r2,zero,2e14c <altera_avalon_jtag_uart_write+0xa4>
        break;
   2e148:	00001d06 	br	2e1c0 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   2e14c:	e0fffe17 	ldw	r3,-8(fp)
   2e150:	e0bff617 	ldw	r2,-40(fp)
   2e154:	1880022e 	bgeu	r3,r2,2e160 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   2e158:	e0bffe17 	ldw	r2,-8(fp)
   2e15c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2e160:	e0bff817 	ldw	r2,-32(fp)
   2e164:	10820e04 	addi	r2,r2,2104
   2e168:	e0fffc17 	ldw	r3,-16(fp)
   2e16c:	1885883a 	add	r2,r3,r2
   2e170:	1009883a 	mov	r4,r2
   2e174:	e17ffd17 	ldw	r5,-12(fp)
   2e178:	e1bff617 	ldw	r6,-40(fp)
   2e17c:	0027cb00 	call	27cb0 <memcpy>
      ptr   += n;
   2e180:	e0fffd17 	ldw	r3,-12(fp)
   2e184:	e0bff617 	ldw	r2,-40(fp)
   2e188:	1885883a 	add	r2,r3,r2
   2e18c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2e190:	e0fffe17 	ldw	r3,-8(fp)
   2e194:	e0bff617 	ldw	r2,-40(fp)
   2e198:	1885c83a 	sub	r2,r3,r2
   2e19c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e1a0:	e0fff817 	ldw	r3,-32(fp)
   2e1a4:	e0bff617 	ldw	r2,-40(fp)
   2e1a8:	1885883a 	add	r2,r3,r2
   2e1ac:	10c1ffcc 	andi	r3,r2,2047
   2e1b0:	e0bffc17 	ldw	r2,-16(fp)
   2e1b4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2e1b8:	e0bffe17 	ldw	r2,-8(fp)
   2e1bc:	00bfc616 	blt	zero,r2,2e0d8 <__alt_data_end+0xfffeecd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e1c0:	0005303a 	rdctl	r2,status
   2e1c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e1c8:	e0fffa17 	ldw	r3,-24(fp)
   2e1cc:	00bfff84 	movi	r2,-2
   2e1d0:	1884703a 	and	r2,r3,r2
   2e1d4:	1001703a 	wrctl	status,r2
  
  return context;
   2e1d8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2e1dc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2e1e0:	e0bffc17 	ldw	r2,-16(fp)
   2e1e4:	10800817 	ldw	r2,32(r2)
   2e1e8:	10c00094 	ori	r3,r2,2
   2e1ec:	e0bffc17 	ldw	r2,-16(fp)
   2e1f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2e1f4:	e0bffc17 	ldw	r2,-16(fp)
   2e1f8:	10800017 	ldw	r2,0(r2)
   2e1fc:	10800104 	addi	r2,r2,4
   2e200:	1007883a 	mov	r3,r2
   2e204:	e0bffc17 	ldw	r2,-16(fp)
   2e208:	10800817 	ldw	r2,32(r2)
   2e20c:	18800035 	stwio	r2,0(r3)
   2e210:	e0bff917 	ldw	r2,-28(fp)
   2e214:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e218:	e0bffb17 	ldw	r2,-20(fp)
   2e21c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2e220:	e0bffe17 	ldw	r2,-8(fp)
   2e224:	0080120e 	bge	zero,r2,2e270 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   2e228:	e0bfff17 	ldw	r2,-4(fp)
   2e22c:	1090000c 	andi	r2,r2,16384
   2e230:	10000126 	beq	r2,zero,2e238 <altera_avalon_jtag_uart_write+0x190>
        break;
   2e234:	00001006 	br	2e278 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2e238:	0001883a 	nop
   2e23c:	e0bffc17 	ldw	r2,-16(fp)
   2e240:	10c00d17 	ldw	r3,52(r2)
   2e244:	e0bff517 	ldw	r2,-44(fp)
   2e248:	1880051e 	bne	r3,r2,2e260 <altera_avalon_jtag_uart_write+0x1b8>
   2e24c:	e0bffc17 	ldw	r2,-16(fp)
   2e250:	10c00917 	ldw	r3,36(r2)
   2e254:	e0bffc17 	ldw	r2,-16(fp)
   2e258:	10800117 	ldw	r2,4(r2)
   2e25c:	18bff736 	bltu	r3,r2,2e23c <__alt_data_end+0xfffeee3c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2e260:	e0bffc17 	ldw	r2,-16(fp)
   2e264:	10800917 	ldw	r2,36(r2)
   2e268:	10000126 	beq	r2,zero,2e270 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   2e26c:	00000206 	br	2e278 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   2e270:	e0bffe17 	ldw	r2,-8(fp)
   2e274:	00bf9716 	blt	zero,r2,2e0d4 <__alt_data_end+0xfffeecd4>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2e278:	e0fffd17 	ldw	r3,-12(fp)
   2e27c:	e0bff717 	ldw	r2,-36(fp)
   2e280:	18800426 	beq	r3,r2,2e294 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   2e284:	e0fffd17 	ldw	r3,-12(fp)
   2e288:	e0bff717 	ldw	r2,-36(fp)
   2e28c:	1885c83a 	sub	r2,r3,r2
   2e290:	00000606 	br	2e2ac <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   2e294:	e0bfff17 	ldw	r2,-4(fp)
   2e298:	1090000c 	andi	r2,r2,16384
   2e29c:	10000226 	beq	r2,zero,2e2a8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   2e2a0:	00bffd44 	movi	r2,-11
   2e2a4:	00000106 	br	2e2ac <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2e2a8:	00bffec4 	movi	r2,-5
}
   2e2ac:	e037883a 	mov	sp,fp
   2e2b0:	dfc00117 	ldw	ra,4(sp)
   2e2b4:	df000017 	ldw	fp,0(sp)
   2e2b8:	dec00204 	addi	sp,sp,8
   2e2bc:	f800283a 	ret

0002e2c0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2e2c0:	defffa04 	addi	sp,sp,-24
   2e2c4:	dfc00515 	stw	ra,20(sp)
   2e2c8:	df000415 	stw	fp,16(sp)
   2e2cc:	df000404 	addi	fp,sp,16
   2e2d0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2e2d4:	0007883a 	mov	r3,zero
   2e2d8:	e0bfff17 	ldw	r2,-4(fp)
   2e2dc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2e2e0:	e0bfff17 	ldw	r2,-4(fp)
   2e2e4:	10800104 	addi	r2,r2,4
   2e2e8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e2ec:	0005303a 	rdctl	r2,status
   2e2f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e2f4:	e0fffd17 	ldw	r3,-12(fp)
   2e2f8:	00bfff84 	movi	r2,-2
   2e2fc:	1884703a 	and	r2,r3,r2
   2e300:	1001703a 	wrctl	status,r2
  
  return context;
   2e304:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2e308:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2e30c:	002f5580 	call	2f558 <alt_tick>
   2e310:	e0bffc17 	ldw	r2,-16(fp)
   2e314:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e318:	e0bffe17 	ldw	r2,-8(fp)
   2e31c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2e320:	e037883a 	mov	sp,fp
   2e324:	dfc00117 	ldw	ra,4(sp)
   2e328:	df000017 	ldw	fp,0(sp)
   2e32c:	dec00204 	addi	sp,sp,8
   2e330:	f800283a 	ret

0002e334 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2e334:	defff804 	addi	sp,sp,-32
   2e338:	dfc00715 	stw	ra,28(sp)
   2e33c:	df000615 	stw	fp,24(sp)
   2e340:	df000604 	addi	fp,sp,24
   2e344:	e13ffc15 	stw	r4,-16(fp)
   2e348:	e17ffd15 	stw	r5,-12(fp)
   2e34c:	e1bffe15 	stw	r6,-8(fp)
   2e350:	e1ffff15 	stw	r7,-4(fp)
   2e354:	e0bfff17 	ldw	r2,-4(fp)
   2e358:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2e35c:	008000f4 	movhi	r2,3
   2e360:	108de904 	addi	r2,r2,14244
   2e364:	10800017 	ldw	r2,0(r2)
   2e368:	1000041e 	bne	r2,zero,2e37c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   2e36c:	008000f4 	movhi	r2,3
   2e370:	108de904 	addi	r2,r2,14244
   2e374:	e0fffb17 	ldw	r3,-20(fp)
   2e378:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2e37c:	e0bffc17 	ldw	r2,-16(fp)
   2e380:	10800104 	addi	r2,r2,4
   2e384:	00c001c4 	movi	r3,7
   2e388:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2e38c:	d8000015 	stw	zero,0(sp)
   2e390:	e13ffd17 	ldw	r4,-12(fp)
   2e394:	e17ffe17 	ldw	r5,-8(fp)
   2e398:	018000f4 	movhi	r6,3
   2e39c:	31b8b004 	addi	r6,r6,-7488
   2e3a0:	e1fffc17 	ldw	r7,-16(fp)
   2e3a4:	002ee440 	call	2ee44 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2e3a8:	e037883a 	mov	sp,fp
   2e3ac:	dfc00117 	ldw	ra,4(sp)
   2e3b0:	df000017 	ldw	fp,0(sp)
   2e3b4:	dec00204 	addi	sp,sp,8
   2e3b8:	f800283a 	ret

0002e3bc <alt_adc_irq>:
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
   2e3bc:	defff904 	addi	sp,sp,-28
   2e3c0:	dfc00615 	stw	ra,24(sp)
   2e3c4:	df000515 	stw	fp,20(sp)
   2e3c8:	df000504 	addi	fp,sp,20
   2e3cc:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
   2e3d0:	e0bfff17 	ldw	r2,-4(fp)
   2e3d4:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr = 0;
   2e3d8:	e03ffc15 	stw	zero,-16(fp)

	if(NULL != dev)
   2e3dc:	e0bffb17 	ldw	r2,-20(fp)
   2e3e0:	10001926 	beq	r2,zero,2e448 <alt_adc_irq+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e3e4:	0005303a 	rdctl	r2,status
   2e3e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e3ec:	e0fffd17 	ldw	r3,-12(fp)
   2e3f0:	00bfff84 	movi	r2,-2
   2e3f4:	1884703a 	and	r2,r3,r2
   2e3f8:	1001703a 	wrctl	status,r2
  
  return context;
   2e3fc:	e0bffd17 	ldw	r2,-12(fp)
	{
	    cpu_sr = alt_irq_disable_all();
   2e400:	e0bffc15 	stw	r2,-16(fp)
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
   2e404:	e0bffb17 	ldw	r2,-20(fp)
   2e408:	10800a17 	ldw	r2,40(r2)
   2e40c:	10000626 	beq	r2,zero,2e428 <alt_adc_irq+0x6c>
		{
			dev->callback (dev->callback_context);
   2e410:	e0bffb17 	ldw	r2,-20(fp)
   2e414:	10800a17 	ldw	r2,40(r2)
   2e418:	e0fffb17 	ldw	r3,-20(fp)
   2e41c:	18c00b17 	ldw	r3,44(r3)
   2e420:	1809883a 	mov	r4,r3
   2e424:	103ee83a 	callr	r2
		}
    
		/* clear the IRQ status */
		adc_clear_interrupt_status(dev->sample_store_base);
   2e428:	e0bffb17 	ldw	r2,-20(fp)
   2e42c:	10800c17 	ldw	r2,48(r2)
   2e430:	1009883a 	mov	r4,r2
   2e434:	002e8440 	call	2e844 <adc_clear_interrupt_status>
   2e438:	e0bffc17 	ldw	r2,-16(fp)
   2e43c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e440:	e0bffe17 	ldw	r2,-8(fp)
   2e444:	1001703a 	wrctl	status,r2
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
   2e448:	0001883a 	nop
}
   2e44c:	e037883a 	mov	sp,fp
   2e450:	dfc00117 	ldw	ra,4(sp)
   2e454:	df000017 	ldw	fp,0(sp)
   2e458:	dec00204 	addi	sp,sp,8
   2e45c:	f800283a 	ret

0002e460 <alt_adc_word_read>:
 * Returns:
 * 0 -> success
 * -EINVAL -> Invalid arguments
**/
int alt_adc_word_read (alt_u32 sample_store_base, alt_u32* dest_ptr, alt_u32 len)
{
   2e460:	defff804 	addi	sp,sp,-32
   2e464:	df000715 	stw	fp,28(sp)
   2e468:	df000704 	addi	fp,sp,28
   2e46c:	e13ffd15 	stw	r4,-12(fp)
   2e470:	e17ffe15 	stw	r5,-8(fp)
   2e474:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 word = 0;
   2e478:	e03ff915 	stw	zero,-28(fp)
    alt_u32 word_length = len;
   2e47c:	e0bfff17 	ldw	r2,-4(fp)
   2e480:	e0bffb15 	stw	r2,-20(fp)
    alt_u32* dest_buf = dest_ptr;
   2e484:	e0bffe17 	ldw	r2,-8(fp)
   2e488:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 base = sample_store_base;
   2e48c:	e0bffd17 	ldw	r2,-12(fp)
   2e490:	e0bffc15 	stw	r2,-16(fp)
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
   2e494:	e0bffa17 	ldw	r2,-24(fp)
   2e498:	1000021e 	bne	r2,zero,2e4a4 <alt_adc_word_read+0x44>
    {
    	return -EINVAL;
   2e49c:	00bffa84 	movi	r2,-22
   2e4a0:	00001606 	br	2e4fc <alt_adc_word_read+0x9c>
    }

    for(word = 0; word < word_length; word++)
   2e4a4:	e03ff915 	stw	zero,-28(fp)
   2e4a8:	00001006 	br	2e4ec <alt_adc_word_read+0x8c>
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
   2e4ac:	e0bff917 	ldw	r2,-28(fp)
   2e4b0:	1085883a 	add	r2,r2,r2
   2e4b4:	1085883a 	add	r2,r2,r2
   2e4b8:	1007883a 	mov	r3,r2
   2e4bc:	e0bffc17 	ldw	r2,-16(fp)
   2e4c0:	1885883a 	add	r2,r3,r2
   2e4c4:	10800037 	ldwio	r2,0(r2)
   2e4c8:	1007883a 	mov	r3,r2
   2e4cc:	e0bffa17 	ldw	r2,-24(fp)
   2e4d0:	10c00015 	stw	r3,0(r2)

       dest_buf++;
   2e4d4:	e0bffa17 	ldw	r2,-24(fp)
   2e4d8:	10800104 	addi	r2,r2,4
   2e4dc:	e0bffa15 	stw	r2,-24(fp)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
   2e4e0:	e0bff917 	ldw	r2,-28(fp)
   2e4e4:	10800044 	addi	r2,r2,1
   2e4e8:	e0bff915 	stw	r2,-28(fp)
   2e4ec:	e0fff917 	ldw	r3,-28(fp)
   2e4f0:	e0bffb17 	ldw	r2,-20(fp)
   2e4f4:	18bfed36 	bltu	r3,r2,2e4ac <__alt_data_end+0xfffef0ac>
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
    }

    return 0;
   2e4f8:	0005883a 	mov	r2,zero

}
   2e4fc:	e037883a 	mov	sp,fp
   2e500:	df000017 	ldw	fp,0(sp)
   2e504:	dec00104 	addi	sp,sp,4
   2e508:	f800283a 	ret

0002e50c <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
   2e50c:	defffa04 	addi	sp,sp,-24
   2e510:	dfc00515 	stw	ra,20(sp)
   2e514:	df000415 	stw	fp,16(sp)
   2e518:	df000404 	addi	fp,sp,16
   2e51c:	e13ffd15 	stw	r4,-12(fp)
   2e520:	e17ffe15 	stw	r5,-8(fp)
   2e524:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
   2e528:	e13ffd17 	ldw	r4,-12(fp)
   2e52c:	d1600d04 	addi	r5,gp,-32716
   2e530:	002ec280 	call	2ec28 <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
   2e534:	e0bffe17 	ldw	r2,-8(fp)
   2e538:	10000b16 	blt	r2,zero,2e568 <altera_modular_adc_init+0x5c>
   2e53c:	e0bfff17 	ldw	r2,-4(fp)
   2e540:	10000916 	blt	r2,zero,2e568 <altera_modular_adc_init+0x5c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
   2e544:	e0fffe17 	ldw	r3,-8(fp)
   2e548:	e0bfff17 	ldw	r2,-4(fp)
   2e54c:	d8000015 	stw	zero,0(sp)
   2e550:	1809883a 	mov	r4,r3
   2e554:	100b883a 	mov	r5,r2
   2e558:	018000f4 	movhi	r6,3
   2e55c:	31b8ef04 	addi	r6,r6,-7236
   2e560:	e1fffd17 	ldw	r7,-12(fp)
   2e564:	002ee440 	call	2ee44 <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
   2e568:	e037883a 	mov	sp,fp
   2e56c:	dfc00117 	ldw	ra,4(sp)
   2e570:	df000017 	ldw	fp,0(sp)
   2e574:	dec00204 	addi	sp,sp,8
   2e578:	f800283a 	ret

0002e57c <alt_adc_register_callback>:
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
   2e57c:	defffa04 	addi	sp,sp,-24
   2e580:	dfc00515 	stw	ra,20(sp)
   2e584:	df000415 	stw	fp,16(sp)
   2e588:	df000404 	addi	fp,sp,16
   2e58c:	e13ffc15 	stw	r4,-16(fp)
   2e590:	e17ffd15 	stw	r5,-12(fp)
   2e594:	e1bffe15 	stw	r6,-8(fp)
   2e598:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   2e59c:	e0bffc17 	ldw	r2,-16(fp)
   2e5a0:	e0fffd17 	ldw	r3,-12(fp)
   2e5a4:	10c00a15 	stw	r3,40(r2)
    dev->callback_context = context;
   2e5a8:	e0bffc17 	ldw	r2,-16(fp)
   2e5ac:	e0fffe17 	ldw	r3,-8(fp)
   2e5b0:	10c00b15 	stw	r3,44(r2)
    dev->sample_store_base = sample_store_base;
   2e5b4:	e0bffc17 	ldw	r2,-16(fp)
   2e5b8:	e0ffff17 	ldw	r3,-4(fp)
   2e5bc:	10c00c15 	stw	r3,48(r2)
	
	if(NULL != callback)
   2e5c0:	e0bffd17 	ldw	r2,-12(fp)
   2e5c4:	10000726 	beq	r2,zero,2e5e4 <alt_adc_register_callback+0x68>
	{
                adc_clear_interrupt_status(sample_store_base);
   2e5c8:	e0bfff17 	ldw	r2,-4(fp)
   2e5cc:	1009883a 	mov	r4,r2
   2e5d0:	002e8440 	call	2e844 <adc_clear_interrupt_status>
		adc_interrupt_enable(sample_store_base);
   2e5d4:	e0bfff17 	ldw	r2,-4(fp)
   2e5d8:	1009883a 	mov	r4,r2
   2e5dc:	002e7c00 	call	2e7c0 <adc_interrupt_enable>
   2e5e0:	00000606 	br	2e5fc <alt_adc_register_callback+0x80>
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
   2e5e4:	e0bfff17 	ldw	r2,-4(fp)
   2e5e8:	1009883a 	mov	r4,r2
   2e5ec:	002e8000 	call	2e800 <adc_interrupt_disable>
                adc_clear_interrupt_status(sample_store_base);
   2e5f0:	e0bfff17 	ldw	r2,-4(fp)
   2e5f4:	1009883a 	mov	r4,r2
   2e5f8:	002e8440 	call	2e844 <adc_clear_interrupt_status>
	}
	
    
	
    return ;
   2e5fc:	0001883a 	nop
}
   2e600:	e037883a 	mov	sp,fp
   2e604:	dfc00117 	ldw	ra,4(sp)
   2e608:	df000017 	ldw	fp,0(sp)
   2e60c:	dec00204 	addi	sp,sp,8
   2e610:	f800283a 	ret

0002e614 <altera_modular_adc_open>:

alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
   2e614:	defffc04 	addi	sp,sp,-16
   2e618:	dfc00315 	stw	ra,12(sp)
   2e61c:	df000215 	stw	fp,8(sp)
   2e620:	df000204 	addi	fp,sp,8
   2e624:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = NULL;
   2e628:	e03ffe15 	stw	zero,-8(fp)

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
   2e62c:	e13fff17 	ldw	r4,-4(fp)
   2e630:	d1600d04 	addi	r5,gp,-32716
   2e634:	002ed840 	call	2ed84 <alt_find_dev>
   2e638:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   2e63c:	e0bffe17 	ldw	r2,-8(fp)
}
   2e640:	e037883a 	mov	sp,fp
   2e644:	dfc00117 	ldw	ra,4(sp)
   2e648:	df000017 	ldw	fp,0(sp)
   2e64c:	dec00204 	addi	sp,sp,8
   2e650:	f800283a 	ret

0002e654 <adc_stop>:

void adc_stop(int sequencer_base)
{
   2e654:	defffe04 	addi	sp,sp,-8
   2e658:	df000115 	stw	fp,4(sp)
   2e65c:	df000104 	addi	fp,sp,4
   2e660:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
   2e664:	e0bfff17 	ldw	r2,-4(fp)
   2e668:	e0ffff17 	ldw	r3,-4(fp)
   2e66c:	19000037 	ldwio	r4,0(r3)
   2e670:	00ffff84 	movi	r3,-2
   2e674:	20c6703a 	and	r3,r4,r3
   2e678:	10c00035 	stwio	r3,0(r2)
   2e67c:	0001883a 	nop
   2e680:	e0bfff17 	ldw	r2,-4(fp)
   2e684:	10800037 	ldwio	r2,0(r2)
   2e688:	1080004c 	andi	r2,r2,1
   2e68c:	103ffc1e 	bne	r2,zero,2e680 <__alt_data_end+0xfffef280>
}
   2e690:	e037883a 	mov	sp,fp
   2e694:	df000017 	ldw	fp,0(sp)
   2e698:	dec00104 	addi	sp,sp,4
   2e69c:	f800283a 	ret

0002e6a0 <adc_start>:

void adc_start(int sequencer_base)
{
   2e6a0:	defffe04 	addi	sp,sp,-8
   2e6a4:	df000115 	stw	fp,4(sp)
   2e6a8:	df000104 	addi	fp,sp,4
   2e6ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
   2e6b0:	e0bfff17 	ldw	r2,-4(fp)
   2e6b4:	e0ffff17 	ldw	r3,-4(fp)
   2e6b8:	18c00037 	ldwio	r3,0(r3)
   2e6bc:	18c00054 	ori	r3,r3,1
   2e6c0:	10c00035 	stwio	r3,0(r2)
}
   2e6c4:	e037883a 	mov	sp,fp
   2e6c8:	df000017 	ldw	fp,0(sp)
   2e6cc:	dec00104 	addi	sp,sp,4
   2e6d0:	f800283a 	ret

0002e6d4 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
   2e6d4:	defffe04 	addi	sp,sp,-8
   2e6d8:	df000115 	stw	fp,4(sp)
   2e6dc:	df000104 	addi	fp,sp,4
   2e6e0:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
   2e6e4:	e0bfff17 	ldw	r2,-4(fp)
   2e6e8:	e0ffff17 	ldw	r3,-4(fp)
   2e6ec:	19000037 	ldwio	r4,0(r3)
   2e6f0:	00fffc44 	movi	r3,-15
   2e6f4:	20c6703a 	and	r3,r4,r3
   2e6f8:	18c00094 	ori	r3,r3,2
   2e6fc:	10c00035 	stwio	r3,0(r2)
}
   2e700:	e037883a 	mov	sp,fp
   2e704:	df000017 	ldw	fp,0(sp)
   2e708:	dec00104 	addi	sp,sp,4
   2e70c:	f800283a 	ret

0002e710 <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
   2e710:	defffe04 	addi	sp,sp,-8
   2e714:	df000115 	stw	fp,4(sp)
   2e718:	df000104 	addi	fp,sp,4
   2e71c:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
   2e720:	e0bfff17 	ldw	r2,-4(fp)
   2e724:	e0ffff17 	ldw	r3,-4(fp)
   2e728:	19000037 	ldwio	r4,0(r3)
   2e72c:	00fffc44 	movi	r3,-15
   2e730:	20c6703a 	and	r3,r4,r3
   2e734:	10c00035 	stwio	r3,0(r2)
}
   2e738:	e037883a 	mov	sp,fp
   2e73c:	df000017 	ldw	fp,0(sp)
   2e740:	dec00104 	addi	sp,sp,4
   2e744:	f800283a 	ret

0002e748 <adc_recalibrate>:

void adc_recalibrate(int sequencer_base)
{
   2e748:	defffc04 	addi	sp,sp,-16
   2e74c:	dfc00315 	stw	ra,12(sp)
   2e750:	df000215 	stw	fp,8(sp)
   2e754:	df000204 	addi	fp,sp,8
   2e758:	e13fff15 	stw	r4,-4(fp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
   2e75c:	e0bfff17 	ldw	r2,-4(fp)
   2e760:	10800037 	ldwio	r2,0(r2)
   2e764:	e0bffe15 	stw	r2,-8(fp)
    adc_stop(sequencer_base);
   2e768:	e13fff17 	ldw	r4,-4(fp)
   2e76c:	002e6540 	call	2e654 <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
   2e770:	e0bfff17 	ldw	r2,-4(fp)
   2e774:	e0ffff17 	ldw	r3,-4(fp)
   2e778:	18c00037 	ldwio	r3,0(r3)
   2e77c:	18c00394 	ori	r3,r3,14
   2e780:	10c00035 	stwio	r3,0(r2)
    adc_start(sequencer_base);
   2e784:	e13fff17 	ldw	r4,-4(fp)
   2e788:	002e6a00 	call	2e6a0 <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
   2e78c:	0001883a 	nop
   2e790:	e0bfff17 	ldw	r2,-4(fp)
   2e794:	10800037 	ldwio	r2,0(r2)
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
   2e798:	1080004c 	andi	r2,r2,1
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
   2e79c:	103ffc1e 	bne	r2,zero,2e790 <__alt_data_end+0xfffef390>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
   2e7a0:	e0bfff17 	ldw	r2,-4(fp)
   2e7a4:	e0fffe17 	ldw	r3,-8(fp)
   2e7a8:	10c00035 	stwio	r3,0(r2)
}
   2e7ac:	e037883a 	mov	sp,fp
   2e7b0:	dfc00117 	ldw	ra,4(sp)
   2e7b4:	df000017 	ldw	fp,0(sp)
   2e7b8:	dec00204 	addi	sp,sp,8
   2e7bc:	f800283a 	ret

0002e7c0 <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
   2e7c0:	defffe04 	addi	sp,sp,-8
   2e7c4:	df000115 	stw	fp,4(sp)
   2e7c8:	df000104 	addi	fp,sp,4
   2e7cc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
   2e7d0:	e0bfff17 	ldw	r2,-4(fp)
   2e7d4:	10804004 	addi	r2,r2,256
   2e7d8:	1007883a 	mov	r3,r2
   2e7dc:	e0bfff17 	ldw	r2,-4(fp)
   2e7e0:	10804004 	addi	r2,r2,256
   2e7e4:	10800037 	ldwio	r2,0(r2)
   2e7e8:	10800054 	ori	r2,r2,1
   2e7ec:	18800035 	stwio	r2,0(r3)
}
   2e7f0:	e037883a 	mov	sp,fp
   2e7f4:	df000017 	ldw	fp,0(sp)
   2e7f8:	dec00104 	addi	sp,sp,4
   2e7fc:	f800283a 	ret

0002e800 <adc_interrupt_disable>:

void adc_interrupt_disable(int sample_store_base)
{
   2e800:	defffe04 	addi	sp,sp,-8
   2e804:	df000115 	stw	fp,4(sp)
   2e808:	df000104 	addi	fp,sp,4
   2e80c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
   2e810:	e0bfff17 	ldw	r2,-4(fp)
   2e814:	10804004 	addi	r2,r2,256
   2e818:	1009883a 	mov	r4,r2
   2e81c:	e0bfff17 	ldw	r2,-4(fp)
   2e820:	10804004 	addi	r2,r2,256
   2e824:	10c00037 	ldwio	r3,0(r2)
   2e828:	00bfff84 	movi	r2,-2
   2e82c:	1884703a 	and	r2,r3,r2
   2e830:	20800035 	stwio	r2,0(r4)
}
   2e834:	e037883a 	mov	sp,fp
   2e838:	df000017 	ldw	fp,0(sp)
   2e83c:	dec00104 	addi	sp,sp,4
   2e840:	f800283a 	ret

0002e844 <adc_clear_interrupt_status>:

void adc_clear_interrupt_status(int sample_store_base)
{
   2e844:	defffe04 	addi	sp,sp,-8
   2e848:	df000115 	stw	fp,4(sp)
   2e84c:	df000104 	addi	fp,sp,4
   2e850:	e13fff15 	stw	r4,-4(fp)
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
   2e854:	e0bfff17 	ldw	r2,-4(fp)
   2e858:	10804104 	addi	r2,r2,260
   2e85c:	1007883a 	mov	r3,r2
   2e860:	e0bfff17 	ldw	r2,-4(fp)
   2e864:	10804104 	addi	r2,r2,260
   2e868:	10800037 	ldwio	r2,0(r2)
   2e86c:	10800054 	ori	r2,r2,1
   2e870:	18800035 	stwio	r2,0(r3)
}
   2e874:	e037883a 	mov	sp,fp
   2e878:	df000017 	ldw	fp,0(sp)
   2e87c:	dec00104 	addi	sp,sp,4
   2e880:	f800283a 	ret

0002e884 <adc_interrupt_asserted>:

int adc_interrupt_asserted(int sample_store_base)
{
   2e884:	defffe04 	addi	sp,sp,-8
   2e888:	df000115 	stw	fp,4(sp)
   2e88c:	df000104 	addi	fp,sp,4
   2e890:	e13fff15 	stw	r4,-4(fp)
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
   2e894:	e0bfff17 	ldw	r2,-4(fp)
   2e898:	10804104 	addi	r2,r2,260
   2e89c:	10800037 	ldwio	r2,0(r2)
   2e8a0:	1080004c 	andi	r2,r2,1
   2e8a4:	10000226 	beq	r2,zero,2e8b0 <adc_interrupt_asserted+0x2c>
   2e8a8:	00bfffc4 	movi	r2,-1
   2e8ac:	00000106 	br	2e8b4 <adc_interrupt_asserted+0x30>
   2e8b0:	0005883a 	mov	r2,zero
}
   2e8b4:	e037883a 	mov	sp,fp
   2e8b8:	df000017 	ldw	fp,0(sp)
   2e8bc:	dec00104 	addi	sp,sp,4
   2e8c0:	f800283a 	ret

0002e8c4 <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
   2e8c4:	defffe04 	addi	sp,sp,-8
   2e8c8:	df000115 	stw	fp,4(sp)
   2e8cc:	df000104 	addi	fp,sp,4
   2e8d0:	e13fff15 	stw	r4,-4(fp)
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
   2e8d4:	0001883a 	nop
   2e8d8:	e0bfff17 	ldw	r2,-4(fp)
   2e8dc:	10804104 	addi	r2,r2,260
   2e8e0:	10800037 	ldwio	r2,0(r2)
   2e8e4:	1080004c 	andi	r2,r2,1
   2e8e8:	103ffb26 	beq	r2,zero,2e8d8 <__alt_data_end+0xfffef4d8>
}
   2e8ec:	e037883a 	mov	sp,fp
   2e8f0:	df000017 	ldw	fp,0(sp)
   2e8f4:	dec00104 	addi	sp,sp,4
   2e8f8:	f800283a 	ret

0002e8fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2e8fc:	defff504 	addi	sp,sp,-44
   2e900:	df000a15 	stw	fp,40(sp)
   2e904:	df000a04 	addi	fp,sp,40
   2e908:	e13ffc15 	stw	r4,-16(fp)
   2e90c:	e17ffd15 	stw	r5,-12(fp)
   2e910:	e1bffe15 	stw	r6,-8(fp)
   2e914:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2e918:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2e91c:	008000f4 	movhi	r2,3
   2e920:	108de904 	addi	r2,r2,14244
   2e924:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   2e928:	10003f26 	beq	r2,zero,2ea28 <alt_alarm_start+0x12c>
  {
    if (alarm)
   2e92c:	e0bffc17 	ldw	r2,-16(fp)
   2e930:	10003b26 	beq	r2,zero,2ea20 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   2e934:	e0bffc17 	ldw	r2,-16(fp)
   2e938:	e0fffe17 	ldw	r3,-8(fp)
   2e93c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2e940:	e0bffc17 	ldw	r2,-16(fp)
   2e944:	e0ffff17 	ldw	r3,-4(fp)
   2e948:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e94c:	0005303a 	rdctl	r2,status
   2e950:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e954:	e0fff817 	ldw	r3,-32(fp)
   2e958:	00bfff84 	movi	r2,-2
   2e95c:	1884703a 	and	r2,r3,r2
   2e960:	1001703a 	wrctl	status,r2
  
  return context;
   2e964:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   2e968:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2e96c:	008000f4 	movhi	r2,3
   2e970:	108dea04 	addi	r2,r2,14248
   2e974:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   2e978:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2e97c:	e0fffd17 	ldw	r3,-12(fp)
   2e980:	e0bff617 	ldw	r2,-40(fp)
   2e984:	1885883a 	add	r2,r3,r2
   2e988:	10c00044 	addi	r3,r2,1
   2e98c:	e0bffc17 	ldw	r2,-16(fp)
   2e990:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2e994:	e0bffc17 	ldw	r2,-16(fp)
   2e998:	10c00217 	ldw	r3,8(r2)
   2e99c:	e0bff617 	ldw	r2,-40(fp)
   2e9a0:	1880042e 	bgeu	r3,r2,2e9b4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   2e9a4:	e0bffc17 	ldw	r2,-16(fp)
   2e9a8:	00c00044 	movi	r3,1
   2e9ac:	10c00405 	stb	r3,16(r2)
   2e9b0:	00000206 	br	2e9bc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   2e9b4:	e0bffc17 	ldw	r2,-16(fp)
   2e9b8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2e9bc:	e0fffc17 	ldw	r3,-16(fp)
   2e9c0:	008000f4 	movhi	r2,3
   2e9c4:	10870104 	addi	r2,r2,7172
   2e9c8:	e0bff915 	stw	r2,-28(fp)
   2e9cc:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2e9d0:	e0bffa17 	ldw	r2,-24(fp)
   2e9d4:	e0fff917 	ldw	r3,-28(fp)
   2e9d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2e9dc:	e0bff917 	ldw	r2,-28(fp)
   2e9e0:	10c00017 	ldw	r3,0(r2)
   2e9e4:	e0bffa17 	ldw	r2,-24(fp)
   2e9e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2e9ec:	e0bff917 	ldw	r2,-28(fp)
   2e9f0:	10800017 	ldw	r2,0(r2)
   2e9f4:	e0fffa17 	ldw	r3,-24(fp)
   2e9f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2e9fc:	e0bff917 	ldw	r2,-28(fp)
   2ea00:	e0fffa17 	ldw	r3,-24(fp)
   2ea04:	10c00015 	stw	r3,0(r2)
   2ea08:	e0bff717 	ldw	r2,-36(fp)
   2ea0c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ea10:	e0bffb17 	ldw	r2,-20(fp)
   2ea14:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2ea18:	0005883a 	mov	r2,zero
   2ea1c:	00000306 	br	2ea2c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   2ea20:	00bffa84 	movi	r2,-22
   2ea24:	00000106 	br	2ea2c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   2ea28:	00bfde84 	movi	r2,-134
  }
}
   2ea2c:	e037883a 	mov	sp,fp
   2ea30:	df000017 	ldw	fp,0(sp)
   2ea34:	dec00104 	addi	sp,sp,4
   2ea38:	f800283a 	ret

0002ea3c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2ea3c:	defffa04 	addi	sp,sp,-24
   2ea40:	dfc00515 	stw	ra,20(sp)
   2ea44:	df000415 	stw	fp,16(sp)
   2ea48:	df000404 	addi	fp,sp,16
   2ea4c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   2ea50:	008000c4 	movi	r2,3
   2ea54:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   2ea58:	e0fffd17 	ldw	r3,-12(fp)
   2ea5c:	008003f4 	movhi	r2,15
   2ea60:	10909004 	addi	r2,r2,16960
   2ea64:	1885383a 	mul	r2,r3,r2
   2ea68:	0100bef4 	movhi	r4,763
   2ea6c:	213c2004 	addi	r4,r4,-3968
   2ea70:	100b883a 	mov	r5,r2
   2ea74:	00225140 	call	22514 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   2ea78:	01200034 	movhi	r4,32768
   2ea7c:	213fffc4 	addi	r4,r4,-1
   2ea80:	100b883a 	mov	r5,r2
   2ea84:	00225140 	call	22514 <__udivsi3>
   2ea88:	e13fff17 	ldw	r4,-4(fp)
   2ea8c:	100b883a 	mov	r5,r2
   2ea90:	00225140 	call	22514 <__udivsi3>
   2ea94:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   2ea98:	e0bffe17 	ldw	r2,-8(fp)
   2ea9c:	10002a26 	beq	r2,zero,2eb48 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   2eaa0:	e03ffc15 	stw	zero,-16(fp)
   2eaa4:	00001706 	br	2eb04 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   2eaa8:	00a00034 	movhi	r2,32768
   2eaac:	10bfffc4 	addi	r2,r2,-1
   2eab0:	10bfffc4 	addi	r2,r2,-1
   2eab4:	103ffe1e 	bne	r2,zero,2eab0 <__alt_data_end+0xfffef6b0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   2eab8:	e0fffd17 	ldw	r3,-12(fp)
   2eabc:	008003f4 	movhi	r2,15
   2eac0:	10909004 	addi	r2,r2,16960
   2eac4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2eac8:	0100bef4 	movhi	r4,763
   2eacc:	213c2004 	addi	r4,r4,-3968
   2ead0:	100b883a 	mov	r5,r2
   2ead4:	00225140 	call	22514 <__udivsi3>
   2ead8:	01200034 	movhi	r4,32768
   2eadc:	213fffc4 	addi	r4,r4,-1
   2eae0:	100b883a 	mov	r5,r2
   2eae4:	00225140 	call	22514 <__udivsi3>
   2eae8:	1007883a 	mov	r3,r2
   2eaec:	e0bfff17 	ldw	r2,-4(fp)
   2eaf0:	10c5c83a 	sub	r2,r2,r3
   2eaf4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   2eaf8:	e0bffc17 	ldw	r2,-16(fp)
   2eafc:	10800044 	addi	r2,r2,1
   2eb00:	e0bffc15 	stw	r2,-16(fp)
   2eb04:	e0fffc17 	ldw	r3,-16(fp)
   2eb08:	e0bffe17 	ldw	r2,-8(fp)
   2eb0c:	18bfe616 	blt	r3,r2,2eaa8 <__alt_data_end+0xfffef6a8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2eb10:	e0fffd17 	ldw	r3,-12(fp)
   2eb14:	008003f4 	movhi	r2,15
   2eb18:	10909004 	addi	r2,r2,16960
   2eb1c:	1885383a 	mul	r2,r3,r2
   2eb20:	0100bef4 	movhi	r4,763
   2eb24:	213c2004 	addi	r4,r4,-3968
   2eb28:	100b883a 	mov	r5,r2
   2eb2c:	00225140 	call	22514 <__udivsi3>
   2eb30:	1007883a 	mov	r3,r2
   2eb34:	e0bfff17 	ldw	r2,-4(fp)
   2eb38:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2eb3c:	10bfffc4 	addi	r2,r2,-1
   2eb40:	103ffe1e 	bne	r2,zero,2eb3c <__alt_data_end+0xfffef73c>
   2eb44:	00000d06 	br	2eb7c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2eb48:	e0fffd17 	ldw	r3,-12(fp)
   2eb4c:	008003f4 	movhi	r2,15
   2eb50:	10909004 	addi	r2,r2,16960
   2eb54:	1885383a 	mul	r2,r3,r2
   2eb58:	0100bef4 	movhi	r4,763
   2eb5c:	213c2004 	addi	r4,r4,-3968
   2eb60:	100b883a 	mov	r5,r2
   2eb64:	00225140 	call	22514 <__udivsi3>
   2eb68:	1007883a 	mov	r3,r2
   2eb6c:	e0bfff17 	ldw	r2,-4(fp)
   2eb70:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2eb74:	10bfffc4 	addi	r2,r2,-1
   2eb78:	00bffe16 	blt	zero,r2,2eb74 <__alt_data_end+0xfffef774>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   2eb7c:	0005883a 	mov	r2,zero
}
   2eb80:	e037883a 	mov	sp,fp
   2eb84:	dfc00117 	ldw	ra,4(sp)
   2eb88:	df000017 	ldw	fp,0(sp)
   2eb8c:	dec00204 	addi	sp,sp,8
   2eb90:	f800283a 	ret

0002eb94 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2eb94:	defffe04 	addi	sp,sp,-8
   2eb98:	df000115 	stw	fp,4(sp)
   2eb9c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2eba0:	e03fff15 	stw	zero,-4(fp)
   2eba4:	00000506 	br	2ebbc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   2eba8:	e0bfff17 	ldw	r2,-4(fp)
   2ebac:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2ebb0:	e0bfff17 	ldw	r2,-4(fp)
   2ebb4:	10800804 	addi	r2,r2,32
   2ebb8:	e0bfff15 	stw	r2,-4(fp)
   2ebbc:	e0bfff17 	ldw	r2,-4(fp)
   2ebc0:	10820030 	cmpltui	r2,r2,2048
   2ebc4:	103ff81e 	bne	r2,zero,2eba8 <__alt_data_end+0xfffef7a8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2ebc8:	e037883a 	mov	sp,fp
   2ebcc:	df000017 	ldw	fp,0(sp)
   2ebd0:	dec00104 	addi	sp,sp,4
   2ebd4:	f800283a 	ret

0002ebd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ebd8:	defffe04 	addi	sp,sp,-8
   2ebdc:	dfc00115 	stw	ra,4(sp)
   2ebe0:	df000015 	stw	fp,0(sp)
   2ebe4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2ebe8:	008000f4 	movhi	r2,3
   2ebec:	1086fc04 	addi	r2,r2,7152
   2ebf0:	10800017 	ldw	r2,0(r2)
   2ebf4:	10000526 	beq	r2,zero,2ec0c <alt_get_errno+0x34>
   2ebf8:	008000f4 	movhi	r2,3
   2ebfc:	1086fc04 	addi	r2,r2,7152
   2ec00:	10800017 	ldw	r2,0(r2)
   2ec04:	103ee83a 	callr	r2
   2ec08:	00000206 	br	2ec14 <alt_get_errno+0x3c>
   2ec0c:	008000f4 	movhi	r2,3
   2ec10:	108de404 	addi	r2,r2,14224
}
   2ec14:	e037883a 	mov	sp,fp
   2ec18:	dfc00117 	ldw	ra,4(sp)
   2ec1c:	df000017 	ldw	fp,0(sp)
   2ec20:	dec00204 	addi	sp,sp,8
   2ec24:	f800283a 	ret

0002ec28 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2ec28:	defffa04 	addi	sp,sp,-24
   2ec2c:	dfc00515 	stw	ra,20(sp)
   2ec30:	df000415 	stw	fp,16(sp)
   2ec34:	df000404 	addi	fp,sp,16
   2ec38:	e13ffe15 	stw	r4,-8(fp)
   2ec3c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2ec40:	e0bffe17 	ldw	r2,-8(fp)
   2ec44:	10000326 	beq	r2,zero,2ec54 <alt_dev_llist_insert+0x2c>
   2ec48:	e0bffe17 	ldw	r2,-8(fp)
   2ec4c:	10800217 	ldw	r2,8(r2)
   2ec50:	1000061e 	bne	r2,zero,2ec6c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2ec54:	002ebd80 	call	2ebd8 <alt_get_errno>
   2ec58:	1007883a 	mov	r3,r2
   2ec5c:	00800584 	movi	r2,22
   2ec60:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2ec64:	00bffa84 	movi	r2,-22
   2ec68:	00001306 	br	2ecb8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2ec6c:	e0bffe17 	ldw	r2,-8(fp)
   2ec70:	e0ffff17 	ldw	r3,-4(fp)
   2ec74:	e0fffc15 	stw	r3,-16(fp)
   2ec78:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2ec7c:	e0bffd17 	ldw	r2,-12(fp)
   2ec80:	e0fffc17 	ldw	r3,-16(fp)
   2ec84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2ec88:	e0bffc17 	ldw	r2,-16(fp)
   2ec8c:	10c00017 	ldw	r3,0(r2)
   2ec90:	e0bffd17 	ldw	r2,-12(fp)
   2ec94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2ec98:	e0bffc17 	ldw	r2,-16(fp)
   2ec9c:	10800017 	ldw	r2,0(r2)
   2eca0:	e0fffd17 	ldw	r3,-12(fp)
   2eca4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2eca8:	e0bffc17 	ldw	r2,-16(fp)
   2ecac:	e0fffd17 	ldw	r3,-12(fp)
   2ecb0:	10c00015 	stw	r3,0(r2)

  return 0;  
   2ecb4:	0005883a 	mov	r2,zero
}
   2ecb8:	e037883a 	mov	sp,fp
   2ecbc:	dfc00117 	ldw	ra,4(sp)
   2ecc0:	df000017 	ldw	fp,0(sp)
   2ecc4:	dec00204 	addi	sp,sp,8
   2ecc8:	f800283a 	ret

0002eccc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2eccc:	defffd04 	addi	sp,sp,-12
   2ecd0:	dfc00215 	stw	ra,8(sp)
   2ecd4:	df000115 	stw	fp,4(sp)
   2ecd8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2ecdc:	008000f4 	movhi	r2,3
   2ece0:	10bf4304 	addi	r2,r2,-756
   2ece4:	e0bfff15 	stw	r2,-4(fp)
   2ece8:	00000606 	br	2ed04 <_do_ctors+0x38>
        (*ctor) (); 
   2ecec:	e0bfff17 	ldw	r2,-4(fp)
   2ecf0:	10800017 	ldw	r2,0(r2)
   2ecf4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2ecf8:	e0bfff17 	ldw	r2,-4(fp)
   2ecfc:	10bfff04 	addi	r2,r2,-4
   2ed00:	e0bfff15 	stw	r2,-4(fp)
   2ed04:	e0ffff17 	ldw	r3,-4(fp)
   2ed08:	008000f4 	movhi	r2,3
   2ed0c:	10bf4404 	addi	r2,r2,-752
   2ed10:	18bff62e 	bgeu	r3,r2,2ecec <__alt_data_end+0xfffef8ec>
        (*ctor) (); 
}
   2ed14:	e037883a 	mov	sp,fp
   2ed18:	dfc00117 	ldw	ra,4(sp)
   2ed1c:	df000017 	ldw	fp,0(sp)
   2ed20:	dec00204 	addi	sp,sp,8
   2ed24:	f800283a 	ret

0002ed28 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2ed28:	defffd04 	addi	sp,sp,-12
   2ed2c:	dfc00215 	stw	ra,8(sp)
   2ed30:	df000115 	stw	fp,4(sp)
   2ed34:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2ed38:	008000f4 	movhi	r2,3
   2ed3c:	10bf4304 	addi	r2,r2,-756
   2ed40:	e0bfff15 	stw	r2,-4(fp)
   2ed44:	00000606 	br	2ed60 <_do_dtors+0x38>
        (*dtor) (); 
   2ed48:	e0bfff17 	ldw	r2,-4(fp)
   2ed4c:	10800017 	ldw	r2,0(r2)
   2ed50:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2ed54:	e0bfff17 	ldw	r2,-4(fp)
   2ed58:	10bfff04 	addi	r2,r2,-4
   2ed5c:	e0bfff15 	stw	r2,-4(fp)
   2ed60:	e0ffff17 	ldw	r3,-4(fp)
   2ed64:	008000f4 	movhi	r2,3
   2ed68:	10bf4404 	addi	r2,r2,-752
   2ed6c:	18bff62e 	bgeu	r3,r2,2ed48 <__alt_data_end+0xfffef948>
        (*dtor) (); 
}
   2ed70:	e037883a 	mov	sp,fp
   2ed74:	dfc00117 	ldw	ra,4(sp)
   2ed78:	df000017 	ldw	fp,0(sp)
   2ed7c:	dec00204 	addi	sp,sp,8
   2ed80:	f800283a 	ret

0002ed84 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2ed84:	defffa04 	addi	sp,sp,-24
   2ed88:	dfc00515 	stw	ra,20(sp)
   2ed8c:	df000415 	stw	fp,16(sp)
   2ed90:	df000404 	addi	fp,sp,16
   2ed94:	e13ffe15 	stw	r4,-8(fp)
   2ed98:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2ed9c:	e0bfff17 	ldw	r2,-4(fp)
   2eda0:	10800017 	ldw	r2,0(r2)
   2eda4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2eda8:	e13ffe17 	ldw	r4,-8(fp)
   2edac:	00226580 	call	22658 <strlen>
   2edb0:	10800044 	addi	r2,r2,1
   2edb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2edb8:	00000d06 	br	2edf0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2edbc:	e0bffc17 	ldw	r2,-16(fp)
   2edc0:	10c00217 	ldw	r3,8(r2)
   2edc4:	e0bffd17 	ldw	r2,-12(fp)
   2edc8:	1809883a 	mov	r4,r3
   2edcc:	e17ffe17 	ldw	r5,-8(fp)
   2edd0:	100d883a 	mov	r6,r2
   2edd4:	002f9b80 	call	2f9b8 <memcmp>
   2edd8:	1000021e 	bne	r2,zero,2ede4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2eddc:	e0bffc17 	ldw	r2,-16(fp)
   2ede0:	00000706 	br	2ee00 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2ede4:	e0bffc17 	ldw	r2,-16(fp)
   2ede8:	10800017 	ldw	r2,0(r2)
   2edec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2edf0:	e0fffc17 	ldw	r3,-16(fp)
   2edf4:	e0bfff17 	ldw	r2,-4(fp)
   2edf8:	18bff01e 	bne	r3,r2,2edbc <__alt_data_end+0xfffef9bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2edfc:	0005883a 	mov	r2,zero
}
   2ee00:	e037883a 	mov	sp,fp
   2ee04:	dfc00117 	ldw	ra,4(sp)
   2ee08:	df000017 	ldw	fp,0(sp)
   2ee0c:	dec00204 	addi	sp,sp,8
   2ee10:	f800283a 	ret

0002ee14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2ee14:	defffe04 	addi	sp,sp,-8
   2ee18:	dfc00115 	stw	ra,4(sp)
   2ee1c:	df000015 	stw	fp,0(sp)
   2ee20:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   2ee24:	0009883a 	mov	r4,zero
   2ee28:	01440004 	movi	r5,4096
   2ee2c:	002f8440 	call	2f844 <alt_icache_flush>
#endif
}
   2ee30:	e037883a 	mov	sp,fp
   2ee34:	dfc00117 	ldw	ra,4(sp)
   2ee38:	df000017 	ldw	fp,0(sp)
   2ee3c:	dec00204 	addi	sp,sp,8
   2ee40:	f800283a 	ret

0002ee44 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2ee44:	defff904 	addi	sp,sp,-28
   2ee48:	dfc00615 	stw	ra,24(sp)
   2ee4c:	df000515 	stw	fp,20(sp)
   2ee50:	df000504 	addi	fp,sp,20
   2ee54:	e13ffc15 	stw	r4,-16(fp)
   2ee58:	e17ffd15 	stw	r5,-12(fp)
   2ee5c:	e1bffe15 	stw	r6,-8(fp)
   2ee60:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2ee64:	e0800217 	ldw	r2,8(fp)
   2ee68:	d8800015 	stw	r2,0(sp)
   2ee6c:	e13ffc17 	ldw	r4,-16(fp)
   2ee70:	e17ffd17 	ldw	r5,-12(fp)
   2ee74:	e1bffe17 	ldw	r6,-8(fp)
   2ee78:	e1ffff17 	ldw	r7,-4(fp)
   2ee7c:	002f0240 	call	2f024 <alt_iic_isr_register>
}  
   2ee80:	e037883a 	mov	sp,fp
   2ee84:	dfc00117 	ldw	ra,4(sp)
   2ee88:	df000017 	ldw	fp,0(sp)
   2ee8c:	dec00204 	addi	sp,sp,8
   2ee90:	f800283a 	ret

0002ee94 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2ee94:	defff904 	addi	sp,sp,-28
   2ee98:	df000615 	stw	fp,24(sp)
   2ee9c:	df000604 	addi	fp,sp,24
   2eea0:	e13ffe15 	stw	r4,-8(fp)
   2eea4:	e17fff15 	stw	r5,-4(fp)
   2eea8:	e0bfff17 	ldw	r2,-4(fp)
   2eeac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2eeb0:	0005303a 	rdctl	r2,status
   2eeb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2eeb8:	e0fffb17 	ldw	r3,-20(fp)
   2eebc:	00bfff84 	movi	r2,-2
   2eec0:	1884703a 	and	r2,r3,r2
   2eec4:	1001703a 	wrctl	status,r2
  
  return context;
   2eec8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2eecc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2eed0:	e0bffa17 	ldw	r2,-24(fp)
   2eed4:	00c00044 	movi	r3,1
   2eed8:	1884983a 	sll	r2,r3,r2
   2eedc:	1007883a 	mov	r3,r2
   2eee0:	008000f4 	movhi	r2,3
   2eee4:	108de804 	addi	r2,r2,14240
   2eee8:	10800017 	ldw	r2,0(r2)
   2eeec:	1886b03a 	or	r3,r3,r2
   2eef0:	008000f4 	movhi	r2,3
   2eef4:	108de804 	addi	r2,r2,14240
   2eef8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2eefc:	008000f4 	movhi	r2,3
   2ef00:	108de804 	addi	r2,r2,14240
   2ef04:	10800017 	ldw	r2,0(r2)
   2ef08:	100170fa 	wrctl	ienable,r2
   2ef0c:	e0bffc17 	ldw	r2,-16(fp)
   2ef10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ef14:	e0bffd17 	ldw	r2,-12(fp)
   2ef18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2ef1c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2ef20:	0001883a 	nop
}
   2ef24:	e037883a 	mov	sp,fp
   2ef28:	df000017 	ldw	fp,0(sp)
   2ef2c:	dec00104 	addi	sp,sp,4
   2ef30:	f800283a 	ret

0002ef34 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2ef34:	defff904 	addi	sp,sp,-28
   2ef38:	df000615 	stw	fp,24(sp)
   2ef3c:	df000604 	addi	fp,sp,24
   2ef40:	e13ffe15 	stw	r4,-8(fp)
   2ef44:	e17fff15 	stw	r5,-4(fp)
   2ef48:	e0bfff17 	ldw	r2,-4(fp)
   2ef4c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ef50:	0005303a 	rdctl	r2,status
   2ef54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ef58:	e0fffb17 	ldw	r3,-20(fp)
   2ef5c:	00bfff84 	movi	r2,-2
   2ef60:	1884703a 	and	r2,r3,r2
   2ef64:	1001703a 	wrctl	status,r2
  
  return context;
   2ef68:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2ef6c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2ef70:	e0bffa17 	ldw	r2,-24(fp)
   2ef74:	00c00044 	movi	r3,1
   2ef78:	1884983a 	sll	r2,r3,r2
   2ef7c:	0084303a 	nor	r2,zero,r2
   2ef80:	1007883a 	mov	r3,r2
   2ef84:	008000f4 	movhi	r2,3
   2ef88:	108de804 	addi	r2,r2,14240
   2ef8c:	10800017 	ldw	r2,0(r2)
   2ef90:	1886703a 	and	r3,r3,r2
   2ef94:	008000f4 	movhi	r2,3
   2ef98:	108de804 	addi	r2,r2,14240
   2ef9c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2efa0:	008000f4 	movhi	r2,3
   2efa4:	108de804 	addi	r2,r2,14240
   2efa8:	10800017 	ldw	r2,0(r2)
   2efac:	100170fa 	wrctl	ienable,r2
   2efb0:	e0bffc17 	ldw	r2,-16(fp)
   2efb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2efb8:	e0bffd17 	ldw	r2,-12(fp)
   2efbc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2efc0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   2efc4:	0001883a 	nop
}
   2efc8:	e037883a 	mov	sp,fp
   2efcc:	df000017 	ldw	fp,0(sp)
   2efd0:	dec00104 	addi	sp,sp,4
   2efd4:	f800283a 	ret

0002efd8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2efd8:	defffc04 	addi	sp,sp,-16
   2efdc:	df000315 	stw	fp,12(sp)
   2efe0:	df000304 	addi	fp,sp,12
   2efe4:	e13ffe15 	stw	r4,-8(fp)
   2efe8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2efec:	000530fa 	rdctl	r2,ienable
   2eff0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2eff4:	e0bfff17 	ldw	r2,-4(fp)
   2eff8:	00c00044 	movi	r3,1
   2effc:	1884983a 	sll	r2,r3,r2
   2f000:	1007883a 	mov	r3,r2
   2f004:	e0bffd17 	ldw	r2,-12(fp)
   2f008:	1884703a 	and	r2,r3,r2
   2f00c:	1004c03a 	cmpne	r2,r2,zero
   2f010:	10803fcc 	andi	r2,r2,255
}
   2f014:	e037883a 	mov	sp,fp
   2f018:	df000017 	ldw	fp,0(sp)
   2f01c:	dec00104 	addi	sp,sp,4
   2f020:	f800283a 	ret

0002f024 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2f024:	defff504 	addi	sp,sp,-44
   2f028:	dfc00a15 	stw	ra,40(sp)
   2f02c:	df000915 	stw	fp,36(sp)
   2f030:	df000904 	addi	fp,sp,36
   2f034:	e13ffc15 	stw	r4,-16(fp)
   2f038:	e17ffd15 	stw	r5,-12(fp)
   2f03c:	e1bffe15 	stw	r6,-8(fp)
   2f040:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2f044:	00bffa84 	movi	r2,-22
   2f048:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2f04c:	e0bffd17 	ldw	r2,-12(fp)
   2f050:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2f054:	e0bff817 	ldw	r2,-32(fp)
   2f058:	10800808 	cmpgei	r2,r2,32
   2f05c:	1000271e 	bne	r2,zero,2f0fc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f060:	0005303a 	rdctl	r2,status
   2f064:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f068:	e0fffa17 	ldw	r3,-24(fp)
   2f06c:	00bfff84 	movi	r2,-2
   2f070:	1884703a 	and	r2,r3,r2
   2f074:	1001703a 	wrctl	status,r2
  
  return context;
   2f078:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2f07c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   2f080:	008000f4 	movhi	r2,3
   2f084:	108df604 	addi	r2,r2,14296
   2f088:	e0fff817 	ldw	r3,-32(fp)
   2f08c:	180690fa 	slli	r3,r3,3
   2f090:	10c5883a 	add	r2,r2,r3
   2f094:	e0fffe17 	ldw	r3,-8(fp)
   2f098:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2f09c:	008000f4 	movhi	r2,3
   2f0a0:	108df604 	addi	r2,r2,14296
   2f0a4:	e0fff817 	ldw	r3,-32(fp)
   2f0a8:	180690fa 	slli	r3,r3,3
   2f0ac:	10c5883a 	add	r2,r2,r3
   2f0b0:	10800104 	addi	r2,r2,4
   2f0b4:	e0ffff17 	ldw	r3,-4(fp)
   2f0b8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2f0bc:	e0bffe17 	ldw	r2,-8(fp)
   2f0c0:	10000526 	beq	r2,zero,2f0d8 <alt_iic_isr_register+0xb4>
   2f0c4:	e0bff817 	ldw	r2,-32(fp)
   2f0c8:	e13ffc17 	ldw	r4,-16(fp)
   2f0cc:	100b883a 	mov	r5,r2
   2f0d0:	002ee940 	call	2ee94 <alt_ic_irq_enable>
   2f0d4:	00000406 	br	2f0e8 <alt_iic_isr_register+0xc4>
   2f0d8:	e0bff817 	ldw	r2,-32(fp)
   2f0dc:	e13ffc17 	ldw	r4,-16(fp)
   2f0e0:	100b883a 	mov	r5,r2
   2f0e4:	002ef340 	call	2ef34 <alt_ic_irq_disable>
   2f0e8:	e0bff715 	stw	r2,-36(fp)
   2f0ec:	e0bff917 	ldw	r2,-28(fp)
   2f0f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f0f4:	e0bffb17 	ldw	r2,-20(fp)
   2f0f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2f0fc:	e0bff717 	ldw	r2,-36(fp)
}
   2f100:	e037883a 	mov	sp,fp
   2f104:	dfc00117 	ldw	ra,4(sp)
   2f108:	df000017 	ldw	fp,0(sp)
   2f10c:	dec00204 	addi	sp,sp,8
   2f110:	f800283a 	ret

0002f114 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2f114:	defff904 	addi	sp,sp,-28
   2f118:	dfc00615 	stw	ra,24(sp)
   2f11c:	df000515 	stw	fp,20(sp)
   2f120:	df000504 	addi	fp,sp,20
   2f124:	e13ffc15 	stw	r4,-16(fp)
   2f128:	e17ffd15 	stw	r5,-12(fp)
   2f12c:	e1bffe15 	stw	r6,-8(fp)
   2f130:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2f134:	e13ffd17 	ldw	r4,-12(fp)
   2f138:	e17ffe17 	ldw	r5,-8(fp)
   2f13c:	e1bfff17 	ldw	r6,-4(fp)
   2f140:	002f3680 	call	2f368 <open>
   2f144:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2f148:	e0bffb17 	ldw	r2,-20(fp)
   2f14c:	10001c16 	blt	r2,zero,2f1c0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   2f150:	008000f4 	movhi	r2,3
   2f154:	10825b04 	addi	r2,r2,2412
   2f158:	e0fffb17 	ldw	r3,-20(fp)
   2f15c:	18c00324 	muli	r3,r3,12
   2f160:	10c5883a 	add	r2,r2,r3
   2f164:	10c00017 	ldw	r3,0(r2)
   2f168:	e0bffc17 	ldw	r2,-16(fp)
   2f16c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2f170:	008000f4 	movhi	r2,3
   2f174:	10825b04 	addi	r2,r2,2412
   2f178:	e0fffb17 	ldw	r3,-20(fp)
   2f17c:	18c00324 	muli	r3,r3,12
   2f180:	10c5883a 	add	r2,r2,r3
   2f184:	10800104 	addi	r2,r2,4
   2f188:	10c00017 	ldw	r3,0(r2)
   2f18c:	e0bffc17 	ldw	r2,-16(fp)
   2f190:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2f194:	008000f4 	movhi	r2,3
   2f198:	10825b04 	addi	r2,r2,2412
   2f19c:	e0fffb17 	ldw	r3,-20(fp)
   2f1a0:	18c00324 	muli	r3,r3,12
   2f1a4:	10c5883a 	add	r2,r2,r3
   2f1a8:	10800204 	addi	r2,r2,8
   2f1ac:	10c00017 	ldw	r3,0(r2)
   2f1b0:	e0bffc17 	ldw	r2,-16(fp)
   2f1b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2f1b8:	e13ffb17 	ldw	r4,-20(fp)
   2f1bc:	002d4f80 	call	2d4f8 <alt_release_fd>
  }
} 
   2f1c0:	e037883a 	mov	sp,fp
   2f1c4:	dfc00117 	ldw	ra,4(sp)
   2f1c8:	df000017 	ldw	fp,0(sp)
   2f1cc:	dec00204 	addi	sp,sp,8
   2f1d0:	f800283a 	ret

0002f1d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2f1d4:	defffb04 	addi	sp,sp,-20
   2f1d8:	dfc00415 	stw	ra,16(sp)
   2f1dc:	df000315 	stw	fp,12(sp)
   2f1e0:	df000304 	addi	fp,sp,12
   2f1e4:	e13ffd15 	stw	r4,-12(fp)
   2f1e8:	e17ffe15 	stw	r5,-8(fp)
   2f1ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2f1f0:	010000f4 	movhi	r4,3
   2f1f4:	21025e04 	addi	r4,r4,2424
   2f1f8:	e17ffd17 	ldw	r5,-12(fp)
   2f1fc:	01800044 	movi	r6,1
   2f200:	01c07fc4 	movi	r7,511
   2f204:	002f1140 	call	2f114 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2f208:	010000f4 	movhi	r4,3
   2f20c:	21025b04 	addi	r4,r4,2412
   2f210:	e17ffe17 	ldw	r5,-8(fp)
   2f214:	000d883a 	mov	r6,zero
   2f218:	01c07fc4 	movi	r7,511
   2f21c:	002f1140 	call	2f114 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2f220:	010000f4 	movhi	r4,3
   2f224:	21026104 	addi	r4,r4,2436
   2f228:	e17fff17 	ldw	r5,-4(fp)
   2f22c:	01800044 	movi	r6,1
   2f230:	01c07fc4 	movi	r7,511
   2f234:	002f1140 	call	2f114 <alt_open_fd>
}  
   2f238:	e037883a 	mov	sp,fp
   2f23c:	dfc00117 	ldw	ra,4(sp)
   2f240:	df000017 	ldw	fp,0(sp)
   2f244:	dec00204 	addi	sp,sp,8
   2f248:	f800283a 	ret

0002f24c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f24c:	defffe04 	addi	sp,sp,-8
   2f250:	dfc00115 	stw	ra,4(sp)
   2f254:	df000015 	stw	fp,0(sp)
   2f258:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f25c:	008000f4 	movhi	r2,3
   2f260:	1086fc04 	addi	r2,r2,7152
   2f264:	10800017 	ldw	r2,0(r2)
   2f268:	10000526 	beq	r2,zero,2f280 <alt_get_errno+0x34>
   2f26c:	008000f4 	movhi	r2,3
   2f270:	1086fc04 	addi	r2,r2,7152
   2f274:	10800017 	ldw	r2,0(r2)
   2f278:	103ee83a 	callr	r2
   2f27c:	00000206 	br	2f288 <alt_get_errno+0x3c>
   2f280:	008000f4 	movhi	r2,3
   2f284:	108de404 	addi	r2,r2,14224
}
   2f288:	e037883a 	mov	sp,fp
   2f28c:	dfc00117 	ldw	ra,4(sp)
   2f290:	df000017 	ldw	fp,0(sp)
   2f294:	dec00204 	addi	sp,sp,8
   2f298:	f800283a 	ret

0002f29c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2f29c:	defffd04 	addi	sp,sp,-12
   2f2a0:	df000215 	stw	fp,8(sp)
   2f2a4:	df000204 	addi	fp,sp,8
   2f2a8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2f2ac:	e0bfff17 	ldw	r2,-4(fp)
   2f2b0:	10800217 	ldw	r2,8(r2)
   2f2b4:	10d00034 	orhi	r3,r2,16384
   2f2b8:	e0bfff17 	ldw	r2,-4(fp)
   2f2bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2f2c0:	e03ffe15 	stw	zero,-8(fp)
   2f2c4:	00001d06 	br	2f33c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2f2c8:	008000f4 	movhi	r2,3
   2f2cc:	10825b04 	addi	r2,r2,2412
   2f2d0:	e0fffe17 	ldw	r3,-8(fp)
   2f2d4:	18c00324 	muli	r3,r3,12
   2f2d8:	10c5883a 	add	r2,r2,r3
   2f2dc:	10c00017 	ldw	r3,0(r2)
   2f2e0:	e0bfff17 	ldw	r2,-4(fp)
   2f2e4:	10800017 	ldw	r2,0(r2)
   2f2e8:	1880111e 	bne	r3,r2,2f330 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2f2ec:	008000f4 	movhi	r2,3
   2f2f0:	10825b04 	addi	r2,r2,2412
   2f2f4:	e0fffe17 	ldw	r3,-8(fp)
   2f2f8:	18c00324 	muli	r3,r3,12
   2f2fc:	10c5883a 	add	r2,r2,r3
   2f300:	10800204 	addi	r2,r2,8
   2f304:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2f308:	1000090e 	bge	r2,zero,2f330 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2f30c:	e0bffe17 	ldw	r2,-8(fp)
   2f310:	10c00324 	muli	r3,r2,12
   2f314:	008000f4 	movhi	r2,3
   2f318:	10825b04 	addi	r2,r2,2412
   2f31c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2f320:	e0bfff17 	ldw	r2,-4(fp)
   2f324:	18800226 	beq	r3,r2,2f330 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2f328:	00bffcc4 	movi	r2,-13
   2f32c:	00000a06 	br	2f358 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2f330:	e0bffe17 	ldw	r2,-8(fp)
   2f334:	10800044 	addi	r2,r2,1
   2f338:	e0bffe15 	stw	r2,-8(fp)
   2f33c:	008000f4 	movhi	r2,3
   2f340:	1086fb04 	addi	r2,r2,7148
   2f344:	10800017 	ldw	r2,0(r2)
   2f348:	1007883a 	mov	r3,r2
   2f34c:	e0bffe17 	ldw	r2,-8(fp)
   2f350:	18bfdd2e 	bgeu	r3,r2,2f2c8 <__alt_data_end+0xfffefec8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2f354:	0005883a 	mov	r2,zero
}
   2f358:	e037883a 	mov	sp,fp
   2f35c:	df000017 	ldw	fp,0(sp)
   2f360:	dec00104 	addi	sp,sp,4
   2f364:	f800283a 	ret

0002f368 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2f368:	defff604 	addi	sp,sp,-40
   2f36c:	dfc00915 	stw	ra,36(sp)
   2f370:	df000815 	stw	fp,32(sp)
   2f374:	df000804 	addi	fp,sp,32
   2f378:	e13ffd15 	stw	r4,-12(fp)
   2f37c:	e17ffe15 	stw	r5,-8(fp)
   2f380:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2f384:	00bfffc4 	movi	r2,-1
   2f388:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2f38c:	00bffb44 	movi	r2,-19
   2f390:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2f394:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2f398:	e13ffd17 	ldw	r4,-12(fp)
   2f39c:	014000f4 	movhi	r5,3
   2f3a0:	2946f904 	addi	r5,r5,7140
   2f3a4:	002ed840 	call	2ed84 <alt_find_dev>
   2f3a8:	e0bff815 	stw	r2,-32(fp)
   2f3ac:	e0bff817 	ldw	r2,-32(fp)
   2f3b0:	1000051e 	bne	r2,zero,2f3c8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2f3b4:	e13ffd17 	ldw	r4,-12(fp)
   2f3b8:	002f67c0 	call	2f67c <alt_find_file>
   2f3bc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2f3c0:	00800044 	movi	r2,1
   2f3c4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2f3c8:	e0bff817 	ldw	r2,-32(fp)
   2f3cc:	10002926 	beq	r2,zero,2f474 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2f3d0:	e13ff817 	ldw	r4,-32(fp)
   2f3d4:	002f7900 	call	2f790 <alt_get_fd>
   2f3d8:	e0bff915 	stw	r2,-28(fp)
   2f3dc:	e0bff917 	ldw	r2,-28(fp)
   2f3e0:	1000030e 	bge	r2,zero,2f3f0 <open+0x88>
    {
      status = index;
   2f3e4:	e0bff917 	ldw	r2,-28(fp)
   2f3e8:	e0bffa15 	stw	r2,-24(fp)
   2f3ec:	00002306 	br	2f47c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   2f3f0:	e0bff917 	ldw	r2,-28(fp)
   2f3f4:	10c00324 	muli	r3,r2,12
   2f3f8:	008000f4 	movhi	r2,3
   2f3fc:	10825b04 	addi	r2,r2,2412
   2f400:	1885883a 	add	r2,r3,r2
   2f404:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2f408:	e0fffe17 	ldw	r3,-8(fp)
   2f40c:	00900034 	movhi	r2,16384
   2f410:	10bfffc4 	addi	r2,r2,-1
   2f414:	1886703a 	and	r3,r3,r2
   2f418:	e0bffc17 	ldw	r2,-16(fp)
   2f41c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2f420:	e0bffb17 	ldw	r2,-20(fp)
   2f424:	1000051e 	bne	r2,zero,2f43c <open+0xd4>
   2f428:	e13ffc17 	ldw	r4,-16(fp)
   2f42c:	002f29c0 	call	2f29c <alt_file_locked>
   2f430:	e0bffa15 	stw	r2,-24(fp)
   2f434:	e0bffa17 	ldw	r2,-24(fp)
   2f438:	10001016 	blt	r2,zero,2f47c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2f43c:	e0bff817 	ldw	r2,-32(fp)
   2f440:	10800317 	ldw	r2,12(r2)
   2f444:	10000826 	beq	r2,zero,2f468 <open+0x100>
   2f448:	e0bff817 	ldw	r2,-32(fp)
   2f44c:	10800317 	ldw	r2,12(r2)
   2f450:	e13ffc17 	ldw	r4,-16(fp)
   2f454:	e17ffd17 	ldw	r5,-12(fp)
   2f458:	e1bffe17 	ldw	r6,-8(fp)
   2f45c:	e1ffff17 	ldw	r7,-4(fp)
   2f460:	103ee83a 	callr	r2
   2f464:	00000106 	br	2f46c <open+0x104>
   2f468:	0005883a 	mov	r2,zero
   2f46c:	e0bffa15 	stw	r2,-24(fp)
   2f470:	00000206 	br	2f47c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2f474:	00bffb44 	movi	r2,-19
   2f478:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2f47c:	e0bffa17 	ldw	r2,-24(fp)
   2f480:	1000090e 	bge	r2,zero,2f4a8 <open+0x140>
  {
    alt_release_fd (index);  
   2f484:	e13ff917 	ldw	r4,-28(fp)
   2f488:	002d4f80 	call	2d4f8 <alt_release_fd>
    ALT_ERRNO = -status;
   2f48c:	002f24c0 	call	2f24c <alt_get_errno>
   2f490:	1007883a 	mov	r3,r2
   2f494:	e0bffa17 	ldw	r2,-24(fp)
   2f498:	0085c83a 	sub	r2,zero,r2
   2f49c:	18800015 	stw	r2,0(r3)
    return -1;
   2f4a0:	00bfffc4 	movi	r2,-1
   2f4a4:	00000106 	br	2f4ac <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   2f4a8:	e0bff917 	ldw	r2,-28(fp)
}
   2f4ac:	e037883a 	mov	sp,fp
   2f4b0:	dfc00117 	ldw	ra,4(sp)
   2f4b4:	df000017 	ldw	fp,0(sp)
   2f4b8:	dec00204 	addi	sp,sp,8
   2f4bc:	f800283a 	ret

0002f4c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2f4c0:	defffa04 	addi	sp,sp,-24
   2f4c4:	df000515 	stw	fp,20(sp)
   2f4c8:	df000504 	addi	fp,sp,20
   2f4cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f4d0:	0005303a 	rdctl	r2,status
   2f4d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f4d8:	e0fffc17 	ldw	r3,-16(fp)
   2f4dc:	00bfff84 	movi	r2,-2
   2f4e0:	1884703a 	and	r2,r3,r2
   2f4e4:	1001703a 	wrctl	status,r2
  
  return context;
   2f4e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2f4ec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2f4f0:	e0bfff17 	ldw	r2,-4(fp)
   2f4f4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2f4f8:	e0bffd17 	ldw	r2,-12(fp)
   2f4fc:	10800017 	ldw	r2,0(r2)
   2f500:	e0fffd17 	ldw	r3,-12(fp)
   2f504:	18c00117 	ldw	r3,4(r3)
   2f508:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2f50c:	e0bffd17 	ldw	r2,-12(fp)
   2f510:	10800117 	ldw	r2,4(r2)
   2f514:	e0fffd17 	ldw	r3,-12(fp)
   2f518:	18c00017 	ldw	r3,0(r3)
   2f51c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2f520:	e0bffd17 	ldw	r2,-12(fp)
   2f524:	e0fffd17 	ldw	r3,-12(fp)
   2f528:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2f52c:	e0bffd17 	ldw	r2,-12(fp)
   2f530:	e0fffd17 	ldw	r3,-12(fp)
   2f534:	10c00015 	stw	r3,0(r2)
   2f538:	e0bffb17 	ldw	r2,-20(fp)
   2f53c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f540:	e0bffe17 	ldw	r2,-8(fp)
   2f544:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2f548:	e037883a 	mov	sp,fp
   2f54c:	df000017 	ldw	fp,0(sp)
   2f550:	dec00104 	addi	sp,sp,4
   2f554:	f800283a 	ret

0002f558 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2f558:	defffb04 	addi	sp,sp,-20
   2f55c:	dfc00415 	stw	ra,16(sp)
   2f560:	df000315 	stw	fp,12(sp)
   2f564:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2f568:	d0a01017 	ldw	r2,-32704(gp)
   2f56c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2f570:	d0a6f917 	ldw	r2,-25628(gp)
   2f574:	10800044 	addi	r2,r2,1
   2f578:	d0a6f915 	stw	r2,-25628(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2f57c:	00002e06 	br	2f638 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2f580:	e0bffd17 	ldw	r2,-12(fp)
   2f584:	10800017 	ldw	r2,0(r2)
   2f588:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2f58c:	e0bffd17 	ldw	r2,-12(fp)
   2f590:	10800403 	ldbu	r2,16(r2)
   2f594:	10803fcc 	andi	r2,r2,255
   2f598:	10000426 	beq	r2,zero,2f5ac <alt_tick+0x54>
   2f59c:	d0a6f917 	ldw	r2,-25628(gp)
   2f5a0:	1000021e 	bne	r2,zero,2f5ac <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2f5a4:	e0bffd17 	ldw	r2,-12(fp)
   2f5a8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2f5ac:	e0bffd17 	ldw	r2,-12(fp)
   2f5b0:	10800217 	ldw	r2,8(r2)
   2f5b4:	d0e6f917 	ldw	r3,-25628(gp)
   2f5b8:	18801d36 	bltu	r3,r2,2f630 <alt_tick+0xd8>
   2f5bc:	e0bffd17 	ldw	r2,-12(fp)
   2f5c0:	10800403 	ldbu	r2,16(r2)
   2f5c4:	10803fcc 	andi	r2,r2,255
   2f5c8:	1000191e 	bne	r2,zero,2f630 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2f5cc:	e0bffd17 	ldw	r2,-12(fp)
   2f5d0:	10800317 	ldw	r2,12(r2)
   2f5d4:	e0fffd17 	ldw	r3,-12(fp)
   2f5d8:	18c00517 	ldw	r3,20(r3)
   2f5dc:	1809883a 	mov	r4,r3
   2f5e0:	103ee83a 	callr	r2
   2f5e4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2f5e8:	e0bfff17 	ldw	r2,-4(fp)
   2f5ec:	1000031e 	bne	r2,zero,2f5fc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2f5f0:	e13ffd17 	ldw	r4,-12(fp)
   2f5f4:	002f4c00 	call	2f4c0 <alt_alarm_stop>
   2f5f8:	00000d06 	br	2f630 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2f5fc:	e0bffd17 	ldw	r2,-12(fp)
   2f600:	10c00217 	ldw	r3,8(r2)
   2f604:	e0bfff17 	ldw	r2,-4(fp)
   2f608:	1887883a 	add	r3,r3,r2
   2f60c:	e0bffd17 	ldw	r2,-12(fp)
   2f610:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2f614:	e0bffd17 	ldw	r2,-12(fp)
   2f618:	10c00217 	ldw	r3,8(r2)
   2f61c:	d0a6f917 	ldw	r2,-25628(gp)
   2f620:	1880032e 	bgeu	r3,r2,2f630 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2f624:	e0bffd17 	ldw	r2,-12(fp)
   2f628:	00c00044 	movi	r3,1
   2f62c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2f630:	e0bffe17 	ldw	r2,-8(fp)
   2f634:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2f638:	e0fffd17 	ldw	r3,-12(fp)
   2f63c:	d0a01004 	addi	r2,gp,-32704
   2f640:	18bfcf1e 	bne	r3,r2,2f580 <__alt_data_end+0xffff0180>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2f644:	0001883a 	nop
}
   2f648:	e037883a 	mov	sp,fp
   2f64c:	dfc00117 	ldw	ra,4(sp)
   2f650:	df000017 	ldw	fp,0(sp)
   2f654:	dec00204 	addi	sp,sp,8
   2f658:	f800283a 	ret

0002f65c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   2f65c:	deffff04 	addi	sp,sp,-4
   2f660:	df000015 	stw	fp,0(sp)
   2f664:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2f668:	000170fa 	wrctl	ienable,zero
}
   2f66c:	e037883a 	mov	sp,fp
   2f670:	df000017 	ldw	fp,0(sp)
   2f674:	dec00104 	addi	sp,sp,4
   2f678:	f800283a 	ret

0002f67c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2f67c:	defffb04 	addi	sp,sp,-20
   2f680:	dfc00415 	stw	ra,16(sp)
   2f684:	df000315 	stw	fp,12(sp)
   2f688:	df000304 	addi	fp,sp,12
   2f68c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2f690:	008000f4 	movhi	r2,3
   2f694:	1086f704 	addi	r2,r2,7132
   2f698:	10800017 	ldw	r2,0(r2)
   2f69c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2f6a0:	00003106 	br	2f768 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   2f6a4:	e0bffd17 	ldw	r2,-12(fp)
   2f6a8:	10800217 	ldw	r2,8(r2)
   2f6ac:	1009883a 	mov	r4,r2
   2f6b0:	00226580 	call	22658 <strlen>
   2f6b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2f6b8:	e0bffd17 	ldw	r2,-12(fp)
   2f6bc:	10c00217 	ldw	r3,8(r2)
   2f6c0:	e0bffe17 	ldw	r2,-8(fp)
   2f6c4:	10bfffc4 	addi	r2,r2,-1
   2f6c8:	1885883a 	add	r2,r3,r2
   2f6cc:	10800003 	ldbu	r2,0(r2)
   2f6d0:	10803fcc 	andi	r2,r2,255
   2f6d4:	1080201c 	xori	r2,r2,128
   2f6d8:	10bfe004 	addi	r2,r2,-128
   2f6dc:	10800bd8 	cmpnei	r2,r2,47
   2f6e0:	1000031e 	bne	r2,zero,2f6f0 <alt_find_file+0x74>
    {
      len -= 1;
   2f6e4:	e0bffe17 	ldw	r2,-8(fp)
   2f6e8:	10bfffc4 	addi	r2,r2,-1
   2f6ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2f6f0:	e0bffe17 	ldw	r2,-8(fp)
   2f6f4:	e0ffff17 	ldw	r3,-4(fp)
   2f6f8:	1885883a 	add	r2,r3,r2
   2f6fc:	10800003 	ldbu	r2,0(r2)
   2f700:	10803fcc 	andi	r2,r2,255
   2f704:	1080201c 	xori	r2,r2,128
   2f708:	10bfe004 	addi	r2,r2,-128
   2f70c:	10800be0 	cmpeqi	r2,r2,47
   2f710:	1000081e 	bne	r2,zero,2f734 <alt_find_file+0xb8>
   2f714:	e0bffe17 	ldw	r2,-8(fp)
   2f718:	e0ffff17 	ldw	r3,-4(fp)
   2f71c:	1885883a 	add	r2,r3,r2
   2f720:	10800003 	ldbu	r2,0(r2)
   2f724:	10803fcc 	andi	r2,r2,255
   2f728:	1080201c 	xori	r2,r2,128
   2f72c:	10bfe004 	addi	r2,r2,-128
   2f730:	10000a1e 	bne	r2,zero,2f75c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   2f734:	e0bffd17 	ldw	r2,-12(fp)
   2f738:	10c00217 	ldw	r3,8(r2)
   2f73c:	e0bffe17 	ldw	r2,-8(fp)
   2f740:	1809883a 	mov	r4,r3
   2f744:	e17fff17 	ldw	r5,-4(fp)
   2f748:	100d883a 	mov	r6,r2
   2f74c:	002f9b80 	call	2f9b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2f750:	1000021e 	bne	r2,zero,2f75c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2f754:	e0bffd17 	ldw	r2,-12(fp)
   2f758:	00000806 	br	2f77c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   2f75c:	e0bffd17 	ldw	r2,-12(fp)
   2f760:	10800017 	ldw	r2,0(r2)
   2f764:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2f768:	e0fffd17 	ldw	r3,-12(fp)
   2f76c:	008000f4 	movhi	r2,3
   2f770:	1086f704 	addi	r2,r2,7132
   2f774:	18bfcb1e 	bne	r3,r2,2f6a4 <__alt_data_end+0xffff02a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2f778:	0005883a 	mov	r2,zero
}
   2f77c:	e037883a 	mov	sp,fp
   2f780:	dfc00117 	ldw	ra,4(sp)
   2f784:	df000017 	ldw	fp,0(sp)
   2f788:	dec00204 	addi	sp,sp,8
   2f78c:	f800283a 	ret

0002f790 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2f790:	defffc04 	addi	sp,sp,-16
   2f794:	df000315 	stw	fp,12(sp)
   2f798:	df000304 	addi	fp,sp,12
   2f79c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2f7a0:	00bffa04 	movi	r2,-24
   2f7a4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2f7a8:	e03ffd15 	stw	zero,-12(fp)
   2f7ac:	00001d06 	br	2f824 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   2f7b0:	008000f4 	movhi	r2,3
   2f7b4:	10825b04 	addi	r2,r2,2412
   2f7b8:	e0fffd17 	ldw	r3,-12(fp)
   2f7bc:	18c00324 	muli	r3,r3,12
   2f7c0:	10c5883a 	add	r2,r2,r3
   2f7c4:	10800017 	ldw	r2,0(r2)
   2f7c8:	1000131e 	bne	r2,zero,2f818 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   2f7cc:	008000f4 	movhi	r2,3
   2f7d0:	10825b04 	addi	r2,r2,2412
   2f7d4:	e0fffd17 	ldw	r3,-12(fp)
   2f7d8:	18c00324 	muli	r3,r3,12
   2f7dc:	10c5883a 	add	r2,r2,r3
   2f7e0:	e0ffff17 	ldw	r3,-4(fp)
   2f7e4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2f7e8:	008000f4 	movhi	r2,3
   2f7ec:	1086fb04 	addi	r2,r2,7148
   2f7f0:	10c00017 	ldw	r3,0(r2)
   2f7f4:	e0bffd17 	ldw	r2,-12(fp)
   2f7f8:	1880040e 	bge	r3,r2,2f80c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   2f7fc:	008000f4 	movhi	r2,3
   2f800:	1086fb04 	addi	r2,r2,7148
   2f804:	e0fffd17 	ldw	r3,-12(fp)
   2f808:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   2f80c:	e0bffd17 	ldw	r2,-12(fp)
   2f810:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   2f814:	00000606 	br	2f830 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2f818:	e0bffd17 	ldw	r2,-12(fp)
   2f81c:	10800044 	addi	r2,r2,1
   2f820:	e0bffd15 	stw	r2,-12(fp)
   2f824:	e0bffd17 	ldw	r2,-12(fp)
   2f828:	10800810 	cmplti	r2,r2,32
   2f82c:	103fe01e 	bne	r2,zero,2f7b0 <__alt_data_end+0xffff03b0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2f830:	e0bffe17 	ldw	r2,-8(fp)
}
   2f834:	e037883a 	mov	sp,fp
   2f838:	df000017 	ldw	fp,0(sp)
   2f83c:	dec00104 	addi	sp,sp,4
   2f840:	f800283a 	ret

0002f844 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   2f844:	defffb04 	addi	sp,sp,-20
   2f848:	df000415 	stw	fp,16(sp)
   2f84c:	df000404 	addi	fp,sp,16
   2f850:	e13ffe15 	stw	r4,-8(fp)
   2f854:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   2f858:	e0bfff17 	ldw	r2,-4(fp)
   2f85c:	10840070 	cmpltui	r2,r2,4097
   2f860:	1000021e 	bne	r2,zero,2f86c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   2f864:	00840004 	movi	r2,4096
   2f868:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   2f86c:	e0fffe17 	ldw	r3,-8(fp)
   2f870:	e0bfff17 	ldw	r2,-4(fp)
   2f874:	1885883a 	add	r2,r3,r2
   2f878:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2f87c:	e0bffe17 	ldw	r2,-8(fp)
   2f880:	e0bffc15 	stw	r2,-16(fp)
   2f884:	00000506 	br	2f89c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   2f888:	e0bffc17 	ldw	r2,-16(fp)
   2f88c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2f890:	e0bffc17 	ldw	r2,-16(fp)
   2f894:	10800804 	addi	r2,r2,32
   2f898:	e0bffc15 	stw	r2,-16(fp)
   2f89c:	e0fffc17 	ldw	r3,-16(fp)
   2f8a0:	e0bffd17 	ldw	r2,-12(fp)
   2f8a4:	18bff836 	bltu	r3,r2,2f888 <__alt_data_end+0xffff0488>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   2f8a8:	e0bffe17 	ldw	r2,-8(fp)
   2f8ac:	108007cc 	andi	r2,r2,31
   2f8b0:	10000226 	beq	r2,zero,2f8bc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   2f8b4:	e0bffc17 	ldw	r2,-16(fp)
   2f8b8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   2f8bc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   2f8c0:	e037883a 	mov	sp,fp
   2f8c4:	df000017 	ldw	fp,0(sp)
   2f8c8:	dec00104 	addi	sp,sp,4
   2f8cc:	f800283a 	ret

0002f8d0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   2f8d0:	defffe04 	addi	sp,sp,-8
   2f8d4:	df000115 	stw	fp,4(sp)
   2f8d8:	df000104 	addi	fp,sp,4
   2f8dc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2f8e0:	e0bfff17 	ldw	r2,-4(fp)
   2f8e4:	10bffe84 	addi	r2,r2,-6
   2f8e8:	10c00428 	cmpgeui	r3,r2,16
   2f8ec:	18001a1e 	bne	r3,zero,2f958 <alt_exception_cause_generated_bad_addr+0x88>
   2f8f0:	100690ba 	slli	r3,r2,2
   2f8f4:	008000f4 	movhi	r2,3
   2f8f8:	10be4204 	addi	r2,r2,-1784
   2f8fc:	1885883a 	add	r2,r3,r2
   2f900:	10800017 	ldw	r2,0(r2)
   2f904:	1000683a 	jmp	r2
   2f908:	0002f948 	cmpgei	zero,zero,3045
   2f90c:	0002f948 	cmpgei	zero,zero,3045
   2f910:	0002f958 	cmpnei	zero,zero,3045
   2f914:	0002f958 	cmpnei	zero,zero,3045
   2f918:	0002f958 	cmpnei	zero,zero,3045
   2f91c:	0002f948 	cmpgei	zero,zero,3045
   2f920:	0002f950 	cmplti	zero,zero,3045
   2f924:	0002f958 	cmpnei	zero,zero,3045
   2f928:	0002f948 	cmpgei	zero,zero,3045
   2f92c:	0002f948 	cmpgei	zero,zero,3045
   2f930:	0002f958 	cmpnei	zero,zero,3045
   2f934:	0002f948 	cmpgei	zero,zero,3045
   2f938:	0002f950 	cmplti	zero,zero,3045
   2f93c:	0002f958 	cmpnei	zero,zero,3045
   2f940:	0002f958 	cmpnei	zero,zero,3045
   2f944:	0002f948 	cmpgei	zero,zero,3045
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2f948:	00800044 	movi	r2,1
   2f94c:	00000306 	br	2f95c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2f950:	0005883a 	mov	r2,zero
   2f954:	00000106 	br	2f95c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2f958:	0005883a 	mov	r2,zero
  }
}
   2f95c:	e037883a 	mov	sp,fp
   2f960:	df000017 	ldw	fp,0(sp)
   2f964:	dec00104 	addi	sp,sp,4
   2f968:	f800283a 	ret

0002f96c <atexit>:
   2f96c:	200b883a 	mov	r5,r4
   2f970:	000d883a 	mov	r6,zero
   2f974:	0009883a 	mov	r4,zero
   2f978:	000f883a 	mov	r7,zero
   2f97c:	002fa341 	jmpi	2fa34 <__register_exitproc>

0002f980 <exit>:
   2f980:	defffe04 	addi	sp,sp,-8
   2f984:	000b883a 	mov	r5,zero
   2f988:	dc000015 	stw	r16,0(sp)
   2f98c:	dfc00115 	stw	ra,4(sp)
   2f990:	2021883a 	mov	r16,r4
   2f994:	002fb480 	call	2fb48 <__call_exitprocs>
   2f998:	008000f4 	movhi	r2,3
   2f99c:	1086f104 	addi	r2,r2,7108
   2f9a0:	11000017 	ldw	r4,0(r2)
   2f9a4:	20800f17 	ldw	r2,60(r4)
   2f9a8:	10000126 	beq	r2,zero,2f9b0 <exit+0x30>
   2f9ac:	103ee83a 	callr	r2
   2f9b0:	8009883a 	mov	r4,r16
   2f9b4:	002fcdc0 	call	2fcdc <_exit>

0002f9b8 <memcmp>:
   2f9b8:	01c000c4 	movi	r7,3
   2f9bc:	3980192e 	bgeu	r7,r6,2fa24 <memcmp+0x6c>
   2f9c0:	2144b03a 	or	r2,r4,r5
   2f9c4:	11c4703a 	and	r2,r2,r7
   2f9c8:	10000f26 	beq	r2,zero,2fa08 <memcmp+0x50>
   2f9cc:	20800003 	ldbu	r2,0(r4)
   2f9d0:	28c00003 	ldbu	r3,0(r5)
   2f9d4:	10c0151e 	bne	r2,r3,2fa2c <memcmp+0x74>
   2f9d8:	31bfff84 	addi	r6,r6,-2
   2f9dc:	01ffffc4 	movi	r7,-1
   2f9e0:	00000406 	br	2f9f4 <memcmp+0x3c>
   2f9e4:	20800003 	ldbu	r2,0(r4)
   2f9e8:	28c00003 	ldbu	r3,0(r5)
   2f9ec:	31bfffc4 	addi	r6,r6,-1
   2f9f0:	10c00e1e 	bne	r2,r3,2fa2c <memcmp+0x74>
   2f9f4:	21000044 	addi	r4,r4,1
   2f9f8:	29400044 	addi	r5,r5,1
   2f9fc:	31fff91e 	bne	r6,r7,2f9e4 <__alt_data_end+0xffff05e4>
   2fa00:	0005883a 	mov	r2,zero
   2fa04:	f800283a 	ret
   2fa08:	20c00017 	ldw	r3,0(r4)
   2fa0c:	28800017 	ldw	r2,0(r5)
   2fa10:	1880041e 	bne	r3,r2,2fa24 <memcmp+0x6c>
   2fa14:	31bfff04 	addi	r6,r6,-4
   2fa18:	21000104 	addi	r4,r4,4
   2fa1c:	29400104 	addi	r5,r5,4
   2fa20:	39bff936 	bltu	r7,r6,2fa08 <__alt_data_end+0xffff0608>
   2fa24:	303fe91e 	bne	r6,zero,2f9cc <__alt_data_end+0xffff05cc>
   2fa28:	003ff506 	br	2fa00 <__alt_data_end+0xffff0600>
   2fa2c:	10c5c83a 	sub	r2,r2,r3
   2fa30:	f800283a 	ret

0002fa34 <__register_exitproc>:
   2fa34:	008000f4 	movhi	r2,3
   2fa38:	defffa04 	addi	sp,sp,-24
   2fa3c:	1086f104 	addi	r2,r2,7108
   2fa40:	dc000315 	stw	r16,12(sp)
   2fa44:	14000017 	ldw	r16,0(r2)
   2fa48:	dc400415 	stw	r17,16(sp)
   2fa4c:	dfc00515 	stw	ra,20(sp)
   2fa50:	80805217 	ldw	r2,328(r16)
   2fa54:	2023883a 	mov	r17,r4
   2fa58:	10003626 	beq	r2,zero,2fb34 <__register_exitproc+0x100>
   2fa5c:	10c00117 	ldw	r3,4(r2)
   2fa60:	010007c4 	movi	r4,31
   2fa64:	20c00e16 	blt	r4,r3,2faa0 <__register_exitproc+0x6c>
   2fa68:	1a400044 	addi	r9,r3,1
   2fa6c:	8800211e 	bne	r17,zero,2faf4 <__register_exitproc+0xc0>
   2fa70:	18c00084 	addi	r3,r3,2
   2fa74:	18c7883a 	add	r3,r3,r3
   2fa78:	18c7883a 	add	r3,r3,r3
   2fa7c:	12400115 	stw	r9,4(r2)
   2fa80:	10c7883a 	add	r3,r2,r3
   2fa84:	19400015 	stw	r5,0(r3)
   2fa88:	0005883a 	mov	r2,zero
   2fa8c:	dfc00517 	ldw	ra,20(sp)
   2fa90:	dc400417 	ldw	r17,16(sp)
   2fa94:	dc000317 	ldw	r16,12(sp)
   2fa98:	dec00604 	addi	sp,sp,24
   2fa9c:	f800283a 	ret
   2faa0:	00800034 	movhi	r2,0
   2faa4:	10800004 	addi	r2,r2,0
   2faa8:	10002526 	beq	r2,zero,2fb40 <__register_exitproc+0x10c>
   2faac:	01006404 	movi	r4,400
   2fab0:	d9400015 	stw	r5,0(sp)
   2fab4:	d9800115 	stw	r6,4(sp)
   2fab8:	d9c00215 	stw	r7,8(sp)
   2fabc:	00000000 	call	0 <__reset-0x20000>
   2fac0:	d9400017 	ldw	r5,0(sp)
   2fac4:	d9800117 	ldw	r6,4(sp)
   2fac8:	d9c00217 	ldw	r7,8(sp)
   2facc:	10001c26 	beq	r2,zero,2fb40 <__register_exitproc+0x10c>
   2fad0:	80c05217 	ldw	r3,328(r16)
   2fad4:	10000115 	stw	zero,4(r2)
   2fad8:	02400044 	movi	r9,1
   2fadc:	10c00015 	stw	r3,0(r2)
   2fae0:	80805215 	stw	r2,328(r16)
   2fae4:	10006215 	stw	zero,392(r2)
   2fae8:	10006315 	stw	zero,396(r2)
   2faec:	0007883a 	mov	r3,zero
   2faf0:	883fdf26 	beq	r17,zero,2fa70 <__alt_data_end+0xffff0670>
   2faf4:	18d1883a 	add	r8,r3,r3
   2faf8:	4211883a 	add	r8,r8,r8
   2fafc:	1211883a 	add	r8,r2,r8
   2fb00:	41802215 	stw	r6,136(r8)
   2fb04:	01000044 	movi	r4,1
   2fb08:	11806217 	ldw	r6,392(r2)
   2fb0c:	20c8983a 	sll	r4,r4,r3
   2fb10:	310cb03a 	or	r6,r6,r4
   2fb14:	11806215 	stw	r6,392(r2)
   2fb18:	41c04215 	stw	r7,264(r8)
   2fb1c:	01800084 	movi	r6,2
   2fb20:	89bfd31e 	bne	r17,r6,2fa70 <__alt_data_end+0xffff0670>
   2fb24:	11806317 	ldw	r6,396(r2)
   2fb28:	3108b03a 	or	r4,r6,r4
   2fb2c:	11006315 	stw	r4,396(r2)
   2fb30:	003fcf06 	br	2fa70 <__alt_data_end+0xffff0670>
   2fb34:	80805304 	addi	r2,r16,332
   2fb38:	80805215 	stw	r2,328(r16)
   2fb3c:	003fc706 	br	2fa5c <__alt_data_end+0xffff065c>
   2fb40:	00bfffc4 	movi	r2,-1
   2fb44:	003fd106 	br	2fa8c <__alt_data_end+0xffff068c>

0002fb48 <__call_exitprocs>:
   2fb48:	008000f4 	movhi	r2,3
   2fb4c:	1086f104 	addi	r2,r2,7108
   2fb50:	10800017 	ldw	r2,0(r2)
   2fb54:	defff404 	addi	sp,sp,-48
   2fb58:	dd800815 	stw	r22,32(sp)
   2fb5c:	d8800015 	stw	r2,0(sp)
   2fb60:	10805204 	addi	r2,r2,328
   2fb64:	dd000615 	stw	r20,24(sp)
   2fb68:	dc800415 	stw	r18,16(sp)
   2fb6c:	dfc00b15 	stw	ra,44(sp)
   2fb70:	df000a15 	stw	fp,40(sp)
   2fb74:	ddc00915 	stw	r23,36(sp)
   2fb78:	dd400715 	stw	r21,28(sp)
   2fb7c:	dcc00515 	stw	r19,20(sp)
   2fb80:	dc400315 	stw	r17,12(sp)
   2fb84:	dc000215 	stw	r16,8(sp)
   2fb88:	2025883a 	mov	r18,r4
   2fb8c:	2829883a 	mov	r20,r5
   2fb90:	d8800115 	stw	r2,4(sp)
   2fb94:	05bfffc4 	movi	r22,-1
   2fb98:	d8800017 	ldw	r2,0(sp)
   2fb9c:	14c05217 	ldw	r19,328(r2)
   2fba0:	98001d26 	beq	r19,zero,2fc18 <__call_exitprocs+0xd0>
   2fba4:	dd400117 	ldw	r21,4(sp)
   2fba8:	98800117 	ldw	r2,4(r19)
   2fbac:	173fffc4 	addi	fp,r2,-1
   2fbb0:	e0000d16 	blt	fp,zero,2fbe8 <__call_exitprocs+0xa0>
   2fbb4:	14000044 	addi	r16,r2,1
   2fbb8:	8421883a 	add	r16,r16,r16
   2fbbc:	8421883a 	add	r16,r16,r16
   2fbc0:	84402004 	addi	r17,r16,128
   2fbc4:	9c63883a 	add	r17,r19,r17
   2fbc8:	9c21883a 	add	r16,r19,r16
   2fbcc:	a0001e26 	beq	r20,zero,2fc48 <__call_exitprocs+0x100>
   2fbd0:	80804017 	ldw	r2,256(r16)
   2fbd4:	15001c26 	beq	r2,r20,2fc48 <__call_exitprocs+0x100>
   2fbd8:	e73fffc4 	addi	fp,fp,-1
   2fbdc:	843fff04 	addi	r16,r16,-4
   2fbe0:	8c7fff04 	addi	r17,r17,-4
   2fbe4:	e5bff91e 	bne	fp,r22,2fbcc <__alt_data_end+0xffff07cc>
   2fbe8:	00800034 	movhi	r2,0
   2fbec:	10800004 	addi	r2,r2,0
   2fbf0:	10000926 	beq	r2,zero,2fc18 <__call_exitprocs+0xd0>
   2fbf4:	98800117 	ldw	r2,4(r19)
   2fbf8:	1000311e 	bne	r2,zero,2fcc0 <__call_exitprocs+0x178>
   2fbfc:	98800017 	ldw	r2,0(r19)
   2fc00:	10003426 	beq	r2,zero,2fcd4 <__call_exitprocs+0x18c>
   2fc04:	9809883a 	mov	r4,r19
   2fc08:	a8800015 	stw	r2,0(r21)
   2fc0c:	00000000 	call	0 <__reset-0x20000>
   2fc10:	acc00017 	ldw	r19,0(r21)
   2fc14:	983fe41e 	bne	r19,zero,2fba8 <__alt_data_end+0xffff07a8>
   2fc18:	dfc00b17 	ldw	ra,44(sp)
   2fc1c:	df000a17 	ldw	fp,40(sp)
   2fc20:	ddc00917 	ldw	r23,36(sp)
   2fc24:	dd800817 	ldw	r22,32(sp)
   2fc28:	dd400717 	ldw	r21,28(sp)
   2fc2c:	dd000617 	ldw	r20,24(sp)
   2fc30:	dcc00517 	ldw	r19,20(sp)
   2fc34:	dc800417 	ldw	r18,16(sp)
   2fc38:	dc400317 	ldw	r17,12(sp)
   2fc3c:	dc000217 	ldw	r16,8(sp)
   2fc40:	dec00c04 	addi	sp,sp,48
   2fc44:	f800283a 	ret
   2fc48:	98800117 	ldw	r2,4(r19)
   2fc4c:	80c00017 	ldw	r3,0(r16)
   2fc50:	10bfffc4 	addi	r2,r2,-1
   2fc54:	17001526 	beq	r2,fp,2fcac <__call_exitprocs+0x164>
   2fc58:	80000015 	stw	zero,0(r16)
   2fc5c:	183fde26 	beq	r3,zero,2fbd8 <__alt_data_end+0xffff07d8>
   2fc60:	00800044 	movi	r2,1
   2fc64:	1708983a 	sll	r4,r2,fp
   2fc68:	98806217 	ldw	r2,392(r19)
   2fc6c:	9dc00117 	ldw	r23,4(r19)
   2fc70:	2084703a 	and	r2,r4,r2
   2fc74:	1000061e 	bne	r2,zero,2fc90 <__call_exitprocs+0x148>
   2fc78:	183ee83a 	callr	r3
   2fc7c:	98800117 	ldw	r2,4(r19)
   2fc80:	15ffc51e 	bne	r2,r23,2fb98 <__alt_data_end+0xffff0798>
   2fc84:	a8800017 	ldw	r2,0(r21)
   2fc88:	14ffd326 	beq	r2,r19,2fbd8 <__alt_data_end+0xffff07d8>
   2fc8c:	003fc206 	br	2fb98 <__alt_data_end+0xffff0798>
   2fc90:	98806317 	ldw	r2,396(r19)
   2fc94:	2084703a 	and	r2,r4,r2
   2fc98:	1000061e 	bne	r2,zero,2fcb4 <__call_exitprocs+0x16c>
   2fc9c:	89400017 	ldw	r5,0(r17)
   2fca0:	9009883a 	mov	r4,r18
   2fca4:	183ee83a 	callr	r3
   2fca8:	003ff406 	br	2fc7c <__alt_data_end+0xffff087c>
   2fcac:	9f000115 	stw	fp,4(r19)
   2fcb0:	003fea06 	br	2fc5c <__alt_data_end+0xffff085c>
   2fcb4:	89000017 	ldw	r4,0(r17)
   2fcb8:	183ee83a 	callr	r3
   2fcbc:	003fef06 	br	2fc7c <__alt_data_end+0xffff087c>
   2fcc0:	98800017 	ldw	r2,0(r19)
   2fcc4:	982b883a 	mov	r21,r19
   2fcc8:	1027883a 	mov	r19,r2
   2fccc:	983fb61e 	bne	r19,zero,2fba8 <__alt_data_end+0xffff07a8>
   2fcd0:	003fd106 	br	2fc18 <__alt_data_end+0xffff0818>
   2fcd4:	0005883a 	mov	r2,zero
   2fcd8:	003ffa06 	br	2fcc4 <__alt_data_end+0xffff08c4>

0002fcdc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2fcdc:	defffd04 	addi	sp,sp,-12
   2fce0:	df000215 	stw	fp,8(sp)
   2fce4:	df000204 	addi	fp,sp,8
   2fce8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2fcec:	0001883a 	nop
   2fcf0:	e0bfff17 	ldw	r2,-4(fp)
   2fcf4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   2fcf8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2fcfc:	10000226 	beq	r2,zero,2fd08 <_exit+0x2c>
    ALT_SIM_FAIL();
   2fd00:	002af070 	cmpltui	zero,zero,43969
   2fd04:	00000106 	br	2fd0c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   2fd08:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2fd0c:	003fff06 	br	2fd0c <__alt_data_end+0xffff090c>
