
usb_stream_demo.elf:     file format elf32-littlenios2
usb_stream_demo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00009f64 memsz 0x00009f64 flags r-x
    LOAD off    0x0000af84 vaddr 0x01009f84 paddr 0x0100a750 align 2**12
         filesz 0x000007cc memsz 0x000007cc flags rw-
    LOAD off    0x0000bf1c vaddr 0x0100af1c paddr 0x0100af1c align 2**12
         filesz 0x00000000 memsz 0x00000814 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009c3c  010001bc  010001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000018c  01009df8  01009df8  0000adf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000007cc  01009f84  0100a750  0000af84  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000814  0100af1c  0100af1c  0000bf1c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0100b730  0100b730  0000b750  2**0
                  CONTENTS
  7 .comment      00000049  00000000  00000000  0000b750  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006f0  00000000  00000000  0000b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a45a  00000000  00000000  0000be90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000036b4  00000000  00000000  000162ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000038eb  00000000  00000000  0001999e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000010c0  00000000  00000000  0001d28c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000025bf  00000000  00000000  0001e34c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000011d7  00000000  00000000  0002090b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00021ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000158  00000000  00000000  00021b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00024553  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00024556  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00024562  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00024563  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00024564  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0002456f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0002457a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  00024585  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000038  00000000  00000000  00024593  2**0
                  CONTENTS, READONLY
 26 .jdi          00004399  00000000  00000000  000245cb  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00073d5b  00000000  00000000  00028964  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001bc l    d  .text	00000000 .text
01009df8 l    d  .rodata	00000000 .rodata
01009f84 l    d  .rwdata	00000000 .rwdata
0100af1c l    d  .bss	00000000 .bss
0100b730 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_stream_demo_bsp//obj/HAL/src/crt0.o
01000204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
01000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 stream.c
00000000 l    df *ABS*	00000000 sls_avalon_usb20.c
0100a710 l     O .rwdata	00000004 speed_changed.3975
01001bf4 l     F .text	00003068 sls_avalon_usb20_irq
00000000 l    df *ABS*	00000000 lib2-divmod.c
01006b00 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01006d64 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0100a37c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
01007660 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
010077ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01007934 l     F .text	00000038 alt_dev_reg
0100a45c l     O .rwdata	000000a4 dma_0_priv
0100a500 l     O .rwdata	0000001c dma_0_tx
0100a51c l     O .rwdata	0000001c dma_0_rx
0100a538 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
01007a0c l     F .text	00000038 alt_dma_txchan_reg
01007a44 l     F .text	00000038 alt_dma_rxchan_reg
01007b70 l     F .text	00000098 alt_avalon_dma_launch_txonly
01007c08 l     F .text	00000098 alt_avalon_dma_launch_rxonly
01007ca0 l     F .text	00000344 alt_avalon_dma_ioctl
01008358 l     F .text	000001bc alt_avalon_dma_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
010087fc l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
01008a50 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
01008bb4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01008be0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
01008cd4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
01008d78 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01009264 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0100939c l     F .text	00000050 alt_get_errno
010093ec l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01006138 g     F .text	00000798 usb20sr_with_dma_read
01007744 g     F .text	00000078 alt_main
01006cb4 g     F .text	00000080 _puts_r
0100b630 g     O .bss	00000100 alt_irq
0100a750 g       *ABS*	00000000 __flash_rwdata_start
0100a2c8 g     O .rwdata	0000003c ep_ip_int_hs
0100a340 g     O .rwdata	0000003c ep_ip_int_ls
01006c68 g     F .text	0000004c printf
01008514 g     F .text	000000b0 alt_avalon_dma_init
010068d0 g     F .text	00000174 usb20sr_check_bo_ready
01000b00 g     F .text	00000028 get_current_config
01005544 g     F .text	00000530 usb20sr_without_dma_write
00000000  w      *UND*	00000000 __errno
01000000 g     F .entry	0000001c __reset
01000894 g     F .text	00000030 usb20sr_phy_register_disable
0100a124 g     O .rwdata	0000003c ep_ip_csr_ls_
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100af20 g     O .bss	00000004 errno
0100af2c g     O .bss	00000004 alt_argv
0101270c g       *ABS*	00000000 _gp
010077bc g     F .text	00000030 usleep
01000b50 g     F .text	00000028 get_current_alt_settings
01008dc8 g     F .text	00000054 alt_dma_txchan_open
0100a58c g     O .rwdata	00000180 alt_fd_list
01006a44 g     F .text	000000bc usb20sr_check_bi_ready
0100065c g     F .text	0000002c HandleClassSpecificControlRequests
01008ed4 g     F .text	00000090 alt_find_dev
01009324 g     F .text	00000078 alt_io_redirect
01009df8 g       *ABS*	00000000 __DTOR_END__
01006d34 g     F .text	00000014 puts
01008684 g     F .text	000000e4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01006c2c g     F .text	0000003c _printf_r
01006c1c g     F .text	00000008 .hidden __udivsi3
010099f4 g     F .text	0000008c alt_icache_flush
01000620 g     F .text	0000003c USB_WakeUpCfg_Event
010019d0 g     F .text	00000180 USB_DisableEP
0100743c g     F .text	00000074 alt_dcache_flush
0100a730 g     O .rwdata	00000004 alt_max_fd
01000208 g     F .text	000001f0 configure_usb20sr
010074b0 g     F .text	000001b0 alt_irq_register
01001b50 g     F .text	00000068 usb20sr_connect
01000bf0 g     F .text	0000007c USB_SetStallEP
01000a5c g     F .text	00000038 get_current_micro_frame_no
01007a7c g     F .text	000000f4 alt_avalon_dma_launch_bidir
01008d24 g     F .text	00000054 alt_dma_rxchan_open
01004c5c g     F .text	0000014c usb20sr_config
0100a714 g     O .rwdata	00000004 _global_impure_ptr
0100b730 g       *ABS*	00000000 __bss_end
01009174 g     F .text	000000f0 alt_iic_isr_register
01009708 g     F .text	00000104 alt_tick
0100a0ac g     O .rwdata	0000003c ep_ip_csr_hs_
01009128 g     F .text	0000004c alt_ic_irq_enabled
0100a060 g     O .rwdata	0000000a device_quali_desc_
01009670 g     F .text	00000098 alt_alarm_stop
0100af24 g     O .bss	00000004 alt_irq_active
01004e1c g     F .text	00000728 usb20sr_with_dma_write
010000ec g     F .exceptions	000000d0 alt_irq_handler
0100a564 g     O .rwdata	00000028 alt_dev_null
01001bb8 g     F .text	0000003c usb20sr_disconnect
01008b70 g     F .text	00000044 alt_dcache_flush_all
0100a750 g       *ABS*	00000000 __ram_rwdata_end
01000000 g       *ABS*	00000000 __alt_mem_onchip_memory
010008c4 g     F .text	0000003c usb20sr_set_dev_speed
0100a728 g     O .rwdata	00000008 alt_dev_list
010081ac g     F .text	00000074 alt_avalon_dma_space
0100783c g     F .text	000000f8 write
0100085c g     F .text	00000038 usb20sr_phy_register_enable
01005a74 g     F .text	00000154 slsmemcpy
01009f84 g       *ABS*	00000000 __ram_rodata_end
01000550 g     F .text	00000034 USB_Detached_Event
01006c24 g     F .text	00000008 .hidden __umodsi3
01000a94 g     F .text	00000038 get_current_frame_no
010009a0 g     F .text	00000080 usb20sr_phy_register_read
0100b730 g       *ABS*	00000000 end
01000a20 g     F .text	0000003c usb20sr_set_low_power_mode
01009df8 g       *ABS*	00000000 __CTOR_LIST__
01020f58 g       *ABS*	00000000 __alt_stack_pointer
01008870 g     F .text	00000088 alt_avalon_timer_sc_init
01008768 g     F .text	00000094 altera_avalon_jtag_uart_write
0100a160 g     O .rwdata	0000003c ep_buf0_sz_hs_
01006dd0 g     F .text	00000544 ___vfprintf_internal_r
01000584 g     F .text	00000034 USB_Reset_Event
01008220 g     F .text	00000138 alt_avalon_dma_send
01009c28 g     F .text	0000019c __call_exitprocs
0100a73c g     O .rwdata	00000008 alt_dma_txchan_list
010006b4 g     F .text	000001a8 usb20sr_error_event
010001bc g     F .text	0000004c _start
0100af34 g     O .bss	00000004 _alt_tick_rate
0100af38 g     O .bss	00000004 _alt_nticks
010079a0 g     F .text	0000006c alt_sys_init
01009ae4 g     F .text	00000144 __register_exitproc
01000b28 g     F .text	00000028 get_current_interface
0100a250 g     O .rwdata	0000003c ep_buf0_sz_ls_
01009f84 g       *ABS*	00000000 __ram_rwdata_start
01009df8 g       *ABS*	00000000 __ram_rodata_start
01009f84 g     O .rwdata	00000012 device_desc_
0100a70c g     O .rwdata	00000004 supported_ep_
010085c4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01009940 g     F .text	000000b4 alt_get_fd
010088f8 g     F .text	00000158 alt_busy_sleep
01000e0c g     F .text	00000104 usb_ep_config
0100a08a g     O .rwdata	00000020 other_speed_conf_desc_fs_
01009ab4 g     F .text	00000030 memcmp
0100b730 g       *ABS*	00000000 __alt_stack_base
01004da8 g     F .text	00000074 usb20_event_isr
0100051c g     F .text	00000034 USB_Attached_Event
0100a010 g     O .rwdata	00000050 str_desc_
0100a1d8 g     O .rwdata	0000003c ep_buf0_sz_fs_
01005bc8 g     F .text	00000570 usb20sr_without_dma_read
0100982c g     F .text	00000114 alt_find_file
01008c30 g     F .text	000000a4 alt_dev_llist_insert
01007338 g     F .text	000000ac __sfvwrite_small_dev
0100a28c g     O .rwdata	0000003c ep_buf1_sz_ls_
0100af1c g       *ABS*	00000000 __bss_start
010003f8 g     F .text	00000124 main
0100802c g     F .text	00000048 alt_avalon_dma_rx_ioctl
0100af30 g     O .bss	00000004 alt_envp
01009ff8 g     O .rwdata	00000018 str_desc_indexes_
01009fd6 g     O .rwdata	00000020 conf_desc_ls_
01008624 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0100a06a g     O .rwdata	00000020 other_speed_conf_desc_hs_
01000928 g     F .text	00000078 usb20sr_phy_register_write
0100a744 g     O .rwdata	00000004 alt_errno
0100a304 g     O .rwdata	0000003c ep_ip_int_fs
01006b6c g     F .text	00000054 .hidden __divsi3
01009df8 g       *ABS*	00000000 __CTOR_END__
01009df8 g       *ABS*	00000000 __flash_rodata_start
01009df8 g       *ABS*	00000000 __DTOR_LIST__
0100af1c g     O .bss	00000004 pUsb20srDev
0100796c g     F .text	00000034 alt_irq_init
01009610 g     F .text	00000060 alt_release_fd
01000900 g     F .text	00000028 usb20sr_get_dev_speed
01009a80 g     F .text	00000014 atexit
010073e4 g     F .text	00000058 _write_r
010005ec g     F .text	00000034 USB_Suspend_Event
0100a718 g     O .rwdata	00000004 _impure_ptr
0100af28 g     O .bss	00000004 alt_argc
01008e78 g     F .text	0000005c _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01009f96 g     O .rwdata	00000020 conf_desc_hs_
0100a720 g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
01008f94 g     F .text	00000050 alt_ic_isr_register
010005b8 g     F .text	00000034 USB_Resume_Event
0100a750 g       *ABS*	00000000 _edata
0100b730 g       *ABS*	00000000 _end
010001bc g       *ABS*	00000000 __ram_exceptions_end
0100a0e8 g     O .rwdata	0000003c ep_ip_csr_fs_
0100a19c g     O .rwdata	0000003c ep_buf1_sz_hs_
01000cf0 g     F .text	0000011c usb_initialize_descriptor
01009084 g     F .text	000000a4 alt_ic_irq_disable
0100980c g     F .text	00000020 altera_nios2_qsys_irq_init
01009a94 g     F .text	00000020 exit
01006bc0 g     F .text	0000005c .hidden __modsi3
01020f58 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
0100a214 g     O .rwdata	0000003c ep_buf1_sz_fs_
01009dc4 g     F .text	00000034 _exit
01000f10 g     F .text	00000084 dma_config
01006d48 g     F .text	0000001c strlen
010094b8 g     F .text	00000158 open
01000bac g     F .text	00000044 SetRemoteWakeUp
01008f64 g     F .text	00000030 alt_icache_flush_all
0100a71c g     O .rwdata	00000004 alt_priority_mask
0100af3c g     O .bss	000006f4 usb20srdev
01008fe4 g     F .text	000000a0 alt_ic_irq_enable
01007314 g     F .text	00000024 __vfprintf_internal
01000b78 g     F .text	00000034 ifConfigured
01000c6c g     F .text	00000084 USB_ClrStallEP
01000688 g     F .text	0000002c HandleClassSpecificDescriptorRequests
01008074 g     F .text	00000138 alt_avalon_dma_prepare
0100a734 g     O .rwdata	00000008 alt_dma_rxchan_list
0100a748 g     O .rwdata	00000008 alt_alarm_list
01008e1c g     F .text	0000005c _do_ctors
01008aa0 g     F .text	000000d0 close
010076c4 g     F .text	00000080 alt_load
01007fe4 g     F .text	00000048 alt_avalon_dma_tx_ioctl
01000acc g     F .text	00000034 get_sof_time
00000000  w      *UND*	00000000 free
01000f94 g     F .text	00000a3c USB_EnableEP
01009fb6 g     O .rwdata	00000020 conf_desc_fs_



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__alt_data_end+0xfffdf0ac>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406f14 	ori	at,at,444
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__reset-0x1000000>

Disassembly of section .exceptions:

01000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)

01000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000100:	0005313a 	rdctl	r2,ipending
 1000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000114:	00800044 	movi	r2,1
 1000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100011c:	e0fffb17 	ldw	r3,-20(fp)
 1000120:	e0bffc17 	ldw	r2,-16(fp)
 1000124:	1884703a 	and	r2,r3,r2
 1000128:	10001426 	beq	r2,zero,100017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	00804074 	movhi	r2,257
 1000130:	10ad8c04 	addi	r2,r2,-18896
 1000134:	e0fffd17 	ldw	r3,-12(fp)
 1000138:	180690fa 	slli	r3,r3,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	10c00017 	ldw	r3,0(r2)
 1000144:	00804074 	movhi	r2,257
 1000148:	10ad8c04 	addi	r2,r2,-18896
 100014c:	e13ffd17 	ldw	r4,-12(fp)
 1000150:	200890fa 	slli	r4,r4,3
 1000154:	1105883a 	add	r2,r2,r4
 1000158:	10800104 	addi	r2,r2,4
 100015c:	10800017 	ldw	r2,0(r2)
 1000160:	1009883a 	mov	r4,r2
 1000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100016c:	0005313a 	rdctl	r2,ipending
 1000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	00000706 	br	1000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 100017c:	e0bffc17 	ldw	r2,-16(fp)
 1000180:	1085883a 	add	r2,r2,r2
 1000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1000188:	e0bffd17 	ldw	r2,-12(fp)
 100018c:	10800044 	addi	r2,r2,1
 1000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1000194:	003fe106 	br	100011c <__alt_data_end+0xfffdf1c4>

    active = alt_irq_pending ();
 1000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 100019c:	e0bffb17 	ldw	r2,-20(fp)
 10001a0:	103fdb1e 	bne	r2,zero,1000110 <__alt_data_end+0xfffdf1b8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10001a4:	0001883a 	nop
}
 10001a8:	e037883a 	mov	sp,fp
 10001ac:	dfc00117 	ldw	ra,4(sp)
 10001b0:	df000017 	ldw	fp,0(sp)
 10001b4:	dec00204 	addi	sp,sp,8
 10001b8:	f800283a 	ret

Disassembly of section .text:

010001bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001c0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 10001c8:	00bffd16 	blt	zero,r2,10001c0 <__alt_data_end+0xfffdf268>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001cc:	06c040b4 	movhi	sp,258
    ori sp, sp, %lo(__alt_stack_pointer)
 10001d0:	dec3d614 	ori	sp,sp,3928
    movhi gp, %hi(_gp)
 10001d4:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001d8:	d689c314 	ori	gp,gp,9996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001dc:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 10001e0:	10abc714 	ori	r2,r2,44828

    movhi r3, %hi(__bss_end)
 10001e4:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 10001e8:	18edcc14 	ori	r3,r3,46896

    beq r2, r3, 1f
 10001ec:	10c00326 	beq	r2,r3,10001fc <_start+0x40>

0:
    stw zero, (r2)
 10001f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f8:	10fffd36 	bltu	r2,r3,10001f0 <__alt_data_end+0xfffdf298>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001fc:	10076c40 	call	10076c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000200:	10077440 	call	1007744 <alt_main>

01000204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000204:	003fff06 	br	1000204 <__alt_data_end+0xfffdf2ac>

01000208 <configure_usb20sr>:

sls_avalon_usb20sr_dev *pUsb20srDev;
sls_avalon_usb20sr_dev usb20srdev;

void configure_usb20sr(sls_avalon_usb20sr_dev *pUsb20srDev)
{
 1000208:	defff204 	addi	sp,sp,-56
 100020c:	dfc00d15 	stw	ra,52(sp)
 1000210:	df000c15 	stw	fp,48(sp)
 1000214:	df000c04 	addi	fp,sp,48
 1000218:	e13fff15 	stw	r4,-4(fp)
	usb_initialize_descriptor(pUsb20srDev,(unsigned char*)device_desc_,
 100021c:	00804074 	movhi	r2,257
 1000220:	10a7f584 	addi	r2,r2,-24618
 1000224:	d8800015 	stw	r2,0(sp)
 1000228:	00800804 	movi	r2,32
 100022c:	d8800115 	stw	r2,4(sp)
 1000230:	00800804 	movi	r2,32
 1000234:	d8800215 	stw	r2,8(sp)
 1000238:	00800804 	movi	r2,32
 100023c:	d8800315 	stw	r2,12(sp)
 1000240:	00804074 	movhi	r2,257
 1000244:	10a7fe04 	addi	r2,r2,-24584
 1000248:	d8800415 	stw	r2,16(sp)
 100024c:	00804074 	movhi	r2,257
 1000250:	10a80404 	addi	r2,r2,-24560
 1000254:	d8800515 	stw	r2,20(sp)
 1000258:	00800604 	movi	r2,24
 100025c:	d8800615 	stw	r2,24(sp)
 1000260:	00804074 	movhi	r2,257
 1000264:	10a81804 	addi	r2,r2,-24480
 1000268:	d8800715 	stw	r2,28(sp)
 100026c:	00804074 	movhi	r2,257
 1000270:	10a81a84 	addi	r2,r2,-24470
 1000274:	d8800815 	stw	r2,32(sp)
 1000278:	00804074 	movhi	r2,257
 100027c:	10a82284 	addi	r2,r2,-24438
 1000280:	d8800915 	stw	r2,36(sp)
 1000284:	e13fff17 	ldw	r4,-4(fp)
 1000288:	01404074 	movhi	r5,257
 100028c:	2967e104 	addi	r5,r5,-24700
 1000290:	01804074 	movhi	r6,257
 1000294:	31a7e584 	addi	r6,r6,-24682
 1000298:	01c04074 	movhi	r7,257
 100029c:	39e7ed84 	addi	r7,r7,-24650
 10002a0:	1000cf00 	call	1000cf0 <usb_initialize_descriptor>
										  sizeof(str_desc_indexes_),
										  (unsigned char*)device_quali_desc_,
										  (unsigned char*)other_speed_conf_desc_hs_,
										  (unsigned char*)other_speed_conf_desc_fs_);

	usb_ep_config(      pUsb20srDev,    SUPPORTED_CONF,     supported_ep_,      ep_ip_csr_hs_,      ep_ip_csr_fs_,		ep_ip_csr_ls_,
 10002a4:	00804074 	movhi	r2,257
 10002a8:	10a83a04 	addi	r2,r2,-24344
 10002ac:	d8800015 	stw	r2,0(sp)
 10002b0:	00804074 	movhi	r2,257
 10002b4:	10a84904 	addi	r2,r2,-24284
 10002b8:	d8800115 	stw	r2,4(sp)
 10002bc:	00804074 	movhi	r2,257
 10002c0:	10a85804 	addi	r2,r2,-24224
 10002c4:	d8800215 	stw	r2,8(sp)
 10002c8:	00804074 	movhi	r2,257
 10002cc:	10a86704 	addi	r2,r2,-24164
 10002d0:	d8800315 	stw	r2,12(sp)
 10002d4:	00804074 	movhi	r2,257
 10002d8:	10a87604 	addi	r2,r2,-24104
 10002dc:	d8800415 	stw	r2,16(sp)
 10002e0:	00804074 	movhi	r2,257
 10002e4:	10a88504 	addi	r2,r2,-24044
 10002e8:	d8800515 	stw	r2,20(sp)
 10002ec:	00804074 	movhi	r2,257
 10002f0:	10a89404 	addi	r2,r2,-23984
 10002f4:	d8800615 	stw	r2,24(sp)
 10002f8:	00804074 	movhi	r2,257
 10002fc:	10a8a304 	addi	r2,r2,-23924
 1000300:	d8800715 	stw	r2,28(sp)
 1000304:	00804074 	movhi	r2,257
 1000308:	10a8b204 	addi	r2,r2,-23864
 100030c:	d8800815 	stw	r2,32(sp)
 1000310:	00804074 	movhi	r2,257
 1000314:	10a8c104 	addi	r2,r2,-23804
 1000318:	d8800915 	stw	r2,36(sp)
 100031c:	00804074 	movhi	r2,257
 1000320:	10a8d004 	addi	r2,r2,-23744
 1000324:	d8800a15 	stw	r2,40(sp)
 1000328:	e13fff17 	ldw	r4,-4(fp)
 100032c:	01400044 	movi	r5,1
 1000330:	d1a00004 	addi	r6,gp,-32768
 1000334:	01c04074 	movhi	r7,257
 1000338:	39e82b04 	addi	r7,r7,-24404
 100033c:	1000e0c0 	call	1000e0c <usb_ep_config>
						ep_buf0_sz_hs_, ep_buf1_sz_hs_,     ep_buf0_sz_fs_,     ep_buf1_sz_fs_, 	ep_buf0_sz_ls_, 	ep_buf1_sz_ls_,
						ep_ip_int_hs,	ep_ip_int_fs,		ep_ip_int_ls     );

    /*Use DMA/UDSC's BASE, IRQ & NAME from system.h file*/

	dma_config(pUsb20srDev, DMA_0_BASE, DMA_0_IRQ, DMA_0_NAME, DMA_FLAG);		/*set DMA_FLAG as 1 while using DMA*/
 1000340:	00800044 	movi	r2,1
 1000344:	d8800015 	stw	r2,0(sp)
 1000348:	e13fff17 	ldw	r4,-4(fp)
 100034c:	01404134 	movhi	r5,260
 1000350:	29440004 	addi	r5,r5,4096
 1000354:	018000c4 	movi	r6,3
 1000358:	01c04074 	movhi	r7,257
 100035c:	39e77e04 	addi	r7,r7,-25096
 1000360:	1000f100 	call	1000f10 <dma_config>

	//dma_config(pUsb20srDev, UDSC_BASE, UDSC_IRQ, UDSC_NAME, DMA_FLAG);	     /*set DMA_FLAG as 0 while using UDSC*/

	usb20_event_isr(pUsb20srDev, USB_Attached_Event, USB_Detached_Event, USB_Reset_Event, USB_Resume_Event, USB_Suspend_Event, USB_WakeUpCfg_Event);
 1000364:	00804034 	movhi	r2,256
 1000368:	10816e04 	addi	r2,r2,1464
 100036c:	d8800015 	stw	r2,0(sp)
 1000370:	00804034 	movhi	r2,256
 1000374:	10817b04 	addi	r2,r2,1516
 1000378:	d8800115 	stw	r2,4(sp)
 100037c:	00804034 	movhi	r2,256
 1000380:	10818804 	addi	r2,r2,1568
 1000384:	d8800215 	stw	r2,8(sp)
 1000388:	e13fff17 	ldw	r4,-4(fp)
 100038c:	01404034 	movhi	r5,256
 1000390:	29414704 	addi	r5,r5,1308
 1000394:	01804034 	movhi	r6,256
 1000398:	31815404 	addi	r6,r6,1360
 100039c:	01c04034 	movhi	r7,256
 10003a0:	39c16104 	addi	r7,r7,1412
 10003a4:	1004da80 	call	1004da8 <usb20_event_isr>

    if(usb20sr_config(pUsb20srDev, USB20SR_BASE, USB20SR_IRQ, USB20SR_NAME, usb20sr_error_event, HandleClassSpecificControlRequests,HandleClassSpecificDescriptorRequests))
 10003a8:	00804034 	movhi	r2,256
 10003ac:	1081ad04 	addi	r2,r2,1716
 10003b0:	d8800015 	stw	r2,0(sp)
 10003b4:	00804034 	movhi	r2,256
 10003b8:	10819704 	addi	r2,r2,1628
 10003bc:	d8800115 	stw	r2,4(sp)
 10003c0:	00804034 	movhi	r2,256
 10003c4:	1081a204 	addi	r2,r2,1672
 10003c8:	d8800215 	stw	r2,8(sp)
 10003cc:	e13fff17 	ldw	r4,-4(fp)
 10003d0:	000b883a 	mov	r5,zero
 10003d4:	01800084 	movi	r6,2
 10003d8:	01c04074 	movhi	r7,257
 10003dc:	39e78104 	addi	r7,r7,-25084
 10003e0:	1004c5c0 	call	1004c5c <usb20sr_config>
    {}
}
 10003e4:	e037883a 	mov	sp,fp
 10003e8:	dfc00117 	ldw	ra,4(sp)
 10003ec:	df000017 	ldw	fp,0(sp)
 10003f0:	dec00204 	addi	sp,sp,8
 10003f4:	f800283a 	ret

010003f8 <main>:
#endif

#ifdef WRITE_STREAM

int main()
{
 10003f8:	deff7b04 	addi	sp,sp,-532
 10003fc:	dfc08415 	stw	ra,528(sp)
 1000400:	df008315 	stw	fp,524(sp)
 1000404:	df008304 	addi	fp,sp,524
    int write_count = 0, i = 0;
 1000408:	e03f7f15 	stw	zero,-516(fp)
 100040c:	e03f7e15 	stw	zero,-520(fp)
    unsigned char buf[DATA];

    //ext reset usb20sr, high active
    IOWR_ALTERA_AVALON_PIO_DATA(RST_PIO_BASE,0);
 1000410:	0007883a 	mov	r3,zero
 1000414:	00808034 	movhi	r2,512
 1000418:	10800804 	addi	r2,r2,32
 100041c:	10c00035 	stwio	r3,0(r2)
    usleep(20*1000);
 1000420:	01138804 	movi	r4,20000
 1000424:	10077bc0 	call	10077bc <usleep>

    pUsb20srDev = &usb20srdev;
 1000428:	00804074 	movhi	r2,257
 100042c:	10abcf04 	addi	r2,r2,-20676
 1000430:	d0a20415 	stw	r2,-30704(gp)

    configure_usb20sr(pUsb20srDev);
 1000434:	d0a20417 	ldw	r2,-30704(gp)
 1000438:	1009883a 	mov	r4,r2
 100043c:	10002080 	call	1000208 <configure_usb20sr>

    usb20sr_disconnect(pUsb20srDev);
 1000440:	d0a20417 	ldw	r2,-30704(gp)
 1000444:	1009883a 	mov	r4,r2
 1000448:	1001bb80 	call	1001bb8 <usb20sr_disconnect>

    usb20sr_set_dev_speed(pUsb20srDev, 1);     /*Connect device in the full speed(0)/high speed(1) mode*/
 100044c:	d0a20417 	ldw	r2,-30704(gp)
 1000450:	1009883a 	mov	r4,r2
 1000454:	01400044 	movi	r5,1
 1000458:	10008c40 	call	10008c4 <usb20sr_set_dev_speed>

    usb20sr_connect(pUsb20srDev);
 100045c:	d0a20417 	ldw	r2,-30704(gp)
 1000460:	1009883a 	mov	r4,r2
 1000464:	1001b500 	call	1001b50 <usb20sr_connect>
    printf("Connect !\n");
 1000468:	01004074 	movhi	r4,257
 100046c:	21278504 	addi	r4,r4,-25068
 1000470:	1006d340 	call	1006d34 <puts>
    while(!(ifConfigured(pUsb20srDev)));        /*Check whether device is Configured or not*/
 1000474:	0001883a 	nop
 1000478:	d0a20417 	ldw	r2,-30704(gp)
 100047c:	1009883a 	mov	r4,r2
 1000480:	1000b780 	call	1000b78 <ifConfigured>
 1000484:	10803fcc 	andi	r2,r2,255
 1000488:	1080201c 	xori	r2,r2,128
 100048c:	10bfe004 	addi	r2,r2,-128
 1000490:	103ff926 	beq	r2,zero,1000478 <__alt_data_end+0xfffdf520>
    printf("\nConfigured !\n");
 1000494:	01004074 	movhi	r4,257
 1000498:	21278804 	addi	r4,r4,-25056
 100049c:	1006d340 	call	1006d34 <puts>

    for(i=0;i<DATA;i++)
 10004a0:	e03f7e15 	stw	zero,-520(fp)
 10004a4:	00000906 	br	10004cc <main+0xd4>
    	buf[i]=i;
 10004a8:	e0bf7e17 	ldw	r2,-520(fp)
 10004ac:	1009883a 	mov	r4,r2
 10004b0:	e0ff8004 	addi	r3,fp,-512
 10004b4:	e0bf7e17 	ldw	r2,-520(fp)
 10004b8:	1885883a 	add	r2,r3,r2
 10004bc:	11000005 	stb	r4,0(r2)
    usb20sr_connect(pUsb20srDev);
    printf("Connect !\n");
    while(!(ifConfigured(pUsb20srDev)));        /*Check whether device is Configured or not*/
    printf("\nConfigured !\n");

    for(i=0;i<DATA;i++)
 10004c0:	e0bf7e17 	ldw	r2,-520(fp)
 10004c4:	10800044 	addi	r2,r2,1
 10004c8:	e0bf7e15 	stw	r2,-520(fp)
 10004cc:	e0bf7e17 	ldw	r2,-520(fp)
 10004d0:	10808010 	cmplti	r2,r2,512
 10004d4:	103ff41e 	bne	r2,zero,10004a8 <__alt_data_end+0xfffdf550>
    	buf[i]=i;

    while(1)
    {
        if((i = usb20sr_check_bi_ready(pUsb20srDev, 1)) > -1)
 10004d8:	d0a20417 	ldw	r2,-30704(gp)
 10004dc:	1009883a 	mov	r4,r2
 10004e0:	01400044 	movi	r5,1
 10004e4:	1006a440 	call	1006a44 <usb20sr_check_bi_ready>
 10004e8:	e0bf7e15 	stw	r2,-520(fp)
 10004ec:	e0bf7e17 	ldw	r2,-520(fp)
 10004f0:	10000916 	blt	r2,zero,1000518 <main+0x120>
        {
            #ifdef DMA_USE
                write_count = usb20sr_with_dma_write(pUsb20srDev, 1, buf, DATA, DMA_FLAG);
 10004f4:	d1220417 	ldw	r4,-30704(gp)
 10004f8:	e0ff8004 	addi	r3,fp,-512
 10004fc:	00800044 	movi	r2,1
 1000500:	d8800015 	stw	r2,0(sp)
 1000504:	01400044 	movi	r5,1
 1000508:	180d883a 	mov	r6,r3
 100050c:	01c08004 	movi	r7,512
 1000510:	1004e1c0 	call	1004e1c <usb20sr_with_dma_write>
 1000514:	e0bf7f15 	stw	r2,-516(fp)
            #else
                write_count = usb20sr_without_dma_write(pUsb20srDev, 1, buf, DATA);
            #endif
        }
    }
 1000518:	003fef06 	br	10004d8 <__alt_data_end+0xfffdf580>

0100051c <USB_Attached_Event>:
}

void USB_Attached_Event(sls_avalon_usb20sr_dev *usb20dev)
{
 100051c:	defffd04 	addi	sp,sp,-12
 1000520:	dfc00215 	stw	ra,8(sp)
 1000524:	df000115 	stw	fp,4(sp)
 1000528:	df000104 	addi	fp,sp,4
 100052c:	e13fff15 	stw	r4,-4(fp)
    printf("\nAttEvent\n");
 1000530:	01004074 	movhi	r4,257
 1000534:	21278c04 	addi	r4,r4,-25040
 1000538:	1006d340 	call	1006d34 <puts>
}
 100053c:	e037883a 	mov	sp,fp
 1000540:	dfc00117 	ldw	ra,4(sp)
 1000544:	df000017 	ldw	fp,0(sp)
 1000548:	dec00204 	addi	sp,sp,8
 100054c:	f800283a 	ret

01000550 <USB_Detached_Event>:

void USB_Detached_Event(sls_avalon_usb20sr_dev *usb20dev)
{
 1000550:	defffd04 	addi	sp,sp,-12
 1000554:	dfc00215 	stw	ra,8(sp)
 1000558:	df000115 	stw	fp,4(sp)
 100055c:	df000104 	addi	fp,sp,4
 1000560:	e13fff15 	stw	r4,-4(fp)
    printf("\nDetaEvent\n");
 1000564:	01004074 	movhi	r4,257
 1000568:	21278f04 	addi	r4,r4,-25028
 100056c:	1006d340 	call	1006d34 <puts>
}
 1000570:	e037883a 	mov	sp,fp
 1000574:	dfc00117 	ldw	ra,4(sp)
 1000578:	df000017 	ldw	fp,0(sp)
 100057c:	dec00204 	addi	sp,sp,8
 1000580:	f800283a 	ret

01000584 <USB_Reset_Event>:

void USB_Reset_Event(sls_avalon_usb20sr_dev *usb20dev)
{
 1000584:	defffd04 	addi	sp,sp,-12
 1000588:	dfc00215 	stw	ra,8(sp)
 100058c:	df000115 	stw	fp,4(sp)
 1000590:	df000104 	addi	fp,sp,4
 1000594:	e13fff15 	stw	r4,-4(fp)
    printf("\nResetEvent\n");
 1000598:	01004074 	movhi	r4,257
 100059c:	21279204 	addi	r4,r4,-25016
 10005a0:	1006d340 	call	1006d34 <puts>
}
 10005a4:	e037883a 	mov	sp,fp
 10005a8:	dfc00117 	ldw	ra,4(sp)
 10005ac:	df000017 	ldw	fp,0(sp)
 10005b0:	dec00204 	addi	sp,sp,8
 10005b4:	f800283a 	ret

010005b8 <USB_Resume_Event>:

void USB_Resume_Event(sls_avalon_usb20sr_dev *usb20dev)
{
 10005b8:	defffd04 	addi	sp,sp,-12
 10005bc:	dfc00215 	stw	ra,8(sp)
 10005c0:	df000115 	stw	fp,4(sp)
 10005c4:	df000104 	addi	fp,sp,4
 10005c8:	e13fff15 	stw	r4,-4(fp)
    printf("\nResume\n");
 10005cc:	01004074 	movhi	r4,257
 10005d0:	21279504 	addi	r4,r4,-25004
 10005d4:	1006d340 	call	1006d34 <puts>
}
 10005d8:	e037883a 	mov	sp,fp
 10005dc:	dfc00117 	ldw	ra,4(sp)
 10005e0:	df000017 	ldw	fp,0(sp)
 10005e4:	dec00204 	addi	sp,sp,8
 10005e8:	f800283a 	ret

010005ec <USB_Suspend_Event>:

void USB_Suspend_Event(sls_avalon_usb20sr_dev *usb20dev)
{
 10005ec:	defffd04 	addi	sp,sp,-12
 10005f0:	dfc00215 	stw	ra,8(sp)
 10005f4:	df000115 	stw	fp,4(sp)
 10005f8:	df000104 	addi	fp,sp,4
 10005fc:	e13fff15 	stw	r4,-4(fp)
    printf("\nSuspend\n");
 1000600:	01004074 	movhi	r4,257
 1000604:	21279704 	addi	r4,r4,-24996
 1000608:	1006d340 	call	1006d34 <puts>
}
 100060c:	e037883a 	mov	sp,fp
 1000610:	dfc00117 	ldw	ra,4(sp)
 1000614:	df000017 	ldw	fp,0(sp)
 1000618:	dec00204 	addi	sp,sp,8
 100061c:	f800283a 	ret

01000620 <USB_WakeUpCfg_Event>:

void USB_WakeUpCfg_Event(sls_avalon_usb20sr_dev *usb20dev, unsigned char cfg)
{
 1000620:	defffc04 	addi	sp,sp,-16
 1000624:	dfc00315 	stw	ra,12(sp)
 1000628:	df000215 	stw	fp,8(sp)
 100062c:	df000204 	addi	fp,sp,8
 1000630:	e13ffe15 	stw	r4,-8(fp)
 1000634:	2805883a 	mov	r2,r5
 1000638:	e0bfff05 	stb	r2,-4(fp)
    printf("\nWakeUpCfgEvent\n");
 100063c:	01004074 	movhi	r4,257
 1000640:	21279a04 	addi	r4,r4,-24984
 1000644:	1006d340 	call	1006d34 <puts>
}
 1000648:	e037883a 	mov	sp,fp
 100064c:	dfc00117 	ldw	ra,4(sp)
 1000650:	df000017 	ldw	fp,0(sp)
 1000654:	dec00204 	addi	sp,sp,8
 1000658:	f800283a 	ret

0100065c <HandleClassSpecificControlRequests>:

void HandleClassSpecificControlRequests(volatile __CONTROL_REQUEST_STATUS *CONTROL_REQUEST_STATUS,
                                        volatile unsigned int base, char stage)
{
 100065c:	defffc04 	addi	sp,sp,-16
 1000660:	df000315 	stw	fp,12(sp)
 1000664:	df000304 	addi	fp,sp,12
 1000668:	e13ffd15 	stw	r4,-12(fp)
 100066c:	e17ffe15 	stw	r5,-8(fp)
 1000670:	3005883a 	mov	r2,r6
 1000674:	e0bfff05 	stb	r2,-4(fp)

}
 1000678:	e037883a 	mov	sp,fp
 100067c:	df000017 	ldw	fp,0(sp)
 1000680:	dec00104 	addi	sp,sp,4
 1000684:	f800283a 	ret

01000688 <HandleClassSpecificDescriptorRequests>:
void HandleClassSpecificDescriptorRequests(volatile __CONTROL_REQUEST_STATUS *CONTROL_REQUEST_STATUS,
											   volatile unsigned int base, char stage)
{
 1000688:	defffc04 	addi	sp,sp,-16
 100068c:	df000315 	stw	fp,12(sp)
 1000690:	df000304 	addi	fp,sp,12
 1000694:	e13ffd15 	stw	r4,-12(fp)
 1000698:	e17ffe15 	stw	r5,-8(fp)
 100069c:	3005883a 	mov	r2,r6
 10006a0:	e0bfff05 	stb	r2,-4(fp)

}
 10006a4:	e037883a 	mov	sp,fp
 10006a8:	df000017 	ldw	fp,0(sp)
 10006ac:	dec00104 	addi	sp,sp,4
 10006b0:	f800283a 	ret

010006b4 <usb20sr_error_event>:

#define PRINTF_USB_EVENT(str,...) printf(str,##__VA_ARGS__)

void usb20sr_error_event(int event)
{
 10006b4:	defffc04 	addi	sp,sp,-16
 10006b8:	dfc00315 	stw	ra,12(sp)
 10006bc:	df000215 	stw	fp,8(sp)
 10006c0:	df000204 	addi	fp,sp,8
 10006c4:	e13fff15 	stw	r4,-4(fp)
    volatile int data = event & ERROR_CODE_MASK;
 10006c8:	e0ffff17 	ldw	r3,-4(fp)
 10006cc:	00800834 	movhi	r2,32
 10006d0:	10a3ffc4 	addi	r2,r2,-28673
 10006d4:	1884703a 	and	r2,r3,r2
 10006d8:	e0bffe15 	stw	r2,-8(fp)

    if(event & EP_NO_FROM_GENERATED_ERROR_MASK)
 10006dc:	e0bfff17 	ldw	r2,-4(fp)
 10006e0:	10b3c02c 	andhi	r2,r2,52992
 10006e4:	10001f26 	beq	r2,zero,1000764 <usb20sr_error_event+0xb0>
    {
        if(((event & EP_TYPE_MASK) >> 30) == IN_EP_TYPE)
 10006e8:	e0bfff17 	ldw	r2,-4(fp)
 10006ec:	1004d7ba 	srli	r2,r2,30
 10006f0:	10800058 	cmpnei	r2,r2,1
 10006f4:	1000041e 	bne	r2,zero,1000708 <usb20sr_error_event+0x54>
            PRINTF_USB_EVENT("IN ");
 10006f8:	01004074 	movhi	r4,257
 10006fc:	21279e04 	addi	r4,r4,-24968
 1000700:	1006c680 	call	1006c68 <printf>
 1000704:	00000f06 	br	1000744 <usb20sr_error_event+0x90>
        else if(((event & EP_TYPE_MASK) >> 30) == OUT_EP_TYPE)
 1000708:	e0bfff17 	ldw	r2,-4(fp)
 100070c:	1004d7ba 	srli	r2,r2,30
 1000710:	10800098 	cmpnei	r2,r2,2
 1000714:	1000041e 	bne	r2,zero,1000728 <usb20sr_error_event+0x74>
            PRINTF_USB_EVENT("OUT ");
 1000718:	01004074 	movhi	r4,257
 100071c:	21279f04 	addi	r4,r4,-24964
 1000720:	1006c680 	call	1006c68 <printf>
 1000724:	00000706 	br	1000744 <usb20sr_error_event+0x90>
        else if(((event & EP_TYPE_MASK) >> 30) == CONTROL_EP_TYPE)
 1000728:	e0bfff17 	ldw	r2,-4(fp)
 100072c:	1004d7ba 	srli	r2,r2,30
 1000730:	108000d8 	cmpnei	r2,r2,3
 1000734:	1000031e 	bne	r2,zero,1000744 <usb20sr_error_event+0x90>
            PRINTF_USB_EVENT("CONTROL ");
 1000738:	01004074 	movhi	r4,257
 100073c:	2127a104 	addi	r4,r4,-24956
 1000740:	1006c680 	call	1006c68 <printf>

        PRINTF_USB_EVENT("Endpoint %d cause ", (event & EP_NO_MASK) >> 24);
 1000744:	e0bfff17 	ldw	r2,-4(fp)
 1000748:	1083c02c 	andhi	r2,r2,3840
 100074c:	1005d63a 	srai	r2,r2,24
 1000750:	01004074 	movhi	r4,257
 1000754:	2127a404 	addi	r4,r4,-24944
 1000758:	100b883a 	mov	r5,r2
 100075c:	1006c680 	call	1006c68 <printf>
 1000760:	00000306 	br	1000770 <usb20sr_error_event+0xbc>
    }
    else
        PRINTF_USB_EVENT("\nUSB cause ");
 1000764:	01004074 	movhi	r4,257
 1000768:	2127a904 	addi	r4,r4,-24924
 100076c:	1006c680 	call	1006c68 <printf>

    if(data & TIME_OUT_ERROR)
 1000770:	e0bffe17 	ldw	r2,-8(fp)
 1000774:	1080004c 	andi	r2,r2,1
 1000778:	10000326 	beq	r2,zero,1000788 <usb20sr_error_event+0xd4>
        PRINTF_USB_EVENT("TIME_OUT_ERROR\n");
 100077c:	01004074 	movhi	r4,257
 1000780:	2127ac04 	addi	r4,r4,-24912
 1000784:	1006d340 	call	1006d34 <puts>

    if(data & BAD_PCK_ERROR)
 1000788:	e0bffe17 	ldw	r2,-8(fp)
 100078c:	1080008c 	andi	r2,r2,2
 1000790:	10000326 	beq	r2,zero,10007a0 <usb20sr_error_event+0xec>
        PRINTF_USB_EVENT("BAD_PCK_ERROR\n");
 1000794:	01004074 	movhi	r4,257
 1000798:	2127b004 	addi	r4,r4,-24896
 100079c:	1006d340 	call	1006d34 <puts>

    if(data & UNEXPTED_PID_ERROR)
 10007a0:	e0bffe17 	ldw	r2,-8(fp)
 10007a4:	1080010c 	andi	r2,r2,4
 10007a8:	10000326 	beq	r2,zero,10007b8 <usb20sr_error_event+0x104>
        PRINTF_USB_EVENT("UNEXPECTED_PID_ERROR\n");
 10007ac:	01004074 	movhi	r4,257
 10007b0:	2127b404 	addi	r4,r4,-24880
 10007b4:	1006d340 	call	1006d34 <puts>

    if(data & PID_SEQ_ERROR)
 10007b8:	e0bffe17 	ldw	r2,-8(fp)
 10007bc:	1080080c 	andi	r2,r2,32
 10007c0:	10000326 	beq	r2,zero,10007d0 <usb20sr_error_event+0x11c>
        PRINTF_USB_EVENT("PID_SEQ_ERROR\n");
 10007c4:	01004074 	movhi	r4,257
 10007c8:	2127ba04 	addi	r4,r4,-24856
 10007cc:	1006d340 	call	1006d34 <puts>

    if(data & BAD_TCKN_ERROR)
 10007d0:	e0bffe17 	ldw	r2,-8(fp)
 10007d4:	1080400c 	andi	r2,r2,256
 10007d8:	10000326 	beq	r2,zero,10007e8 <usb20sr_error_event+0x134>
        PRINTF_USB_EVENT("BAD_TCKN_ERROR\n");
 10007dc:	01004074 	movhi	r4,257
 10007e0:	2127be04 	addi	r4,r4,-24840
 10007e4:	1006d340 	call	1006d34 <puts>

    if(data & PID_ERROR)
 10007e8:	e0bffe17 	ldw	r2,-8(fp)
 10007ec:	1080800c 	andi	r2,r2,512
 10007f0:	10000326 	beq	r2,zero,1000800 <usb20sr_error_event+0x14c>
        PRINTF_USB_EVENT("PID_ERROR\n");
 10007f4:	01004074 	movhi	r4,257
 10007f8:	2127c204 	addi	r4,r4,-24824
 10007fc:	1006d340 	call	1006d34 <puts>

    if(data & NO_EP_ERROR)
 1000800:	e0bffe17 	ldw	r2,-8(fp)
 1000804:	1081000c 	andi	r2,r2,1024
 1000808:	10000326 	beq	r2,zero,1000818 <usb20sr_error_event+0x164>
        PRINTF_USB_EVENT("NO_EP_ERROR\n");
 100080c:	01004074 	movhi	r4,257
 1000810:	2127c504 	addi	r4,r4,-24812
 1000814:	1006d340 	call	1006d34 <puts>

    if(data & UTMI_RX_ERROR)
 1000818:	e0bffe17 	ldw	r2,-8(fp)
 100081c:	10a0000c 	andi	r2,r2,32768
 1000820:	10000326 	beq	r2,zero,1000830 <usb20sr_error_event+0x17c>
        PRINTF_USB_EVENT("UTMI_RX_ERROR\n");
 1000824:	01004074 	movhi	r4,257
 1000828:	2127c804 	addi	r4,r4,-24800
 100082c:	1006d340 	call	1006d34 <puts>

    if(data & ISO_PKT_LOSS)
 1000830:	e0bffe17 	ldw	r2,-8(fp)
 1000834:	1080200c 	andi	r2,r2,128
 1000838:	10000326 	beq	r2,zero,1000848 <usb20sr_error_event+0x194>
        PRINTF_USB_EVENT("ISO_PKT_LOSS\n");
 100083c:	01004074 	movhi	r4,257
 1000840:	2127cc04 	addi	r4,r4,-24784
 1000844:	1006d340 	call	1006d34 <puts>
}
 1000848:	e037883a 	mov	sp,fp
 100084c:	dfc00117 	ldw	ra,4(sp)
 1000850:	df000017 	ldw	fp,0(sp)
 1000854:	dec00204 	addi	sp,sp,8
 1000858:	f800283a 	ret

0100085c <usb20sr_phy_register_enable>:
 100085c:	defffe04 	addi	sp,sp,-8
 1000860:	df000115 	stw	fp,4(sp)
 1000864:	df000104 	addi	fp,sp,4
 1000868:	e13fff15 	stw	r4,-4(fp)
 100086c:	e0bfff17 	ldw	r2,-4(fp)
 1000870:	10801517 	ldw	r2,84(r2)
 1000874:	10807c04 	addi	r2,r2,496
 1000878:	1007883a 	mov	r3,r2
 100087c:	00800044 	movi	r2,1
 1000880:	18800025 	stbio	r2,0(r3)
 1000884:	e037883a 	mov	sp,fp
 1000888:	df000017 	ldw	fp,0(sp)
 100088c:	dec00104 	addi	sp,sp,4
 1000890:	f800283a 	ret

01000894 <usb20sr_phy_register_disable>:
 1000894:	defffe04 	addi	sp,sp,-8
 1000898:	df000115 	stw	fp,4(sp)
 100089c:	df000104 	addi	fp,sp,4
 10008a0:	e13fff15 	stw	r4,-4(fp)
 10008a4:	e0bfff17 	ldw	r2,-4(fp)
 10008a8:	10801517 	ldw	r2,84(r2)
 10008ac:	10807c04 	addi	r2,r2,496
 10008b0:	10000025 	stbio	zero,0(r2)
 10008b4:	e037883a 	mov	sp,fp
 10008b8:	df000017 	ldw	fp,0(sp)
 10008bc:	dec00104 	addi	sp,sp,4
 10008c0:	f800283a 	ret

010008c4 <usb20sr_set_dev_speed>:
 10008c4:	defffd04 	addi	sp,sp,-12
 10008c8:	df000215 	stw	fp,8(sp)
 10008cc:	df000204 	addi	fp,sp,8
 10008d0:	e13ffe15 	stw	r4,-8(fp)
 10008d4:	e17fff15 	stw	r5,-4(fp)
 10008d8:	e0bffe17 	ldw	r2,-8(fp)
 10008dc:	10801517 	ldw	r2,84(r2)
 10008e0:	10807e04 	addi	r2,r2,504
 10008e4:	1007883a 	mov	r3,r2
 10008e8:	e0bfff17 	ldw	r2,-4(fp)
 10008ec:	18800025 	stbio	r2,0(r3)
 10008f0:	e037883a 	mov	sp,fp
 10008f4:	df000017 	ldw	fp,0(sp)
 10008f8:	dec00104 	addi	sp,sp,4
 10008fc:	f800283a 	ret

01000900 <usb20sr_get_dev_speed>:
 1000900:	defffe04 	addi	sp,sp,-8
 1000904:	df000115 	stw	fp,4(sp)
 1000908:	df000104 	addi	fp,sp,4
 100090c:	e13fff15 	stw	r4,-4(fp)
 1000910:	e0bfff17 	ldw	r2,-4(fp)
 1000914:	10800c17 	ldw	r2,48(r2)
 1000918:	e037883a 	mov	sp,fp
 100091c:	df000017 	ldw	fp,0(sp)
 1000920:	dec00104 	addi	sp,sp,4
 1000924:	f800283a 	ret

01000928 <usb20sr_phy_register_write>:
 1000928:	defffb04 	addi	sp,sp,-20
 100092c:	df000415 	stw	fp,16(sp)
 1000930:	df000404 	addi	fp,sp,16
 1000934:	e13ffd15 	stw	r4,-12(fp)
 1000938:	e17ffe15 	stw	r5,-8(fp)
 100093c:	e1bfff15 	stw	r6,-4(fp)
 1000940:	e03ffc15 	stw	zero,-16(fp)
 1000944:	e0bfff17 	ldw	r2,-4(fp)
 1000948:	1004923a 	slli	r2,r2,8
 100094c:	e0bfff15 	stw	r2,-4(fp)
 1000950:	e0fffe17 	ldw	r3,-8(fp)
 1000954:	e0bfff17 	ldw	r2,-4(fp)
 1000958:	1887883a 	add	r3,r3,r2
 100095c:	00804034 	movhi	r2,256
 1000960:	1885883a 	add	r2,r3,r2
 1000964:	e0bffc15 	stw	r2,-16(fp)
 1000968:	e0bffd17 	ldw	r2,-12(fp)
 100096c:	10801517 	ldw	r2,84(r2)
 1000970:	10807d04 	addi	r2,r2,500
 1000974:	1007883a 	mov	r3,r2
 1000978:	e0bffc17 	ldw	r2,-16(fp)
 100097c:	18800035 	stwio	r2,0(r3)
 1000980:	e0bffd17 	ldw	r2,-12(fp)
 1000984:	10801517 	ldw	r2,84(r2)
 1000988:	10807d04 	addi	r2,r2,500
 100098c:	10800037 	ldwio	r2,0(r2)
 1000990:	e037883a 	mov	sp,fp
 1000994:	df000017 	ldw	fp,0(sp)
 1000998:	dec00104 	addi	sp,sp,4
 100099c:	f800283a 	ret

010009a0 <usb20sr_phy_register_read>:
 10009a0:	defffb04 	addi	sp,sp,-20
 10009a4:	df000415 	stw	fp,16(sp)
 10009a8:	df000404 	addi	fp,sp,16
 10009ac:	e13ffd15 	stw	r4,-12(fp)
 10009b0:	e17ffe15 	stw	r5,-8(fp)
 10009b4:	e1bfff15 	stw	r6,-4(fp)
 10009b8:	e03ffc15 	stw	zero,-16(fp)
 10009bc:	e0fffe17 	ldw	r3,-8(fp)
 10009c0:	00808034 	movhi	r2,512
 10009c4:	1885883a 	add	r2,r3,r2
 10009c8:	e0bffc15 	stw	r2,-16(fp)
 10009cc:	e0bffd17 	ldw	r2,-12(fp)
 10009d0:	10801517 	ldw	r2,84(r2)
 10009d4:	10807d04 	addi	r2,r2,500
 10009d8:	1007883a 	mov	r3,r2
 10009dc:	e0bffc17 	ldw	r2,-16(fp)
 10009e0:	18800035 	stwio	r2,0(r3)
 10009e4:	e0bffd17 	ldw	r2,-12(fp)
 10009e8:	10801517 	ldw	r2,84(r2)
 10009ec:	10807d04 	addi	r2,r2,500
 10009f0:	10800037 	ldwio	r2,0(r2)
 10009f4:	e0bffd17 	ldw	r2,-12(fp)
 10009f8:	10801517 	ldw	r2,84(r2)
 10009fc:	10807d04 	addi	r2,r2,500
 1000a00:	10800037 	ldwio	r2,0(r2)
 1000a04:	1007d43a 	srai	r3,r2,16
 1000a08:	e0bfff17 	ldw	r2,-4(fp)
 1000a0c:	10c00015 	stw	r3,0(r2)
 1000a10:	e037883a 	mov	sp,fp
 1000a14:	df000017 	ldw	fp,0(sp)
 1000a18:	dec00104 	addi	sp,sp,4
 1000a1c:	f800283a 	ret

01000a20 <usb20sr_set_low_power_mode>:
 1000a20:	defffe04 	addi	sp,sp,-8
 1000a24:	df000115 	stw	fp,4(sp)
 1000a28:	df000104 	addi	fp,sp,4
 1000a2c:	e13fff15 	stw	r4,-4(fp)
 1000a30:	e0bfff17 	ldw	r2,-4(fp)
 1000a34:	10801517 	ldw	r2,84(r2)
 1000a38:	10807d04 	addi	r2,r2,500
 1000a3c:	1007883a 	mov	r3,r2
 1000a40:	00804034 	movhi	r2,256
 1000a44:	10800104 	addi	r2,r2,4
 1000a48:	18800035 	stwio	r2,0(r3)
 1000a4c:	e037883a 	mov	sp,fp
 1000a50:	df000017 	ldw	fp,0(sp)
 1000a54:	dec00104 	addi	sp,sp,4
 1000a58:	f800283a 	ret

01000a5c <get_current_micro_frame_no>:
 1000a5c:	defffe04 	addi	sp,sp,-8
 1000a60:	df000115 	stw	fp,4(sp)
 1000a64:	df000104 	addi	fp,sp,4
 1000a68:	e13fff15 	stw	r4,-4(fp)
 1000a6c:	e0bfff17 	ldw	r2,-4(fp)
 1000a70:	10801517 	ldw	r2,84(r2)
 1000a74:	10800504 	addi	r2,r2,20
 1000a78:	10800037 	ldwio	r2,0(r2)
 1000a7c:	10bc002c 	andhi	r2,r2,61440
 1000a80:	1004d73a 	srli	r2,r2,28
 1000a84:	e037883a 	mov	sp,fp
 1000a88:	df000017 	ldw	fp,0(sp)
 1000a8c:	dec00104 	addi	sp,sp,4
 1000a90:	f800283a 	ret

01000a94 <get_current_frame_no>:
 1000a94:	defffe04 	addi	sp,sp,-8
 1000a98:	df000115 	stw	fp,4(sp)
 1000a9c:	df000104 	addi	fp,sp,4
 1000aa0:	e13fff15 	stw	r4,-4(fp)
 1000aa4:	e0bfff17 	ldw	r2,-4(fp)
 1000aa8:	10801517 	ldw	r2,84(r2)
 1000aac:	10800504 	addi	r2,r2,20
 1000ab0:	10800037 	ldwio	r2,0(r2)
 1000ab4:	1081ffec 	andhi	r2,r2,2047
 1000ab8:	1005d43a 	srai	r2,r2,16
 1000abc:	e037883a 	mov	sp,fp
 1000ac0:	df000017 	ldw	fp,0(sp)
 1000ac4:	dec00104 	addi	sp,sp,4
 1000ac8:	f800283a 	ret

01000acc <get_sof_time>:
 1000acc:	defffe04 	addi	sp,sp,-8
 1000ad0:	df000115 	stw	fp,4(sp)
 1000ad4:	df000104 	addi	fp,sp,4
 1000ad8:	e13fff15 	stw	r4,-4(fp)
 1000adc:	e0bfff17 	ldw	r2,-4(fp)
 1000ae0:	10801517 	ldw	r2,84(r2)
 1000ae4:	10800504 	addi	r2,r2,20
 1000ae8:	10800037 	ldwio	r2,0(r2)
 1000aec:	1083ffcc 	andi	r2,r2,4095
 1000af0:	e037883a 	mov	sp,fp
 1000af4:	df000017 	ldw	fp,0(sp)
 1000af8:	dec00104 	addi	sp,sp,4
 1000afc:	f800283a 	ret

01000b00 <get_current_config>:
 1000b00:	defffe04 	addi	sp,sp,-8
 1000b04:	df000115 	stw	fp,4(sp)
 1000b08:	df000104 	addi	fp,sp,4
 1000b0c:	e13fff15 	stw	r4,-4(fp)
 1000b10:	e0bfff17 	ldw	r2,-4(fp)
 1000b14:	10802817 	ldw	r2,160(r2)
 1000b18:	e037883a 	mov	sp,fp
 1000b1c:	df000017 	ldw	fp,0(sp)
 1000b20:	dec00104 	addi	sp,sp,4
 1000b24:	f800283a 	ret

01000b28 <get_current_interface>:
 1000b28:	defffe04 	addi	sp,sp,-8
 1000b2c:	df000115 	stw	fp,4(sp)
 1000b30:	df000104 	addi	fp,sp,4
 1000b34:	e13fff15 	stw	r4,-4(fp)
 1000b38:	e0bfff17 	ldw	r2,-4(fp)
 1000b3c:	10802a17 	ldw	r2,168(r2)
 1000b40:	e037883a 	mov	sp,fp
 1000b44:	df000017 	ldw	fp,0(sp)
 1000b48:	dec00104 	addi	sp,sp,4
 1000b4c:	f800283a 	ret

01000b50 <get_current_alt_settings>:
 1000b50:	defffe04 	addi	sp,sp,-8
 1000b54:	df000115 	stw	fp,4(sp)
 1000b58:	df000104 	addi	fp,sp,4
 1000b5c:	e13fff15 	stw	r4,-4(fp)
 1000b60:	e0bfff17 	ldw	r2,-4(fp)
 1000b64:	10802b17 	ldw	r2,172(r2)
 1000b68:	e037883a 	mov	sp,fp
 1000b6c:	df000017 	ldw	fp,0(sp)
 1000b70:	dec00104 	addi	sp,sp,4
 1000b74:	f800283a 	ret

01000b78 <ifConfigured>:
 1000b78:	defffe04 	addi	sp,sp,-8
 1000b7c:	df000115 	stw	fp,4(sp)
 1000b80:	df000104 	addi	fp,sp,4
 1000b84:	e13fff15 	stw	r4,-4(fp)
 1000b88:	e0bfff17 	ldw	r2,-4(fp)
 1000b8c:	1081bc03 	ldbu	r2,1776(r2)
 1000b90:	10803fcc 	andi	r2,r2,255
 1000b94:	1080201c 	xori	r2,r2,128
 1000b98:	10bfe004 	addi	r2,r2,-128
 1000b9c:	e037883a 	mov	sp,fp
 1000ba0:	df000017 	ldw	fp,0(sp)
 1000ba4:	dec00104 	addi	sp,sp,4
 1000ba8:	f800283a 	ret

01000bac <SetRemoteWakeUp>:
 1000bac:	defffe04 	addi	sp,sp,-8
 1000bb0:	df000115 	stw	fp,4(sp)
 1000bb4:	df000104 	addi	fp,sp,4
 1000bb8:	e13fff15 	stw	r4,-4(fp)
 1000bbc:	e0bfff17 	ldw	r2,-4(fp)
 1000bc0:	10800f17 	ldw	r2,60(r2)
 1000bc4:	10800118 	cmpnei	r2,r2,4
 1000bc8:	1000051e 	bne	r2,zero,1000be0 <SetRemoteWakeUp+0x34>
 1000bcc:	e0bfff17 	ldw	r2,-4(fp)
 1000bd0:	10801517 	ldw	r2,84(r2)
 1000bd4:	1007883a 	mov	r3,r2
 1000bd8:	00802004 	movi	r2,128
 1000bdc:	18800035 	stwio	r2,0(r3)
 1000be0:	e037883a 	mov	sp,fp
 1000be4:	df000017 	ldw	fp,0(sp)
 1000be8:	dec00104 	addi	sp,sp,4
 1000bec:	f800283a 	ret

01000bf0 <USB_SetStallEP>:
 1000bf0:	defffc04 	addi	sp,sp,-16
 1000bf4:	df000315 	stw	fp,12(sp)
 1000bf8:	df000304 	addi	fp,sp,12
 1000bfc:	e13ffe15 	stw	r4,-8(fp)
 1000c00:	e17fff15 	stw	r5,-4(fp)
 1000c04:	e0bffe17 	ldw	r2,-8(fp)
 1000c08:	10801517 	ldw	r2,84(r2)
 1000c0c:	1007883a 	mov	r3,r2
 1000c10:	e0bfff17 	ldw	r2,-4(fp)
 1000c14:	108003cc 	andi	r2,r2,15
 1000c18:	1004913a 	slli	r2,r2,4
 1000c1c:	1885883a 	add	r2,r3,r2
 1000c20:	10801004 	addi	r2,r2,64
 1000c24:	10800037 	ldwio	r2,0(r2)
 1000c28:	e0bffd15 	stw	r2,-12(fp)
 1000c2c:	e0bffe17 	ldw	r2,-8(fp)
 1000c30:	10801517 	ldw	r2,84(r2)
 1000c34:	1007883a 	mov	r3,r2
 1000c38:	e0bfff17 	ldw	r2,-4(fp)
 1000c3c:	108003cc 	andi	r2,r2,15
 1000c40:	1004913a 	slli	r2,r2,4
 1000c44:	1885883a 	add	r2,r3,r2
 1000c48:	11001004 	addi	r4,r2,64
 1000c4c:	e0bffd17 	ldw	r2,-12(fp)
 1000c50:	10c02034 	orhi	r3,r2,128
 1000c54:	2005883a 	mov	r2,r4
 1000c58:	10c00035 	stwio	r3,0(r2)
 1000c5c:	e037883a 	mov	sp,fp
 1000c60:	df000017 	ldw	fp,0(sp)
 1000c64:	dec00104 	addi	sp,sp,4
 1000c68:	f800283a 	ret

01000c6c <USB_ClrStallEP>:
 1000c6c:	defffc04 	addi	sp,sp,-16
 1000c70:	df000315 	stw	fp,12(sp)
 1000c74:	df000304 	addi	fp,sp,12
 1000c78:	e13ffe15 	stw	r4,-8(fp)
 1000c7c:	e17fff15 	stw	r5,-4(fp)
 1000c80:	e0bffe17 	ldw	r2,-8(fp)
 1000c84:	10801517 	ldw	r2,84(r2)
 1000c88:	1007883a 	mov	r3,r2
 1000c8c:	e0bfff17 	ldw	r2,-4(fp)
 1000c90:	108003cc 	andi	r2,r2,15
 1000c94:	1004913a 	slli	r2,r2,4
 1000c98:	1885883a 	add	r2,r3,r2
 1000c9c:	10801004 	addi	r2,r2,64
 1000ca0:	10800037 	ldwio	r2,0(r2)
 1000ca4:	e0bffd15 	stw	r2,-12(fp)
 1000ca8:	e0bffe17 	ldw	r2,-8(fp)
 1000cac:	10801517 	ldw	r2,84(r2)
 1000cb0:	1007883a 	mov	r3,r2
 1000cb4:	e0bfff17 	ldw	r2,-4(fp)
 1000cb8:	108003cc 	andi	r2,r2,15
 1000cbc:	1004913a 	slli	r2,r2,4
 1000cc0:	1885883a 	add	r2,r3,r2
 1000cc4:	11001004 	addi	r4,r2,64
 1000cc8:	e0fffd17 	ldw	r3,-12(fp)
 1000ccc:	00b3d034 	movhi	r2,53056
 1000cd0:	10bfffc4 	addi	r2,r2,-1
 1000cd4:	1886703a 	and	r3,r3,r2
 1000cd8:	2005883a 	mov	r2,r4
 1000cdc:	10c00035 	stwio	r3,0(r2)
 1000ce0:	e037883a 	mov	sp,fp
 1000ce4:	df000017 	ldw	fp,0(sp)
 1000ce8:	dec00104 	addi	sp,sp,4
 1000cec:	f800283a 	ret

01000cf0 <usb_initialize_descriptor>:
 1000cf0:	defffb04 	addi	sp,sp,-20
 1000cf4:	df000415 	stw	fp,16(sp)
 1000cf8:	df000404 	addi	fp,sp,16
 1000cfc:	e13ffc15 	stw	r4,-16(fp)
 1000d00:	e17ffd15 	stw	r5,-12(fp)
 1000d04:	e1bffe15 	stw	r6,-8(fp)
 1000d08:	e1ffff15 	stw	r7,-4(fp)
 1000d0c:	e0bffd17 	ldw	r2,-12(fp)
 1000d10:	1007883a 	mov	r3,r2
 1000d14:	e0bffc17 	ldw	r2,-16(fp)
 1000d18:	10c00315 	stw	r3,12(r2)
 1000d1c:	e0bffe17 	ldw	r2,-8(fp)
 1000d20:	1007883a 	mov	r3,r2
 1000d24:	e0bffc17 	ldw	r2,-16(fp)
 1000d28:	10c00415 	stw	r3,16(r2)
 1000d2c:	e0bfff17 	ldw	r2,-4(fp)
 1000d30:	1007883a 	mov	r3,r2
 1000d34:	e0bffc17 	ldw	r2,-16(fp)
 1000d38:	10c00515 	stw	r3,20(r2)
 1000d3c:	e0800117 	ldw	r2,4(fp)
 1000d40:	1007883a 	mov	r3,r2
 1000d44:	e0bffc17 	ldw	r2,-16(fp)
 1000d48:	10c00615 	stw	r3,24(r2)
 1000d4c:	e0800517 	ldw	r2,20(fp)
 1000d50:	1007883a 	mov	r3,r2
 1000d54:	e0bffc17 	ldw	r2,-16(fp)
 1000d58:	10c00715 	stw	r3,28(r2)
 1000d5c:	e0800617 	ldw	r2,24(fp)
 1000d60:	1007883a 	mov	r3,r2
 1000d64:	e0bffc17 	ldw	r2,-16(fp)
 1000d68:	10c00815 	stw	r3,32(r2)
 1000d6c:	e0800817 	ldw	r2,32(fp)
 1000d70:	1007883a 	mov	r3,r2
 1000d74:	e0bffc17 	ldw	r2,-16(fp)
 1000d78:	10c00915 	stw	r3,36(r2)
 1000d7c:	e0800917 	ldw	r2,36(fp)
 1000d80:	1007883a 	mov	r3,r2
 1000d84:	e0bffc17 	ldw	r2,-16(fp)
 1000d88:	10c00a15 	stw	r3,40(r2)
 1000d8c:	e0800a17 	ldw	r2,40(fp)
 1000d90:	1007883a 	mov	r3,r2
 1000d94:	e0bffc17 	ldw	r2,-16(fp)
 1000d98:	10c00b15 	stw	r3,44(r2)
 1000d9c:	e0fffc17 	ldw	r3,-16(fp)
 1000da0:	e0800217 	ldw	r2,8(fp)
 1000da4:	18802f15 	stw	r2,188(r3)
 1000da8:	e0fffc17 	ldw	r3,-16(fp)
 1000dac:	e0800317 	ldw	r2,12(fp)
 1000db0:	18803015 	stw	r2,192(r3)
 1000db4:	e0fffc17 	ldw	r3,-16(fp)
 1000db8:	e0800417 	ldw	r2,16(fp)
 1000dbc:	18803115 	stw	r2,196(r3)
 1000dc0:	e0fffc17 	ldw	r3,-16(fp)
 1000dc4:	e0800717 	ldw	r2,28(fp)
 1000dc8:	18801815 	stw	r2,96(r3)
 1000dcc:	e0bffc17 	ldw	r2,-16(fp)
 1000dd0:	10003815 	stw	zero,224(r2)
 1000dd4:	e0bffc17 	ldw	r2,-16(fp)
 1000dd8:	10003915 	stw	zero,228(r2)
 1000ddc:	e0bffc17 	ldw	r2,-16(fp)
 1000de0:	10003615 	stw	zero,216(r2)
 1000de4:	e0bffc17 	ldw	r2,-16(fp)
 1000de8:	10003715 	stw	zero,220(r2)
 1000dec:	e0bffc17 	ldw	r2,-16(fp)
 1000df0:	10003a15 	stw	zero,232(r2)
 1000df4:	e0bffc17 	ldw	r2,-16(fp)
 1000df8:	10003b15 	stw	zero,236(r2)
 1000dfc:	e037883a 	mov	sp,fp
 1000e00:	df000017 	ldw	fp,0(sp)
 1000e04:	dec00104 	addi	sp,sp,4
 1000e08:	f800283a 	ret

01000e0c <usb_ep_config>:
 1000e0c:	defffb04 	addi	sp,sp,-20
 1000e10:	df000415 	stw	fp,16(sp)
 1000e14:	df000404 	addi	fp,sp,16
 1000e18:	e13ffc15 	stw	r4,-16(fp)
 1000e1c:	e17ffd15 	stw	r5,-12(fp)
 1000e20:	e1bffe15 	stw	r6,-8(fp)
 1000e24:	e1ffff15 	stw	r7,-4(fp)
 1000e28:	e0fffc17 	ldw	r3,-16(fp)
 1000e2c:	e0bffd17 	ldw	r2,-12(fp)
 1000e30:	18801915 	stw	r2,100(r3)
 1000e34:	e0fffe17 	ldw	r3,-8(fp)
 1000e38:	e0bffc17 	ldw	r2,-16(fp)
 1000e3c:	10c01a15 	stw	r3,104(r2)
 1000e40:	e0bfff17 	ldw	r2,-4(fp)
 1000e44:	1007883a 	mov	r3,r2
 1000e48:	e0bffc17 	ldw	r2,-16(fp)
 1000e4c:	10c01b15 	stw	r3,108(r2)
 1000e50:	e0800117 	ldw	r2,4(fp)
 1000e54:	1007883a 	mov	r3,r2
 1000e58:	e0bffc17 	ldw	r2,-16(fp)
 1000e5c:	10c01c15 	stw	r3,112(r2)
 1000e60:	e0800217 	ldw	r2,8(fp)
 1000e64:	1007883a 	mov	r3,r2
 1000e68:	e0bffc17 	ldw	r2,-16(fp)
 1000e6c:	10c01d15 	stw	r3,116(r2)
 1000e70:	e0800317 	ldw	r2,12(fp)
 1000e74:	1007883a 	mov	r3,r2
 1000e78:	e0bffc17 	ldw	r2,-16(fp)
 1000e7c:	10c01e15 	stw	r3,120(r2)
 1000e80:	e0800417 	ldw	r2,16(fp)
 1000e84:	1007883a 	mov	r3,r2
 1000e88:	e0bffc17 	ldw	r2,-16(fp)
 1000e8c:	10c01f15 	stw	r3,124(r2)
 1000e90:	e0800517 	ldw	r2,20(fp)
 1000e94:	1007883a 	mov	r3,r2
 1000e98:	e0bffc17 	ldw	r2,-16(fp)
 1000e9c:	10c02015 	stw	r3,128(r2)
 1000ea0:	e0800617 	ldw	r2,24(fp)
 1000ea4:	1007883a 	mov	r3,r2
 1000ea8:	e0bffc17 	ldw	r2,-16(fp)
 1000eac:	10c02115 	stw	r3,132(r2)
 1000eb0:	e0800717 	ldw	r2,28(fp)
 1000eb4:	1007883a 	mov	r3,r2
 1000eb8:	e0bffc17 	ldw	r2,-16(fp)
 1000ebc:	10c02215 	stw	r3,136(r2)
 1000ec0:	e0800817 	ldw	r2,32(fp)
 1000ec4:	1007883a 	mov	r3,r2
 1000ec8:	e0bffc17 	ldw	r2,-16(fp)
 1000ecc:	10c02315 	stw	r3,140(r2)
 1000ed0:	e0800917 	ldw	r2,36(fp)
 1000ed4:	1007883a 	mov	r3,r2
 1000ed8:	e0bffc17 	ldw	r2,-16(fp)
 1000edc:	10c02415 	stw	r3,144(r2)
 1000ee0:	e0800a17 	ldw	r2,40(fp)
 1000ee4:	1007883a 	mov	r3,r2
 1000ee8:	e0bffc17 	ldw	r2,-16(fp)
 1000eec:	10c02515 	stw	r3,148(r2)
 1000ef0:	e0800b17 	ldw	r2,44(fp)
 1000ef4:	1007883a 	mov	r3,r2
 1000ef8:	e0bffc17 	ldw	r2,-16(fp)
 1000efc:	10c02615 	stw	r3,152(r2)
 1000f00:	e037883a 	mov	sp,fp
 1000f04:	df000017 	ldw	fp,0(sp)
 1000f08:	dec00104 	addi	sp,sp,4
 1000f0c:	f800283a 	ret

01000f10 <dma_config>:
 1000f10:	defffb04 	addi	sp,sp,-20
 1000f14:	df000415 	stw	fp,16(sp)
 1000f18:	df000404 	addi	fp,sp,16
 1000f1c:	e13ffc15 	stw	r4,-16(fp)
 1000f20:	e17ffd15 	stw	r5,-12(fp)
 1000f24:	e1bffe15 	stw	r6,-8(fp)
 1000f28:	e1ffff15 	stw	r7,-4(fp)
 1000f2c:	e0800117 	ldw	r2,4(fp)
 1000f30:	1004c03a 	cmpne	r2,r2,zero
 1000f34:	10000a1e 	bne	r2,zero,1000f60 <dma_config+0x50>
 1000f38:	e0fffd17 	ldw	r3,-12(fp)
 1000f3c:	e0bffc17 	ldw	r2,-16(fp)
 1000f40:	10c01215 	stw	r3,72(r2)
 1000f44:	e0fffe17 	ldw	r3,-8(fp)
 1000f48:	e0bffc17 	ldw	r2,-16(fp)
 1000f4c:	10c01415 	stw	r3,80(r2)
 1000f50:	e0ffff17 	ldw	r3,-4(fp)
 1000f54:	e0bffc17 	ldw	r2,-16(fp)
 1000f58:	10c01315 	stw	r3,76(r2)
 1000f5c:	00000906 	br	1000f84 <dma_config+0x74>
 1000f60:	e0fffd17 	ldw	r3,-12(fp)
 1000f64:	e0bffc17 	ldw	r2,-16(fp)
 1000f68:	10c01715 	stw	r3,92(r2)
 1000f6c:	e0fffe17 	ldw	r3,-8(fp)
 1000f70:	e0bffc17 	ldw	r2,-16(fp)
 1000f74:	10c01115 	stw	r3,68(r2)
 1000f78:	e0ffff17 	ldw	r3,-4(fp)
 1000f7c:	e0bffc17 	ldw	r2,-16(fp)
 1000f80:	10c00215 	stw	r3,8(r2)
 1000f84:	e037883a 	mov	sp,fp
 1000f88:	df000017 	ldw	fp,0(sp)
 1000f8c:	dec00104 	addi	sp,sp,4
 1000f90:	f800283a 	ret

01000f94 <USB_EnableEP>:
 1000f94:	defff804 	addi	sp,sp,-32
 1000f98:	df000715 	stw	fp,28(sp)
 1000f9c:	df000704 	addi	fp,sp,28
 1000fa0:	e13ffe15 	stw	r4,-8(fp)
 1000fa4:	e17fff15 	stw	r5,-4(fp)
 1000fa8:	e0bffe17 	ldw	r2,-8(fp)
 1000fac:	10c01a17 	ldw	r3,104(r2)
 1000fb0:	e0bffe17 	ldw	r2,-8(fp)
 1000fb4:	10802817 	ldw	r2,160(r2)
 1000fb8:	1085883a 	add	r2,r2,r2
 1000fbc:	1085883a 	add	r2,r2,r2
 1000fc0:	1885883a 	add	r2,r3,r2
 1000fc4:	10bfff04 	addi	r2,r2,-4
 1000fc8:	10800017 	ldw	r2,0(r2)
 1000fcc:	e0bff915 	stw	r2,-28(fp)
 1000fd0:	e0bff917 	ldw	r2,-28(fp)
 1000fd4:	10ffffcc 	andi	r3,r2,65535
 1000fd8:	e0bfff17 	ldw	r2,-4(fp)
 1000fdc:	10bfffc4 	addi	r2,r2,-1
 1000fe0:	1885d83a 	sra	r2,r3,r2
 1000fe4:	1080004c 	andi	r2,r2,1
 1000fe8:	10803fcc 	andi	r2,r2,255
 1000fec:	1005003a 	cmpeq	r2,r2,zero
 1000ff0:	1001341e 	bne	r2,zero,10014c4 <USB_EnableEP+0x530>
 1000ff4:	e0bffe17 	ldw	r2,-8(fp)
 1000ff8:	10800c17 	ldw	r2,48(r2)
 1000ffc:	10800058 	cmpnei	r2,r2,1
 1001000:	1000391e 	bne	r2,zero,10010e8 <USB_EnableEP+0x154>
 1001004:	e0bffe17 	ldw	r2,-8(fp)
 1001008:	10c01b17 	ldw	r3,108(r2)
 100100c:	e0bffe17 	ldw	r2,-8(fp)
 1001010:	10802817 	ldw	r2,160(r2)
 1001014:	1085883a 	add	r2,r2,r2
 1001018:	1085883a 	add	r2,r2,r2
 100101c:	1887883a 	add	r3,r3,r2
 1001020:	e0bfff17 	ldw	r2,-4(fp)
 1001024:	1085883a 	add	r2,r2,r2
 1001028:	1085883a 	add	r2,r2,r2
 100102c:	1885883a 	add	r2,r3,r2
 1001030:	10bffe04 	addi	r2,r2,-8
 1001034:	10800017 	ldw	r2,0(r2)
 1001038:	e0bffa15 	stw	r2,-24(fp)
 100103c:	e0bffe17 	ldw	r2,-8(fp)
 1001040:	10c02417 	ldw	r3,144(r2)
 1001044:	e0bffe17 	ldw	r2,-8(fp)
 1001048:	10802817 	ldw	r2,160(r2)
 100104c:	1085883a 	add	r2,r2,r2
 1001050:	1085883a 	add	r2,r2,r2
 1001054:	1887883a 	add	r3,r3,r2
 1001058:	e0bfff17 	ldw	r2,-4(fp)
 100105c:	1085883a 	add	r2,r2,r2
 1001060:	1085883a 	add	r2,r2,r2
 1001064:	1885883a 	add	r2,r3,r2
 1001068:	10bffe04 	addi	r2,r2,-8
 100106c:	10800017 	ldw	r2,0(r2)
 1001070:	e0bffd15 	stw	r2,-12(fp)
 1001074:	e0bffe17 	ldw	r2,-8(fp)
 1001078:	10c01e17 	ldw	r3,120(r2)
 100107c:	e0bffe17 	ldw	r2,-8(fp)
 1001080:	10802817 	ldw	r2,160(r2)
 1001084:	1085883a 	add	r2,r2,r2
 1001088:	1085883a 	add	r2,r2,r2
 100108c:	1887883a 	add	r3,r3,r2
 1001090:	e0bfff17 	ldw	r2,-4(fp)
 1001094:	1085883a 	add	r2,r2,r2
 1001098:	1085883a 	add	r2,r2,r2
 100109c:	1885883a 	add	r2,r3,r2
 10010a0:	10bffe04 	addi	r2,r2,-8
 10010a4:	10800017 	ldw	r2,0(r2)
 10010a8:	e0bffc15 	stw	r2,-16(fp)
 10010ac:	e0bffe17 	ldw	r2,-8(fp)
 10010b0:	10c01f17 	ldw	r3,124(r2)
 10010b4:	e0bffe17 	ldw	r2,-8(fp)
 10010b8:	10802817 	ldw	r2,160(r2)
 10010bc:	1085883a 	add	r2,r2,r2
 10010c0:	1085883a 	add	r2,r2,r2
 10010c4:	1887883a 	add	r3,r3,r2
 10010c8:	e0bfff17 	ldw	r2,-4(fp)
 10010cc:	1085883a 	add	r2,r2,r2
 10010d0:	1085883a 	add	r2,r2,r2
 10010d4:	1885883a 	add	r2,r3,r2
 10010d8:	10bffe04 	addi	r2,r2,-8
 10010dc:	10800017 	ldw	r2,0(r2)
 10010e0:	e0bffb15 	stw	r2,-20(fp)
 10010e4:	00007906 	br	10012cc <USB_EnableEP+0x338>
 10010e8:	e0bffe17 	ldw	r2,-8(fp)
 10010ec:	10800c17 	ldw	r2,48(r2)
 10010f0:	1004c03a 	cmpne	r2,r2,zero
 10010f4:	1000391e 	bne	r2,zero,10011dc <USB_EnableEP+0x248>
 10010f8:	e0bffe17 	ldw	r2,-8(fp)
 10010fc:	10c01c17 	ldw	r3,112(r2)
 1001100:	e0bffe17 	ldw	r2,-8(fp)
 1001104:	10802817 	ldw	r2,160(r2)
 1001108:	1085883a 	add	r2,r2,r2
 100110c:	1085883a 	add	r2,r2,r2
 1001110:	1887883a 	add	r3,r3,r2
 1001114:	e0bfff17 	ldw	r2,-4(fp)
 1001118:	1085883a 	add	r2,r2,r2
 100111c:	1085883a 	add	r2,r2,r2
 1001120:	1885883a 	add	r2,r3,r2
 1001124:	10bffe04 	addi	r2,r2,-8
 1001128:	10800017 	ldw	r2,0(r2)
 100112c:	e0bffa15 	stw	r2,-24(fp)
 1001130:	e0bffe17 	ldw	r2,-8(fp)
 1001134:	10c02517 	ldw	r3,148(r2)
 1001138:	e0bffe17 	ldw	r2,-8(fp)
 100113c:	10802817 	ldw	r2,160(r2)
 1001140:	1085883a 	add	r2,r2,r2
 1001144:	1085883a 	add	r2,r2,r2
 1001148:	1887883a 	add	r3,r3,r2
 100114c:	e0bfff17 	ldw	r2,-4(fp)
 1001150:	1085883a 	add	r2,r2,r2
 1001154:	1085883a 	add	r2,r2,r2
 1001158:	1885883a 	add	r2,r3,r2
 100115c:	10bffe04 	addi	r2,r2,-8
 1001160:	10800017 	ldw	r2,0(r2)
 1001164:	e0bffd15 	stw	r2,-12(fp)
 1001168:	e0bffe17 	ldw	r2,-8(fp)
 100116c:	10c02017 	ldw	r3,128(r2)
 1001170:	e0bffe17 	ldw	r2,-8(fp)
 1001174:	10802817 	ldw	r2,160(r2)
 1001178:	1085883a 	add	r2,r2,r2
 100117c:	1085883a 	add	r2,r2,r2
 1001180:	1887883a 	add	r3,r3,r2
 1001184:	e0bfff17 	ldw	r2,-4(fp)
 1001188:	1085883a 	add	r2,r2,r2
 100118c:	1085883a 	add	r2,r2,r2
 1001190:	1885883a 	add	r2,r3,r2
 1001194:	10bffe04 	addi	r2,r2,-8
 1001198:	10800017 	ldw	r2,0(r2)
 100119c:	e0bffc15 	stw	r2,-16(fp)
 10011a0:	e0bffe17 	ldw	r2,-8(fp)
 10011a4:	10c02117 	ldw	r3,132(r2)
 10011a8:	e0bffe17 	ldw	r2,-8(fp)
 10011ac:	10802817 	ldw	r2,160(r2)
 10011b0:	1085883a 	add	r2,r2,r2
 10011b4:	1085883a 	add	r2,r2,r2
 10011b8:	1887883a 	add	r3,r3,r2
 10011bc:	e0bfff17 	ldw	r2,-4(fp)
 10011c0:	1085883a 	add	r2,r2,r2
 10011c4:	1085883a 	add	r2,r2,r2
 10011c8:	1885883a 	add	r2,r3,r2
 10011cc:	10bffe04 	addi	r2,r2,-8
 10011d0:	10800017 	ldw	r2,0(r2)
 10011d4:	e0bffb15 	stw	r2,-20(fp)
 10011d8:	00003c06 	br	10012cc <USB_EnableEP+0x338>
 10011dc:	e0bffe17 	ldw	r2,-8(fp)
 10011e0:	10800c17 	ldw	r2,48(r2)
 10011e4:	10800098 	cmpnei	r2,r2,2
 10011e8:	1000381e 	bne	r2,zero,10012cc <USB_EnableEP+0x338>
 10011ec:	e0bffe17 	ldw	r2,-8(fp)
 10011f0:	10c01d17 	ldw	r3,116(r2)
 10011f4:	e0bffe17 	ldw	r2,-8(fp)
 10011f8:	10802817 	ldw	r2,160(r2)
 10011fc:	1085883a 	add	r2,r2,r2
 1001200:	1085883a 	add	r2,r2,r2
 1001204:	1887883a 	add	r3,r3,r2
 1001208:	e0bfff17 	ldw	r2,-4(fp)
 100120c:	1085883a 	add	r2,r2,r2
 1001210:	1085883a 	add	r2,r2,r2
 1001214:	1885883a 	add	r2,r3,r2
 1001218:	10bffe04 	addi	r2,r2,-8
 100121c:	10800017 	ldw	r2,0(r2)
 1001220:	e0bffa15 	stw	r2,-24(fp)
 1001224:	e0bffe17 	ldw	r2,-8(fp)
 1001228:	10c02617 	ldw	r3,152(r2)
 100122c:	e0bffe17 	ldw	r2,-8(fp)
 1001230:	10802817 	ldw	r2,160(r2)
 1001234:	1085883a 	add	r2,r2,r2
 1001238:	1085883a 	add	r2,r2,r2
 100123c:	1887883a 	add	r3,r3,r2
 1001240:	e0bfff17 	ldw	r2,-4(fp)
 1001244:	1085883a 	add	r2,r2,r2
 1001248:	1085883a 	add	r2,r2,r2
 100124c:	1885883a 	add	r2,r3,r2
 1001250:	10bffe04 	addi	r2,r2,-8
 1001254:	10800017 	ldw	r2,0(r2)
 1001258:	e0bffd15 	stw	r2,-12(fp)
 100125c:	e0bffe17 	ldw	r2,-8(fp)
 1001260:	10c02217 	ldw	r3,136(r2)
 1001264:	e0bffe17 	ldw	r2,-8(fp)
 1001268:	10802817 	ldw	r2,160(r2)
 100126c:	1085883a 	add	r2,r2,r2
 1001270:	1085883a 	add	r2,r2,r2
 1001274:	1887883a 	add	r3,r3,r2
 1001278:	e0bfff17 	ldw	r2,-4(fp)
 100127c:	1085883a 	add	r2,r2,r2
 1001280:	1085883a 	add	r2,r2,r2
 1001284:	1885883a 	add	r2,r3,r2
 1001288:	10bffe04 	addi	r2,r2,-8
 100128c:	10800017 	ldw	r2,0(r2)
 1001290:	e0bffc15 	stw	r2,-16(fp)
 1001294:	e0bffe17 	ldw	r2,-8(fp)
 1001298:	10c02317 	ldw	r3,140(r2)
 100129c:	e0bffe17 	ldw	r2,-8(fp)
 10012a0:	10802817 	ldw	r2,160(r2)
 10012a4:	1085883a 	add	r2,r2,r2
 10012a8:	1085883a 	add	r2,r2,r2
 10012ac:	1887883a 	add	r3,r3,r2
 10012b0:	e0bfff17 	ldw	r2,-4(fp)
 10012b4:	1085883a 	add	r2,r2,r2
 10012b8:	1085883a 	add	r2,r2,r2
 10012bc:	1885883a 	add	r2,r3,r2
 10012c0:	10bffe04 	addi	r2,r2,-8
 10012c4:	10800017 	ldw	r2,0(r2)
 10012c8:	e0bffb15 	stw	r2,-20(fp)
 10012cc:	e0bffe17 	ldw	r2,-8(fp)
 10012d0:	10801517 	ldw	r2,84(r2)
 10012d4:	1007883a 	mov	r3,r2
 10012d8:	e0bfff17 	ldw	r2,-4(fp)
 10012dc:	1004913a 	slli	r2,r2,4
 10012e0:	1885883a 	add	r2,r3,r2
 10012e4:	10801004 	addi	r2,r2,64
 10012e8:	1007883a 	mov	r3,r2
 10012ec:	e0bffa17 	ldw	r2,-24(fp)
 10012f0:	18800035 	stwio	r2,0(r3)
 10012f4:	e0bffe17 	ldw	r2,-8(fp)
 10012f8:	10801517 	ldw	r2,84(r2)
 10012fc:	1007883a 	mov	r3,r2
 1001300:	e0bfff17 	ldw	r2,-4(fp)
 1001304:	1004913a 	slli	r2,r2,4
 1001308:	1885883a 	add	r2,r3,r2
 100130c:	10801104 	addi	r2,r2,68
 1001310:	1007883a 	mov	r3,r2
 1001314:	e0bffd17 	ldw	r2,-12(fp)
 1001318:	18800035 	stwio	r2,0(r3)
 100131c:	e13fff17 	ldw	r4,-4(fp)
 1001320:	e0bffc17 	ldw	r2,-16(fp)
 1001324:	109fffac 	andhi	r2,r2,32766
 1001328:	1005d47a 	srai	r2,r2,17
 100132c:	100b883a 	mov	r5,r2
 1001330:	e0fffe17 	ldw	r3,-8(fp)
 1001334:	2105883a 	add	r2,r4,r4
 1001338:	1085883a 	add	r2,r2,r2
 100133c:	10c5883a 	add	r2,r2,r3
 1001340:	10815a04 	addi	r2,r2,1384
 1001344:	11400015 	stw	r5,0(r2)
 1001348:	e13fff17 	ldw	r4,-4(fp)
 100134c:	e0fffc17 	ldw	r3,-16(fp)
 1001350:	008000b4 	movhi	r2,2
 1001354:	10bfffc4 	addi	r2,r2,-1
 1001358:	188a703a 	and	r5,r3,r2
 100135c:	e0fffe17 	ldw	r3,-8(fp)
 1001360:	2105883a 	add	r2,r4,r4
 1001364:	1085883a 	add	r2,r2,r2
 1001368:	10c5883a 	add	r2,r2,r3
 100136c:	10817a04 	addi	r2,r2,1512
 1001370:	11400015 	stw	r5,0(r2)
 1001374:	e0bffe17 	ldw	r2,-8(fp)
 1001378:	10801517 	ldw	r2,84(r2)
 100137c:	1007883a 	mov	r3,r2
 1001380:	e0bfff17 	ldw	r2,-4(fp)
 1001384:	1004913a 	slli	r2,r2,4
 1001388:	1885883a 	add	r2,r3,r2
 100138c:	10801204 	addi	r2,r2,72
 1001390:	1007883a 	mov	r3,r2
 1001394:	e0bffc17 	ldw	r2,-16(fp)
 1001398:	18800035 	stwio	r2,0(r3)
 100139c:	e13fff17 	ldw	r4,-4(fp)
 10013a0:	e0bffb17 	ldw	r2,-20(fp)
 10013a4:	109fffac 	andhi	r2,r2,32766
 10013a8:	1005d47a 	srai	r2,r2,17
 10013ac:	100b883a 	mov	r5,r2
 10013b0:	e0fffe17 	ldw	r3,-8(fp)
 10013b4:	2105883a 	add	r2,r4,r4
 10013b8:	1085883a 	add	r2,r2,r2
 10013bc:	10c5883a 	add	r2,r2,r3
 10013c0:	10816a04 	addi	r2,r2,1448
 10013c4:	11400015 	stw	r5,0(r2)
 10013c8:	e13fff17 	ldw	r4,-4(fp)
 10013cc:	e0fffb17 	ldw	r3,-20(fp)
 10013d0:	008000b4 	movhi	r2,2
 10013d4:	10bfffc4 	addi	r2,r2,-1
 10013d8:	188a703a 	and	r5,r3,r2
 10013dc:	e0fffe17 	ldw	r3,-8(fp)
 10013e0:	2105883a 	add	r2,r4,r4
 10013e4:	1085883a 	add	r2,r2,r2
 10013e8:	10c5883a 	add	r2,r2,r3
 10013ec:	10818a04 	addi	r2,r2,1576
 10013f0:	11400015 	stw	r5,0(r2)
 10013f4:	e0bffe17 	ldw	r2,-8(fp)
 10013f8:	10801517 	ldw	r2,84(r2)
 10013fc:	1007883a 	mov	r3,r2
 1001400:	e0bfff17 	ldw	r2,-4(fp)
 1001404:	1004913a 	slli	r2,r2,4
 1001408:	1885883a 	add	r2,r3,r2
 100140c:	10801304 	addi	r2,r2,76
 1001410:	1007883a 	mov	r3,r2
 1001414:	e0bffb17 	ldw	r2,-20(fp)
 1001418:	18800035 	stwio	r2,0(r3)
 100141c:	e13fff17 	ldw	r4,-4(fp)
 1001420:	e0bfff17 	ldw	r2,-4(fp)
 1001424:	1085883a 	add	r2,r2,r2
 1001428:	1085883a 	add	r2,r2,r2
 100142c:	10800484 	addi	r2,r2,18
 1001430:	1007883a 	mov	r3,r2
 1001434:	e0bffe17 	ldw	r2,-8(fp)
 1001438:	2085883a 	add	r2,r4,r2
 100143c:	10819a04 	addi	r2,r2,1640
 1001440:	10c00005 	stb	r3,0(r2)
 1001444:	e13fff17 	ldw	r4,-4(fp)
 1001448:	e0bfff17 	ldw	r2,-4(fp)
 100144c:	1085883a 	add	r2,r2,r2
 1001450:	1085883a 	add	r2,r2,r2
 1001454:	108004c4 	addi	r2,r2,19
 1001458:	1007883a 	mov	r3,r2
 100145c:	e0bffe17 	ldw	r2,-8(fp)
 1001460:	2085883a 	add	r2,r4,r2
 1001464:	10819e04 	addi	r2,r2,1656
 1001468:	10c00005 	stb	r3,0(r2)
 100146c:	e13fff17 	ldw	r4,-4(fp)
 1001470:	e0bfff17 	ldw	r2,-4(fp)
 1001474:	e0fffe17 	ldw	r3,-8(fp)
 1001478:	1085883a 	add	r2,r2,r2
 100147c:	1085883a 	add	r2,r2,r2
 1001480:	10c5883a 	add	r2,r2,r3
 1001484:	10815a04 	addi	r2,r2,1384
 1001488:	11400017 	ldw	r5,0(r2)
 100148c:	e0fffe17 	ldw	r3,-8(fp)
 1001490:	2105883a 	add	r2,r4,r4
 1001494:	1085883a 	add	r2,r2,r2
 1001498:	10c5883a 	add	r2,r2,r3
 100149c:	10814a04 	addi	r2,r2,1320
 10014a0:	11400015 	stw	r5,0(r2)
 10014a4:	e0bfff17 	ldw	r2,-4(fp)
 10014a8:	e0fffe17 	ldw	r3,-8(fp)
 10014ac:	1085883a 	add	r2,r2,r2
 10014b0:	1085883a 	add	r2,r2,r2
 10014b4:	10c5883a 	add	r2,r2,r3
 10014b8:	10c10a04 	addi	r3,r2,1064
 10014bc:	0085c034 	movhi	r2,5888
 10014c0:	18800015 	stw	r2,0(r3)
 10014c4:	e0bff917 	ldw	r2,-28(fp)
 10014c8:	1007d3fa 	srai	r3,r2,15
 10014cc:	e0bfff17 	ldw	r2,-4(fp)
 10014d0:	1885d83a 	sra	r2,r3,r2
 10014d4:	1080004c 	andi	r2,r2,1
 10014d8:	10803fcc 	andi	r2,r2,255
 10014dc:	1005003a 	cmpeq	r2,r2,zero
 10014e0:	1001371e 	bne	r2,zero,10019c0 <USB_EnableEP+0xa2c>
 10014e4:	e0bfff17 	ldw	r2,-4(fp)
 10014e8:	108003cc 	andi	r2,r2,15
 10014ec:	e0bfff15 	stw	r2,-4(fp)
 10014f0:	e0bffe17 	ldw	r2,-8(fp)
 10014f4:	10800c17 	ldw	r2,48(r2)
 10014f8:	10800058 	cmpnei	r2,r2,1
 10014fc:	1000391e 	bne	r2,zero,10015e4 <USB_EnableEP+0x650>
 1001500:	e0bffe17 	ldw	r2,-8(fp)
 1001504:	10c01b17 	ldw	r3,108(r2)
 1001508:	e0bffe17 	ldw	r2,-8(fp)
 100150c:	10802817 	ldw	r2,160(r2)
 1001510:	1085883a 	add	r2,r2,r2
 1001514:	1085883a 	add	r2,r2,r2
 1001518:	1887883a 	add	r3,r3,r2
 100151c:	e0bfff17 	ldw	r2,-4(fp)
 1001520:	1085883a 	add	r2,r2,r2
 1001524:	1085883a 	add	r2,r2,r2
 1001528:	1885883a 	add	r2,r3,r2
 100152c:	10bffe04 	addi	r2,r2,-8
 1001530:	10800017 	ldw	r2,0(r2)
 1001534:	e0bffa15 	stw	r2,-24(fp)
 1001538:	e0bffe17 	ldw	r2,-8(fp)
 100153c:	10c02417 	ldw	r3,144(r2)
 1001540:	e0bffe17 	ldw	r2,-8(fp)
 1001544:	10802817 	ldw	r2,160(r2)
 1001548:	1085883a 	add	r2,r2,r2
 100154c:	1085883a 	add	r2,r2,r2
 1001550:	1887883a 	add	r3,r3,r2
 1001554:	e0bfff17 	ldw	r2,-4(fp)
 1001558:	1085883a 	add	r2,r2,r2
 100155c:	1085883a 	add	r2,r2,r2
 1001560:	1885883a 	add	r2,r3,r2
 1001564:	10bffe04 	addi	r2,r2,-8
 1001568:	10800017 	ldw	r2,0(r2)
 100156c:	e0bffd15 	stw	r2,-12(fp)
 1001570:	e0bffe17 	ldw	r2,-8(fp)
 1001574:	10c01e17 	ldw	r3,120(r2)
 1001578:	e0bffe17 	ldw	r2,-8(fp)
 100157c:	10802817 	ldw	r2,160(r2)
 1001580:	1085883a 	add	r2,r2,r2
 1001584:	1085883a 	add	r2,r2,r2
 1001588:	1887883a 	add	r3,r3,r2
 100158c:	e0bfff17 	ldw	r2,-4(fp)
 1001590:	1085883a 	add	r2,r2,r2
 1001594:	1085883a 	add	r2,r2,r2
 1001598:	1885883a 	add	r2,r3,r2
 100159c:	10bffe04 	addi	r2,r2,-8
 10015a0:	10800017 	ldw	r2,0(r2)
 10015a4:	e0bffc15 	stw	r2,-16(fp)
 10015a8:	e0bffe17 	ldw	r2,-8(fp)
 10015ac:	10c01f17 	ldw	r3,124(r2)
 10015b0:	e0bffe17 	ldw	r2,-8(fp)
 10015b4:	10802817 	ldw	r2,160(r2)
 10015b8:	1085883a 	add	r2,r2,r2
 10015bc:	1085883a 	add	r2,r2,r2
 10015c0:	1887883a 	add	r3,r3,r2
 10015c4:	e0bfff17 	ldw	r2,-4(fp)
 10015c8:	1085883a 	add	r2,r2,r2
 10015cc:	1085883a 	add	r2,r2,r2
 10015d0:	1885883a 	add	r2,r3,r2
 10015d4:	10bffe04 	addi	r2,r2,-8
 10015d8:	10800017 	ldw	r2,0(r2)
 10015dc:	e0bffb15 	stw	r2,-20(fp)
 10015e0:	00007906 	br	10017c8 <USB_EnableEP+0x834>
 10015e4:	e0bffe17 	ldw	r2,-8(fp)
 10015e8:	10800c17 	ldw	r2,48(r2)
 10015ec:	1004c03a 	cmpne	r2,r2,zero
 10015f0:	1000391e 	bne	r2,zero,10016d8 <USB_EnableEP+0x744>
 10015f4:	e0bffe17 	ldw	r2,-8(fp)
 10015f8:	10c01c17 	ldw	r3,112(r2)
 10015fc:	e0bffe17 	ldw	r2,-8(fp)
 1001600:	10802817 	ldw	r2,160(r2)
 1001604:	1085883a 	add	r2,r2,r2
 1001608:	1085883a 	add	r2,r2,r2
 100160c:	1887883a 	add	r3,r3,r2
 1001610:	e0bfff17 	ldw	r2,-4(fp)
 1001614:	1085883a 	add	r2,r2,r2
 1001618:	1085883a 	add	r2,r2,r2
 100161c:	1885883a 	add	r2,r3,r2
 1001620:	10bffe04 	addi	r2,r2,-8
 1001624:	10800017 	ldw	r2,0(r2)
 1001628:	e0bffa15 	stw	r2,-24(fp)
 100162c:	e0bffe17 	ldw	r2,-8(fp)
 1001630:	10c02517 	ldw	r3,148(r2)
 1001634:	e0bffe17 	ldw	r2,-8(fp)
 1001638:	10802817 	ldw	r2,160(r2)
 100163c:	1085883a 	add	r2,r2,r2
 1001640:	1085883a 	add	r2,r2,r2
 1001644:	1887883a 	add	r3,r3,r2
 1001648:	e0bfff17 	ldw	r2,-4(fp)
 100164c:	1085883a 	add	r2,r2,r2
 1001650:	1085883a 	add	r2,r2,r2
 1001654:	1885883a 	add	r2,r3,r2
 1001658:	10bffe04 	addi	r2,r2,-8
 100165c:	10800017 	ldw	r2,0(r2)
 1001660:	e0bffd15 	stw	r2,-12(fp)
 1001664:	e0bffe17 	ldw	r2,-8(fp)
 1001668:	10c02017 	ldw	r3,128(r2)
 100166c:	e0bffe17 	ldw	r2,-8(fp)
 1001670:	10802817 	ldw	r2,160(r2)
 1001674:	1085883a 	add	r2,r2,r2
 1001678:	1085883a 	add	r2,r2,r2
 100167c:	1887883a 	add	r3,r3,r2
 1001680:	e0bfff17 	ldw	r2,-4(fp)
 1001684:	1085883a 	add	r2,r2,r2
 1001688:	1085883a 	add	r2,r2,r2
 100168c:	1885883a 	add	r2,r3,r2
 1001690:	10bffe04 	addi	r2,r2,-8
 1001694:	10800017 	ldw	r2,0(r2)
 1001698:	e0bffc15 	stw	r2,-16(fp)
 100169c:	e0bffe17 	ldw	r2,-8(fp)
 10016a0:	10c02117 	ldw	r3,132(r2)
 10016a4:	e0bffe17 	ldw	r2,-8(fp)
 10016a8:	10802817 	ldw	r2,160(r2)
 10016ac:	1085883a 	add	r2,r2,r2
 10016b0:	1085883a 	add	r2,r2,r2
 10016b4:	1887883a 	add	r3,r3,r2
 10016b8:	e0bfff17 	ldw	r2,-4(fp)
 10016bc:	1085883a 	add	r2,r2,r2
 10016c0:	1085883a 	add	r2,r2,r2
 10016c4:	1885883a 	add	r2,r3,r2
 10016c8:	10bffe04 	addi	r2,r2,-8
 10016cc:	10800017 	ldw	r2,0(r2)
 10016d0:	e0bffb15 	stw	r2,-20(fp)
 10016d4:	00003c06 	br	10017c8 <USB_EnableEP+0x834>
 10016d8:	e0bffe17 	ldw	r2,-8(fp)
 10016dc:	10800c17 	ldw	r2,48(r2)
 10016e0:	10800098 	cmpnei	r2,r2,2
 10016e4:	1000381e 	bne	r2,zero,10017c8 <USB_EnableEP+0x834>
 10016e8:	e0bffe17 	ldw	r2,-8(fp)
 10016ec:	10c01d17 	ldw	r3,116(r2)
 10016f0:	e0bffe17 	ldw	r2,-8(fp)
 10016f4:	10802817 	ldw	r2,160(r2)
 10016f8:	1085883a 	add	r2,r2,r2
 10016fc:	1085883a 	add	r2,r2,r2
 1001700:	1887883a 	add	r3,r3,r2
 1001704:	e0bfff17 	ldw	r2,-4(fp)
 1001708:	1085883a 	add	r2,r2,r2
 100170c:	1085883a 	add	r2,r2,r2
 1001710:	1885883a 	add	r2,r3,r2
 1001714:	10bffe04 	addi	r2,r2,-8
 1001718:	10800017 	ldw	r2,0(r2)
 100171c:	e0bffa15 	stw	r2,-24(fp)
 1001720:	e0bffe17 	ldw	r2,-8(fp)
 1001724:	10c02617 	ldw	r3,152(r2)
 1001728:	e0bffe17 	ldw	r2,-8(fp)
 100172c:	10802817 	ldw	r2,160(r2)
 1001730:	1085883a 	add	r2,r2,r2
 1001734:	1085883a 	add	r2,r2,r2
 1001738:	1887883a 	add	r3,r3,r2
 100173c:	e0bfff17 	ldw	r2,-4(fp)
 1001740:	1085883a 	add	r2,r2,r2
 1001744:	1085883a 	add	r2,r2,r2
 1001748:	1885883a 	add	r2,r3,r2
 100174c:	10bffe04 	addi	r2,r2,-8
 1001750:	10800017 	ldw	r2,0(r2)
 1001754:	e0bffd15 	stw	r2,-12(fp)
 1001758:	e0bffe17 	ldw	r2,-8(fp)
 100175c:	10c02217 	ldw	r3,136(r2)
 1001760:	e0bffe17 	ldw	r2,-8(fp)
 1001764:	10802817 	ldw	r2,160(r2)
 1001768:	1085883a 	add	r2,r2,r2
 100176c:	1085883a 	add	r2,r2,r2
 1001770:	1887883a 	add	r3,r3,r2
 1001774:	e0bfff17 	ldw	r2,-4(fp)
 1001778:	1085883a 	add	r2,r2,r2
 100177c:	1085883a 	add	r2,r2,r2
 1001780:	1885883a 	add	r2,r3,r2
 1001784:	10bffe04 	addi	r2,r2,-8
 1001788:	10800017 	ldw	r2,0(r2)
 100178c:	e0bffc15 	stw	r2,-16(fp)
 1001790:	e0bffe17 	ldw	r2,-8(fp)
 1001794:	10c02317 	ldw	r3,140(r2)
 1001798:	e0bffe17 	ldw	r2,-8(fp)
 100179c:	10802817 	ldw	r2,160(r2)
 10017a0:	1085883a 	add	r2,r2,r2
 10017a4:	1085883a 	add	r2,r2,r2
 10017a8:	1887883a 	add	r3,r3,r2
 10017ac:	e0bfff17 	ldw	r2,-4(fp)
 10017b0:	1085883a 	add	r2,r2,r2
 10017b4:	1085883a 	add	r2,r2,r2
 10017b8:	1885883a 	add	r2,r3,r2
 10017bc:	10bffe04 	addi	r2,r2,-8
 10017c0:	10800017 	ldw	r2,0(r2)
 10017c4:	e0bffb15 	stw	r2,-20(fp)
 10017c8:	e0bffe17 	ldw	r2,-8(fp)
 10017cc:	10801517 	ldw	r2,84(r2)
 10017d0:	1007883a 	mov	r3,r2
 10017d4:	e0bfff17 	ldw	r2,-4(fp)
 10017d8:	1004913a 	slli	r2,r2,4
 10017dc:	1885883a 	add	r2,r3,r2
 10017e0:	10801004 	addi	r2,r2,64
 10017e4:	1007883a 	mov	r3,r2
 10017e8:	e0bffa17 	ldw	r2,-24(fp)
 10017ec:	18800035 	stwio	r2,0(r3)
 10017f0:	e0bffe17 	ldw	r2,-8(fp)
 10017f4:	10801517 	ldw	r2,84(r2)
 10017f8:	1007883a 	mov	r3,r2
 10017fc:	e0bfff17 	ldw	r2,-4(fp)
 1001800:	1004913a 	slli	r2,r2,4
 1001804:	1885883a 	add	r2,r3,r2
 1001808:	10801104 	addi	r2,r2,68
 100180c:	1007883a 	mov	r3,r2
 1001810:	e0bffd17 	ldw	r2,-12(fp)
 1001814:	18800035 	stwio	r2,0(r3)
 1001818:	e13fff17 	ldw	r4,-4(fp)
 100181c:	e0bffc17 	ldw	r2,-16(fp)
 1001820:	109fffac 	andhi	r2,r2,32766
 1001824:	1005d47a 	srai	r2,r2,17
 1001828:	100b883a 	mov	r5,r2
 100182c:	e0fffe17 	ldw	r3,-8(fp)
 1001830:	2105883a 	add	r2,r4,r4
 1001834:	1085883a 	add	r2,r2,r2
 1001838:	10c5883a 	add	r2,r2,r3
 100183c:	1080a104 	addi	r2,r2,644
 1001840:	11400015 	stw	r5,0(r2)
 1001844:	e13fff17 	ldw	r4,-4(fp)
 1001848:	e0fffc17 	ldw	r3,-16(fp)
 100184c:	008000b4 	movhi	r2,2
 1001850:	10bfffc4 	addi	r2,r2,-1
 1001854:	188a703a 	and	r5,r3,r2
 1001858:	e0fffe17 	ldw	r3,-8(fp)
 100185c:	2105883a 	add	r2,r4,r4
 1001860:	1085883a 	add	r2,r2,r2
 1001864:	10c5883a 	add	r2,r2,r3
 1001868:	1080c104 	addi	r2,r2,772
 100186c:	11400015 	stw	r5,0(r2)
 1001870:	e0bffe17 	ldw	r2,-8(fp)
 1001874:	10801517 	ldw	r2,84(r2)
 1001878:	1007883a 	mov	r3,r2
 100187c:	e0bfff17 	ldw	r2,-4(fp)
 1001880:	1004913a 	slli	r2,r2,4
 1001884:	1885883a 	add	r2,r3,r2
 1001888:	10801204 	addi	r2,r2,72
 100188c:	1007883a 	mov	r3,r2
 1001890:	e0bffc17 	ldw	r2,-16(fp)
 1001894:	18800035 	stwio	r2,0(r3)
 1001898:	e13fff17 	ldw	r4,-4(fp)
 100189c:	e0bffb17 	ldw	r2,-20(fp)
 10018a0:	109fffac 	andhi	r2,r2,32766
 10018a4:	1005d47a 	srai	r2,r2,17
 10018a8:	100b883a 	mov	r5,r2
 10018ac:	e0fffe17 	ldw	r3,-8(fp)
 10018b0:	2105883a 	add	r2,r4,r4
 10018b4:	1085883a 	add	r2,r2,r2
 10018b8:	10c5883a 	add	r2,r2,r3
 10018bc:	1080b104 	addi	r2,r2,708
 10018c0:	11400015 	stw	r5,0(r2)
 10018c4:	e13fff17 	ldw	r4,-4(fp)
 10018c8:	e0fffb17 	ldw	r3,-20(fp)
 10018cc:	008000b4 	movhi	r2,2
 10018d0:	10bfffc4 	addi	r2,r2,-1
 10018d4:	188a703a 	and	r5,r3,r2
 10018d8:	e0fffe17 	ldw	r3,-8(fp)
 10018dc:	2105883a 	add	r2,r4,r4
 10018e0:	1085883a 	add	r2,r2,r2
 10018e4:	10c5883a 	add	r2,r2,r3
 10018e8:	1080d104 	addi	r2,r2,836
 10018ec:	11400015 	stw	r5,0(r2)
 10018f0:	e0bffe17 	ldw	r2,-8(fp)
 10018f4:	10801517 	ldw	r2,84(r2)
 10018f8:	1007883a 	mov	r3,r2
 10018fc:	e0bfff17 	ldw	r2,-4(fp)
 1001900:	1004913a 	slli	r2,r2,4
 1001904:	1885883a 	add	r2,r3,r2
 1001908:	10801304 	addi	r2,r2,76
 100190c:	1007883a 	mov	r3,r2
 1001910:	e0bffb17 	ldw	r2,-20(fp)
 1001914:	18800035 	stwio	r2,0(r3)
 1001918:	e13fff17 	ldw	r4,-4(fp)
 100191c:	e0bfff17 	ldw	r2,-4(fp)
 1001920:	1085883a 	add	r2,r2,r2
 1001924:	1085883a 	add	r2,r2,r2
 1001928:	10800484 	addi	r2,r2,18
 100192c:	1007883a 	mov	r3,r2
 1001930:	e0bffe17 	ldw	r2,-8(fp)
 1001934:	2085883a 	add	r2,r4,r2
 1001938:	1080e104 	addi	r2,r2,900
 100193c:	10c00005 	stb	r3,0(r2)
 1001940:	e13fff17 	ldw	r4,-4(fp)
 1001944:	e0bfff17 	ldw	r2,-4(fp)
 1001948:	1085883a 	add	r2,r2,r2
 100194c:	1085883a 	add	r2,r2,r2
 1001950:	108004c4 	addi	r2,r2,19
 1001954:	1007883a 	mov	r3,r2
 1001958:	e0bffe17 	ldw	r2,-8(fp)
 100195c:	2085883a 	add	r2,r4,r2
 1001960:	1080e504 	addi	r2,r2,916
 1001964:	10c00005 	stb	r3,0(r2)
 1001968:	e13fff17 	ldw	r4,-4(fp)
 100196c:	e0bfff17 	ldw	r2,-4(fp)
 1001970:	e0fffe17 	ldw	r3,-8(fp)
 1001974:	1085883a 	add	r2,r2,r2
 1001978:	1085883a 	add	r2,r2,r2
 100197c:	10c5883a 	add	r2,r2,r3
 1001980:	1080a104 	addi	r2,r2,644
 1001984:	11400017 	ldw	r5,0(r2)
 1001988:	e0fffe17 	ldw	r3,-8(fp)
 100198c:	2105883a 	add	r2,r4,r4
 1001990:	1085883a 	add	r2,r2,r2
 1001994:	10c5883a 	add	r2,r2,r3
 1001998:	10809104 	addi	r2,r2,580
 100199c:	11400015 	stw	r5,0(r2)
 10019a0:	e0bfff17 	ldw	r2,-4(fp)
 10019a4:	e0fffe17 	ldw	r3,-8(fp)
 10019a8:	1085883a 	add	r2,r2,r2
 10019ac:	1085883a 	add	r2,r2,r2
 10019b0:	10c5883a 	add	r2,r2,r3
 10019b4:	10c05104 	addi	r3,r2,324
 10019b8:	0085c034 	movhi	r2,5888
 10019bc:	18800015 	stw	r2,0(r3)
 10019c0:	e037883a 	mov	sp,fp
 10019c4:	df000017 	ldw	fp,0(sp)
 10019c8:	dec00104 	addi	sp,sp,4
 10019cc:	f800283a 	ret

010019d0 <USB_DisableEP>:
 10019d0:	defffc04 	addi	sp,sp,-16
 10019d4:	df000315 	stw	fp,12(sp)
 10019d8:	df000304 	addi	fp,sp,12
 10019dc:	e13ffe15 	stw	r4,-8(fp)
 10019e0:	e17fff15 	stw	r5,-4(fp)
 10019e4:	e0bffe17 	ldw	r2,-8(fp)
 10019e8:	10c01a17 	ldw	r3,104(r2)
 10019ec:	e0bffe17 	ldw	r2,-8(fp)
 10019f0:	10802817 	ldw	r2,160(r2)
 10019f4:	1085883a 	add	r2,r2,r2
 10019f8:	1085883a 	add	r2,r2,r2
 10019fc:	1885883a 	add	r2,r3,r2
 1001a00:	10bfff04 	addi	r2,r2,-4
 1001a04:	10800017 	ldw	r2,0(r2)
 1001a08:	e0bffd15 	stw	r2,-12(fp)
 1001a0c:	e0bffd17 	ldw	r2,-12(fp)
 1001a10:	10ffffcc 	andi	r3,r2,65535
 1001a14:	e0bfff17 	ldw	r2,-4(fp)
 1001a18:	10bfffc4 	addi	r2,r2,-1
 1001a1c:	1885d83a 	sra	r2,r3,r2
 1001a20:	1080004c 	andi	r2,r2,1
 1001a24:	10803fcc 	andi	r2,r2,255
 1001a28:	1005003a 	cmpeq	r2,r2,zero
 1001a2c:	10001e1e 	bne	r2,zero,1001aa8 <USB_DisableEP+0xd8>
 1001a30:	e0bffe17 	ldw	r2,-8(fp)
 1001a34:	10801517 	ldw	r2,84(r2)
 1001a38:	1007883a 	mov	r3,r2
 1001a3c:	e0bfff17 	ldw	r2,-4(fp)
 1001a40:	1004913a 	slli	r2,r2,4
 1001a44:	1885883a 	add	r2,r3,r2
 1001a48:	10801004 	addi	r2,r2,64
 1001a4c:	1007883a 	mov	r3,r2
 1001a50:	00802034 	movhi	r2,128
 1001a54:	18800035 	stwio	r2,0(r3)
 1001a58:	e0bffe17 	ldw	r2,-8(fp)
 1001a5c:	10801517 	ldw	r2,84(r2)
 1001a60:	1007883a 	mov	r3,r2
 1001a64:	e0bfff17 	ldw	r2,-4(fp)
 1001a68:	1004913a 	slli	r2,r2,4
 1001a6c:	1885883a 	add	r2,r3,r2
 1001a70:	10801204 	addi	r2,r2,72
 1001a74:	1007883a 	mov	r3,r2
 1001a78:	00bfffc4 	movi	r2,-1
 1001a7c:	18800035 	stwio	r2,0(r3)
 1001a80:	e0bffe17 	ldw	r2,-8(fp)
 1001a84:	10801517 	ldw	r2,84(r2)
 1001a88:	1007883a 	mov	r3,r2
 1001a8c:	e0bfff17 	ldw	r2,-4(fp)
 1001a90:	1004913a 	slli	r2,r2,4
 1001a94:	1885883a 	add	r2,r3,r2
 1001a98:	10801304 	addi	r2,r2,76
 1001a9c:	1007883a 	mov	r3,r2
 1001aa0:	00bfffc4 	movi	r2,-1
 1001aa4:	18800035 	stwio	r2,0(r3)
 1001aa8:	e0bffd17 	ldw	r2,-12(fp)
 1001aac:	1007d3fa 	srai	r3,r2,15
 1001ab0:	e0bfff17 	ldw	r2,-4(fp)
 1001ab4:	1885d83a 	sra	r2,r3,r2
 1001ab8:	1080004c 	andi	r2,r2,1
 1001abc:	10803fcc 	andi	r2,r2,255
 1001ac0:	1005003a 	cmpeq	r2,r2,zero
 1001ac4:	10001e1e 	bne	r2,zero,1001b40 <USB_DisableEP+0x170>
 1001ac8:	e0bffe17 	ldw	r2,-8(fp)
 1001acc:	10801517 	ldw	r2,84(r2)
 1001ad0:	1007883a 	mov	r3,r2
 1001ad4:	e0bfff17 	ldw	r2,-4(fp)
 1001ad8:	1004913a 	slli	r2,r2,4
 1001adc:	1885883a 	add	r2,r3,r2
 1001ae0:	10801004 	addi	r2,r2,64
 1001ae4:	1007883a 	mov	r3,r2
 1001ae8:	00802034 	movhi	r2,128
 1001aec:	18800035 	stwio	r2,0(r3)
 1001af0:	e0bffe17 	ldw	r2,-8(fp)
 1001af4:	10801517 	ldw	r2,84(r2)
 1001af8:	1007883a 	mov	r3,r2
 1001afc:	e0bfff17 	ldw	r2,-4(fp)
 1001b00:	1004913a 	slli	r2,r2,4
 1001b04:	1885883a 	add	r2,r3,r2
 1001b08:	10801204 	addi	r2,r2,72
 1001b0c:	1007883a 	mov	r3,r2
 1001b10:	00bfffc4 	movi	r2,-1
 1001b14:	18800035 	stwio	r2,0(r3)
 1001b18:	e0bffe17 	ldw	r2,-8(fp)
 1001b1c:	10801517 	ldw	r2,84(r2)
 1001b20:	1007883a 	mov	r3,r2
 1001b24:	e0bfff17 	ldw	r2,-4(fp)
 1001b28:	1004913a 	slli	r2,r2,4
 1001b2c:	1885883a 	add	r2,r3,r2
 1001b30:	10801304 	addi	r2,r2,76
 1001b34:	1007883a 	mov	r3,r2
 1001b38:	00bfffc4 	movi	r2,-1
 1001b3c:	18800035 	stwio	r2,0(r3)
 1001b40:	e037883a 	mov	sp,fp
 1001b44:	df000017 	ldw	fp,0(sp)
 1001b48:	dec00104 	addi	sp,sp,4
 1001b4c:	f800283a 	ret

01001b50 <usb20sr_connect>:
 1001b50:	defffe04 	addi	sp,sp,-8
 1001b54:	df000115 	stw	fp,4(sp)
 1001b58:	df000104 	addi	fp,sp,4
 1001b5c:	e13fff15 	stw	r4,-4(fp)
 1001b60:	e0bfff17 	ldw	r2,-4(fp)
 1001b64:	10c1b304 	addi	r3,r2,1740
 1001b68:	e0bfff17 	ldw	r2,-4(fp)
 1001b6c:	10c03f15 	stw	r3,252(r2)
 1001b70:	e0bfff17 	ldw	r2,-4(fp)
 1001b74:	10c1b504 	addi	r3,r2,1748
 1001b78:	e0bfff17 	ldw	r2,-4(fp)
 1001b7c:	10c04015 	stw	r3,256(r2)
 1001b80:	e0bfff17 	ldw	r2,-4(fp)
 1001b84:	10c04017 	ldw	r3,256(r2)
 1001b88:	00800104 	movi	r2,4
 1001b8c:	18800215 	stw	r2,8(r3)
 1001b90:	e0bfff17 	ldw	r2,-4(fp)
 1001b94:	10801517 	ldw	r2,84(r2)
 1001b98:	10807f04 	addi	r2,r2,508
 1001b9c:	1007883a 	mov	r3,r2
 1001ba0:	00800044 	movi	r2,1
 1001ba4:	18800025 	stbio	r2,0(r3)
 1001ba8:	e037883a 	mov	sp,fp
 1001bac:	df000017 	ldw	fp,0(sp)
 1001bb0:	dec00104 	addi	sp,sp,4
 1001bb4:	f800283a 	ret

01001bb8 <usb20sr_disconnect>:
 1001bb8:	defffe04 	addi	sp,sp,-8
 1001bbc:	df000115 	stw	fp,4(sp)
 1001bc0:	df000104 	addi	fp,sp,4
 1001bc4:	e13fff15 	stw	r4,-4(fp)
 1001bc8:	e0bfff17 	ldw	r2,-4(fp)
 1001bcc:	10801517 	ldw	r2,84(r2)
 1001bd0:	10807f04 	addi	r2,r2,508
 1001bd4:	10000025 	stbio	zero,0(r2)
 1001bd8:	e0ffff17 	ldw	r3,-4(fp)
 1001bdc:	00800044 	movi	r2,1
 1001be0:	18800e15 	stw	r2,56(r3)
 1001be4:	e037883a 	mov	sp,fp
 1001be8:	df000017 	ldw	fp,0(sp)
 1001bec:	dec00104 	addi	sp,sp,4
 1001bf0:	f800283a 	ret

01001bf4 <sls_avalon_usb20_irq>:
 1001bf4:	deffc604 	addi	sp,sp,-232
 1001bf8:	dfc03915 	stw	ra,228(sp)
 1001bfc:	df003815 	stw	fp,224(sp)
 1001c00:	df003804 	addi	fp,sp,224
 1001c04:	e13ff215 	stw	r4,-56(fp)
 1001c08:	e0bff217 	ldw	r2,-56(fp)
 1001c0c:	e0bfd515 	stw	r2,-172(fp)
 1001c10:	e03fd645 	stb	zero,-167(fp)
 1001c14:	e03fd715 	stw	zero,-164(fp)
 1001c18:	e03fdb15 	stw	zero,-148(fp)
 1001c1c:	e03fdc15 	stw	zero,-144(fp)
 1001c20:	e03fe115 	stw	zero,-124(fp)
 1001c24:	e03fe215 	stw	zero,-120(fp)
 1001c28:	e03fe315 	stw	zero,-116(fp)
 1001c2c:	e03fe415 	stw	zero,-112(fp)
 1001c30:	e0bfd517 	ldw	r2,-172(fp)
 1001c34:	10803217 	ldw	r2,200(r2)
 1001c38:	e0bfe515 	stw	r2,-108(fp)
 1001c3c:	e03fd30d 	sth	zero,-180(fp)
 1001c40:	e03fd28d 	sth	zero,-182(fp)
 1001c44:	e03fd20d 	sth	zero,-184(fp)
 1001c48:	e03fd115 	stw	zero,-188(fp)
 1001c4c:	e0bfd517 	ldw	r2,-172(fp)
 1001c50:	10800043 	ldbu	r2,1(r2)
 1001c54:	10803fcc 	andi	r2,r2,255
 1001c58:	e0bfe915 	stw	r2,-92(fp)
 1001c5c:	e0bfd517 	ldw	r2,-172(fp)
 1001c60:	10801517 	ldw	r2,84(r2)
 1001c64:	e0bfea15 	stw	r2,-88(fp)
 1001c68:	e0bfd517 	ldw	r2,-172(fp)
 1001c6c:	10803f17 	ldw	r2,252(r2)
 1001c70:	e0bfd015 	stw	r2,-192(fp)
 1001c74:	e0bfd517 	ldw	r2,-172(fp)
 1001c78:	10804017 	ldw	r2,256(r2)
 1001c7c:	e0bfcf15 	stw	r2,-196(fp)
 1001c80:	e0bfea17 	ldw	r2,-88(fp)
 1001c84:	10800304 	addi	r2,r2,12
 1001c88:	10800037 	ldwio	r2,0(r2)
 1001c8c:	e0bfe115 	stw	r2,-124(fp)
 1001c90:	e0bfe117 	ldw	r2,-124(fp)
 1001c94:	1084002c 	andhi	r2,r2,4096
 1001c98:	1005003a 	cmpeq	r2,r2,zero
 1001c9c:	10004f1e 	bne	r2,zero,1001ddc <sls_avalon_usb20_irq+0x1e8>
 1001ca0:	e0bfd517 	ldw	r2,-172(fp)
 1001ca4:	10803317 	ldw	r2,204(r2)
 1001ca8:	1004c03a 	cmpne	r2,r2,zero
 1001cac:	1000031e 	bne	r2,zero,1001cbc <sls_avalon_usb20_irq+0xc8>
 1001cb0:	e0ffd517 	ldw	r3,-172(fp)
 1001cb4:	00800044 	movi	r2,1
 1001cb8:	18803315 	stw	r2,204(r3)
 1001cbc:	e0bfd517 	ldw	r2,-172(fp)
 1001cc0:	10003215 	stw	zero,200(r2)
 1001cc4:	e0ffcf17 	ldw	r3,-196(fp)
 1001cc8:	00800084 	movi	r2,2
 1001ccc:	18800215 	stw	r2,8(r3)
 1001cd0:	e0bfd517 	ldw	r2,-172(fp)
 1001cd4:	10000005 	stb	zero,0(r2)
 1001cd8:	e0bfd517 	ldw	r2,-172(fp)
 1001cdc:	10002815 	stw	zero,160(r2)
 1001ce0:	e0bfd517 	ldw	r2,-172(fp)
 1001ce4:	10002915 	stw	zero,164(r2)
 1001ce8:	e0bfd517 	ldw	r2,-172(fp)
 1001cec:	10002c15 	stw	zero,176(r2)
 1001cf0:	e0bfd517 	ldw	r2,-172(fp)
 1001cf4:	10002d15 	stw	zero,180(r2)
 1001cf8:	e0ffd517 	ldw	r3,-172(fp)
 1001cfc:	00800044 	movi	r2,1
 1001d00:	18800f15 	stw	r2,60(r3)
 1001d04:	e0bfd517 	ldw	r2,-172(fp)
 1001d08:	10000e15 	stw	zero,56(r2)
 1001d0c:	e0bfd517 	ldw	r2,-172(fp)
 1001d10:	10003415 	stw	zero,208(r2)
 1001d14:	e0bfcf17 	ldw	r2,-196(fp)
 1001d18:	10000415 	stw	zero,16(r2)
 1001d1c:	e0bfd517 	ldw	r2,-172(fp)
 1001d20:	1001bc45 	stb	zero,1777(r2)
 1001d24:	e0bfd517 	ldw	r2,-172(fp)
 1001d28:	1001bc05 	stb	zero,1776(r2)
 1001d2c:	e0bfd517 	ldw	r2,-172(fp)
 1001d30:	10803817 	ldw	r2,224(r2)
 1001d34:	1005003a 	cmpeq	r2,r2,zero
 1001d38:	1000041e 	bne	r2,zero,1001d4c <sls_avalon_usb20_irq+0x158>
 1001d3c:	e0bfd517 	ldw	r2,-172(fp)
 1001d40:	10803817 	ldw	r2,224(r2)
 1001d44:	e13fd517 	ldw	r4,-172(fp)
 1001d48:	103ee83a 	callr	r2
 1001d4c:	e03fd715 	stw	zero,-164(fp)
 1001d50:	00001106 	br	1001d98 <sls_avalon_usb20_irq+0x1a4>
 1001d54:	e0bfd717 	ldw	r2,-164(fp)
 1001d58:	e0ffd517 	ldw	r3,-172(fp)
 1001d5c:	1085883a 	add	r2,r2,r2
 1001d60:	1085883a 	add	r2,r2,r2
 1001d64:	10c5883a 	add	r2,r2,r3
 1001d68:	1080e904 	addi	r2,r2,932
 1001d6c:	10000015 	stw	zero,0(r2)
 1001d70:	e0bfd717 	ldw	r2,-164(fp)
 1001d74:	e0ffd517 	ldw	r3,-172(fp)
 1001d78:	1085883a 	add	r2,r2,r2
 1001d7c:	1085883a 	add	r2,r2,r2
 1001d80:	10c5883a 	add	r2,r2,r3
 1001d84:	1081a204 	addi	r2,r2,1672
 1001d88:	10000015 	stw	zero,0(r2)
 1001d8c:	e0bfd717 	ldw	r2,-164(fp)
 1001d90:	10800044 	addi	r2,r2,1
 1001d94:	e0bfd715 	stw	r2,-164(fp)
 1001d98:	e0bfd717 	ldw	r2,-164(fp)
 1001d9c:	108003f0 	cmpltui	r2,r2,15
 1001da0:	103fec1e 	bne	r2,zero,1001d54 <__alt_data_end+0xfffe0dfc>
 1001da4:	e0bfea17 	ldw	r2,-88(fp)
 1001da8:	11001004 	addi	r4,r2,64
 1001dac:	e0bfe917 	ldw	r2,-92(fp)
 1001db0:	10c0c0f4 	orhi	r3,r2,771
 1001db4:	2005883a 	mov	r2,r4
 1001db8:	10c00035 	stwio	r3,0(r2)
 1001dbc:	e0bfea17 	ldw	r2,-88(fp)
 1001dc0:	10801104 	addi	r2,r2,68
 1001dc4:	1007883a 	mov	r3,r2
 1001dc8:	008fc034 	movhi	r2,16128
 1001dcc:	18800035 	stwio	r2,0(r3)
 1001dd0:	e0ffd517 	ldw	r3,-172(fp)
 1001dd4:	00800084 	movi	r2,2
 1001dd8:	18800c15 	stw	r2,48(r3)
 1001ddc:	e0bfe117 	ldw	r2,-124(fp)
 1001de0:	1088002c 	andhi	r2,r2,8192
 1001de4:	1005003a 	cmpeq	r2,r2,zero
 1001de8:	1000691e 	bne	r2,zero,1001f90 <sls_avalon_usb20_irq+0x39c>
 1001dec:	e0ffcf17 	ldw	r3,-196(fp)
 1001df0:	00800084 	movi	r2,2
 1001df4:	18800215 	stw	r2,8(r3)
 1001df8:	e03fd715 	stw	zero,-164(fp)
 1001dfc:	00001106 	br	1001e44 <sls_avalon_usb20_irq+0x250>
 1001e00:	e0bfd717 	ldw	r2,-164(fp)
 1001e04:	e0ffd517 	ldw	r3,-172(fp)
 1001e08:	1085883a 	add	r2,r2,r2
 1001e0c:	1085883a 	add	r2,r2,r2
 1001e10:	10c5883a 	add	r2,r2,r3
 1001e14:	1080e904 	addi	r2,r2,932
 1001e18:	10000015 	stw	zero,0(r2)
 1001e1c:	e0bfd717 	ldw	r2,-164(fp)
 1001e20:	e0ffd517 	ldw	r3,-172(fp)
 1001e24:	1085883a 	add	r2,r2,r2
 1001e28:	1085883a 	add	r2,r2,r2
 1001e2c:	10c5883a 	add	r2,r2,r3
 1001e30:	1081a204 	addi	r2,r2,1672
 1001e34:	10000015 	stw	zero,0(r2)
 1001e38:	e0bfd717 	ldw	r2,-164(fp)
 1001e3c:	10800044 	addi	r2,r2,1
 1001e40:	e0bfd715 	stw	r2,-164(fp)
 1001e44:	e0bfd717 	ldw	r2,-164(fp)
 1001e48:	10800430 	cmpltui	r2,r2,16
 1001e4c:	103fec1e 	bne	r2,zero,1001e00 <__alt_data_end+0xfffe0ea8>
 1001e50:	e0bfea17 	ldw	r2,-88(fp)
 1001e54:	10800404 	addi	r2,r2,16
 1001e58:	10800037 	ldwio	r2,0(r2)
 1001e5c:	1080008c 	andi	r2,r2,2
 1001e60:	1005003a 	cmpeq	r2,r2,zero
 1001e64:	1000271e 	bne	r2,zero,1001f04 <sls_avalon_usb20_irq+0x310>
 1001e68:	e0bfd517 	ldw	r2,-172(fp)
 1001e6c:	10800317 	ldw	r2,12(r2)
 1001e70:	10800084 	addi	r2,r2,2
 1001e74:	10000005 	stb	zero,0(r2)
 1001e78:	e0bfd517 	ldw	r2,-172(fp)
 1001e7c:	10800317 	ldw	r2,12(r2)
 1001e80:	10c000c4 	addi	r3,r2,3
 1001e84:	00800084 	movi	r2,2
 1001e88:	18800005 	stb	r2,0(r3)
 1001e8c:	d0a00117 	ldw	r2,-32764(gp)
 1001e90:	10bfffe0 	cmpeqi	r2,r2,-1
 1001e94:	1000031e 	bne	r2,zero,1001ea4 <sls_avalon_usb20_irq+0x2b0>
 1001e98:	d0a00117 	ldw	r2,-32764(gp)
 1001e9c:	1004c03a 	cmpne	r2,r2,zero
 1001ea0:	1000051e 	bne	r2,zero,1001eb8 <sls_avalon_usb20_irq+0x2c4>
 1001ea4:	00800044 	movi	r2,1
 1001ea8:	d0a00115 	stw	r2,-32764(gp)
 1001eac:	e0ffd517 	ldw	r3,-172(fp)
 1001eb0:	00800044 	movi	r2,1
 1001eb4:	18800e15 	stw	r2,56(r3)
 1001eb8:	e0ffd517 	ldw	r3,-172(fp)
 1001ebc:	00800044 	movi	r2,1
 1001ec0:	18800c15 	stw	r2,48(r3)
 1001ec4:	e0bfd517 	ldw	r2,-172(fp)
 1001ec8:	1001bc45 	stb	zero,1777(r2)
 1001ecc:	e0bfea17 	ldw	r2,-88(fp)
 1001ed0:	11001004 	addi	r4,r2,64
 1001ed4:	e0ffe917 	ldw	r3,-92(fp)
 1001ed8:	0080c0f4 	movhi	r2,771
 1001edc:	10820004 	addi	r2,r2,2048
 1001ee0:	1886b03a 	or	r3,r3,r2
 1001ee4:	2005883a 	mov	r2,r4
 1001ee8:	10c00035 	stwio	r3,0(r2)
 1001eec:	e0bfea17 	ldw	r2,-88(fp)
 1001ef0:	10801104 	addi	r2,r2,68
 1001ef4:	1007883a 	mov	r3,r2
 1001ef8:	008fc034 	movhi	r2,16128
 1001efc:	18800035 	stwio	r2,0(r3)
 1001f00:	00002306 	br	1001f90 <sls_avalon_usb20_irq+0x39c>
 1001f04:	e0bfd517 	ldw	r2,-172(fp)
 1001f08:	10800317 	ldw	r2,12(r2)
 1001f0c:	10c00084 	addi	r3,r2,2
 1001f10:	00800404 	movi	r2,16
 1001f14:	18800005 	stb	r2,0(r3)
 1001f18:	e0bfd517 	ldw	r2,-172(fp)
 1001f1c:	10800317 	ldw	r2,12(r2)
 1001f20:	10c000c4 	addi	r3,r2,3
 1001f24:	00800044 	movi	r2,1
 1001f28:	18800005 	stb	r2,0(r3)
 1001f2c:	d0a00117 	ldw	r2,-32764(gp)
 1001f30:	10bfffe0 	cmpeqi	r2,r2,-1
 1001f34:	1000031e 	bne	r2,zero,1001f44 <sls_avalon_usb20_irq+0x350>
 1001f38:	d0a00117 	ldw	r2,-32764(gp)
 1001f3c:	10800058 	cmpnei	r2,r2,1
 1001f40:	1000041e 	bne	r2,zero,1001f54 <sls_avalon_usb20_irq+0x360>
 1001f44:	d0200115 	stw	zero,-32764(gp)
 1001f48:	e0ffd517 	ldw	r3,-172(fp)
 1001f4c:	00800044 	movi	r2,1
 1001f50:	18800e15 	stw	r2,56(r3)
 1001f54:	e0bfd517 	ldw	r2,-172(fp)
 1001f58:	10000c15 	stw	zero,48(r2)
 1001f5c:	e0bfd517 	ldw	r2,-172(fp)
 1001f60:	1001bc45 	stb	zero,1777(r2)
 1001f64:	e0bfea17 	ldw	r2,-88(fp)
 1001f68:	11001004 	addi	r4,r2,64
 1001f6c:	e0bfe917 	ldw	r2,-92(fp)
 1001f70:	10c0c0f4 	orhi	r3,r2,771
 1001f74:	2005883a 	mov	r2,r4
 1001f78:	10c00035 	stwio	r3,0(r2)
 1001f7c:	e0bfea17 	ldw	r2,-88(fp)
 1001f80:	10801104 	addi	r2,r2,68
 1001f84:	1007883a 	mov	r3,r2
 1001f88:	008fc034 	movhi	r2,16128
 1001f8c:	18800035 	stwio	r2,0(r3)
 1001f90:	e0bfe117 	ldw	r2,-124(fp)
 1001f94:	1080004c 	andi	r2,r2,1
 1001f98:	10803fcc 	andi	r2,r2,255
 1001f9c:	1005003a 	cmpeq	r2,r2,zero
 1001fa0:	1001fe1e 	bne	r2,zero,100279c <sls_avalon_usb20_irq+0xba8>
 1001fa4:	e0bfea17 	ldw	r2,-88(fp)
 1001fa8:	10801104 	addi	r2,r2,68
 1001fac:	10800037 	ldwio	r2,0(r2)
 1001fb0:	e0bfdc15 	stw	r2,-144(fp)
 1001fb4:	e0bfdc17 	ldw	r2,-144(fp)
 1001fb8:	1080040c 	andi	r2,r2,16
 1001fbc:	1005003a 	cmpeq	r2,r2,zero
 1001fc0:	1000b61e 	bne	r2,zero,100229c <sls_avalon_usb20_irq+0x6a8>
 1001fc4:	e0bfe517 	ldw	r2,-108(fp)
 1001fc8:	1005003a 	cmpeq	r2,r2,zero
 1001fcc:	1000221e 	bne	r2,zero,1002058 <sls_avalon_usb20_irq+0x464>
 1001fd0:	e0bfe517 	ldw	r2,-108(fp)
 1001fd4:	10800058 	cmpnei	r2,r2,1
 1001fd8:	1000051e 	bne	r2,zero,1001ff0 <sls_avalon_usb20_irq+0x3fc>
 1001fdc:	e0bfea17 	ldw	r2,-88(fp)
 1001fe0:	10800804 	addi	r2,r2,32
 1001fe4:	1007883a 	mov	r3,r2
 1001fe8:	00800444 	movi	r2,17
 1001fec:	18800025 	stbio	r2,0(r3)
 1001ff0:	e0bfe517 	ldw	r2,-108(fp)
 1001ff4:	10800098 	cmpnei	r2,r2,2
 1001ff8:	1000051e 	bne	r2,zero,1002010 <sls_avalon_usb20_irq+0x41c>
 1001ffc:	e0bfea17 	ldw	r2,-88(fp)
 1002000:	10800804 	addi	r2,r2,32
 1002004:	1007883a 	mov	r3,r2
 1002008:	00800484 	movi	r2,18
 100200c:	18800025 	stbio	r2,0(r3)
 1002010:	e0bfe517 	ldw	r2,-108(fp)
 1002014:	10800118 	cmpnei	r2,r2,4
 1002018:	1000051e 	bne	r2,zero,1002030 <sls_avalon_usb20_irq+0x43c>
 100201c:	e0bfea17 	ldw	r2,-88(fp)
 1002020:	10800804 	addi	r2,r2,32
 1002024:	1007883a 	mov	r3,r2
 1002028:	00800504 	movi	r2,20
 100202c:	18800025 	stbio	r2,0(r3)
 1002030:	e0bfe517 	ldw	r2,-108(fp)
 1002034:	10800218 	cmpnei	r2,r2,8
 1002038:	1000051e 	bne	r2,zero,1002050 <sls_avalon_usb20_irq+0x45c>
 100203c:	e0bfea17 	ldw	r2,-88(fp)
 1002040:	10800804 	addi	r2,r2,32
 1002044:	1007883a 	mov	r3,r2
 1002048:	00800604 	movi	r2,24
 100204c:	18800025 	stbio	r2,0(r3)
 1002050:	e0bfd517 	ldw	r2,-172(fp)
 1002054:	10003215 	stw	zero,200(r2)
 1002058:	e0bfcf17 	ldw	r2,-196(fp)
 100205c:	10800617 	ldw	r2,24(r2)
 1002060:	10c00183 	ldbu	r3,6(r2)
 1002064:	108001c3 	ldbu	r2,7(r2)
 1002068:	1004923a 	slli	r2,r2,8
 100206c:	10c4b03a 	or	r2,r2,r3
 1002070:	10bfffcc 	andi	r2,r2,65535
 1002074:	1004c03a 	cmpne	r2,r2,zero
 1002078:	1000071e 	bne	r2,zero,1002098 <sls_avalon_usb20_irq+0x4a4>
 100207c:	e0bfcf17 	ldw	r2,-196(fp)
 1002080:	10800217 	ldw	r2,8(r2)
 1002084:	1004c03a 	cmpne	r2,r2,zero
 1002088:	1000031e 	bne	r2,zero,1002098 <sls_avalon_usb20_irq+0x4a4>
 100208c:	e0ffcf17 	ldw	r3,-196(fp)
 1002090:	00800084 	movi	r2,2
 1002094:	18800215 	stw	r2,8(r3)
 1002098:	e0bfcf17 	ldw	r2,-196(fp)
 100209c:	10800617 	ldw	r2,24(r2)
 10020a0:	10c00183 	ldbu	r3,6(r2)
 10020a4:	108001c3 	ldbu	r2,7(r2)
 10020a8:	1004923a 	slli	r2,r2,8
 10020ac:	10c4b03a 	or	r2,r2,r3
 10020b0:	10bfffcc 	andi	r2,r2,65535
 10020b4:	1005003a 	cmpeq	r2,r2,zero
 10020b8:	1000681e 	bne	r2,zero,100225c <sls_avalon_usb20_irq+0x668>
 10020bc:	e0bfcf17 	ldw	r2,-196(fp)
 10020c0:	10800217 	ldw	r2,8(r2)
 10020c4:	1004c03a 	cmpne	r2,r2,zero
 10020c8:	1000641e 	bne	r2,zero,100225c <sls_avalon_usb20_irq+0x668>
 10020cc:	e03fdf15 	stw	zero,-132(fp)
 10020d0:	e0bfd517 	ldw	r2,-172(fp)
 10020d4:	10803417 	ldw	r2,208(r2)
 10020d8:	e0bfd915 	stw	r2,-156(fp)
 10020dc:	e0bfcf17 	ldw	r2,-196(fp)
 10020e0:	10c00417 	ldw	r3,16(r2)
 10020e4:	e0bfd917 	ldw	r2,-156(fp)
 10020e8:	10c03f2e 	bgeu	r2,r3,10021e8 <sls_avalon_usb20_irq+0x5f4>
 10020ec:	e0bfcf17 	ldw	r2,-196(fp)
 10020f0:	10c00417 	ldw	r3,16(r2)
 10020f4:	e0bfd917 	ldw	r2,-156(fp)
 10020f8:	1885c83a 	sub	r2,r3,r2
 10020fc:	e0bfdf15 	stw	r2,-132(fp)
 1002100:	e0bfe917 	ldw	r2,-92(fp)
 1002104:	1007883a 	mov	r3,r2
 1002108:	e0bfdf17 	ldw	r2,-132(fp)
 100210c:	1880022e 	bgeu	r3,r2,1002118 <sls_avalon_usb20_irq+0x524>
 1002110:	e0bfe917 	ldw	r2,-92(fp)
 1002114:	e0bfdf15 	stw	r2,-132(fp)
 1002118:	e03fe015 	stw	zero,-128(fp)
 100211c:	00001606 	br	1002178 <sls_avalon_usb20_irq+0x584>
 1002120:	e0bfea17 	ldw	r2,-88(fp)
 1002124:	1007883a 	mov	r3,r2
 1002128:	e0bfe017 	ldw	r2,-128(fp)
 100212c:	1887883a 	add	r3,r3,r2
 1002130:	008000b4 	movhi	r2,2
 1002134:	1889883a 	add	r4,r3,r2
 1002138:	e0bfcf17 	ldw	r2,-196(fp)
 100213c:	10800117 	ldw	r2,4(r2)
 1002140:	1007883a 	mov	r3,r2
 1002144:	e0bfe017 	ldw	r2,-128(fp)
 1002148:	1887883a 	add	r3,r3,r2
 100214c:	e0bfd917 	ldw	r2,-156(fp)
 1002150:	1885883a 	add	r2,r3,r2
 1002154:	10800003 	ldbu	r2,0(r2)
 1002158:	10c03fcc 	andi	r3,r2,255
 100215c:	18c0201c 	xori	r3,r3,128
 1002160:	18ffe004 	addi	r3,r3,-128
 1002164:	2005883a 	mov	r2,r4
 1002168:	10c00025 	stbio	r3,0(r2)
 100216c:	e0bfe017 	ldw	r2,-128(fp)
 1002170:	10800044 	addi	r2,r2,1
 1002174:	e0bfe015 	stw	r2,-128(fp)
 1002178:	e0ffe017 	ldw	r3,-128(fp)
 100217c:	e0bfdf17 	ldw	r2,-132(fp)
 1002180:	18bfe736 	bltu	r3,r2,1002120 <__alt_data_end+0xfffe11c8>
 1002184:	e0bfea17 	ldw	r2,-88(fp)
 1002188:	11001304 	addi	r4,r2,76
 100218c:	e0bfdf17 	ldw	r2,-132(fp)
 1002190:	1004947a 	slli	r2,r2,17
 1002194:	1007883a 	mov	r3,r2
 1002198:	2005883a 	mov	r2,r4
 100219c:	10c00035 	stwio	r3,0(r2)
 10021a0:	e0bfd517 	ldw	r2,-172(fp)
 10021a4:	10c03417 	ldw	r3,208(r2)
 10021a8:	e0bfdf17 	ldw	r2,-132(fp)
 10021ac:	1887883a 	add	r3,r3,r2
 10021b0:	e0bfd517 	ldw	r2,-172(fp)
 10021b4:	10c03415 	stw	r3,208(r2)
 10021b8:	e0bfd517 	ldw	r2,-172(fp)
 10021bc:	1081bc43 	ldbu	r2,1777(r2)
 10021c0:	10803fcc 	andi	r2,r2,255
 10021c4:	1004c03a 	cmpne	r2,r2,zero
 10021c8:	1001741e 	bne	r2,zero,100279c <sls_avalon_usb20_irq+0xba8>
 10021cc:	e0bfea17 	ldw	r2,-88(fp)
 10021d0:	11001204 	addi	r4,r2,72
 10021d4:	e0bfe917 	ldw	r2,-92(fp)
 10021d8:	1006947a 	slli	r3,r2,17
 10021dc:	2005883a 	mov	r2,r4
 10021e0:	10c00035 	stwio	r3,0(r2)
 10021e4:	00016d06 	br	100279c <sls_avalon_usb20_irq+0xba8>
 10021e8:	e0bfd517 	ldw	r2,-172(fp)
 10021ec:	10c03417 	ldw	r3,208(r2)
 10021f0:	e0bfcf17 	ldw	r2,-196(fp)
 10021f4:	10800417 	ldw	r2,16(r2)
 10021f8:	18802836 	bltu	r3,r2,100229c <sls_avalon_usb20_irq+0x6a8>
 10021fc:	e0bfcf17 	ldw	r2,-196(fp)
 1002200:	11000417 	ldw	r4,16(r2)
 1002204:	e0bfe917 	ldw	r2,-92(fp)
 1002208:	100b883a 	mov	r5,r2
 100220c:	1006c240 	call	1006c24 <__umodsi3>
 1002210:	1004c03a 	cmpne	r2,r2,zero
 1002214:	1000031e 	bne	r2,zero,1002224 <sls_avalon_usb20_irq+0x630>
 1002218:	e0bfea17 	ldw	r2,-88(fp)
 100221c:	10801304 	addi	r2,r2,76
 1002220:	10000035 	stwio	zero,0(r2)
 1002224:	e0bfea17 	ldw	r2,-88(fp)
 1002228:	11001204 	addi	r4,r2,72
 100222c:	e0bfe917 	ldw	r2,-92(fp)
 1002230:	1006947a 	slli	r3,r2,17
 1002234:	2005883a 	mov	r2,r4
 1002238:	10c00035 	stwio	r3,0(r2)
 100223c:	e0ffcf17 	ldw	r3,-196(fp)
 1002240:	00800044 	movi	r2,1
 1002244:	18800215 	stw	r2,8(r3)
 1002248:	e0bfd517 	ldw	r2,-172(fp)
 100224c:	10003415 	stw	zero,208(r2)
 1002250:	e0bfcf17 	ldw	r2,-196(fp)
 1002254:	10000415 	stw	zero,16(r2)
 1002258:	00001006 	br	100229c <sls_avalon_usb20_irq+0x6a8>
 100225c:	e0bfcf17 	ldw	r2,-196(fp)
 1002260:	10800617 	ldw	r2,24(r2)
 1002264:	10c00183 	ldbu	r3,6(r2)
 1002268:	108001c3 	ldbu	r2,7(r2)
 100226c:	1004923a 	slli	r2,r2,8
 1002270:	10c4b03a 	or	r2,r2,r3
 1002274:	10bfffcc 	andi	r2,r2,65535
 1002278:	1005003a 	cmpeq	r2,r2,zero
 100227c:	1000071e 	bne	r2,zero,100229c <sls_avalon_usb20_irq+0x6a8>
 1002280:	e0bfcf17 	ldw	r2,-196(fp)
 1002284:	10800217 	ldw	r2,8(r2)
 1002288:	10800058 	cmpnei	r2,r2,1
 100228c:	1000031e 	bne	r2,zero,100229c <sls_avalon_usb20_irq+0x6a8>
 1002290:	e0ffcf17 	ldw	r3,-196(fp)
 1002294:	00800084 	movi	r2,2
 1002298:	18800215 	stw	r2,8(r3)
 100229c:	e0bfdc17 	ldw	r2,-144(fp)
 10022a0:	1080020c 	andi	r2,r2,8
 10022a4:	1005003a 	cmpeq	r2,r2,zero
 10022a8:	10012d1e 	bne	r2,zero,1002760 <sls_avalon_usb20_irq+0xb6c>
 10022ac:	e0bfcf17 	ldw	r2,-196(fp)
 10022b0:	10800617 	ldw	r2,24(r2)
 10022b4:	10c00183 	ldbu	r3,6(r2)
 10022b8:	108001c3 	ldbu	r2,7(r2)
 10022bc:	1004923a 	slli	r2,r2,8
 10022c0:	10c4b03a 	or	r2,r2,r3
 10022c4:	10bfffcc 	andi	r2,r2,65535
 10022c8:	1005003a 	cmpeq	r2,r2,zero
 10022cc:	1000a71e 	bne	r2,zero,100256c <sls_avalon_usb20_irq+0x978>
 10022d0:	e0bfcf17 	ldw	r2,-196(fp)
 10022d4:	10800617 	ldw	r2,24(r2)
 10022d8:	10c00003 	ldbu	r3,0(r2)
 10022dc:	00bfe004 	movi	r2,-128
 10022e0:	1884703a 	and	r2,r3,r2
 10022e4:	10803fcc 	andi	r2,r2,255
 10022e8:	1004c03a 	cmpne	r2,r2,zero
 10022ec:	10009f1e 	bne	r2,zero,100256c <sls_avalon_usb20_irq+0x978>
 10022f0:	e0bfcf17 	ldw	r2,-196(fp)
 10022f4:	10800217 	ldw	r2,8(r2)
 10022f8:	1004c03a 	cmpne	r2,r2,zero
 10022fc:	10009b1e 	bne	r2,zero,100256c <sls_avalon_usb20_irq+0x978>
 1002300:	e0bfea17 	ldw	r2,-88(fp)
 1002304:	10801204 	addi	r2,r2,72
 1002308:	10800037 	ldwio	r2,0(r2)
 100230c:	e0bfeb15 	stw	r2,-84(fp)
 1002310:	e0ffe917 	ldw	r3,-92(fp)
 1002314:	e0bfeb17 	ldw	r2,-84(fp)
 1002318:	109fffac 	andhi	r2,r2,32766
 100231c:	1005d47a 	srai	r2,r2,17
 1002320:	1885c83a 	sub	r2,r3,r2
 1002324:	e0bfda15 	stw	r2,-152(fp)
 1002328:	e0bfcf17 	ldw	r2,-196(fp)
 100232c:	11000417 	ldw	r4,16(r2)
 1002330:	e0bfcf17 	ldw	r2,-196(fp)
 1002334:	10800617 	ldw	r2,24(r2)
 1002338:	10c00183 	ldbu	r3,6(r2)
 100233c:	108001c3 	ldbu	r2,7(r2)
 1002340:	1004923a 	slli	r2,r2,8
 1002344:	10c4b03a 	or	r2,r2,r3
 1002348:	10bfffcc 	andi	r2,r2,65535
 100234c:	2080352e 	bgeu	r4,r2,1002424 <sls_avalon_usb20_irq+0x830>
 1002350:	e0bfcf17 	ldw	r2,-196(fp)
 1002354:	10800417 	ldw	r2,16(r2)
 1002358:	e0bfdf15 	stw	r2,-132(fp)
 100235c:	e03fd715 	stw	zero,-164(fp)
 1002360:	00001606 	br	10023bc <sls_avalon_usb20_irq+0x7c8>
 1002364:	e0bfcf17 	ldw	r2,-196(fp)
 1002368:	10800117 	ldw	r2,4(r2)
 100236c:	1009883a 	mov	r4,r2
 1002370:	e0ffd717 	ldw	r3,-164(fp)
 1002374:	e0bfdf17 	ldw	r2,-132(fp)
 1002378:	1885883a 	add	r2,r3,r2
 100237c:	2089883a 	add	r4,r4,r2
 1002380:	e0bfea17 	ldw	r2,-88(fp)
 1002384:	1007883a 	mov	r3,r2
 1002388:	e0bfd717 	ldw	r2,-164(fp)
 100238c:	1887883a 	add	r3,r3,r2
 1002390:	008000b4 	movhi	r2,2
 1002394:	1885883a 	add	r2,r3,r2
 1002398:	10800003 	ldbu	r2,0(r2)
 100239c:	10c03fcc 	andi	r3,r2,255
 10023a0:	18c0201c 	xori	r3,r3,128
 10023a4:	18ffe004 	addi	r3,r3,-128
 10023a8:	2005883a 	mov	r2,r4
 10023ac:	10c00025 	stbio	r3,0(r2)
 10023b0:	e0bfd717 	ldw	r2,-164(fp)
 10023b4:	10800044 	addi	r2,r2,1
 10023b8:	e0bfd715 	stw	r2,-164(fp)
 10023bc:	e0ffd717 	ldw	r3,-164(fp)
 10023c0:	e0bfda17 	ldw	r2,-152(fp)
 10023c4:	18bfe736 	bltu	r3,r2,1002364 <__alt_data_end+0xfffe140c>
 10023c8:	e0bfcf17 	ldw	r2,-196(fp)
 10023cc:	10c00417 	ldw	r3,16(r2)
 10023d0:	e0bfda17 	ldw	r2,-152(fp)
 10023d4:	1887883a 	add	r3,r3,r2
 10023d8:	e0bfcf17 	ldw	r2,-196(fp)
 10023dc:	10c00415 	stw	r3,16(r2)
 10023e0:	e0bfcf17 	ldw	r2,-196(fp)
 10023e4:	11000417 	ldw	r4,16(r2)
 10023e8:	e0bfcf17 	ldw	r2,-196(fp)
 10023ec:	10800617 	ldw	r2,24(r2)
 10023f0:	10c00183 	ldbu	r3,6(r2)
 10023f4:	108001c3 	ldbu	r2,7(r2)
 10023f8:	1004923a 	slli	r2,r2,8
 10023fc:	10c4b03a 	or	r2,r2,r3
 1002400:	10bfffcc 	andi	r2,r2,65535
 1002404:	2080072e 	bgeu	r4,r2,1002424 <sls_avalon_usb20_irq+0x830>
 1002408:	e0bfea17 	ldw	r2,-88(fp)
 100240c:	11001204 	addi	r4,r2,72
 1002410:	e0bfe917 	ldw	r2,-92(fp)
 1002414:	1006947a 	slli	r3,r2,17
 1002418:	2005883a 	mov	r2,r4
 100241c:	10c00035 	stwio	r3,0(r2)
 1002420:	0000de06 	br	100279c <sls_avalon_usb20_irq+0xba8>
 1002424:	e0ffcf17 	ldw	r3,-196(fp)
 1002428:	00800044 	movi	r2,1
 100242c:	18800215 	stw	r2,8(r3)
 1002430:	e0bfcf17 	ldw	r2,-196(fp)
 1002434:	10000015 	stw	zero,0(r2)
 1002438:	e0bfcf17 	ldw	r2,-196(fp)
 100243c:	10000515 	stw	zero,20(r2)
 1002440:	e0bfd517 	ldw	r2,-172(fp)
 1002444:	10803d17 	ldw	r2,244(r2)
 1002448:	1005003a 	cmpeq	r2,r2,zero
 100244c:	10000f1e 	bne	r2,zero,100248c <sls_avalon_usb20_irq+0x898>
 1002450:	e0bfd517 	ldw	r2,-172(fp)
 1002454:	10803d17 	ldw	r2,244(r2)
 1002458:	e13fcf17 	ldw	r4,-196(fp)
 100245c:	e17fea17 	ldw	r5,-88(fp)
 1002460:	01800044 	movi	r6,1
 1002464:	103ee83a 	callr	r2
 1002468:	e0bfd517 	ldw	r2,-172(fp)
 100246c:	10003415 	stw	zero,208(r2)
 1002470:	e0bfcf17 	ldw	r2,-196(fp)
 1002474:	10000415 	stw	zero,16(r2)
 1002478:	e0bfcf17 	ldw	r2,-196(fp)
 100247c:	10800517 	ldw	r2,20(r2)
 1002480:	1005003a 	cmpeq	r2,r2,zero
 1002484:	10000c1e 	bne	r2,zero,10024b8 <sls_avalon_usb20_irq+0x8c4>
 1002488:	00001506 	br	10024e0 <sls_avalon_usb20_irq+0x8ec>
 100248c:	e13fd517 	ldw	r4,-172(fp)
 1002490:	01402004 	movi	r5,128
 1002494:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1002498:	e0ffcf17 	ldw	r3,-196(fp)
 100249c:	00800084 	movi	r2,2
 10024a0:	18800215 	stw	r2,8(r3)
 10024a4:	e0bfd517 	ldw	r2,-172(fp)
 10024a8:	10003415 	stw	zero,208(r2)
 10024ac:	e0bfcf17 	ldw	r2,-196(fp)
 10024b0:	10000415 	stw	zero,16(r2)
 10024b4:	0000b906 	br	100279c <sls_avalon_usb20_irq+0xba8>
 10024b8:	e0bfea17 	ldw	r2,-88(fp)
 10024bc:	11001204 	addi	r4,r2,72
 10024c0:	e0bfe917 	ldw	r2,-92(fp)
 10024c4:	1006947a 	slli	r3,r2,17
 10024c8:	2005883a 	mov	r2,r4
 10024cc:	10c00035 	stwio	r3,0(r2)
 10024d0:	e0bfea17 	ldw	r2,-88(fp)
 10024d4:	10801304 	addi	r2,r2,76
 10024d8:	10000035 	stwio	zero,0(r2)
 10024dc:	0000af06 	br	100279c <sls_avalon_usb20_irq+0xba8>
 10024e0:	e03fd715 	stw	zero,-164(fp)
 10024e4:	00001406 	br	1002538 <sls_avalon_usb20_irq+0x944>
 10024e8:	e0bfcf17 	ldw	r2,-196(fp)
 10024ec:	10800017 	ldw	r2,0(r2)
 10024f0:	1007883a 	mov	r3,r2
 10024f4:	e0bfd717 	ldw	r2,-164(fp)
 10024f8:	1885883a 	add	r2,r3,r2
 10024fc:	10800003 	ldbu	r2,0(r2)
 1002500:	e0bfd605 	stb	r2,-168(fp)
 1002504:	e0bfea17 	ldw	r2,-88(fp)
 1002508:	1007883a 	mov	r3,r2
 100250c:	e0bfd717 	ldw	r2,-164(fp)
 1002510:	1887883a 	add	r3,r3,r2
 1002514:	008000b4 	movhi	r2,2
 1002518:	1889883a 	add	r4,r3,r2
 100251c:	e0bfd603 	ldbu	r2,-168(fp)
 1002520:	10c03fcc 	andi	r3,r2,255
 1002524:	2005883a 	mov	r2,r4
 1002528:	10c00025 	stbio	r3,0(r2)
 100252c:	e0bfd717 	ldw	r2,-164(fp)
 1002530:	10800044 	addi	r2,r2,1
 1002534:	e0bfd715 	stw	r2,-164(fp)
 1002538:	e0bfcf17 	ldw	r2,-196(fp)
 100253c:	10c00517 	ldw	r3,20(r2)
 1002540:	e0bfd717 	ldw	r2,-164(fp)
 1002544:	10ffe836 	bltu	r2,r3,10024e8 <__alt_data_end+0xfffe1590>
 1002548:	e0bfea17 	ldw	r2,-88(fp)
 100254c:	11001304 	addi	r4,r2,76
 1002550:	e0bfcf17 	ldw	r2,-196(fp)
 1002554:	10800517 	ldw	r2,20(r2)
 1002558:	1004947a 	slli	r2,r2,17
 100255c:	1007883a 	mov	r3,r2
 1002560:	2005883a 	mov	r2,r4
 1002564:	10c00035 	stwio	r3,0(r2)
 1002568:	00008c06 	br	100279c <sls_avalon_usb20_irq+0xba8>
 100256c:	e0bfcf17 	ldw	r2,-196(fp)
 1002570:	10800617 	ldw	r2,24(r2)
 1002574:	10c00183 	ldbu	r3,6(r2)
 1002578:	108001c3 	ldbu	r2,7(r2)
 100257c:	1004923a 	slli	r2,r2,8
 1002580:	10c4b03a 	or	r2,r2,r3
 1002584:	10bfffcc 	andi	r2,r2,65535
 1002588:	1005003a 	cmpeq	r2,r2,zero
 100258c:	10000a1e 	bne	r2,zero,10025b8 <sls_avalon_usb20_irq+0x9c4>
 1002590:	e0bfcf17 	ldw	r2,-196(fp)
 1002594:	10800217 	ldw	r2,8(r2)
 1002598:	10800058 	cmpnei	r2,r2,1
 100259c:	1000061e 	bne	r2,zero,10025b8 <sls_avalon_usb20_irq+0x9c4>
 10025a0:	e0bfcf17 	ldw	r2,-196(fp)
 10025a4:	10000515 	stw	zero,20(r2)
 10025a8:	e0ffcf17 	ldw	r3,-196(fp)
 10025ac:	00800084 	movi	r2,2
 10025b0:	18800215 	stw	r2,8(r3)
 10025b4:	00006a06 	br	1002760 <sls_avalon_usb20_irq+0xb6c>
 10025b8:	e0bfcf17 	ldw	r2,-196(fp)
 10025bc:	10800617 	ldw	r2,24(r2)
 10025c0:	10c00183 	ldbu	r3,6(r2)
 10025c4:	108001c3 	ldbu	r2,7(r2)
 10025c8:	1004923a 	slli	r2,r2,8
 10025cc:	10c4b03a 	or	r2,r2,r3
 10025d0:	10bfffcc 	andi	r2,r2,65535
 10025d4:	1004c03a 	cmpne	r2,r2,zero
 10025d8:	1000611e 	bne	r2,zero,1002760 <sls_avalon_usb20_irq+0xb6c>
 10025dc:	e0bfcf17 	ldw	r2,-196(fp)
 10025e0:	10800617 	ldw	r2,24(r2)
 10025e4:	10c00003 	ldbu	r3,0(r2)
 10025e8:	00bfe004 	movi	r2,-128
 10025ec:	1884703a 	and	r2,r3,r2
 10025f0:	10803fcc 	andi	r2,r2,255
 10025f4:	1004c03a 	cmpne	r2,r2,zero
 10025f8:	1000591e 	bne	r2,zero,1002760 <sls_avalon_usb20_irq+0xb6c>
 10025fc:	e0bfcf17 	ldw	r2,-196(fp)
 1002600:	10800217 	ldw	r2,8(r2)
 1002604:	1004c03a 	cmpne	r2,r2,zero
 1002608:	1000551e 	bne	r2,zero,1002760 <sls_avalon_usb20_irq+0xb6c>
 100260c:	e0bfcf17 	ldw	r2,-196(fp)
 1002610:	10c00417 	ldw	r3,16(r2)
 1002614:	e0bfe917 	ldw	r2,-92(fp)
 1002618:	10bfffc4 	addi	r2,r2,-1
 100261c:	1884703a 	and	r2,r3,r2
 1002620:	1004c03a 	cmpne	r2,r2,zero
 1002624:	10004e1e 	bne	r2,zero,1002760 <sls_avalon_usb20_irq+0xb6c>
 1002628:	e0ffcf17 	ldw	r3,-196(fp)
 100262c:	00800044 	movi	r2,1
 1002630:	18800215 	stw	r2,8(r3)
 1002634:	e0bfcf17 	ldw	r2,-196(fp)
 1002638:	10000515 	stw	zero,20(r2)
 100263c:	e0bfcf17 	ldw	r2,-196(fp)
 1002640:	10000015 	stw	zero,0(r2)
 1002644:	e0bfd517 	ldw	r2,-172(fp)
 1002648:	10803d17 	ldw	r2,244(r2)
 100264c:	1005003a 	cmpeq	r2,r2,zero
 1002650:	10000f1e 	bne	r2,zero,1002690 <sls_avalon_usb20_irq+0xa9c>
 1002654:	e0bfd517 	ldw	r2,-172(fp)
 1002658:	10803d17 	ldw	r2,244(r2)
 100265c:	e13fcf17 	ldw	r4,-196(fp)
 1002660:	e17fea17 	ldw	r5,-88(fp)
 1002664:	01800044 	movi	r6,1
 1002668:	103ee83a 	callr	r2
 100266c:	e0bfd517 	ldw	r2,-172(fp)
 1002670:	10003415 	stw	zero,208(r2)
 1002674:	e0bfcf17 	ldw	r2,-196(fp)
 1002678:	10000415 	stw	zero,16(r2)
 100267c:	e0bfcf17 	ldw	r2,-196(fp)
 1002680:	10800517 	ldw	r2,20(r2)
 1002684:	1005003a 	cmpeq	r2,r2,zero
 1002688:	10000c1e 	bne	r2,zero,10026bc <sls_avalon_usb20_irq+0xac8>
 100268c:	00000f06 	br	10026cc <sls_avalon_usb20_irq+0xad8>
 1002690:	e13fd517 	ldw	r4,-172(fp)
 1002694:	01402004 	movi	r5,128
 1002698:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 100269c:	e0ffcf17 	ldw	r3,-196(fp)
 10026a0:	00800084 	movi	r2,2
 10026a4:	18800215 	stw	r2,8(r3)
 10026a8:	e0bfd517 	ldw	r2,-172(fp)
 10026ac:	10003415 	stw	zero,208(r2)
 10026b0:	e0bfcf17 	ldw	r2,-196(fp)
 10026b4:	10000415 	stw	zero,16(r2)
 10026b8:	00003806 	br	100279c <sls_avalon_usb20_irq+0xba8>
 10026bc:	e0bfea17 	ldw	r2,-88(fp)
 10026c0:	10801304 	addi	r2,r2,76
 10026c4:	10000035 	stwio	zero,0(r2)
 10026c8:	00003406 	br	100279c <sls_avalon_usb20_irq+0xba8>
 10026cc:	e03fd715 	stw	zero,-164(fp)
 10026d0:	00001406 	br	1002724 <sls_avalon_usb20_irq+0xb30>
 10026d4:	e0bfcf17 	ldw	r2,-196(fp)
 10026d8:	10800017 	ldw	r2,0(r2)
 10026dc:	1007883a 	mov	r3,r2
 10026e0:	e0bfd717 	ldw	r2,-164(fp)
 10026e4:	1885883a 	add	r2,r3,r2
 10026e8:	10800003 	ldbu	r2,0(r2)
 10026ec:	e0bfd605 	stb	r2,-168(fp)
 10026f0:	e0bfea17 	ldw	r2,-88(fp)
 10026f4:	1007883a 	mov	r3,r2
 10026f8:	e0bfd717 	ldw	r2,-164(fp)
 10026fc:	1887883a 	add	r3,r3,r2
 1002700:	008000b4 	movhi	r2,2
 1002704:	1889883a 	add	r4,r3,r2
 1002708:	e0bfd603 	ldbu	r2,-168(fp)
 100270c:	10c03fcc 	andi	r3,r2,255
 1002710:	2005883a 	mov	r2,r4
 1002714:	10c00025 	stbio	r3,0(r2)
 1002718:	e0bfd717 	ldw	r2,-164(fp)
 100271c:	10800044 	addi	r2,r2,1
 1002720:	e0bfd715 	stw	r2,-164(fp)
 1002724:	e0bfcf17 	ldw	r2,-196(fp)
 1002728:	10c00517 	ldw	r3,20(r2)
 100272c:	e0bfd717 	ldw	r2,-164(fp)
 1002730:	10ffe836 	bltu	r2,r3,10026d4 <__alt_data_end+0xfffe177c>
 1002734:	e0bfea17 	ldw	r2,-88(fp)
 1002738:	11001304 	addi	r4,r2,76
 100273c:	e0bfcf17 	ldw	r2,-196(fp)
 1002740:	10800517 	ldw	r2,20(r2)
 1002744:	1004947a 	slli	r2,r2,17
 1002748:	1007883a 	mov	r3,r2
 100274c:	2005883a 	mov	r2,r4
 1002750:	10c00035 	stwio	r3,0(r2)
 1002754:	e0bfcf17 	ldw	r2,-196(fp)
 1002758:	10000515 	stw	zero,20(r2)
 100275c:	00000f06 	br	100279c <sls_avalon_usb20_irq+0xba8>
 1002760:	e0bfdc17 	ldw	r2,-144(fp)
 1002764:	108009cc 	andi	r2,r2,39
 1002768:	1005003a 	cmpeq	r2,r2,zero
 100276c:	10000b1e 	bne	r2,zero,100279c <sls_avalon_usb20_irq+0xba8>
 1002770:	e0bfd517 	ldw	r2,-172(fp)
 1002774:	10803c17 	ldw	r2,240(r2)
 1002778:	1005003a 	cmpeq	r2,r2,zero
 100277c:	1000071e 	bne	r2,zero,100279c <sls_avalon_usb20_irq+0xba8>
 1002780:	e0bfd517 	ldw	r2,-172(fp)
 1002784:	10c03c17 	ldw	r3,240(r2)
 1002788:	e0bfdc17 	ldw	r2,-144(fp)
 100278c:	108029cc 	andi	r2,r2,167
 1002790:	10b00034 	orhi	r2,r2,49152
 1002794:	1009883a 	mov	r4,r2
 1002798:	183ee83a 	callr	r3
 100279c:	e0bfdc17 	ldw	r2,-144(fp)
 10027a0:	1080100c 	andi	r2,r2,64
 10027a4:	1005003a 	cmpeq	r2,r2,zero
 10027a8:	10088d1e 	bne	r2,zero,10049e0 <sls_avalon_usb20_irq+0x2dec>
 10027ac:	e0bfea17 	ldw	r2,-88(fp)
 10027b0:	10800c04 	addi	r2,r2,48
 10027b4:	10800037 	ldwio	r2,0(r2)
 10027b8:	e0bfdc15 	stw	r2,-144(fp)
 10027bc:	e0bfdc17 	ldw	r2,-144(fp)
 10027c0:	1080200c 	andi	r2,r2,128
 10027c4:	1004d1fa 	srli	r2,r2,7
 10027c8:	e0bfe615 	stw	r2,-104(fp)
 10027cc:	e0bfdc17 	ldw	r2,-144(fp)
 10027d0:	1080180c 	andi	r2,r2,96
 10027d4:	1004d17a 	srli	r2,r2,5
 10027d8:	e0bfe715 	stw	r2,-100(fp)
 10027dc:	e0bfdc17 	ldw	r2,-144(fp)
 10027e0:	108007cc 	andi	r2,r2,31
 10027e4:	e0bfe815 	stw	r2,-96(fp)
 10027e8:	e0bfdc17 	ldw	r2,-144(fp)
 10027ec:	10bfc00c 	andi	r2,r2,65280
 10027f0:	1004d23a 	srli	r2,r2,8
 10027f4:	e0bfd115 	stw	r2,-188(fp)
 10027f8:	e0bfdc17 	ldw	r2,-144(fp)
 10027fc:	10bfffec 	andhi	r2,r2,65535
 1002800:	1004d43a 	srli	r2,r2,16
 1002804:	e0bfd30d 	sth	r2,-180(fp)
 1002808:	e0bfea17 	ldw	r2,-88(fp)
 100280c:	10800d04 	addi	r2,r2,52
 1002810:	10800037 	ldwio	r2,0(r2)
 1002814:	e0bfdc15 	stw	r2,-144(fp)
 1002818:	e0bfdc17 	ldw	r2,-144(fp)
 100281c:	e0bfd28d 	sth	r2,-182(fp)
 1002820:	e0bfdc17 	ldw	r2,-144(fp)
 1002824:	10bfffec 	andhi	r2,r2,65535
 1002828:	1004d43a 	srli	r2,r2,16
 100282c:	e0bfd20d 	sth	r2,-184(fp)
 1002830:	e0bfe817 	ldw	r2,-96(fp)
 1002834:	108007cc 	andi	r2,r2,31
 1002838:	e17fd017 	ldw	r5,-192(fp)
 100283c:	110007cc 	andi	r4,r2,31
 1002840:	28c00003 	ldbu	r3,0(r5)
 1002844:	00bff804 	movi	r2,-32
 1002848:	1884703a 	and	r2,r3,r2
 100284c:	1007883a 	mov	r3,r2
 1002850:	2005883a 	mov	r2,r4
 1002854:	1884b03a 	or	r2,r3,r2
 1002858:	28800005 	stb	r2,0(r5)
 100285c:	e0bfe717 	ldw	r2,-100(fp)
 1002860:	108000cc 	andi	r2,r2,3
 1002864:	e17fd017 	ldw	r5,-192(fp)
 1002868:	108000cc 	andi	r2,r2,3
 100286c:	1008917a 	slli	r4,r2,5
 1002870:	28c00003 	ldbu	r3,0(r5)
 1002874:	00bfe7c4 	movi	r2,-97
 1002878:	1884703a 	and	r2,r3,r2
 100287c:	1007883a 	mov	r3,r2
 1002880:	2005883a 	mov	r2,r4
 1002884:	1884b03a 	or	r2,r3,r2
 1002888:	28800005 	stb	r2,0(r5)
 100288c:	e0bfe617 	ldw	r2,-104(fp)
 1002890:	1080004c 	andi	r2,r2,1
 1002894:	e17fd017 	ldw	r5,-192(fp)
 1002898:	100891fa 	slli	r4,r2,7
 100289c:	28800003 	ldbu	r2,0(r5)
 10028a0:	10801fcc 	andi	r2,r2,127
 10028a4:	1007883a 	mov	r3,r2
 10028a8:	2005883a 	mov	r2,r4
 10028ac:	1884b03a 	or	r2,r3,r2
 10028b0:	28800005 	stb	r2,0(r5)
 10028b4:	e0bfd117 	ldw	r2,-188(fp)
 10028b8:	1007883a 	mov	r3,r2
 10028bc:	e0bfd017 	ldw	r2,-192(fp)
 10028c0:	10c00045 	stb	r3,1(r2)
 10028c4:	e13fd017 	ldw	r4,-192(fp)
 10028c8:	e0bfd317 	ldw	r2,-180(fp)
 10028cc:	11403fcc 	andi	r5,r2,255
 10028d0:	20800103 	ldbu	r2,4(r4)
 10028d4:	1004703a 	and	r2,r2,zero
 10028d8:	1007883a 	mov	r3,r2
 10028dc:	2805883a 	mov	r2,r5
 10028e0:	1884b03a 	or	r2,r3,r2
 10028e4:	20800105 	stb	r2,4(r4)
 10028e8:	e0bfd317 	ldw	r2,-180(fp)
 10028ec:	1004d23a 	srli	r2,r2,8
 10028f0:	11403fcc 	andi	r5,r2,255
 10028f4:	20800143 	ldbu	r2,5(r4)
 10028f8:	1004703a 	and	r2,r2,zero
 10028fc:	1007883a 	mov	r3,r2
 1002900:	2805883a 	mov	r2,r5
 1002904:	1884b03a 	or	r2,r3,r2
 1002908:	20800145 	stb	r2,5(r4)
 100290c:	e13fd017 	ldw	r4,-192(fp)
 1002910:	e0bfd28b 	ldhu	r2,-182(fp)
 1002914:	11403fcc 	andi	r5,r2,255
 1002918:	20800083 	ldbu	r2,2(r4)
 100291c:	1004703a 	and	r2,r2,zero
 1002920:	1007883a 	mov	r3,r2
 1002924:	2805883a 	mov	r2,r5
 1002928:	1884b03a 	or	r2,r3,r2
 100292c:	20800085 	stb	r2,2(r4)
 1002930:	e0bfd28b 	ldhu	r2,-182(fp)
 1002934:	1004d23a 	srli	r2,r2,8
 1002938:	117fffcc 	andi	r5,r2,65535
 100293c:	208000c3 	ldbu	r2,3(r4)
 1002940:	1004703a 	and	r2,r2,zero
 1002944:	1007883a 	mov	r3,r2
 1002948:	2805883a 	mov	r2,r5
 100294c:	1884b03a 	or	r2,r3,r2
 1002950:	208000c5 	stb	r2,3(r4)
 1002954:	e13fd017 	ldw	r4,-192(fp)
 1002958:	e0bfd217 	ldw	r2,-184(fp)
 100295c:	11403fcc 	andi	r5,r2,255
 1002960:	20800183 	ldbu	r2,6(r4)
 1002964:	1004703a 	and	r2,r2,zero
 1002968:	1007883a 	mov	r3,r2
 100296c:	2805883a 	mov	r2,r5
 1002970:	1884b03a 	or	r2,r3,r2
 1002974:	20800185 	stb	r2,6(r4)
 1002978:	e0bfd217 	ldw	r2,-184(fp)
 100297c:	1004d23a 	srli	r2,r2,8
 1002980:	11403fcc 	andi	r5,r2,255
 1002984:	208001c3 	ldbu	r2,7(r4)
 1002988:	1004703a 	and	r2,r2,zero
 100298c:	1007883a 	mov	r3,r2
 1002990:	2805883a 	mov	r2,r5
 1002994:	1884b03a 	or	r2,r3,r2
 1002998:	208001c5 	stb	r2,7(r4)
 100299c:	e0ffd017 	ldw	r3,-192(fp)
 10029a0:	e0bfcf17 	ldw	r2,-196(fp)
 10029a4:	10c00615 	stw	r3,24(r2)
 10029a8:	e0bfcf17 	ldw	r2,-196(fp)
 10029ac:	10000215 	stw	zero,8(r2)
 10029b0:	e0bfcf17 	ldw	r2,-196(fp)
 10029b4:	10000515 	stw	zero,20(r2)
 10029b8:	e0bfcf17 	ldw	r2,-196(fp)
 10029bc:	10000415 	stw	zero,16(r2)
 10029c0:	e0ffd017 	ldw	r3,-192(fp)
 10029c4:	18800183 	ldbu	r2,6(r3)
 10029c8:	11003fcc 	andi	r4,r2,255
 10029cc:	188001c3 	ldbu	r2,7(r3)
 10029d0:	10803fcc 	andi	r2,r2,255
 10029d4:	1004923a 	slli	r2,r2,8
 10029d8:	1104b03a 	or	r2,r2,r4
 10029dc:	10bfffcc 	andi	r2,r2,65535
 10029e0:	1004c03a 	cmpne	r2,r2,zero
 10029e4:	1000041e 	bne	r2,zero,10029f8 <sls_avalon_usb20_irq+0xe04>
 10029e8:	e0ffcf17 	ldw	r3,-196(fp)
 10029ec:	00800084 	movi	r2,2
 10029f0:	18800315 	stw	r2,12(r3)
 10029f4:	00001306 	br	1002a44 <sls_avalon_usb20_irq+0xe50>
 10029f8:	e0bfd017 	ldw	r2,-192(fp)
 10029fc:	10c00003 	ldbu	r3,0(r2)
 1002a00:	00bfe004 	movi	r2,-128
 1002a04:	1884703a 	and	r2,r3,r2
 1002a08:	10803fcc 	andi	r2,r2,255
 1002a0c:	1004c03a 	cmpne	r2,r2,zero
 1002a10:	1000021e 	bne	r2,zero,1002a1c <sls_avalon_usb20_irq+0xe28>
 1002a14:	e0bfcf17 	ldw	r2,-196(fp)
 1002a18:	10000315 	stw	zero,12(r2)
 1002a1c:	e0bfd017 	ldw	r2,-192(fp)
 1002a20:	10c00003 	ldbu	r3,0(r2)
 1002a24:	00bfe004 	movi	r2,-128
 1002a28:	1884703a 	and	r2,r3,r2
 1002a2c:	10803fcc 	andi	r2,r2,255
 1002a30:	1005003a 	cmpeq	r2,r2,zero
 1002a34:	1000031e 	bne	r2,zero,1002a44 <sls_avalon_usb20_irq+0xe50>
 1002a38:	e0ffcf17 	ldw	r3,-196(fp)
 1002a3c:	00800044 	movi	r2,1
 1002a40:	18800315 	stw	r2,12(r3)
 1002a44:	e0bfd017 	ldw	r2,-192(fp)
 1002a48:	10800003 	ldbu	r2,0(r2)
 1002a4c:	1080180c 	andi	r2,r2,96
 1002a50:	10803fcc 	andi	r2,r2,255
 1002a54:	1004c03a 	cmpne	r2,r2,zero
 1002a58:	1007111e 	bne	r2,zero,10046a0 <sls_avalon_usb20_irq+0x2aac>
 1002a5c:	e0bfd117 	ldw	r2,-188(fp)
 1002a60:	10800328 	cmpgeui	r2,r2,12
 1002a64:	1008781e 	bne	r2,zero,1004c48 <sls_avalon_usb20_irq+0x3054>
 1002a68:	e0bfd117 	ldw	r2,-188(fp)
 1002a6c:	1085883a 	add	r2,r2,r2
 1002a70:	1087883a 	add	r3,r2,r2
 1002a74:	00804034 	movhi	r2,256
 1002a78:	108aa204 	addi	r2,r2,10888
 1002a7c:	1885883a 	add	r2,r3,r2
 1002a80:	10800017 	ldw	r2,0(r2)
 1002a84:	1000683a 	jmp	r2
 1002a88:	01002ab8 	rdprs	r4,zero,170
 1002a8c:	0100402c 	andhi	r4,zero,256
 1002a90:	01004c48 	cmpgei	r4,zero,305
 1002a94:	01003d54 	movui	r4,245
 1002a98:	01004c48 	cmpgei	r4,zero,305
 1002a9c:	010036a4 	muli	r4,zero,218
 1002aa0:	01002c58 	cmpnei	r4,zero,177
 1002aa4:	01004c48 	cmpgei	r4,zero,305
 1002aa8:	01003c7c 	xorhi	r4,zero,241
 1002aac:	0100371c 	xori	r4,zero,220
 1002ab0:	010045f4 	movhi	r4,279
 1002ab4:	0100423c 	xorhi	r4,zero,264
 1002ab8:	e0bfe817 	ldw	r2,-96(fp)
 1002abc:	e0bfff15 	stw	r2,-4(fp)
 1002ac0:	e0ffff17 	ldw	r3,-4(fp)
 1002ac4:	18800060 	cmpeqi	r2,r3,1
 1002ac8:	1000171e 	bne	r2,zero,1002b28 <sls_avalon_usb20_irq+0xf34>
 1002acc:	e13fff17 	ldw	r4,-4(fp)
 1002ad0:	208000a0 	cmpeqi	r2,r4,2
 1002ad4:	10002f1e 	bne	r2,zero,1002b94 <sls_avalon_usb20_irq+0xfa0>
 1002ad8:	e0ffff17 	ldw	r3,-4(fp)
 1002adc:	1805003a 	cmpeq	r2,r3,zero
 1002ae0:	1000011e 	bne	r2,zero,1002ae8 <sls_avalon_usb20_irq+0xef4>
 1002ae4:	00085806 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1002ae8:	e0bfea17 	ldw	r2,-88(fp)
 1002aec:	1007883a 	mov	r3,r2
 1002af0:	008000b4 	movhi	r2,2
 1002af4:	1889883a 	add	r4,r3,r2
 1002af8:	e0bfd517 	ldw	r2,-172(fp)
 1002afc:	10802917 	ldw	r2,164(r2)
 1002b00:	1007883a 	mov	r3,r2
 1002b04:	2005883a 	mov	r2,r4
 1002b08:	10c00035 	stwio	r3,0(r2)
 1002b0c:	e0bfea17 	ldw	r2,-88(fp)
 1002b10:	11001304 	addi	r4,r2,76
 1002b14:	e0bfd20b 	ldhu	r2,-184(fp)
 1002b18:	1006947a 	slli	r3,r2,17
 1002b1c:	2005883a 	mov	r2,r4
 1002b20:	10c00035 	stwio	r3,0(r2)
 1002b24:	00084806 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1002b28:	e0bfd517 	ldw	r2,-172(fp)
 1002b2c:	10802817 	ldw	r2,160(r2)
 1002b30:	1005003a 	cmpeq	r2,r2,zero
 1002b34:	1000101e 	bne	r2,zero,1002b78 <sls_avalon_usb20_irq+0xf84>
 1002b38:	e0bfd28b 	ldhu	r2,-182(fp)
 1002b3c:	e0ffd517 	ldw	r3,-172(fp)
 1002b40:	18c02e17 	ldw	r3,184(r3)
 1002b44:	10c00c2e 	bgeu	r2,r3,1002b78 <sls_avalon_usb20_irq+0xf84>
 1002b48:	e0bfea17 	ldw	r2,-88(fp)
 1002b4c:	1007883a 	mov	r3,r2
 1002b50:	008000b4 	movhi	r2,2
 1002b54:	1885883a 	add	r2,r3,r2
 1002b58:	10000035 	stwio	zero,0(r2)
 1002b5c:	e0bfea17 	ldw	r2,-88(fp)
 1002b60:	11001304 	addi	r4,r2,76
 1002b64:	e0bfd20b 	ldhu	r2,-184(fp)
 1002b68:	1006947a 	slli	r3,r2,17
 1002b6c:	2005883a 	mov	r2,r4
 1002b70:	10c00035 	stwio	r3,0(r2)
 1002b74:	00083406 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1002b78:	e13fd517 	ldw	r4,-172(fp)
 1002b7c:	01402004 	movi	r5,128
 1002b80:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1002b84:	e0ffcf17 	ldw	r3,-196(fp)
 1002b88:	00800084 	movi	r2,2
 1002b8c:	18800215 	stw	r2,8(r3)
 1002b90:	00082d06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1002b94:	e0bfd28b 	ldhu	r2,-182(fp)
 1002b98:	108023cc 	andi	r2,r2,143
 1002b9c:	e0bfd915 	stw	r2,-156(fp)
 1002ba0:	e0bfd517 	ldw	r2,-172(fp)
 1002ba4:	10802817 	ldw	r2,160(r2)
 1002ba8:	1004c03a 	cmpne	r2,r2,zero
 1002bac:	1000041e 	bne	r2,zero,1002bc0 <sls_avalon_usb20_irq+0xfcc>
 1002bb0:	e0bfd917 	ldw	r2,-156(fp)
 1002bb4:	108003cc 	andi	r2,r2,15
 1002bb8:	1004c03a 	cmpne	r2,r2,zero
 1002bbc:	10001f1e 	bne	r2,zero,1002c3c <sls_avalon_usb20_irq+0x1048>
 1002bc0:	e0bfd28b 	ldhu	r2,-182(fp)
 1002bc4:	108003cc 	andi	r2,r2,15
 1002bc8:	1004913a 	slli	r2,r2,4
 1002bcc:	1007883a 	mov	r3,r2
 1002bd0:	e0bfea17 	ldw	r2,-88(fp)
 1002bd4:	1885883a 	add	r2,r3,r2
 1002bd8:	10801004 	addi	r2,r2,64
 1002bdc:	10800037 	ldwio	r2,0(r2)
 1002be0:	1080202c 	andhi	r2,r2,128
 1002be4:	1005003a 	cmpeq	r2,r2,zero
 1002be8:	1000081e 	bne	r2,zero,1002c0c <sls_avalon_usb20_irq+0x1018>
 1002bec:	e0bfea17 	ldw	r2,-88(fp)
 1002bf0:	1007883a 	mov	r3,r2
 1002bf4:	008000b4 	movhi	r2,2
 1002bf8:	1885883a 	add	r2,r3,r2
 1002bfc:	1007883a 	mov	r3,r2
 1002c00:	00800044 	movi	r2,1
 1002c04:	18800025 	stbio	r2,0(r3)
 1002c08:	00000506 	br	1002c20 <sls_avalon_usb20_irq+0x102c>
 1002c0c:	e0bfea17 	ldw	r2,-88(fp)
 1002c10:	1007883a 	mov	r3,r2
 1002c14:	008000b4 	movhi	r2,2
 1002c18:	1885883a 	add	r2,r3,r2
 1002c1c:	10000025 	stbio	zero,0(r2)
 1002c20:	e0bfea17 	ldw	r2,-88(fp)
 1002c24:	11001304 	addi	r4,r2,76
 1002c28:	e0bfd20b 	ldhu	r2,-184(fp)
 1002c2c:	1006947a 	slli	r3,r2,17
 1002c30:	2005883a 	mov	r2,r4
 1002c34:	10c00035 	stwio	r3,0(r2)
 1002c38:	00080306 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1002c3c:	e13fd517 	ldw	r4,-172(fp)
 1002c40:	01402004 	movi	r5,128
 1002c44:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1002c48:	e0ffcf17 	ldw	r3,-196(fp)
 1002c4c:	00800084 	movi	r2,2
 1002c50:	18800215 	stw	r2,8(r3)
 1002c54:	0007fc06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1002c58:	e13fe817 	ldw	r4,-96(fp)
 1002c5c:	e13ffe15 	stw	r4,-8(fp)
 1002c60:	e0fffe17 	ldw	r3,-8(fp)
 1002c64:	18800060 	cmpeqi	r2,r3,1
 1002c68:	1002181e 	bne	r2,zero,10034cc <sls_avalon_usb20_irq+0x18d8>
 1002c6c:	e13ffe17 	ldw	r4,-8(fp)
 1002c70:	208000a0 	cmpeqi	r2,r4,2
 1002c74:	1002531e 	bne	r2,zero,10035c4 <sls_avalon_usb20_irq+0x19d0>
 1002c78:	e0fffe17 	ldw	r3,-8(fp)
 1002c7c:	1805003a 	cmpeq	r2,r3,zero
 1002c80:	1000011e 	bne	r2,zero,1002c88 <sls_avalon_usb20_irq+0x1094>
 1002c84:	00028006 	br	1003688 <sls_avalon_usb20_irq+0x1a94>
 1002c88:	e0bfd30b 	ldhu	r2,-180(fp)
 1002c8c:	10bfc00c 	andi	r2,r2,65280
 1002c90:	1005d23a 	srai	r2,r2,8
 1002c94:	e0bffd15 	stw	r2,-12(fp)
 1002c98:	e13ffd17 	ldw	r4,-12(fp)
 1002c9c:	20800228 	cmpgeui	r2,r4,8
 1002ca0:	1002031e 	bne	r2,zero,10034b0 <sls_avalon_usb20_irq+0x18bc>
 1002ca4:	e0fffd17 	ldw	r3,-12(fp)
 1002ca8:	e0fffd17 	ldw	r3,-12(fp)
 1002cac:	18c5883a 	add	r2,r3,r3
 1002cb0:	1087883a 	add	r3,r2,r2
 1002cb4:	00804034 	movhi	r2,256
 1002cb8:	108b3204 	addi	r2,r2,11464
 1002cbc:	1885883a 	add	r2,r3,r2
 1002cc0:	10800017 	ldw	r2,0(r2)
 1002cc4:	1000683a 	jmp	r2
 1002cc8:	010034b0 	cmpltui	r4,zero,210
 1002ccc:	01002ce8 	cmpgeui	r4,zero,179
 1002cd0:	01002dd4 	movui	r4,183
 1002cd4:	0100308c 	andi	r4,zero,194
 1002cd8:	010034b0 	cmpltui	r4,zero,210
 1002cdc:	010034b0 	cmpltui	r4,zero,210
 1002ce0:	01003224 	muli	r4,zero,200
 1002ce4:	01003320 	cmpeqi	r4,zero,204
 1002ce8:	e0bfd20b 	ldhu	r2,-184(fp)
 1002cec:	108004e8 	cmpgeui	r2,r2,19
 1002cf0:	1000031e 	bne	r2,zero,1002d00 <sls_avalon_usb20_irq+0x110c>
 1002cf4:	e13fd20b 	ldhu	r4,-184(fp)
 1002cf8:	e13ffc15 	stw	r4,-16(fp)
 1002cfc:	00000206 	br	1002d08 <sls_avalon_usb20_irq+0x1114>
 1002d00:	00800484 	movi	r2,18
 1002d04:	e0bffc15 	stw	r2,-16(fp)
 1002d08:	e0fffc17 	ldw	r3,-16(fp)
 1002d0c:	e0ffcd15 	stw	r3,-204(fp)
 1002d10:	e0ffcd17 	ldw	r3,-204(fp)
 1002d14:	e0bfd517 	ldw	r2,-172(fp)
 1002d18:	10c03415 	stw	r3,208(r2)
 1002d1c:	e0ffe917 	ldw	r3,-92(fp)
 1002d20:	e0bfcd17 	ldw	r2,-204(fp)
 1002d24:	1880040e 	bge	r3,r2,1002d38 <sls_avalon_usb20_irq+0x1144>
 1002d28:	e0bfe917 	ldw	r2,-92(fp)
 1002d2c:	1007883a 	mov	r3,r2
 1002d30:	e0bfd517 	ldw	r2,-172(fp)
 1002d34:	10c03415 	stw	r3,208(r2)
 1002d38:	e03fd715 	stw	zero,-164(fp)
 1002d3c:	00001106 	br	1002d84 <sls_avalon_usb20_irq+0x1190>
 1002d40:	e0bfea17 	ldw	r2,-88(fp)
 1002d44:	1007883a 	mov	r3,r2
 1002d48:	e0bfd717 	ldw	r2,-164(fp)
 1002d4c:	1887883a 	add	r3,r3,r2
 1002d50:	008000b4 	movhi	r2,2
 1002d54:	1889883a 	add	r4,r3,r2
 1002d58:	e0bfd517 	ldw	r2,-172(fp)
 1002d5c:	10c00317 	ldw	r3,12(r2)
 1002d60:	e0bfd717 	ldw	r2,-164(fp)
 1002d64:	1885883a 	add	r2,r3,r2
 1002d68:	10800003 	ldbu	r2,0(r2)
 1002d6c:	10c03fcc 	andi	r3,r2,255
 1002d70:	2005883a 	mov	r2,r4
 1002d74:	10c00025 	stbio	r3,0(r2)
 1002d78:	e0bfd717 	ldw	r2,-164(fp)
 1002d7c:	10800044 	addi	r2,r2,1
 1002d80:	e0bfd715 	stw	r2,-164(fp)
 1002d84:	e0bfd517 	ldw	r2,-172(fp)
 1002d88:	10c03417 	ldw	r3,208(r2)
 1002d8c:	e0bfd717 	ldw	r2,-164(fp)
 1002d90:	10ffeb36 	bltu	r2,r3,1002d40 <__alt_data_end+0xfffe1de8>
 1002d94:	e0bfd517 	ldw	r2,-172(fp)
 1002d98:	10c00317 	ldw	r3,12(r2)
 1002d9c:	e0bfcf17 	ldw	r2,-196(fp)
 1002da0:	10c00115 	stw	r3,4(r2)
 1002da4:	e0ffcd17 	ldw	r3,-204(fp)
 1002da8:	e0bfcf17 	ldw	r2,-196(fp)
 1002dac:	10c00415 	stw	r3,16(r2)
 1002db0:	e0bfea17 	ldw	r2,-88(fp)
 1002db4:	11001304 	addi	r4,r2,76
 1002db8:	e0bfd517 	ldw	r2,-172(fp)
 1002dbc:	10803417 	ldw	r2,208(r2)
 1002dc0:	1004947a 	slli	r2,r2,17
 1002dc4:	1007883a 	mov	r3,r2
 1002dc8:	2005883a 	mov	r2,r4
 1002dcc:	10c00035 	stwio	r3,0(r2)
 1002dd0:	00079d06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1002dd4:	e0bfd517 	ldw	r2,-172(fp)
 1002dd8:	10800c17 	ldw	r2,48(r2)
 1002ddc:	10800058 	cmpnei	r2,r2,1
 1002de0:	1000041e 	bne	r2,zero,1002df4 <sls_avalon_usb20_irq+0x1200>
 1002de4:	e0bfd517 	ldw	r2,-172(fp)
 1002de8:	10800417 	ldw	r2,16(r2)
 1002dec:	e0bfce15 	stw	r2,-200(fp)
 1002df0:	00000f06 	br	1002e30 <sls_avalon_usb20_irq+0x123c>
 1002df4:	e0bfd517 	ldw	r2,-172(fp)
 1002df8:	10800c17 	ldw	r2,48(r2)
 1002dfc:	1004c03a 	cmpne	r2,r2,zero
 1002e00:	1000041e 	bne	r2,zero,1002e14 <sls_avalon_usb20_irq+0x1220>
 1002e04:	e0bfd517 	ldw	r2,-172(fp)
 1002e08:	10800517 	ldw	r2,20(r2)
 1002e0c:	e0bfce15 	stw	r2,-200(fp)
 1002e10:	00000706 	br	1002e30 <sls_avalon_usb20_irq+0x123c>
 1002e14:	e0bfd517 	ldw	r2,-172(fp)
 1002e18:	10800c17 	ldw	r2,48(r2)
 1002e1c:	10800098 	cmpnei	r2,r2,2
 1002e20:	1000031e 	bne	r2,zero,1002e30 <sls_avalon_usb20_irq+0x123c>
 1002e24:	e0bfd517 	ldw	r2,-172(fp)
 1002e28:	10800617 	ldw	r2,24(r2)
 1002e2c:	e0bfce15 	stw	r2,-200(fp)
 1002e30:	e0bfce17 	ldw	r2,-200(fp)
 1002e34:	10800003 	ldbu	r2,0(r2)
 1002e38:	10803fcc 	andi	r2,r2,255
 1002e3c:	e0bfdf15 	stw	r2,-132(fp)
 1002e40:	e0bfce17 	ldw	r2,-200(fp)
 1002e44:	10c00083 	ldbu	r3,2(r2)
 1002e48:	108000c3 	ldbu	r2,3(r2)
 1002e4c:	1004923a 	slli	r2,r2,8
 1002e50:	10c4b03a 	or	r2,r2,r3
 1002e54:	10bfffcc 	andi	r2,r2,65535
 1002e58:	e0bfd815 	stw	r2,-160(fp)
 1002e5c:	e03fd915 	stw	zero,-156(fp)
 1002e60:	00000b06 	br	1002e90 <sls_avalon_usb20_irq+0x129c>
 1002e64:	e0bfdf17 	ldw	r2,-132(fp)
 1002e68:	1005003a 	cmpeq	r2,r2,zero
 1002e6c:	1000051e 	bne	r2,zero,1002e84 <sls_avalon_usb20_irq+0x1290>
 1002e70:	e0bfd817 	ldw	r2,-160(fp)
 1002e74:	1007883a 	mov	r3,r2
 1002e78:	e0bfce17 	ldw	r2,-200(fp)
 1002e7c:	10c5883a 	add	r2,r2,r3
 1002e80:	e0bfce15 	stw	r2,-200(fp)
 1002e84:	e0bfd917 	ldw	r2,-156(fp)
 1002e88:	10800044 	addi	r2,r2,1
 1002e8c:	e0bfd915 	stw	r2,-156(fp)
 1002e90:	e0bfd30b 	ldhu	r2,-180(fp)
 1002e94:	10c03fcc 	andi	r3,r2,255
 1002e98:	e0bfd917 	ldw	r2,-156(fp)
 1002e9c:	18bff11e 	bne	r3,r2,1002e64 <__alt_data_end+0xfffe1f0c>
 1002ea0:	e0bfce17 	ldw	r2,-200(fp)
 1002ea4:	10800003 	ldbu	r2,0(r2)
 1002ea8:	10803fcc 	andi	r2,r2,255
 1002eac:	e0bfdf15 	stw	r2,-132(fp)
 1002eb0:	e0bfdf17 	ldw	r2,-132(fp)
 1002eb4:	1004c03a 	cmpne	r2,r2,zero
 1002eb8:	1000071e 	bne	r2,zero,1002ed8 <sls_avalon_usb20_irq+0x12e4>
 1002ebc:	e13fd517 	ldw	r4,-172(fp)
 1002ec0:	01402004 	movi	r5,128
 1002ec4:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1002ec8:	e0ffcf17 	ldw	r3,-196(fp)
 1002ecc:	00800084 	movi	r2,2
 1002ed0:	18800215 	stw	r2,8(r3)
 1002ed4:	00075c06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1002ed8:	e0bfce17 	ldw	r2,-200(fp)
 1002edc:	e0bfd415 	stw	r2,-176(fp)
 1002ee0:	e0bfd20b 	ldhu	r2,-184(fp)
 1002ee4:	10800258 	cmpnei	r2,r2,9
 1002ee8:	1000281e 	bne	r2,zero,1002f8c <sls_avalon_usb20_irq+0x1398>
 1002eec:	e0bfd20b 	ldhu	r2,-184(fp)
 1002ef0:	e0bfda15 	stw	r2,-152(fp)
 1002ef4:	e0ffda17 	ldw	r3,-152(fp)
 1002ef8:	e0bfcf17 	ldw	r2,-196(fp)
 1002efc:	10c00415 	stw	r3,16(r2)
 1002f00:	e0ffda17 	ldw	r3,-152(fp)
 1002f04:	e0bfd517 	ldw	r2,-172(fp)
 1002f08:	10c03415 	stw	r3,208(r2)
 1002f0c:	e03fec15 	stw	zero,-80(fp)
 1002f10:	00001206 	br	1002f5c <sls_avalon_usb20_irq+0x1368>
 1002f14:	e0bfea17 	ldw	r2,-88(fp)
 1002f18:	1007883a 	mov	r3,r2
 1002f1c:	e0bfec17 	ldw	r2,-80(fp)
 1002f20:	1887883a 	add	r3,r3,r2
 1002f24:	008000b4 	movhi	r2,2
 1002f28:	1889883a 	add	r4,r3,r2
 1002f2c:	e0ffd417 	ldw	r3,-176(fp)
 1002f30:	e0bfec17 	ldw	r2,-80(fp)
 1002f34:	1885883a 	add	r2,r3,r2
 1002f38:	10800003 	ldbu	r2,0(r2)
 1002f3c:	10c03fcc 	andi	r3,r2,255
 1002f40:	18c0201c 	xori	r3,r3,128
 1002f44:	18ffe004 	addi	r3,r3,-128
 1002f48:	2005883a 	mov	r2,r4
 1002f4c:	10c00025 	stbio	r3,0(r2)
 1002f50:	e0bfec17 	ldw	r2,-80(fp)
 1002f54:	10800044 	addi	r2,r2,1
 1002f58:	e0bfec15 	stw	r2,-80(fp)
 1002f5c:	e0bfec17 	ldw	r2,-80(fp)
 1002f60:	1007883a 	mov	r3,r2
 1002f64:	e0bfda17 	ldw	r2,-152(fp)
 1002f68:	18bfea36 	bltu	r3,r2,1002f14 <__alt_data_end+0xfffe1fbc>
 1002f6c:	e0bfea17 	ldw	r2,-88(fp)
 1002f70:	11001304 	addi	r4,r2,76
 1002f74:	e0bfda17 	ldw	r2,-152(fp)
 1002f78:	1004947a 	slli	r2,r2,17
 1002f7c:	1007883a 	mov	r3,r2
 1002f80:	2005883a 	mov	r2,r4
 1002f84:	10c00035 	stwio	r3,0(r2)
 1002f88:	00072f06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1002f8c:	e0ffcf17 	ldw	r3,-196(fp)
 1002f90:	e0bfce17 	ldw	r2,-200(fp)
 1002f94:	18800115 	stw	r2,4(r3)
 1002f98:	e0bfd417 	ldw	r2,-176(fp)
 1002f9c:	10c00083 	ldbu	r3,2(r2)
 1002fa0:	108000c3 	ldbu	r2,3(r2)
 1002fa4:	1004923a 	slli	r2,r2,8
 1002fa8:	10c4b03a 	or	r2,r2,r3
 1002fac:	10bfffcc 	andi	r2,r2,65535
 1002fb0:	e0bfda15 	stw	r2,-152(fp)
 1002fb4:	e0ffd20b 	ldhu	r3,-184(fp)
 1002fb8:	e0bfda17 	ldw	r2,-152(fp)
 1002fbc:	1880022e 	bgeu	r3,r2,1002fc8 <sls_avalon_usb20_irq+0x13d4>
 1002fc0:	e0bfd20b 	ldhu	r2,-184(fp)
 1002fc4:	e0bfda15 	stw	r2,-152(fp)
 1002fc8:	e0ffda17 	ldw	r3,-152(fp)
 1002fcc:	e0bfcf17 	ldw	r2,-196(fp)
 1002fd0:	10c00415 	stw	r3,16(r2)
 1002fd4:	e0ffda17 	ldw	r3,-152(fp)
 1002fd8:	e0bfd517 	ldw	r2,-172(fp)
 1002fdc:	10c03415 	stw	r3,208(r2)
 1002fe0:	e0bfe917 	ldw	r2,-92(fp)
 1002fe4:	1007883a 	mov	r3,r2
 1002fe8:	e0bfda17 	ldw	r2,-152(fp)
 1002fec:	1880042e 	bgeu	r3,r2,1003000 <sls_avalon_usb20_irq+0x140c>
 1002ff0:	e0bfe917 	ldw	r2,-92(fp)
 1002ff4:	1007883a 	mov	r3,r2
 1002ff8:	e0bfd517 	ldw	r2,-172(fp)
 1002ffc:	10c03415 	stw	r3,208(r2)
 1003000:	e0bfd517 	ldw	r2,-172(fp)
 1003004:	10803417 	ldw	r2,208(r2)
 1003008:	e0bfda15 	stw	r2,-152(fp)
 100300c:	e03fed15 	stw	zero,-76(fp)
 1003010:	00001206 	br	100305c <sls_avalon_usb20_irq+0x1468>
 1003014:	e0bfea17 	ldw	r2,-88(fp)
 1003018:	1007883a 	mov	r3,r2
 100301c:	e0bfed17 	ldw	r2,-76(fp)
 1003020:	1887883a 	add	r3,r3,r2
 1003024:	008000b4 	movhi	r2,2
 1003028:	1889883a 	add	r4,r3,r2
 100302c:	e0ffd417 	ldw	r3,-176(fp)
 1003030:	e0bfed17 	ldw	r2,-76(fp)
 1003034:	1885883a 	add	r2,r3,r2
 1003038:	10800003 	ldbu	r2,0(r2)
 100303c:	10c03fcc 	andi	r3,r2,255
 1003040:	18c0201c 	xori	r3,r3,128
 1003044:	18ffe004 	addi	r3,r3,-128
 1003048:	2005883a 	mov	r2,r4
 100304c:	10c00025 	stbio	r3,0(r2)
 1003050:	e0bfed17 	ldw	r2,-76(fp)
 1003054:	10800044 	addi	r2,r2,1
 1003058:	e0bfed15 	stw	r2,-76(fp)
 100305c:	e0bfed17 	ldw	r2,-76(fp)
 1003060:	1007883a 	mov	r3,r2
 1003064:	e0bfda17 	ldw	r2,-152(fp)
 1003068:	18bfea36 	bltu	r3,r2,1003014 <__alt_data_end+0xfffe20bc>
 100306c:	e0bfea17 	ldw	r2,-88(fp)
 1003070:	11001304 	addi	r4,r2,76
 1003074:	e0bfda17 	ldw	r2,-152(fp)
 1003078:	1004947a 	slli	r2,r2,17
 100307c:	1007883a 	mov	r3,r2
 1003080:	2005883a 	mov	r2,r4
 1003084:	10c00035 	stwio	r3,0(r2)
 1003088:	0006ef06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 100308c:	e0bfd30b 	ldhu	r2,-180(fp)
 1003090:	10c03fcc 	andi	r3,r2,255
 1003094:	e0bfd517 	ldw	r2,-172(fp)
 1003098:	10801817 	ldw	r2,96(r2)
 100309c:	1880042e 	bgeu	r3,r2,10030b0 <sls_avalon_usb20_irq+0x14bc>
 10030a0:	e0bfd517 	ldw	r2,-172(fp)
 10030a4:	10800717 	ldw	r2,28(r2)
 10030a8:	1004c03a 	cmpne	r2,r2,zero
 10030ac:	1000071e 	bne	r2,zero,10030cc <sls_avalon_usb20_irq+0x14d8>
 10030b0:	e13fd517 	ldw	r4,-172(fp)
 10030b4:	01402004 	movi	r5,128
 10030b8:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 10030bc:	e0ffcf17 	ldw	r3,-196(fp)
 10030c0:	00800084 	movi	r2,2
 10030c4:	18800215 	stw	r2,8(r3)
 10030c8:	0006df06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10030cc:	e0bfd517 	ldw	r2,-172(fp)
 10030d0:	11000817 	ldw	r4,32(r2)
 10030d4:	e0bfd517 	ldw	r2,-172(fp)
 10030d8:	10c00717 	ldw	r3,28(r2)
 10030dc:	e0bfd30b 	ldhu	r2,-180(fp)
 10030e0:	10803fcc 	andi	r2,r2,255
 10030e4:	1085883a 	add	r2,r2,r2
 10030e8:	1085883a 	add	r2,r2,r2
 10030ec:	1885883a 	add	r2,r3,r2
 10030f0:	10800017 	ldw	r2,0(r2)
 10030f4:	2085883a 	add	r2,r4,r2
 10030f8:	e0bfce15 	stw	r2,-200(fp)
 10030fc:	e0bfce17 	ldw	r2,-200(fp)
 1003100:	10800003 	ldbu	r2,0(r2)
 1003104:	10803fcc 	andi	r2,r2,255
 1003108:	e0bfdf15 	stw	r2,-132(fp)
 100310c:	e0bfdf17 	ldw	r2,-132(fp)
 1003110:	e0bfda15 	stw	r2,-152(fp)
 1003114:	e0ffd20b 	ldhu	r3,-184(fp)
 1003118:	e0bfda17 	ldw	r2,-152(fp)
 100311c:	1880022e 	bgeu	r3,r2,1003128 <sls_avalon_usb20_irq+0x1534>
 1003120:	e0bfd20b 	ldhu	r2,-184(fp)
 1003124:	e0bfda15 	stw	r2,-152(fp)
 1003128:	e0ffda17 	ldw	r3,-152(fp)
 100312c:	e0bfcf17 	ldw	r2,-196(fp)
 1003130:	10c00415 	stw	r3,16(r2)
 1003134:	e0ffda17 	ldw	r3,-152(fp)
 1003138:	e0bfd517 	ldw	r2,-172(fp)
 100313c:	10c03415 	stw	r3,208(r2)
 1003140:	e0bfe917 	ldw	r2,-92(fp)
 1003144:	1007883a 	mov	r3,r2
 1003148:	e0bfda17 	ldw	r2,-152(fp)
 100314c:	1880042e 	bgeu	r3,r2,1003160 <sls_avalon_usb20_irq+0x156c>
 1003150:	e0bfe917 	ldw	r2,-92(fp)
 1003154:	1007883a 	mov	r3,r2
 1003158:	e0bfd517 	ldw	r2,-172(fp)
 100315c:	10c03415 	stw	r3,208(r2)
 1003160:	e0bfd517 	ldw	r2,-172(fp)
 1003164:	10803417 	ldw	r2,208(r2)
 1003168:	e0bfda15 	stw	r2,-152(fp)
 100316c:	e0bfd517 	ldw	r2,-172(fp)
 1003170:	11000817 	ldw	r4,32(r2)
 1003174:	e0bfd517 	ldw	r2,-172(fp)
 1003178:	10c00717 	ldw	r3,28(r2)
 100317c:	e0bfd30b 	ldhu	r2,-180(fp)
 1003180:	10803fcc 	andi	r2,r2,255
 1003184:	1085883a 	add	r2,r2,r2
 1003188:	1085883a 	add	r2,r2,r2
 100318c:	1885883a 	add	r2,r3,r2
 1003190:	10800017 	ldw	r2,0(r2)
 1003194:	2085883a 	add	r2,r4,r2
 1003198:	e0bfce15 	stw	r2,-200(fp)
 100319c:	e0ffcf17 	ldw	r3,-196(fp)
 10031a0:	e0bfce17 	ldw	r2,-200(fp)
 10031a4:	18800115 	stw	r2,4(r3)
 10031a8:	e03fd715 	stw	zero,-164(fp)
 10031ac:	00001206 	br	10031f8 <sls_avalon_usb20_irq+0x1604>
 10031b0:	e0bfea17 	ldw	r2,-88(fp)
 10031b4:	1007883a 	mov	r3,r2
 10031b8:	e0bfd717 	ldw	r2,-164(fp)
 10031bc:	1887883a 	add	r3,r3,r2
 10031c0:	008000b4 	movhi	r2,2
 10031c4:	1889883a 	add	r4,r3,r2
 10031c8:	e0ffce17 	ldw	r3,-200(fp)
 10031cc:	e0bfd717 	ldw	r2,-164(fp)
 10031d0:	1885883a 	add	r2,r3,r2
 10031d4:	10800003 	ldbu	r2,0(r2)
 10031d8:	10c03fcc 	andi	r3,r2,255
 10031dc:	18c0201c 	xori	r3,r3,128
 10031e0:	18ffe004 	addi	r3,r3,-128
 10031e4:	2005883a 	mov	r2,r4
 10031e8:	10c00025 	stbio	r3,0(r2)
 10031ec:	e0bfd717 	ldw	r2,-164(fp)
 10031f0:	10800044 	addi	r2,r2,1
 10031f4:	e0bfd715 	stw	r2,-164(fp)
 10031f8:	e0ffd717 	ldw	r3,-164(fp)
 10031fc:	e0bfda17 	ldw	r2,-152(fp)
 1003200:	18bfeb36 	bltu	r3,r2,10031b0 <__alt_data_end+0xfffe2258>
 1003204:	e0bfea17 	ldw	r2,-88(fp)
 1003208:	11001304 	addi	r4,r2,76
 100320c:	e0bfda17 	ldw	r2,-152(fp)
 1003210:	1004947a 	slli	r2,r2,17
 1003214:	1007883a 	mov	r3,r2
 1003218:	2005883a 	mov	r2,r4
 100321c:	10c00035 	stwio	r3,0(r2)
 1003220:	00068906 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1003224:	e0bfd517 	ldw	r2,-172(fp)
 1003228:	10800917 	ldw	r2,36(r2)
 100322c:	e0bfce15 	stw	r2,-200(fp)
 1003230:	e0bfd20b 	ldhu	r2,-184(fp)
 1003234:	10800118 	cmpnei	r2,r2,4
 1003238:	10001d1e 	bne	r2,zero,10032b0 <sls_avalon_usb20_irq+0x16bc>
 100323c:	e03fd715 	stw	zero,-164(fp)
 1003240:	00001106 	br	1003288 <sls_avalon_usb20_irq+0x1694>
 1003244:	e0bfea17 	ldw	r2,-88(fp)
 1003248:	1007883a 	mov	r3,r2
 100324c:	e0bfd717 	ldw	r2,-164(fp)
 1003250:	1887883a 	add	r3,r3,r2
 1003254:	008000b4 	movhi	r2,2
 1003258:	1889883a 	add	r4,r3,r2
 100325c:	e0bfd717 	ldw	r2,-164(fp)
 1003260:	1007883a 	mov	r3,r2
 1003264:	e0bfce17 	ldw	r2,-200(fp)
 1003268:	1885883a 	add	r2,r3,r2
 100326c:	10800003 	ldbu	r2,0(r2)
 1003270:	10c03fcc 	andi	r3,r2,255
 1003274:	2005883a 	mov	r2,r4
 1003278:	10c00025 	stbio	r3,0(r2)
 100327c:	e0bfd717 	ldw	r2,-164(fp)
 1003280:	10800044 	addi	r2,r2,1
 1003284:	e0bfd715 	stw	r2,-164(fp)
 1003288:	e0ffd20b 	ldhu	r3,-184(fp)
 100328c:	e0bfd717 	ldw	r2,-164(fp)
 1003290:	10ffec36 	bltu	r2,r3,1003244 <__alt_data_end+0xfffe22ec>
 1003294:	e0bfea17 	ldw	r2,-88(fp)
 1003298:	11001304 	addi	r4,r2,76
 100329c:	e0bfd20b 	ldhu	r2,-184(fp)
 10032a0:	1006947a 	slli	r3,r2,17
 10032a4:	2005883a 	mov	r2,r4
 10032a8:	10c00035 	stwio	r3,0(r2)
 10032ac:	00066606 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10032b0:	e03fd715 	stw	zero,-164(fp)
 10032b4:	00001106 	br	10032fc <sls_avalon_usb20_irq+0x1708>
 10032b8:	e0bfea17 	ldw	r2,-88(fp)
 10032bc:	1007883a 	mov	r3,r2
 10032c0:	e0bfd717 	ldw	r2,-164(fp)
 10032c4:	1887883a 	add	r3,r3,r2
 10032c8:	008000b4 	movhi	r2,2
 10032cc:	1889883a 	add	r4,r3,r2
 10032d0:	e0bfd717 	ldw	r2,-164(fp)
 10032d4:	1007883a 	mov	r3,r2
 10032d8:	e0bfce17 	ldw	r2,-200(fp)
 10032dc:	1885883a 	add	r2,r3,r2
 10032e0:	10800003 	ldbu	r2,0(r2)
 10032e4:	10c03fcc 	andi	r3,r2,255
 10032e8:	2005883a 	mov	r2,r4
 10032ec:	10c00025 	stbio	r3,0(r2)
 10032f0:	e0bfd717 	ldw	r2,-164(fp)
 10032f4:	10800044 	addi	r2,r2,1
 10032f8:	e0bfd715 	stw	r2,-164(fp)
 10032fc:	e0bfd717 	ldw	r2,-164(fp)
 1003300:	108002b0 	cmpltui	r2,r2,10
 1003304:	103fec1e 	bne	r2,zero,10032b8 <__alt_data_end+0xfffe2360>
 1003308:	e0bfea17 	ldw	r2,-88(fp)
 100330c:	10801304 	addi	r2,r2,76
 1003310:	1007883a 	mov	r3,r2
 1003314:	00800534 	movhi	r2,20
 1003318:	18800035 	stwio	r2,0(r3)
 100331c:	00064a06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1003320:	e0bfd517 	ldw	r2,-172(fp)
 1003324:	10800c17 	ldw	r2,48(r2)
 1003328:	1005003a 	cmpeq	r2,r2,zero
 100332c:	1000041e 	bne	r2,zero,1003340 <sls_avalon_usb20_irq+0x174c>
 1003330:	e0bfd517 	ldw	r2,-172(fp)
 1003334:	10800b17 	ldw	r2,44(r2)
 1003338:	e0bfce15 	stw	r2,-200(fp)
 100333c:	00000306 	br	100334c <sls_avalon_usb20_irq+0x1758>
 1003340:	e0bfd517 	ldw	r2,-172(fp)
 1003344:	10800a17 	ldw	r2,40(r2)
 1003348:	e0bfce15 	stw	r2,-200(fp)
 100334c:	e0bfd20b 	ldhu	r2,-184(fp)
 1003350:	10800258 	cmpnei	r2,r2,9
 1003354:	10001d1e 	bne	r2,zero,10033cc <sls_avalon_usb20_irq+0x17d8>
 1003358:	e03fd715 	stw	zero,-164(fp)
 100335c:	00001106 	br	10033a4 <sls_avalon_usb20_irq+0x17b0>
 1003360:	e0bfea17 	ldw	r2,-88(fp)
 1003364:	1007883a 	mov	r3,r2
 1003368:	e0bfd717 	ldw	r2,-164(fp)
 100336c:	1887883a 	add	r3,r3,r2
 1003370:	008000b4 	movhi	r2,2
 1003374:	1889883a 	add	r4,r3,r2
 1003378:	e0bfd717 	ldw	r2,-164(fp)
 100337c:	1007883a 	mov	r3,r2
 1003380:	e0bfce17 	ldw	r2,-200(fp)
 1003384:	1885883a 	add	r2,r3,r2
 1003388:	10800003 	ldbu	r2,0(r2)
 100338c:	10c03fcc 	andi	r3,r2,255
 1003390:	2005883a 	mov	r2,r4
 1003394:	10c00025 	stbio	r3,0(r2)
 1003398:	e0bfd717 	ldw	r2,-164(fp)
 100339c:	10800044 	addi	r2,r2,1
 10033a0:	e0bfd715 	stw	r2,-164(fp)
 10033a4:	e0ffd20b 	ldhu	r3,-184(fp)
 10033a8:	e0bfd717 	ldw	r2,-164(fp)
 10033ac:	10ffec36 	bltu	r2,r3,1003360 <__alt_data_end+0xfffe2408>
 10033b0:	e0bfea17 	ldw	r2,-88(fp)
 10033b4:	11001304 	addi	r4,r2,76
 10033b8:	e0bfd20b 	ldhu	r2,-184(fp)
 10033bc:	1006947a 	slli	r3,r2,17
 10033c0:	2005883a 	mov	r2,r4
 10033c4:	10c00035 	stwio	r3,0(r2)
 10033c8:	00061f06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10033cc:	e0bfce17 	ldw	r2,-200(fp)
 10033d0:	10c00083 	ldbu	r3,2(r2)
 10033d4:	108000c3 	ldbu	r2,3(r2)
 10033d8:	1004923a 	slli	r2,r2,8
 10033dc:	10c4b03a 	or	r2,r2,r3
 10033e0:	10bfffcc 	andi	r2,r2,65535
 10033e4:	e0bfda15 	stw	r2,-152(fp)
 10033e8:	e0ffda17 	ldw	r3,-152(fp)
 10033ec:	e0bfcf17 	ldw	r2,-196(fp)
 10033f0:	10c00415 	stw	r3,16(r2)
 10033f4:	e0ffda17 	ldw	r3,-152(fp)
 10033f8:	e0bfd517 	ldw	r2,-172(fp)
 10033fc:	10c03415 	stw	r3,208(r2)
 1003400:	e0bfe917 	ldw	r2,-92(fp)
 1003404:	1007883a 	mov	r3,r2
 1003408:	e0bfda17 	ldw	r2,-152(fp)
 100340c:	1880042e 	bgeu	r3,r2,1003420 <sls_avalon_usb20_irq+0x182c>
 1003410:	e0bfe917 	ldw	r2,-92(fp)
 1003414:	1007883a 	mov	r3,r2
 1003418:	e0bfd517 	ldw	r2,-172(fp)
 100341c:	10c03415 	stw	r3,208(r2)
 1003420:	e0bfd517 	ldw	r2,-172(fp)
 1003424:	10803417 	ldw	r2,208(r2)
 1003428:	e0bfda15 	stw	r2,-152(fp)
 100342c:	e0ffcf17 	ldw	r3,-196(fp)
 1003430:	e0bfce17 	ldw	r2,-200(fp)
 1003434:	18800115 	stw	r2,4(r3)
 1003438:	e03fd715 	stw	zero,-164(fp)
 100343c:	00001106 	br	1003484 <sls_avalon_usb20_irq+0x1890>
 1003440:	e0bfea17 	ldw	r2,-88(fp)
 1003444:	1007883a 	mov	r3,r2
 1003448:	e0bfd717 	ldw	r2,-164(fp)
 100344c:	1887883a 	add	r3,r3,r2
 1003450:	008000b4 	movhi	r2,2
 1003454:	1889883a 	add	r4,r3,r2
 1003458:	e0bfd717 	ldw	r2,-164(fp)
 100345c:	1007883a 	mov	r3,r2
 1003460:	e0bfce17 	ldw	r2,-200(fp)
 1003464:	1885883a 	add	r2,r3,r2
 1003468:	10800003 	ldbu	r2,0(r2)
 100346c:	10c03fcc 	andi	r3,r2,255
 1003470:	2005883a 	mov	r2,r4
 1003474:	10c00025 	stbio	r3,0(r2)
 1003478:	e0bfd717 	ldw	r2,-164(fp)
 100347c:	10800044 	addi	r2,r2,1
 1003480:	e0bfd715 	stw	r2,-164(fp)
 1003484:	e0ffd717 	ldw	r3,-164(fp)
 1003488:	e0bfda17 	ldw	r2,-152(fp)
 100348c:	18bfec36 	bltu	r3,r2,1003440 <__alt_data_end+0xfffe24e8>
 1003490:	e0bfea17 	ldw	r2,-88(fp)
 1003494:	11001304 	addi	r4,r2,76
 1003498:	e0bfda17 	ldw	r2,-152(fp)
 100349c:	1004947a 	slli	r2,r2,17
 10034a0:	1007883a 	mov	r3,r2
 10034a4:	2005883a 	mov	r2,r4
 10034a8:	10c00035 	stwio	r3,0(r2)
 10034ac:	0005e606 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10034b0:	e13fd517 	ldw	r4,-172(fp)
 10034b4:	01402004 	movi	r5,128
 10034b8:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 10034bc:	e0ffcf17 	ldw	r3,-196(fp)
 10034c0:	00800084 	movi	r2,2
 10034c4:	18800215 	stw	r2,8(r3)
 10034c8:	0005df06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10034cc:	e0bfd30b 	ldhu	r2,-180(fp)
 10034d0:	1004d23a 	srli	r2,r2,8
 10034d4:	10bfffcc 	andi	r2,r2,65535
 10034d8:	108008a0 	cmpeqi	r2,r2,34
 10034dc:	1000011e 	bne	r2,zero,10034e4 <sls_avalon_usb20_irq+0x18f0>
 10034e0:	00003106 	br	10035a8 <sls_avalon_usb20_irq+0x19b4>
 10034e4:	e0bfd517 	ldw	r2,-172(fp)
 10034e8:	10803e17 	ldw	r2,248(r2)
 10034ec:	1005003a 	cmpeq	r2,r2,zero
 10034f0:	1000061e 	bne	r2,zero,100350c <sls_avalon_usb20_irq+0x1918>
 10034f4:	e0bfd517 	ldw	r2,-172(fp)
 10034f8:	10803e17 	ldw	r2,248(r2)
 10034fc:	e13fcf17 	ldw	r4,-196(fp)
 1003500:	e17fea17 	ldw	r5,-88(fp)
 1003504:	01800044 	movi	r6,1
 1003508:	103ee83a 	callr	r2
 100350c:	e0bfcf17 	ldw	r2,-196(fp)
 1003510:	10c00417 	ldw	r3,16(r2)
 1003514:	e0bfd517 	ldw	r2,-172(fp)
 1003518:	10c03415 	stw	r3,208(r2)
 100351c:	e03fd715 	stw	zero,-164(fp)
 1003520:	00001406 	br	1003574 <sls_avalon_usb20_irq+0x1980>
 1003524:	e0bfea17 	ldw	r2,-88(fp)
 1003528:	1007883a 	mov	r3,r2
 100352c:	e0bfd717 	ldw	r2,-164(fp)
 1003530:	1887883a 	add	r3,r3,r2
 1003534:	008000b4 	movhi	r2,2
 1003538:	1889883a 	add	r4,r3,r2
 100353c:	e0bfcf17 	ldw	r2,-196(fp)
 1003540:	10800117 	ldw	r2,4(r2)
 1003544:	1007883a 	mov	r3,r2
 1003548:	e0bfd717 	ldw	r2,-164(fp)
 100354c:	1885883a 	add	r2,r3,r2
 1003550:	10800003 	ldbu	r2,0(r2)
 1003554:	10c03fcc 	andi	r3,r2,255
 1003558:	18c0201c 	xori	r3,r3,128
 100355c:	18ffe004 	addi	r3,r3,-128
 1003560:	2005883a 	mov	r2,r4
 1003564:	10c00025 	stbio	r3,0(r2)
 1003568:	e0bfd717 	ldw	r2,-164(fp)
 100356c:	10800044 	addi	r2,r2,1
 1003570:	e0bfd715 	stw	r2,-164(fp)
 1003574:	e0bfd517 	ldw	r2,-172(fp)
 1003578:	10c03417 	ldw	r3,208(r2)
 100357c:	e0bfd717 	ldw	r2,-164(fp)
 1003580:	10ffe836 	bltu	r2,r3,1003524 <__alt_data_end+0xfffe25cc>
 1003584:	e0bfea17 	ldw	r2,-88(fp)
 1003588:	11001304 	addi	r4,r2,76
 100358c:	e0bfd517 	ldw	r2,-172(fp)
 1003590:	10803417 	ldw	r2,208(r2)
 1003594:	1004947a 	slli	r2,r2,17
 1003598:	1007883a 	mov	r3,r2
 100359c:	2005883a 	mov	r2,r4
 10035a0:	10c00035 	stwio	r3,0(r2)
 10035a4:	0005a806 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10035a8:	e13fd517 	ldw	r4,-172(fp)
 10035ac:	01402004 	movi	r5,128
 10035b0:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 10035b4:	e0ffcf17 	ldw	r3,-196(fp)
 10035b8:	00800084 	movi	r2,2
 10035bc:	18800215 	stw	r2,8(r3)
 10035c0:	0005a106 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10035c4:	e0bfd517 	ldw	r2,-172(fp)
 10035c8:	10803e17 	ldw	r2,248(r2)
 10035cc:	1005003a 	cmpeq	r2,r2,zero
 10035d0:	1000061e 	bne	r2,zero,10035ec <sls_avalon_usb20_irq+0x19f8>
 10035d4:	e0bfd517 	ldw	r2,-172(fp)
 10035d8:	10803e17 	ldw	r2,248(r2)
 10035dc:	e13fcf17 	ldw	r4,-196(fp)
 10035e0:	e17fea17 	ldw	r5,-88(fp)
 10035e4:	01800084 	movi	r6,2
 10035e8:	103ee83a 	callr	r2
 10035ec:	e0bfcf17 	ldw	r2,-196(fp)
 10035f0:	10c00417 	ldw	r3,16(r2)
 10035f4:	e0bfd517 	ldw	r2,-172(fp)
 10035f8:	10c03415 	stw	r3,208(r2)
 10035fc:	e03fd715 	stw	zero,-164(fp)
 1003600:	00001406 	br	1003654 <sls_avalon_usb20_irq+0x1a60>
 1003604:	e0bfea17 	ldw	r2,-88(fp)
 1003608:	1007883a 	mov	r3,r2
 100360c:	e0bfd717 	ldw	r2,-164(fp)
 1003610:	1887883a 	add	r3,r3,r2
 1003614:	008000b4 	movhi	r2,2
 1003618:	1889883a 	add	r4,r3,r2
 100361c:	e0bfcf17 	ldw	r2,-196(fp)
 1003620:	10800117 	ldw	r2,4(r2)
 1003624:	1007883a 	mov	r3,r2
 1003628:	e0bfd717 	ldw	r2,-164(fp)
 100362c:	1885883a 	add	r2,r3,r2
 1003630:	10800003 	ldbu	r2,0(r2)
 1003634:	10c03fcc 	andi	r3,r2,255
 1003638:	18c0201c 	xori	r3,r3,128
 100363c:	18ffe004 	addi	r3,r3,-128
 1003640:	2005883a 	mov	r2,r4
 1003644:	10c00025 	stbio	r3,0(r2)
 1003648:	e0bfd717 	ldw	r2,-164(fp)
 100364c:	10800044 	addi	r2,r2,1
 1003650:	e0bfd715 	stw	r2,-164(fp)
 1003654:	e0bfd517 	ldw	r2,-172(fp)
 1003658:	10c03417 	ldw	r3,208(r2)
 100365c:	e0bfd717 	ldw	r2,-164(fp)
 1003660:	10ffe836 	bltu	r2,r3,1003604 <__alt_data_end+0xfffe26ac>
 1003664:	e0bfea17 	ldw	r2,-88(fp)
 1003668:	11001304 	addi	r4,r2,76
 100366c:	e0bfd517 	ldw	r2,-172(fp)
 1003670:	10803417 	ldw	r2,208(r2)
 1003674:	1004947a 	slli	r2,r2,17
 1003678:	1007883a 	mov	r3,r2
 100367c:	2005883a 	mov	r2,r4
 1003680:	10c00035 	stwio	r3,0(r2)
 1003684:	00057006 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1003688:	e13fd517 	ldw	r4,-172(fp)
 100368c:	01402004 	movi	r5,128
 1003690:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1003694:	e0ffcf17 	ldw	r3,-196(fp)
 1003698:	00800084 	movi	r2,2
 100369c:	18800215 	stw	r2,8(r3)
 10036a0:	00056906 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10036a4:	e0bfe817 	ldw	r2,-96(fp)
 10036a8:	1005003a 	cmpeq	r2,r2,zero
 10036ac:	1000091e 	bne	r2,zero,10036d4 <sls_avalon_usb20_irq+0x1ae0>
 10036b0:	e0bfd517 	ldw	r2,-172(fp)
 10036b4:	10000005 	stb	zero,0(r2)
 10036b8:	e13fd517 	ldw	r4,-172(fp)
 10036bc:	01402004 	movi	r5,128
 10036c0:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 10036c4:	e0ffcf17 	ldw	r3,-196(fp)
 10036c8:	00800084 	movi	r2,2
 10036cc:	18800215 	stw	r2,8(r3)
 10036d0:	00055d06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10036d4:	e0ffd517 	ldw	r3,-172(fp)
 10036d8:	00800044 	movi	r2,1
 10036dc:	1881bc45 	stb	r2,1777(r3)
 10036e0:	e0bfd30b 	ldhu	r2,-180(fp)
 10036e4:	1007883a 	mov	r3,r2
 10036e8:	e0bfd517 	ldw	r2,-172(fp)
 10036ec:	10c00005 	stb	r3,0(r2)
 10036f0:	e0bfea17 	ldw	r2,-88(fp)
 10036f4:	11000104 	addi	r4,r2,4
 10036f8:	e0bfd517 	ldw	r2,-172(fp)
 10036fc:	10800003 	ldbu	r2,0(r2)
 1003700:	10c03fcc 	andi	r3,r2,255
 1003704:	2005883a 	mov	r2,r4
 1003708:	10c00035 	stwio	r3,0(r2)
 100370c:	e0bfea17 	ldw	r2,-88(fp)
 1003710:	10801304 	addi	r2,r2,76
 1003714:	10000035 	stwio	zero,0(r2)
 1003718:	00054b06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 100371c:	e0ffd517 	ldw	r3,-172(fp)
 1003720:	00800044 	movi	r2,1
 1003724:	18800e15 	stw	r2,56(r3)
 1003728:	e0bfcf17 	ldw	r2,-196(fp)
 100372c:	10000415 	stw	zero,16(r2)
 1003730:	e0bfd517 	ldw	r2,-172(fp)
 1003734:	1001bc05 	stb	zero,1776(r2)
 1003738:	e03fd715 	stw	zero,-164(fp)
 100373c:	00001106 	br	1003784 <sls_avalon_usb20_irq+0x1b90>
 1003740:	e0bfd717 	ldw	r2,-164(fp)
 1003744:	e0ffd517 	ldw	r3,-172(fp)
 1003748:	1085883a 	add	r2,r2,r2
 100374c:	1085883a 	add	r2,r2,r2
 1003750:	10c5883a 	add	r2,r2,r3
 1003754:	1080e904 	addi	r2,r2,932
 1003758:	10000015 	stw	zero,0(r2)
 100375c:	e0bfd717 	ldw	r2,-164(fp)
 1003760:	e0ffd517 	ldw	r3,-172(fp)
 1003764:	1085883a 	add	r2,r2,r2
 1003768:	1085883a 	add	r2,r2,r2
 100376c:	10c5883a 	add	r2,r2,r3
 1003770:	1081a204 	addi	r2,r2,1672
 1003774:	10000015 	stw	zero,0(r2)
 1003778:	e0bfd717 	ldw	r2,-164(fp)
 100377c:	10800044 	addi	r2,r2,1
 1003780:	e0bfd715 	stw	r2,-164(fp)
 1003784:	e0bfd717 	ldw	r2,-164(fp)
 1003788:	108003f0 	cmpltui	r2,r2,15
 100378c:	103fec1e 	bne	r2,zero,1003740 <__alt_data_end+0xfffe27e8>
 1003790:	e0bfd517 	ldw	r2,-172(fp)
 1003794:	10803317 	ldw	r2,204(r2)
 1003798:	1004c03a 	cmpne	r2,r2,zero
 100379c:	1000031e 	bne	r2,zero,10037ac <sls_avalon_usb20_irq+0x1bb8>
 10037a0:	e0ffd517 	ldw	r3,-172(fp)
 10037a4:	00800044 	movi	r2,1
 10037a8:	18803315 	stw	r2,204(r3)
 10037ac:	e0bfd30b 	ldhu	r2,-180(fp)
 10037b0:	10803fcc 	andi	r2,r2,255
 10037b4:	1005003a 	cmpeq	r2,r2,zero
 10037b8:	1000e71e 	bne	r2,zero,1003b58 <sls_avalon_usb20_irq+0x1f64>
 10037bc:	e0bfd517 	ldw	r2,-172(fp)
 10037c0:	10800c17 	ldw	r2,48(r2)
 10037c4:	10800058 	cmpnei	r2,r2,1
 10037c8:	1000071e 	bne	r2,zero,10037e8 <sls_avalon_usb20_irq+0x1bf4>
 10037cc:	e0bfd517 	ldw	r2,-172(fp)
 10037d0:	10800417 	ldw	r2,16(r2)
 10037d4:	e0bfcc15 	stw	r2,-208(fp)
 10037d8:	e0bfd517 	ldw	r2,-172(fp)
 10037dc:	10802f17 	ldw	r2,188(r2)
 10037e0:	e0bfde15 	stw	r2,-136(fp)
 10037e4:	00001506 	br	100383c <sls_avalon_usb20_irq+0x1c48>
 10037e8:	e0bfd517 	ldw	r2,-172(fp)
 10037ec:	10800c17 	ldw	r2,48(r2)
 10037f0:	1004c03a 	cmpne	r2,r2,zero
 10037f4:	1000071e 	bne	r2,zero,1003814 <sls_avalon_usb20_irq+0x1c20>
 10037f8:	e0bfd517 	ldw	r2,-172(fp)
 10037fc:	10800517 	ldw	r2,20(r2)
 1003800:	e0bfcc15 	stw	r2,-208(fp)
 1003804:	e0bfd517 	ldw	r2,-172(fp)
 1003808:	10803017 	ldw	r2,192(r2)
 100380c:	e0bfde15 	stw	r2,-136(fp)
 1003810:	00000a06 	br	100383c <sls_avalon_usb20_irq+0x1c48>
 1003814:	e0bfd517 	ldw	r2,-172(fp)
 1003818:	10800c17 	ldw	r2,48(r2)
 100381c:	10800098 	cmpnei	r2,r2,2
 1003820:	1000061e 	bne	r2,zero,100383c <sls_avalon_usb20_irq+0x1c48>
 1003824:	e0bfd517 	ldw	r2,-172(fp)
 1003828:	10800617 	ldw	r2,24(r2)
 100382c:	e0bfcc15 	stw	r2,-208(fp)
 1003830:	e0bfd517 	ldw	r2,-172(fp)
 1003834:	10803117 	ldw	r2,196(r2)
 1003838:	e0bfde15 	stw	r2,-136(fp)
 100383c:	e03fdd15 	stw	zero,-140(fp)
 1003840:	00000006 	br	1003844 <sls_avalon_usb20_irq+0x1c50>
 1003844:	e0bfcc17 	ldw	r2,-208(fp)
 1003848:	10800043 	ldbu	r2,1(r2)
 100384c:	10803fcc 	andi	r2,r2,255
 1003850:	1080201c 	xori	r2,r2,128
 1003854:	10bfe004 	addi	r2,r2,-128
 1003858:	e0bffb15 	stw	r2,-20(fp)
 100385c:	e13ffb17 	ldw	r4,-20(fp)
 1003860:	20800120 	cmpeqi	r2,r4,4
 1003864:	1000761e 	bne	r2,zero,1003a40 <sls_avalon_usb20_irq+0x1e4c>
 1003868:	e0fffb17 	ldw	r3,-20(fp)
 100386c:	18800160 	cmpeqi	r2,r3,5
 1003870:	1000781e 	bne	r2,zero,1003a54 <sls_avalon_usb20_irq+0x1e60>
 1003874:	e13ffb17 	ldw	r4,-20(fp)
 1003878:	208000a0 	cmpeqi	r2,r4,2
 100387c:	1000011e 	bne	r2,zero,1003884 <sls_avalon_usb20_irq+0x1c90>
 1003880:	00009a06 	br	1003aec <sls_avalon_usb20_irq+0x1ef8>
 1003884:	e0bfcc17 	ldw	r2,-208(fp)
 1003888:	10800143 	ldbu	r2,5(r2)
 100388c:	10803fcc 	andi	r2,r2,255
 1003890:	e0bfdf15 	stw	r2,-132(fp)
 1003894:	e0bfd30b 	ldhu	r2,-180(fp)
 1003898:	10c03fcc 	andi	r3,r2,255
 100389c:	e0bfdf17 	ldw	r2,-132(fp)
 10038a0:	1880541e 	bne	r3,r2,10039f4 <sls_avalon_usb20_irq+0x1e00>
 10038a4:	e0bfd30b 	ldhu	r2,-180(fp)
 10038a8:	10c03fcc 	andi	r3,r2,255
 10038ac:	e0bfd517 	ldw	r2,-172(fp)
 10038b0:	10c02815 	stw	r3,160(r2)
 10038b4:	e0bfcc17 	ldw	r2,-208(fp)
 10038b8:	10800103 	ldbu	r2,4(r2)
 10038bc:	10c03fcc 	andi	r3,r2,255
 10038c0:	e0bfd517 	ldw	r2,-172(fp)
 10038c4:	10c02e15 	stw	r3,184(r2)
 10038c8:	e03fd915 	stw	zero,-156(fp)
 10038cc:	00000806 	br	10038f0 <sls_avalon_usb20_irq+0x1cfc>
 10038d0:	e0ffd917 	ldw	r3,-156(fp)
 10038d4:	e0bfd517 	ldw	r2,-172(fp)
 10038d8:	1885883a 	add	r2,r3,r2
 10038dc:	10803504 	addi	r2,r2,212
 10038e0:	10000005 	stb	zero,0(r2)
 10038e4:	e0bfd917 	ldw	r2,-156(fp)
 10038e8:	10800044 	addi	r2,r2,1
 10038ec:	e0bfd915 	stw	r2,-156(fp)
 10038f0:	e0bfd917 	ldw	r2,-156(fp)
 10038f4:	10800130 	cmpltui	r2,r2,4
 10038f8:	103ff51e 	bne	r2,zero,10038d0 <__alt_data_end+0xfffe2978>
 10038fc:	00800044 	movi	r2,1
 1003900:	e0bfd915 	stw	r2,-156(fp)
 1003904:	00001e06 	br	1003980 <sls_avalon_usb20_irq+0x1d8c>
 1003908:	e0bfd517 	ldw	r2,-172(fp)
 100390c:	11002c17 	ldw	r4,176(r2)
 1003910:	e0bfd917 	ldw	r2,-156(fp)
 1003914:	10bfffc4 	addi	r2,r2,-1
 1003918:	1007883a 	mov	r3,r2
 100391c:	00800044 	movi	r2,1
 1003920:	10c4983a 	sll	r2,r2,r3
 1003924:	2084703a 	and	r2,r4,r2
 1003928:	1005003a 	cmpeq	r2,r2,zero
 100392c:	1000041e 	bne	r2,zero,1003940 <sls_avalon_usb20_irq+0x1d4c>
 1003930:	e13fd517 	ldw	r4,-172(fp)
 1003934:	e0bfd917 	ldw	r2,-156(fp)
 1003938:	100b883a 	mov	r5,r2
 100393c:	10019d00 	call	10019d0 <USB_DisableEP>
 1003940:	e0bfd517 	ldw	r2,-172(fp)
 1003944:	11002c17 	ldw	r4,176(r2)
 1003948:	e0bfd917 	ldw	r2,-156(fp)
 100394c:	1007883a 	mov	r3,r2
 1003950:	00a00014 	movui	r2,32768
 1003954:	10c4983a 	sll	r2,r2,r3
 1003958:	2084703a 	and	r2,r4,r2
 100395c:	1005003a 	cmpeq	r2,r2,zero
 1003960:	1000041e 	bne	r2,zero,1003974 <sls_avalon_usb20_irq+0x1d80>
 1003964:	e13fd517 	ldw	r4,-172(fp)
 1003968:	e0bfd917 	ldw	r2,-156(fp)
 100396c:	100b883a 	mov	r5,r2
 1003970:	10019d00 	call	10019d0 <USB_DisableEP>
 1003974:	e0bfd917 	ldw	r2,-156(fp)
 1003978:	10800044 	addi	r2,r2,1
 100397c:	e0bfd915 	stw	r2,-156(fp)
 1003980:	e0bfd917 	ldw	r2,-156(fp)
 1003984:	10800430 	cmpltui	r2,r2,16
 1003988:	103fdf1e 	bne	r2,zero,1003908 <__alt_data_end+0xfffe29b0>
 100398c:	e0bfd517 	ldw	r2,-172(fp)
 1003990:	10002d15 	stw	zero,180(r2)
 1003994:	e0ffd517 	ldw	r3,-172(fp)
 1003998:	00800084 	movi	r2,2
 100399c:	1881bc45 	stb	r2,1777(r3)
 10039a0:	e0bfcc17 	ldw	r2,-208(fp)
 10039a4:	108001c3 	ldbu	r2,7(r2)
 10039a8:	10803fcc 	andi	r2,r2,255
 10039ac:	e0bfdf15 	stw	r2,-132(fp)
 10039b0:	e0bfdf17 	ldw	r2,-132(fp)
 10039b4:	1080100c 	andi	r2,r2,64
 10039b8:	1005003a 	cmpeq	r2,r2,zero
 10039bc:	1000061e 	bne	r2,zero,10039d8 <sls_avalon_usb20_irq+0x1de4>
 10039c0:	e0bfd517 	ldw	r2,-172(fp)
 10039c4:	10802917 	ldw	r2,164(r2)
 10039c8:	10c00054 	ori	r3,r2,1
 10039cc:	e0bfd517 	ldw	r2,-172(fp)
 10039d0:	10c02915 	stw	r3,164(r2)
 10039d4:	00004506 	br	1003aec <sls_avalon_usb20_irq+0x1ef8>
 10039d8:	e0bfd517 	ldw	r2,-172(fp)
 10039dc:	10c02917 	ldw	r3,164(r2)
 10039e0:	00bfff84 	movi	r2,-2
 10039e4:	1886703a 	and	r3,r3,r2
 10039e8:	e0bfd517 	ldw	r2,-172(fp)
 10039ec:	10c02915 	stw	r3,164(r2)
 10039f0:	00003e06 	br	1003aec <sls_avalon_usb20_irq+0x1ef8>
 10039f4:	e0bfcc17 	ldw	r2,-208(fp)
 10039f8:	10c00083 	ldbu	r3,2(r2)
 10039fc:	108000c3 	ldbu	r2,3(r2)
 1003a00:	1004923a 	slli	r2,r2,8
 1003a04:	10c4b03a 	or	r2,r2,r3
 1003a08:	10bfffcc 	andi	r2,r2,65535
 1003a0c:	e0bfdf15 	stw	r2,-132(fp)
 1003a10:	e0ffdd17 	ldw	r3,-140(fp)
 1003a14:	e0bfdf17 	ldw	r2,-132(fp)
 1003a18:	1885883a 	add	r2,r3,r2
 1003a1c:	e0bfdd15 	stw	r2,-140(fp)
 1003a20:	e0bfcc17 	ldw	r2,-208(fp)
 1003a24:	1007883a 	mov	r3,r2
 1003a28:	e0bfdf17 	ldw	r2,-132(fp)
 1003a2c:	1885883a 	add	r2,r3,r2
 1003a30:	e0bfda15 	stw	r2,-152(fp)
 1003a34:	e0bfda17 	ldw	r2,-152(fp)
 1003a38:	e0bfcc15 	stw	r2,-208(fp)
 1003a3c:	003f8106 	br	1003844 <__alt_data_end+0xfffe28ec>
 1003a40:	e0bfcc17 	ldw	r2,-208(fp)
 1003a44:	108000c3 	ldbu	r2,3(r2)
 1003a48:	10803fcc 	andi	r2,r2,255
 1003a4c:	e0bfdb15 	stw	r2,-148(fp)
 1003a50:	00002606 	br	1003aec <sls_avalon_usb20_irq+0x1ef8>
 1003a54:	e0bfcc17 	ldw	r2,-208(fp)
 1003a58:	10800083 	ldbu	r2,2(r2)
 1003a5c:	10803fcc 	andi	r2,r2,255
 1003a60:	e0bfdf15 	stw	r2,-132(fp)
 1003a64:	e0bfdb17 	ldw	r2,-148(fp)
 1003a68:	1004c03a 	cmpne	r2,r2,zero
 1003a6c:	10001f1e 	bne	r2,zero,1003aec <sls_avalon_usb20_irq+0x1ef8>
 1003a70:	e0bfdf17 	ldw	r2,-132(fp)
 1003a74:	108023cc 	andi	r2,r2,143
 1003a78:	e0bfd915 	stw	r2,-156(fp)
 1003a7c:	e0bfd917 	ldw	r2,-156(fp)
 1003a80:	1080200c 	andi	r2,r2,128
 1003a84:	1005003a 	cmpeq	r2,r2,zero
 1003a88:	1000061e 	bne	r2,zero,1003aa4 <sls_avalon_usb20_irq+0x1eb0>
 1003a8c:	e0bfd917 	ldw	r2,-156(fp)
 1003a90:	10c003cc 	andi	r3,r2,15
 1003a94:	00a00014 	movui	r2,32768
 1003a98:	10c4983a 	sll	r2,r2,r3
 1003a9c:	e0bffa15 	stw	r2,-24(fp)
 1003aa0:	00000606 	br	1003abc <sls_avalon_usb20_irq+0x1ec8>
 1003aa4:	e0bfd917 	ldw	r2,-156(fp)
 1003aa8:	10bfffc4 	addi	r2,r2,-1
 1003aac:	1007883a 	mov	r3,r2
 1003ab0:	00800044 	movi	r2,1
 1003ab4:	10c4983a 	sll	r2,r2,r3
 1003ab8:	e0bffa15 	stw	r2,-24(fp)
 1003abc:	e0bffa17 	ldw	r2,-24(fp)
 1003ac0:	e0bfd815 	stw	r2,-160(fp)
 1003ac4:	e0bfd517 	ldw	r2,-172(fp)
 1003ac8:	10c02c17 	ldw	r3,176(r2)
 1003acc:	e0bfd817 	ldw	r2,-160(fp)
 1003ad0:	1886b03a 	or	r3,r3,r2
 1003ad4:	e0bfd517 	ldw	r2,-172(fp)
 1003ad8:	10c02c15 	stw	r3,176(r2)
 1003adc:	e13fd517 	ldw	r4,-172(fp)
 1003ae0:	e0bfd917 	ldw	r2,-156(fp)
 1003ae4:	114003cc 	andi	r5,r2,15
 1003ae8:	1000f940 	call	1000f94 <USB_EnableEP>
 1003aec:	e0bfcc17 	ldw	r2,-208(fp)
 1003af0:	10800003 	ldbu	r2,0(r2)
 1003af4:	10803fcc 	andi	r2,r2,255
 1003af8:	1080201c 	xori	r2,r2,128
 1003afc:	10bfe004 	addi	r2,r2,-128
 1003b00:	e0bfdf15 	stw	r2,-132(fp)
 1003b04:	e0ffdd17 	ldw	r3,-140(fp)
 1003b08:	e0bfdf17 	ldw	r2,-132(fp)
 1003b0c:	1885883a 	add	r2,r3,r2
 1003b10:	e0bfdd15 	stw	r2,-140(fp)
 1003b14:	e0bfcc17 	ldw	r2,-208(fp)
 1003b18:	1007883a 	mov	r3,r2
 1003b1c:	e0bfdf17 	ldw	r2,-132(fp)
 1003b20:	1885883a 	add	r2,r3,r2
 1003b24:	e0bfda15 	stw	r2,-152(fp)
 1003b28:	e0bfda17 	ldw	r2,-152(fp)
 1003b2c:	e0bfcc15 	stw	r2,-208(fp)
 1003b30:	e0ffdd17 	ldw	r3,-140(fp)
 1003b34:	e0bfde17 	ldw	r2,-136(fp)
 1003b38:	1880012e 	bgeu	r3,r2,1003b40 <sls_avalon_usb20_irq+0x1f4c>
 1003b3c:	003f4106 	br	1003844 <__alt_data_end+0xfffe28ec>
 1003b40:	e0bfd517 	ldw	r2,-172(fp)
 1003b44:	10c02817 	ldw	r3,160(r2)
 1003b48:	e0bfd30b 	ldhu	r2,-180(fp)
 1003b4c:	10803fcc 	andi	r2,r2,255
 1003b50:	1880351e 	bne	r3,r2,1003c28 <sls_avalon_usb20_irq+0x2034>
 1003b54:	00003b06 	br	1003c44 <sls_avalon_usb20_irq+0x2050>
 1003b58:	e0bfd517 	ldw	r2,-172(fp)
 1003b5c:	10002815 	stw	zero,160(r2)
 1003b60:	e0ffd517 	ldw	r3,-172(fp)
 1003b64:	00800084 	movi	r2,2
 1003b68:	18800f15 	stw	r2,60(r3)
 1003b6c:	00800044 	movi	r2,1
 1003b70:	e0bfd915 	stw	r2,-156(fp)
 1003b74:	00001e06 	br	1003bf0 <sls_avalon_usb20_irq+0x1ffc>
 1003b78:	e0bfd517 	ldw	r2,-172(fp)
 1003b7c:	11002c17 	ldw	r4,176(r2)
 1003b80:	e0bfd917 	ldw	r2,-156(fp)
 1003b84:	10bfffc4 	addi	r2,r2,-1
 1003b88:	1007883a 	mov	r3,r2
 1003b8c:	00800044 	movi	r2,1
 1003b90:	10c4983a 	sll	r2,r2,r3
 1003b94:	2084703a 	and	r2,r4,r2
 1003b98:	1005003a 	cmpeq	r2,r2,zero
 1003b9c:	1000041e 	bne	r2,zero,1003bb0 <sls_avalon_usb20_irq+0x1fbc>
 1003ba0:	e13fd517 	ldw	r4,-172(fp)
 1003ba4:	e0bfd917 	ldw	r2,-156(fp)
 1003ba8:	100b883a 	mov	r5,r2
 1003bac:	10019d00 	call	10019d0 <USB_DisableEP>
 1003bb0:	e0bfd517 	ldw	r2,-172(fp)
 1003bb4:	11002c17 	ldw	r4,176(r2)
 1003bb8:	e0bfd917 	ldw	r2,-156(fp)
 1003bbc:	1007883a 	mov	r3,r2
 1003bc0:	00a00014 	movui	r2,32768
 1003bc4:	10c4983a 	sll	r2,r2,r3
 1003bc8:	2084703a 	and	r2,r4,r2
 1003bcc:	1005003a 	cmpeq	r2,r2,zero
 1003bd0:	1000041e 	bne	r2,zero,1003be4 <sls_avalon_usb20_irq+0x1ff0>
 1003bd4:	e13fd517 	ldw	r4,-172(fp)
 1003bd8:	e0bfd917 	ldw	r2,-156(fp)
 1003bdc:	100b883a 	mov	r5,r2
 1003be0:	10019d00 	call	10019d0 <USB_DisableEP>
 1003be4:	e0bfd917 	ldw	r2,-156(fp)
 1003be8:	10800044 	addi	r2,r2,1
 1003bec:	e0bfd915 	stw	r2,-156(fp)
 1003bf0:	e0bfd917 	ldw	r2,-156(fp)
 1003bf4:	10800430 	cmpltui	r2,r2,16
 1003bf8:	103fdf1e 	bne	r2,zero,1003b78 <__alt_data_end+0xfffe2c20>
 1003bfc:	e0bfd517 	ldw	r2,-172(fp)
 1003c00:	10002c15 	stw	zero,176(r2)
 1003c04:	e0bfd517 	ldw	r2,-172(fp)
 1003c08:	10002d15 	stw	zero,180(r2)
 1003c0c:	e0ffd517 	ldw	r3,-172(fp)
 1003c10:	00800044 	movi	r2,1
 1003c14:	1881bc45 	stb	r2,1777(r3)
 1003c18:	e0bfea17 	ldw	r2,-88(fp)
 1003c1c:	10801304 	addi	r2,r2,76
 1003c20:	10000035 	stwio	zero,0(r2)
 1003c24:	00040806 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1003c28:	e13fd517 	ldw	r4,-172(fp)
 1003c2c:	01402004 	movi	r5,128
 1003c30:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1003c34:	e0ffcf17 	ldw	r3,-196(fp)
 1003c38:	00800084 	movi	r2,2
 1003c3c:	18800215 	stw	r2,8(r3)
 1003c40:	00040106 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1003c44:	e0bfd517 	ldw	r2,-172(fp)
 1003c48:	10003415 	stw	zero,208(r2)
 1003c4c:	e0ffd517 	ldw	r3,-172(fp)
 1003c50:	008000c4 	movi	r2,3
 1003c54:	18800f15 	stw	r2,60(r3)
 1003c58:	e0bfea17 	ldw	r2,-88(fp)
 1003c5c:	10801304 	addi	r2,r2,76
 1003c60:	10000035 	stwio	zero,0(r2)
 1003c64:	e0ffd517 	ldw	r3,-172(fp)
 1003c68:	00800044 	movi	r2,1
 1003c6c:	1881bc05 	stb	r2,1776(r3)
 1003c70:	e0bfd517 	ldw	r2,-172(fp)
 1003c74:	10000e15 	stw	zero,56(r2)
 1003c78:	0003f306 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1003c7c:	e0bfe817 	ldw	r2,-96(fp)
 1003c80:	1005003a 	cmpeq	r2,r2,zero
 1003c84:	1000071e 	bne	r2,zero,1003ca4 <sls_avalon_usb20_irq+0x20b0>
 1003c88:	e13fd517 	ldw	r4,-172(fp)
 1003c8c:	01402004 	movi	r5,128
 1003c90:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1003c94:	e0ffcf17 	ldw	r3,-196(fp)
 1003c98:	00800084 	movi	r2,2
 1003c9c:	18800215 	stw	r2,8(r3)
 1003ca0:	0003e906 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1003ca4:	e0bfd517 	ldw	r2,-172(fp)
 1003ca8:	1081bc43 	ldbu	r2,1777(r2)
 1003cac:	10803fcc 	andi	r2,r2,255
 1003cb0:	e0bff915 	stw	r2,-28(fp)
 1003cb4:	e0fff917 	ldw	r3,-28(fp)
 1003cb8:	18800060 	cmpeqi	r2,r3,1
 1003cbc:	10000b1e 	bne	r2,zero,1003cec <sls_avalon_usb20_irq+0x20f8>
 1003cc0:	e13ff917 	ldw	r4,-28(fp)
 1003cc4:	208000a0 	cmpeqi	r2,r4,2
 1003cc8:	1000131e 	bne	r2,zero,1003d18 <sls_avalon_usb20_irq+0x2124>
 1003ccc:	e0fff917 	ldw	r3,-28(fp)
 1003cd0:	1805003a 	cmpeq	r2,r3,zero
 1003cd4:	1000011e 	bne	r2,zero,1003cdc <sls_avalon_usb20_irq+0x20e8>
 1003cd8:	0003db06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1003cdc:	e0bfea17 	ldw	r2,-88(fp)
 1003ce0:	10801304 	addi	r2,r2,76
 1003ce4:	10000035 	stwio	zero,0(r2)
 1003ce8:	0003d706 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1003cec:	e0bfea17 	ldw	r2,-88(fp)
 1003cf0:	1007883a 	mov	r3,r2
 1003cf4:	008000b4 	movhi	r2,2
 1003cf8:	1885883a 	add	r2,r3,r2
 1003cfc:	10000035 	stwio	zero,0(r2)
 1003d00:	e0bfea17 	ldw	r2,-88(fp)
 1003d04:	10801304 	addi	r2,r2,76
 1003d08:	1007883a 	mov	r3,r2
 1003d0c:	008000b4 	movhi	r2,2
 1003d10:	18800035 	stwio	r2,0(r3)
 1003d14:	0003cc06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1003d18:	e0bfea17 	ldw	r2,-88(fp)
 1003d1c:	1007883a 	mov	r3,r2
 1003d20:	008000b4 	movhi	r2,2
 1003d24:	1889883a 	add	r4,r3,r2
 1003d28:	e0bfd517 	ldw	r2,-172(fp)
 1003d2c:	10802817 	ldw	r2,160(r2)
 1003d30:	1007883a 	mov	r3,r2
 1003d34:	2005883a 	mov	r2,r4
 1003d38:	10c00035 	stwio	r3,0(r2)
 1003d3c:	e0bfea17 	ldw	r2,-88(fp)
 1003d40:	10801304 	addi	r2,r2,76
 1003d44:	1007883a 	mov	r3,r2
 1003d48:	008000b4 	movhi	r2,2
 1003d4c:	18800035 	stwio	r2,0(r3)
 1003d50:	0003bd06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1003d54:	e13fe817 	ldw	r4,-96(fp)
 1003d58:	e13ff815 	stw	r4,-32(fp)
 1003d5c:	e0fff817 	ldw	r3,-32(fp)
 1003d60:	18800060 	cmpeqi	r2,r3,1
 1003d64:	1000561e 	bne	r2,zero,1003ec0 <sls_avalon_usb20_irq+0x22cc>
 1003d68:	e13ff817 	ldw	r4,-32(fp)
 1003d6c:	208000a0 	cmpeqi	r2,r4,2
 1003d70:	10005a1e 	bne	r2,zero,1003edc <sls_avalon_usb20_irq+0x22e8>
 1003d74:	e0fff817 	ldw	r3,-32(fp)
 1003d78:	1805003a 	cmpeq	r2,r3,zero
 1003d7c:	1000011e 	bne	r2,zero,1003d84 <sls_avalon_usb20_irq+0x2190>
 1003d80:	00009f06 	br	1004000 <sls_avalon_usb20_irq+0x240c>
 1003d84:	e0bfd30b 	ldhu	r2,-180(fp)
 1003d88:	108003cc 	andi	r2,r2,15
 1003d8c:	10800098 	cmpnei	r2,r2,2
 1003d90:	1000131e 	bne	r2,zero,1003de0 <sls_avalon_usb20_irq+0x21ec>
 1003d94:	e0bfd28b 	ldhu	r2,-182(fp)
 1003d98:	10bfc00c 	andi	r2,r2,65280
 1003d9c:	1005d23a 	srai	r2,r2,8
 1003da0:	1007883a 	mov	r3,r2
 1003da4:	e0bfd517 	ldw	r2,-172(fp)
 1003da8:	10c03215 	stw	r3,200(r2)
 1003dac:	e0bfd517 	ldw	r2,-172(fp)
 1003db0:	10803217 	ldw	r2,200(r2)
 1003db4:	10bfffc4 	addi	r2,r2,-1
 1003db8:	1007883a 	mov	r3,r2
 1003dbc:	00800044 	movi	r2,1
 1003dc0:	10c4983a 	sll	r2,r2,r3
 1003dc4:	1007883a 	mov	r3,r2
 1003dc8:	e0bfd517 	ldw	r2,-172(fp)
 1003dcc:	10c03215 	stw	r3,200(r2)
 1003dd0:	e0bfea17 	ldw	r2,-88(fp)
 1003dd4:	10801304 	addi	r2,r2,76
 1003dd8:	10000035 	stwio	zero,0(r2)
 1003ddc:	00008f06 	br	100401c <sls_avalon_usb20_irq+0x2428>
 1003de0:	e0bfd30b 	ldhu	r2,-180(fp)
 1003de4:	10800058 	cmpnei	r2,r2,1
 1003de8:	10002e1e 	bne	r2,zero,1003ea4 <sls_avalon_usb20_irq+0x22b0>
 1003dec:	e0bfd517 	ldw	r2,-172(fp)
 1003df0:	10800c17 	ldw	r2,48(r2)
 1003df4:	10800058 	cmpnei	r2,r2,1
 1003df8:	1000041e 	bne	r2,zero,1003e0c <sls_avalon_usb20_irq+0x2218>
 1003dfc:	e0bfd517 	ldw	r2,-172(fp)
 1003e00:	10800417 	ldw	r2,16(r2)
 1003e04:	e0bfcb15 	stw	r2,-212(fp)
 1003e08:	00000f06 	br	1003e48 <sls_avalon_usb20_irq+0x2254>
 1003e0c:	e0bfd517 	ldw	r2,-172(fp)
 1003e10:	10800c17 	ldw	r2,48(r2)
 1003e14:	1004c03a 	cmpne	r2,r2,zero
 1003e18:	1000041e 	bne	r2,zero,1003e2c <sls_avalon_usb20_irq+0x2238>
 1003e1c:	e0bfd517 	ldw	r2,-172(fp)
 1003e20:	10800517 	ldw	r2,20(r2)
 1003e24:	e0bfcb15 	stw	r2,-212(fp)
 1003e28:	00000706 	br	1003e48 <sls_avalon_usb20_irq+0x2254>
 1003e2c:	e0bfd517 	ldw	r2,-172(fp)
 1003e30:	10800c17 	ldw	r2,48(r2)
 1003e34:	10800098 	cmpnei	r2,r2,2
 1003e38:	1000031e 	bne	r2,zero,1003e48 <sls_avalon_usb20_irq+0x2254>
 1003e3c:	e0bfd517 	ldw	r2,-172(fp)
 1003e40:	10800617 	ldw	r2,24(r2)
 1003e44:	e0bfcb15 	stw	r2,-212(fp)
 1003e48:	e0bfcb17 	ldw	r2,-212(fp)
 1003e4c:	108001c3 	ldbu	r2,7(r2)
 1003e50:	e0bfca05 	stb	r2,-216(fp)
 1003e54:	e0bfca03 	ldbu	r2,-216(fp)
 1003e58:	10803fcc 	andi	r2,r2,255
 1003e5c:	1080080c 	andi	r2,r2,32
 1003e60:	1005003a 	cmpeq	r2,r2,zero
 1003e64:	10006d1e 	bne	r2,zero,100401c <sls_avalon_usb20_irq+0x2428>
 1003e68:	e0bfd517 	ldw	r2,-172(fp)
 1003e6c:	10802917 	ldw	r2,164(r2)
 1003e70:	10c00094 	ori	r3,r2,2
 1003e74:	e0bfd517 	ldw	r2,-172(fp)
 1003e78:	10c02915 	stw	r3,164(r2)
 1003e7c:	e0bfd517 	ldw	r2,-172(fp)
 1003e80:	10803b17 	ldw	r2,236(r2)
 1003e84:	1005003a 	cmpeq	r2,r2,zero
 1003e88:	1000641e 	bne	r2,zero,100401c <sls_avalon_usb20_irq+0x2428>
 1003e8c:	e0bfd517 	ldw	r2,-172(fp)
 1003e90:	10803b17 	ldw	r2,236(r2)
 1003e94:	e13fd517 	ldw	r4,-172(fp)
 1003e98:	01400044 	movi	r5,1
 1003e9c:	103ee83a 	callr	r2
 1003ea0:	00005e06 	br	100401c <sls_avalon_usb20_irq+0x2428>
 1003ea4:	e13fd517 	ldw	r4,-172(fp)
 1003ea8:	01402004 	movi	r5,128
 1003eac:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1003eb0:	e0ffcf17 	ldw	r3,-196(fp)
 1003eb4:	00800084 	movi	r2,2
 1003eb8:	18800215 	stw	r2,8(r3)
 1003ebc:	00036206 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1003ec0:	e13fd517 	ldw	r4,-172(fp)
 1003ec4:	01402004 	movi	r5,128
 1003ec8:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1003ecc:	e0ffcf17 	ldw	r3,-196(fp)
 1003ed0:	00800084 	movi	r2,2
 1003ed4:	18800215 	stw	r2,8(r3)
 1003ed8:	00035b06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1003edc:	e0bfd28b 	ldhu	r2,-182(fp)
 1003ee0:	108023cc 	andi	r2,r2,143
 1003ee4:	e0bfd915 	stw	r2,-156(fp)
 1003ee8:	e0bfd917 	ldw	r2,-156(fp)
 1003eec:	1080200c 	andi	r2,r2,128
 1003ef0:	1005003a 	cmpeq	r2,r2,zero
 1003ef4:	1000061e 	bne	r2,zero,1003f10 <sls_avalon_usb20_irq+0x231c>
 1003ef8:	e0bfd917 	ldw	r2,-156(fp)
 1003efc:	10c003cc 	andi	r3,r2,15
 1003f00:	00a00014 	movui	r2,32768
 1003f04:	10c4983a 	sll	r2,r2,r3
 1003f08:	e0bff715 	stw	r2,-36(fp)
 1003f0c:	00000606 	br	1003f28 <sls_avalon_usb20_irq+0x2334>
 1003f10:	e0bfd917 	ldw	r2,-156(fp)
 1003f14:	10bfffc4 	addi	r2,r2,-1
 1003f18:	1007883a 	mov	r3,r2
 1003f1c:	00800044 	movi	r2,1
 1003f20:	10c4983a 	sll	r2,r2,r3
 1003f24:	e0bff715 	stw	r2,-36(fp)
 1003f28:	e13ff717 	ldw	r4,-36(fp)
 1003f2c:	e13fd815 	stw	r4,-160(fp)
 1003f30:	e0bfd517 	ldw	r2,-172(fp)
 1003f34:	10802817 	ldw	r2,160(r2)
 1003f38:	1005003a 	cmpeq	r2,r2,zero
 1003f3c:	1000291e 	bne	r2,zero,1003fe4 <sls_avalon_usb20_irq+0x23f0>
 1003f40:	e0bfd917 	ldw	r2,-156(fp)
 1003f44:	108003cc 	andi	r2,r2,15
 1003f48:	1005003a 	cmpeq	r2,r2,zero
 1003f4c:	1000251e 	bne	r2,zero,1003fe4 <sls_avalon_usb20_irq+0x23f0>
 1003f50:	e0bfd30b 	ldhu	r2,-180(fp)
 1003f54:	1004c03a 	cmpne	r2,r2,zero
 1003f58:	10001b1e 	bne	r2,zero,1003fc8 <sls_avalon_usb20_irq+0x23d4>
 1003f5c:	e0bfd917 	ldw	r2,-156(fp)
 1003f60:	108003cc 	andi	r2,r2,15
 1003f64:	1004913a 	slli	r2,r2,4
 1003f68:	1007883a 	mov	r3,r2
 1003f6c:	e0bfea17 	ldw	r2,-88(fp)
 1003f70:	1885883a 	add	r2,r3,r2
 1003f74:	10801004 	addi	r2,r2,64
 1003f78:	10800037 	ldwio	r2,0(r2)
 1003f7c:	e0bfee15 	stw	r2,-72(fp)
 1003f80:	e0bfd917 	ldw	r2,-156(fp)
 1003f84:	108003cc 	andi	r2,r2,15
 1003f88:	1004913a 	slli	r2,r2,4
 1003f8c:	1007883a 	mov	r3,r2
 1003f90:	e0bfea17 	ldw	r2,-88(fp)
 1003f94:	1885883a 	add	r2,r3,r2
 1003f98:	11001004 	addi	r4,r2,64
 1003f9c:	e0bfee17 	ldw	r2,-72(fp)
 1003fa0:	10c02034 	orhi	r3,r2,128
 1003fa4:	2005883a 	mov	r2,r4
 1003fa8:	10c00035 	stwio	r3,0(r2)
 1003fac:	e0bfd517 	ldw	r2,-172(fp)
 1003fb0:	10c02d17 	ldw	r3,180(r2)
 1003fb4:	e0bfd817 	ldw	r2,-160(fp)
 1003fb8:	1886b03a 	or	r3,r3,r2
 1003fbc:	e0bfd517 	ldw	r2,-172(fp)
 1003fc0:	10c02d15 	stw	r3,180(r2)
 1003fc4:	00001506 	br	100401c <sls_avalon_usb20_irq+0x2428>
 1003fc8:	e13fd517 	ldw	r4,-172(fp)
 1003fcc:	01402004 	movi	r5,128
 1003fd0:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1003fd4:	e0ffcf17 	ldw	r3,-196(fp)
 1003fd8:	00800084 	movi	r2,2
 1003fdc:	18800215 	stw	r2,8(r3)
 1003fe0:	00031906 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1003fe4:	e13fd517 	ldw	r4,-172(fp)
 1003fe8:	01402004 	movi	r5,128
 1003fec:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1003ff0:	e0ffcf17 	ldw	r3,-196(fp)
 1003ff4:	00800084 	movi	r2,2
 1003ff8:	18800215 	stw	r2,8(r3)
 1003ffc:	00031206 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1004000:	e13fd517 	ldw	r4,-172(fp)
 1004004:	01402004 	movi	r5,128
 1004008:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 100400c:	e0ffcf17 	ldw	r3,-196(fp)
 1004010:	00800084 	movi	r2,2
 1004014:	18800215 	stw	r2,8(r3)
 1004018:	00030b06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 100401c:	e0bfea17 	ldw	r2,-88(fp)
 1004020:	10801304 	addi	r2,r2,76
 1004024:	10000035 	stwio	zero,0(r2)
 1004028:	00030706 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 100402c:	e0bfe817 	ldw	r2,-96(fp)
 1004030:	e0bff615 	stw	r2,-40(fp)
 1004034:	e0fff617 	ldw	r3,-40(fp)
 1004038:	18800060 	cmpeqi	r2,r3,1
 100403c:	1000211e 	bne	r2,zero,10040c4 <sls_avalon_usb20_irq+0x24d0>
 1004040:	e13ff617 	ldw	r4,-40(fp)
 1004044:	208000a0 	cmpeqi	r2,r4,2
 1004048:	1000251e 	bne	r2,zero,10040e0 <sls_avalon_usb20_irq+0x24ec>
 100404c:	e0fff617 	ldw	r3,-40(fp)
 1004050:	1805003a 	cmpeq	r2,r3,zero
 1004054:	1000011e 	bne	r2,zero,100405c <sls_avalon_usb20_irq+0x2468>
 1004058:	00006d06 	br	1004210 <sls_avalon_usb20_irq+0x261c>
 100405c:	e0bfd30b 	ldhu	r2,-180(fp)
 1004060:	10800058 	cmpnei	r2,r2,1
 1004064:	1000101e 	bne	r2,zero,10040a8 <sls_avalon_usb20_irq+0x24b4>
 1004068:	e0bfd517 	ldw	r2,-172(fp)
 100406c:	10803b17 	ldw	r2,236(r2)
 1004070:	1005003a 	cmpeq	r2,r2,zero
 1004074:	1000051e 	bne	r2,zero,100408c <sls_avalon_usb20_irq+0x2498>
 1004078:	e0bfd517 	ldw	r2,-172(fp)
 100407c:	10803b17 	ldw	r2,236(r2)
 1004080:	e13fd517 	ldw	r4,-172(fp)
 1004084:	000b883a 	mov	r5,zero
 1004088:	103ee83a 	callr	r2
 100408c:	e0bfd517 	ldw	r2,-172(fp)
 1004090:	10c02917 	ldw	r3,164(r2)
 1004094:	00bfff44 	movi	r2,-3
 1004098:	1886703a 	and	r3,r3,r2
 100409c:	e0bfd517 	ldw	r2,-172(fp)
 10040a0:	10c02915 	stw	r3,164(r2)
 10040a4:	00006106 	br	100422c <sls_avalon_usb20_irq+0x2638>
 10040a8:	e13fd517 	ldw	r4,-172(fp)
 10040ac:	01402004 	movi	r5,128
 10040b0:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 10040b4:	e0ffcf17 	ldw	r3,-196(fp)
 10040b8:	00800084 	movi	r2,2
 10040bc:	18800215 	stw	r2,8(r3)
 10040c0:	0002e106 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10040c4:	e13fd517 	ldw	r4,-172(fp)
 10040c8:	01402004 	movi	r5,128
 10040cc:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 10040d0:	e0ffcf17 	ldw	r3,-196(fp)
 10040d4:	00800084 	movi	r2,2
 10040d8:	18800215 	stw	r2,8(r3)
 10040dc:	0002da06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10040e0:	e0bfd28b 	ldhu	r2,-182(fp)
 10040e4:	108023cc 	andi	r2,r2,143
 10040e8:	e0bfd915 	stw	r2,-156(fp)
 10040ec:	e0bfd917 	ldw	r2,-156(fp)
 10040f0:	1080200c 	andi	r2,r2,128
 10040f4:	1005003a 	cmpeq	r2,r2,zero
 10040f8:	1000061e 	bne	r2,zero,1004114 <sls_avalon_usb20_irq+0x2520>
 10040fc:	e0bfd917 	ldw	r2,-156(fp)
 1004100:	10c003cc 	andi	r3,r2,15
 1004104:	00a00014 	movui	r2,32768
 1004108:	10c4983a 	sll	r2,r2,r3
 100410c:	e0bff515 	stw	r2,-44(fp)
 1004110:	00000606 	br	100412c <sls_avalon_usb20_irq+0x2538>
 1004114:	e0bfd917 	ldw	r2,-156(fp)
 1004118:	10bfffc4 	addi	r2,r2,-1
 100411c:	1007883a 	mov	r3,r2
 1004120:	00800044 	movi	r2,1
 1004124:	10c4983a 	sll	r2,r2,r3
 1004128:	e0bff515 	stw	r2,-44(fp)
 100412c:	e13ff517 	ldw	r4,-44(fp)
 1004130:	e13fd815 	stw	r4,-160(fp)
 1004134:	e0bfd517 	ldw	r2,-172(fp)
 1004138:	10802817 	ldw	r2,160(r2)
 100413c:	1005003a 	cmpeq	r2,r2,zero
 1004140:	10002c1e 	bne	r2,zero,10041f4 <sls_avalon_usb20_irq+0x2600>
 1004144:	e0bfd917 	ldw	r2,-156(fp)
 1004148:	108003cc 	andi	r2,r2,15
 100414c:	1005003a 	cmpeq	r2,r2,zero
 1004150:	1000281e 	bne	r2,zero,10041f4 <sls_avalon_usb20_irq+0x2600>
 1004154:	e0bfd30b 	ldhu	r2,-180(fp)
 1004158:	1004c03a 	cmpne	r2,r2,zero
 100415c:	10001e1e 	bne	r2,zero,10041d8 <sls_avalon_usb20_irq+0x25e4>
 1004160:	e0bfd917 	ldw	r2,-156(fp)
 1004164:	108003cc 	andi	r2,r2,15
 1004168:	1004913a 	slli	r2,r2,4
 100416c:	1007883a 	mov	r3,r2
 1004170:	e0bfea17 	ldw	r2,-88(fp)
 1004174:	1885883a 	add	r2,r3,r2
 1004178:	10801004 	addi	r2,r2,64
 100417c:	10800037 	ldwio	r2,0(r2)
 1004180:	e0bfef15 	stw	r2,-68(fp)
 1004184:	e0bfd917 	ldw	r2,-156(fp)
 1004188:	108003cc 	andi	r2,r2,15
 100418c:	1004913a 	slli	r2,r2,4
 1004190:	1007883a 	mov	r3,r2
 1004194:	e0bfea17 	ldw	r2,-88(fp)
 1004198:	1885883a 	add	r2,r3,r2
 100419c:	11001004 	addi	r4,r2,64
 10041a0:	e0ffef17 	ldw	r3,-68(fp)
 10041a4:	00b3d034 	movhi	r2,53056
 10041a8:	10bfffc4 	addi	r2,r2,-1
 10041ac:	1886703a 	and	r3,r3,r2
 10041b0:	2005883a 	mov	r2,r4
 10041b4:	10c00035 	stwio	r3,0(r2)
 10041b8:	e0bfd517 	ldw	r2,-172(fp)
 10041bc:	10c02d17 	ldw	r3,180(r2)
 10041c0:	e0bfd817 	ldw	r2,-160(fp)
 10041c4:	0084303a 	nor	r2,zero,r2
 10041c8:	1886703a 	and	r3,r3,r2
 10041cc:	e0bfd517 	ldw	r2,-172(fp)
 10041d0:	10c02d15 	stw	r3,180(r2)
 10041d4:	00001506 	br	100422c <sls_avalon_usb20_irq+0x2638>
 10041d8:	e13fd517 	ldw	r4,-172(fp)
 10041dc:	01402004 	movi	r5,128
 10041e0:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 10041e4:	e0ffcf17 	ldw	r3,-196(fp)
 10041e8:	00800084 	movi	r2,2
 10041ec:	18800215 	stw	r2,8(r3)
 10041f0:	00029506 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10041f4:	e13fd517 	ldw	r4,-172(fp)
 10041f8:	01402004 	movi	r5,128
 10041fc:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1004200:	e0ffcf17 	ldw	r3,-196(fp)
 1004204:	00800084 	movi	r2,2
 1004208:	18800215 	stw	r2,8(r3)
 100420c:	00028e06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1004210:	e13fd517 	ldw	r4,-172(fp)
 1004214:	01402004 	movi	r5,128
 1004218:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 100421c:	e0ffcf17 	ldw	r3,-196(fp)
 1004220:	00800084 	movi	r2,2
 1004224:	18800215 	stw	r2,8(r3)
 1004228:	00028706 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 100422c:	e0bfea17 	ldw	r2,-88(fp)
 1004230:	10801304 	addi	r2,r2,76
 1004234:	10000035 	stwio	zero,0(r2)
 1004238:	00028306 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 100423c:	e03fe215 	stw	zero,-120(fp)
 1004240:	e03fdb15 	stw	zero,-148(fp)
 1004244:	e0bfd517 	ldw	r2,-172(fp)
 1004248:	10802817 	ldw	r2,160(r2)
 100424c:	1004c03a 	cmpne	r2,r2,zero
 1004250:	1000071e 	bne	r2,zero,1004270 <sls_avalon_usb20_irq+0x267c>
 1004254:	e13fd517 	ldw	r4,-172(fp)
 1004258:	01402004 	movi	r5,128
 100425c:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1004260:	e0ffcf17 	ldw	r3,-196(fp)
 1004264:	00800084 	movi	r2,2
 1004268:	18800215 	stw	r2,8(r3)
 100426c:	00027606 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1004270:	e0bfd517 	ldw	r2,-172(fp)
 1004274:	10800c17 	ldw	r2,48(r2)
 1004278:	10800058 	cmpnei	r2,r2,1
 100427c:	1000071e 	bne	r2,zero,100429c <sls_avalon_usb20_irq+0x26a8>
 1004280:	e0bfd517 	ldw	r2,-172(fp)
 1004284:	10800417 	ldw	r2,16(r2)
 1004288:	e0bfc915 	stw	r2,-220(fp)
 100428c:	e0bfd517 	ldw	r2,-172(fp)
 1004290:	10802f17 	ldw	r2,188(r2)
 1004294:	e0bfde15 	stw	r2,-136(fp)
 1004298:	00001506 	br	10042f0 <sls_avalon_usb20_irq+0x26fc>
 100429c:	e0bfd517 	ldw	r2,-172(fp)
 10042a0:	10800c17 	ldw	r2,48(r2)
 10042a4:	1004c03a 	cmpne	r2,r2,zero
 10042a8:	1000071e 	bne	r2,zero,10042c8 <sls_avalon_usb20_irq+0x26d4>
 10042ac:	e0bfd517 	ldw	r2,-172(fp)
 10042b0:	10800517 	ldw	r2,20(r2)
 10042b4:	e0bfc915 	stw	r2,-220(fp)
 10042b8:	e0bfd517 	ldw	r2,-172(fp)
 10042bc:	10803017 	ldw	r2,192(r2)
 10042c0:	e0bfde15 	stw	r2,-136(fp)
 10042c4:	00000a06 	br	10042f0 <sls_avalon_usb20_irq+0x26fc>
 10042c8:	e0bfd517 	ldw	r2,-172(fp)
 10042cc:	10800c17 	ldw	r2,48(r2)
 10042d0:	10800098 	cmpnei	r2,r2,2
 10042d4:	1000061e 	bne	r2,zero,10042f0 <sls_avalon_usb20_irq+0x26fc>
 10042d8:	e0bfd517 	ldw	r2,-172(fp)
 10042dc:	10800617 	ldw	r2,24(r2)
 10042e0:	e0bfc915 	stw	r2,-220(fp)
 10042e4:	e0bfd517 	ldw	r2,-172(fp)
 10042e8:	10803117 	ldw	r2,196(r2)
 10042ec:	e0bfde15 	stw	r2,-136(fp)
 10042f0:	e03fdd15 	stw	zero,-140(fp)
 10042f4:	00000006 	br	10042f8 <sls_avalon_usb20_irq+0x2704>
 10042f8:	e0bfc917 	ldw	r2,-220(fp)
 10042fc:	10800043 	ldbu	r2,1(r2)
 1004300:	10803fcc 	andi	r2,r2,255
 1004304:	1080201c 	xori	r2,r2,128
 1004308:	10bfe004 	addi	r2,r2,-128
 100430c:	e0bff415 	stw	r2,-48(fp)
 1004310:	e0fff417 	ldw	r3,-48(fp)
 1004314:	18800120 	cmpeqi	r2,r3,4
 1004318:	1000221e 	bne	r2,zero,10043a4 <sls_avalon_usb20_irq+0x27b0>
 100431c:	e13ff417 	ldw	r4,-48(fp)
 1004320:	20800160 	cmpeqi	r2,r4,5
 1004324:	1000401e 	bne	r2,zero,1004428 <sls_avalon_usb20_irq+0x2834>
 1004328:	e0fff417 	ldw	r3,-48(fp)
 100432c:	188000a0 	cmpeqi	r2,r3,2
 1004330:	1000011e 	bne	r2,zero,1004338 <sls_avalon_usb20_irq+0x2744>
 1004334:	00008d06 	br	100456c <sls_avalon_usb20_irq+0x2978>
 1004338:	e0bfc917 	ldw	r2,-220(fp)
 100433c:	10800143 	ldbu	r2,5(r2)
 1004340:	10803fcc 	andi	r2,r2,255
 1004344:	e0bfdf15 	stw	r2,-132(fp)
 1004348:	e0bfd517 	ldw	r2,-172(fp)
 100434c:	10c02817 	ldw	r3,160(r2)
 1004350:	e0bfdf17 	ldw	r2,-132(fp)
 1004354:	18808526 	beq	r3,r2,100456c <sls_avalon_usb20_irq+0x2978>
 1004358:	e0bfc917 	ldw	r2,-220(fp)
 100435c:	10c00083 	ldbu	r3,2(r2)
 1004360:	108000c3 	ldbu	r2,3(r2)
 1004364:	1004923a 	slli	r2,r2,8
 1004368:	10c4b03a 	or	r2,r2,r3
 100436c:	10bfffcc 	andi	r2,r2,65535
 1004370:	e0bfdf15 	stw	r2,-132(fp)
 1004374:	e0ffdd17 	ldw	r3,-140(fp)
 1004378:	e0bfdf17 	ldw	r2,-132(fp)
 100437c:	1885883a 	add	r2,r3,r2
 1004380:	e0bfdd15 	stw	r2,-140(fp)
 1004384:	e0bfc917 	ldw	r2,-220(fp)
 1004388:	1007883a 	mov	r3,r2
 100438c:	e0bfdf17 	ldw	r2,-132(fp)
 1004390:	1885883a 	add	r2,r3,r2
 1004394:	e0bfda15 	stw	r2,-152(fp)
 1004398:	e0bfda17 	ldw	r2,-152(fp)
 100439c:	e0bfc915 	stw	r2,-220(fp)
 10043a0:	003fd506 	br	10042f8 <__alt_data_end+0xfffe33a0>
 10043a4:	e0bfc917 	ldw	r2,-220(fp)
 10043a8:	10800083 	ldbu	r2,2(r2)
 10043ac:	10803fcc 	andi	r2,r2,255
 10043b0:	e0bfe215 	stw	r2,-120(fp)
 10043b4:	e0bfc917 	ldw	r2,-220(fp)
 10043b8:	108000c3 	ldbu	r2,3(r2)
 10043bc:	10803fcc 	andi	r2,r2,255
 10043c0:	e0bfdb15 	stw	r2,-148(fp)
 10043c4:	e03fe415 	stw	zero,-112(fp)
 10043c8:	e0ffd28b 	ldhu	r3,-182(fp)
 10043cc:	e0bfe217 	ldw	r2,-120(fp)
 10043d0:	1880661e 	bne	r3,r2,100456c <sls_avalon_usb20_irq+0x2978>
 10043d4:	e0bfd30b 	ldhu	r2,-180(fp)
 10043d8:	10c03fcc 	andi	r3,r2,255
 10043dc:	e0bfdb17 	ldw	r2,-148(fp)
 10043e0:	1880621e 	bne	r3,r2,100456c <sls_avalon_usb20_irq+0x2978>
 10043e4:	00800044 	movi	r2,1
 10043e8:	e0bfd645 	stb	r2,-167(fp)
 10043ec:	e0ffe217 	ldw	r3,-120(fp)
 10043f0:	e0bfd517 	ldw	r2,-172(fp)
 10043f4:	1885883a 	add	r2,r3,r2
 10043f8:	10803504 	addi	r2,r2,212
 10043fc:	10800003 	ldbu	r2,0(r2)
 1004400:	10803fcc 	andi	r2,r2,255
 1004404:	e0bfe315 	stw	r2,-116(fp)
 1004408:	e0ffe217 	ldw	r3,-120(fp)
 100440c:	e0bfdb17 	ldw	r2,-148(fp)
 1004410:	1009883a 	mov	r4,r2
 1004414:	e0bfd517 	ldw	r2,-172(fp)
 1004418:	1885883a 	add	r2,r3,r2
 100441c:	10803504 	addi	r2,r2,212
 1004420:	11000005 	stb	r4,0(r2)
 1004424:	00005106 	br	100456c <sls_avalon_usb20_irq+0x2978>
 1004428:	e0bfc917 	ldw	r2,-220(fp)
 100442c:	10800083 	ldbu	r2,2(r2)
 1004430:	10803fcc 	andi	r2,r2,255
 1004434:	e0bfdf15 	stw	r2,-132(fp)
 1004438:	e0bfd28b 	ldhu	r2,-182(fp)
 100443c:	10c03fcc 	andi	r3,r2,255
 1004440:	e0bfe217 	ldw	r2,-120(fp)
 1004444:	1880491e 	bne	r3,r2,100456c <sls_avalon_usb20_irq+0x2978>
 1004448:	e0bfdf17 	ldw	r2,-132(fp)
 100444c:	108023cc 	andi	r2,r2,143
 1004450:	e0bfd915 	stw	r2,-156(fp)
 1004454:	e0bfd917 	ldw	r2,-156(fp)
 1004458:	1080200c 	andi	r2,r2,128
 100445c:	1005003a 	cmpeq	r2,r2,zero
 1004460:	1000061e 	bne	r2,zero,100447c <sls_avalon_usb20_irq+0x2888>
 1004464:	e0bfd917 	ldw	r2,-156(fp)
 1004468:	10c003cc 	andi	r3,r2,15
 100446c:	00a00014 	movui	r2,32768
 1004470:	10c4983a 	sll	r2,r2,r3
 1004474:	e0bff315 	stw	r2,-52(fp)
 1004478:	00000606 	br	1004494 <sls_avalon_usb20_irq+0x28a0>
 100447c:	e0bfd917 	ldw	r2,-156(fp)
 1004480:	10bfffc4 	addi	r2,r2,-1
 1004484:	1007883a 	mov	r3,r2
 1004488:	00800044 	movi	r2,1
 100448c:	10c4983a 	sll	r2,r2,r3
 1004490:	e0bff315 	stw	r2,-52(fp)
 1004494:	e13ff317 	ldw	r4,-52(fp)
 1004498:	e13fd815 	stw	r4,-160(fp)
 100449c:	e0bfd30b 	ldhu	r2,-180(fp)
 10044a0:	10c03fcc 	andi	r3,r2,255
 10044a4:	e0bfdb17 	ldw	r2,-148(fp)
 10044a8:	1880161e 	bne	r3,r2,1004504 <sls_avalon_usb20_irq+0x2910>
 10044ac:	e0bfd517 	ldw	r2,-172(fp)
 10044b0:	10c02c17 	ldw	r3,176(r2)
 10044b4:	e0bfd817 	ldw	r2,-160(fp)
 10044b8:	1886b03a 	or	r3,r3,r2
 10044bc:	e0bfd517 	ldw	r2,-172(fp)
 10044c0:	10c02c15 	stw	r3,176(r2)
 10044c4:	e0bfd517 	ldw	r2,-172(fp)
 10044c8:	10c02d17 	ldw	r3,180(r2)
 10044cc:	e0bfd817 	ldw	r2,-160(fp)
 10044d0:	0084303a 	nor	r2,zero,r2
 10044d4:	1886703a 	and	r3,r3,r2
 10044d8:	e0bfd517 	ldw	r2,-172(fp)
 10044dc:	10c02d15 	stw	r3,180(r2)
 10044e0:	e13fd517 	ldw	r4,-172(fp)
 10044e4:	e0bfd917 	ldw	r2,-156(fp)
 10044e8:	114003cc 	andi	r5,r2,15
 10044ec:	1000f940 	call	1000f94 <USB_EnableEP>
 10044f0:	e0ffe417 	ldw	r3,-112(fp)
 10044f4:	e0bfd817 	ldw	r2,-160(fp)
 10044f8:	1884b03a 	or	r2,r3,r2
 10044fc:	e0bfe415 	stw	r2,-112(fp)
 1004500:	00001a06 	br	100456c <sls_avalon_usb20_irq+0x2978>
 1004504:	e0ffdb17 	ldw	r3,-148(fp)
 1004508:	e0bfe317 	ldw	r2,-116(fp)
 100450c:	1880171e 	bne	r3,r2,100456c <sls_avalon_usb20_irq+0x2978>
 1004510:	e0ffe417 	ldw	r3,-112(fp)
 1004514:	e0bfd817 	ldw	r2,-160(fp)
 1004518:	1884703a 	and	r2,r3,r2
 100451c:	1004c03a 	cmpne	r2,r2,zero
 1004520:	1000121e 	bne	r2,zero,100456c <sls_avalon_usb20_irq+0x2978>
 1004524:	e0bfd517 	ldw	r2,-172(fp)
 1004528:	10c02c17 	ldw	r3,176(r2)
 100452c:	e0bfd817 	ldw	r2,-160(fp)
 1004530:	0084303a 	nor	r2,zero,r2
 1004534:	1886703a 	and	r3,r3,r2
 1004538:	e0bfd517 	ldw	r2,-172(fp)
 100453c:	10c02c15 	stw	r3,176(r2)
 1004540:	e0bfd517 	ldw	r2,-172(fp)
 1004544:	10c02d17 	ldw	r3,180(r2)
 1004548:	e0bfd817 	ldw	r2,-160(fp)
 100454c:	0084303a 	nor	r2,zero,r2
 1004550:	1886703a 	and	r3,r3,r2
 1004554:	e0bfd517 	ldw	r2,-172(fp)
 1004558:	10c02d15 	stw	r3,180(r2)
 100455c:	e13fd517 	ldw	r4,-172(fp)
 1004560:	e0bfd917 	ldw	r2,-156(fp)
 1004564:	114003cc 	andi	r5,r2,15
 1004568:	10019d00 	call	10019d0 <USB_DisableEP>
 100456c:	e0bfc917 	ldw	r2,-220(fp)
 1004570:	10800003 	ldbu	r2,0(r2)
 1004574:	10803fcc 	andi	r2,r2,255
 1004578:	1080201c 	xori	r2,r2,128
 100457c:	10bfe004 	addi	r2,r2,-128
 1004580:	e0bfdf15 	stw	r2,-132(fp)
 1004584:	e0ffdd17 	ldw	r3,-140(fp)
 1004588:	e0bfdf17 	ldw	r2,-132(fp)
 100458c:	1885883a 	add	r2,r3,r2
 1004590:	e0bfdd15 	stw	r2,-140(fp)
 1004594:	e0bfc917 	ldw	r2,-220(fp)
 1004598:	1007883a 	mov	r3,r2
 100459c:	e0bfdf17 	ldw	r2,-132(fp)
 10045a0:	1885883a 	add	r2,r3,r2
 10045a4:	e0bfda15 	stw	r2,-152(fp)
 10045a8:	e0bfda17 	ldw	r2,-152(fp)
 10045ac:	e0bfc915 	stw	r2,-220(fp)
 10045b0:	e0ffdd17 	ldw	r3,-140(fp)
 10045b4:	e0bfde17 	ldw	r2,-136(fp)
 10045b8:	1880012e 	bgeu	r3,r2,10045c0 <sls_avalon_usb20_irq+0x29cc>
 10045bc:	003f4e06 	br	10042f8 <__alt_data_end+0xfffe33a0>
 10045c0:	e0bfea17 	ldw	r2,-88(fp)
 10045c4:	10801304 	addi	r2,r2,76
 10045c8:	10000035 	stwio	zero,0(r2)
 10045cc:	e0bfd017 	ldw	r2,-192(fp)
 10045d0:	10800083 	ldbu	r2,2(r2)
 10045d4:	10c03fcc 	andi	r3,r2,255
 10045d8:	e0bfd517 	ldw	r2,-172(fp)
 10045dc:	10c02a15 	stw	r3,168(r2)
 10045e0:	e0bfd30b 	ldhu	r2,-180(fp)
 10045e4:	10c03fcc 	andi	r3,r2,255
 10045e8:	e0bfd517 	ldw	r2,-172(fp)
 10045ec:	10c02b15 	stw	r3,172(r2)
 10045f0:	00019506 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10045f4:	e0bfe817 	ldw	r2,-96(fp)
 10045f8:	10800060 	cmpeqi	r2,r2,1
 10045fc:	1000071e 	bne	r2,zero,100461c <sls_avalon_usb20_irq+0x2a28>
 1004600:	e13fd517 	ldw	r4,-172(fp)
 1004604:	01402004 	movi	r5,128
 1004608:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 100460c:	e0ffcf17 	ldw	r3,-196(fp)
 1004610:	00800084 	movi	r2,2
 1004614:	18800215 	stw	r2,8(r3)
 1004618:	00018b06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 100461c:	e0bfd517 	ldw	r2,-172(fp)
 1004620:	10802817 	ldw	r2,160(r2)
 1004624:	1005003a 	cmpeq	r2,r2,zero
 1004628:	1000161e 	bne	r2,zero,1004684 <sls_avalon_usb20_irq+0x2a90>
 100462c:	e0bfd28b 	ldhu	r2,-182(fp)
 1004630:	e0ffd517 	ldw	r3,-172(fp)
 1004634:	18c02e17 	ldw	r3,184(r3)
 1004638:	10c0122e 	bgeu	r2,r3,1004684 <sls_avalon_usb20_irq+0x2a90>
 100463c:	e0bfea17 	ldw	r2,-88(fp)
 1004640:	1007883a 	mov	r3,r2
 1004644:	008000b4 	movhi	r2,2
 1004648:	1889883a 	add	r4,r3,r2
 100464c:	e0ffd28b 	ldhu	r3,-182(fp)
 1004650:	e0bfd517 	ldw	r2,-172(fp)
 1004654:	1885883a 	add	r2,r3,r2
 1004658:	10803504 	addi	r2,r2,212
 100465c:	10800003 	ldbu	r2,0(r2)
 1004660:	10c03fcc 	andi	r3,r2,255
 1004664:	2005883a 	mov	r2,r4
 1004668:	10c00025 	stbio	r3,0(r2)
 100466c:	e0bfea17 	ldw	r2,-88(fp)
 1004670:	10801304 	addi	r2,r2,76
 1004674:	1007883a 	mov	r3,r2
 1004678:	008000b4 	movhi	r2,2
 100467c:	18800035 	stwio	r2,0(r3)
 1004680:	00017106 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1004684:	e13fd517 	ldw	r4,-172(fp)
 1004688:	01402004 	movi	r5,128
 100468c:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1004690:	e0ffcf17 	ldw	r3,-196(fp)
 1004694:	00800084 	movi	r2,2
 1004698:	18800215 	stw	r2,8(r3)
 100469c:	00016a06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10046a0:	e0bfcf17 	ldw	r2,-196(fp)
 10046a4:	10800317 	ldw	r2,12(r2)
 10046a8:	10800098 	cmpnei	r2,r2,2
 10046ac:	1000441e 	bne	r2,zero,10047c0 <sls_avalon_usb20_irq+0x2bcc>
 10046b0:	e0bfcf17 	ldw	r2,-196(fp)
 10046b4:	10000015 	stw	zero,0(r2)
 10046b8:	e0ffcf17 	ldw	r3,-196(fp)
 10046bc:	00800084 	movi	r2,2
 10046c0:	18800215 	stw	r2,8(r3)
 10046c4:	e0bfcf17 	ldw	r2,-196(fp)
 10046c8:	10000515 	stw	zero,20(r2)
 10046cc:	e0bfd517 	ldw	r2,-172(fp)
 10046d0:	10803d17 	ldw	r2,244(r2)
 10046d4:	1005003a 	cmpeq	r2,r2,zero
 10046d8:	10000b1e 	bne	r2,zero,1004708 <sls_avalon_usb20_irq+0x2b14>
 10046dc:	e0bfd517 	ldw	r2,-172(fp)
 10046e0:	10803d17 	ldw	r2,244(r2)
 10046e4:	e13fcf17 	ldw	r4,-196(fp)
 10046e8:	e17fea17 	ldw	r5,-88(fp)
 10046ec:	000d883a 	mov	r6,zero
 10046f0:	103ee83a 	callr	r2
 10046f4:	e0bfcf17 	ldw	r2,-196(fp)
 10046f8:	10800517 	ldw	r2,20(r2)
 10046fc:	1005003a 	cmpeq	r2,r2,zero
 1004700:	1000081e 	bne	r2,zero,1004724 <sls_avalon_usb20_irq+0x2b30>
 1004704:	00000b06 	br	1004734 <sls_avalon_usb20_irq+0x2b40>
 1004708:	e13fd517 	ldw	r4,-172(fp)
 100470c:	01402004 	movi	r5,128
 1004710:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1004714:	e0ffcf17 	ldw	r3,-196(fp)
 1004718:	00800084 	movi	r2,2
 100471c:	18800215 	stw	r2,8(r3)
 1004720:	00014906 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1004724:	e0bfea17 	ldw	r2,-88(fp)
 1004728:	10801304 	addi	r2,r2,76
 100472c:	10000035 	stwio	zero,0(r2)
 1004730:	00014506 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1004734:	e03fe015 	stw	zero,-128(fp)
 1004738:	00001406 	br	100478c <sls_avalon_usb20_irq+0x2b98>
 100473c:	e0bfea17 	ldw	r2,-88(fp)
 1004740:	1007883a 	mov	r3,r2
 1004744:	e0bfe017 	ldw	r2,-128(fp)
 1004748:	1887883a 	add	r3,r3,r2
 100474c:	008000b4 	movhi	r2,2
 1004750:	1889883a 	add	r4,r3,r2
 1004754:	e0bfcf17 	ldw	r2,-196(fp)
 1004758:	10800017 	ldw	r2,0(r2)
 100475c:	1007883a 	mov	r3,r2
 1004760:	e0bfe017 	ldw	r2,-128(fp)
 1004764:	1885883a 	add	r2,r3,r2
 1004768:	10800003 	ldbu	r2,0(r2)
 100476c:	10c03fcc 	andi	r3,r2,255
 1004770:	18c0201c 	xori	r3,r3,128
 1004774:	18ffe004 	addi	r3,r3,-128
 1004778:	2005883a 	mov	r2,r4
 100477c:	10c00025 	stbio	r3,0(r2)
 1004780:	e0bfe017 	ldw	r2,-128(fp)
 1004784:	10800044 	addi	r2,r2,1
 1004788:	e0bfe015 	stw	r2,-128(fp)
 100478c:	e0bfcf17 	ldw	r2,-196(fp)
 1004790:	10c00517 	ldw	r3,20(r2)
 1004794:	e0bfe017 	ldw	r2,-128(fp)
 1004798:	10ffe836 	bltu	r2,r3,100473c <__alt_data_end+0xfffe37e4>
 100479c:	e0bfea17 	ldw	r2,-88(fp)
 10047a0:	11001304 	addi	r4,r2,76
 10047a4:	e0bfcf17 	ldw	r2,-196(fp)
 10047a8:	10800517 	ldw	r2,20(r2)
 10047ac:	1004947a 	slli	r2,r2,17
 10047b0:	1007883a 	mov	r3,r2
 10047b4:	2005883a 	mov	r2,r4
 10047b8:	10c00035 	stwio	r3,0(r2)
 10047bc:	00012206 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10047c0:	e0bfcf17 	ldw	r2,-196(fp)
 10047c4:	10800317 	ldw	r2,12(r2)
 10047c8:	10800058 	cmpnei	r2,r2,1
 10047cc:	1000641e 	bne	r2,zero,1004960 <sls_avalon_usb20_irq+0x2d6c>
 10047d0:	e0bfcf17 	ldw	r2,-196(fp)
 10047d4:	10000115 	stw	zero,4(r2)
 10047d8:	e0bfcf17 	ldw	r2,-196(fp)
 10047dc:	10800417 	ldw	r2,16(r2)
 10047e0:	1004c03a 	cmpne	r2,r2,zero
 10047e4:	1000141e 	bne	r2,zero,1004838 <sls_avalon_usb20_irq+0x2c44>
 10047e8:	e0bfd517 	ldw	r2,-172(fp)
 10047ec:	10003415 	stw	zero,208(r2)
 10047f0:	e0bfd517 	ldw	r2,-172(fp)
 10047f4:	10803d17 	ldw	r2,244(r2)
 10047f8:	1005003a 	cmpeq	r2,r2,zero
 10047fc:	1000071e 	bne	r2,zero,100481c <sls_avalon_usb20_irq+0x2c28>
 1004800:	e0bfd517 	ldw	r2,-172(fp)
 1004804:	10803d17 	ldw	r2,244(r2)
 1004808:	e13fcf17 	ldw	r4,-196(fp)
 100480c:	e17fea17 	ldw	r5,-88(fp)
 1004810:	01800084 	movi	r6,2
 1004814:	103ee83a 	callr	r2
 1004818:	00000706 	br	1004838 <sls_avalon_usb20_irq+0x2c44>
 100481c:	e13fd517 	ldw	r4,-172(fp)
 1004820:	01402004 	movi	r5,128
 1004824:	1000bf00 	call	1000bf0 <USB_SetStallEP>
 1004828:	e0ffcf17 	ldw	r3,-196(fp)
 100482c:	00800084 	movi	r2,2
 1004830:	18800215 	stw	r2,8(r3)
 1004834:	00010406 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1004838:	e0bfcf17 	ldw	r2,-196(fp)
 100483c:	10800417 	ldw	r2,16(r2)
 1004840:	1004c03a 	cmpne	r2,r2,zero
 1004844:	1000061e 	bne	r2,zero,1004860 <sls_avalon_usb20_irq+0x2c6c>
 1004848:	e0bfcf17 	ldw	r2,-196(fp)
 100484c:	10000215 	stw	zero,8(r2)
 1004850:	e0bfea17 	ldw	r2,-88(fp)
 1004854:	10801304 	addi	r2,r2,76
 1004858:	10000035 	stwio	zero,0(r2)
 100485c:	0000fa06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1004860:	e03fdf15 	stw	zero,-132(fp)
 1004864:	e0bfd517 	ldw	r2,-172(fp)
 1004868:	10803417 	ldw	r2,208(r2)
 100486c:	e0bfd915 	stw	r2,-156(fp)
 1004870:	e0bfd517 	ldw	r2,-172(fp)
 1004874:	10c03417 	ldw	r3,208(r2)
 1004878:	e0bfcf17 	ldw	r2,-196(fp)
 100487c:	10800417 	ldw	r2,16(r2)
 1004880:	1880272e 	bgeu	r3,r2,1004920 <sls_avalon_usb20_irq+0x2d2c>
 1004884:	e0bfcf17 	ldw	r2,-196(fp)
 1004888:	10c00417 	ldw	r3,16(r2)
 100488c:	e0bfd517 	ldw	r2,-172(fp)
 1004890:	10803417 	ldw	r2,208(r2)
 1004894:	1885c83a 	sub	r2,r3,r2
 1004898:	e0bfdf15 	stw	r2,-132(fp)
 100489c:	e0bfe917 	ldw	r2,-92(fp)
 10048a0:	1007883a 	mov	r3,r2
 10048a4:	e0bfdf17 	ldw	r2,-132(fp)
 10048a8:	1880022e 	bgeu	r3,r2,10048b4 <sls_avalon_usb20_irq+0x2cc0>
 10048ac:	e0bfe917 	ldw	r2,-92(fp)
 10048b0:	e0bfdf15 	stw	r2,-132(fp)
 10048b4:	e03fe015 	stw	zero,-128(fp)
 10048b8:	00001606 	br	1004914 <sls_avalon_usb20_irq+0x2d20>
 10048bc:	e0bfea17 	ldw	r2,-88(fp)
 10048c0:	1007883a 	mov	r3,r2
 10048c4:	e0bfe017 	ldw	r2,-128(fp)
 10048c8:	1887883a 	add	r3,r3,r2
 10048cc:	008000b4 	movhi	r2,2
 10048d0:	1889883a 	add	r4,r3,r2
 10048d4:	e0bfcf17 	ldw	r2,-196(fp)
 10048d8:	10800117 	ldw	r2,4(r2)
 10048dc:	1007883a 	mov	r3,r2
 10048e0:	e0bfe017 	ldw	r2,-128(fp)
 10048e4:	1887883a 	add	r3,r3,r2
 10048e8:	e0bfd917 	ldw	r2,-156(fp)
 10048ec:	1885883a 	add	r2,r3,r2
 10048f0:	10800003 	ldbu	r2,0(r2)
 10048f4:	10c03fcc 	andi	r3,r2,255
 10048f8:	18c0201c 	xori	r3,r3,128
 10048fc:	18ffe004 	addi	r3,r3,-128
 1004900:	2005883a 	mov	r2,r4
 1004904:	10c00025 	stbio	r3,0(r2)
 1004908:	e0bfe017 	ldw	r2,-128(fp)
 100490c:	10800044 	addi	r2,r2,1
 1004910:	e0bfe015 	stw	r2,-128(fp)
 1004914:	e0ffe017 	ldw	r3,-128(fp)
 1004918:	e0bfdf17 	ldw	r2,-132(fp)
 100491c:	18bfe736 	bltu	r3,r2,10048bc <__alt_data_end+0xfffe3964>
 1004920:	e0bfea17 	ldw	r2,-88(fp)
 1004924:	11001304 	addi	r4,r2,76
 1004928:	e0bfdf17 	ldw	r2,-132(fp)
 100492c:	1004947a 	slli	r2,r2,17
 1004930:	1007883a 	mov	r3,r2
 1004934:	2005883a 	mov	r2,r4
 1004938:	10c00035 	stwio	r3,0(r2)
 100493c:	e0bfd517 	ldw	r2,-172(fp)
 1004940:	10c03417 	ldw	r3,208(r2)
 1004944:	e0bfdf17 	ldw	r2,-132(fp)
 1004948:	1887883a 	add	r3,r3,r2
 100494c:	e0bfd517 	ldw	r2,-172(fp)
 1004950:	10c03415 	stw	r3,208(r2)
 1004954:	e0bfcf17 	ldw	r2,-196(fp)
 1004958:	10000215 	stw	zero,8(r2)
 100495c:	0000ba06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 1004960:	e0bfcf17 	ldw	r2,-196(fp)
 1004964:	10800317 	ldw	r2,12(r2)
 1004968:	1004c03a 	cmpne	r2,r2,zero
 100496c:	10001c1e 	bne	r2,zero,10049e0 <sls_avalon_usb20_irq+0x2dec>
 1004970:	e0bfcf17 	ldw	r2,-196(fp)
 1004974:	10000115 	stw	zero,4(r2)
 1004978:	e0bfd517 	ldw	r2,-172(fp)
 100497c:	10803d17 	ldw	r2,244(r2)
 1004980:	1005003a 	cmpeq	r2,r2,zero
 1004984:	1000061e 	bne	r2,zero,10049a0 <sls_avalon_usb20_irq+0x2dac>
 1004988:	e0bfd517 	ldw	r2,-172(fp)
 100498c:	10803d17 	ldw	r2,244(r2)
 1004990:	e13fcf17 	ldw	r4,-196(fp)
 1004994:	e17fea17 	ldw	r5,-88(fp)
 1004998:	018000c4 	movi	r6,3
 100499c:	103ee83a 	callr	r2
 10049a0:	e0bfcf17 	ldw	r2,-196(fp)
 10049a4:	10000415 	stw	zero,16(r2)
 10049a8:	e0bfea17 	ldw	r2,-88(fp)
 10049ac:	10801204 	addi	r2,r2,72
 10049b0:	10800037 	ldwio	r2,0(r2)
 10049b4:	e0bfdf15 	stw	r2,-132(fp)
 10049b8:	e0bfdf17 	ldw	r2,-132(fp)
 10049bc:	1004403a 	cmpge	r2,r2,zero
 10049c0:	1000071e 	bne	r2,zero,10049e0 <sls_avalon_usb20_irq+0x2dec>
 10049c4:	e0bfea17 	ldw	r2,-88(fp)
 10049c8:	11001204 	addi	r4,r2,72
 10049cc:	e0bfe917 	ldw	r2,-92(fp)
 10049d0:	1006947a 	slli	r3,r2,17
 10049d4:	2005883a 	mov	r2,r4
 10049d8:	10c00035 	stwio	r3,0(r2)
 10049dc:	00009a06 	br	1004c48 <sls_avalon_usb20_irq+0x3054>
 10049e0:	e0bfe117 	ldw	r2,-124(fp)
 10049e4:	10bfff8c 	andi	r2,r2,65534
 10049e8:	108000b0 	cmpltui	r2,r2,2
 10049ec:	1000381e 	bne	r2,zero,1004ad0 <sls_avalon_usb20_irq+0x2edc>
 10049f0:	e03ff015 	stw	zero,-64(fp)
 10049f4:	00800044 	movi	r2,1
 10049f8:	e0bfd715 	stw	r2,-164(fp)
 10049fc:	00003106 	br	1004ac4 <sls_avalon_usb20_irq+0x2ed0>
 1004a00:	e0bfe117 	ldw	r2,-124(fp)
 1004a04:	10ffff8c 	andi	r3,r2,65534
 1004a08:	e0bfd717 	ldw	r2,-164(fp)
 1004a0c:	1884d83a 	srl	r2,r3,r2
 1004a10:	10800058 	cmpnei	r2,r2,1
 1004a14:	1000281e 	bne	r2,zero,1004ab8 <sls_avalon_usb20_irq+0x2ec4>
 1004a18:	e0bfd717 	ldw	r2,-164(fp)
 1004a1c:	e0bff015 	stw	r2,-64(fp)
 1004a20:	e0bff017 	ldw	r2,-64(fp)
 1004a24:	1004913a 	slli	r2,r2,4
 1004a28:	1007883a 	mov	r3,r2
 1004a2c:	e0bfea17 	ldw	r2,-88(fp)
 1004a30:	1885883a 	add	r2,r3,r2
 1004a34:	10801104 	addi	r2,r2,68
 1004a38:	10800037 	ldwio	r2,0(r2)
 1004a3c:	10803fcc 	andi	r2,r2,255
 1004a40:	e0bfdc15 	stw	r2,-144(fp)
 1004a44:	e0bfdc17 	ldw	r2,-144(fp)
 1004a48:	108029cc 	andi	r2,r2,167
 1004a4c:	1005003a 	cmpeq	r2,r2,zero
 1004a50:	1000191e 	bne	r2,zero,1004ab8 <sls_avalon_usb20_irq+0x2ec4>
 1004a54:	e0bff017 	ldw	r2,-64(fp)
 1004a58:	1004913a 	slli	r2,r2,4
 1004a5c:	1007883a 	mov	r3,r2
 1004a60:	e0bfea17 	ldw	r2,-88(fp)
 1004a64:	1885883a 	add	r2,r3,r2
 1004a68:	10801004 	addi	r2,r2,64
 1004a6c:	10800037 	ldwio	r2,0(r2)
 1004a70:	1083002c 	andhi	r2,r2,3072
 1004a74:	1004913a 	slli	r2,r2,4
 1004a78:	e0bfc815 	stw	r2,-224(fp)
 1004a7c:	e0bfd517 	ldw	r2,-172(fp)
 1004a80:	10803c17 	ldw	r2,240(r2)
 1004a84:	1005003a 	cmpeq	r2,r2,zero
 1004a88:	10000b1e 	bne	r2,zero,1004ab8 <sls_avalon_usb20_irq+0x2ec4>
 1004a8c:	e0bfd517 	ldw	r2,-172(fp)
 1004a90:	11403c17 	ldw	r5,240(r2)
 1004a94:	e0bfdc17 	ldw	r2,-144(fp)
 1004a98:	10c029cc 	andi	r3,r2,167
 1004a9c:	e0bfc817 	ldw	r2,-224(fp)
 1004aa0:	1886b03a 	or	r3,r3,r2
 1004aa4:	e0bff017 	ldw	r2,-64(fp)
 1004aa8:	1004963a 	slli	r2,r2,24
 1004aac:	1884b03a 	or	r2,r3,r2
 1004ab0:	1009883a 	mov	r4,r2
 1004ab4:	283ee83a 	callr	r5
 1004ab8:	e0bfd717 	ldw	r2,-164(fp)
 1004abc:	10800044 	addi	r2,r2,1
 1004ac0:	e0bfd715 	stw	r2,-164(fp)
 1004ac4:	e0bfd717 	ldw	r2,-164(fp)
 1004ac8:	10800430 	cmpltui	r2,r2,16
 1004acc:	103fcc1e 	bne	r2,zero,1004a00 <__alt_data_end+0xfffe3aa8>
 1004ad0:	e0bfe117 	ldw	r2,-124(fp)
 1004ad4:	10821c2c 	andhi	r2,r2,2160
 1004ad8:	1005003a 	cmpeq	r2,r2,zero
 1004adc:	10000f1e 	bne	r2,zero,1004b1c <sls_avalon_usb20_irq+0x2f28>
 1004ae0:	e0ffcf17 	ldw	r3,-196(fp)
 1004ae4:	00800084 	movi	r2,2
 1004ae8:	18800215 	stw	r2,8(r3)
 1004aec:	e0bfd517 	ldw	r2,-172(fp)
 1004af0:	10803c17 	ldw	r2,240(r2)
 1004af4:	1005003a 	cmpeq	r2,r2,zero
 1004af8:	1000081e 	bne	r2,zero,1004b1c <sls_avalon_usb20_irq+0x2f28>
 1004afc:	e0bfe117 	ldw	r2,-124(fp)
 1004b00:	10821c2c 	andhi	r2,r2,2160
 1004b04:	e0bff115 	stw	r2,-60(fp)
 1004b08:	e0bfd517 	ldw	r2,-172(fp)
 1004b0c:	10c03c17 	ldw	r3,240(r2)
 1004b10:	e0bff117 	ldw	r2,-60(fp)
 1004b14:	1009d33a 	srai	r4,r2,12
 1004b18:	183ee83a 	callr	r3
 1004b1c:	e0bfe117 	ldw	r2,-124(fp)
 1004b20:	1080402c 	andhi	r2,r2,256
 1004b24:	1005003a 	cmpeq	r2,r2,zero
 1004b28:	10000b1e 	bne	r2,zero,1004b58 <sls_avalon_usb20_irq+0x2f64>
 1004b2c:	e0bfd517 	ldw	r2,-172(fp)
 1004b30:	10803917 	ldw	r2,228(r2)
 1004b34:	1005003a 	cmpeq	r2,r2,zero
 1004b38:	1000041e 	bne	r2,zero,1004b4c <sls_avalon_usb20_irq+0x2f58>
 1004b3c:	e0bfd517 	ldw	r2,-172(fp)
 1004b40:	10803917 	ldw	r2,228(r2)
 1004b44:	e13fd517 	ldw	r4,-172(fp)
 1004b48:	103ee83a 	callr	r2
 1004b4c:	e0ffd517 	ldw	r3,-172(fp)
 1004b50:	00800144 	movi	r2,5
 1004b54:	18800f15 	stw	r2,60(r3)
 1004b58:	e0bfe117 	ldw	r2,-124(fp)
 1004b5c:	1080202c 	andhi	r2,r2,128
 1004b60:	1005003a 	cmpeq	r2,r2,zero
 1004b64:	10000b1e 	bne	r2,zero,1004b94 <sls_avalon_usb20_irq+0x2fa0>
 1004b68:	e0ffd517 	ldw	r3,-172(fp)
 1004b6c:	00800104 	movi	r2,4
 1004b70:	18800f15 	stw	r2,60(r3)
 1004b74:	e0bfd517 	ldw	r2,-172(fp)
 1004b78:	10803a17 	ldw	r2,232(r2)
 1004b7c:	1005003a 	cmpeq	r2,r2,zero
 1004b80:	1000041e 	bne	r2,zero,1004b94 <sls_avalon_usb20_irq+0x2fa0>
 1004b84:	e0bfd517 	ldw	r2,-172(fp)
 1004b88:	10803a17 	ldw	r2,232(r2)
 1004b8c:	e13fd517 	ldw	r4,-172(fp)
 1004b90:	103ee83a 	callr	r2
 1004b94:	e0bfe117 	ldw	r2,-124(fp)
 1004b98:	1081002c 	andhi	r2,r2,1024
 1004b9c:	1005003a 	cmpeq	r2,r2,zero
 1004ba0:	10001d1e 	bne	r2,zero,1004c18 <sls_avalon_usb20_irq+0x3024>
 1004ba4:	e0ffd517 	ldw	r3,-172(fp)
 1004ba8:	00800044 	movi	r2,1
 1004bac:	18800e15 	stw	r2,56(r3)
 1004bb0:	e0bfd517 	ldw	r2,-172(fp)
 1004bb4:	1001bc45 	stb	zero,1777(r2)
 1004bb8:	e0bfd517 	ldw	r2,-172(fp)
 1004bbc:	1001bc05 	stb	zero,1776(r2)
 1004bc0:	e0bfd517 	ldw	r2,-172(fp)
 1004bc4:	10803317 	ldw	r2,204(r2)
 1004bc8:	1004c03a 	cmpne	r2,r2,zero
 1004bcc:	1000031e 	bne	r2,zero,1004bdc <sls_avalon_usb20_irq+0x2fe8>
 1004bd0:	e0ffd517 	ldw	r3,-172(fp)
 1004bd4:	00800044 	movi	r2,1
 1004bd8:	18803315 	stw	r2,204(r3)
 1004bdc:	e0bfd517 	ldw	r2,-172(fp)
 1004be0:	10000f15 	stw	zero,60(r2)
 1004be4:	e0bfd517 	ldw	r2,-172(fp)
 1004be8:	10003215 	stw	zero,200(r2)
 1004bec:	e0bfd517 	ldw	r2,-172(fp)
 1004bf0:	10803717 	ldw	r2,220(r2)
 1004bf4:	1005003a 	cmpeq	r2,r2,zero
 1004bf8:	1000041e 	bne	r2,zero,1004c0c <sls_avalon_usb20_irq+0x3018>
 1004bfc:	e0bfd517 	ldw	r2,-172(fp)
 1004c00:	10803717 	ldw	r2,220(r2)
 1004c04:	e13fd517 	ldw	r4,-172(fp)
 1004c08:	103ee83a 	callr	r2
 1004c0c:	e0ffcf17 	ldw	r3,-196(fp)
 1004c10:	00800084 	movi	r2,2
 1004c14:	18800215 	stw	r2,8(r3)
 1004c18:	e0bfe117 	ldw	r2,-124(fp)
 1004c1c:	1080802c 	andhi	r2,r2,512
 1004c20:	1005003a 	cmpeq	r2,r2,zero
 1004c24:	1000081e 	bne	r2,zero,1004c48 <sls_avalon_usb20_irq+0x3054>
 1004c28:	e0bfd517 	ldw	r2,-172(fp)
 1004c2c:	10803617 	ldw	r2,216(r2)
 1004c30:	1005003a 	cmpeq	r2,r2,zero
 1004c34:	1000041e 	bne	r2,zero,1004c48 <sls_avalon_usb20_irq+0x3054>
 1004c38:	e0bfd517 	ldw	r2,-172(fp)
 1004c3c:	10803617 	ldw	r2,216(r2)
 1004c40:	e13fd517 	ldw	r4,-172(fp)
 1004c44:	103ee83a 	callr	r2
 1004c48:	e037883a 	mov	sp,fp
 1004c4c:	dfc00117 	ldw	ra,4(sp)
 1004c50:	df000017 	ldw	fp,0(sp)
 1004c54:	dec00204 	addi	sp,sp,8
 1004c58:	f800283a 	ret

01004c5c <usb20sr_config>:
 1004c5c:	defff704 	addi	sp,sp,-36
 1004c60:	dfc00815 	stw	ra,32(sp)
 1004c64:	df000715 	stw	fp,28(sp)
 1004c68:	df000704 	addi	fp,sp,28
 1004c6c:	e13ffb15 	stw	r4,-20(fp)
 1004c70:	e17ffc15 	stw	r5,-16(fp)
 1004c74:	e1bffd15 	stw	r6,-12(fp)
 1004c78:	e1fffe15 	stw	r7,-8(fp)
 1004c7c:	e03ffa15 	stw	zero,-24(fp)
 1004c80:	e13ffd17 	ldw	r4,-12(fp)
 1004c84:	e17ffb17 	ldw	r5,-20(fp)
 1004c88:	01804034 	movhi	r6,256
 1004c8c:	3186fd04 	addi	r6,r6,7156
 1004c90:	10074b00 	call	10074b0 <alt_irq_register>
 1004c94:	e0bff915 	stw	r2,-28(fp)
 1004c98:	e0bff917 	ldw	r2,-28(fp)
 1004c9c:	1004803a 	cmplt	r2,r2,zero
 1004ca0:	1000391e 	bne	r2,zero,1004d88 <usb20sr_config+0x12c>
 1004ca4:	00800044 	movi	r2,1
 1004ca8:	e0bffa15 	stw	r2,-24(fp)
 1004cac:	e0fffe17 	ldw	r3,-8(fp)
 1004cb0:	e0bffb17 	ldw	r2,-20(fp)
 1004cb4:	10c00115 	stw	r3,4(r2)
 1004cb8:	e0bffc17 	ldw	r2,-16(fp)
 1004cbc:	1007883a 	mov	r3,r2
 1004cc0:	e0bffb17 	ldw	r2,-20(fp)
 1004cc4:	10c01515 	stw	r3,84(r2)
 1004cc8:	e0bffd17 	ldw	r2,-12(fp)
 1004ccc:	1007883a 	mov	r3,r2
 1004cd0:	e0bffb17 	ldw	r2,-20(fp)
 1004cd4:	10c00d15 	stw	r3,52(r2)
 1004cd8:	e0bffb17 	ldw	r2,-20(fp)
 1004cdc:	10c01517 	ldw	r3,84(r2)
 1004ce0:	008000b4 	movhi	r2,2
 1004ce4:	1887883a 	add	r3,r3,r2
 1004ce8:	e0bffb17 	ldw	r2,-20(fp)
 1004cec:	10c01615 	stw	r3,88(r2)
 1004cf0:	e0c00217 	ldw	r3,8(fp)
 1004cf4:	e0bffb17 	ldw	r2,-20(fp)
 1004cf8:	10c03c15 	stw	r3,240(r2)
 1004cfc:	e0c00317 	ldw	r3,12(fp)
 1004d00:	e0bffb17 	ldw	r2,-20(fp)
 1004d04:	10c03d15 	stw	r3,244(r2)
 1004d08:	e0c00417 	ldw	r3,16(fp)
 1004d0c:	e0bffb17 	ldw	r2,-20(fp)
 1004d10:	10c03e15 	stw	r3,248(r2)
 1004d14:	e0bffb17 	ldw	r2,-20(fp)
 1004d18:	10000e15 	stw	zero,56(r2)
 1004d1c:	e0bffb17 	ldw	r2,-20(fp)
 1004d20:	10000f15 	stw	zero,60(r2)
 1004d24:	e0bffb17 	ldw	r2,-20(fp)
 1004d28:	10800317 	ldw	r2,12(r2)
 1004d2c:	108001c4 	addi	r2,r2,7
 1004d30:	10c00003 	ldbu	r3,0(r2)
 1004d34:	e0bffb17 	ldw	r2,-20(fp)
 1004d38:	10c00045 	stb	r3,1(r2)
 1004d3c:	e0bffb17 	ldw	r2,-20(fp)
 1004d40:	10000005 	stb	zero,0(r2)
 1004d44:	e0bffb17 	ldw	r2,-20(fp)
 1004d48:	10002915 	stw	zero,164(r2)
 1004d4c:	e0bffb17 	ldw	r2,-20(fp)
 1004d50:	10002815 	stw	zero,160(r2)
 1004d54:	e0bffb17 	ldw	r2,-20(fp)
 1004d58:	10002a15 	stw	zero,168(r2)
 1004d5c:	e0bffb17 	ldw	r2,-20(fp)
 1004d60:	10002b15 	stw	zero,172(r2)
 1004d64:	e0bffb17 	ldw	r2,-20(fp)
 1004d68:	10801517 	ldw	r2,84(r2)
 1004d6c:	10800204 	addi	r2,r2,8
 1004d70:	1007883a 	mov	r3,r2
 1004d74:	0080ffc4 	movi	r2,1023
 1004d78:	18800035 	stwio	r2,0(r3)
 1004d7c:	e0bffa17 	ldw	r2,-24(fp)
 1004d80:	e0bfff15 	stw	r2,-4(fp)
 1004d84:	00000206 	br	1004d90 <usb20sr_config+0x134>
 1004d88:	e0bffa17 	ldw	r2,-24(fp)
 1004d8c:	e0bfff15 	stw	r2,-4(fp)
 1004d90:	e0bfff17 	ldw	r2,-4(fp)
 1004d94:	e037883a 	mov	sp,fp
 1004d98:	dfc00117 	ldw	ra,4(sp)
 1004d9c:	df000017 	ldw	fp,0(sp)
 1004da0:	dec00204 	addi	sp,sp,8
 1004da4:	f800283a 	ret

01004da8 <usb20_event_isr>:
 1004da8:	defffb04 	addi	sp,sp,-20
 1004dac:	df000415 	stw	fp,16(sp)
 1004db0:	df000404 	addi	fp,sp,16
 1004db4:	e13ffc15 	stw	r4,-16(fp)
 1004db8:	e17ffd15 	stw	r5,-12(fp)
 1004dbc:	e1bffe15 	stw	r6,-8(fp)
 1004dc0:	e1ffff15 	stw	r7,-4(fp)
 1004dc4:	e0ffff17 	ldw	r3,-4(fp)
 1004dc8:	e0bffc17 	ldw	r2,-16(fp)
 1004dcc:	10c03815 	stw	r3,224(r2)
 1004dd0:	e0c00117 	ldw	r3,4(fp)
 1004dd4:	e0bffc17 	ldw	r2,-16(fp)
 1004dd8:	10c03915 	stw	r3,228(r2)
 1004ddc:	e0fffd17 	ldw	r3,-12(fp)
 1004de0:	e0bffc17 	ldw	r2,-16(fp)
 1004de4:	10c03615 	stw	r3,216(r2)
 1004de8:	e0fffe17 	ldw	r3,-8(fp)
 1004dec:	e0bffc17 	ldw	r2,-16(fp)
 1004df0:	10c03715 	stw	r3,220(r2)
 1004df4:	e0c00217 	ldw	r3,8(fp)
 1004df8:	e0bffc17 	ldw	r2,-16(fp)
 1004dfc:	10c03a15 	stw	r3,232(r2)
 1004e00:	e0c00317 	ldw	r3,12(fp)
 1004e04:	e0bffc17 	ldw	r2,-16(fp)
 1004e08:	10c03b15 	stw	r3,236(r2)
 1004e0c:	e037883a 	mov	sp,fp
 1004e10:	df000017 	ldw	fp,0(sp)
 1004e14:	dec00104 	addi	sp,sp,4
 1004e18:	f800283a 	ret

01004e1c <usb20sr_with_dma_write>:
 1004e1c:	deffe704 	addi	sp,sp,-100
 1004e20:	dfc01815 	stw	ra,96(sp)
 1004e24:	df001715 	stw	fp,92(sp)
 1004e28:	df001704 	addi	fp,sp,92
 1004e2c:	e13ffb15 	stw	r4,-20(fp)
 1004e30:	e1bffd15 	stw	r6,-12(fp)
 1004e34:	e1fffe15 	stw	r7,-8(fp)
 1004e38:	e17ffc05 	stb	r5,-16(fp)
 1004e3c:	e0bffb17 	ldw	r2,-20(fp)
 1004e40:	10800e17 	ldw	r2,56(r2)
 1004e44:	1004c03a 	cmpne	r2,r2,zero
 1004e48:	103ffc1e 	bne	r2,zero,1004e3c <__alt_data_end+0xfffe3ee4>
 1004e4c:	e0bffb17 	ldw	r2,-20(fp)
 1004e50:	10003315 	stw	zero,204(r2)
 1004e54:	e0bffd17 	ldw	r2,-12(fp)
 1004e58:	e0bfeb15 	stw	r2,-84(fp)
 1004e5c:	e0bffd17 	ldw	r2,-12(fp)
 1004e60:	e0bfec15 	stw	r2,-80(fp)
 1004e64:	e03fed15 	stw	zero,-76(fp)
 1004e68:	e0bfec17 	ldw	r2,-80(fp)
 1004e6c:	108000cc 	andi	r2,r2,3
 1004e70:	1005003a 	cmpeq	r2,r2,zero
 1004e74:	1000021e 	bne	r2,zero,1004e80 <usb20sr_with_dma_write+0x64>
 1004e78:	00800044 	movi	r2,1
 1004e7c:	e0bfed15 	stw	r2,-76(fp)
 1004e80:	e0bffe17 	ldw	r2,-8(fp)
 1004e84:	e0bfee15 	stw	r2,-72(fp)
 1004e88:	e03fef15 	stw	zero,-68(fp)
 1004e8c:	e0bffb17 	ldw	r2,-20(fp)
 1004e90:	10801717 	ldw	r2,92(r2)
 1004e94:	e0bff015 	stw	r2,-64(fp)
 1004e98:	e0bffb17 	ldw	r2,-20(fp)
 1004e9c:	10801517 	ldw	r2,84(r2)
 1004ea0:	e0bff115 	stw	r2,-60(fp)
 1004ea4:	e0fffc03 	ldbu	r3,-16(fp)
 1004ea8:	e0bffb17 	ldw	r2,-20(fp)
 1004eac:	1885883a 	add	r2,r3,r2
 1004eb0:	1080e104 	addi	r2,r2,900
 1004eb4:	10800003 	ldbu	r2,0(r2)
 1004eb8:	10803fcc 	andi	r2,r2,255
 1004ebc:	e0bff215 	stw	r2,-56(fp)
 1004ec0:	e0fffc03 	ldbu	r3,-16(fp)
 1004ec4:	e0bffb17 	ldw	r2,-20(fp)
 1004ec8:	1885883a 	add	r2,r3,r2
 1004ecc:	1080e504 	addi	r2,r2,916
 1004ed0:	10800003 	ldbu	r2,0(r2)
 1004ed4:	10803fcc 	andi	r2,r2,255
 1004ed8:	e0bff315 	stw	r2,-52(fp)
 1004edc:	e0bffb17 	ldw	r2,-20(fp)
 1004ee0:	10801617 	ldw	r2,88(r2)
 1004ee4:	e0bff415 	stw	r2,-48(fp)
 1004ee8:	e0bffc03 	ldbu	r2,-16(fp)
 1004eec:	e0fffb17 	ldw	r3,-20(fp)
 1004ef0:	1085883a 	add	r2,r2,r2
 1004ef4:	1085883a 	add	r2,r2,r2
 1004ef8:	10c5883a 	add	r2,r2,r3
 1004efc:	1080c104 	addi	r2,r2,772
 1004f00:	10800017 	ldw	r2,0(r2)
 1004f04:	e0bff515 	stw	r2,-44(fp)
 1004f08:	e0bffc03 	ldbu	r2,-16(fp)
 1004f0c:	e0fffb17 	ldw	r3,-20(fp)
 1004f10:	1085883a 	add	r2,r2,r2
 1004f14:	1085883a 	add	r2,r2,r2
 1004f18:	10c5883a 	add	r2,r2,r3
 1004f1c:	1080d104 	addi	r2,r2,836
 1004f20:	10800017 	ldw	r2,0(r2)
 1004f24:	e0bff615 	stw	r2,-40(fp)
 1004f28:	e0fff417 	ldw	r3,-48(fp)
 1004f2c:	e0bff517 	ldw	r2,-44(fp)
 1004f30:	1885883a 	add	r2,r3,r2
 1004f34:	e0bff715 	stw	r2,-36(fp)
 1004f38:	e0fff417 	ldw	r3,-48(fp)
 1004f3c:	e0bff617 	ldw	r2,-40(fp)
 1004f40:	1885883a 	add	r2,r3,r2
 1004f44:	e0bff815 	stw	r2,-32(fp)
 1004f48:	e0bffc03 	ldbu	r2,-16(fp)
 1004f4c:	e0fffb17 	ldw	r3,-20(fp)
 1004f50:	1085883a 	add	r2,r2,r2
 1004f54:	1085883a 	add	r2,r2,r2
 1004f58:	10c5883a 	add	r2,r2,r3
 1004f5c:	10809104 	addi	r2,r2,580
 1004f60:	10800017 	ldw	r2,0(r2)
 1004f64:	e0bff915 	stw	r2,-28(fp)
 1004f68:	e0bffc03 	ldbu	r2,-16(fp)
 1004f6c:	e0fffb17 	ldw	r3,-20(fp)
 1004f70:	1085883a 	add	r2,r2,r2
 1004f74:	1085883a 	add	r2,r2,r2
 1004f78:	10c5883a 	add	r2,r2,r3
 1004f7c:	1080e904 	addi	r2,r2,932
 1004f80:	10800017 	ldw	r2,0(r2)
 1004f84:	e0bffa15 	stw	r2,-24(fp)
 1004f88:	00005506 	br	10050e0 <usb20sr_with_dma_write+0x2c4>
 1004f8c:	e0bffa17 	ldw	r2,-24(fp)
 1004f90:	1004c03a 	cmpne	r2,r2,zero
 1004f94:	1000231e 	bne	r2,zero,1005024 <usb20sr_with_dma_write+0x208>
 1004f98:	e0bff217 	ldw	r2,-56(fp)
 1004f9c:	1085883a 	add	r2,r2,r2
 1004fa0:	1085883a 	add	r2,r2,r2
 1004fa4:	1007883a 	mov	r3,r2
 1004fa8:	e0bff117 	ldw	r2,-60(fp)
 1004fac:	1885883a 	add	r2,r3,r2
 1004fb0:	10800037 	ldwio	r2,0(r2)
 1004fb4:	1004403a 	cmpge	r2,r2,zero
 1004fb8:	10001a1e 	bne	r2,zero,1005024 <usb20sr_with_dma_write+0x208>
 1004fbc:	e0bffb17 	ldw	r2,-20(fp)
 1004fc0:	10803317 	ldw	r2,204(r2)
 1004fc4:	1004c03a 	cmpne	r2,r2,zero
 1004fc8:	10000c1e 	bne	r2,zero,1004ffc <usb20sr_with_dma_write+0x1e0>
 1004fcc:	e0bff217 	ldw	r2,-56(fp)
 1004fd0:	1085883a 	add	r2,r2,r2
 1004fd4:	1085883a 	add	r2,r2,r2
 1004fd8:	1007883a 	mov	r3,r2
 1004fdc:	e0bff117 	ldw	r2,-60(fp)
 1004fe0:	1889883a 	add	r4,r3,r2
 1004fe4:	e0bfee17 	ldw	r2,-72(fp)
 1004fe8:	1006947a 	slli	r3,r2,17
 1004fec:	e0bff517 	ldw	r2,-44(fp)
 1004ff0:	1886b03a 	or	r3,r3,r2
 1004ff4:	2005883a 	mov	r2,r4
 1004ff8:	10c00035 	stwio	r3,0(r2)
 1004ffc:	e0bffc03 	ldbu	r2,-16(fp)
 1005000:	e0fffb17 	ldw	r3,-20(fp)
 1005004:	1085883a 	add	r2,r2,r2
 1005008:	1085883a 	add	r2,r2,r2
 100500c:	10c5883a 	add	r2,r2,r3
 1005010:	10c0e904 	addi	r3,r2,932
 1005014:	00800044 	movi	r2,1
 1005018:	18800015 	stw	r2,0(r3)
 100501c:	e03fff15 	stw	zero,-4(fp)
 1005020:	00014206 	br	100552c <usb20sr_with_dma_write+0x710>
 1005024:	e0bffa17 	ldw	r2,-24(fp)
 1005028:	1005003a 	cmpeq	r2,r2,zero
 100502c:	1000221e 	bne	r2,zero,10050b8 <usb20sr_with_dma_write+0x29c>
 1005030:	e0bff317 	ldw	r2,-52(fp)
 1005034:	1085883a 	add	r2,r2,r2
 1005038:	1085883a 	add	r2,r2,r2
 100503c:	1007883a 	mov	r3,r2
 1005040:	e0bff117 	ldw	r2,-60(fp)
 1005044:	1885883a 	add	r2,r3,r2
 1005048:	10800037 	ldwio	r2,0(r2)
 100504c:	1004403a 	cmpge	r2,r2,zero
 1005050:	1000191e 	bne	r2,zero,10050b8 <usb20sr_with_dma_write+0x29c>
 1005054:	e0bffb17 	ldw	r2,-20(fp)
 1005058:	10803317 	ldw	r2,204(r2)
 100505c:	1004c03a 	cmpne	r2,r2,zero
 1005060:	10000c1e 	bne	r2,zero,1005094 <usb20sr_with_dma_write+0x278>
 1005064:	e0bff217 	ldw	r2,-56(fp)
 1005068:	1085883a 	add	r2,r2,r2
 100506c:	1085883a 	add	r2,r2,r2
 1005070:	1007883a 	mov	r3,r2
 1005074:	e0bff117 	ldw	r2,-60(fp)
 1005078:	1889883a 	add	r4,r3,r2
 100507c:	e0bfee17 	ldw	r2,-72(fp)
 1005080:	1006947a 	slli	r3,r2,17
 1005084:	e0bff617 	ldw	r2,-40(fp)
 1005088:	1886b03a 	or	r3,r3,r2
 100508c:	2005883a 	mov	r2,r4
 1005090:	10c00035 	stwio	r3,0(r2)
 1005094:	e0bffc03 	ldbu	r2,-16(fp)
 1005098:	e0fffb17 	ldw	r3,-20(fp)
 100509c:	1085883a 	add	r2,r2,r2
 10050a0:	1085883a 	add	r2,r2,r2
 10050a4:	10c5883a 	add	r2,r2,r3
 10050a8:	1080e904 	addi	r2,r2,932
 10050ac:	10000015 	stw	zero,0(r2)
 10050b0:	e03fff15 	stw	zero,-4(fp)
 10050b4:	00011d06 	br	100552c <usb20sr_with_dma_write+0x710>
 10050b8:	e0bffb17 	ldw	r2,-20(fp)
 10050bc:	10803317 	ldw	r2,204(r2)
 10050c0:	1005003a 	cmpeq	r2,r2,zero
 10050c4:	1000061e 	bne	r2,zero,10050e0 <usb20sr_with_dma_write+0x2c4>
 10050c8:	e0fffb17 	ldw	r3,-20(fp)
 10050cc:	00800084 	movi	r2,2
 10050d0:	18803315 	stw	r2,204(r3)
 10050d4:	00bfffc4 	movi	r2,-1
 10050d8:	e0bfff15 	stw	r2,-4(fp)
 10050dc:	00011306 	br	100552c <usb20sr_with_dma_write+0x710>
 10050e0:	e0bfee17 	ldw	r2,-72(fp)
 10050e4:	1005003a 	cmpeq	r2,r2,zero
 10050e8:	103fa81e 	bne	r2,zero,1004f8c <__alt_data_end+0xfffe4034>
 10050ec:	e0800217 	ldw	r2,8(fp)
 10050f0:	1004c03a 	cmpne	r2,r2,zero
 10050f4:	1000fa1e 	bne	r2,zero,10054e0 <usb20sr_with_dma_write+0x6c4>
 10050f8:	e17ffe17 	ldw	r5,-8(fp)
 10050fc:	e13feb17 	ldw	r4,-84(fp)
 1005100:	100743c0 	call	100743c <alt_dcache_flush>
 1005104:	e0bffb17 	ldw	r2,-20(fp)
 1005108:	10801217 	ldw	r2,72(r2)
 100510c:	e0bfea15 	stw	r2,-88(fp)
 1005110:	e0bffc03 	ldbu	r2,-16(fp)
 1005114:	10800c14 	ori	r2,r2,48
 1005118:	10803fcc 	andi	r2,r2,255
 100511c:	e0bfe915 	stw	r2,-92(fp)
 1005120:	e0bfea17 	ldw	r2,-88(fp)
 1005124:	10800104 	addi	r2,r2,4
 1005128:	1007883a 	mov	r3,r2
 100512c:	e0bffe17 	ldw	r2,-8(fp)
 1005130:	18800035 	stwio	r2,0(r3)
 1005134:	e0bfea17 	ldw	r2,-88(fp)
 1005138:	10800204 	addi	r2,r2,8
 100513c:	e0ffeb17 	ldw	r3,-84(fp)
 1005140:	10c00035 	stwio	r3,0(r2)
 1005144:	e0bfea17 	ldw	r2,-88(fp)
 1005148:	10800304 	addi	r2,r2,12
 100514c:	e0fff717 	ldw	r3,-36(fp)
 1005150:	10c00035 	stwio	r3,0(r2)
 1005154:	e0bfea17 	ldw	r2,-88(fp)
 1005158:	10800504 	addi	r2,r2,20
 100515c:	e0fff117 	ldw	r3,-60(fp)
 1005160:	10c00035 	stwio	r3,0(r2)
 1005164:	e0bfea17 	ldw	r2,-88(fp)
 1005168:	1007883a 	mov	r3,r2
 100516c:	e0bfe917 	ldw	r2,-92(fp)
 1005170:	18800035 	stwio	r2,0(r3)
 1005174:	e0bfea17 	ldw	r2,-88(fp)
 1005178:	10800404 	addi	r2,r2,16
 100517c:	10800037 	ldwio	r2,0(r2)
 1005180:	1080004c 	andi	r2,r2,1
 1005184:	10803fcc 	andi	r2,r2,255
 1005188:	1004c03a 	cmpne	r2,r2,zero
 100518c:	103ff91e 	bne	r2,zero,1005174 <__alt_data_end+0xfffe421c>
 1005190:	e0bffe17 	ldw	r2,-8(fp)
 1005194:	1007883a 	mov	r3,r2
 1005198:	e0bfeb17 	ldw	r2,-84(fp)
 100519c:	10c5883a 	add	r2,r2,r3
 10051a0:	e0bfeb15 	stw	r2,-84(fp)
 10051a4:	0000d106 	br	10054ec <usb20sr_with_dma_write+0x6d0>
 10051a8:	e0bffa17 	ldw	r2,-24(fp)
 10051ac:	1004c03a 	cmpne	r2,r2,zero
 10051b0:	10005e1e 	bne	r2,zero,100532c <usb20sr_with_dma_write+0x510>
 10051b4:	e0bff217 	ldw	r2,-56(fp)
 10051b8:	1085883a 	add	r2,r2,r2
 10051bc:	1085883a 	add	r2,r2,r2
 10051c0:	1007883a 	mov	r3,r2
 10051c4:	e0bff117 	ldw	r2,-60(fp)
 10051c8:	1885883a 	add	r2,r3,r2
 10051cc:	10800037 	ldwio	r2,0(r2)
 10051d0:	1004403a 	cmpge	r2,r2,zero
 10051d4:	1000551e 	bne	r2,zero,100532c <usb20sr_with_dma_write+0x510>
 10051d8:	e0ffee17 	ldw	r3,-72(fp)
 10051dc:	e0bff917 	ldw	r2,-28(fp)
 10051e0:	1880030e 	bge	r3,r2,10051f0 <usb20sr_with_dma_write+0x3d4>
 10051e4:	e0bfee17 	ldw	r2,-72(fp)
 10051e8:	e0bfef15 	stw	r2,-68(fp)
 10051ec:	00000206 	br	10051f8 <usb20sr_with_dma_write+0x3dc>
 10051f0:	e0bff917 	ldw	r2,-28(fp)
 10051f4:	e0bfef15 	stw	r2,-68(fp)
 10051f8:	e0bfef17 	ldw	r2,-68(fp)
 10051fc:	100b883a 	mov	r5,r2
 1005200:	e13feb17 	ldw	r4,-84(fp)
 1005204:	100743c0 	call	100743c <alt_dcache_flush>
 1005208:	e0bff017 	ldw	r2,-64(fp)
 100520c:	10800037 	ldwio	r2,0(r2)
 1005210:	1080008c 	andi	r2,r2,2
 1005214:	1004c03a 	cmpne	r2,r2,zero
 1005218:	103ffb1e 	bne	r2,zero,1005208 <__alt_data_end+0xfffe42b0>
 100521c:	e0bff017 	ldw	r2,-64(fp)
 1005220:	10800604 	addi	r2,r2,24
 1005224:	10000035 	stwio	zero,0(r2)
 1005228:	e0bff017 	ldw	r2,-64(fp)
 100522c:	10800104 	addi	r2,r2,4
 1005230:	e0ffeb17 	ldw	r3,-84(fp)
 1005234:	10c00035 	stwio	r3,0(r2)
 1005238:	e0bff017 	ldw	r2,-64(fp)
 100523c:	10800204 	addi	r2,r2,8
 1005240:	e0fff717 	ldw	r3,-36(fp)
 1005244:	10c00035 	stwio	r3,0(r2)
 1005248:	e0bff017 	ldw	r2,-64(fp)
 100524c:	10800304 	addi	r2,r2,12
 1005250:	e0ffef17 	ldw	r3,-68(fp)
 1005254:	10c00035 	stwio	r3,0(r2)
 1005258:	e0bfef17 	ldw	r2,-68(fp)
 100525c:	108000cc 	andi	r2,r2,3
 1005260:	1004c03a 	cmpne	r2,r2,zero
 1005264:	1000031e 	bne	r2,zero,1005274 <usb20sr_with_dma_write+0x458>
 1005268:	e0bfed17 	ldw	r2,-76(fp)
 100526c:	1005003a 	cmpeq	r2,r2,zero
 1005270:	1000061e 	bne	r2,zero,100528c <usb20sr_with_dma_write+0x470>
 1005274:	e0bff017 	ldw	r2,-64(fp)
 1005278:	10800604 	addi	r2,r2,24
 100527c:	1007883a 	mov	r3,r2
 1005280:	00802244 	movi	r2,137
 1005284:	18800035 	stwio	r2,0(r3)
 1005288:	00000506 	br	10052a0 <usb20sr_with_dma_write+0x484>
 100528c:	e0bff017 	ldw	r2,-64(fp)
 1005290:	10800604 	addi	r2,r2,24
 1005294:	1007883a 	mov	r3,r2
 1005298:	00802304 	movi	r2,140
 100529c:	18800035 	stwio	r2,0(r3)
 10052a0:	e0bff017 	ldw	r2,-64(fp)
 10052a4:	10800037 	ldwio	r2,0(r2)
 10052a8:	1080008c 	andi	r2,r2,2
 10052ac:	1004c03a 	cmpne	r2,r2,zero
 10052b0:	103ffb1e 	bne	r2,zero,10052a0 <__alt_data_end+0xfffe4348>
 10052b4:	e0bff017 	ldw	r2,-64(fp)
 10052b8:	10800604 	addi	r2,r2,24
 10052bc:	10000035 	stwio	zero,0(r2)
 10052c0:	e0bffb17 	ldw	r2,-20(fp)
 10052c4:	10803317 	ldw	r2,204(r2)
 10052c8:	1004c03a 	cmpne	r2,r2,zero
 10052cc:	10000c1e 	bne	r2,zero,1005300 <usb20sr_with_dma_write+0x4e4>
 10052d0:	e0bff217 	ldw	r2,-56(fp)
 10052d4:	1085883a 	add	r2,r2,r2
 10052d8:	1085883a 	add	r2,r2,r2
 10052dc:	1007883a 	mov	r3,r2
 10052e0:	e0bff117 	ldw	r2,-60(fp)
 10052e4:	1889883a 	add	r4,r3,r2
 10052e8:	e0bfef17 	ldw	r2,-68(fp)
 10052ec:	1006947a 	slli	r3,r2,17
 10052f0:	e0bff517 	ldw	r2,-44(fp)
 10052f4:	1886b03a 	or	r3,r3,r2
 10052f8:	2005883a 	mov	r2,r4
 10052fc:	10c00035 	stwio	r3,0(r2)
 1005300:	00800044 	movi	r2,1
 1005304:	e0bffa15 	stw	r2,-24(fp)
 1005308:	e0ffee17 	ldw	r3,-72(fp)
 100530c:	e0bfef17 	ldw	r2,-68(fp)
 1005310:	1885c83a 	sub	r2,r3,r2
 1005314:	e0bfee15 	stw	r2,-72(fp)
 1005318:	e0bfef17 	ldw	r2,-68(fp)
 100531c:	1007883a 	mov	r3,r2
 1005320:	e0bfeb17 	ldw	r2,-84(fp)
 1005324:	10c5883a 	add	r2,r2,r3
 1005328:	e0bfeb15 	stw	r2,-84(fp)
 100532c:	e0bfee17 	ldw	r2,-72(fp)
 1005330:	10800050 	cmplti	r2,r2,1
 1005334:	1000601e 	bne	r2,zero,10054b8 <usb20sr_with_dma_write+0x69c>
 1005338:	e0bffa17 	ldw	r2,-24(fp)
 100533c:	1005003a 	cmpeq	r2,r2,zero
 1005340:	10005d1e 	bne	r2,zero,10054b8 <usb20sr_with_dma_write+0x69c>
 1005344:	e0bff317 	ldw	r2,-52(fp)
 1005348:	1085883a 	add	r2,r2,r2
 100534c:	1085883a 	add	r2,r2,r2
 1005350:	1007883a 	mov	r3,r2
 1005354:	e0bff117 	ldw	r2,-60(fp)
 1005358:	1885883a 	add	r2,r3,r2
 100535c:	10800037 	ldwio	r2,0(r2)
 1005360:	1004403a 	cmpge	r2,r2,zero
 1005364:	1000541e 	bne	r2,zero,10054b8 <usb20sr_with_dma_write+0x69c>
 1005368:	e0ffee17 	ldw	r3,-72(fp)
 100536c:	e0bff917 	ldw	r2,-28(fp)
 1005370:	1880030e 	bge	r3,r2,1005380 <usb20sr_with_dma_write+0x564>
 1005374:	e0bfee17 	ldw	r2,-72(fp)
 1005378:	e0bfef15 	stw	r2,-68(fp)
 100537c:	00000206 	br	1005388 <usb20sr_with_dma_write+0x56c>
 1005380:	e0bff917 	ldw	r2,-28(fp)
 1005384:	e0bfef15 	stw	r2,-68(fp)
 1005388:	e0bfef17 	ldw	r2,-68(fp)
 100538c:	100b883a 	mov	r5,r2
 1005390:	e13feb17 	ldw	r4,-84(fp)
 1005394:	100743c0 	call	100743c <alt_dcache_flush>
 1005398:	e0bff017 	ldw	r2,-64(fp)
 100539c:	10800037 	ldwio	r2,0(r2)
 10053a0:	1080008c 	andi	r2,r2,2
 10053a4:	1004c03a 	cmpne	r2,r2,zero
 10053a8:	103ffb1e 	bne	r2,zero,1005398 <__alt_data_end+0xfffe4440>
 10053ac:	e0bff017 	ldw	r2,-64(fp)
 10053b0:	10800604 	addi	r2,r2,24
 10053b4:	10000035 	stwio	zero,0(r2)
 10053b8:	e0bff017 	ldw	r2,-64(fp)
 10053bc:	10800104 	addi	r2,r2,4
 10053c0:	e0ffeb17 	ldw	r3,-84(fp)
 10053c4:	10c00035 	stwio	r3,0(r2)
 10053c8:	e0bff017 	ldw	r2,-64(fp)
 10053cc:	10800204 	addi	r2,r2,8
 10053d0:	e0fff817 	ldw	r3,-32(fp)
 10053d4:	10c00035 	stwio	r3,0(r2)
 10053d8:	e0bff017 	ldw	r2,-64(fp)
 10053dc:	10800304 	addi	r2,r2,12
 10053e0:	e0ffef17 	ldw	r3,-68(fp)
 10053e4:	10c00035 	stwio	r3,0(r2)
 10053e8:	e0bfef17 	ldw	r2,-68(fp)
 10053ec:	108000cc 	andi	r2,r2,3
 10053f0:	1004c03a 	cmpne	r2,r2,zero
 10053f4:	1000031e 	bne	r2,zero,1005404 <usb20sr_with_dma_write+0x5e8>
 10053f8:	e0bfed17 	ldw	r2,-76(fp)
 10053fc:	1005003a 	cmpeq	r2,r2,zero
 1005400:	1000061e 	bne	r2,zero,100541c <usb20sr_with_dma_write+0x600>
 1005404:	e0bff017 	ldw	r2,-64(fp)
 1005408:	10800604 	addi	r2,r2,24
 100540c:	1007883a 	mov	r3,r2
 1005410:	00802244 	movi	r2,137
 1005414:	18800035 	stwio	r2,0(r3)
 1005418:	00000506 	br	1005430 <usb20sr_with_dma_write+0x614>
 100541c:	e0bff017 	ldw	r2,-64(fp)
 1005420:	10800604 	addi	r2,r2,24
 1005424:	1007883a 	mov	r3,r2
 1005428:	00802304 	movi	r2,140
 100542c:	18800035 	stwio	r2,0(r3)
 1005430:	e0bff017 	ldw	r2,-64(fp)
 1005434:	10800037 	ldwio	r2,0(r2)
 1005438:	1080008c 	andi	r2,r2,2
 100543c:	1004c03a 	cmpne	r2,r2,zero
 1005440:	103ffb1e 	bne	r2,zero,1005430 <__alt_data_end+0xfffe44d8>
 1005444:	e0bff017 	ldw	r2,-64(fp)
 1005448:	10800604 	addi	r2,r2,24
 100544c:	10000035 	stwio	zero,0(r2)
 1005450:	e0bffb17 	ldw	r2,-20(fp)
 1005454:	10803317 	ldw	r2,204(r2)
 1005458:	1004c03a 	cmpne	r2,r2,zero
 100545c:	10000c1e 	bne	r2,zero,1005490 <usb20sr_with_dma_write+0x674>
 1005460:	e0bff317 	ldw	r2,-52(fp)
 1005464:	1085883a 	add	r2,r2,r2
 1005468:	1085883a 	add	r2,r2,r2
 100546c:	1007883a 	mov	r3,r2
 1005470:	e0bff117 	ldw	r2,-60(fp)
 1005474:	1889883a 	add	r4,r3,r2
 1005478:	e0bfef17 	ldw	r2,-68(fp)
 100547c:	1006947a 	slli	r3,r2,17
 1005480:	e0bff617 	ldw	r2,-40(fp)
 1005484:	1886b03a 	or	r3,r3,r2
 1005488:	2005883a 	mov	r2,r4
 100548c:	10c00035 	stwio	r3,0(r2)
 1005490:	e0ffee17 	ldw	r3,-72(fp)
 1005494:	e0bfef17 	ldw	r2,-68(fp)
 1005498:	1885c83a 	sub	r2,r3,r2
 100549c:	e0bfee15 	stw	r2,-72(fp)
 10054a0:	e03ffa15 	stw	zero,-24(fp)
 10054a4:	e0bfef17 	ldw	r2,-68(fp)
 10054a8:	1007883a 	mov	r3,r2
 10054ac:	e0bfeb17 	ldw	r2,-84(fp)
 10054b0:	10c5883a 	add	r2,r2,r3
 10054b4:	e0bfeb15 	stw	r2,-84(fp)
 10054b8:	e0bffb17 	ldw	r2,-20(fp)
 10054bc:	10803317 	ldw	r2,204(r2)
 10054c0:	1005003a 	cmpeq	r2,r2,zero
 10054c4:	1000061e 	bne	r2,zero,10054e0 <usb20sr_with_dma_write+0x6c4>
 10054c8:	e0fffb17 	ldw	r3,-20(fp)
 10054cc:	00800084 	movi	r2,2
 10054d0:	18803315 	stw	r2,204(r3)
 10054d4:	00bfffc4 	movi	r2,-1
 10054d8:	e0bfff15 	stw	r2,-4(fp)
 10054dc:	00001306 	br	100552c <usb20sr_with_dma_write+0x710>
 10054e0:	e0bfee17 	ldw	r2,-72(fp)
 10054e4:	10800048 	cmpgei	r2,r2,1
 10054e8:	103f2f1e 	bne	r2,zero,10051a8 <__alt_data_end+0xfffe4250>
 10054ec:	e0fffc03 	ldbu	r3,-16(fp)
 10054f0:	e0bffa17 	ldw	r2,-24(fp)
 10054f4:	100b883a 	mov	r5,r2
 10054f8:	e13ffb17 	ldw	r4,-20(fp)
 10054fc:	18c5883a 	add	r2,r3,r3
 1005500:	1085883a 	add	r2,r2,r2
 1005504:	1105883a 	add	r2,r2,r4
 1005508:	1080e904 	addi	r2,r2,932
 100550c:	11400015 	stw	r5,0(r2)
 1005510:	e0fffb17 	ldw	r3,-20(fp)
 1005514:	00800084 	movi	r2,2
 1005518:	18803315 	stw	r2,204(r3)
 100551c:	e0ffeb17 	ldw	r3,-84(fp)
 1005520:	e0bffd17 	ldw	r2,-12(fp)
 1005524:	1887c83a 	sub	r3,r3,r2
 1005528:	e0ffff15 	stw	r3,-4(fp)
 100552c:	e0bfff17 	ldw	r2,-4(fp)
 1005530:	e037883a 	mov	sp,fp
 1005534:	dfc00117 	ldw	ra,4(sp)
 1005538:	df000017 	ldw	fp,0(sp)
 100553c:	dec00204 	addi	sp,sp,8
 1005540:	f800283a 	ret

01005544 <usb20sr_without_dma_write>:
 1005544:	deffec04 	addi	sp,sp,-80
 1005548:	dfc01315 	stw	ra,76(sp)
 100554c:	df001215 	stw	fp,72(sp)
 1005550:	df001204 	addi	fp,sp,72
 1005554:	e13ffb15 	stw	r4,-20(fp)
 1005558:	e1bffd15 	stw	r6,-12(fp)
 100555c:	e1fffe15 	stw	r7,-8(fp)
 1005560:	e17ffc05 	stb	r5,-16(fp)
 1005564:	e0bffb17 	ldw	r2,-20(fp)
 1005568:	10800e17 	ldw	r2,56(r2)
 100556c:	1004c03a 	cmpne	r2,r2,zero
 1005570:	103ffc1e 	bne	r2,zero,1005564 <__alt_data_end+0xfffe460c>
 1005574:	e0bffb17 	ldw	r2,-20(fp)
 1005578:	10003315 	stw	zero,204(r2)
 100557c:	e0bffd17 	ldw	r2,-12(fp)
 1005580:	e0bfee15 	stw	r2,-72(fp)
 1005584:	e0bffe17 	ldw	r2,-8(fp)
 1005588:	e0bfef15 	stw	r2,-68(fp)
 100558c:	e03ff015 	stw	zero,-64(fp)
 1005590:	e0bffb17 	ldw	r2,-20(fp)
 1005594:	10801517 	ldw	r2,84(r2)
 1005598:	e0bff115 	stw	r2,-60(fp)
 100559c:	e0fffc03 	ldbu	r3,-16(fp)
 10055a0:	e0bffb17 	ldw	r2,-20(fp)
 10055a4:	1885883a 	add	r2,r3,r2
 10055a8:	1080e104 	addi	r2,r2,900
 10055ac:	10800003 	ldbu	r2,0(r2)
 10055b0:	10803fcc 	andi	r2,r2,255
 10055b4:	e0bff215 	stw	r2,-56(fp)
 10055b8:	e0fffc03 	ldbu	r3,-16(fp)
 10055bc:	e0bffb17 	ldw	r2,-20(fp)
 10055c0:	1885883a 	add	r2,r3,r2
 10055c4:	1080e504 	addi	r2,r2,916
 10055c8:	10800003 	ldbu	r2,0(r2)
 10055cc:	10803fcc 	andi	r2,r2,255
 10055d0:	e0bff315 	stw	r2,-52(fp)
 10055d4:	e0bffb17 	ldw	r2,-20(fp)
 10055d8:	10801617 	ldw	r2,88(r2)
 10055dc:	e0bff415 	stw	r2,-48(fp)
 10055e0:	e0bffc03 	ldbu	r2,-16(fp)
 10055e4:	e0fffb17 	ldw	r3,-20(fp)
 10055e8:	1085883a 	add	r2,r2,r2
 10055ec:	1085883a 	add	r2,r2,r2
 10055f0:	10c5883a 	add	r2,r2,r3
 10055f4:	1080c104 	addi	r2,r2,772
 10055f8:	10800017 	ldw	r2,0(r2)
 10055fc:	e0bff515 	stw	r2,-44(fp)
 1005600:	e0bffc03 	ldbu	r2,-16(fp)
 1005604:	e0fffb17 	ldw	r3,-20(fp)
 1005608:	1085883a 	add	r2,r2,r2
 100560c:	1085883a 	add	r2,r2,r2
 1005610:	10c5883a 	add	r2,r2,r3
 1005614:	1080d104 	addi	r2,r2,836
 1005618:	10800017 	ldw	r2,0(r2)
 100561c:	e0bff615 	stw	r2,-40(fp)
 1005620:	e0fff417 	ldw	r3,-48(fp)
 1005624:	e0bff517 	ldw	r2,-44(fp)
 1005628:	1885883a 	add	r2,r3,r2
 100562c:	e0bff715 	stw	r2,-36(fp)
 1005630:	e0fff417 	ldw	r3,-48(fp)
 1005634:	e0bff617 	ldw	r2,-40(fp)
 1005638:	1885883a 	add	r2,r3,r2
 100563c:	e0bff815 	stw	r2,-32(fp)
 1005640:	e0bffc03 	ldbu	r2,-16(fp)
 1005644:	e0fffb17 	ldw	r3,-20(fp)
 1005648:	1085883a 	add	r2,r2,r2
 100564c:	1085883a 	add	r2,r2,r2
 1005650:	10c5883a 	add	r2,r2,r3
 1005654:	10809104 	addi	r2,r2,580
 1005658:	10800017 	ldw	r2,0(r2)
 100565c:	e0bff915 	stw	r2,-28(fp)
 1005660:	e0bffc03 	ldbu	r2,-16(fp)
 1005664:	e0fffb17 	ldw	r3,-20(fp)
 1005668:	1085883a 	add	r2,r2,r2
 100566c:	1085883a 	add	r2,r2,r2
 1005670:	10c5883a 	add	r2,r2,r3
 1005674:	1080e904 	addi	r2,r2,932
 1005678:	10800017 	ldw	r2,0(r2)
 100567c:	e0bffa15 	stw	r2,-24(fp)
 1005680:	00005506 	br	10057d8 <usb20sr_without_dma_write+0x294>
 1005684:	e0bffa17 	ldw	r2,-24(fp)
 1005688:	1004c03a 	cmpne	r2,r2,zero
 100568c:	1000231e 	bne	r2,zero,100571c <usb20sr_without_dma_write+0x1d8>
 1005690:	e0bff217 	ldw	r2,-56(fp)
 1005694:	1085883a 	add	r2,r2,r2
 1005698:	1085883a 	add	r2,r2,r2
 100569c:	1007883a 	mov	r3,r2
 10056a0:	e0bff117 	ldw	r2,-60(fp)
 10056a4:	1885883a 	add	r2,r3,r2
 10056a8:	10800037 	ldwio	r2,0(r2)
 10056ac:	1004403a 	cmpge	r2,r2,zero
 10056b0:	10001a1e 	bne	r2,zero,100571c <usb20sr_without_dma_write+0x1d8>
 10056b4:	e0bffb17 	ldw	r2,-20(fp)
 10056b8:	10803317 	ldw	r2,204(r2)
 10056bc:	1004c03a 	cmpne	r2,r2,zero
 10056c0:	10000c1e 	bne	r2,zero,10056f4 <usb20sr_without_dma_write+0x1b0>
 10056c4:	e0bff217 	ldw	r2,-56(fp)
 10056c8:	1085883a 	add	r2,r2,r2
 10056cc:	1085883a 	add	r2,r2,r2
 10056d0:	1007883a 	mov	r3,r2
 10056d4:	e0bff117 	ldw	r2,-60(fp)
 10056d8:	1889883a 	add	r4,r3,r2
 10056dc:	e0bfef17 	ldw	r2,-68(fp)
 10056e0:	1006947a 	slli	r3,r2,17
 10056e4:	e0bff517 	ldw	r2,-44(fp)
 10056e8:	1886b03a 	or	r3,r3,r2
 10056ec:	2005883a 	mov	r2,r4
 10056f0:	10c00035 	stwio	r3,0(r2)
 10056f4:	e0bffc03 	ldbu	r2,-16(fp)
 10056f8:	e0fffb17 	ldw	r3,-20(fp)
 10056fc:	1085883a 	add	r2,r2,r2
 1005700:	1085883a 	add	r2,r2,r2
 1005704:	10c5883a 	add	r2,r2,r3
 1005708:	10c0e904 	addi	r3,r2,932
 100570c:	00800044 	movi	r2,1
 1005710:	18800015 	stw	r2,0(r3)
 1005714:	e03fff15 	stw	zero,-4(fp)
 1005718:	0000d006 	br	1005a5c <usb20sr_without_dma_write+0x518>
 100571c:	e0bffa17 	ldw	r2,-24(fp)
 1005720:	1005003a 	cmpeq	r2,r2,zero
 1005724:	1000221e 	bne	r2,zero,10057b0 <usb20sr_without_dma_write+0x26c>
 1005728:	e0bff317 	ldw	r2,-52(fp)
 100572c:	1085883a 	add	r2,r2,r2
 1005730:	1085883a 	add	r2,r2,r2
 1005734:	1007883a 	mov	r3,r2
 1005738:	e0bff117 	ldw	r2,-60(fp)
 100573c:	1885883a 	add	r2,r3,r2
 1005740:	10800037 	ldwio	r2,0(r2)
 1005744:	1004403a 	cmpge	r2,r2,zero
 1005748:	1000191e 	bne	r2,zero,10057b0 <usb20sr_without_dma_write+0x26c>
 100574c:	e0bffb17 	ldw	r2,-20(fp)
 1005750:	10803317 	ldw	r2,204(r2)
 1005754:	1004c03a 	cmpne	r2,r2,zero
 1005758:	10000c1e 	bne	r2,zero,100578c <usb20sr_without_dma_write+0x248>
 100575c:	e0bff217 	ldw	r2,-56(fp)
 1005760:	1085883a 	add	r2,r2,r2
 1005764:	1085883a 	add	r2,r2,r2
 1005768:	1007883a 	mov	r3,r2
 100576c:	e0bff117 	ldw	r2,-60(fp)
 1005770:	1889883a 	add	r4,r3,r2
 1005774:	e0bfef17 	ldw	r2,-68(fp)
 1005778:	1006947a 	slli	r3,r2,17
 100577c:	e0bff617 	ldw	r2,-40(fp)
 1005780:	1886b03a 	or	r3,r3,r2
 1005784:	2005883a 	mov	r2,r4
 1005788:	10c00035 	stwio	r3,0(r2)
 100578c:	e0bffc03 	ldbu	r2,-16(fp)
 1005790:	e0fffb17 	ldw	r3,-20(fp)
 1005794:	1085883a 	add	r2,r2,r2
 1005798:	1085883a 	add	r2,r2,r2
 100579c:	10c5883a 	add	r2,r2,r3
 10057a0:	1080e904 	addi	r2,r2,932
 10057a4:	10000015 	stw	zero,0(r2)
 10057a8:	e03fff15 	stw	zero,-4(fp)
 10057ac:	0000ab06 	br	1005a5c <usb20sr_without_dma_write+0x518>
 10057b0:	e0bffb17 	ldw	r2,-20(fp)
 10057b4:	10803317 	ldw	r2,204(r2)
 10057b8:	1005003a 	cmpeq	r2,r2,zero
 10057bc:	1000061e 	bne	r2,zero,10057d8 <usb20sr_without_dma_write+0x294>
 10057c0:	e0fffb17 	ldw	r3,-20(fp)
 10057c4:	00800084 	movi	r2,2
 10057c8:	18803315 	stw	r2,204(r3)
 10057cc:	00bfffc4 	movi	r2,-1
 10057d0:	e0bfff15 	stw	r2,-4(fp)
 10057d4:	0000a106 	br	1005a5c <usb20sr_without_dma_write+0x518>
 10057d8:	e0bfef17 	ldw	r2,-68(fp)
 10057dc:	1005003a 	cmpeq	r2,r2,zero
 10057e0:	103fa81e 	bne	r2,zero,1005684 <__alt_data_end+0xfffe472c>
 10057e4:	00008a06 	br	1005a10 <usb20sr_without_dma_write+0x4cc>
 10057e8:	e0bffa17 	ldw	r2,-24(fp)
 10057ec:	1004c03a 	cmpne	r2,r2,zero
 10057f0:	10003c1e 	bne	r2,zero,10058e4 <usb20sr_without_dma_write+0x3a0>
 10057f4:	e0bff217 	ldw	r2,-56(fp)
 10057f8:	1085883a 	add	r2,r2,r2
 10057fc:	1085883a 	add	r2,r2,r2
 1005800:	1007883a 	mov	r3,r2
 1005804:	e0bff117 	ldw	r2,-60(fp)
 1005808:	1885883a 	add	r2,r3,r2
 100580c:	10800037 	ldwio	r2,0(r2)
 1005810:	1004403a 	cmpge	r2,r2,zero
 1005814:	1000331e 	bne	r2,zero,10058e4 <usb20sr_without_dma_write+0x3a0>
 1005818:	e0ffef17 	ldw	r3,-68(fp)
 100581c:	e0bff917 	ldw	r2,-28(fp)
 1005820:	1880030e 	bge	r3,r2,1005830 <usb20sr_without_dma_write+0x2ec>
 1005824:	e0bfef17 	ldw	r2,-68(fp)
 1005828:	e0bff015 	stw	r2,-64(fp)
 100582c:	00000206 	br	1005838 <usb20sr_without_dma_write+0x2f4>
 1005830:	e0bff917 	ldw	r2,-28(fp)
 1005834:	e0bff015 	stw	r2,-64(fp)
 1005838:	e0bff717 	ldw	r2,-36(fp)
 100583c:	1009883a 	mov	r4,r2
 1005840:	e17ffe17 	ldw	r5,-8(fp)
 1005844:	100743c0 	call	100743c <alt_dcache_flush>
 1005848:	e13ff117 	ldw	r4,-60(fp)
 100584c:	e0bff717 	ldw	r2,-36(fp)
 1005850:	10a00034 	orhi	r2,r2,32768
 1005854:	100b883a 	mov	r5,r2
 1005858:	e1bfee17 	ldw	r6,-72(fp)
 100585c:	e1fff017 	ldw	r7,-64(fp)
 1005860:	1005a740 	call	1005a74 <slsmemcpy>
 1005864:	e0bff717 	ldw	r2,-36(fp)
 1005868:	1009883a 	mov	r4,r2
 100586c:	e0bff017 	ldw	r2,-64(fp)
 1005870:	100b883a 	mov	r5,r2
 1005874:	100743c0 	call	100743c <alt_dcache_flush>
 1005878:	e0bffb17 	ldw	r2,-20(fp)
 100587c:	10803317 	ldw	r2,204(r2)
 1005880:	1004c03a 	cmpne	r2,r2,zero
 1005884:	10000c1e 	bne	r2,zero,10058b8 <usb20sr_without_dma_write+0x374>
 1005888:	e0bff217 	ldw	r2,-56(fp)
 100588c:	1085883a 	add	r2,r2,r2
 1005890:	1085883a 	add	r2,r2,r2
 1005894:	1007883a 	mov	r3,r2
 1005898:	e0bff117 	ldw	r2,-60(fp)
 100589c:	1889883a 	add	r4,r3,r2
 10058a0:	e0bff017 	ldw	r2,-64(fp)
 10058a4:	1006947a 	slli	r3,r2,17
 10058a8:	e0bff517 	ldw	r2,-44(fp)
 10058ac:	1886b03a 	or	r3,r3,r2
 10058b0:	2005883a 	mov	r2,r4
 10058b4:	10c00035 	stwio	r3,0(r2)
 10058b8:	00800044 	movi	r2,1
 10058bc:	e0bffa15 	stw	r2,-24(fp)
 10058c0:	e0ffef17 	ldw	r3,-68(fp)
 10058c4:	e0bff017 	ldw	r2,-64(fp)
 10058c8:	1885c83a 	sub	r2,r3,r2
 10058cc:	e0bfef15 	stw	r2,-68(fp)
 10058d0:	e0bff017 	ldw	r2,-64(fp)
 10058d4:	1007883a 	mov	r3,r2
 10058d8:	e0bfee17 	ldw	r2,-72(fp)
 10058dc:	10c5883a 	add	r2,r2,r3
 10058e0:	e0bfee15 	stw	r2,-72(fp)
 10058e4:	e0bfef17 	ldw	r2,-68(fp)
 10058e8:	10800050 	cmplti	r2,r2,1
 10058ec:	10003e1e 	bne	r2,zero,10059e8 <usb20sr_without_dma_write+0x4a4>
 10058f0:	e0bffa17 	ldw	r2,-24(fp)
 10058f4:	1005003a 	cmpeq	r2,r2,zero
 10058f8:	10003b1e 	bne	r2,zero,10059e8 <usb20sr_without_dma_write+0x4a4>
 10058fc:	e0bff317 	ldw	r2,-52(fp)
 1005900:	1085883a 	add	r2,r2,r2
 1005904:	1085883a 	add	r2,r2,r2
 1005908:	1007883a 	mov	r3,r2
 100590c:	e0bff117 	ldw	r2,-60(fp)
 1005910:	1885883a 	add	r2,r3,r2
 1005914:	10800037 	ldwio	r2,0(r2)
 1005918:	1004403a 	cmpge	r2,r2,zero
 100591c:	1000321e 	bne	r2,zero,10059e8 <usb20sr_without_dma_write+0x4a4>
 1005920:	e0ffef17 	ldw	r3,-68(fp)
 1005924:	e0bff917 	ldw	r2,-28(fp)
 1005928:	1880030e 	bge	r3,r2,1005938 <usb20sr_without_dma_write+0x3f4>
 100592c:	e0bfef17 	ldw	r2,-68(fp)
 1005930:	e0bff015 	stw	r2,-64(fp)
 1005934:	00000206 	br	1005940 <usb20sr_without_dma_write+0x3fc>
 1005938:	e0bff917 	ldw	r2,-28(fp)
 100593c:	e0bff015 	stw	r2,-64(fp)
 1005940:	e0bff817 	ldw	r2,-32(fp)
 1005944:	1009883a 	mov	r4,r2
 1005948:	e17ffe17 	ldw	r5,-8(fp)
 100594c:	100743c0 	call	100743c <alt_dcache_flush>
 1005950:	e13ff117 	ldw	r4,-60(fp)
 1005954:	e0bff817 	ldw	r2,-32(fp)
 1005958:	10a00034 	orhi	r2,r2,32768
 100595c:	100b883a 	mov	r5,r2
 1005960:	e1bfee17 	ldw	r6,-72(fp)
 1005964:	e1fff017 	ldw	r7,-64(fp)
 1005968:	1005a740 	call	1005a74 <slsmemcpy>
 100596c:	e0bff817 	ldw	r2,-32(fp)
 1005970:	1009883a 	mov	r4,r2
 1005974:	e0bff017 	ldw	r2,-64(fp)
 1005978:	100b883a 	mov	r5,r2
 100597c:	100743c0 	call	100743c <alt_dcache_flush>
 1005980:	e0bffb17 	ldw	r2,-20(fp)
 1005984:	10803317 	ldw	r2,204(r2)
 1005988:	1004c03a 	cmpne	r2,r2,zero
 100598c:	10000c1e 	bne	r2,zero,10059c0 <usb20sr_without_dma_write+0x47c>
 1005990:	e0bff317 	ldw	r2,-52(fp)
 1005994:	1085883a 	add	r2,r2,r2
 1005998:	1085883a 	add	r2,r2,r2
 100599c:	1007883a 	mov	r3,r2
 10059a0:	e0bff117 	ldw	r2,-60(fp)
 10059a4:	1889883a 	add	r4,r3,r2
 10059a8:	e0bff017 	ldw	r2,-64(fp)
 10059ac:	1006947a 	slli	r3,r2,17
 10059b0:	e0bff617 	ldw	r2,-40(fp)
 10059b4:	1886b03a 	or	r3,r3,r2
 10059b8:	2005883a 	mov	r2,r4
 10059bc:	10c00035 	stwio	r3,0(r2)
 10059c0:	e03ffa15 	stw	zero,-24(fp)
 10059c4:	e0bff017 	ldw	r2,-64(fp)
 10059c8:	1007883a 	mov	r3,r2
 10059cc:	e0bfee17 	ldw	r2,-72(fp)
 10059d0:	10c5883a 	add	r2,r2,r3
 10059d4:	e0bfee15 	stw	r2,-72(fp)
 10059d8:	e0ffef17 	ldw	r3,-68(fp)
 10059dc:	e0bff017 	ldw	r2,-64(fp)
 10059e0:	1885c83a 	sub	r2,r3,r2
 10059e4:	e0bfef15 	stw	r2,-68(fp)
 10059e8:	e0bffb17 	ldw	r2,-20(fp)
 10059ec:	10803317 	ldw	r2,204(r2)
 10059f0:	1005003a 	cmpeq	r2,r2,zero
 10059f4:	1000061e 	bne	r2,zero,1005a10 <usb20sr_without_dma_write+0x4cc>
 10059f8:	e0fffb17 	ldw	r3,-20(fp)
 10059fc:	00800084 	movi	r2,2
 1005a00:	18803315 	stw	r2,204(r3)
 1005a04:	00bfffc4 	movi	r2,-1
 1005a08:	e0bfff15 	stw	r2,-4(fp)
 1005a0c:	00001306 	br	1005a5c <usb20sr_without_dma_write+0x518>
 1005a10:	e0bfef17 	ldw	r2,-68(fp)
 1005a14:	10800048 	cmpgei	r2,r2,1
 1005a18:	103f731e 	bne	r2,zero,10057e8 <__alt_data_end+0xfffe4890>
 1005a1c:	e0fffc03 	ldbu	r3,-16(fp)
 1005a20:	e0bffa17 	ldw	r2,-24(fp)
 1005a24:	100b883a 	mov	r5,r2
 1005a28:	e13ffb17 	ldw	r4,-20(fp)
 1005a2c:	18c5883a 	add	r2,r3,r3
 1005a30:	1085883a 	add	r2,r2,r2
 1005a34:	1105883a 	add	r2,r2,r4
 1005a38:	1080e904 	addi	r2,r2,932
 1005a3c:	11400015 	stw	r5,0(r2)
 1005a40:	e0fffb17 	ldw	r3,-20(fp)
 1005a44:	00800084 	movi	r2,2
 1005a48:	18803315 	stw	r2,204(r3)
 1005a4c:	e0ffee17 	ldw	r3,-72(fp)
 1005a50:	e0bffd17 	ldw	r2,-12(fp)
 1005a54:	1887c83a 	sub	r3,r3,r2
 1005a58:	e0ffff15 	stw	r3,-4(fp)
 1005a5c:	e0bfff17 	ldw	r2,-4(fp)
 1005a60:	e037883a 	mov	sp,fp
 1005a64:	dfc00117 	ldw	ra,4(sp)
 1005a68:	df000017 	ldw	fp,0(sp)
 1005a6c:	dec00204 	addi	sp,sp,8
 1005a70:	f800283a 	ret

01005a74 <slsmemcpy>:
 1005a74:	defff204 	addi	sp,sp,-56
 1005a78:	df000d15 	stw	fp,52(sp)
 1005a7c:	df000d04 	addi	fp,sp,52
 1005a80:	e13ffb15 	stw	r4,-20(fp)
 1005a84:	e17ffc15 	stw	r5,-16(fp)
 1005a88:	e1bffd15 	stw	r6,-12(fp)
 1005a8c:	e1fffe15 	stw	r7,-8(fp)
 1005a90:	e0bffc17 	ldw	r2,-16(fp)
 1005a94:	e0bff615 	stw	r2,-40(fp)
 1005a98:	e0bffd17 	ldw	r2,-12(fp)
 1005a9c:	e0bff515 	stw	r2,-44(fp)
 1005aa0:	e03ff715 	stw	zero,-36(fp)
 1005aa4:	e0bffe17 	ldw	r2,-8(fp)
 1005aa8:	e0bfff15 	stw	r2,-4(fp)
 1005aac:	e0ffff17 	ldw	r3,-4(fp)
 1005ab0:	1804403a 	cmpge	r2,r3,zero
 1005ab4:	1000031e 	bne	r2,zero,1005ac4 <slsmemcpy+0x50>
 1005ab8:	e0bfff17 	ldw	r2,-4(fp)
 1005abc:	108000c4 	addi	r2,r2,3
 1005ac0:	e0bfff15 	stw	r2,-4(fp)
 1005ac4:	e0ffff17 	ldw	r3,-4(fp)
 1005ac8:	1805d0ba 	srai	r2,r3,2
 1005acc:	e0bff815 	stw	r2,-32(fp)
 1005ad0:	e0bff617 	ldw	r2,-40(fp)
 1005ad4:	e0bff915 	stw	r2,-28(fp)
 1005ad8:	e0bff517 	ldw	r2,-44(fp)
 1005adc:	e0bffa15 	stw	r2,-24(fp)
 1005ae0:	e0bff917 	ldw	r2,-28(fp)
 1005ae4:	108000cc 	andi	r2,r2,3
 1005ae8:	1004c03a 	cmpne	r2,r2,zero
 1005aec:	1000161e 	bne	r2,zero,1005b48 <slsmemcpy+0xd4>
 1005af0:	e0bffa17 	ldw	r2,-24(fp)
 1005af4:	108000cc 	andi	r2,r2,3
 1005af8:	1004c03a 	cmpne	r2,r2,zero
 1005afc:	1000121e 	bne	r2,zero,1005b48 <slsmemcpy+0xd4>
 1005b00:	e03ff715 	stw	zero,-36(fp)
 1005b04:	00000d06 	br	1005b3c <slsmemcpy+0xc8>
 1005b08:	e0bff517 	ldw	r2,-44(fp)
 1005b0c:	10c00017 	ldw	r3,0(r2)
 1005b10:	e0bff617 	ldw	r2,-40(fp)
 1005b14:	10c00015 	stw	r3,0(r2)
 1005b18:	e0bff617 	ldw	r2,-40(fp)
 1005b1c:	10800104 	addi	r2,r2,4
 1005b20:	e0bff615 	stw	r2,-40(fp)
 1005b24:	e0bff517 	ldw	r2,-44(fp)
 1005b28:	10800104 	addi	r2,r2,4
 1005b2c:	e0bff515 	stw	r2,-44(fp)
 1005b30:	e0bff717 	ldw	r2,-36(fp)
 1005b34:	10800044 	addi	r2,r2,1
 1005b38:	e0bff715 	stw	r2,-36(fp)
 1005b3c:	e0fff717 	ldw	r3,-36(fp)
 1005b40:	e0bff817 	ldw	r2,-32(fp)
 1005b44:	18bff016 	blt	r3,r2,1005b08 <__alt_data_end+0xfffe4bb0>
 1005b48:	e0bff617 	ldw	r2,-40(fp)
 1005b4c:	e0bff415 	stw	r2,-48(fp)
 1005b50:	e0bff517 	ldw	r2,-44(fp)
 1005b54:	e0bff315 	stw	r2,-52(fp)
 1005b58:	e0bff717 	ldw	r2,-36(fp)
 1005b5c:	1085883a 	add	r2,r2,r2
 1005b60:	1085883a 	add	r2,r2,r2
 1005b64:	e0bff715 	stw	r2,-36(fp)
 1005b68:	e0fff717 	ldw	r3,-36(fp)
 1005b6c:	e0bffe17 	ldw	r2,-8(fp)
 1005b70:	10c01116 	blt	r2,r3,1005bb8 <slsmemcpy+0x144>
 1005b74:	00000d06 	br	1005bac <slsmemcpy+0x138>
 1005b78:	e0bff317 	ldw	r2,-52(fp)
 1005b7c:	10c00003 	ldbu	r3,0(r2)
 1005b80:	e0bff417 	ldw	r2,-48(fp)
 1005b84:	10c00005 	stb	r3,0(r2)
 1005b88:	e0bff417 	ldw	r2,-48(fp)
 1005b8c:	10800044 	addi	r2,r2,1
 1005b90:	e0bff415 	stw	r2,-48(fp)
 1005b94:	e0bff317 	ldw	r2,-52(fp)
 1005b98:	10800044 	addi	r2,r2,1
 1005b9c:	e0bff315 	stw	r2,-52(fp)
 1005ba0:	e0bff717 	ldw	r2,-36(fp)
 1005ba4:	10800044 	addi	r2,r2,1
 1005ba8:	e0bff715 	stw	r2,-36(fp)
 1005bac:	e0fff717 	ldw	r3,-36(fp)
 1005bb0:	e0bffe17 	ldw	r2,-8(fp)
 1005bb4:	18bff016 	blt	r3,r2,1005b78 <__alt_data_end+0xfffe4c20>
 1005bb8:	e037883a 	mov	sp,fp
 1005bbc:	df000017 	ldw	fp,0(sp)
 1005bc0:	dec00104 	addi	sp,sp,4
 1005bc4:	f800283a 	ret

01005bc8 <usb20sr_without_dma_read>:
 1005bc8:	deffea04 	addi	sp,sp,-88
 1005bcc:	dfc01515 	stw	ra,84(sp)
 1005bd0:	df001415 	stw	fp,80(sp)
 1005bd4:	df001404 	addi	fp,sp,80
 1005bd8:	e13ffb15 	stw	r4,-20(fp)
 1005bdc:	e1bffd15 	stw	r6,-12(fp)
 1005be0:	e1fffe15 	stw	r7,-8(fp)
 1005be4:	e17ffc05 	stb	r5,-16(fp)
 1005be8:	e0bffb17 	ldw	r2,-20(fp)
 1005bec:	10800e17 	ldw	r2,56(r2)
 1005bf0:	1004c03a 	cmpne	r2,r2,zero
 1005bf4:	103ffc1e 	bne	r2,zero,1005be8 <__alt_data_end+0xfffe4c90>
 1005bf8:	e0bffb17 	ldw	r2,-20(fp)
 1005bfc:	10003315 	stw	zero,204(r2)
 1005c00:	e0bffd17 	ldw	r2,-12(fp)
 1005c04:	e0bfec15 	stw	r2,-80(fp)
 1005c08:	e0bffe17 	ldw	r2,-8(fp)
 1005c0c:	e0bfed15 	stw	r2,-76(fp)
 1005c10:	e03fee15 	stw	zero,-72(fp)
 1005c14:	e0bffb17 	ldw	r2,-20(fp)
 1005c18:	10801517 	ldw	r2,84(r2)
 1005c1c:	e0bfef15 	stw	r2,-68(fp)
 1005c20:	e0fffc03 	ldbu	r3,-16(fp)
 1005c24:	e0bffb17 	ldw	r2,-20(fp)
 1005c28:	1885883a 	add	r2,r3,r2
 1005c2c:	10819a04 	addi	r2,r2,1640
 1005c30:	10800003 	ldbu	r2,0(r2)
 1005c34:	10803fcc 	andi	r2,r2,255
 1005c38:	e0bff015 	stw	r2,-64(fp)
 1005c3c:	e0fffc03 	ldbu	r3,-16(fp)
 1005c40:	e0bffb17 	ldw	r2,-20(fp)
 1005c44:	1885883a 	add	r2,r3,r2
 1005c48:	10819e04 	addi	r2,r2,1656
 1005c4c:	10800003 	ldbu	r2,0(r2)
 1005c50:	10803fcc 	andi	r2,r2,255
 1005c54:	e0bff115 	stw	r2,-60(fp)
 1005c58:	e0bffb17 	ldw	r2,-20(fp)
 1005c5c:	10801617 	ldw	r2,88(r2)
 1005c60:	e0bff215 	stw	r2,-56(fp)
 1005c64:	e0bffc03 	ldbu	r2,-16(fp)
 1005c68:	e0fffb17 	ldw	r3,-20(fp)
 1005c6c:	1085883a 	add	r2,r2,r2
 1005c70:	1085883a 	add	r2,r2,r2
 1005c74:	10c5883a 	add	r2,r2,r3
 1005c78:	10817a04 	addi	r2,r2,1512
 1005c7c:	10800017 	ldw	r2,0(r2)
 1005c80:	e0bff315 	stw	r2,-52(fp)
 1005c84:	e0bffc03 	ldbu	r2,-16(fp)
 1005c88:	e0fffb17 	ldw	r3,-20(fp)
 1005c8c:	1085883a 	add	r2,r2,r2
 1005c90:	1085883a 	add	r2,r2,r2
 1005c94:	10c5883a 	add	r2,r2,r3
 1005c98:	10818a04 	addi	r2,r2,1576
 1005c9c:	10800017 	ldw	r2,0(r2)
 1005ca0:	e0bff415 	stw	r2,-48(fp)
 1005ca4:	e0fff217 	ldw	r3,-56(fp)
 1005ca8:	e0bff317 	ldw	r2,-52(fp)
 1005cac:	1885883a 	add	r2,r3,r2
 1005cb0:	e0bff515 	stw	r2,-44(fp)
 1005cb4:	e0fff217 	ldw	r3,-56(fp)
 1005cb8:	e0bff417 	ldw	r2,-48(fp)
 1005cbc:	1885883a 	add	r2,r3,r2
 1005cc0:	e0bff615 	stw	r2,-40(fp)
 1005cc4:	e0bffc03 	ldbu	r2,-16(fp)
 1005cc8:	e0fffb17 	ldw	r3,-20(fp)
 1005ccc:	1085883a 	add	r2,r2,r2
 1005cd0:	1085883a 	add	r2,r2,r2
 1005cd4:	10c5883a 	add	r2,r2,r3
 1005cd8:	10814a04 	addi	r2,r2,1320
 1005cdc:	10800017 	ldw	r2,0(r2)
 1005ce0:	e0bff715 	stw	r2,-36(fp)
 1005ce4:	e0bffc03 	ldbu	r2,-16(fp)
 1005ce8:	e0fffb17 	ldw	r3,-20(fp)
 1005cec:	1085883a 	add	r2,r2,r2
 1005cf0:	1085883a 	add	r2,r2,r2
 1005cf4:	10c5883a 	add	r2,r2,r3
 1005cf8:	1081a204 	addi	r2,r2,1672
 1005cfc:	10800017 	ldw	r2,0(r2)
 1005d00:	e0bffa15 	stw	r2,-24(fp)
 1005d04:	e0bff717 	ldw	r2,-36(fp)
 1005d08:	1006947a 	slli	r3,r2,17
 1005d0c:	e0bff317 	ldw	r2,-52(fp)
 1005d10:	1884b03a 	or	r2,r3,r2
 1005d14:	e0bff815 	stw	r2,-32(fp)
 1005d18:	e0bff717 	ldw	r2,-36(fp)
 1005d1c:	1006947a 	slli	r3,r2,17
 1005d20:	e0bff417 	ldw	r2,-48(fp)
 1005d24:	1884b03a 	or	r2,r3,r2
 1005d28:	e0bff915 	stw	r2,-28(fp)
 1005d2c:	00005306 	br	1005e7c <usb20sr_without_dma_read+0x2b4>
 1005d30:	e0bffa17 	ldw	r2,-24(fp)
 1005d34:	1004c03a 	cmpne	r2,r2,zero
 1005d38:	1000221e 	bne	r2,zero,1005dc4 <usb20sr_without_dma_read+0x1fc>
 1005d3c:	e0bff017 	ldw	r2,-64(fp)
 1005d40:	1085883a 	add	r2,r2,r2
 1005d44:	1085883a 	add	r2,r2,r2
 1005d48:	1007883a 	mov	r3,r2
 1005d4c:	e0bfef17 	ldw	r2,-68(fp)
 1005d50:	1885883a 	add	r2,r3,r2
 1005d54:	10800037 	ldwio	r2,0(r2)
 1005d58:	1004403a 	cmpge	r2,r2,zero
 1005d5c:	1000191e 	bne	r2,zero,1005dc4 <usb20sr_without_dma_read+0x1fc>
 1005d60:	e0bffb17 	ldw	r2,-20(fp)
 1005d64:	10803317 	ldw	r2,204(r2)
 1005d68:	1004c03a 	cmpne	r2,r2,zero
 1005d6c:	1000081e 	bne	r2,zero,1005d90 <usb20sr_without_dma_read+0x1c8>
 1005d70:	e0bff017 	ldw	r2,-64(fp)
 1005d74:	1085883a 	add	r2,r2,r2
 1005d78:	1085883a 	add	r2,r2,r2
 1005d7c:	1007883a 	mov	r3,r2
 1005d80:	e0bfef17 	ldw	r2,-68(fp)
 1005d84:	1885883a 	add	r2,r3,r2
 1005d88:	e0fff817 	ldw	r3,-32(fp)
 1005d8c:	10c00035 	stwio	r3,0(r2)
 1005d90:	e0bffc03 	ldbu	r2,-16(fp)
 1005d94:	e0fffb17 	ldw	r3,-20(fp)
 1005d98:	1085883a 	add	r2,r2,r2
 1005d9c:	1085883a 	add	r2,r2,r2
 1005da0:	10c5883a 	add	r2,r2,r3
 1005da4:	10c0e904 	addi	r3,r2,932
 1005da8:	00800044 	movi	r2,1
 1005dac:	18800015 	stw	r2,0(r3)
 1005db0:	e0fffb17 	ldw	r3,-20(fp)
 1005db4:	00800084 	movi	r2,2
 1005db8:	18803315 	stw	r2,204(r3)
 1005dbc:	e03fff15 	stw	zero,-4(fp)
 1005dc0:	0000d706 	br	1006120 <usb20sr_without_dma_read+0x558>
 1005dc4:	e0bffa17 	ldw	r2,-24(fp)
 1005dc8:	1005003a 	cmpeq	r2,r2,zero
 1005dcc:	1000211e 	bne	r2,zero,1005e54 <usb20sr_without_dma_read+0x28c>
 1005dd0:	e0bff117 	ldw	r2,-60(fp)
 1005dd4:	1085883a 	add	r2,r2,r2
 1005dd8:	1085883a 	add	r2,r2,r2
 1005ddc:	1007883a 	mov	r3,r2
 1005de0:	e0bfef17 	ldw	r2,-68(fp)
 1005de4:	1885883a 	add	r2,r3,r2
 1005de8:	10800037 	ldwio	r2,0(r2)
 1005dec:	1004403a 	cmpge	r2,r2,zero
 1005df0:	1000181e 	bne	r2,zero,1005e54 <usb20sr_without_dma_read+0x28c>
 1005df4:	e0bffb17 	ldw	r2,-20(fp)
 1005df8:	10803317 	ldw	r2,204(r2)
 1005dfc:	1004c03a 	cmpne	r2,r2,zero
 1005e00:	1000081e 	bne	r2,zero,1005e24 <usb20sr_without_dma_read+0x25c>
 1005e04:	e0bff117 	ldw	r2,-60(fp)
 1005e08:	1085883a 	add	r2,r2,r2
 1005e0c:	1085883a 	add	r2,r2,r2
 1005e10:	1007883a 	mov	r3,r2
 1005e14:	e0bfef17 	ldw	r2,-68(fp)
 1005e18:	1885883a 	add	r2,r3,r2
 1005e1c:	e0fff917 	ldw	r3,-28(fp)
 1005e20:	10c00035 	stwio	r3,0(r2)
 1005e24:	e0bffc03 	ldbu	r2,-16(fp)
 1005e28:	e0fffb17 	ldw	r3,-20(fp)
 1005e2c:	1085883a 	add	r2,r2,r2
 1005e30:	1085883a 	add	r2,r2,r2
 1005e34:	10c5883a 	add	r2,r2,r3
 1005e38:	1080e904 	addi	r2,r2,932
 1005e3c:	10000015 	stw	zero,0(r2)
 1005e40:	e0fffb17 	ldw	r3,-20(fp)
 1005e44:	00800084 	movi	r2,2
 1005e48:	18803315 	stw	r2,204(r3)
 1005e4c:	e03fff15 	stw	zero,-4(fp)
 1005e50:	0000b306 	br	1006120 <usb20sr_without_dma_read+0x558>
 1005e54:	e0bffb17 	ldw	r2,-20(fp)
 1005e58:	10803317 	ldw	r2,204(r2)
 1005e5c:	1005003a 	cmpeq	r2,r2,zero
 1005e60:	1000061e 	bne	r2,zero,1005e7c <usb20sr_without_dma_read+0x2b4>
 1005e64:	e0fffb17 	ldw	r3,-20(fp)
 1005e68:	00800084 	movi	r2,2
 1005e6c:	18803315 	stw	r2,204(r3)
 1005e70:	00bfffc4 	movi	r2,-1
 1005e74:	e0bfff15 	stw	r2,-4(fp)
 1005e78:	0000a906 	br	1006120 <usb20sr_without_dma_read+0x558>
 1005e7c:	e0bfed17 	ldw	r2,-76(fp)
 1005e80:	1005003a 	cmpeq	r2,r2,zero
 1005e84:	103faa1e 	bne	r2,zero,1005d30 <__alt_data_end+0xfffe4dd8>
 1005e88:	00009206 	br	10060d4 <usb20sr_without_dma_read+0x50c>
 1005e8c:	e0bffa17 	ldw	r2,-24(fp)
 1005e90:	1004c03a 	cmpne	r2,r2,zero
 1005e94:	1000401e 	bne	r2,zero,1005f98 <usb20sr_without_dma_read+0x3d0>
 1005e98:	e0bff017 	ldw	r2,-64(fp)
 1005e9c:	1085883a 	add	r2,r2,r2
 1005ea0:	1085883a 	add	r2,r2,r2
 1005ea4:	1007883a 	mov	r3,r2
 1005ea8:	e0bfef17 	ldw	r2,-68(fp)
 1005eac:	1885883a 	add	r2,r3,r2
 1005eb0:	10800037 	ldwio	r2,0(r2)
 1005eb4:	1004403a 	cmpge	r2,r2,zero
 1005eb8:	1000371e 	bne	r2,zero,1005f98 <usb20sr_without_dma_read+0x3d0>
 1005ebc:	e13ff717 	ldw	r4,-36(fp)
 1005ec0:	e0bff017 	ldw	r2,-64(fp)
 1005ec4:	1085883a 	add	r2,r2,r2
 1005ec8:	1085883a 	add	r2,r2,r2
 1005ecc:	1007883a 	mov	r3,r2
 1005ed0:	e0bfef17 	ldw	r2,-68(fp)
 1005ed4:	1885883a 	add	r2,r3,r2
 1005ed8:	10800037 	ldwio	r2,0(r2)
 1005edc:	109fffec 	andhi	r2,r2,32767
 1005ee0:	1005d47a 	srai	r2,r2,17
 1005ee4:	2085c83a 	sub	r2,r4,r2
 1005ee8:	e0bfee15 	stw	r2,-72(fp)
 1005eec:	e0bff517 	ldw	r2,-44(fp)
 1005ef0:	1009883a 	mov	r4,r2
 1005ef4:	e0bfee17 	ldw	r2,-72(fp)
 1005ef8:	100b883a 	mov	r5,r2
 1005efc:	100743c0 	call	100743c <alt_dcache_flush>
 1005f00:	e0bfee17 	ldw	r2,-72(fp)
 1005f04:	100b883a 	mov	r5,r2
 1005f08:	e13fec17 	ldw	r4,-80(fp)
 1005f0c:	100743c0 	call	100743c <alt_dcache_flush>
 1005f10:	e13fef17 	ldw	r4,-68(fp)
 1005f14:	e17fec17 	ldw	r5,-80(fp)
 1005f18:	e0bff517 	ldw	r2,-44(fp)
 1005f1c:	10a00034 	orhi	r2,r2,32768
 1005f20:	100d883a 	mov	r6,r2
 1005f24:	e1ffee17 	ldw	r7,-72(fp)
 1005f28:	1005a740 	call	1005a74 <slsmemcpy>
 1005f2c:	e0bfee17 	ldw	r2,-72(fp)
 1005f30:	100b883a 	mov	r5,r2
 1005f34:	e13fec17 	ldw	r4,-80(fp)
 1005f38:	100743c0 	call	100743c <alt_dcache_flush>
 1005f3c:	e0bffb17 	ldw	r2,-20(fp)
 1005f40:	10803317 	ldw	r2,204(r2)
 1005f44:	1004c03a 	cmpne	r2,r2,zero
 1005f48:	1000081e 	bne	r2,zero,1005f6c <usb20sr_without_dma_read+0x3a4>
 1005f4c:	e0bff017 	ldw	r2,-64(fp)
 1005f50:	1085883a 	add	r2,r2,r2
 1005f54:	1085883a 	add	r2,r2,r2
 1005f58:	1007883a 	mov	r3,r2
 1005f5c:	e0bfef17 	ldw	r2,-68(fp)
 1005f60:	1885883a 	add	r2,r3,r2
 1005f64:	e0fff817 	ldw	r3,-32(fp)
 1005f68:	10c00035 	stwio	r3,0(r2)
 1005f6c:	00800044 	movi	r2,1
 1005f70:	e0bffa15 	stw	r2,-24(fp)
 1005f74:	e0ffed17 	ldw	r3,-76(fp)
 1005f78:	e0bfee17 	ldw	r2,-72(fp)
 1005f7c:	1885c83a 	sub	r2,r3,r2
 1005f80:	e0bfed15 	stw	r2,-76(fp)
 1005f84:	e0bfee17 	ldw	r2,-72(fp)
 1005f88:	1007883a 	mov	r3,r2
 1005f8c:	e0bfec17 	ldw	r2,-80(fp)
 1005f90:	10c5883a 	add	r2,r2,r3
 1005f94:	e0bfec15 	stw	r2,-80(fp)
 1005f98:	e0bfed17 	ldw	r2,-76(fp)
 1005f9c:	10800050 	cmplti	r2,r2,1
 1005fa0:	1000421e 	bne	r2,zero,10060ac <usb20sr_without_dma_read+0x4e4>
 1005fa4:	e0bffa17 	ldw	r2,-24(fp)
 1005fa8:	1005003a 	cmpeq	r2,r2,zero
 1005fac:	10003f1e 	bne	r2,zero,10060ac <usb20sr_without_dma_read+0x4e4>
 1005fb0:	e0bff117 	ldw	r2,-60(fp)
 1005fb4:	1085883a 	add	r2,r2,r2
 1005fb8:	1085883a 	add	r2,r2,r2
 1005fbc:	1007883a 	mov	r3,r2
 1005fc0:	e0bfef17 	ldw	r2,-68(fp)
 1005fc4:	1885883a 	add	r2,r3,r2
 1005fc8:	10800037 	ldwio	r2,0(r2)
 1005fcc:	1004403a 	cmpge	r2,r2,zero
 1005fd0:	1000361e 	bne	r2,zero,10060ac <usb20sr_without_dma_read+0x4e4>
 1005fd4:	e13ff717 	ldw	r4,-36(fp)
 1005fd8:	e0bff117 	ldw	r2,-60(fp)
 1005fdc:	1085883a 	add	r2,r2,r2
 1005fe0:	1085883a 	add	r2,r2,r2
 1005fe4:	1007883a 	mov	r3,r2
 1005fe8:	e0bfef17 	ldw	r2,-68(fp)
 1005fec:	1885883a 	add	r2,r3,r2
 1005ff0:	10800037 	ldwio	r2,0(r2)
 1005ff4:	109fffec 	andhi	r2,r2,32767
 1005ff8:	1005d47a 	srai	r2,r2,17
 1005ffc:	2085c83a 	sub	r2,r4,r2
 1006000:	e0bfee15 	stw	r2,-72(fp)
 1006004:	e0bff617 	ldw	r2,-40(fp)
 1006008:	1009883a 	mov	r4,r2
 100600c:	e0bfee17 	ldw	r2,-72(fp)
 1006010:	100b883a 	mov	r5,r2
 1006014:	100743c0 	call	100743c <alt_dcache_flush>
 1006018:	e0bfee17 	ldw	r2,-72(fp)
 100601c:	100b883a 	mov	r5,r2
 1006020:	e13fec17 	ldw	r4,-80(fp)
 1006024:	100743c0 	call	100743c <alt_dcache_flush>
 1006028:	e13fef17 	ldw	r4,-68(fp)
 100602c:	e17fec17 	ldw	r5,-80(fp)
 1006030:	e0bff617 	ldw	r2,-40(fp)
 1006034:	10a00034 	orhi	r2,r2,32768
 1006038:	100d883a 	mov	r6,r2
 100603c:	e1ffee17 	ldw	r7,-72(fp)
 1006040:	1005a740 	call	1005a74 <slsmemcpy>
 1006044:	e0bfee17 	ldw	r2,-72(fp)
 1006048:	100b883a 	mov	r5,r2
 100604c:	e13fec17 	ldw	r4,-80(fp)
 1006050:	100743c0 	call	100743c <alt_dcache_flush>
 1006054:	e0bffb17 	ldw	r2,-20(fp)
 1006058:	10803317 	ldw	r2,204(r2)
 100605c:	1004c03a 	cmpne	r2,r2,zero
 1006060:	1000081e 	bne	r2,zero,1006084 <usb20sr_without_dma_read+0x4bc>
 1006064:	e0bff117 	ldw	r2,-60(fp)
 1006068:	1085883a 	add	r2,r2,r2
 100606c:	1085883a 	add	r2,r2,r2
 1006070:	1007883a 	mov	r3,r2
 1006074:	e0bfef17 	ldw	r2,-68(fp)
 1006078:	1885883a 	add	r2,r3,r2
 100607c:	e0fff917 	ldw	r3,-28(fp)
 1006080:	10c00035 	stwio	r3,0(r2)
 1006084:	e03ffa15 	stw	zero,-24(fp)
 1006088:	e0ffed17 	ldw	r3,-76(fp)
 100608c:	e0bfee17 	ldw	r2,-72(fp)
 1006090:	1885c83a 	sub	r2,r3,r2
 1006094:	e0bfed15 	stw	r2,-76(fp)
 1006098:	e0bfee17 	ldw	r2,-72(fp)
 100609c:	1007883a 	mov	r3,r2
 10060a0:	e0bfec17 	ldw	r2,-80(fp)
 10060a4:	10c5883a 	add	r2,r2,r3
 10060a8:	e0bfec15 	stw	r2,-80(fp)
 10060ac:	e0bffb17 	ldw	r2,-20(fp)
 10060b0:	10803317 	ldw	r2,204(r2)
 10060b4:	1005003a 	cmpeq	r2,r2,zero
 10060b8:	1000061e 	bne	r2,zero,10060d4 <usb20sr_without_dma_read+0x50c>
 10060bc:	e0fffb17 	ldw	r3,-20(fp)
 10060c0:	00800084 	movi	r2,2
 10060c4:	18803315 	stw	r2,204(r3)
 10060c8:	00bfffc4 	movi	r2,-1
 10060cc:	e0bfff15 	stw	r2,-4(fp)
 10060d0:	00001306 	br	1006120 <usb20sr_without_dma_read+0x558>
 10060d4:	e0bfed17 	ldw	r2,-76(fp)
 10060d8:	10800048 	cmpgei	r2,r2,1
 10060dc:	103f6b1e 	bne	r2,zero,1005e8c <__alt_data_end+0xfffe4f34>
 10060e0:	e0fffc03 	ldbu	r3,-16(fp)
 10060e4:	e0bffa17 	ldw	r2,-24(fp)
 10060e8:	100b883a 	mov	r5,r2
 10060ec:	e13ffb17 	ldw	r4,-20(fp)
 10060f0:	18c5883a 	add	r2,r3,r3
 10060f4:	1085883a 	add	r2,r2,r2
 10060f8:	1105883a 	add	r2,r2,r4
 10060fc:	1081a204 	addi	r2,r2,1672
 1006100:	11400015 	stw	r5,0(r2)
 1006104:	e0fffb17 	ldw	r3,-20(fp)
 1006108:	00800084 	movi	r2,2
 100610c:	18803315 	stw	r2,204(r3)
 1006110:	e0ffec17 	ldw	r3,-80(fp)
 1006114:	e0bffd17 	ldw	r2,-12(fp)
 1006118:	1887c83a 	sub	r3,r3,r2
 100611c:	e0ffff15 	stw	r3,-4(fp)
 1006120:	e0bfff17 	ldw	r2,-4(fp)
 1006124:	e037883a 	mov	sp,fp
 1006128:	dfc00117 	ldw	ra,4(sp)
 100612c:	df000017 	ldw	fp,0(sp)
 1006130:	dec00204 	addi	sp,sp,8
 1006134:	f800283a 	ret

01006138 <usb20sr_with_dma_read>:
 1006138:	deffe404 	addi	sp,sp,-112
 100613c:	dfc01b15 	stw	ra,108(sp)
 1006140:	df001a15 	stw	fp,104(sp)
 1006144:	df001a04 	addi	fp,sp,104
 1006148:	e13ffb15 	stw	r4,-20(fp)
 100614c:	e1bffd15 	stw	r6,-12(fp)
 1006150:	e1fffe15 	stw	r7,-8(fp)
 1006154:	e17ffc05 	stb	r5,-16(fp)
 1006158:	e0bffb17 	ldw	r2,-20(fp)
 100615c:	10800e17 	ldw	r2,56(r2)
 1006160:	1004c03a 	cmpne	r2,r2,zero
 1006164:	103ffc1e 	bne	r2,zero,1006158 <__alt_data_end+0xfffe5200>
 1006168:	e0bffb17 	ldw	r2,-20(fp)
 100616c:	10003315 	stw	zero,204(r2)
 1006170:	e0bffd17 	ldw	r2,-12(fp)
 1006174:	e0bfe915 	stw	r2,-92(fp)
 1006178:	e0bffd17 	ldw	r2,-12(fp)
 100617c:	e0bfea15 	stw	r2,-88(fp)
 1006180:	e0bffe17 	ldw	r2,-8(fp)
 1006184:	e0bfeb15 	stw	r2,-84(fp)
 1006188:	e03fec15 	stw	zero,-80(fp)
 100618c:	e0bffb17 	ldw	r2,-20(fp)
 1006190:	10801717 	ldw	r2,92(r2)
 1006194:	e0bfed15 	stw	r2,-76(fp)
 1006198:	e0bffb17 	ldw	r2,-20(fp)
 100619c:	10801517 	ldw	r2,84(r2)
 10061a0:	e0bfee15 	stw	r2,-72(fp)
 10061a4:	e0fffc03 	ldbu	r3,-16(fp)
 10061a8:	e0bffb17 	ldw	r2,-20(fp)
 10061ac:	1885883a 	add	r2,r3,r2
 10061b0:	10819a04 	addi	r2,r2,1640
 10061b4:	10800003 	ldbu	r2,0(r2)
 10061b8:	10803fcc 	andi	r2,r2,255
 10061bc:	e0bfef15 	stw	r2,-68(fp)
 10061c0:	e0fffc03 	ldbu	r3,-16(fp)
 10061c4:	e0bffb17 	ldw	r2,-20(fp)
 10061c8:	1885883a 	add	r2,r3,r2
 10061cc:	10819e04 	addi	r2,r2,1656
 10061d0:	10800003 	ldbu	r2,0(r2)
 10061d4:	10803fcc 	andi	r2,r2,255
 10061d8:	e0bff015 	stw	r2,-64(fp)
 10061dc:	e0bffb17 	ldw	r2,-20(fp)
 10061e0:	10801617 	ldw	r2,88(r2)
 10061e4:	e0bff115 	stw	r2,-60(fp)
 10061e8:	e0bffc03 	ldbu	r2,-16(fp)
 10061ec:	e0fffb17 	ldw	r3,-20(fp)
 10061f0:	1085883a 	add	r2,r2,r2
 10061f4:	1085883a 	add	r2,r2,r2
 10061f8:	10c5883a 	add	r2,r2,r3
 10061fc:	10817a04 	addi	r2,r2,1512
 1006200:	10800017 	ldw	r2,0(r2)
 1006204:	e0bff215 	stw	r2,-56(fp)
 1006208:	e0bffc03 	ldbu	r2,-16(fp)
 100620c:	e0fffb17 	ldw	r3,-20(fp)
 1006210:	1085883a 	add	r2,r2,r2
 1006214:	1085883a 	add	r2,r2,r2
 1006218:	10c5883a 	add	r2,r2,r3
 100621c:	10818a04 	addi	r2,r2,1576
 1006220:	10800017 	ldw	r2,0(r2)
 1006224:	e0bff315 	stw	r2,-52(fp)
 1006228:	e0fff117 	ldw	r3,-60(fp)
 100622c:	e0bff217 	ldw	r2,-56(fp)
 1006230:	1885883a 	add	r2,r3,r2
 1006234:	e0bff415 	stw	r2,-48(fp)
 1006238:	e0fff117 	ldw	r3,-60(fp)
 100623c:	e0bff317 	ldw	r2,-52(fp)
 1006240:	1885883a 	add	r2,r3,r2
 1006244:	e0bff515 	stw	r2,-44(fp)
 1006248:	e0bffc03 	ldbu	r2,-16(fp)
 100624c:	e0fffb17 	ldw	r3,-20(fp)
 1006250:	1085883a 	add	r2,r2,r2
 1006254:	1085883a 	add	r2,r2,r2
 1006258:	10c5883a 	add	r2,r2,r3
 100625c:	10814a04 	addi	r2,r2,1320
 1006260:	10800017 	ldw	r2,0(r2)
 1006264:	e0bff615 	stw	r2,-40(fp)
 1006268:	e03ff715 	stw	zero,-36(fp)
 100626c:	e03ff815 	stw	zero,-32(fp)
 1006270:	e0bffc03 	ldbu	r2,-16(fp)
 1006274:	e0fffb17 	ldw	r3,-20(fp)
 1006278:	1085883a 	add	r2,r2,r2
 100627c:	1085883a 	add	r2,r2,r2
 1006280:	10c5883a 	add	r2,r2,r3
 1006284:	1081a204 	addi	r2,r2,1672
 1006288:	10800017 	ldw	r2,0(r2)
 100628c:	e0bff915 	stw	r2,-28(fp)
 1006290:	e0bff617 	ldw	r2,-40(fp)
 1006294:	1006947a 	slli	r3,r2,17
 1006298:	e0bff217 	ldw	r2,-56(fp)
 100629c:	1884b03a 	or	r2,r3,r2
 10062a0:	e0bff715 	stw	r2,-36(fp)
 10062a4:	e0bff617 	ldw	r2,-40(fp)
 10062a8:	1006947a 	slli	r3,r2,17
 10062ac:	e0bff317 	ldw	r2,-52(fp)
 10062b0:	1884b03a 	or	r2,r3,r2
 10062b4:	e0bff815 	stw	r2,-32(fp)
 10062b8:	e03ffa15 	stw	zero,-24(fp)
 10062bc:	e0bfea17 	ldw	r2,-88(fp)
 10062c0:	108000cc 	andi	r2,r2,3
 10062c4:	1005003a 	cmpeq	r2,r2,zero
 10062c8:	1000561e 	bne	r2,zero,1006424 <usb20sr_with_dma_read+0x2ec>
 10062cc:	00800044 	movi	r2,1
 10062d0:	e0bffa15 	stw	r2,-24(fp)
 10062d4:	00005306 	br	1006424 <usb20sr_with_dma_read+0x2ec>
 10062d8:	e0bff917 	ldw	r2,-28(fp)
 10062dc:	1004c03a 	cmpne	r2,r2,zero
 10062e0:	1000221e 	bne	r2,zero,100636c <usb20sr_with_dma_read+0x234>
 10062e4:	e0bfef17 	ldw	r2,-68(fp)
 10062e8:	1085883a 	add	r2,r2,r2
 10062ec:	1085883a 	add	r2,r2,r2
 10062f0:	1007883a 	mov	r3,r2
 10062f4:	e0bfee17 	ldw	r2,-72(fp)
 10062f8:	1885883a 	add	r2,r3,r2
 10062fc:	10800037 	ldwio	r2,0(r2)
 1006300:	1004403a 	cmpge	r2,r2,zero
 1006304:	1000191e 	bne	r2,zero,100636c <usb20sr_with_dma_read+0x234>
 1006308:	e0bffb17 	ldw	r2,-20(fp)
 100630c:	10803317 	ldw	r2,204(r2)
 1006310:	1004c03a 	cmpne	r2,r2,zero
 1006314:	1000081e 	bne	r2,zero,1006338 <usb20sr_with_dma_read+0x200>
 1006318:	e0bfef17 	ldw	r2,-68(fp)
 100631c:	1085883a 	add	r2,r2,r2
 1006320:	1085883a 	add	r2,r2,r2
 1006324:	1007883a 	mov	r3,r2
 1006328:	e0bfee17 	ldw	r2,-72(fp)
 100632c:	1885883a 	add	r2,r3,r2
 1006330:	e0fff717 	ldw	r3,-36(fp)
 1006334:	10c00035 	stwio	r3,0(r2)
 1006338:	e0bffc03 	ldbu	r2,-16(fp)
 100633c:	e0fffb17 	ldw	r3,-20(fp)
 1006340:	1085883a 	add	r2,r2,r2
 1006344:	1085883a 	add	r2,r2,r2
 1006348:	10c5883a 	add	r2,r2,r3
 100634c:	10c0e904 	addi	r3,r2,932
 1006350:	00800044 	movi	r2,1
 1006354:	18800015 	stw	r2,0(r3)
 1006358:	e0fffb17 	ldw	r3,-20(fp)
 100635c:	00800084 	movi	r2,2
 1006360:	18803315 	stw	r2,204(r3)
 1006364:	e03fff15 	stw	zero,-4(fp)
 1006368:	00015306 	br	10068b8 <usb20sr_with_dma_read+0x780>
 100636c:	e0bff917 	ldw	r2,-28(fp)
 1006370:	1005003a 	cmpeq	r2,r2,zero
 1006374:	1000211e 	bne	r2,zero,10063fc <usb20sr_with_dma_read+0x2c4>
 1006378:	e0bff017 	ldw	r2,-64(fp)
 100637c:	1085883a 	add	r2,r2,r2
 1006380:	1085883a 	add	r2,r2,r2
 1006384:	1007883a 	mov	r3,r2
 1006388:	e0bfee17 	ldw	r2,-72(fp)
 100638c:	1885883a 	add	r2,r3,r2
 1006390:	10800037 	ldwio	r2,0(r2)
 1006394:	1004403a 	cmpge	r2,r2,zero
 1006398:	1000181e 	bne	r2,zero,10063fc <usb20sr_with_dma_read+0x2c4>
 100639c:	e0bffb17 	ldw	r2,-20(fp)
 10063a0:	10803317 	ldw	r2,204(r2)
 10063a4:	1004c03a 	cmpne	r2,r2,zero
 10063a8:	1000081e 	bne	r2,zero,10063cc <usb20sr_with_dma_read+0x294>
 10063ac:	e0bff017 	ldw	r2,-64(fp)
 10063b0:	1085883a 	add	r2,r2,r2
 10063b4:	1085883a 	add	r2,r2,r2
 10063b8:	1007883a 	mov	r3,r2
 10063bc:	e0bfee17 	ldw	r2,-72(fp)
 10063c0:	1885883a 	add	r2,r3,r2
 10063c4:	e0fff817 	ldw	r3,-32(fp)
 10063c8:	10c00035 	stwio	r3,0(r2)
 10063cc:	e0bffc03 	ldbu	r2,-16(fp)
 10063d0:	e0fffb17 	ldw	r3,-20(fp)
 10063d4:	1085883a 	add	r2,r2,r2
 10063d8:	1085883a 	add	r2,r2,r2
 10063dc:	10c5883a 	add	r2,r2,r3
 10063e0:	1080e904 	addi	r2,r2,932
 10063e4:	10000015 	stw	zero,0(r2)
 10063e8:	e0fffb17 	ldw	r3,-20(fp)
 10063ec:	00800084 	movi	r2,2
 10063f0:	18803315 	stw	r2,204(r3)
 10063f4:	e03fff15 	stw	zero,-4(fp)
 10063f8:	00012f06 	br	10068b8 <usb20sr_with_dma_read+0x780>
 10063fc:	e0bffb17 	ldw	r2,-20(fp)
 1006400:	10803317 	ldw	r2,204(r2)
 1006404:	1005003a 	cmpeq	r2,r2,zero
 1006408:	1000061e 	bne	r2,zero,1006424 <usb20sr_with_dma_read+0x2ec>
 100640c:	e0fffb17 	ldw	r3,-20(fp)
 1006410:	00800084 	movi	r2,2
 1006414:	18803315 	stw	r2,204(r3)
 1006418:	00bfffc4 	movi	r2,-1
 100641c:	e0bfff15 	stw	r2,-4(fp)
 1006420:	00012506 	br	10068b8 <usb20sr_with_dma_read+0x780>
 1006424:	e0bfeb17 	ldw	r2,-84(fp)
 1006428:	1005003a 	cmpeq	r2,r2,zero
 100642c:	103faa1e 	bne	r2,zero,10062d8 <__alt_data_end+0xfffe5380>
 1006430:	e0800217 	ldw	r2,8(fp)
 1006434:	1004c03a 	cmpne	r2,r2,zero
 1006438:	10010c1e 	bne	r2,zero,100686c <usb20sr_with_dma_read+0x734>
 100643c:	e17ffe17 	ldw	r5,-8(fp)
 1006440:	e13fe917 	ldw	r4,-92(fp)
 1006444:	100743c0 	call	100743c <alt_dcache_flush>
 1006448:	e0bffb17 	ldw	r2,-20(fp)
 100644c:	10801217 	ldw	r2,72(r2)
 1006450:	e0bfe815 	stw	r2,-96(fp)
 1006454:	e0bffc03 	ldbu	r2,-16(fp)
 1006458:	10800814 	ori	r2,r2,32
 100645c:	10c03fcc 	andi	r3,r2,255
 1006460:	e0bff917 	ldw	r2,-28(fp)
 1006464:	1004927a 	slli	r2,r2,9
 1006468:	1884b03a 	or	r2,r3,r2
 100646c:	e0bfe715 	stw	r2,-100(fp)
 1006470:	e0bfe817 	ldw	r2,-96(fp)
 1006474:	10800104 	addi	r2,r2,4
 1006478:	1007883a 	mov	r3,r2
 100647c:	e0bffe17 	ldw	r2,-8(fp)
 1006480:	18800035 	stwio	r2,0(r3)
 1006484:	e0bfe817 	ldw	r2,-96(fp)
 1006488:	10800204 	addi	r2,r2,8
 100648c:	e0fff417 	ldw	r3,-48(fp)
 1006490:	10c00035 	stwio	r3,0(r2)
 1006494:	e0bfe817 	ldw	r2,-96(fp)
 1006498:	10800304 	addi	r2,r2,12
 100649c:	e0ffe917 	ldw	r3,-92(fp)
 10064a0:	10c00035 	stwio	r3,0(r2)
 10064a4:	e0bfe817 	ldw	r2,-96(fp)
 10064a8:	10800504 	addi	r2,r2,20
 10064ac:	e0ffee17 	ldw	r3,-72(fp)
 10064b0:	10c00035 	stwio	r3,0(r2)
 10064b4:	e0bfe817 	ldw	r2,-96(fp)
 10064b8:	1007883a 	mov	r3,r2
 10064bc:	e0bfe717 	ldw	r2,-100(fp)
 10064c0:	18800035 	stwio	r2,0(r3)
 10064c4:	e0bfe817 	ldw	r2,-96(fp)
 10064c8:	10800404 	addi	r2,r2,16
 10064cc:	10800037 	ldwio	r2,0(r2)
 10064d0:	1080004c 	andi	r2,r2,1
 10064d4:	10803fcc 	andi	r2,r2,255
 10064d8:	1004c03a 	cmpne	r2,r2,zero
 10064dc:	103ff91e 	bne	r2,zero,10064c4 <__alt_data_end+0xfffe556c>
 10064e0:	e0bff417 	ldw	r2,-48(fp)
 10064e4:	1009883a 	mov	r4,r2
 10064e8:	e0bfec17 	ldw	r2,-80(fp)
 10064ec:	100b883a 	mov	r5,r2
 10064f0:	100743c0 	call	100743c <alt_dcache_flush>
 10064f4:	e0bfe817 	ldw	r2,-96(fp)
 10064f8:	10800404 	addi	r2,r2,16
 10064fc:	10800037 	ldwio	r2,0(r2)
 1006500:	1080008c 	andi	r2,r2,2
 1006504:	1005d07a 	srai	r2,r2,1
 1006508:	e0bfe615 	stw	r2,-104(fp)
 100650c:	e0bfe617 	ldw	r2,-104(fp)
 1006510:	0084303a 	nor	r2,zero,r2
 1006514:	1080004c 	andi	r2,r2,1
 1006518:	e0bff915 	stw	r2,-28(fp)
 100651c:	e0bffe17 	ldw	r2,-8(fp)
 1006520:	1007883a 	mov	r3,r2
 1006524:	e0bfe917 	ldw	r2,-92(fp)
 1006528:	10c5883a 	add	r2,r2,r3
 100652c:	e0bfe915 	stw	r2,-92(fp)
 1006530:	0000d106 	br	1006878 <usb20sr_with_dma_read+0x740>
 1006534:	e0bff917 	ldw	r2,-28(fp)
 1006538:	1004c03a 	cmpne	r2,r2,zero
 100653c:	10005e1e 	bne	r2,zero,10066b8 <usb20sr_with_dma_read+0x580>
 1006540:	e0bfef17 	ldw	r2,-68(fp)
 1006544:	1085883a 	add	r2,r2,r2
 1006548:	1085883a 	add	r2,r2,r2
 100654c:	1007883a 	mov	r3,r2
 1006550:	e0bfee17 	ldw	r2,-72(fp)
 1006554:	1885883a 	add	r2,r3,r2
 1006558:	10800037 	ldwio	r2,0(r2)
 100655c:	1004403a 	cmpge	r2,r2,zero
 1006560:	1000551e 	bne	r2,zero,10066b8 <usb20sr_with_dma_read+0x580>
 1006564:	e13ff617 	ldw	r4,-40(fp)
 1006568:	e0bfef17 	ldw	r2,-68(fp)
 100656c:	1085883a 	add	r2,r2,r2
 1006570:	1085883a 	add	r2,r2,r2
 1006574:	1007883a 	mov	r3,r2
 1006578:	e0bfee17 	ldw	r2,-72(fp)
 100657c:	1885883a 	add	r2,r3,r2
 1006580:	10800037 	ldwio	r2,0(r2)
 1006584:	109fffec 	andhi	r2,r2,32767
 1006588:	1005d47a 	srai	r2,r2,17
 100658c:	2085c83a 	sub	r2,r4,r2
 1006590:	e0bfec15 	stw	r2,-80(fp)
 1006594:	e0bfec17 	ldw	r2,-80(fp)
 1006598:	100b883a 	mov	r5,r2
 100659c:	e13fe917 	ldw	r4,-92(fp)
 10065a0:	100743c0 	call	100743c <alt_dcache_flush>
 10065a4:	e0bfed17 	ldw	r2,-76(fp)
 10065a8:	10800037 	ldwio	r2,0(r2)
 10065ac:	1080008c 	andi	r2,r2,2
 10065b0:	1004c03a 	cmpne	r2,r2,zero
 10065b4:	103ffb1e 	bne	r2,zero,10065a4 <__alt_data_end+0xfffe564c>
 10065b8:	e0bfed17 	ldw	r2,-76(fp)
 10065bc:	10800604 	addi	r2,r2,24
 10065c0:	10000035 	stwio	zero,0(r2)
 10065c4:	e0bfed17 	ldw	r2,-76(fp)
 10065c8:	10800104 	addi	r2,r2,4
 10065cc:	e0fff417 	ldw	r3,-48(fp)
 10065d0:	10c00035 	stwio	r3,0(r2)
 10065d4:	e0bfed17 	ldw	r2,-76(fp)
 10065d8:	10800204 	addi	r2,r2,8
 10065dc:	e0ffe917 	ldw	r3,-92(fp)
 10065e0:	10c00035 	stwio	r3,0(r2)
 10065e4:	e0bfed17 	ldw	r2,-76(fp)
 10065e8:	10800304 	addi	r2,r2,12
 10065ec:	e0ffec17 	ldw	r3,-80(fp)
 10065f0:	10c00035 	stwio	r3,0(r2)
 10065f4:	e0bfec17 	ldw	r2,-80(fp)
 10065f8:	108000cc 	andi	r2,r2,3
 10065fc:	1004c03a 	cmpne	r2,r2,zero
 1006600:	1000031e 	bne	r2,zero,1006610 <usb20sr_with_dma_read+0x4d8>
 1006604:	e0bffa17 	ldw	r2,-24(fp)
 1006608:	1005003a 	cmpeq	r2,r2,zero
 100660c:	1000061e 	bne	r2,zero,1006628 <usb20sr_with_dma_read+0x4f0>
 1006610:	e0bfed17 	ldw	r2,-76(fp)
 1006614:	10800604 	addi	r2,r2,24
 1006618:	1007883a 	mov	r3,r2
 100661c:	00802244 	movi	r2,137
 1006620:	18800035 	stwio	r2,0(r3)
 1006624:	00000506 	br	100663c <usb20sr_with_dma_read+0x504>
 1006628:	e0bfed17 	ldw	r2,-76(fp)
 100662c:	10800604 	addi	r2,r2,24
 1006630:	1007883a 	mov	r3,r2
 1006634:	00802304 	movi	r2,140
 1006638:	18800035 	stwio	r2,0(r3)
 100663c:	e0bfed17 	ldw	r2,-76(fp)
 1006640:	10800037 	ldwio	r2,0(r2)
 1006644:	1080008c 	andi	r2,r2,2
 1006648:	1004c03a 	cmpne	r2,r2,zero
 100664c:	103ffb1e 	bne	r2,zero,100663c <__alt_data_end+0xfffe56e4>
 1006650:	e0bfed17 	ldw	r2,-76(fp)
 1006654:	10800604 	addi	r2,r2,24
 1006658:	10000035 	stwio	zero,0(r2)
 100665c:	e0bffb17 	ldw	r2,-20(fp)
 1006660:	10803317 	ldw	r2,204(r2)
 1006664:	1004c03a 	cmpne	r2,r2,zero
 1006668:	1000081e 	bne	r2,zero,100668c <usb20sr_with_dma_read+0x554>
 100666c:	e0bfef17 	ldw	r2,-68(fp)
 1006670:	1085883a 	add	r2,r2,r2
 1006674:	1085883a 	add	r2,r2,r2
 1006678:	1007883a 	mov	r3,r2
 100667c:	e0bfee17 	ldw	r2,-72(fp)
 1006680:	1885883a 	add	r2,r3,r2
 1006684:	e0fff717 	ldw	r3,-36(fp)
 1006688:	10c00035 	stwio	r3,0(r2)
 100668c:	00800044 	movi	r2,1
 1006690:	e0bff915 	stw	r2,-28(fp)
 1006694:	e0ffeb17 	ldw	r3,-84(fp)
 1006698:	e0bfec17 	ldw	r2,-80(fp)
 100669c:	1885c83a 	sub	r2,r3,r2
 10066a0:	e0bfeb15 	stw	r2,-84(fp)
 10066a4:	e0bfec17 	ldw	r2,-80(fp)
 10066a8:	1007883a 	mov	r3,r2
 10066ac:	e0bfe917 	ldw	r2,-92(fp)
 10066b0:	10c5883a 	add	r2,r2,r3
 10066b4:	e0bfe915 	stw	r2,-92(fp)
 10066b8:	e0bfeb17 	ldw	r2,-84(fp)
 10066bc:	10800050 	cmplti	r2,r2,1
 10066c0:	1000601e 	bne	r2,zero,1006844 <usb20sr_with_dma_read+0x70c>
 10066c4:	e0bff917 	ldw	r2,-28(fp)
 10066c8:	1005003a 	cmpeq	r2,r2,zero
 10066cc:	10005d1e 	bne	r2,zero,1006844 <usb20sr_with_dma_read+0x70c>
 10066d0:	e0bff017 	ldw	r2,-64(fp)
 10066d4:	1085883a 	add	r2,r2,r2
 10066d8:	1085883a 	add	r2,r2,r2
 10066dc:	1007883a 	mov	r3,r2
 10066e0:	e0bfee17 	ldw	r2,-72(fp)
 10066e4:	1885883a 	add	r2,r3,r2
 10066e8:	10800037 	ldwio	r2,0(r2)
 10066ec:	1004403a 	cmpge	r2,r2,zero
 10066f0:	1000541e 	bne	r2,zero,1006844 <usb20sr_with_dma_read+0x70c>
 10066f4:	e13ff617 	ldw	r4,-40(fp)
 10066f8:	e0bff017 	ldw	r2,-64(fp)
 10066fc:	1085883a 	add	r2,r2,r2
 1006700:	1085883a 	add	r2,r2,r2
 1006704:	1007883a 	mov	r3,r2
 1006708:	e0bfee17 	ldw	r2,-72(fp)
 100670c:	1885883a 	add	r2,r3,r2
 1006710:	10800037 	ldwio	r2,0(r2)
 1006714:	109fffec 	andhi	r2,r2,32767
 1006718:	1005d47a 	srai	r2,r2,17
 100671c:	2085c83a 	sub	r2,r4,r2
 1006720:	e0bfec15 	stw	r2,-80(fp)
 1006724:	e0bfec17 	ldw	r2,-80(fp)
 1006728:	100b883a 	mov	r5,r2
 100672c:	e13fe917 	ldw	r4,-92(fp)
 1006730:	100743c0 	call	100743c <alt_dcache_flush>
 1006734:	e0bfed17 	ldw	r2,-76(fp)
 1006738:	10800037 	ldwio	r2,0(r2)
 100673c:	1080008c 	andi	r2,r2,2
 1006740:	1004c03a 	cmpne	r2,r2,zero
 1006744:	103ffb1e 	bne	r2,zero,1006734 <__alt_data_end+0xfffe57dc>
 1006748:	e0bfed17 	ldw	r2,-76(fp)
 100674c:	10800604 	addi	r2,r2,24
 1006750:	10000035 	stwio	zero,0(r2)
 1006754:	e0bfed17 	ldw	r2,-76(fp)
 1006758:	10800104 	addi	r2,r2,4
 100675c:	e0fff517 	ldw	r3,-44(fp)
 1006760:	10c00035 	stwio	r3,0(r2)
 1006764:	e0bfed17 	ldw	r2,-76(fp)
 1006768:	10800204 	addi	r2,r2,8
 100676c:	e0ffe917 	ldw	r3,-92(fp)
 1006770:	10c00035 	stwio	r3,0(r2)
 1006774:	e0bfed17 	ldw	r2,-76(fp)
 1006778:	10800304 	addi	r2,r2,12
 100677c:	e0ffec17 	ldw	r3,-80(fp)
 1006780:	10c00035 	stwio	r3,0(r2)
 1006784:	e0bfec17 	ldw	r2,-80(fp)
 1006788:	108000cc 	andi	r2,r2,3
 100678c:	1004c03a 	cmpne	r2,r2,zero
 1006790:	1000031e 	bne	r2,zero,10067a0 <usb20sr_with_dma_read+0x668>
 1006794:	e0bffa17 	ldw	r2,-24(fp)
 1006798:	1005003a 	cmpeq	r2,r2,zero
 100679c:	1000061e 	bne	r2,zero,10067b8 <usb20sr_with_dma_read+0x680>
 10067a0:	e0bfed17 	ldw	r2,-76(fp)
 10067a4:	10800604 	addi	r2,r2,24
 10067a8:	1007883a 	mov	r3,r2
 10067ac:	00802244 	movi	r2,137
 10067b0:	18800035 	stwio	r2,0(r3)
 10067b4:	00000506 	br	10067cc <usb20sr_with_dma_read+0x694>
 10067b8:	e0bfed17 	ldw	r2,-76(fp)
 10067bc:	10800604 	addi	r2,r2,24
 10067c0:	1007883a 	mov	r3,r2
 10067c4:	00802304 	movi	r2,140
 10067c8:	18800035 	stwio	r2,0(r3)
 10067cc:	e0bfed17 	ldw	r2,-76(fp)
 10067d0:	10800037 	ldwio	r2,0(r2)
 10067d4:	1080008c 	andi	r2,r2,2
 10067d8:	1004c03a 	cmpne	r2,r2,zero
 10067dc:	103ffb1e 	bne	r2,zero,10067cc <__alt_data_end+0xfffe5874>
 10067e0:	e0bfed17 	ldw	r2,-76(fp)
 10067e4:	10800604 	addi	r2,r2,24
 10067e8:	10000035 	stwio	zero,0(r2)
 10067ec:	e0bffb17 	ldw	r2,-20(fp)
 10067f0:	10803317 	ldw	r2,204(r2)
 10067f4:	1004c03a 	cmpne	r2,r2,zero
 10067f8:	1000081e 	bne	r2,zero,100681c <usb20sr_with_dma_read+0x6e4>
 10067fc:	e0bff017 	ldw	r2,-64(fp)
 1006800:	1085883a 	add	r2,r2,r2
 1006804:	1085883a 	add	r2,r2,r2
 1006808:	1007883a 	mov	r3,r2
 100680c:	e0bfee17 	ldw	r2,-72(fp)
 1006810:	1885883a 	add	r2,r3,r2
 1006814:	e0fff817 	ldw	r3,-32(fp)
 1006818:	10c00035 	stwio	r3,0(r2)
 100681c:	e0ffeb17 	ldw	r3,-84(fp)
 1006820:	e0bfec17 	ldw	r2,-80(fp)
 1006824:	1885c83a 	sub	r2,r3,r2
 1006828:	e0bfeb15 	stw	r2,-84(fp)
 100682c:	e03ff915 	stw	zero,-28(fp)
 1006830:	e0bfec17 	ldw	r2,-80(fp)
 1006834:	1007883a 	mov	r3,r2
 1006838:	e0bfe917 	ldw	r2,-92(fp)
 100683c:	10c5883a 	add	r2,r2,r3
 1006840:	e0bfe915 	stw	r2,-92(fp)
 1006844:	e0bffb17 	ldw	r2,-20(fp)
 1006848:	10803317 	ldw	r2,204(r2)
 100684c:	1005003a 	cmpeq	r2,r2,zero
 1006850:	1000061e 	bne	r2,zero,100686c <usb20sr_with_dma_read+0x734>
 1006854:	e0fffb17 	ldw	r3,-20(fp)
 1006858:	00800084 	movi	r2,2
 100685c:	18803315 	stw	r2,204(r3)
 1006860:	00bfffc4 	movi	r2,-1
 1006864:	e0bfff15 	stw	r2,-4(fp)
 1006868:	00001306 	br	10068b8 <usb20sr_with_dma_read+0x780>
 100686c:	e0bfeb17 	ldw	r2,-84(fp)
 1006870:	10800048 	cmpgei	r2,r2,1
 1006874:	103f2f1e 	bne	r2,zero,1006534 <__alt_data_end+0xfffe55dc>
 1006878:	e0fffc03 	ldbu	r3,-16(fp)
 100687c:	e0bff917 	ldw	r2,-28(fp)
 1006880:	100b883a 	mov	r5,r2
 1006884:	e13ffb17 	ldw	r4,-20(fp)
 1006888:	18c5883a 	add	r2,r3,r3
 100688c:	1085883a 	add	r2,r2,r2
 1006890:	1105883a 	add	r2,r2,r4
 1006894:	1081a204 	addi	r2,r2,1672
 1006898:	11400015 	stw	r5,0(r2)
 100689c:	e0fffb17 	ldw	r3,-20(fp)
 10068a0:	00800084 	movi	r2,2
 10068a4:	18803315 	stw	r2,204(r3)
 10068a8:	e0ffe917 	ldw	r3,-92(fp)
 10068ac:	e0bffd17 	ldw	r2,-12(fp)
 10068b0:	1887c83a 	sub	r3,r3,r2
 10068b4:	e0ffff15 	stw	r3,-4(fp)
 10068b8:	e0bfff17 	ldw	r2,-4(fp)
 10068bc:	e037883a 	mov	sp,fp
 10068c0:	dfc00117 	ldw	ra,4(sp)
 10068c4:	df000017 	ldw	fp,0(sp)
 10068c8:	dec00204 	addi	sp,sp,8
 10068cc:	f800283a 	ret

010068d0 <usb20sr_check_bo_ready>:
 10068d0:	defffb04 	addi	sp,sp,-20
 10068d4:	df000415 	stw	fp,16(sp)
 10068d8:	df000404 	addi	fp,sp,16
 10068dc:	e13ffe15 	stw	r4,-8(fp)
 10068e0:	e17fff05 	stb	r5,-4(fp)
 10068e4:	e0bffe17 	ldw	r2,-8(fp)
 10068e8:	10801517 	ldw	r2,84(r2)
 10068ec:	1009883a 	mov	r4,r2
 10068f0:	e0ffff07 	ldb	r3,-4(fp)
 10068f4:	e0bffe17 	ldw	r2,-8(fp)
 10068f8:	1885883a 	add	r2,r3,r2
 10068fc:	10819a04 	addi	r2,r2,1640
 1006900:	10800003 	ldbu	r2,0(r2)
 1006904:	10803fcc 	andi	r2,r2,255
 1006908:	1085883a 	add	r2,r2,r2
 100690c:	1085883a 	add	r2,r2,r2
 1006910:	2085883a 	add	r2,r4,r2
 1006914:	10800037 	ldwio	r2,0(r2)
 1006918:	e0bffd15 	stw	r2,-12(fp)
 100691c:	e0bffe17 	ldw	r2,-8(fp)
 1006920:	10801517 	ldw	r2,84(r2)
 1006924:	1009883a 	mov	r4,r2
 1006928:	e0ffff07 	ldb	r3,-4(fp)
 100692c:	e0bffe17 	ldw	r2,-8(fp)
 1006930:	1885883a 	add	r2,r3,r2
 1006934:	10819e04 	addi	r2,r2,1656
 1006938:	10800003 	ldbu	r2,0(r2)
 100693c:	10803fcc 	andi	r2,r2,255
 1006940:	1085883a 	add	r2,r2,r2
 1006944:	1085883a 	add	r2,r2,r2
 1006948:	2085883a 	add	r2,r4,r2
 100694c:	10800037 	ldwio	r2,0(r2)
 1006950:	e0bffc15 	stw	r2,-16(fp)
 1006954:	e0fffe17 	ldw	r3,-8(fp)
 1006958:	00bfffc4 	movi	r2,-1
 100695c:	1881b215 	stw	r2,1736(r3)
 1006960:	e0bffe17 	ldw	r2,-8(fp)
 1006964:	10800e17 	ldw	r2,56(r2)
 1006968:	1004c03a 	cmpne	r2,r2,zero
 100696c:	10002f1e 	bne	r2,zero,1006a2c <usb20sr_check_bo_ready+0x15c>
 1006970:	e0bffc17 	ldw	r2,-16(fp)
 1006974:	10bfffe0 	cmpeqi	r2,r2,-1
 1006978:	10002c1e 	bne	r2,zero,1006a2c <usb20sr_check_bo_ready+0x15c>
 100697c:	e0bffd17 	ldw	r2,-12(fp)
 1006980:	1004803a 	cmplt	r2,r2,zero
 1006984:	1000031e 	bne	r2,zero,1006994 <usb20sr_check_bo_ready+0xc4>
 1006988:	e0bffc17 	ldw	r2,-16(fp)
 100698c:	1004403a 	cmpge	r2,r2,zero
 1006990:	1000261e 	bne	r2,zero,1006a2c <usb20sr_check_bo_ready+0x15c>
 1006994:	e0bfff07 	ldb	r2,-4(fp)
 1006998:	e0fffe17 	ldw	r3,-8(fp)
 100699c:	1085883a 	add	r2,r2,r2
 10069a0:	1085883a 	add	r2,r2,r2
 10069a4:	10c5883a 	add	r2,r2,r3
 10069a8:	1081a204 	addi	r2,r2,1672
 10069ac:	10800017 	ldw	r2,0(r2)
 10069b0:	1004c03a 	cmpne	r2,r2,zero
 10069b4:	10000f1e 	bne	r2,zero,10069f4 <usb20sr_check_bo_ready+0x124>
 10069b8:	e0bfff07 	ldb	r2,-4(fp)
 10069bc:	e0fffe17 	ldw	r3,-8(fp)
 10069c0:	1085883a 	add	r2,r2,r2
 10069c4:	1085883a 	add	r2,r2,r2
 10069c8:	10c5883a 	add	r2,r2,r3
 10069cc:	10814a04 	addi	r2,r2,1320
 10069d0:	10c00017 	ldw	r3,0(r2)
 10069d4:	e0bffd17 	ldw	r2,-12(fp)
 10069d8:	109fffec 	andhi	r2,r2,32767
 10069dc:	1005d47a 	srai	r2,r2,17
 10069e0:	1885c83a 	sub	r2,r3,r2
 10069e4:	1007883a 	mov	r3,r2
 10069e8:	e0bffe17 	ldw	r2,-8(fp)
 10069ec:	10c1b215 	stw	r3,1736(r2)
 10069f0:	00000e06 	br	1006a2c <usb20sr_check_bo_ready+0x15c>
 10069f4:	e0bfff07 	ldb	r2,-4(fp)
 10069f8:	e0fffe17 	ldw	r3,-8(fp)
 10069fc:	1085883a 	add	r2,r2,r2
 1006a00:	1085883a 	add	r2,r2,r2
 1006a04:	10c5883a 	add	r2,r2,r3
 1006a08:	10814a04 	addi	r2,r2,1320
 1006a0c:	10c00017 	ldw	r3,0(r2)
 1006a10:	e0bffc17 	ldw	r2,-16(fp)
 1006a14:	109fffec 	andhi	r2,r2,32767
 1006a18:	1005d47a 	srai	r2,r2,17
 1006a1c:	1885c83a 	sub	r2,r3,r2
 1006a20:	1007883a 	mov	r3,r2
 1006a24:	e0bffe17 	ldw	r2,-8(fp)
 1006a28:	10c1b215 	stw	r3,1736(r2)
 1006a2c:	e0bffe17 	ldw	r2,-8(fp)
 1006a30:	1081b217 	ldw	r2,1736(r2)
 1006a34:	e037883a 	mov	sp,fp
 1006a38:	df000017 	ldw	fp,0(sp)
 1006a3c:	dec00104 	addi	sp,sp,4
 1006a40:	f800283a 	ret

01006a44 <usb20sr_check_bi_ready>:
 1006a44:	defffd04 	addi	sp,sp,-12
 1006a48:	df000215 	stw	fp,8(sp)
 1006a4c:	df000204 	addi	fp,sp,8
 1006a50:	e13ffe15 	stw	r4,-8(fp)
 1006a54:	e17fff05 	stb	r5,-4(fp)
 1006a58:	e0fffe17 	ldw	r3,-8(fp)
 1006a5c:	00bfffc4 	movi	r2,-1
 1006a60:	1880f915 	stw	r2,996(r3)
 1006a64:	e0bffe17 	ldw	r2,-8(fp)
 1006a68:	10801517 	ldw	r2,84(r2)
 1006a6c:	1009883a 	mov	r4,r2
 1006a70:	e0ffff07 	ldb	r3,-4(fp)
 1006a74:	e0bffe17 	ldw	r2,-8(fp)
 1006a78:	1885883a 	add	r2,r3,r2
 1006a7c:	1080e104 	addi	r2,r2,900
 1006a80:	10800003 	ldbu	r2,0(r2)
 1006a84:	10803fcc 	andi	r2,r2,255
 1006a88:	1085883a 	add	r2,r2,r2
 1006a8c:	1085883a 	add	r2,r2,r2
 1006a90:	2085883a 	add	r2,r4,r2
 1006a94:	10800037 	ldwio	r2,0(r2)
 1006a98:	1004803a 	cmplt	r2,r2,zero
 1006a9c:	10000f1e 	bne	r2,zero,1006adc <usb20sr_check_bi_ready+0x98>
 1006aa0:	e0bffe17 	ldw	r2,-8(fp)
 1006aa4:	10801517 	ldw	r2,84(r2)
 1006aa8:	1009883a 	mov	r4,r2
 1006aac:	e0ffff07 	ldb	r3,-4(fp)
 1006ab0:	e0bffe17 	ldw	r2,-8(fp)
 1006ab4:	1885883a 	add	r2,r3,r2
 1006ab8:	1080e504 	addi	r2,r2,916
 1006abc:	10800003 	ldbu	r2,0(r2)
 1006ac0:	10803fcc 	andi	r2,r2,255
 1006ac4:	1085883a 	add	r2,r2,r2
 1006ac8:	1085883a 	add	r2,r2,r2
 1006acc:	2085883a 	add	r2,r4,r2
 1006ad0:	10800037 	ldwio	r2,0(r2)
 1006ad4:	1004403a 	cmpge	r2,r2,zero
 1006ad8:	1000031e 	bne	r2,zero,1006ae8 <usb20sr_check_bi_ready+0xa4>
 1006adc:	e0fffe17 	ldw	r3,-8(fp)
 1006ae0:	00800044 	movi	r2,1
 1006ae4:	1880f915 	stw	r2,996(r3)
 1006ae8:	e0bffe17 	ldw	r2,-8(fp)
 1006aec:	1080f917 	ldw	r2,996(r2)
 1006af0:	e037883a 	mov	sp,fp
 1006af4:	df000017 	ldw	fp,0(sp)
 1006af8:	dec00104 	addi	sp,sp,4
 1006afc:	f800283a 	ret

01006b00 <udivmodsi4>:
 1006b00:	2900182e 	bgeu	r5,r4,1006b64 <udivmodsi4+0x64>
 1006b04:	28001716 	blt	r5,zero,1006b64 <udivmodsi4+0x64>
 1006b08:	00800804 	movi	r2,32
 1006b0c:	00c00044 	movi	r3,1
 1006b10:	00000206 	br	1006b1c <udivmodsi4+0x1c>
 1006b14:	10001126 	beq	r2,zero,1006b5c <udivmodsi4+0x5c>
 1006b18:	28000516 	blt	r5,zero,1006b30 <udivmodsi4+0x30>
 1006b1c:	294b883a 	add	r5,r5,r5
 1006b20:	10bfffc4 	addi	r2,r2,-1
 1006b24:	18c7883a 	add	r3,r3,r3
 1006b28:	293ffa36 	bltu	r5,r4,1006b14 <__alt_data_end+0xfffe5bbc>
 1006b2c:	18000b26 	beq	r3,zero,1006b5c <udivmodsi4+0x5c>
 1006b30:	0005883a 	mov	r2,zero
 1006b34:	21400236 	bltu	r4,r5,1006b40 <udivmodsi4+0x40>
 1006b38:	2149c83a 	sub	r4,r4,r5
 1006b3c:	10c4b03a 	or	r2,r2,r3
 1006b40:	1806d07a 	srli	r3,r3,1
 1006b44:	280ad07a 	srli	r5,r5,1
 1006b48:	183ffa1e 	bne	r3,zero,1006b34 <__alt_data_end+0xfffe5bdc>
 1006b4c:	3000011e 	bne	r6,zero,1006b54 <udivmodsi4+0x54>
 1006b50:	f800283a 	ret
 1006b54:	2005883a 	mov	r2,r4
 1006b58:	f800283a 	ret
 1006b5c:	0005883a 	mov	r2,zero
 1006b60:	003ffa06 	br	1006b4c <__alt_data_end+0xfffe5bf4>
 1006b64:	00c00044 	movi	r3,1
 1006b68:	003ff106 	br	1006b30 <__alt_data_end+0xfffe5bd8>

01006b6c <__divsi3>:
 1006b6c:	defffe04 	addi	sp,sp,-8
 1006b70:	dfc00115 	stw	ra,4(sp)
 1006b74:	dc000015 	stw	r16,0(sp)
 1006b78:	20000b16 	blt	r4,zero,1006ba8 <__divsi3+0x3c>
 1006b7c:	0021883a 	mov	r16,zero
 1006b80:	28000c16 	blt	r5,zero,1006bb4 <__divsi3+0x48>
 1006b84:	000d883a 	mov	r6,zero
 1006b88:	1006b000 	call	1006b00 <udivmodsi4>
 1006b8c:	0407c83a 	sub	r3,zero,r16
 1006b90:	1884f03a 	xor	r2,r3,r2
 1006b94:	1405883a 	add	r2,r2,r16
 1006b98:	dfc00117 	ldw	ra,4(sp)
 1006b9c:	dc000017 	ldw	r16,0(sp)
 1006ba0:	dec00204 	addi	sp,sp,8
 1006ba4:	f800283a 	ret
 1006ba8:	0109c83a 	sub	r4,zero,r4
 1006bac:	04000044 	movi	r16,1
 1006bb0:	283ff40e 	bge	r5,zero,1006b84 <__alt_data_end+0xfffe5c2c>
 1006bb4:	014bc83a 	sub	r5,zero,r5
 1006bb8:	8400005c 	xori	r16,r16,1
 1006bbc:	003ff106 	br	1006b84 <__alt_data_end+0xfffe5c2c>

01006bc0 <__modsi3>:
 1006bc0:	defffd04 	addi	sp,sp,-12
 1006bc4:	dfc00215 	stw	ra,8(sp)
 1006bc8:	dc400115 	stw	r17,4(sp)
 1006bcc:	dc000015 	stw	r16,0(sp)
 1006bd0:	20000c16 	blt	r4,zero,1006c04 <__modsi3+0x44>
 1006bd4:	0023883a 	mov	r17,zero
 1006bd8:	0021883a 	mov	r16,zero
 1006bdc:	28000d16 	blt	r5,zero,1006c14 <__modsi3+0x54>
 1006be0:	01800044 	movi	r6,1
 1006be4:	1006b000 	call	1006b00 <udivmodsi4>
 1006be8:	1404f03a 	xor	r2,r2,r16
 1006bec:	8885883a 	add	r2,r17,r2
 1006bf0:	dfc00217 	ldw	ra,8(sp)
 1006bf4:	dc400117 	ldw	r17,4(sp)
 1006bf8:	dc000017 	ldw	r16,0(sp)
 1006bfc:	dec00304 	addi	sp,sp,12
 1006c00:	f800283a 	ret
 1006c04:	0109c83a 	sub	r4,zero,r4
 1006c08:	04400044 	movi	r17,1
 1006c0c:	043fffc4 	movi	r16,-1
 1006c10:	283ff30e 	bge	r5,zero,1006be0 <__alt_data_end+0xfffe5c88>
 1006c14:	014bc83a 	sub	r5,zero,r5
 1006c18:	003ff106 	br	1006be0 <__alt_data_end+0xfffe5c88>

01006c1c <__udivsi3>:
 1006c1c:	000d883a 	mov	r6,zero
 1006c20:	1006b001 	jmpi	1006b00 <udivmodsi4>

01006c24 <__umodsi3>:
 1006c24:	01800044 	movi	r6,1
 1006c28:	1006b001 	jmpi	1006b00 <udivmodsi4>

01006c2c <_printf_r>:
 1006c2c:	defffd04 	addi	sp,sp,-12
 1006c30:	dfc00015 	stw	ra,0(sp)
 1006c34:	d9800115 	stw	r6,4(sp)
 1006c38:	d9c00215 	stw	r7,8(sp)
 1006c3c:	20c00217 	ldw	r3,8(r4)
 1006c40:	280d883a 	mov	r6,r5
 1006c44:	01404034 	movhi	r5,256
 1006c48:	295cce04 	addi	r5,r5,29496
 1006c4c:	19400115 	stw	r5,4(r3)
 1006c50:	21400217 	ldw	r5,8(r4)
 1006c54:	d9c00104 	addi	r7,sp,4
 1006c58:	1006dd00 	call	1006dd0 <___vfprintf_internal_r>
 1006c5c:	dfc00017 	ldw	ra,0(sp)
 1006c60:	dec00304 	addi	sp,sp,12
 1006c64:	f800283a 	ret

01006c68 <printf>:
 1006c68:	defffc04 	addi	sp,sp,-16
 1006c6c:	dfc00015 	stw	ra,0(sp)
 1006c70:	d9400115 	stw	r5,4(sp)
 1006c74:	d9800215 	stw	r6,8(sp)
 1006c78:	d9c00315 	stw	r7,12(sp)
 1006c7c:	00804074 	movhi	r2,257
 1006c80:	10a9c604 	addi	r2,r2,-22760
 1006c84:	10800017 	ldw	r2,0(r2)
 1006c88:	200b883a 	mov	r5,r4
 1006c8c:	01004034 	movhi	r4,256
 1006c90:	10c00217 	ldw	r3,8(r2)
 1006c94:	211cce04 	addi	r4,r4,29496
 1006c98:	d9800104 	addi	r6,sp,4
 1006c9c:	19000115 	stw	r4,4(r3)
 1006ca0:	11000217 	ldw	r4,8(r2)
 1006ca4:	10073140 	call	1007314 <__vfprintf_internal>
 1006ca8:	dfc00017 	ldw	ra,0(sp)
 1006cac:	dec00404 	addi	sp,sp,16
 1006cb0:	f800283a 	ret

01006cb4 <_puts_r>:
 1006cb4:	defffd04 	addi	sp,sp,-12
 1006cb8:	dc000015 	stw	r16,0(sp)
 1006cbc:	2021883a 	mov	r16,r4
 1006cc0:	2809883a 	mov	r4,r5
 1006cc4:	dfc00215 	stw	ra,8(sp)
 1006cc8:	dc400115 	stw	r17,4(sp)
 1006ccc:	2823883a 	mov	r17,r5
 1006cd0:	1006d480 	call	1006d48 <strlen>
 1006cd4:	81400217 	ldw	r5,8(r16)
 1006cd8:	00c04034 	movhi	r3,256
 1006cdc:	18dcce04 	addi	r3,r3,29496
 1006ce0:	28c00115 	stw	r3,4(r5)
 1006ce4:	8009883a 	mov	r4,r16
 1006ce8:	880d883a 	mov	r6,r17
 1006cec:	100f883a 	mov	r7,r2
 1006cf0:	10073380 	call	1007338 <__sfvwrite_small_dev>
 1006cf4:	00ffffc4 	movi	r3,-1
 1006cf8:	10c00926 	beq	r2,r3,1006d20 <_puts_r+0x6c>
 1006cfc:	81400217 	ldw	r5,8(r16)
 1006d00:	01804074 	movhi	r6,257
 1006d04:	8009883a 	mov	r4,r16
 1006d08:	28800117 	ldw	r2,4(r5)
 1006d0c:	31a7d004 	addi	r6,r6,-24768
 1006d10:	01c00044 	movi	r7,1
 1006d14:	103ee83a 	callr	r2
 1006d18:	10bfffe0 	cmpeqi	r2,r2,-1
 1006d1c:	0085c83a 	sub	r2,zero,r2
 1006d20:	dfc00217 	ldw	ra,8(sp)
 1006d24:	dc400117 	ldw	r17,4(sp)
 1006d28:	dc000017 	ldw	r16,0(sp)
 1006d2c:	dec00304 	addi	sp,sp,12
 1006d30:	f800283a 	ret

01006d34 <puts>:
 1006d34:	00804074 	movhi	r2,257
 1006d38:	10a9c604 	addi	r2,r2,-22760
 1006d3c:	200b883a 	mov	r5,r4
 1006d40:	11000017 	ldw	r4,0(r2)
 1006d44:	1006cb41 	jmpi	1006cb4 <_puts_r>

01006d48 <strlen>:
 1006d48:	2005883a 	mov	r2,r4
 1006d4c:	10c00007 	ldb	r3,0(r2)
 1006d50:	18000226 	beq	r3,zero,1006d5c <strlen+0x14>
 1006d54:	10800044 	addi	r2,r2,1
 1006d58:	003ffc06 	br	1006d4c <__alt_data_end+0xfffe5df4>
 1006d5c:	1105c83a 	sub	r2,r2,r4
 1006d60:	f800283a 	ret

01006d64 <print_repeat>:
 1006d64:	defffb04 	addi	sp,sp,-20
 1006d68:	dc800315 	stw	r18,12(sp)
 1006d6c:	dc400215 	stw	r17,8(sp)
 1006d70:	dc000115 	stw	r16,4(sp)
 1006d74:	dfc00415 	stw	ra,16(sp)
 1006d78:	2025883a 	mov	r18,r4
 1006d7c:	2823883a 	mov	r17,r5
 1006d80:	d9800005 	stb	r6,0(sp)
 1006d84:	3821883a 	mov	r16,r7
 1006d88:	04000a0e 	bge	zero,r16,1006db4 <print_repeat+0x50>
 1006d8c:	88800117 	ldw	r2,4(r17)
 1006d90:	9009883a 	mov	r4,r18
 1006d94:	880b883a 	mov	r5,r17
 1006d98:	d80d883a 	mov	r6,sp
 1006d9c:	01c00044 	movi	r7,1
 1006da0:	103ee83a 	callr	r2
 1006da4:	843fffc4 	addi	r16,r16,-1
 1006da8:	103ff726 	beq	r2,zero,1006d88 <__alt_data_end+0xfffe5e30>
 1006dac:	00bfffc4 	movi	r2,-1
 1006db0:	00000106 	br	1006db8 <print_repeat+0x54>
 1006db4:	0005883a 	mov	r2,zero
 1006db8:	dfc00417 	ldw	ra,16(sp)
 1006dbc:	dc800317 	ldw	r18,12(sp)
 1006dc0:	dc400217 	ldw	r17,8(sp)
 1006dc4:	dc000117 	ldw	r16,4(sp)
 1006dc8:	dec00504 	addi	sp,sp,20
 1006dcc:	f800283a 	ret

01006dd0 <___vfprintf_internal_r>:
 1006dd0:	deffe404 	addi	sp,sp,-112
 1006dd4:	d8c00804 	addi	r3,sp,32
 1006dd8:	df001a15 	stw	fp,104(sp)
 1006ddc:	ddc01915 	stw	r23,100(sp)
 1006de0:	dd801815 	stw	r22,96(sp)
 1006de4:	dd401715 	stw	r21,92(sp)
 1006de8:	dd001615 	stw	r20,88(sp)
 1006dec:	dcc01515 	stw	r19,84(sp)
 1006df0:	dc801415 	stw	r18,80(sp)
 1006df4:	dc401315 	stw	r17,76(sp)
 1006df8:	dc001215 	stw	r16,72(sp)
 1006dfc:	dfc01b15 	stw	ra,108(sp)
 1006e00:	2027883a 	mov	r19,r4
 1006e04:	2839883a 	mov	fp,r5
 1006e08:	382f883a 	mov	r23,r7
 1006e0c:	d9800f15 	stw	r6,60(sp)
 1006e10:	0021883a 	mov	r16,zero
 1006e14:	d8000e15 	stw	zero,56(sp)
 1006e18:	002d883a 	mov	r22,zero
 1006e1c:	0029883a 	mov	r20,zero
 1006e20:	0025883a 	mov	r18,zero
 1006e24:	0023883a 	mov	r17,zero
 1006e28:	d8000c15 	stw	zero,48(sp)
 1006e2c:	d8000b15 	stw	zero,44(sp)
 1006e30:	002b883a 	mov	r21,zero
 1006e34:	d8c00915 	stw	r3,36(sp)
 1006e38:	d8c00f17 	ldw	r3,60(sp)
 1006e3c:	19000003 	ldbu	r4,0(r3)
 1006e40:	20803fcc 	andi	r2,r4,255
 1006e44:	1080201c 	xori	r2,r2,128
 1006e48:	10bfe004 	addi	r2,r2,-128
 1006e4c:	10012426 	beq	r2,zero,10072e0 <___vfprintf_internal_r+0x510>
 1006e50:	00c00044 	movi	r3,1
 1006e54:	a8c01426 	beq	r21,r3,1006ea8 <___vfprintf_internal_r+0xd8>
 1006e58:	1d400216 	blt	r3,r21,1006e64 <___vfprintf_internal_r+0x94>
 1006e5c:	a8000626 	beq	r21,zero,1006e78 <___vfprintf_internal_r+0xa8>
 1006e60:	00011b06 	br	10072d0 <___vfprintf_internal_r+0x500>
 1006e64:	01400084 	movi	r5,2
 1006e68:	a9401d26 	beq	r21,r5,1006ee0 <___vfprintf_internal_r+0x110>
 1006e6c:	014000c4 	movi	r5,3
 1006e70:	a9402926 	beq	r21,r5,1006f18 <___vfprintf_internal_r+0x148>
 1006e74:	00011606 	br	10072d0 <___vfprintf_internal_r+0x500>
 1006e78:	01400944 	movi	r5,37
 1006e7c:	11410326 	beq	r2,r5,100728c <___vfprintf_internal_r+0x4bc>
 1006e80:	e0800117 	ldw	r2,4(fp)
 1006e84:	d9000005 	stb	r4,0(sp)
 1006e88:	e00b883a 	mov	r5,fp
 1006e8c:	9809883a 	mov	r4,r19
 1006e90:	d80d883a 	mov	r6,sp
 1006e94:	01c00044 	movi	r7,1
 1006e98:	103ee83a 	callr	r2
 1006e9c:	1000de1e 	bne	r2,zero,1007218 <___vfprintf_internal_r+0x448>
 1006ea0:	84000044 	addi	r16,r16,1
 1006ea4:	00010a06 	br	10072d0 <___vfprintf_internal_r+0x500>
 1006ea8:	01400c04 	movi	r5,48
 1006eac:	11410026 	beq	r2,r5,10072b0 <___vfprintf_internal_r+0x4e0>
 1006eb0:	01400944 	movi	r5,37
 1006eb4:	11400a1e 	bne	r2,r5,1006ee0 <___vfprintf_internal_r+0x110>
 1006eb8:	d8800005 	stb	r2,0(sp)
 1006ebc:	e0800117 	ldw	r2,4(fp)
 1006ec0:	9809883a 	mov	r4,r19
 1006ec4:	e00b883a 	mov	r5,fp
 1006ec8:	d80d883a 	mov	r6,sp
 1006ecc:	a80f883a 	mov	r7,r21
 1006ed0:	103ee83a 	callr	r2
 1006ed4:	1000d01e 	bne	r2,zero,1007218 <___vfprintf_internal_r+0x448>
 1006ed8:	84000044 	addi	r16,r16,1
 1006edc:	0000fb06 	br	10072cc <___vfprintf_internal_r+0x4fc>
 1006ee0:	217ff404 	addi	r5,r4,-48
 1006ee4:	29403fcc 	andi	r5,r5,255
 1006ee8:	00c00244 	movi	r3,9
 1006eec:	19400736 	bltu	r3,r5,1006f0c <___vfprintf_internal_r+0x13c>
 1006ef0:	00bfffc4 	movi	r2,-1
 1006ef4:	88800226 	beq	r17,r2,1006f00 <___vfprintf_internal_r+0x130>
 1006ef8:	8c4002a4 	muli	r17,r17,10
 1006efc:	00000106 	br	1006f04 <___vfprintf_internal_r+0x134>
 1006f00:	0023883a 	mov	r17,zero
 1006f04:	8963883a 	add	r17,r17,r5
 1006f08:	0000ea06 	br	10072b4 <___vfprintf_internal_r+0x4e4>
 1006f0c:	01400b84 	movi	r5,46
 1006f10:	1140ec26 	beq	r2,r5,10072c4 <___vfprintf_internal_r+0x4f4>
 1006f14:	05400084 	movi	r21,2
 1006f18:	213ff404 	addi	r4,r4,-48
 1006f1c:	21003fcc 	andi	r4,r4,255
 1006f20:	00c00244 	movi	r3,9
 1006f24:	19000736 	bltu	r3,r4,1006f44 <___vfprintf_internal_r+0x174>
 1006f28:	00bfffc4 	movi	r2,-1
 1006f2c:	90800226 	beq	r18,r2,1006f38 <___vfprintf_internal_r+0x168>
 1006f30:	948002a4 	muli	r18,r18,10
 1006f34:	00000106 	br	1006f3c <___vfprintf_internal_r+0x16c>
 1006f38:	0025883a 	mov	r18,zero
 1006f3c:	9125883a 	add	r18,r18,r4
 1006f40:	0000e306 	br	10072d0 <___vfprintf_internal_r+0x500>
 1006f44:	00c01b04 	movi	r3,108
 1006f48:	10c0dc26 	beq	r2,r3,10072bc <___vfprintf_internal_r+0x4ec>
 1006f4c:	013fffc4 	movi	r4,-1
 1006f50:	91000226 	beq	r18,r4,1006f5c <___vfprintf_internal_r+0x18c>
 1006f54:	d8000b15 	stw	zero,44(sp)
 1006f58:	00000106 	br	1006f60 <___vfprintf_internal_r+0x190>
 1006f5c:	04800044 	movi	r18,1
 1006f60:	01001a44 	movi	r4,105
 1006f64:	11001626 	beq	r2,r4,1006fc0 <___vfprintf_internal_r+0x1f0>
 1006f68:	20800916 	blt	r4,r2,1006f90 <___vfprintf_internal_r+0x1c0>
 1006f6c:	010018c4 	movi	r4,99
 1006f70:	11009226 	beq	r2,r4,10071bc <___vfprintf_internal_r+0x3ec>
 1006f74:	01001904 	movi	r4,100
 1006f78:	11001126 	beq	r2,r4,1006fc0 <___vfprintf_internal_r+0x1f0>
 1006f7c:	01001604 	movi	r4,88
 1006f80:	1100d21e 	bne	r2,r4,10072cc <___vfprintf_internal_r+0x4fc>
 1006f84:	00c00044 	movi	r3,1
 1006f88:	d8c00e15 	stw	r3,56(sp)
 1006f8c:	00001406 	br	1006fe0 <___vfprintf_internal_r+0x210>
 1006f90:	01001cc4 	movi	r4,115
 1006f94:	1100a226 	beq	r2,r4,1007220 <___vfprintf_internal_r+0x450>
 1006f98:	20800416 	blt	r4,r2,1006fac <___vfprintf_internal_r+0x1dc>
 1006f9c:	01001bc4 	movi	r4,111
 1006fa0:	1100ca1e 	bne	r2,r4,10072cc <___vfprintf_internal_r+0x4fc>
 1006fa4:	05000204 	movi	r20,8
 1006fa8:	00000e06 	br	1006fe4 <___vfprintf_internal_r+0x214>
 1006fac:	01001d44 	movi	r4,117
 1006fb0:	11000c26 	beq	r2,r4,1006fe4 <___vfprintf_internal_r+0x214>
 1006fb4:	01001e04 	movi	r4,120
 1006fb8:	11000926 	beq	r2,r4,1006fe0 <___vfprintf_internal_r+0x210>
 1006fbc:	0000c306 	br	10072cc <___vfprintf_internal_r+0x4fc>
 1006fc0:	b8800104 	addi	r2,r23,4
 1006fc4:	b0000726 	beq	r22,zero,1006fe4 <___vfprintf_internal_r+0x214>
 1006fc8:	d8800d15 	stw	r2,52(sp)
 1006fcc:	bdc00017 	ldw	r23,0(r23)
 1006fd0:	b800080e 	bge	r23,zero,1006ff4 <___vfprintf_internal_r+0x224>
 1006fd4:	05efc83a 	sub	r23,zero,r23
 1006fd8:	02400044 	movi	r9,1
 1006fdc:	00000606 	br	1006ff8 <___vfprintf_internal_r+0x228>
 1006fe0:	05000404 	movi	r20,16
 1006fe4:	b8c00104 	addi	r3,r23,4
 1006fe8:	d8c00d15 	stw	r3,52(sp)
 1006fec:	bdc00017 	ldw	r23,0(r23)
 1006ff0:	002d883a 	mov	r22,zero
 1006ff4:	0013883a 	mov	r9,zero
 1006ff8:	002b883a 	mov	r21,zero
 1006ffc:	dd4d883a 	add	r6,sp,r21
 1007000:	b8001626 	beq	r23,zero,100705c <___vfprintf_internal_r+0x28c>
 1007004:	b809883a 	mov	r4,r23
 1007008:	a00b883a 	mov	r5,r20
 100700c:	d9801015 	stw	r6,64(sp)
 1007010:	da401115 	stw	r9,68(sp)
 1007014:	1006c1c0 	call	1006c1c <__udivsi3>
 1007018:	a089383a 	mul	r4,r20,r2
 100701c:	00c00244 	movi	r3,9
 1007020:	d9801017 	ldw	r6,64(sp)
 1007024:	b92fc83a 	sub	r23,r23,r4
 1007028:	da401117 	ldw	r9,68(sp)
 100702c:	1dc00216 	blt	r3,r23,1007038 <___vfprintf_internal_r+0x268>
 1007030:	bdc00c04 	addi	r23,r23,48
 1007034:	00000506 	br	100704c <___vfprintf_internal_r+0x27c>
 1007038:	d8c00e17 	ldw	r3,56(sp)
 100703c:	18000226 	beq	r3,zero,1007048 <___vfprintf_internal_r+0x278>
 1007040:	bdc00dc4 	addi	r23,r23,55
 1007044:	00000106 	br	100704c <___vfprintf_internal_r+0x27c>
 1007048:	bdc015c4 	addi	r23,r23,87
 100704c:	35c00005 	stb	r23,0(r6)
 1007050:	ad400044 	addi	r21,r21,1
 1007054:	102f883a 	mov	r23,r2
 1007058:	003fe806 	br	1006ffc <__alt_data_end+0xfffe60a4>
 100705c:	36c7c83a 	sub	r3,r6,sp
 1007060:	d8c00a15 	stw	r3,40(sp)
 1007064:	90c5c83a 	sub	r2,r18,r3
 1007068:	302f883a 	mov	r23,r6
 100706c:	00800e0e 	bge	zero,r2,10070a8 <___vfprintf_internal_r+0x2d8>
 1007070:	302b883a 	mov	r21,r6
 1007074:	3085883a 	add	r2,r6,r2
 1007078:	01400c04 	movi	r5,48
 100707c:	d8c00917 	ldw	r3,36(sp)
 1007080:	a809883a 	mov	r4,r21
 1007084:	a8c0052e 	bgeu	r21,r3,100709c <___vfprintf_internal_r+0x2cc>
 1007088:	ad400044 	addi	r21,r21,1
 100708c:	21400005 	stb	r5,0(r4)
 1007090:	a82f883a 	mov	r23,r21
 1007094:	a8bff91e 	bne	r21,r2,100707c <__alt_data_end+0xfffe6124>
 1007098:	00000106 	br	10070a0 <___vfprintf_internal_r+0x2d0>
 100709c:	a82f883a 	mov	r23,r21
 10070a0:	aeebc83a 	sub	r21,r21,sp
 10070a4:	dd400a15 	stw	r21,40(sp)
 10070a8:	d8c00a17 	ldw	r3,40(sp)
 10070ac:	1a51883a 	add	r8,r3,r9
 10070b0:	d8c00b17 	ldw	r3,44(sp)
 10070b4:	8a2bc83a 	sub	r21,r17,r8
 10070b8:	18001726 	beq	r3,zero,1007118 <___vfprintf_internal_r+0x348>
 10070bc:	48000a26 	beq	r9,zero,10070e8 <___vfprintf_internal_r+0x318>
 10070c0:	00800b44 	movi	r2,45
 10070c4:	d8800805 	stb	r2,32(sp)
 10070c8:	e0800117 	ldw	r2,4(fp)
 10070cc:	9809883a 	mov	r4,r19
 10070d0:	e00b883a 	mov	r5,fp
 10070d4:	d9800804 	addi	r6,sp,32
 10070d8:	01c00044 	movi	r7,1
 10070dc:	103ee83a 	callr	r2
 10070e0:	10004d1e 	bne	r2,zero,1007218 <___vfprintf_internal_r+0x448>
 10070e4:	84000044 	addi	r16,r16,1
 10070e8:	0540070e 	bge	zero,r21,1007108 <___vfprintf_internal_r+0x338>
 10070ec:	9809883a 	mov	r4,r19
 10070f0:	e00b883a 	mov	r5,fp
 10070f4:	01800c04 	movi	r6,48
 10070f8:	a80f883a 	mov	r7,r21
 10070fc:	1006d640 	call	1006d64 <print_repeat>
 1007100:	1000451e 	bne	r2,zero,1007218 <___vfprintf_internal_r+0x448>
 1007104:	8561883a 	add	r16,r16,r21
 1007108:	d8c00a17 	ldw	r3,40(sp)
 100710c:	b811883a 	mov	r8,r23
 1007110:	1debc83a 	sub	r21,r3,r23
 1007114:	00002206 	br	10071a0 <___vfprintf_internal_r+0x3d0>
 1007118:	0540090e 	bge	zero,r21,1007140 <___vfprintf_internal_r+0x370>
 100711c:	9809883a 	mov	r4,r19
 1007120:	e00b883a 	mov	r5,fp
 1007124:	01800804 	movi	r6,32
 1007128:	a80f883a 	mov	r7,r21
 100712c:	da401115 	stw	r9,68(sp)
 1007130:	1006d640 	call	1006d64 <print_repeat>
 1007134:	da401117 	ldw	r9,68(sp)
 1007138:	1000371e 	bne	r2,zero,1007218 <___vfprintf_internal_r+0x448>
 100713c:	8561883a 	add	r16,r16,r21
 1007140:	483ff126 	beq	r9,zero,1007108 <__alt_data_end+0xfffe61b0>
 1007144:	00800b44 	movi	r2,45
 1007148:	d8800805 	stb	r2,32(sp)
 100714c:	e0800117 	ldw	r2,4(fp)
 1007150:	9809883a 	mov	r4,r19
 1007154:	e00b883a 	mov	r5,fp
 1007158:	d9800804 	addi	r6,sp,32
 100715c:	01c00044 	movi	r7,1
 1007160:	103ee83a 	callr	r2
 1007164:	10002c1e 	bne	r2,zero,1007218 <___vfprintf_internal_r+0x448>
 1007168:	84000044 	addi	r16,r16,1
 100716c:	003fe606 	br	1007108 <__alt_data_end+0xfffe61b0>
 1007170:	423fffc4 	addi	r8,r8,-1
 1007174:	40800003 	ldbu	r2,0(r8)
 1007178:	9809883a 	mov	r4,r19
 100717c:	e00b883a 	mov	r5,fp
 1007180:	d8800805 	stb	r2,32(sp)
 1007184:	e0800117 	ldw	r2,4(fp)
 1007188:	d9800804 	addi	r6,sp,32
 100718c:	da001015 	stw	r8,64(sp)
 1007190:	01c00044 	movi	r7,1
 1007194:	103ee83a 	callr	r2
 1007198:	da001017 	ldw	r8,64(sp)
 100719c:	10001e1e 	bne	r2,zero,1007218 <___vfprintf_internal_r+0x448>
 10071a0:	8205c83a 	sub	r2,r16,r8
 10071a4:	4549883a 	add	r4,r8,r21
 10071a8:	b885883a 	add	r2,r23,r2
 10071ac:	013ff016 	blt	zero,r4,1007170 <__alt_data_end+0xfffe6218>
 10071b0:	1021883a 	mov	r16,r2
 10071b4:	ddc00d17 	ldw	r23,52(sp)
 10071b8:	00004406 	br	10072cc <___vfprintf_internal_r+0x4fc>
 10071bc:	00800044 	movi	r2,1
 10071c0:	1440080e 	bge	r2,r17,10071e4 <___vfprintf_internal_r+0x414>
 10071c4:	8d7fffc4 	addi	r21,r17,-1
 10071c8:	9809883a 	mov	r4,r19
 10071cc:	e00b883a 	mov	r5,fp
 10071d0:	01800804 	movi	r6,32
 10071d4:	a80f883a 	mov	r7,r21
 10071d8:	1006d640 	call	1006d64 <print_repeat>
 10071dc:	10000e1e 	bne	r2,zero,1007218 <___vfprintf_internal_r+0x448>
 10071e0:	8561883a 	add	r16,r16,r21
 10071e4:	b8800017 	ldw	r2,0(r23)
 10071e8:	9809883a 	mov	r4,r19
 10071ec:	e00b883a 	mov	r5,fp
 10071f0:	d8800005 	stb	r2,0(sp)
 10071f4:	e0800117 	ldw	r2,4(fp)
 10071f8:	d80d883a 	mov	r6,sp
 10071fc:	01c00044 	movi	r7,1
 1007200:	bd400104 	addi	r21,r23,4
 1007204:	103ee83a 	callr	r2
 1007208:	1000031e 	bne	r2,zero,1007218 <___vfprintf_internal_r+0x448>
 100720c:	84000044 	addi	r16,r16,1
 1007210:	a82f883a 	mov	r23,r21
 1007214:	00002d06 	br	10072cc <___vfprintf_internal_r+0x4fc>
 1007218:	00bfffc4 	movi	r2,-1
 100721c:	00003106 	br	10072e4 <___vfprintf_internal_r+0x514>
 1007220:	bd400017 	ldw	r21,0(r23)
 1007224:	b8c00104 	addi	r3,r23,4
 1007228:	d8c00a15 	stw	r3,40(sp)
 100722c:	a809883a 	mov	r4,r21
 1007230:	1006d480 	call	1006d48 <strlen>
 1007234:	8893c83a 	sub	r9,r17,r2
 1007238:	102f883a 	mov	r23,r2
 100723c:	0240090e 	bge	zero,r9,1007264 <___vfprintf_internal_r+0x494>
 1007240:	480f883a 	mov	r7,r9
 1007244:	9809883a 	mov	r4,r19
 1007248:	e00b883a 	mov	r5,fp
 100724c:	01800804 	movi	r6,32
 1007250:	da401115 	stw	r9,68(sp)
 1007254:	1006d640 	call	1006d64 <print_repeat>
 1007258:	da401117 	ldw	r9,68(sp)
 100725c:	103fee1e 	bne	r2,zero,1007218 <__alt_data_end+0xfffe62c0>
 1007260:	8261883a 	add	r16,r16,r9
 1007264:	e0800117 	ldw	r2,4(fp)
 1007268:	9809883a 	mov	r4,r19
 100726c:	e00b883a 	mov	r5,fp
 1007270:	a80d883a 	mov	r6,r21
 1007274:	b80f883a 	mov	r7,r23
 1007278:	103ee83a 	callr	r2
 100727c:	103fe61e 	bne	r2,zero,1007218 <__alt_data_end+0xfffe62c0>
 1007280:	85e1883a 	add	r16,r16,r23
 1007284:	ddc00a17 	ldw	r23,40(sp)
 1007288:	00001006 	br	10072cc <___vfprintf_internal_r+0x4fc>
 100728c:	05800044 	movi	r22,1
 1007290:	04bfffc4 	movi	r18,-1
 1007294:	d8000e15 	stw	zero,56(sp)
 1007298:	05000284 	movi	r20,10
 100729c:	9023883a 	mov	r17,r18
 10072a0:	d8000c15 	stw	zero,48(sp)
 10072a4:	d8000b15 	stw	zero,44(sp)
 10072a8:	b02b883a 	mov	r21,r22
 10072ac:	00000806 	br	10072d0 <___vfprintf_internal_r+0x500>
 10072b0:	dd400b15 	stw	r21,44(sp)
 10072b4:	05400084 	movi	r21,2
 10072b8:	00000506 	br	10072d0 <___vfprintf_internal_r+0x500>
 10072bc:	00c00044 	movi	r3,1
 10072c0:	d8c00c15 	stw	r3,48(sp)
 10072c4:	054000c4 	movi	r21,3
 10072c8:	00000106 	br	10072d0 <___vfprintf_internal_r+0x500>
 10072cc:	002b883a 	mov	r21,zero
 10072d0:	d8c00f17 	ldw	r3,60(sp)
 10072d4:	18c00044 	addi	r3,r3,1
 10072d8:	d8c00f15 	stw	r3,60(sp)
 10072dc:	003ed606 	br	1006e38 <__alt_data_end+0xfffe5ee0>
 10072e0:	8005883a 	mov	r2,r16
 10072e4:	dfc01b17 	ldw	ra,108(sp)
 10072e8:	df001a17 	ldw	fp,104(sp)
 10072ec:	ddc01917 	ldw	r23,100(sp)
 10072f0:	dd801817 	ldw	r22,96(sp)
 10072f4:	dd401717 	ldw	r21,92(sp)
 10072f8:	dd001617 	ldw	r20,88(sp)
 10072fc:	dcc01517 	ldw	r19,84(sp)
 1007300:	dc801417 	ldw	r18,80(sp)
 1007304:	dc401317 	ldw	r17,76(sp)
 1007308:	dc001217 	ldw	r16,72(sp)
 100730c:	dec01c04 	addi	sp,sp,112
 1007310:	f800283a 	ret

01007314 <__vfprintf_internal>:
 1007314:	2007883a 	mov	r3,r4
 1007318:	01004074 	movhi	r4,257
 100731c:	2129c604 	addi	r4,r4,-22760
 1007320:	21000017 	ldw	r4,0(r4)
 1007324:	2805883a 	mov	r2,r5
 1007328:	300f883a 	mov	r7,r6
 100732c:	180b883a 	mov	r5,r3
 1007330:	100d883a 	mov	r6,r2
 1007334:	1006dd01 	jmpi	1006dd0 <___vfprintf_internal_r>

01007338 <__sfvwrite_small_dev>:
 1007338:	2880000b 	ldhu	r2,0(r5)
 100733c:	defffa04 	addi	sp,sp,-24
 1007340:	dc000015 	stw	r16,0(sp)
 1007344:	dfc00515 	stw	ra,20(sp)
 1007348:	dd000415 	stw	r20,16(sp)
 100734c:	dcc00315 	stw	r19,12(sp)
 1007350:	dc800215 	stw	r18,8(sp)
 1007354:	dc400115 	stw	r17,4(sp)
 1007358:	1080020c 	andi	r2,r2,8
 100735c:	2821883a 	mov	r16,r5
 1007360:	10001726 	beq	r2,zero,10073c0 <__sfvwrite_small_dev+0x88>
 1007364:	2880008f 	ldh	r2,2(r5)
 1007368:	10001216 	blt	r2,zero,10073b4 <__sfvwrite_small_dev+0x7c>
 100736c:	2027883a 	mov	r19,r4
 1007370:	3025883a 	mov	r18,r6
 1007374:	3823883a 	mov	r17,r7
 1007378:	05010004 	movi	r20,1024
 100737c:	04400b0e 	bge	zero,r17,10073ac <__sfvwrite_small_dev+0x74>
 1007380:	8140008f 	ldh	r5,2(r16)
 1007384:	880f883a 	mov	r7,r17
 1007388:	a440010e 	bge	r20,r17,1007390 <__sfvwrite_small_dev+0x58>
 100738c:	01c10004 	movi	r7,1024
 1007390:	9809883a 	mov	r4,r19
 1007394:	900d883a 	mov	r6,r18
 1007398:	10073e40 	call	10073e4 <_write_r>
 100739c:	0080050e 	bge	zero,r2,10073b4 <__sfvwrite_small_dev+0x7c>
 10073a0:	88a3c83a 	sub	r17,r17,r2
 10073a4:	90a5883a 	add	r18,r18,r2
 10073a8:	003ff406 	br	100737c <__alt_data_end+0xfffe6424>
 10073ac:	0005883a 	mov	r2,zero
 10073b0:	00000406 	br	10073c4 <__sfvwrite_small_dev+0x8c>
 10073b4:	8080000b 	ldhu	r2,0(r16)
 10073b8:	10801014 	ori	r2,r2,64
 10073bc:	8080000d 	sth	r2,0(r16)
 10073c0:	00bfffc4 	movi	r2,-1
 10073c4:	dfc00517 	ldw	ra,20(sp)
 10073c8:	dd000417 	ldw	r20,16(sp)
 10073cc:	dcc00317 	ldw	r19,12(sp)
 10073d0:	dc800217 	ldw	r18,8(sp)
 10073d4:	dc400117 	ldw	r17,4(sp)
 10073d8:	dc000017 	ldw	r16,0(sp)
 10073dc:	dec00604 	addi	sp,sp,24
 10073e0:	f800283a 	ret

010073e4 <_write_r>:
 10073e4:	defffd04 	addi	sp,sp,-12
 10073e8:	dc000015 	stw	r16,0(sp)
 10073ec:	04004074 	movhi	r16,257
 10073f0:	dc400115 	stw	r17,4(sp)
 10073f4:	842bc804 	addi	r16,r16,-20704
 10073f8:	2023883a 	mov	r17,r4
 10073fc:	2809883a 	mov	r4,r5
 1007400:	300b883a 	mov	r5,r6
 1007404:	380d883a 	mov	r6,r7
 1007408:	dfc00215 	stw	ra,8(sp)
 100740c:	80000015 	stw	zero,0(r16)
 1007410:	100783c0 	call	100783c <write>
 1007414:	00ffffc4 	movi	r3,-1
 1007418:	10c0031e 	bne	r2,r3,1007428 <_write_r+0x44>
 100741c:	80c00017 	ldw	r3,0(r16)
 1007420:	18000126 	beq	r3,zero,1007428 <_write_r+0x44>
 1007424:	88c00015 	stw	r3,0(r17)
 1007428:	dfc00217 	ldw	ra,8(sp)
 100742c:	dc400117 	ldw	r17,4(sp)
 1007430:	dc000017 	ldw	r16,0(sp)
 1007434:	dec00304 	addi	sp,sp,12
 1007438:	f800283a 	ret

0100743c <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 100743c:	defffb04 	addi	sp,sp,-20
 1007440:	df000415 	stw	fp,16(sp)
 1007444:	df000404 	addi	fp,sp,16
 1007448:	e13ffe15 	stw	r4,-8(fp)
 100744c:	e17fff15 	stw	r5,-4(fp)
  {
    len = NIOS2_DCACHE_SIZE;
  }
  #endif

  end = ((char*) start) + len; 
 1007450:	e0fffe17 	ldw	r3,-8(fp)
 1007454:	e0bfff17 	ldw	r2,-4(fp)
 1007458:	1885883a 	add	r2,r3,r2
 100745c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 1007460:	e0bffe17 	ldw	r2,-8(fp)
 1007464:	e0bffc15 	stw	r2,-16(fp)
 1007468:	00000506 	br	1007480 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
 100746c:	e0bffc17 	ldw	r2,-16(fp)
 1007470:	1000001b 	flushda	0(r2)
  }
  #endif

  end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 1007474:	e0bffc17 	ldw	r2,-16(fp)
 1007478:	10800804 	addi	r2,r2,32
 100747c:	e0bffc15 	stw	r2,-16(fp)
 1007480:	e0fffc17 	ldw	r3,-16(fp)
 1007484:	e0bffd17 	ldw	r2,-12(fp)
 1007488:	18bff836 	bltu	r3,r2,100746c <__alt_data_end+0xfffe6514>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
 100748c:	e0bffe17 	ldw	r2,-8(fp)
 1007490:	108007cc 	andi	r2,r2,31
 1007494:	10000226 	beq	r2,zero,10074a0 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
 1007498:	e0bffc17 	ldw	r2,-16(fp)
 100749c:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 10074a0:	e037883a 	mov	sp,fp
 10074a4:	df000017 	ldw	fp,0(sp)
 10074a8:	dec00104 	addi	sp,sp,4
 10074ac:	f800283a 	ret

010074b0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 10074b0:	defff004 	addi	sp,sp,-64
 10074b4:	df000f15 	stw	fp,60(sp)
 10074b8:	df000f04 	addi	fp,sp,60
 10074bc:	e13ffd15 	stw	r4,-12(fp)
 10074c0:	e17ffe15 	stw	r5,-8(fp)
 10074c4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 10074c8:	00bffa84 	movi	r2,-22
 10074cc:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 10074d0:	e0bffd17 	ldw	r2,-12(fp)
 10074d4:	10800828 	cmpgeui	r2,r2,32
 10074d8:	10005c1e 	bne	r2,zero,100764c <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10074dc:	0005303a 	rdctl	r2,status
 10074e0:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10074e4:	e0fff317 	ldw	r3,-52(fp)
 10074e8:	00bfff84 	movi	r2,-2
 10074ec:	1884703a 	and	r2,r3,r2
 10074f0:	1001703a 	wrctl	status,r2
  
  return context;
 10074f4:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 10074f8:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
 10074fc:	00804074 	movhi	r2,257
 1007500:	10ad8c04 	addi	r2,r2,-18896
 1007504:	e0fffd17 	ldw	r3,-12(fp)
 1007508:	180690fa 	slli	r3,r3,3
 100750c:	10c5883a 	add	r2,r2,r3
 1007510:	e0ffff17 	ldw	r3,-4(fp)
 1007514:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 1007518:	00804074 	movhi	r2,257
 100751c:	10ad8c04 	addi	r2,r2,-18896
 1007520:	e0fffd17 	ldw	r3,-12(fp)
 1007524:	180690fa 	slli	r3,r3,3
 1007528:	10c5883a 	add	r2,r2,r3
 100752c:	10800104 	addi	r2,r2,4
 1007530:	e0fffe17 	ldw	r3,-8(fp)
 1007534:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1007538:	e0bfff17 	ldw	r2,-4(fp)
 100753c:	10001f26 	beq	r2,zero,10075bc <alt_irq_register+0x10c>
 1007540:	e0bffd17 	ldw	r2,-12(fp)
 1007544:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1007548:	0005303a 	rdctl	r2,status
 100754c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1007550:	e0fff517 	ldw	r3,-44(fp)
 1007554:	00bfff84 	movi	r2,-2
 1007558:	1884703a 	and	r2,r3,r2
 100755c:	1001703a 	wrctl	status,r2
  
  return context;
 1007560:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1007564:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
 1007568:	e0bff417 	ldw	r2,-48(fp)
 100756c:	00c00044 	movi	r3,1
 1007570:	1884983a 	sll	r2,r3,r2
 1007574:	1007883a 	mov	r3,r2
 1007578:	00804074 	movhi	r2,257
 100757c:	10abc904 	addi	r2,r2,-20700
 1007580:	10800017 	ldw	r2,0(r2)
 1007584:	1886b03a 	or	r3,r3,r2
 1007588:	00804074 	movhi	r2,257
 100758c:	10abc904 	addi	r2,r2,-20700
 1007590:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1007594:	00804074 	movhi	r2,257
 1007598:	10abc904 	addi	r2,r2,-20700
 100759c:	10800017 	ldw	r2,0(r2)
 10075a0:	100170fa 	wrctl	ienable,r2
 10075a4:	e0bff617 	ldw	r2,-40(fp)
 10075a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10075ac:	e0bff717 	ldw	r2,-36(fp)
 10075b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10075b4:	0005883a 	mov	r2,zero
 10075b8:	00001f06 	br	1007638 <alt_irq_register+0x188>
 10075bc:	e0bffd17 	ldw	r2,-12(fp)
 10075c0:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10075c4:	0005303a 	rdctl	r2,status
 10075c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10075cc:	e0fff917 	ldw	r3,-28(fp)
 10075d0:	00bfff84 	movi	r2,-2
 10075d4:	1884703a 	and	r2,r3,r2
 10075d8:	1001703a 	wrctl	status,r2
  
  return context;
 10075dc:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10075e0:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
 10075e4:	e0bff817 	ldw	r2,-32(fp)
 10075e8:	00c00044 	movi	r3,1
 10075ec:	1884983a 	sll	r2,r3,r2
 10075f0:	0084303a 	nor	r2,zero,r2
 10075f4:	1007883a 	mov	r3,r2
 10075f8:	00804074 	movhi	r2,257
 10075fc:	10abc904 	addi	r2,r2,-20700
 1007600:	10800017 	ldw	r2,0(r2)
 1007604:	1886703a 	and	r3,r3,r2
 1007608:	00804074 	movhi	r2,257
 100760c:	10abc904 	addi	r2,r2,-20700
 1007610:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1007614:	00804074 	movhi	r2,257
 1007618:	10abc904 	addi	r2,r2,-20700
 100761c:	10800017 	ldw	r2,0(r2)
 1007620:	100170fa 	wrctl	ienable,r2
 1007624:	e0bffa17 	ldw	r2,-24(fp)
 1007628:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100762c:	e0bffb17 	ldw	r2,-20(fp)
 1007630:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1007634:	0005883a 	mov	r2,zero
 1007638:	e0bff115 	stw	r2,-60(fp)
 100763c:	e0bff217 	ldw	r2,-56(fp)
 1007640:	e0bffc15 	stw	r2,-16(fp)
 1007644:	e0bffc17 	ldw	r2,-16(fp)
 1007648:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 100764c:	e0bff117 	ldw	r2,-60(fp)
}
 1007650:	e037883a 	mov	sp,fp
 1007654:	df000017 	ldw	fp,0(sp)
 1007658:	dec00104 	addi	sp,sp,4
 100765c:	f800283a 	ret

01007660 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1007660:	defffc04 	addi	sp,sp,-16
 1007664:	df000315 	stw	fp,12(sp)
 1007668:	df000304 	addi	fp,sp,12
 100766c:	e13ffd15 	stw	r4,-12(fp)
 1007670:	e17ffe15 	stw	r5,-8(fp)
 1007674:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1007678:	e0fffe17 	ldw	r3,-8(fp)
 100767c:	e0bffd17 	ldw	r2,-12(fp)
 1007680:	18800c26 	beq	r3,r2,10076b4 <alt_load_section+0x54>
  {
    while( to != end )
 1007684:	00000806 	br	10076a8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 1007688:	e0bffe17 	ldw	r2,-8(fp)
 100768c:	10c00104 	addi	r3,r2,4
 1007690:	e0fffe15 	stw	r3,-8(fp)
 1007694:	e0fffd17 	ldw	r3,-12(fp)
 1007698:	19000104 	addi	r4,r3,4
 100769c:	e13ffd15 	stw	r4,-12(fp)
 10076a0:	18c00017 	ldw	r3,0(r3)
 10076a4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 10076a8:	e0fffe17 	ldw	r3,-8(fp)
 10076ac:	e0bfff17 	ldw	r2,-4(fp)
 10076b0:	18bff51e 	bne	r3,r2,1007688 <__alt_data_end+0xfffe6730>
    {
      *to++ = *from++;
    }
  }
}
 10076b4:	e037883a 	mov	sp,fp
 10076b8:	df000017 	ldw	fp,0(sp)
 10076bc:	dec00104 	addi	sp,sp,4
 10076c0:	f800283a 	ret

010076c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 10076c4:	defffe04 	addi	sp,sp,-8
 10076c8:	dfc00115 	stw	ra,4(sp)
 10076cc:	df000015 	stw	fp,0(sp)
 10076d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 10076d4:	01004074 	movhi	r4,257
 10076d8:	2129d404 	addi	r4,r4,-22704
 10076dc:	01404074 	movhi	r5,257
 10076e0:	2967e104 	addi	r5,r5,-24700
 10076e4:	01804074 	movhi	r6,257
 10076e8:	31a9d404 	addi	r6,r6,-22704
 10076ec:	10076600 	call	1007660 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 10076f0:	01004034 	movhi	r4,256
 10076f4:	21000804 	addi	r4,r4,32
 10076f8:	01404034 	movhi	r5,256
 10076fc:	29400804 	addi	r5,r5,32
 1007700:	01804034 	movhi	r6,256
 1007704:	31806f04 	addi	r6,r6,444
 1007708:	10076600 	call	1007660 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100770c:	01004074 	movhi	r4,257
 1007710:	21277e04 	addi	r4,r4,-25096
 1007714:	01404074 	movhi	r5,257
 1007718:	29677e04 	addi	r5,r5,-25096
 100771c:	01804074 	movhi	r6,257
 1007720:	31a7e104 	addi	r6,r6,-24700
 1007724:	10076600 	call	1007660 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1007728:	1008b700 	call	1008b70 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100772c:	1008f640 	call	1008f64 <alt_icache_flush_all>
}
 1007730:	e037883a 	mov	sp,fp
 1007734:	dfc00117 	ldw	ra,4(sp)
 1007738:	df000017 	ldw	fp,0(sp)
 100773c:	dec00204 	addi	sp,sp,8
 1007740:	f800283a 	ret

01007744 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1007744:	defffd04 	addi	sp,sp,-12
 1007748:	dfc00215 	stw	ra,8(sp)
 100774c:	df000115 	stw	fp,4(sp)
 1007750:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1007754:	0009883a 	mov	r4,zero
 1007758:	100796c0 	call	100796c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 100775c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1007760:	10079a00 	call	10079a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1007764:	01004074 	movhi	r4,257
 1007768:	2127d104 	addi	r4,r4,-24764
 100776c:	01404074 	movhi	r5,257
 1007770:	2967d104 	addi	r5,r5,-24764
 1007774:	01804074 	movhi	r6,257
 1007778:	31a7d104 	addi	r6,r6,-24764
 100777c:	10093240 	call	1009324 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1007780:	1008e1c0 	call	1008e1c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1007784:	01004074 	movhi	r4,257
 1007788:	21239e04 	addi	r4,r4,-29064
 100778c:	1009a800 	call	1009a80 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1007790:	d1220717 	ldw	r4,-30692(gp)
 1007794:	d0e20817 	ldw	r3,-30688(gp)
 1007798:	d0a20917 	ldw	r2,-30684(gp)
 100779c:	180b883a 	mov	r5,r3
 10077a0:	100d883a 	mov	r6,r2
 10077a4:	10003f80 	call	10003f8 <main>
 10077a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 10077ac:	01000044 	movi	r4,1
 10077b0:	1008aa00 	call	1008aa0 <close>
  exit (result);
 10077b4:	e13fff17 	ldw	r4,-4(fp)
 10077b8:	1009a940 	call	1009a94 <exit>

010077bc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 10077bc:	defffd04 	addi	sp,sp,-12
 10077c0:	dfc00215 	stw	ra,8(sp)
 10077c4:	df000115 	stw	fp,4(sp)
 10077c8:	df000104 	addi	fp,sp,4
 10077cc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 10077d0:	e13fff17 	ldw	r4,-4(fp)
 10077d4:	10088f80 	call	10088f8 <alt_busy_sleep>
}
 10077d8:	e037883a 	mov	sp,fp
 10077dc:	dfc00117 	ldw	ra,4(sp)
 10077e0:	df000017 	ldw	fp,0(sp)
 10077e4:	dec00204 	addi	sp,sp,8
 10077e8:	f800283a 	ret

010077ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10077ec:	defffe04 	addi	sp,sp,-8
 10077f0:	dfc00115 	stw	ra,4(sp)
 10077f4:	df000015 	stw	fp,0(sp)
 10077f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10077fc:	00804074 	movhi	r2,257
 1007800:	10a9d104 	addi	r2,r2,-22716
 1007804:	10800017 	ldw	r2,0(r2)
 1007808:	10000526 	beq	r2,zero,1007820 <alt_get_errno+0x34>
 100780c:	00804074 	movhi	r2,257
 1007810:	10a9d104 	addi	r2,r2,-22716
 1007814:	10800017 	ldw	r2,0(r2)
 1007818:	103ee83a 	callr	r2
 100781c:	00000206 	br	1007828 <alt_get_errno+0x3c>
 1007820:	00804074 	movhi	r2,257
 1007824:	10abc804 	addi	r2,r2,-20704
}
 1007828:	e037883a 	mov	sp,fp
 100782c:	dfc00117 	ldw	ra,4(sp)
 1007830:	df000017 	ldw	fp,0(sp)
 1007834:	dec00204 	addi	sp,sp,8
 1007838:	f800283a 	ret

0100783c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100783c:	defff904 	addi	sp,sp,-28
 1007840:	dfc00615 	stw	ra,24(sp)
 1007844:	df000515 	stw	fp,20(sp)
 1007848:	df000504 	addi	fp,sp,20
 100784c:	e13ffd15 	stw	r4,-12(fp)
 1007850:	e17ffe15 	stw	r5,-8(fp)
 1007854:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1007858:	e0bffd17 	ldw	r2,-12(fp)
 100785c:	10000616 	blt	r2,zero,1007878 <write+0x3c>
 1007860:	e0bffd17 	ldw	r2,-12(fp)
 1007864:	10c00324 	muli	r3,r2,12
 1007868:	00804074 	movhi	r2,257
 100786c:	10a96304 	addi	r2,r2,-23156
 1007870:	1885883a 	add	r2,r3,r2
 1007874:	00000106 	br	100787c <write+0x40>
 1007878:	0005883a 	mov	r2,zero
 100787c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1007880:	e0bffb17 	ldw	r2,-20(fp)
 1007884:	10002126 	beq	r2,zero,100790c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1007888:	e0bffb17 	ldw	r2,-20(fp)
 100788c:	10800217 	ldw	r2,8(r2)
 1007890:	108000cc 	andi	r2,r2,3
 1007894:	10001826 	beq	r2,zero,10078f8 <write+0xbc>
 1007898:	e0bffb17 	ldw	r2,-20(fp)
 100789c:	10800017 	ldw	r2,0(r2)
 10078a0:	10800617 	ldw	r2,24(r2)
 10078a4:	10001426 	beq	r2,zero,10078f8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 10078a8:	e0bffb17 	ldw	r2,-20(fp)
 10078ac:	10800017 	ldw	r2,0(r2)
 10078b0:	10800617 	ldw	r2,24(r2)
 10078b4:	e0ffff17 	ldw	r3,-4(fp)
 10078b8:	e13ffb17 	ldw	r4,-20(fp)
 10078bc:	e17ffe17 	ldw	r5,-8(fp)
 10078c0:	180d883a 	mov	r6,r3
 10078c4:	103ee83a 	callr	r2
 10078c8:	e0bffc15 	stw	r2,-16(fp)
 10078cc:	e0bffc17 	ldw	r2,-16(fp)
 10078d0:	1000070e 	bge	r2,zero,10078f0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 10078d4:	10077ec0 	call	10077ec <alt_get_errno>
 10078d8:	1007883a 	mov	r3,r2
 10078dc:	e0bffc17 	ldw	r2,-16(fp)
 10078e0:	0085c83a 	sub	r2,zero,r2
 10078e4:	18800015 	stw	r2,0(r3)
        return -1;
 10078e8:	00bfffc4 	movi	r2,-1
 10078ec:	00000c06 	br	1007920 <write+0xe4>
      }
      return rval;
 10078f0:	e0bffc17 	ldw	r2,-16(fp)
 10078f4:	00000a06 	br	1007920 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 10078f8:	10077ec0 	call	10077ec <alt_get_errno>
 10078fc:	1007883a 	mov	r3,r2
 1007900:	00800344 	movi	r2,13
 1007904:	18800015 	stw	r2,0(r3)
 1007908:	00000406 	br	100791c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100790c:	10077ec0 	call	10077ec <alt_get_errno>
 1007910:	1007883a 	mov	r3,r2
 1007914:	00801444 	movi	r2,81
 1007918:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100791c:	00bfffc4 	movi	r2,-1
}
 1007920:	e037883a 	mov	sp,fp
 1007924:	dfc00117 	ldw	ra,4(sp)
 1007928:	df000017 	ldw	fp,0(sp)
 100792c:	dec00204 	addi	sp,sp,8
 1007930:	f800283a 	ret

01007934 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1007934:	defffd04 	addi	sp,sp,-12
 1007938:	dfc00215 	stw	ra,8(sp)
 100793c:	df000115 	stw	fp,4(sp)
 1007940:	df000104 	addi	fp,sp,4
 1007944:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1007948:	e13fff17 	ldw	r4,-4(fp)
 100794c:	01404074 	movhi	r5,257
 1007950:	2969ca04 	addi	r5,r5,-22744
 1007954:	1008c300 	call	1008c30 <alt_dev_llist_insert>
}
 1007958:	e037883a 	mov	sp,fp
 100795c:	dfc00117 	ldw	ra,4(sp)
 1007960:	df000017 	ldw	fp,0(sp)
 1007964:	dec00204 	addi	sp,sp,8
 1007968:	f800283a 	ret

0100796c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100796c:	defffd04 	addi	sp,sp,-12
 1007970:	dfc00215 	stw	ra,8(sp)
 1007974:	df000115 	stw	fp,4(sp)
 1007978:	df000104 	addi	fp,sp,4
 100797c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 1007980:	100980c0 	call	100980c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1007984:	00800044 	movi	r2,1
 1007988:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100798c:	e037883a 	mov	sp,fp
 1007990:	dfc00117 	ldw	ra,4(sp)
 1007994:	df000017 	ldw	fp,0(sp)
 1007998:	dec00204 	addi	sp,sp,8
 100799c:	f800283a 	ret

010079a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 10079a0:	defffd04 	addi	sp,sp,-12
 10079a4:	dfc00215 	stw	ra,8(sp)
 10079a8:	df000115 	stw	fp,4(sp)
 10079ac:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 10079b0:	01008034 	movhi	r4,512
 10079b4:	000b883a 	mov	r5,zero
 10079b8:	01800044 	movi	r6,1
 10079bc:	01c0fa04 	movi	r7,1000
 10079c0:	10088700 	call	1008870 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_DMA_INIT ( DMA_0, dma_0);
 10079c4:	008000c4 	movi	r2,3
 10079c8:	d8800015 	stw	r2,0(sp)
 10079cc:	01004074 	movhi	r4,257
 10079d0:	21294004 	addi	r4,r4,-23296
 10079d4:	01404074 	movhi	r5,257
 10079d8:	29694704 	addi	r5,r5,-23268
 10079dc:	01804134 	movhi	r6,260
 10079e0:	31840004 	addi	r6,r6,4096
 10079e4:	000f883a 	mov	r7,zero
 10079e8:	10085140 	call	1008514 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 10079ec:	01004074 	movhi	r4,257
 10079f0:	21294e04 	addi	r4,r4,-23240
 10079f4:	10079340 	call	1007934 <alt_dev_reg>
}
 10079f8:	e037883a 	mov	sp,fp
 10079fc:	dfc00117 	ldw	ra,4(sp)
 1007a00:	df000017 	ldw	fp,0(sp)
 1007a04:	dec00204 	addi	sp,sp,8
 1007a08:	f800283a 	ret

01007a0c <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
 1007a0c:	defffd04 	addi	sp,sp,-12
 1007a10:	dfc00215 	stw	ra,8(sp)
 1007a14:	df000115 	stw	fp,4(sp)
 1007a18:	df000104 	addi	fp,sp,4
 1007a1c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
 1007a20:	e13fff17 	ldw	r4,-4(fp)
 1007a24:	01404074 	movhi	r5,257
 1007a28:	2969cf04 	addi	r5,r5,-22724
 1007a2c:	1008c300 	call	1008c30 <alt_dev_llist_insert>
}
 1007a30:	e037883a 	mov	sp,fp
 1007a34:	dfc00117 	ldw	ra,4(sp)
 1007a38:	df000017 	ldw	fp,0(sp)
 1007a3c:	dec00204 	addi	sp,sp,8
 1007a40:	f800283a 	ret

01007a44 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
 1007a44:	defffd04 	addi	sp,sp,-12
 1007a48:	dfc00215 	stw	ra,8(sp)
 1007a4c:	df000115 	stw	fp,4(sp)
 1007a50:	df000104 	addi	fp,sp,4
 1007a54:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
 1007a58:	e13fff17 	ldw	r4,-4(fp)
 1007a5c:	01404074 	movhi	r5,257
 1007a60:	2969cd04 	addi	r5,r5,-22732
 1007a64:	1008c300 	call	1008c30 <alt_dev_llist_insert>
}
 1007a68:	e037883a 	mov	sp,fp
 1007a6c:	dfc00117 	ldw	ra,4(sp)
 1007a70:	df000017 	ldw	fp,0(sp)
 1007a74:	dec00204 	addi	sp,sp,8
 1007a78:	f800283a 	ret

01007a7c <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
 1007a7c:	defffc04 	addi	sp,sp,-16
 1007a80:	df000315 	stw	fp,12(sp)
 1007a84:	df000304 	addi	fp,sp,12
 1007a88:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
 1007a8c:	e0bfff17 	ldw	r2,-4(fp)
 1007a90:	10c00117 	ldw	r3,4(r2)
 1007a94:	e0bfff17 	ldw	r2,-4(fp)
 1007a98:	10800217 	ldw	r2,8(r2)
 1007a9c:	18802e26 	beq	r3,r2,1007b58 <alt_avalon_dma_launch_bidir+0xdc>
 1007aa0:	e0bfff17 	ldw	r2,-4(fp)
 1007aa4:	10c00317 	ldw	r3,12(r2)
 1007aa8:	e0bfff17 	ldw	r2,-4(fp)
 1007aac:	10800417 	ldw	r2,16(r2)
 1007ab0:	18802926 	beq	r3,r2,1007b58 <alt_avalon_dma_launch_bidir+0xdc>
  {
    priv->active = 1;
 1007ab4:	e0bfff17 	ldw	r2,-4(fp)
 1007ab8:	00c00044 	movi	r3,1
 1007abc:	10c00815 	stw	r3,32(r2)

    tx_slot = &priv->tx_buf[priv->tx_start];
 1007ac0:	e0bfff17 	ldw	r2,-4(fp)
 1007ac4:	10800117 	ldw	r2,4(r2)
 1007ac8:	1004913a 	slli	r2,r2,4
 1007acc:	10800904 	addi	r2,r2,36
 1007ad0:	e0ffff17 	ldw	r3,-4(fp)
 1007ad4:	1885883a 	add	r2,r3,r2
 1007ad8:	e0bffd15 	stw	r2,-12(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
 1007adc:	e0bfff17 	ldw	r2,-4(fp)
 1007ae0:	10800317 	ldw	r2,12(r2)
 1007ae4:	1004913a 	slli	r2,r2,4
 1007ae8:	10801904 	addi	r2,r2,100
 1007aec:	e0ffff17 	ldw	r3,-4(fp)
 1007af0:	1885883a 	add	r2,r3,r2
 1007af4:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
 1007af8:	e0bfff17 	ldw	r2,-4(fp)
 1007afc:	10800017 	ldw	r2,0(r2)
 1007b00:	10800104 	addi	r2,r2,4
 1007b04:	e0fffd17 	ldw	r3,-12(fp)
 1007b08:	18c00017 	ldw	r3,0(r3)
 1007b0c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
 1007b10:	e0bfff17 	ldw	r2,-4(fp)
 1007b14:	10800017 	ldw	r2,0(r2)
 1007b18:	10800204 	addi	r2,r2,8
 1007b1c:	e0fffe17 	ldw	r3,-8(fp)
 1007b20:	18c00017 	ldw	r3,0(r3)
 1007b24:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
 1007b28:	e0bfff17 	ldw	r2,-4(fp)
 1007b2c:	10800017 	ldw	r2,0(r2)
 1007b30:	11000304 	addi	r4,r2,12
 1007b34:	e0bffd17 	ldw	r2,-12(fp)
 1007b38:	11400117 	ldw	r5,4(r2)
 1007b3c:	e0bffe17 	ldw	r2,-8(fp)
 1007b40:	10c00117 	ldw	r3,4(r2)
 1007b44:	2805883a 	mov	r2,r5
 1007b48:	1880012e 	bgeu	r3,r2,1007b50 <alt_avalon_dma_launch_bidir+0xd4>
 1007b4c:	1805883a 	mov	r2,r3
 1007b50:	20800035 	stwio	r2,0(r4)
 1007b54:	00000206 	br	1007b60 <alt_avalon_dma_launch_bidir+0xe4>
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
 1007b58:	e0bfff17 	ldw	r2,-4(fp)
 1007b5c:	10000815 	stw	zero,32(r2)
  }
}
 1007b60:	e037883a 	mov	sp,fp
 1007b64:	df000017 	ldw	fp,0(sp)
 1007b68:	dec00104 	addi	sp,sp,4
 1007b6c:	f800283a 	ret

01007b70 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
 1007b70:	defffd04 	addi	sp,sp,-12
 1007b74:	df000215 	stw	fp,8(sp)
 1007b78:	df000204 	addi	fp,sp,8
 1007b7c:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
 1007b80:	e0bfff17 	ldw	r2,-4(fp)
 1007b84:	10c00117 	ldw	r3,4(r2)
 1007b88:	e0bfff17 	ldw	r2,-4(fp)
 1007b8c:	10800217 	ldw	r2,8(r2)
 1007b90:	18801726 	beq	r3,r2,1007bf0 <alt_avalon_dma_launch_txonly+0x80>
  {
    priv->active = 1;
 1007b94:	e0bfff17 	ldw	r2,-4(fp)
 1007b98:	00c00044 	movi	r3,1
 1007b9c:	10c00815 	stw	r3,32(r2)
    tx_slot      = &priv->tx_buf[priv->tx_start];
 1007ba0:	e0bfff17 	ldw	r2,-4(fp)
 1007ba4:	10800117 	ldw	r2,4(r2)
 1007ba8:	1004913a 	slli	r2,r2,4
 1007bac:	10800904 	addi	r2,r2,36
 1007bb0:	e0ffff17 	ldw	r3,-4(fp)
 1007bb4:	1885883a 	add	r2,r3,r2
 1007bb8:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
 1007bbc:	e0bfff17 	ldw	r2,-4(fp)
 1007bc0:	10800017 	ldw	r2,0(r2)
 1007bc4:	10800104 	addi	r2,r2,4
 1007bc8:	e0fffe17 	ldw	r3,-8(fp)
 1007bcc:	18c00017 	ldw	r3,0(r3)
 1007bd0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
 1007bd4:	e0bfff17 	ldw	r2,-4(fp)
 1007bd8:	10800017 	ldw	r2,0(r2)
 1007bdc:	10800304 	addi	r2,r2,12
 1007be0:	e0fffe17 	ldw	r3,-8(fp)
 1007be4:	18c00117 	ldw	r3,4(r3)
 1007be8:	10c00035 	stwio	r3,0(r2)
 1007bec:	00000206 	br	1007bf8 <alt_avalon_dma_launch_txonly+0x88>
  }
  else
  {
    priv->active = 0;
 1007bf0:	e0bfff17 	ldw	r2,-4(fp)
 1007bf4:	10000815 	stw	zero,32(r2)
  }
}
 1007bf8:	e037883a 	mov	sp,fp
 1007bfc:	df000017 	ldw	fp,0(sp)
 1007c00:	dec00104 	addi	sp,sp,4
 1007c04:	f800283a 	ret

01007c08 <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
 1007c08:	defffd04 	addi	sp,sp,-12
 1007c0c:	df000215 	stw	fp,8(sp)
 1007c10:	df000204 	addi	fp,sp,8
 1007c14:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
 1007c18:	e0bfff17 	ldw	r2,-4(fp)
 1007c1c:	10c00317 	ldw	r3,12(r2)
 1007c20:	e0bfff17 	ldw	r2,-4(fp)
 1007c24:	10800417 	ldw	r2,16(r2)
 1007c28:	18801726 	beq	r3,r2,1007c88 <alt_avalon_dma_launch_rxonly+0x80>
  {
    priv->active = 1;
 1007c2c:	e0bfff17 	ldw	r2,-4(fp)
 1007c30:	00c00044 	movi	r3,1
 1007c34:	10c00815 	stw	r3,32(r2)
    rx_slot      = &priv->rx_buf[priv->rx_start];
 1007c38:	e0bfff17 	ldw	r2,-4(fp)
 1007c3c:	10800317 	ldw	r2,12(r2)
 1007c40:	1004913a 	slli	r2,r2,4
 1007c44:	10801904 	addi	r2,r2,100
 1007c48:	e0ffff17 	ldw	r3,-4(fp)
 1007c4c:	1885883a 	add	r2,r3,r2
 1007c50:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
 1007c54:	e0bfff17 	ldw	r2,-4(fp)
 1007c58:	10800017 	ldw	r2,0(r2)
 1007c5c:	10800204 	addi	r2,r2,8
 1007c60:	e0fffe17 	ldw	r3,-8(fp)
 1007c64:	18c00017 	ldw	r3,0(r3)
 1007c68:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
 1007c6c:	e0bfff17 	ldw	r2,-4(fp)
 1007c70:	10800017 	ldw	r2,0(r2)
 1007c74:	10800304 	addi	r2,r2,12
 1007c78:	e0fffe17 	ldw	r3,-8(fp)
 1007c7c:	18c00117 	ldw	r3,4(r3)
 1007c80:	10c00035 	stwio	r3,0(r2)
 1007c84:	00000206 	br	1007c90 <alt_avalon_dma_launch_rxonly+0x88>
  }
  else
  {
    priv->active = 0;
 1007c88:	e0bfff17 	ldw	r2,-4(fp)
 1007c8c:	10000815 	stw	zero,32(r2)
  }
}
 1007c90:	e037883a 	mov	sp,fp
 1007c94:	df000017 	ldw	fp,0(sp)
 1007c98:	dec00104 	addi	sp,sp,4
 1007c9c:	f800283a 	ret

01007ca0 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
 1007ca0:	defffa04 	addi	sp,sp,-24
 1007ca4:	df000515 	stw	fp,20(sp)
 1007ca8:	df000504 	addi	fp,sp,20
 1007cac:	e13ffd15 	stw	r4,-12(fp)
 1007cb0:	e17ffe15 	stw	r5,-8(fp)
 1007cb4:	e1bfff15 	stw	r6,-4(fp)
  int     status = 0;
 1007cb8:	e03ffb15 	stw	zero,-20(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
 1007cbc:	e0bffd17 	ldw	r2,-12(fp)
 1007cc0:	10c00117 	ldw	r3,4(r2)
 1007cc4:	e0bffd17 	ldw	r2,-12(fp)
 1007cc8:	10800217 	ldw	r2,8(r2)
 1007ccc:	18800a1e 	bne	r3,r2,1007cf8 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
 1007cd0:	e0bffd17 	ldw	r2,-12(fp)
 1007cd4:	10c00317 	ldw	r3,12(r2)
 1007cd8:	e0bffd17 	ldw	r2,-12(fp)
 1007cdc:	10800417 	ldw	r2,16(r2)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
 1007ce0:	1880051e 	bne	r3,r2,1007cf8 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
 1007ce4:	e0bffd17 	ldw	r2,-12(fp)
 1007ce8:	10800017 	ldw	r2,0(r2)
 1007cec:	10800304 	addi	r2,r2,12
 1007cf0:	10800037 	ldwio	r2,0(r2)
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
      (priv->rx_start != priv->rx_end) ||
 1007cf4:	10000226 	beq	r2,zero,1007d00 <alt_avalon_dma_ioctl+0x60>
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
 1007cf8:	00bffec4 	movi	r2,-5
 1007cfc:	0000b506 	br	1007fd4 <alt_avalon_dma_ioctl+0x334>
  }

  /* Now process the ioctl. */

  switch (req)
 1007d00:	e0bffe17 	ldw	r2,-8(fp)
 1007d04:	108002a8 	cmpgeui	r2,r2,10
 1007d08:	1000781e 	bne	r2,zero,1007eec <alt_avalon_dma_ioctl+0x24c>
 1007d0c:	e0bffe17 	ldw	r2,-8(fp)
 1007d10:	100690ba 	slli	r3,r2,2
 1007d14:	00804034 	movhi	r2,256
 1007d18:	109f4a04 	addi	r2,r2,32040
 1007d1c:	1885883a 	add	r2,r3,r2
 1007d20:	10800017 	ldw	r2,0(r2)
 1007d24:	1000683a 	jmp	r2
 1007d28:	01007eec 	andhi	r4,zero,507
 1007d2c:	01007d50 	cmplti	r4,zero,501
 1007d30:	01007da8 	cmpgeui	r4,zero,502
 1007d34:	01007dd4 	movui	r4,503
 1007d38:	01007e2c 	andhi	r4,zero,504
 1007d3c:	01007e58 	cmpnei	r4,zero,505
 1007d40:	01007e74 	movhi	r4,505
 1007d44:	01007e94 	movui	r4,506
 1007d48:	01007eb4 	movhi	r4,506
 1007d4c:	01007ed4 	movui	r4,507
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
 1007d50:	e0bffd17 	ldw	r2,-12(fp)
 1007d54:	10800517 	ldw	r2,20(r2)
 1007d58:	1080100c 	andi	r2,r2,64
 1007d5c:	10000f1e 	bne	r2,zero,1007d9c <alt_avalon_dma_ioctl+0xfc>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
 1007d60:	e0bffd17 	ldw	r2,-12(fp)
 1007d64:	10800017 	ldw	r2,0(r2)
 1007d68:	10800104 	addi	r2,r2,4
 1007d6c:	e0ffff17 	ldw	r3,-4(fp)
 1007d70:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
 1007d74:	e0bffd17 	ldw	r2,-12(fp)
 1007d78:	10800517 	ldw	r2,20(r2)
 1007d7c:	10c00814 	ori	r3,r2,32
 1007d80:	e0bffd17 	ldw	r2,-12(fp)
 1007d84:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
 1007d88:	e0fffd17 	ldw	r3,-12(fp)
 1007d8c:	00804034 	movhi	r2,256
 1007d90:	109f0204 	addi	r2,r2,31752
 1007d94:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
 1007d98:	00005606 	br	1007ef4 <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
      priv->launch = alt_avalon_dma_launch_rxonly;
    }
    else
    {
      status = -EIO;
 1007d9c:	00bffec4 	movi	r2,-5
 1007da0:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
 1007da4:	00005306 	br	1007ef4 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
 1007da8:	e0bffd17 	ldw	r2,-12(fp)
 1007dac:	10c00517 	ldw	r3,20(r2)
 1007db0:	00bff7c4 	movi	r2,-33
 1007db4:	1886703a 	and	r3,r3,r2
 1007db8:	e0bffd17 	ldw	r2,-12(fp)
 1007dbc:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
 1007dc0:	e0fffd17 	ldw	r3,-12(fp)
 1007dc4:	00804034 	movhi	r2,256
 1007dc8:	109e9f04 	addi	r2,r2,31356
 1007dcc:	18800715 	stw	r2,28(r3)
    break;
 1007dd0:	00004806 	br	1007ef4 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
 1007dd4:	e0bffd17 	ldw	r2,-12(fp)
 1007dd8:	10800517 	ldw	r2,20(r2)
 1007ddc:	1080080c 	andi	r2,r2,32
 1007de0:	10000f1e 	bne	r2,zero,1007e20 <alt_avalon_dma_ioctl+0x180>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
 1007de4:	e0bffd17 	ldw	r2,-12(fp)
 1007de8:	10800017 	ldw	r2,0(r2)
 1007dec:	10800204 	addi	r2,r2,8
 1007df0:	e0ffff17 	ldw	r3,-4(fp)
 1007df4:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
 1007df8:	e0bffd17 	ldw	r2,-12(fp)
 1007dfc:	10800517 	ldw	r2,20(r2)
 1007e00:	10c01014 	ori	r3,r2,64
 1007e04:	e0bffd17 	ldw	r2,-12(fp)
 1007e08:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
 1007e0c:	e0fffd17 	ldw	r3,-12(fp)
 1007e10:	00804034 	movhi	r2,256
 1007e14:	109edc04 	addi	r2,r2,31600
 1007e18:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
 1007e1c:	00003506 	br	1007ef4 <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
      priv->launch = alt_avalon_dma_launch_txonly;
    }
    else
    {
      status = -EIO;
 1007e20:	00bffec4 	movi	r2,-5
 1007e24:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
 1007e28:	00003206 	br	1007ef4 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
 1007e2c:	e0bffd17 	ldw	r2,-12(fp)
 1007e30:	10c00517 	ldw	r3,20(r2)
 1007e34:	00bfefc4 	movi	r2,-65
 1007e38:	1886703a 	and	r3,r3,r2
 1007e3c:	e0bffd17 	ldw	r2,-12(fp)
 1007e40:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
 1007e44:	e0fffd17 	ldw	r3,-12(fp)
 1007e48:	00804034 	movhi	r2,256
 1007e4c:	109e9f04 	addi	r2,r2,31356
 1007e50:	18800715 	stw	r2,28(r3)
    break;
 1007e54:	00002706 	br	1007ef4 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 1007e58:	e0bffd17 	ldw	r2,-12(fp)
 1007e5c:	10c00517 	ldw	r3,20(r2)
 1007e60:	00bffc04 	movi	r2,-16
 1007e64:	1886703a 	and	r3,r3,r2
 1007e68:	e0bffd17 	ldw	r2,-12(fp)
 1007e6c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
 1007e70:	00002006 	br	1007ef4 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 1007e74:	e0bffd17 	ldw	r2,-12(fp)
 1007e78:	10c00517 	ldw	r3,20(r2)
 1007e7c:	00bffc04 	movi	r2,-16
 1007e80:	1884703a 	and	r2,r3,r2
 1007e84:	10c00054 	ori	r3,r2,1
 1007e88:	e0bffd17 	ldw	r2,-12(fp)
 1007e8c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
 1007e90:	00001806 	br	1007ef4 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 1007e94:	e0bffd17 	ldw	r2,-12(fp)
 1007e98:	10c00517 	ldw	r3,20(r2)
 1007e9c:	00bffc04 	movi	r2,-16
 1007ea0:	1884703a 	and	r2,r3,r2
 1007ea4:	10c000d4 	ori	r3,r2,3
 1007ea8:	e0bffd17 	ldw	r2,-12(fp)
 1007eac:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
 1007eb0:	00001006 	br	1007ef4 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 1007eb4:	e0bffd17 	ldw	r2,-12(fp)
 1007eb8:	10c00517 	ldw	r3,20(r2)
 1007ebc:	00bffc04 	movi	r2,-16
 1007ec0:	1884703a 	and	r2,r3,r2
 1007ec4:	10c001d4 	ori	r3,r2,7
 1007ec8:	e0bffd17 	ldw	r2,-12(fp)
 1007ecc:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
 1007ed0:	00000806 	br	1007ef4 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 1007ed4:	e0bffd17 	ldw	r2,-12(fp)
 1007ed8:	10800517 	ldw	r2,20(r2)
 1007edc:	10c003d4 	ori	r3,r2,15
 1007ee0:	e0bffd17 	ldw	r2,-12(fp)
 1007ee4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
 1007ee8:	00000206 	br	1007ef4 <alt_avalon_dma_ioctl+0x254>
  default:
    status = -ENOTTY;
 1007eec:	00bff9c4 	movi	r2,-25
 1007ef0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (!status)
 1007ef4:	e0bffb17 	ldw	r2,-20(fp)
 1007ef8:	1000351e 	bne	r2,zero,1007fd0 <alt_avalon_dma_ioctl+0x330>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
 1007efc:	e0bffd17 	ldw	r2,-12(fp)
 1007f00:	10800517 	ldw	r2,20(r2)
 1007f04:	108003cc 	andi	r2,r2,15
 1007f08:	10c00060 	cmpeqi	r3,r2,1
 1007f0c:	1800091e 	bne	r3,zero,1007f34 <alt_avalon_dma_ioctl+0x294>
 1007f10:	0080052e 	bgeu	zero,r2,1007f28 <alt_avalon_dma_ioctl+0x288>
 1007f14:	10c000e0 	cmpeqi	r3,r2,3
 1007f18:	1800091e 	bne	r3,zero,1007f40 <alt_avalon_dma_ioctl+0x2a0>
 1007f1c:	108001e0 	cmpeqi	r2,r2,7
 1007f20:	10000a1e 	bne	r2,zero,1007f4c <alt_avalon_dma_ioctl+0x2ac>
 1007f24:	00000c06 	br	1007f58 <alt_avalon_dma_ioctl+0x2b8>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
 1007f28:	00800044 	movi	r2,1
 1007f2c:	e0bffc15 	stw	r2,-16(fp)
       break;
 1007f30:	00000b06 	br	1007f60 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
 1007f34:	00800084 	movi	r2,2
 1007f38:	e0bffc15 	stw	r2,-16(fp)
       break;
 1007f3c:	00000806 	br	1007f60 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
 1007f40:	00800104 	movi	r2,4
 1007f44:	e0bffc15 	stw	r2,-16(fp)
       break;
 1007f48:	00000506 	br	1007f60 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
 1007f4c:	00810004 	movi	r2,1024
 1007f50:	e0bffc15 	stw	r2,-16(fp)
       break;
 1007f54:	00000206 	br	1007f60 <alt_avalon_dma_ioctl+0x2c0>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
 1007f58:	00820004 	movi	r2,2048
 1007f5c:	e0bffc15 	stw	r2,-16(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
 1007f60:	e0bffd17 	ldw	r2,-12(fp)
 1007f64:	10800517 	ldw	r2,20(r2)
 1007f68:	1080080c 	andi	r2,r2,32
 1007f6c:	10000726 	beq	r2,zero,1007f8c <alt_avalon_dma_ioctl+0x2ec>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 1007f70:	e0bffd17 	ldw	r2,-12(fp)
 1007f74:	10800017 	ldw	r2,0(r2)
 1007f78:	10800604 	addi	r2,r2,24
 1007f7c:	e0fffc17 	ldw	r3,-16(fp)
 1007f80:	18c07e14 	ori	r3,r3,504
 1007f84:	10c00035 	stwio	r3,0(r2)
 1007f88:	00001106 	br	1007fd0 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
 1007f8c:	e0bffd17 	ldw	r2,-12(fp)
 1007f90:	10800517 	ldw	r2,20(r2)
 1007f94:	1080100c 	andi	r2,r2,64
 1007f98:	10000726 	beq	r2,zero,1007fb8 <alt_avalon_dma_ioctl+0x318>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 1007f9c:	e0bffd17 	ldw	r2,-12(fp)
 1007fa0:	10800017 	ldw	r2,0(r2)
 1007fa4:	10800604 	addi	r2,r2,24
 1007fa8:	e0fffc17 	ldw	r3,-16(fp)
 1007fac:	18c0be14 	ori	r3,r3,760
 1007fb0:	10c00035 	stwio	r3,0(r2)
 1007fb4:	00000606 	br	1007fd0 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 1007fb8:	e0bffd17 	ldw	r2,-12(fp)
 1007fbc:	10800017 	ldw	r2,0(r2)
 1007fc0:	10800604 	addi	r2,r2,24
 1007fc4:	e0fffc17 	ldw	r3,-16(fp)
 1007fc8:	18c03e14 	ori	r3,r3,248
 1007fcc:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
 1007fd0:	e0bffb17 	ldw	r2,-20(fp)
}
 1007fd4:	e037883a 	mov	sp,fp
 1007fd8:	df000017 	ldw	fp,0(sp)
 1007fdc:	dec00104 	addi	sp,sp,4
 1007fe0:	f800283a 	ret

01007fe4 <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
 1007fe4:	defffb04 	addi	sp,sp,-20
 1007fe8:	dfc00415 	stw	ra,16(sp)
 1007fec:	df000315 	stw	fp,12(sp)
 1007ff0:	df000304 	addi	fp,sp,12
 1007ff4:	e13ffd15 	stw	r4,-12(fp)
 1007ff8:	e17ffe15 	stw	r5,-8(fp)
 1007ffc:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
 1008000:	e0bffd17 	ldw	r2,-12(fp)
 1008004:	10800617 	ldw	r2,24(r2)
 1008008:	1009883a 	mov	r4,r2
 100800c:	e17ffe17 	ldw	r5,-8(fp)
 1008010:	e1bfff17 	ldw	r6,-4(fp)
 1008014:	1007ca00 	call	1007ca0 <alt_avalon_dma_ioctl>
             req,
             arg);
}
 1008018:	e037883a 	mov	sp,fp
 100801c:	dfc00117 	ldw	ra,4(sp)
 1008020:	df000017 	ldw	fp,0(sp)
 1008024:	dec00204 	addi	sp,sp,8
 1008028:	f800283a 	ret

0100802c <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
 100802c:	defffb04 	addi	sp,sp,-20
 1008030:	dfc00415 	stw	ra,16(sp)
 1008034:	df000315 	stw	fp,12(sp)
 1008038:	df000304 	addi	fp,sp,12
 100803c:	e13ffd15 	stw	r4,-12(fp)
 1008040:	e17ffe15 	stw	r5,-8(fp)
 1008044:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
 1008048:	e0bffd17 	ldw	r2,-12(fp)
 100804c:	10800617 	ldw	r2,24(r2)
 1008050:	1009883a 	mov	r4,r2
 1008054:	e17ffe17 	ldw	r5,-8(fp)
 1008058:	e1bfff17 	ldw	r6,-4(fp)
 100805c:	1007ca00 	call	1007ca0 <alt_avalon_dma_ioctl>
             req,
             arg);
}
 1008060:	e037883a 	mov	sp,fp
 1008064:	dfc00117 	ldw	ra,4(sp)
 1008068:	df000017 	ldw	fp,0(sp)
 100806c:	dec00204 	addi	sp,sp,8
 1008070:	f800283a 	ret

01008074 <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
 1008074:	defff404 	addi	sp,sp,-48
 1008078:	dfc00b15 	stw	ra,44(sp)
 100807c:	df000a15 	stw	fp,40(sp)
 1008080:	df000a04 	addi	fp,sp,40
 1008084:	e13ffc15 	stw	r4,-16(fp)
 1008088:	e17ffd15 	stw	r5,-12(fp)
 100808c:	e1bffe15 	stw	r6,-8(fp)
 1008090:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
 1008094:	e0bffc17 	ldw	r2,-16(fp)
 1008098:	10800617 	ldw	r2,24(r2)
 100809c:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
 10080a0:	e0bff617 	ldw	r2,-40(fp)
 10080a4:	10800517 	ldw	r2,20(r2)
 10080a8:	108003cc 	andi	r2,r2,15
 10080ac:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
 10080b0:	e0fffd17 	ldw	r3,-12(fp)
 10080b4:	e0bff717 	ldw	r2,-36(fp)
 10080b8:	1884703a 	and	r2,r3,r2
 10080bc:	1000081e 	bne	r2,zero,10080e0 <alt_avalon_dma_prepare+0x6c>
 10080c0:	e0fffe17 	ldw	r3,-8(fp)
 10080c4:	e0bff717 	ldw	r2,-36(fp)
 10080c8:	1884703a 	and	r2,r3,r2
 10080cc:	1000041e 	bne	r2,zero,10080e0 <alt_avalon_dma_prepare+0x6c>
     (len > priv->max_length))
 10080d0:	e0bff617 	ldw	r2,-40(fp)
 10080d4:	10c00617 	ldw	r3,24(r2)
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
 10080d8:	e0bffe17 	ldw	r2,-8(fp)
 10080dc:	1880022e 	bgeu	r3,r2,10080e8 <alt_avalon_dma_prepare+0x74>
     (len > priv->max_length))
  {
    return -EINVAL;
 10080e0:	00bffa84 	movi	r2,-22
 10080e4:	00002c06 	br	1008198 <alt_avalon_dma_prepare+0x124>
  }

  start = priv->rx_start;
 10080e8:	e0bff617 	ldw	r2,-40(fp)
 10080ec:	10800317 	ldw	r2,12(r2)
 10080f0:	e0bff815 	stw	r2,-32(fp)
  end   = priv->rx_end;
 10080f4:	e0bff617 	ldw	r2,-40(fp)
 10080f8:	10800417 	ldw	r2,16(r2)
 10080fc:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->rx_buf[end];
 1008100:	e0bff917 	ldw	r2,-28(fp)
 1008104:	1004913a 	slli	r2,r2,4
 1008108:	10801904 	addi	r2,r2,100
 100810c:	e0fff617 	ldw	r3,-40(fp)
 1008110:	1885883a 	add	r2,r3,r2
 1008114:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 1008118:	e0bff917 	ldw	r2,-28(fp)
 100811c:	10800044 	addi	r2,r2,1
 1008120:	108000cc 	andi	r2,r2,3
 1008124:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
 1008128:	e0fffb17 	ldw	r3,-20(fp)
 100812c:	e0bff817 	ldw	r2,-32(fp)
 1008130:	1880021e 	bne	r3,r2,100813c <alt_avalon_dma_prepare+0xc8>
  {
    return -ENOSPC;
 1008134:	00bff904 	movi	r2,-28
 1008138:	00001706 	br	1008198 <alt_avalon_dma_prepare+0x124>
  }

  slot->data   = data;
 100813c:	e0bffa17 	ldw	r2,-24(fp)
 1008140:	e0fffd17 	ldw	r3,-12(fp)
 1008144:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
 1008148:	e0bffa17 	ldw	r2,-24(fp)
 100814c:	e0fffe17 	ldw	r3,-8(fp)
 1008150:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
 1008154:	e0bffa17 	ldw	r2,-24(fp)
 1008158:	e0ffff17 	ldw	r3,-4(fp)
 100815c:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
 1008160:	e0bffa17 	ldw	r2,-24(fp)
 1008164:	e0c00217 	ldw	r3,8(fp)
 1008168:	10c00315 	stw	r3,12(r2)

  priv->rx_end = next;
 100816c:	e0bff617 	ldw	r2,-40(fp)
 1008170:	e0fffb17 	ldw	r3,-20(fp)
 1008174:	10c00415 	stw	r3,16(r2)

  if (!priv->active)
 1008178:	e0bff617 	ldw	r2,-40(fp)
 100817c:	10800817 	ldw	r2,32(r2)
 1008180:	1000041e 	bne	r2,zero,1008194 <alt_avalon_dma_prepare+0x120>
  {
    priv->launch (priv);
 1008184:	e0bff617 	ldw	r2,-40(fp)
 1008188:	10800717 	ldw	r2,28(r2)
 100818c:	e13ff617 	ldw	r4,-40(fp)
 1008190:	103ee83a 	callr	r2
  }

  return 0;
 1008194:	0005883a 	mov	r2,zero
}
 1008198:	e037883a 	mov	sp,fp
 100819c:	dfc00117 	ldw	ra,4(sp)
 10081a0:	df000017 	ldw	fp,0(sp)
 10081a4:	dec00204 	addi	sp,sp,8
 10081a8:	f800283a 	ret

010081ac <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
 10081ac:	defffb04 	addi	sp,sp,-20
 10081b0:	df000415 	stw	fp,16(sp)
 10081b4:	df000404 	addi	fp,sp,16
 10081b8:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
 10081bc:	e0bfff17 	ldw	r2,-4(fp)
 10081c0:	10800617 	ldw	r2,24(r2)
 10081c4:	e0bffc15 	stw	r2,-16(fp)

  start = priv->tx_start;
 10081c8:	e0bffc17 	ldw	r2,-16(fp)
 10081cc:	10800117 	ldw	r2,4(r2)
 10081d0:	e0bffd15 	stw	r2,-12(fp)
  end   = priv->tx_end;
 10081d4:	e0bffc17 	ldw	r2,-16(fp)
 10081d8:	10800217 	ldw	r2,8(r2)
 10081dc:	e0bffe15 	stw	r2,-8(fp)

  return (start > end) ? start - end - 1 :
 10081e0:	e0bffd17 	ldw	r2,-12(fp)
 10081e4:	e0fffe17 	ldw	r3,-8(fp)
 10081e8:	1880052e 	bgeu	r3,r2,1008200 <alt_avalon_dma_space+0x54>
 10081ec:	e0fffd17 	ldw	r3,-12(fp)
 10081f0:	e0bffe17 	ldw	r2,-8(fp)
 10081f4:	1885c83a 	sub	r2,r3,r2
 10081f8:	10bfffc4 	addi	r2,r2,-1
 10081fc:	00000406 	br	1008210 <alt_avalon_dma_space+0x64>
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
 1008200:	e0fffd17 	ldw	r3,-12(fp)
 1008204:	e0bffe17 	ldw	r2,-8(fp)
 1008208:	1885c83a 	sub	r2,r3,r2
 100820c:	108000c4 	addi	r2,r2,3
}
 1008210:	e037883a 	mov	sp,fp
 1008214:	df000017 	ldw	fp,0(sp)
 1008218:	dec00104 	addi	sp,sp,4
 100821c:	f800283a 	ret

01008220 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
 1008220:	defff404 	addi	sp,sp,-48
 1008224:	dfc00b15 	stw	ra,44(sp)
 1008228:	df000a15 	stw	fp,40(sp)
 100822c:	df000a04 	addi	fp,sp,40
 1008230:	e13ffc15 	stw	r4,-16(fp)
 1008234:	e17ffd15 	stw	r5,-12(fp)
 1008238:	e1bffe15 	stw	r6,-8(fp)
 100823c:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
 1008240:	e0bffc17 	ldw	r2,-16(fp)
 1008244:	10800617 	ldw	r2,24(r2)
 1008248:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
 100824c:	e0bff617 	ldw	r2,-40(fp)
 1008250:	10800517 	ldw	r2,20(r2)
 1008254:	108003cc 	andi	r2,r2,15
 1008258:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
 100825c:	e0fffd17 	ldw	r3,-12(fp)
 1008260:	e0bff717 	ldw	r2,-36(fp)
 1008264:	1884703a 	and	r2,r3,r2
 1008268:	1000081e 	bne	r2,zero,100828c <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
 100826c:	e0fffe17 	ldw	r3,-8(fp)
 1008270:	e0bff717 	ldw	r2,-36(fp)
 1008274:	1884703a 	and	r2,r3,r2
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
 1008278:	1000041e 	bne	r2,zero,100828c <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
        (len > priv->max_length))
 100827c:	e0bff617 	ldw	r2,-40(fp)
 1008280:	10c00617 	ldw	r3,24(r2)
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
        (len & align_mask)            ||
 1008284:	e0bffe17 	ldw	r2,-8(fp)
 1008288:	1880022e 	bgeu	r3,r2,1008294 <alt_avalon_dma_send+0x74>
        (len > priv->max_length))
  {
    return -EINVAL;
 100828c:	00bffa84 	movi	r2,-22
 1008290:	00002c06 	br	1008344 <alt_avalon_dma_send+0x124>
  }

  start = priv->tx_start;
 1008294:	e0bff617 	ldw	r2,-40(fp)
 1008298:	10800117 	ldw	r2,4(r2)
 100829c:	e0bff815 	stw	r2,-32(fp)
  end   = priv->tx_end;
 10082a0:	e0bff617 	ldw	r2,-40(fp)
 10082a4:	10800217 	ldw	r2,8(r2)
 10082a8:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->tx_buf[end];
 10082ac:	e0bff917 	ldw	r2,-28(fp)
 10082b0:	1004913a 	slli	r2,r2,4
 10082b4:	10800904 	addi	r2,r2,36
 10082b8:	e0fff617 	ldw	r3,-40(fp)
 10082bc:	1885883a 	add	r2,r3,r2
 10082c0:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 10082c4:	e0bff917 	ldw	r2,-28(fp)
 10082c8:	10800044 	addi	r2,r2,1
 10082cc:	108000cc 	andi	r2,r2,3
 10082d0:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
 10082d4:	e0fffb17 	ldw	r3,-20(fp)
 10082d8:	e0bff817 	ldw	r2,-32(fp)
 10082dc:	1880021e 	bne	r3,r2,10082e8 <alt_avalon_dma_send+0xc8>
  {
    return -ENOSPC;
 10082e0:	00bff904 	movi	r2,-28
 10082e4:	00001706 	br	1008344 <alt_avalon_dma_send+0x124>
  }

  /* Fill in the descriptor */

  slot->from   = from;
 10082e8:	e0bffa17 	ldw	r2,-24(fp)
 10082ec:	e0fffd17 	ldw	r3,-12(fp)
 10082f0:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
 10082f4:	e0bffa17 	ldw	r2,-24(fp)
 10082f8:	e0fffe17 	ldw	r3,-8(fp)
 10082fc:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
 1008300:	e0bffa17 	ldw	r2,-24(fp)
 1008304:	e0ffff17 	ldw	r3,-4(fp)
 1008308:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
 100830c:	e0bffa17 	ldw	r2,-24(fp)
 1008310:	e0c00217 	ldw	r3,8(fp)
 1008314:	10c00315 	stw	r3,12(r2)

  priv->tx_end = next;
 1008318:	e0bff617 	ldw	r2,-40(fp)
 100831c:	e0fffb17 	ldw	r3,-20(fp)
 1008320:	10c00215 	stw	r3,8(r2)

  if (!priv->active)
 1008324:	e0bff617 	ldw	r2,-40(fp)
 1008328:	10800817 	ldw	r2,32(r2)
 100832c:	1000041e 	bne	r2,zero,1008340 <alt_avalon_dma_send+0x120>
  {
    priv->launch (priv);
 1008330:	e0bff617 	ldw	r2,-40(fp)
 1008334:	10800717 	ldw	r2,28(r2)
 1008338:	e13ff617 	ldw	r4,-40(fp)
 100833c:	103ee83a 	callr	r2
  }

  return 0;
 1008340:	0005883a 	mov	r2,zero
}
 1008344:	e037883a 	mov	sp,fp
 1008348:	dfc00117 	ldw	ra,4(sp)
 100834c:	df000017 	ldw	fp,0(sp)
 1008350:	dec00204 	addi	sp,sp,8
 1008354:	f800283a 	ret

01008358 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
 1008358:	defff104 	addi	sp,sp,-60
 100835c:	dfc00e15 	stw	ra,56(sp)
 1008360:	df000d15 	stw	fp,52(sp)
 1008364:	df000d04 	addi	fp,sp,52
 1008368:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
 100836c:	e0bfff17 	ldw	r2,-4(fp)
 1008370:	e0bff315 	stw	r2,-52(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
 1008374:	e0bff317 	ldw	r2,-52(fp)
 1008378:	10800517 	ldw	r2,20(r2)
 100837c:	1080080c 	andi	r2,r2,32
 1008380:	e0bff415 	stw	r2,-48(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
 1008384:	e0bff317 	ldw	r2,-52(fp)
 1008388:	10800517 	ldw	r2,20(r2)
 100838c:	1080100c 	andi	r2,r2,64
 1008390:	e0bff515 	stw	r2,-44(fp)

  tx_start = priv->tx_start;
 1008394:	e0bff317 	ldw	r2,-52(fp)
 1008398:	10800117 	ldw	r2,4(r2)
 100839c:	e0bff615 	stw	r2,-40(fp)
  rx_start = priv->rx_start;
 10083a0:	e0bff317 	ldw	r2,-52(fp)
 10083a4:	10800317 	ldw	r2,12(r2)
 10083a8:	e0bff715 	stw	r2,-36(fp)

  tx_slot = &priv->tx_buf[tx_start];
 10083ac:	e0bff617 	ldw	r2,-40(fp)
 10083b0:	1004913a 	slli	r2,r2,4
 10083b4:	10800904 	addi	r2,r2,36
 10083b8:	e0fff317 	ldw	r3,-52(fp)
 10083bc:	1885883a 	add	r2,r3,r2
 10083c0:	e0bff815 	stw	r2,-32(fp)
  rx_slot = &priv->rx_buf[rx_start];
 10083c4:	e0bff717 	ldw	r2,-36(fp)
 10083c8:	1004913a 	slli	r2,r2,4
 10083cc:	10801904 	addi	r2,r2,100
 10083d0:	e0fff317 	ldw	r3,-52(fp)
 10083d4:	1885883a 	add	r2,r3,r2
 10083d8:	e0bff915 	stw	r2,-28(fp)

  /* Increment the descriptors */

  if (!stream_tx)
 10083dc:	e0bff417 	ldw	r2,-48(fp)
 10083e0:	1000051e 	bne	r2,zero,10083f8 <alt_avalon_dma_irq+0xa0>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 10083e4:	e0bff617 	ldw	r2,-40(fp)
 10083e8:	10800044 	addi	r2,r2,1
 10083ec:	10c000cc 	andi	r3,r2,3
 10083f0:	e0bff317 	ldw	r2,-52(fp)
 10083f4:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
 10083f8:	e0bff517 	ldw	r2,-44(fp)
 10083fc:	1000051e 	bne	r2,zero,1008414 <alt_avalon_dma_irq+0xbc>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 1008400:	e0bff717 	ldw	r2,-36(fp)
 1008404:	10800044 	addi	r2,r2,1
 1008408:	10c000cc 	andi	r3,r2,3
 100840c:	e0bff317 	ldw	r2,-52(fp)
 1008410:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
 1008414:	e0bff317 	ldw	r2,-52(fp)
 1008418:	10800017 	ldw	r2,0(r2)
 100841c:	0007883a 	mov	r3,zero
 1008420:	10c00035 	stwio	r3,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
 1008424:	e0bff317 	ldw	r2,-52(fp)
 1008428:	10800017 	ldw	r2,0(r2)
 100842c:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
 1008430:	e0bff317 	ldw	r2,-52(fp)
 1008434:	10800717 	ldw	r2,28(r2)
 1008438:	e13ff317 	ldw	r4,-52(fp)
 100843c:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
 1008440:	e0bff417 	ldw	r2,-48(fp)
 1008444:	1000151e 	bne	r2,zero,100849c <alt_avalon_dma_irq+0x144>
 1008448:	e0bff817 	ldw	r2,-32(fp)
 100844c:	10800217 	ldw	r2,8(r2)
 1008450:	10001226 	beq	r2,zero,100849c <alt_avalon_dma_irq+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008454:	0005303a 	rdctl	r2,status
 1008458:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100845c:	e0fffb17 	ldw	r3,-20(fp)
 1008460:	00bfff84 	movi	r2,-2
 1008464:	1884703a 	and	r2,r3,r2
 1008468:	1001703a 	wrctl	status,r2
  
  return context;
 100846c:	e0bffb17 	ldw	r2,-20(fp)
  {
    cpu_sr = alt_irq_disable_all();
 1008470:	e0bffa15 	stw	r2,-24(fp)
    tx_slot->done (tx_slot->handle);
 1008474:	e0bff817 	ldw	r2,-32(fp)
 1008478:	10800217 	ldw	r2,8(r2)
 100847c:	e0fff817 	ldw	r3,-32(fp)
 1008480:	18c00317 	ldw	r3,12(r3)
 1008484:	1809883a 	mov	r4,r3
 1008488:	103ee83a 	callr	r2
 100848c:	e0bffa17 	ldw	r2,-24(fp)
 1008490:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008494:	e0bffc17 	ldw	r2,-16(fp)
 1008498:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
 100849c:	e0bff517 	ldw	r2,-44(fp)
 10084a0:	1000171e 	bne	r2,zero,1008500 <alt_avalon_dma_irq+0x1a8>
 10084a4:	e0bff917 	ldw	r2,-28(fp)
 10084a8:	10800217 	ldw	r2,8(r2)
 10084ac:	10001426 	beq	r2,zero,1008500 <alt_avalon_dma_irq+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10084b0:	0005303a 	rdctl	r2,status
 10084b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10084b8:	e0fffd17 	ldw	r3,-12(fp)
 10084bc:	00bfff84 	movi	r2,-2
 10084c0:	1884703a 	and	r2,r3,r2
 10084c4:	1001703a 	wrctl	status,r2
  
  return context;
 10084c8:	e0bffd17 	ldw	r2,-12(fp)
  {
    cpu_sr = alt_irq_disable_all();
 10084cc:	e0bffa15 	stw	r2,-24(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
 10084d0:	e0bff917 	ldw	r2,-28(fp)
 10084d4:	10800217 	ldw	r2,8(r2)
 10084d8:	e0fff917 	ldw	r3,-28(fp)
 10084dc:	19000317 	ldw	r4,12(r3)
 10084e0:	e0fff917 	ldw	r3,-28(fp)
 10084e4:	18c00017 	ldw	r3,0(r3)
 10084e8:	180b883a 	mov	r5,r3
 10084ec:	103ee83a 	callr	r2
 10084f0:	e0bffa17 	ldw	r2,-24(fp)
 10084f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10084f8:	e0bffe17 	ldw	r2,-8(fp)
 10084fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 1008500:	e037883a 	mov	sp,fp
 1008504:	dfc00117 	ldw	ra,4(sp)
 1008508:	df000017 	ldw	fp,0(sp)
 100850c:	dec00204 	addi	sp,sp,8
 1008510:	f800283a 	ret

01008514 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
 1008514:	defff904 	addi	sp,sp,-28
 1008518:	dfc00615 	stw	ra,24(sp)
 100851c:	df000515 	stw	fp,20(sp)
 1008520:	df000504 	addi	fp,sp,20
 1008524:	e13ffc15 	stw	r4,-16(fp)
 1008528:	e17ffd15 	stw	r5,-12(fp)
 100852c:	e1bffe15 	stw	r6,-8(fp)
 1008530:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
 1008534:	e0bffe17 	ldw	r2,-8(fp)
 1008538:	10800604 	addi	r2,r2,24
 100853c:	00c40004 	movi	r3,4096
 1008540:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
 1008544:	e0bffe17 	ldw	r2,-8(fp)
 1008548:	10800604 	addi	r2,r2,24
 100854c:	00c40004 	movi	r3,4096
 1008550:	10c00035 	stwio	r3,0(r2)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
 1008554:	e0bffe17 	ldw	r2,-8(fp)
 1008558:	10800604 	addi	r2,r2,24
 100855c:	00c03f04 	movi	r3,252
 1008560:	10c00035 	stwio	r3,0(r2)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
 1008564:	0007883a 	mov	r3,zero
 1008568:	e0bffe17 	ldw	r2,-8(fp)
 100856c:	10c00035 	stwio	r3,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
 1008570:	e0bffc17 	ldw	r2,-16(fp)
 1008574:	10800617 	ldw	r2,24(r2)
 1008578:	d8000015 	stw	zero,0(sp)
 100857c:	e13fff17 	ldw	r4,-4(fp)
 1008580:	e1400217 	ldw	r5,8(fp)
 1008584:	01804074 	movhi	r6,257
 1008588:	31a0d604 	addi	r6,r6,-31912
 100858c:	100f883a 	mov	r7,r2
 1008590:	1008f940 	call	1008f94 <alt_ic_isr_register>
 1008594:	10000616 	blt	r2,zero,10085b0 <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
 1008598:	e0bffc17 	ldw	r2,-16(fp)
 100859c:	1009883a 	mov	r4,r2
 10085a0:	1007a0c0 	call	1007a0c <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
 10085a4:	e0bffd17 	ldw	r2,-12(fp)
 10085a8:	1009883a 	mov	r4,r2
 10085ac:	1007a440 	call	1007a44 <alt_dma_rxchan_reg>
  }
}
 10085b0:	e037883a 	mov	sp,fp
 10085b4:	dfc00117 	ldw	ra,4(sp)
 10085b8:	df000017 	ldw	fp,0(sp)
 10085bc:	dec00204 	addi	sp,sp,8
 10085c0:	f800283a 	ret

010085c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 10085c4:	defffa04 	addi	sp,sp,-24
 10085c8:	dfc00515 	stw	ra,20(sp)
 10085cc:	df000415 	stw	fp,16(sp)
 10085d0:	df000404 	addi	fp,sp,16
 10085d4:	e13ffd15 	stw	r4,-12(fp)
 10085d8:	e17ffe15 	stw	r5,-8(fp)
 10085dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10085e0:	e0bffd17 	ldw	r2,-12(fp)
 10085e4:	10800017 	ldw	r2,0(r2)
 10085e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 10085ec:	e0bffc17 	ldw	r2,-16(fp)
 10085f0:	10c00a04 	addi	r3,r2,40
 10085f4:	e0bffd17 	ldw	r2,-12(fp)
 10085f8:	10800217 	ldw	r2,8(r2)
 10085fc:	1809883a 	mov	r4,r3
 1008600:	e17ffe17 	ldw	r5,-8(fp)
 1008604:	e1bfff17 	ldw	r6,-4(fp)
 1008608:	100f883a 	mov	r7,r2
 100860c:	10086840 	call	1008684 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1008610:	e037883a 	mov	sp,fp
 1008614:	dfc00117 	ldw	ra,4(sp)
 1008618:	df000017 	ldw	fp,0(sp)
 100861c:	dec00204 	addi	sp,sp,8
 1008620:	f800283a 	ret

01008624 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1008624:	defffa04 	addi	sp,sp,-24
 1008628:	dfc00515 	stw	ra,20(sp)
 100862c:	df000415 	stw	fp,16(sp)
 1008630:	df000404 	addi	fp,sp,16
 1008634:	e13ffd15 	stw	r4,-12(fp)
 1008638:	e17ffe15 	stw	r5,-8(fp)
 100863c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1008640:	e0bffd17 	ldw	r2,-12(fp)
 1008644:	10800017 	ldw	r2,0(r2)
 1008648:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100864c:	e0bffc17 	ldw	r2,-16(fp)
 1008650:	10c00a04 	addi	r3,r2,40
 1008654:	e0bffd17 	ldw	r2,-12(fp)
 1008658:	10800217 	ldw	r2,8(r2)
 100865c:	1809883a 	mov	r4,r3
 1008660:	e17ffe17 	ldw	r5,-8(fp)
 1008664:	e1bfff17 	ldw	r6,-4(fp)
 1008668:	100f883a 	mov	r7,r2
 100866c:	10087680 	call	1008768 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1008670:	e037883a 	mov	sp,fp
 1008674:	dfc00117 	ldw	ra,4(sp)
 1008678:	df000017 	ldw	fp,0(sp)
 100867c:	dec00204 	addi	sp,sp,8
 1008680:	f800283a 	ret

01008684 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 1008684:	defff704 	addi	sp,sp,-36
 1008688:	df000815 	stw	fp,32(sp)
 100868c:	df000804 	addi	fp,sp,32
 1008690:	e13ffc15 	stw	r4,-16(fp)
 1008694:	e17ffd15 	stw	r5,-12(fp)
 1008698:	e1bffe15 	stw	r6,-8(fp)
 100869c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 10086a0:	e0bffc17 	ldw	r2,-16(fp)
 10086a4:	10800017 	ldw	r2,0(r2)
 10086a8:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 10086ac:	e0bffd17 	ldw	r2,-12(fp)
 10086b0:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 10086b4:	e0bffe17 	ldw	r2,-8(fp)
 10086b8:	e0fffd17 	ldw	r3,-12(fp)
 10086bc:	1885883a 	add	r2,r3,r2
 10086c0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 10086c4:	00001406 	br	1008718 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 10086c8:	e0bff917 	ldw	r2,-28(fp)
 10086cc:	10800037 	ldwio	r2,0(r2)
 10086d0:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 10086d4:	e0bffb17 	ldw	r2,-20(fp)
 10086d8:	10a0000c 	andi	r2,r2,32768
 10086dc:	10000626 	beq	r2,zero,10086f8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 10086e0:	e0bff817 	ldw	r2,-32(fp)
 10086e4:	10c00044 	addi	r3,r2,1
 10086e8:	e0fff815 	stw	r3,-32(fp)
 10086ec:	e0fffb17 	ldw	r3,-20(fp)
 10086f0:	10c00005 	stb	r3,0(r2)
 10086f4:	00000806 	br	1008718 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
 10086f8:	e0fff817 	ldw	r3,-32(fp)
 10086fc:	e0bffd17 	ldw	r2,-12(fp)
 1008700:	18800126 	beq	r3,r2,1008708 <altera_avalon_jtag_uart_read+0x84>
      break;
 1008704:	00000706 	br	1008724 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
 1008708:	e0bfff17 	ldw	r2,-4(fp)
 100870c:	1090000c 	andi	r2,r2,16384
 1008710:	10000126 	beq	r2,zero,1008718 <altera_avalon_jtag_uart_read+0x94>
      break;   
 1008714:	00000306 	br	1008724 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 1008718:	e0fff817 	ldw	r3,-32(fp)
 100871c:	e0bffa17 	ldw	r2,-24(fp)
 1008720:	18bfe936 	bltu	r3,r2,10086c8 <__alt_data_end+0xfffe7770>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
 1008724:	e0fff817 	ldw	r3,-32(fp)
 1008728:	e0bffd17 	ldw	r2,-12(fp)
 100872c:	18800426 	beq	r3,r2,1008740 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
 1008730:	e0fff817 	ldw	r3,-32(fp)
 1008734:	e0bffd17 	ldw	r2,-12(fp)
 1008738:	1885c83a 	sub	r2,r3,r2
 100873c:	00000606 	br	1008758 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
 1008740:	e0bfff17 	ldw	r2,-4(fp)
 1008744:	1090000c 	andi	r2,r2,16384
 1008748:	10000226 	beq	r2,zero,1008754 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
 100874c:	00bffd44 	movi	r2,-11
 1008750:	00000106 	br	1008758 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
 1008754:	00bffec4 	movi	r2,-5
}
 1008758:	e037883a 	mov	sp,fp
 100875c:	df000017 	ldw	fp,0(sp)
 1008760:	dec00104 	addi	sp,sp,4
 1008764:	f800283a 	ret

01008768 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1008768:	defff904 	addi	sp,sp,-28
 100876c:	df000615 	stw	fp,24(sp)
 1008770:	df000604 	addi	fp,sp,24
 1008774:	e13ffc15 	stw	r4,-16(fp)
 1008778:	e17ffd15 	stw	r5,-12(fp)
 100877c:	e1bffe15 	stw	r6,-8(fp)
 1008780:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 1008784:	e0bffc17 	ldw	r2,-16(fp)
 1008788:	10800017 	ldw	r2,0(r2)
 100878c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 1008790:	e0bffe17 	ldw	r2,-8(fp)
 1008794:	e0fffd17 	ldw	r3,-12(fp)
 1008798:	1885883a 	add	r2,r3,r2
 100879c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 10087a0:	00000e06 	br	10087dc <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 10087a4:	e0bffa17 	ldw	r2,-24(fp)
 10087a8:	10800104 	addi	r2,r2,4
 10087ac:	10800037 	ldwio	r2,0(r2)
 10087b0:	10bfffec 	andhi	r2,r2,65535
 10087b4:	10000926 	beq	r2,zero,10087dc <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 10087b8:	e0fffa17 	ldw	r3,-24(fp)
 10087bc:	e0bffd17 	ldw	r2,-12(fp)
 10087c0:	11000044 	addi	r4,r2,1
 10087c4:	e13ffd15 	stw	r4,-12(fp)
 10087c8:	10800003 	ldbu	r2,0(r2)
 10087cc:	10803fcc 	andi	r2,r2,255
 10087d0:	1080201c 	xori	r2,r2,128
 10087d4:	10bfe004 	addi	r2,r2,-128
 10087d8:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 10087dc:	e0fffd17 	ldw	r3,-12(fp)
 10087e0:	e0bffb17 	ldw	r2,-20(fp)
 10087e4:	18bfef36 	bltu	r3,r2,10087a4 <__alt_data_end+0xfffe784c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 10087e8:	e0bffe17 	ldw	r2,-8(fp)
}
 10087ec:	e037883a 	mov	sp,fp
 10087f0:	df000017 	ldw	fp,0(sp)
 10087f4:	dec00104 	addi	sp,sp,4
 10087f8:	f800283a 	ret

010087fc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 10087fc:	defffa04 	addi	sp,sp,-24
 1008800:	dfc00515 	stw	ra,20(sp)
 1008804:	df000415 	stw	fp,16(sp)
 1008808:	df000404 	addi	fp,sp,16
 100880c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1008810:	0007883a 	mov	r3,zero
 1008814:	e0bfff17 	ldw	r2,-4(fp)
 1008818:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 100881c:	e0bfff17 	ldw	r2,-4(fp)
 1008820:	10800104 	addi	r2,r2,4
 1008824:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008828:	0005303a 	rdctl	r2,status
 100882c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008830:	e0fffd17 	ldw	r3,-12(fp)
 1008834:	00bfff84 	movi	r2,-2
 1008838:	1884703a 	and	r2,r3,r2
 100883c:	1001703a 	wrctl	status,r2
  
  return context;
 1008840:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1008844:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 1008848:	10097080 	call	1009708 <alt_tick>
 100884c:	e0bffc17 	ldw	r2,-16(fp)
 1008850:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008854:	e0bffe17 	ldw	r2,-8(fp)
 1008858:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 100885c:	e037883a 	mov	sp,fp
 1008860:	dfc00117 	ldw	ra,4(sp)
 1008864:	df000017 	ldw	fp,0(sp)
 1008868:	dec00204 	addi	sp,sp,8
 100886c:	f800283a 	ret

01008870 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1008870:	defff804 	addi	sp,sp,-32
 1008874:	dfc00715 	stw	ra,28(sp)
 1008878:	df000615 	stw	fp,24(sp)
 100887c:	df000604 	addi	fp,sp,24
 1008880:	e13ffc15 	stw	r4,-16(fp)
 1008884:	e17ffd15 	stw	r5,-12(fp)
 1008888:	e1bffe15 	stw	r6,-8(fp)
 100888c:	e1ffff15 	stw	r7,-4(fp)
 1008890:	e0bfff17 	ldw	r2,-4(fp)
 1008894:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1008898:	00804074 	movhi	r2,257
 100889c:	10abcd04 	addi	r2,r2,-20684
 10088a0:	10800017 	ldw	r2,0(r2)
 10088a4:	1000041e 	bne	r2,zero,10088b8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 10088a8:	00804074 	movhi	r2,257
 10088ac:	10abcd04 	addi	r2,r2,-20684
 10088b0:	e0fffb17 	ldw	r3,-20(fp)
 10088b4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 10088b8:	e0bffc17 	ldw	r2,-16(fp)
 10088bc:	10800104 	addi	r2,r2,4
 10088c0:	00c001c4 	movi	r3,7
 10088c4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 10088c8:	d8000015 	stw	zero,0(sp)
 10088cc:	e13ffd17 	ldw	r4,-12(fp)
 10088d0:	e17ffe17 	ldw	r5,-8(fp)
 10088d4:	01804074 	movhi	r6,257
 10088d8:	31a1ff04 	addi	r6,r6,-30724
 10088dc:	e1fffc17 	ldw	r7,-16(fp)
 10088e0:	1008f940 	call	1008f94 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 10088e4:	e037883a 	mov	sp,fp
 10088e8:	dfc00117 	ldw	ra,4(sp)
 10088ec:	df000017 	ldw	fp,0(sp)
 10088f0:	dec00204 	addi	sp,sp,8
 10088f4:	f800283a 	ret

010088f8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 10088f8:	defffa04 	addi	sp,sp,-24
 10088fc:	dfc00515 	stw	ra,20(sp)
 1008900:	df000415 	stw	fp,16(sp)
 1008904:	df000404 	addi	fp,sp,16
 1008908:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 100890c:	008000c4 	movi	r2,3
 1008910:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 1008914:	e0fffd17 	ldw	r3,-12(fp)
 1008918:	008003f4 	movhi	r2,15
 100891c:	10909004 	addi	r2,r2,16960
 1008920:	1885383a 	mul	r2,r3,r2
 1008924:	01017db4 	movhi	r4,1526
 1008928:	21384004 	addi	r4,r4,-7936
 100892c:	100b883a 	mov	r5,r2
 1008930:	1006c1c0 	call	1006c1c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 1008934:	01200034 	movhi	r4,32768
 1008938:	213fffc4 	addi	r4,r4,-1
 100893c:	100b883a 	mov	r5,r2
 1008940:	1006c1c0 	call	1006c1c <__udivsi3>
 1008944:	e13fff17 	ldw	r4,-4(fp)
 1008948:	100b883a 	mov	r5,r2
 100894c:	1006c1c0 	call	1006c1c <__udivsi3>
 1008950:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1008954:	e0bffe17 	ldw	r2,-8(fp)
 1008958:	10002a26 	beq	r2,zero,1008a04 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 100895c:	e03ffc15 	stw	zero,-16(fp)
 1008960:	00001706 	br	10089c0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1008964:	00a00034 	movhi	r2,32768
 1008968:	10bfffc4 	addi	r2,r2,-1
 100896c:	10bfffc4 	addi	r2,r2,-1
 1008970:	103ffe1e 	bne	r2,zero,100896c <__alt_data_end+0xfffe7a14>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 1008974:	e0fffd17 	ldw	r3,-12(fp)
 1008978:	008003f4 	movhi	r2,15
 100897c:	10909004 	addi	r2,r2,16960
 1008980:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1008984:	01017db4 	movhi	r4,1526
 1008988:	21384004 	addi	r4,r4,-7936
 100898c:	100b883a 	mov	r5,r2
 1008990:	1006c1c0 	call	1006c1c <__udivsi3>
 1008994:	01200034 	movhi	r4,32768
 1008998:	213fffc4 	addi	r4,r4,-1
 100899c:	100b883a 	mov	r5,r2
 10089a0:	1006c1c0 	call	1006c1c <__udivsi3>
 10089a4:	1007883a 	mov	r3,r2
 10089a8:	e0bfff17 	ldw	r2,-4(fp)
 10089ac:	10c5c83a 	sub	r2,r2,r3
 10089b0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 10089b4:	e0bffc17 	ldw	r2,-16(fp)
 10089b8:	10800044 	addi	r2,r2,1
 10089bc:	e0bffc15 	stw	r2,-16(fp)
 10089c0:	e0fffc17 	ldw	r3,-16(fp)
 10089c4:	e0bffe17 	ldw	r2,-8(fp)
 10089c8:	18bfe616 	blt	r3,r2,1008964 <__alt_data_end+0xfffe7a0c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 10089cc:	e0fffd17 	ldw	r3,-12(fp)
 10089d0:	008003f4 	movhi	r2,15
 10089d4:	10909004 	addi	r2,r2,16960
 10089d8:	1885383a 	mul	r2,r3,r2
 10089dc:	01017db4 	movhi	r4,1526
 10089e0:	21384004 	addi	r4,r4,-7936
 10089e4:	100b883a 	mov	r5,r2
 10089e8:	1006c1c0 	call	1006c1c <__udivsi3>
 10089ec:	1007883a 	mov	r3,r2
 10089f0:	e0bfff17 	ldw	r2,-4(fp)
 10089f4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 10089f8:	10bfffc4 	addi	r2,r2,-1
 10089fc:	103ffe1e 	bne	r2,zero,10089f8 <__alt_data_end+0xfffe7aa0>
 1008a00:	00000d06 	br	1008a38 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1008a04:	e0fffd17 	ldw	r3,-12(fp)
 1008a08:	008003f4 	movhi	r2,15
 1008a0c:	10909004 	addi	r2,r2,16960
 1008a10:	1885383a 	mul	r2,r3,r2
 1008a14:	01017db4 	movhi	r4,1526
 1008a18:	21384004 	addi	r4,r4,-7936
 1008a1c:	100b883a 	mov	r5,r2
 1008a20:	1006c1c0 	call	1006c1c <__udivsi3>
 1008a24:	1007883a 	mov	r3,r2
 1008a28:	e0bfff17 	ldw	r2,-4(fp)
 1008a2c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1008a30:	10bfffc4 	addi	r2,r2,-1
 1008a34:	00bffe16 	blt	zero,r2,1008a30 <__alt_data_end+0xfffe7ad8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1008a38:	0005883a 	mov	r2,zero
}
 1008a3c:	e037883a 	mov	sp,fp
 1008a40:	dfc00117 	ldw	ra,4(sp)
 1008a44:	df000017 	ldw	fp,0(sp)
 1008a48:	dec00204 	addi	sp,sp,8
 1008a4c:	f800283a 	ret

01008a50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1008a50:	defffe04 	addi	sp,sp,-8
 1008a54:	dfc00115 	stw	ra,4(sp)
 1008a58:	df000015 	stw	fp,0(sp)
 1008a5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1008a60:	00804074 	movhi	r2,257
 1008a64:	10a9d104 	addi	r2,r2,-22716
 1008a68:	10800017 	ldw	r2,0(r2)
 1008a6c:	10000526 	beq	r2,zero,1008a84 <alt_get_errno+0x34>
 1008a70:	00804074 	movhi	r2,257
 1008a74:	10a9d104 	addi	r2,r2,-22716
 1008a78:	10800017 	ldw	r2,0(r2)
 1008a7c:	103ee83a 	callr	r2
 1008a80:	00000206 	br	1008a8c <alt_get_errno+0x3c>
 1008a84:	00804074 	movhi	r2,257
 1008a88:	10abc804 	addi	r2,r2,-20704
}
 1008a8c:	e037883a 	mov	sp,fp
 1008a90:	dfc00117 	ldw	ra,4(sp)
 1008a94:	df000017 	ldw	fp,0(sp)
 1008a98:	dec00204 	addi	sp,sp,8
 1008a9c:	f800283a 	ret

01008aa0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1008aa0:	defffb04 	addi	sp,sp,-20
 1008aa4:	dfc00415 	stw	ra,16(sp)
 1008aa8:	df000315 	stw	fp,12(sp)
 1008aac:	df000304 	addi	fp,sp,12
 1008ab0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1008ab4:	e0bfff17 	ldw	r2,-4(fp)
 1008ab8:	10000616 	blt	r2,zero,1008ad4 <close+0x34>
 1008abc:	e0bfff17 	ldw	r2,-4(fp)
 1008ac0:	10c00324 	muli	r3,r2,12
 1008ac4:	00804074 	movhi	r2,257
 1008ac8:	10a96304 	addi	r2,r2,-23156
 1008acc:	1885883a 	add	r2,r3,r2
 1008ad0:	00000106 	br	1008ad8 <close+0x38>
 1008ad4:	0005883a 	mov	r2,zero
 1008ad8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 1008adc:	e0bffd17 	ldw	r2,-12(fp)
 1008ae0:	10001926 	beq	r2,zero,1008b48 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1008ae4:	e0bffd17 	ldw	r2,-12(fp)
 1008ae8:	10800017 	ldw	r2,0(r2)
 1008aec:	10800417 	ldw	r2,16(r2)
 1008af0:	10000626 	beq	r2,zero,1008b0c <close+0x6c>
 1008af4:	e0bffd17 	ldw	r2,-12(fp)
 1008af8:	10800017 	ldw	r2,0(r2)
 1008afc:	10800417 	ldw	r2,16(r2)
 1008b00:	e13ffd17 	ldw	r4,-12(fp)
 1008b04:	103ee83a 	callr	r2
 1008b08:	00000106 	br	1008b10 <close+0x70>
 1008b0c:	0005883a 	mov	r2,zero
 1008b10:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1008b14:	e13fff17 	ldw	r4,-4(fp)
 1008b18:	10096100 	call	1009610 <alt_release_fd>
    if (rval < 0)
 1008b1c:	e0bffe17 	ldw	r2,-8(fp)
 1008b20:	1000070e 	bge	r2,zero,1008b40 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 1008b24:	1008a500 	call	1008a50 <alt_get_errno>
 1008b28:	1007883a 	mov	r3,r2
 1008b2c:	e0bffe17 	ldw	r2,-8(fp)
 1008b30:	0085c83a 	sub	r2,zero,r2
 1008b34:	18800015 	stw	r2,0(r3)
      return -1;
 1008b38:	00bfffc4 	movi	r2,-1
 1008b3c:	00000706 	br	1008b5c <close+0xbc>
    }
    return 0;
 1008b40:	0005883a 	mov	r2,zero
 1008b44:	00000506 	br	1008b5c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1008b48:	1008a500 	call	1008a50 <alt_get_errno>
 1008b4c:	1007883a 	mov	r3,r2
 1008b50:	00801444 	movi	r2,81
 1008b54:	18800015 	stw	r2,0(r3)
    return -1;
 1008b58:	00bfffc4 	movi	r2,-1
  }
}
 1008b5c:	e037883a 	mov	sp,fp
 1008b60:	dfc00117 	ldw	ra,4(sp)
 1008b64:	df000017 	ldw	fp,0(sp)
 1008b68:	dec00204 	addi	sp,sp,8
 1008b6c:	f800283a 	ret

01008b70 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1008b70:	defffe04 	addi	sp,sp,-8
 1008b74:	df000115 	stw	fp,4(sp)
 1008b78:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1008b7c:	e03fff15 	stw	zero,-4(fp)
 1008b80:	00000506 	br	1008b98 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1008b84:	e0bfff17 	ldw	r2,-4(fp)
 1008b88:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1008b8c:	e0bfff17 	ldw	r2,-4(fp)
 1008b90:	10800804 	addi	r2,r2,32
 1008b94:	e0bfff15 	stw	r2,-4(fp)
 1008b98:	e0bfff17 	ldw	r2,-4(fp)
 1008b9c:	10820030 	cmpltui	r2,r2,2048
 1008ba0:	103ff81e 	bne	r2,zero,1008b84 <__alt_data_end+0xfffe7c2c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1008ba4:	e037883a 	mov	sp,fp
 1008ba8:	df000017 	ldw	fp,0(sp)
 1008bac:	dec00104 	addi	sp,sp,4
 1008bb0:	f800283a 	ret

01008bb4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1008bb4:	defffc04 	addi	sp,sp,-16
 1008bb8:	df000315 	stw	fp,12(sp)
 1008bbc:	df000304 	addi	fp,sp,12
 1008bc0:	e13ffd15 	stw	r4,-12(fp)
 1008bc4:	e17ffe15 	stw	r5,-8(fp)
 1008bc8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1008bcc:	e0bfff17 	ldw	r2,-4(fp)
}
 1008bd0:	e037883a 	mov	sp,fp
 1008bd4:	df000017 	ldw	fp,0(sp)
 1008bd8:	dec00104 	addi	sp,sp,4
 1008bdc:	f800283a 	ret

01008be0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1008be0:	defffe04 	addi	sp,sp,-8
 1008be4:	dfc00115 	stw	ra,4(sp)
 1008be8:	df000015 	stw	fp,0(sp)
 1008bec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1008bf0:	00804074 	movhi	r2,257
 1008bf4:	10a9d104 	addi	r2,r2,-22716
 1008bf8:	10800017 	ldw	r2,0(r2)
 1008bfc:	10000526 	beq	r2,zero,1008c14 <alt_get_errno+0x34>
 1008c00:	00804074 	movhi	r2,257
 1008c04:	10a9d104 	addi	r2,r2,-22716
 1008c08:	10800017 	ldw	r2,0(r2)
 1008c0c:	103ee83a 	callr	r2
 1008c10:	00000206 	br	1008c1c <alt_get_errno+0x3c>
 1008c14:	00804074 	movhi	r2,257
 1008c18:	10abc804 	addi	r2,r2,-20704
}
 1008c1c:	e037883a 	mov	sp,fp
 1008c20:	dfc00117 	ldw	ra,4(sp)
 1008c24:	df000017 	ldw	fp,0(sp)
 1008c28:	dec00204 	addi	sp,sp,8
 1008c2c:	f800283a 	ret

01008c30 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1008c30:	defffa04 	addi	sp,sp,-24
 1008c34:	dfc00515 	stw	ra,20(sp)
 1008c38:	df000415 	stw	fp,16(sp)
 1008c3c:	df000404 	addi	fp,sp,16
 1008c40:	e13ffe15 	stw	r4,-8(fp)
 1008c44:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1008c48:	e0bffe17 	ldw	r2,-8(fp)
 1008c4c:	10000326 	beq	r2,zero,1008c5c <alt_dev_llist_insert+0x2c>
 1008c50:	e0bffe17 	ldw	r2,-8(fp)
 1008c54:	10800217 	ldw	r2,8(r2)
 1008c58:	1000061e 	bne	r2,zero,1008c74 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 1008c5c:	1008be00 	call	1008be0 <alt_get_errno>
 1008c60:	1007883a 	mov	r3,r2
 1008c64:	00800584 	movi	r2,22
 1008c68:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1008c6c:	00bffa84 	movi	r2,-22
 1008c70:	00001306 	br	1008cc0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1008c74:	e0bffe17 	ldw	r2,-8(fp)
 1008c78:	e0ffff17 	ldw	r3,-4(fp)
 1008c7c:	e0fffc15 	stw	r3,-16(fp)
 1008c80:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1008c84:	e0bffd17 	ldw	r2,-12(fp)
 1008c88:	e0fffc17 	ldw	r3,-16(fp)
 1008c8c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1008c90:	e0bffc17 	ldw	r2,-16(fp)
 1008c94:	10c00017 	ldw	r3,0(r2)
 1008c98:	e0bffd17 	ldw	r2,-12(fp)
 1008c9c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1008ca0:	e0bffc17 	ldw	r2,-16(fp)
 1008ca4:	10800017 	ldw	r2,0(r2)
 1008ca8:	e0fffd17 	ldw	r3,-12(fp)
 1008cac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1008cb0:	e0bffc17 	ldw	r2,-16(fp)
 1008cb4:	e0fffd17 	ldw	r3,-12(fp)
 1008cb8:	10c00015 	stw	r3,0(r2)

  return 0;  
 1008cbc:	0005883a 	mov	r2,zero
}
 1008cc0:	e037883a 	mov	sp,fp
 1008cc4:	dfc00117 	ldw	ra,4(sp)
 1008cc8:	df000017 	ldw	fp,0(sp)
 1008ccc:	dec00204 	addi	sp,sp,8
 1008cd0:	f800283a 	ret

01008cd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1008cd4:	defffe04 	addi	sp,sp,-8
 1008cd8:	dfc00115 	stw	ra,4(sp)
 1008cdc:	df000015 	stw	fp,0(sp)
 1008ce0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1008ce4:	00804074 	movhi	r2,257
 1008ce8:	10a9d104 	addi	r2,r2,-22716
 1008cec:	10800017 	ldw	r2,0(r2)
 1008cf0:	10000526 	beq	r2,zero,1008d08 <alt_get_errno+0x34>
 1008cf4:	00804074 	movhi	r2,257
 1008cf8:	10a9d104 	addi	r2,r2,-22716
 1008cfc:	10800017 	ldw	r2,0(r2)
 1008d00:	103ee83a 	callr	r2
 1008d04:	00000206 	br	1008d10 <alt_get_errno+0x3c>
 1008d08:	00804074 	movhi	r2,257
 1008d0c:	10abc804 	addi	r2,r2,-20704
}
 1008d10:	e037883a 	mov	sp,fp
 1008d14:	dfc00117 	ldw	ra,4(sp)
 1008d18:	df000017 	ldw	fp,0(sp)
 1008d1c:	dec00204 	addi	sp,sp,8
 1008d20:	f800283a 	ret

01008d24 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
 1008d24:	defffc04 	addi	sp,sp,-16
 1008d28:	dfc00315 	stw	ra,12(sp)
 1008d2c:	df000215 	stw	fp,8(sp)
 1008d30:	df000204 	addi	fp,sp,8
 1008d34:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
 1008d38:	e13fff17 	ldw	r4,-4(fp)
 1008d3c:	d1600a04 	addi	r5,gp,-32728
 1008d40:	1008ed40 	call	1008ed4 <alt_find_dev>
 1008d44:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
 1008d48:	e0bffe17 	ldw	r2,-8(fp)
 1008d4c:	1000041e 	bne	r2,zero,1008d60 <alt_dma_rxchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 1008d50:	1008cd40 	call	1008cd4 <alt_get_errno>
 1008d54:	1007883a 	mov	r3,r2
 1008d58:	008004c4 	movi	r2,19
 1008d5c:	18800015 	stw	r2,0(r3)
  }

  return dev;
 1008d60:	e0bffe17 	ldw	r2,-8(fp)
}
 1008d64:	e037883a 	mov	sp,fp
 1008d68:	dfc00117 	ldw	ra,4(sp)
 1008d6c:	df000017 	ldw	fp,0(sp)
 1008d70:	dec00204 	addi	sp,sp,8
 1008d74:	f800283a 	ret

01008d78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1008d78:	defffe04 	addi	sp,sp,-8
 1008d7c:	dfc00115 	stw	ra,4(sp)
 1008d80:	df000015 	stw	fp,0(sp)
 1008d84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1008d88:	00804074 	movhi	r2,257
 1008d8c:	10a9d104 	addi	r2,r2,-22716
 1008d90:	10800017 	ldw	r2,0(r2)
 1008d94:	10000526 	beq	r2,zero,1008dac <alt_get_errno+0x34>
 1008d98:	00804074 	movhi	r2,257
 1008d9c:	10a9d104 	addi	r2,r2,-22716
 1008da0:	10800017 	ldw	r2,0(r2)
 1008da4:	103ee83a 	callr	r2
 1008da8:	00000206 	br	1008db4 <alt_get_errno+0x3c>
 1008dac:	00804074 	movhi	r2,257
 1008db0:	10abc804 	addi	r2,r2,-20704
}
 1008db4:	e037883a 	mov	sp,fp
 1008db8:	dfc00117 	ldw	ra,4(sp)
 1008dbc:	df000017 	ldw	fp,0(sp)
 1008dc0:	dec00204 	addi	sp,sp,8
 1008dc4:	f800283a 	ret

01008dc8 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
 1008dc8:	defffc04 	addi	sp,sp,-16
 1008dcc:	dfc00315 	stw	ra,12(sp)
 1008dd0:	df000215 	stw	fp,8(sp)
 1008dd4:	df000204 	addi	fp,sp,8
 1008dd8:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
 1008ddc:	e13fff17 	ldw	r4,-4(fp)
 1008de0:	d1600c04 	addi	r5,gp,-32720
 1008de4:	1008ed40 	call	1008ed4 <alt_find_dev>
 1008de8:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
 1008dec:	e0bffe17 	ldw	r2,-8(fp)
 1008df0:	1000041e 	bne	r2,zero,1008e04 <alt_dma_txchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 1008df4:	1008d780 	call	1008d78 <alt_get_errno>
 1008df8:	1007883a 	mov	r3,r2
 1008dfc:	008004c4 	movi	r2,19
 1008e00:	18800015 	stw	r2,0(r3)
  }

  return dev;
 1008e04:	e0bffe17 	ldw	r2,-8(fp)
}
 1008e08:	e037883a 	mov	sp,fp
 1008e0c:	dfc00117 	ldw	ra,4(sp)
 1008e10:	df000017 	ldw	fp,0(sp)
 1008e14:	dec00204 	addi	sp,sp,8
 1008e18:	f800283a 	ret

01008e1c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1008e1c:	defffd04 	addi	sp,sp,-12
 1008e20:	dfc00215 	stw	ra,8(sp)
 1008e24:	df000115 	stw	fp,4(sp)
 1008e28:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1008e2c:	00804074 	movhi	r2,257
 1008e30:	10a77d04 	addi	r2,r2,-25100
 1008e34:	e0bfff15 	stw	r2,-4(fp)
 1008e38:	00000606 	br	1008e54 <_do_ctors+0x38>
        (*ctor) (); 
 1008e3c:	e0bfff17 	ldw	r2,-4(fp)
 1008e40:	10800017 	ldw	r2,0(r2)
 1008e44:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1008e48:	e0bfff17 	ldw	r2,-4(fp)
 1008e4c:	10bfff04 	addi	r2,r2,-4
 1008e50:	e0bfff15 	stw	r2,-4(fp)
 1008e54:	e0ffff17 	ldw	r3,-4(fp)
 1008e58:	00804074 	movhi	r2,257
 1008e5c:	10a77e04 	addi	r2,r2,-25096
 1008e60:	18bff62e 	bgeu	r3,r2,1008e3c <__alt_data_end+0xfffe7ee4>
        (*ctor) (); 
}
 1008e64:	e037883a 	mov	sp,fp
 1008e68:	dfc00117 	ldw	ra,4(sp)
 1008e6c:	df000017 	ldw	fp,0(sp)
 1008e70:	dec00204 	addi	sp,sp,8
 1008e74:	f800283a 	ret

01008e78 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1008e78:	defffd04 	addi	sp,sp,-12
 1008e7c:	dfc00215 	stw	ra,8(sp)
 1008e80:	df000115 	stw	fp,4(sp)
 1008e84:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1008e88:	00804074 	movhi	r2,257
 1008e8c:	10a77d04 	addi	r2,r2,-25100
 1008e90:	e0bfff15 	stw	r2,-4(fp)
 1008e94:	00000606 	br	1008eb0 <_do_dtors+0x38>
        (*dtor) (); 
 1008e98:	e0bfff17 	ldw	r2,-4(fp)
 1008e9c:	10800017 	ldw	r2,0(r2)
 1008ea0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1008ea4:	e0bfff17 	ldw	r2,-4(fp)
 1008ea8:	10bfff04 	addi	r2,r2,-4
 1008eac:	e0bfff15 	stw	r2,-4(fp)
 1008eb0:	e0ffff17 	ldw	r3,-4(fp)
 1008eb4:	00804074 	movhi	r2,257
 1008eb8:	10a77e04 	addi	r2,r2,-25096
 1008ebc:	18bff62e 	bgeu	r3,r2,1008e98 <__alt_data_end+0xfffe7f40>
        (*dtor) (); 
}
 1008ec0:	e037883a 	mov	sp,fp
 1008ec4:	dfc00117 	ldw	ra,4(sp)
 1008ec8:	df000017 	ldw	fp,0(sp)
 1008ecc:	dec00204 	addi	sp,sp,8
 1008ed0:	f800283a 	ret

01008ed4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1008ed4:	defffa04 	addi	sp,sp,-24
 1008ed8:	dfc00515 	stw	ra,20(sp)
 1008edc:	df000415 	stw	fp,16(sp)
 1008ee0:	df000404 	addi	fp,sp,16
 1008ee4:	e13ffe15 	stw	r4,-8(fp)
 1008ee8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1008eec:	e0bfff17 	ldw	r2,-4(fp)
 1008ef0:	10800017 	ldw	r2,0(r2)
 1008ef4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1008ef8:	e13ffe17 	ldw	r4,-8(fp)
 1008efc:	1006d480 	call	1006d48 <strlen>
 1008f00:	10800044 	addi	r2,r2,1
 1008f04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1008f08:	00000d06 	br	1008f40 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1008f0c:	e0bffc17 	ldw	r2,-16(fp)
 1008f10:	10c00217 	ldw	r3,8(r2)
 1008f14:	e0bffd17 	ldw	r2,-12(fp)
 1008f18:	1809883a 	mov	r4,r3
 1008f1c:	e17ffe17 	ldw	r5,-8(fp)
 1008f20:	100d883a 	mov	r6,r2
 1008f24:	1009ab40 	call	1009ab4 <memcmp>
 1008f28:	1000021e 	bne	r2,zero,1008f34 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1008f2c:	e0bffc17 	ldw	r2,-16(fp)
 1008f30:	00000706 	br	1008f50 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1008f34:	e0bffc17 	ldw	r2,-16(fp)
 1008f38:	10800017 	ldw	r2,0(r2)
 1008f3c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1008f40:	e0fffc17 	ldw	r3,-16(fp)
 1008f44:	e0bfff17 	ldw	r2,-4(fp)
 1008f48:	18bff01e 	bne	r3,r2,1008f0c <__alt_data_end+0xfffe7fb4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1008f4c:	0005883a 	mov	r2,zero
}
 1008f50:	e037883a 	mov	sp,fp
 1008f54:	dfc00117 	ldw	ra,4(sp)
 1008f58:	df000017 	ldw	fp,0(sp)
 1008f5c:	dec00204 	addi	sp,sp,8
 1008f60:	f800283a 	ret

01008f64 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1008f64:	defffe04 	addi	sp,sp,-8
 1008f68:	dfc00115 	stw	ra,4(sp)
 1008f6c:	df000015 	stw	fp,0(sp)
 1008f70:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1008f74:	0009883a 	mov	r4,zero
 1008f78:	01440004 	movi	r5,4096
 1008f7c:	10099f40 	call	10099f4 <alt_icache_flush>
#endif
}
 1008f80:	e037883a 	mov	sp,fp
 1008f84:	dfc00117 	ldw	ra,4(sp)
 1008f88:	df000017 	ldw	fp,0(sp)
 1008f8c:	dec00204 	addi	sp,sp,8
 1008f90:	f800283a 	ret

01008f94 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1008f94:	defff904 	addi	sp,sp,-28
 1008f98:	dfc00615 	stw	ra,24(sp)
 1008f9c:	df000515 	stw	fp,20(sp)
 1008fa0:	df000504 	addi	fp,sp,20
 1008fa4:	e13ffc15 	stw	r4,-16(fp)
 1008fa8:	e17ffd15 	stw	r5,-12(fp)
 1008fac:	e1bffe15 	stw	r6,-8(fp)
 1008fb0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1008fb4:	e0800217 	ldw	r2,8(fp)
 1008fb8:	d8800015 	stw	r2,0(sp)
 1008fbc:	e13ffc17 	ldw	r4,-16(fp)
 1008fc0:	e17ffd17 	ldw	r5,-12(fp)
 1008fc4:	e1bffe17 	ldw	r6,-8(fp)
 1008fc8:	e1ffff17 	ldw	r7,-4(fp)
 1008fcc:	10091740 	call	1009174 <alt_iic_isr_register>
}  
 1008fd0:	e037883a 	mov	sp,fp
 1008fd4:	dfc00117 	ldw	ra,4(sp)
 1008fd8:	df000017 	ldw	fp,0(sp)
 1008fdc:	dec00204 	addi	sp,sp,8
 1008fe0:	f800283a 	ret

01008fe4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1008fe4:	defff904 	addi	sp,sp,-28
 1008fe8:	df000615 	stw	fp,24(sp)
 1008fec:	df000604 	addi	fp,sp,24
 1008ff0:	e13ffe15 	stw	r4,-8(fp)
 1008ff4:	e17fff15 	stw	r5,-4(fp)
 1008ff8:	e0bfff17 	ldw	r2,-4(fp)
 1008ffc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1009000:	0005303a 	rdctl	r2,status
 1009004:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009008:	e0fffb17 	ldw	r3,-20(fp)
 100900c:	00bfff84 	movi	r2,-2
 1009010:	1884703a 	and	r2,r3,r2
 1009014:	1001703a 	wrctl	status,r2
  
  return context;
 1009018:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100901c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 1009020:	e0bffa17 	ldw	r2,-24(fp)
 1009024:	00c00044 	movi	r3,1
 1009028:	1884983a 	sll	r2,r3,r2
 100902c:	1007883a 	mov	r3,r2
 1009030:	00804074 	movhi	r2,257
 1009034:	10abc904 	addi	r2,r2,-20700
 1009038:	10800017 	ldw	r2,0(r2)
 100903c:	1886b03a 	or	r3,r3,r2
 1009040:	00804074 	movhi	r2,257
 1009044:	10abc904 	addi	r2,r2,-20700
 1009048:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100904c:	00804074 	movhi	r2,257
 1009050:	10abc904 	addi	r2,r2,-20700
 1009054:	10800017 	ldw	r2,0(r2)
 1009058:	100170fa 	wrctl	ienable,r2
 100905c:	e0bffc17 	ldw	r2,-16(fp)
 1009060:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009064:	e0bffd17 	ldw	r2,-12(fp)
 1009068:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100906c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 1009070:	0001883a 	nop
}
 1009074:	e037883a 	mov	sp,fp
 1009078:	df000017 	ldw	fp,0(sp)
 100907c:	dec00104 	addi	sp,sp,4
 1009080:	f800283a 	ret

01009084 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1009084:	defff904 	addi	sp,sp,-28
 1009088:	df000615 	stw	fp,24(sp)
 100908c:	df000604 	addi	fp,sp,24
 1009090:	e13ffe15 	stw	r4,-8(fp)
 1009094:	e17fff15 	stw	r5,-4(fp)
 1009098:	e0bfff17 	ldw	r2,-4(fp)
 100909c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10090a0:	0005303a 	rdctl	r2,status
 10090a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10090a8:	e0fffb17 	ldw	r3,-20(fp)
 10090ac:	00bfff84 	movi	r2,-2
 10090b0:	1884703a 	and	r2,r3,r2
 10090b4:	1001703a 	wrctl	status,r2
  
  return context;
 10090b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10090bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 10090c0:	e0bffa17 	ldw	r2,-24(fp)
 10090c4:	00c00044 	movi	r3,1
 10090c8:	1884983a 	sll	r2,r3,r2
 10090cc:	0084303a 	nor	r2,zero,r2
 10090d0:	1007883a 	mov	r3,r2
 10090d4:	00804074 	movhi	r2,257
 10090d8:	10abc904 	addi	r2,r2,-20700
 10090dc:	10800017 	ldw	r2,0(r2)
 10090e0:	1886703a 	and	r3,r3,r2
 10090e4:	00804074 	movhi	r2,257
 10090e8:	10abc904 	addi	r2,r2,-20700
 10090ec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10090f0:	00804074 	movhi	r2,257
 10090f4:	10abc904 	addi	r2,r2,-20700
 10090f8:	10800017 	ldw	r2,0(r2)
 10090fc:	100170fa 	wrctl	ienable,r2
 1009100:	e0bffc17 	ldw	r2,-16(fp)
 1009104:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009108:	e0bffd17 	ldw	r2,-12(fp)
 100910c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1009110:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 1009114:	0001883a 	nop
}
 1009118:	e037883a 	mov	sp,fp
 100911c:	df000017 	ldw	fp,0(sp)
 1009120:	dec00104 	addi	sp,sp,4
 1009124:	f800283a 	ret

01009128 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1009128:	defffc04 	addi	sp,sp,-16
 100912c:	df000315 	stw	fp,12(sp)
 1009130:	df000304 	addi	fp,sp,12
 1009134:	e13ffe15 	stw	r4,-8(fp)
 1009138:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 100913c:	000530fa 	rdctl	r2,ienable
 1009140:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1009144:	e0bfff17 	ldw	r2,-4(fp)
 1009148:	00c00044 	movi	r3,1
 100914c:	1884983a 	sll	r2,r3,r2
 1009150:	1007883a 	mov	r3,r2
 1009154:	e0bffd17 	ldw	r2,-12(fp)
 1009158:	1884703a 	and	r2,r3,r2
 100915c:	1004c03a 	cmpne	r2,r2,zero
 1009160:	10803fcc 	andi	r2,r2,255
}
 1009164:	e037883a 	mov	sp,fp
 1009168:	df000017 	ldw	fp,0(sp)
 100916c:	dec00104 	addi	sp,sp,4
 1009170:	f800283a 	ret

01009174 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1009174:	defff504 	addi	sp,sp,-44
 1009178:	dfc00a15 	stw	ra,40(sp)
 100917c:	df000915 	stw	fp,36(sp)
 1009180:	df000904 	addi	fp,sp,36
 1009184:	e13ffc15 	stw	r4,-16(fp)
 1009188:	e17ffd15 	stw	r5,-12(fp)
 100918c:	e1bffe15 	stw	r6,-8(fp)
 1009190:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 1009194:	00bffa84 	movi	r2,-22
 1009198:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 100919c:	e0bffd17 	ldw	r2,-12(fp)
 10091a0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 10091a4:	e0bff817 	ldw	r2,-32(fp)
 10091a8:	10800808 	cmpgei	r2,r2,32
 10091ac:	1000271e 	bne	r2,zero,100924c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10091b0:	0005303a 	rdctl	r2,status
 10091b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10091b8:	e0fffa17 	ldw	r3,-24(fp)
 10091bc:	00bfff84 	movi	r2,-2
 10091c0:	1884703a 	and	r2,r3,r2
 10091c4:	1001703a 	wrctl	status,r2
  
  return context;
 10091c8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 10091cc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 10091d0:	00804074 	movhi	r2,257
 10091d4:	10ad8c04 	addi	r2,r2,-18896
 10091d8:	e0fff817 	ldw	r3,-32(fp)
 10091dc:	180690fa 	slli	r3,r3,3
 10091e0:	10c5883a 	add	r2,r2,r3
 10091e4:	e0fffe17 	ldw	r3,-8(fp)
 10091e8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 10091ec:	00804074 	movhi	r2,257
 10091f0:	10ad8c04 	addi	r2,r2,-18896
 10091f4:	e0fff817 	ldw	r3,-32(fp)
 10091f8:	180690fa 	slli	r3,r3,3
 10091fc:	10c5883a 	add	r2,r2,r3
 1009200:	10800104 	addi	r2,r2,4
 1009204:	e0ffff17 	ldw	r3,-4(fp)
 1009208:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 100920c:	e0bffe17 	ldw	r2,-8(fp)
 1009210:	10000526 	beq	r2,zero,1009228 <alt_iic_isr_register+0xb4>
 1009214:	e0bff817 	ldw	r2,-32(fp)
 1009218:	e13ffc17 	ldw	r4,-16(fp)
 100921c:	100b883a 	mov	r5,r2
 1009220:	1008fe40 	call	1008fe4 <alt_ic_irq_enable>
 1009224:	00000406 	br	1009238 <alt_iic_isr_register+0xc4>
 1009228:	e0bff817 	ldw	r2,-32(fp)
 100922c:	e13ffc17 	ldw	r4,-16(fp)
 1009230:	100b883a 	mov	r5,r2
 1009234:	10090840 	call	1009084 <alt_ic_irq_disable>
 1009238:	e0bff715 	stw	r2,-36(fp)
 100923c:	e0bff917 	ldw	r2,-28(fp)
 1009240:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009244:	e0bffb17 	ldw	r2,-20(fp)
 1009248:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 100924c:	e0bff717 	ldw	r2,-36(fp)
}
 1009250:	e037883a 	mov	sp,fp
 1009254:	dfc00117 	ldw	ra,4(sp)
 1009258:	df000017 	ldw	fp,0(sp)
 100925c:	dec00204 	addi	sp,sp,8
 1009260:	f800283a 	ret

01009264 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1009264:	defff904 	addi	sp,sp,-28
 1009268:	dfc00615 	stw	ra,24(sp)
 100926c:	df000515 	stw	fp,20(sp)
 1009270:	df000504 	addi	fp,sp,20
 1009274:	e13ffc15 	stw	r4,-16(fp)
 1009278:	e17ffd15 	stw	r5,-12(fp)
 100927c:	e1bffe15 	stw	r6,-8(fp)
 1009280:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1009284:	e13ffd17 	ldw	r4,-12(fp)
 1009288:	e17ffe17 	ldw	r5,-8(fp)
 100928c:	e1bfff17 	ldw	r6,-4(fp)
 1009290:	10094b80 	call	10094b8 <open>
 1009294:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1009298:	e0bffb17 	ldw	r2,-20(fp)
 100929c:	10001c16 	blt	r2,zero,1009310 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 10092a0:	00804074 	movhi	r2,257
 10092a4:	10a96304 	addi	r2,r2,-23156
 10092a8:	e0fffb17 	ldw	r3,-20(fp)
 10092ac:	18c00324 	muli	r3,r3,12
 10092b0:	10c5883a 	add	r2,r2,r3
 10092b4:	10c00017 	ldw	r3,0(r2)
 10092b8:	e0bffc17 	ldw	r2,-16(fp)
 10092bc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 10092c0:	00804074 	movhi	r2,257
 10092c4:	10a96304 	addi	r2,r2,-23156
 10092c8:	e0fffb17 	ldw	r3,-20(fp)
 10092cc:	18c00324 	muli	r3,r3,12
 10092d0:	10c5883a 	add	r2,r2,r3
 10092d4:	10800104 	addi	r2,r2,4
 10092d8:	10c00017 	ldw	r3,0(r2)
 10092dc:	e0bffc17 	ldw	r2,-16(fp)
 10092e0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 10092e4:	00804074 	movhi	r2,257
 10092e8:	10a96304 	addi	r2,r2,-23156
 10092ec:	e0fffb17 	ldw	r3,-20(fp)
 10092f0:	18c00324 	muli	r3,r3,12
 10092f4:	10c5883a 	add	r2,r2,r3
 10092f8:	10800204 	addi	r2,r2,8
 10092fc:	10c00017 	ldw	r3,0(r2)
 1009300:	e0bffc17 	ldw	r2,-16(fp)
 1009304:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1009308:	e13ffb17 	ldw	r4,-20(fp)
 100930c:	10096100 	call	1009610 <alt_release_fd>
  }
} 
 1009310:	e037883a 	mov	sp,fp
 1009314:	dfc00117 	ldw	ra,4(sp)
 1009318:	df000017 	ldw	fp,0(sp)
 100931c:	dec00204 	addi	sp,sp,8
 1009320:	f800283a 	ret

01009324 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1009324:	defffb04 	addi	sp,sp,-20
 1009328:	dfc00415 	stw	ra,16(sp)
 100932c:	df000315 	stw	fp,12(sp)
 1009330:	df000304 	addi	fp,sp,12
 1009334:	e13ffd15 	stw	r4,-12(fp)
 1009338:	e17ffe15 	stw	r5,-8(fp)
 100933c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1009340:	01004074 	movhi	r4,257
 1009344:	21296604 	addi	r4,r4,-23144
 1009348:	e17ffd17 	ldw	r5,-12(fp)
 100934c:	01800044 	movi	r6,1
 1009350:	01c07fc4 	movi	r7,511
 1009354:	10092640 	call	1009264 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1009358:	01004074 	movhi	r4,257
 100935c:	21296304 	addi	r4,r4,-23156
 1009360:	e17ffe17 	ldw	r5,-8(fp)
 1009364:	000d883a 	mov	r6,zero
 1009368:	01c07fc4 	movi	r7,511
 100936c:	10092640 	call	1009264 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1009370:	01004074 	movhi	r4,257
 1009374:	21296904 	addi	r4,r4,-23132
 1009378:	e17fff17 	ldw	r5,-4(fp)
 100937c:	01800044 	movi	r6,1
 1009380:	01c07fc4 	movi	r7,511
 1009384:	10092640 	call	1009264 <alt_open_fd>
}  
 1009388:	e037883a 	mov	sp,fp
 100938c:	dfc00117 	ldw	ra,4(sp)
 1009390:	df000017 	ldw	fp,0(sp)
 1009394:	dec00204 	addi	sp,sp,8
 1009398:	f800283a 	ret

0100939c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100939c:	defffe04 	addi	sp,sp,-8
 10093a0:	dfc00115 	stw	ra,4(sp)
 10093a4:	df000015 	stw	fp,0(sp)
 10093a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10093ac:	00804074 	movhi	r2,257
 10093b0:	10a9d104 	addi	r2,r2,-22716
 10093b4:	10800017 	ldw	r2,0(r2)
 10093b8:	10000526 	beq	r2,zero,10093d0 <alt_get_errno+0x34>
 10093bc:	00804074 	movhi	r2,257
 10093c0:	10a9d104 	addi	r2,r2,-22716
 10093c4:	10800017 	ldw	r2,0(r2)
 10093c8:	103ee83a 	callr	r2
 10093cc:	00000206 	br	10093d8 <alt_get_errno+0x3c>
 10093d0:	00804074 	movhi	r2,257
 10093d4:	10abc804 	addi	r2,r2,-20704
}
 10093d8:	e037883a 	mov	sp,fp
 10093dc:	dfc00117 	ldw	ra,4(sp)
 10093e0:	df000017 	ldw	fp,0(sp)
 10093e4:	dec00204 	addi	sp,sp,8
 10093e8:	f800283a 	ret

010093ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 10093ec:	defffd04 	addi	sp,sp,-12
 10093f0:	df000215 	stw	fp,8(sp)
 10093f4:	df000204 	addi	fp,sp,8
 10093f8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10093fc:	e0bfff17 	ldw	r2,-4(fp)
 1009400:	10800217 	ldw	r2,8(r2)
 1009404:	10d00034 	orhi	r3,r2,16384
 1009408:	e0bfff17 	ldw	r2,-4(fp)
 100940c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1009410:	e03ffe15 	stw	zero,-8(fp)
 1009414:	00001d06 	br	100948c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1009418:	00804074 	movhi	r2,257
 100941c:	10a96304 	addi	r2,r2,-23156
 1009420:	e0fffe17 	ldw	r3,-8(fp)
 1009424:	18c00324 	muli	r3,r3,12
 1009428:	10c5883a 	add	r2,r2,r3
 100942c:	10c00017 	ldw	r3,0(r2)
 1009430:	e0bfff17 	ldw	r2,-4(fp)
 1009434:	10800017 	ldw	r2,0(r2)
 1009438:	1880111e 	bne	r3,r2,1009480 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 100943c:	00804074 	movhi	r2,257
 1009440:	10a96304 	addi	r2,r2,-23156
 1009444:	e0fffe17 	ldw	r3,-8(fp)
 1009448:	18c00324 	muli	r3,r3,12
 100944c:	10c5883a 	add	r2,r2,r3
 1009450:	10800204 	addi	r2,r2,8
 1009454:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1009458:	1000090e 	bge	r2,zero,1009480 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 100945c:	e0bffe17 	ldw	r2,-8(fp)
 1009460:	10c00324 	muli	r3,r2,12
 1009464:	00804074 	movhi	r2,257
 1009468:	10a96304 	addi	r2,r2,-23156
 100946c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1009470:	e0bfff17 	ldw	r2,-4(fp)
 1009474:	18800226 	beq	r3,r2,1009480 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1009478:	00bffcc4 	movi	r2,-13
 100947c:	00000a06 	br	10094a8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1009480:	e0bffe17 	ldw	r2,-8(fp)
 1009484:	10800044 	addi	r2,r2,1
 1009488:	e0bffe15 	stw	r2,-8(fp)
 100948c:	00804074 	movhi	r2,257
 1009490:	10a9cc04 	addi	r2,r2,-22736
 1009494:	10800017 	ldw	r2,0(r2)
 1009498:	1007883a 	mov	r3,r2
 100949c:	e0bffe17 	ldw	r2,-8(fp)
 10094a0:	18bfdd2e 	bgeu	r3,r2,1009418 <__alt_data_end+0xfffe84c0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 10094a4:	0005883a 	mov	r2,zero
}
 10094a8:	e037883a 	mov	sp,fp
 10094ac:	df000017 	ldw	fp,0(sp)
 10094b0:	dec00104 	addi	sp,sp,4
 10094b4:	f800283a 	ret

010094b8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 10094b8:	defff604 	addi	sp,sp,-40
 10094bc:	dfc00915 	stw	ra,36(sp)
 10094c0:	df000815 	stw	fp,32(sp)
 10094c4:	df000804 	addi	fp,sp,32
 10094c8:	e13ffd15 	stw	r4,-12(fp)
 10094cc:	e17ffe15 	stw	r5,-8(fp)
 10094d0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 10094d4:	00bfffc4 	movi	r2,-1
 10094d8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 10094dc:	00bffb44 	movi	r2,-19
 10094e0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 10094e4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 10094e8:	e13ffd17 	ldw	r4,-12(fp)
 10094ec:	01404074 	movhi	r5,257
 10094f0:	2969ca04 	addi	r5,r5,-22744
 10094f4:	1008ed40 	call	1008ed4 <alt_find_dev>
 10094f8:	e0bff815 	stw	r2,-32(fp)
 10094fc:	e0bff817 	ldw	r2,-32(fp)
 1009500:	1000051e 	bne	r2,zero,1009518 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1009504:	e13ffd17 	ldw	r4,-12(fp)
 1009508:	100982c0 	call	100982c <alt_find_file>
 100950c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 1009510:	00800044 	movi	r2,1
 1009514:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1009518:	e0bff817 	ldw	r2,-32(fp)
 100951c:	10002926 	beq	r2,zero,10095c4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1009520:	e13ff817 	ldw	r4,-32(fp)
 1009524:	10099400 	call	1009940 <alt_get_fd>
 1009528:	e0bff915 	stw	r2,-28(fp)
 100952c:	e0bff917 	ldw	r2,-28(fp)
 1009530:	1000030e 	bge	r2,zero,1009540 <open+0x88>
    {
      status = index;
 1009534:	e0bff917 	ldw	r2,-28(fp)
 1009538:	e0bffa15 	stw	r2,-24(fp)
 100953c:	00002306 	br	10095cc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 1009540:	e0bff917 	ldw	r2,-28(fp)
 1009544:	10c00324 	muli	r3,r2,12
 1009548:	00804074 	movhi	r2,257
 100954c:	10a96304 	addi	r2,r2,-23156
 1009550:	1885883a 	add	r2,r3,r2
 1009554:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1009558:	e0fffe17 	ldw	r3,-8(fp)
 100955c:	00900034 	movhi	r2,16384
 1009560:	10bfffc4 	addi	r2,r2,-1
 1009564:	1886703a 	and	r3,r3,r2
 1009568:	e0bffc17 	ldw	r2,-16(fp)
 100956c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1009570:	e0bffb17 	ldw	r2,-20(fp)
 1009574:	1000051e 	bne	r2,zero,100958c <open+0xd4>
 1009578:	e13ffc17 	ldw	r4,-16(fp)
 100957c:	10093ec0 	call	10093ec <alt_file_locked>
 1009580:	e0bffa15 	stw	r2,-24(fp)
 1009584:	e0bffa17 	ldw	r2,-24(fp)
 1009588:	10001016 	blt	r2,zero,10095cc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100958c:	e0bff817 	ldw	r2,-32(fp)
 1009590:	10800317 	ldw	r2,12(r2)
 1009594:	10000826 	beq	r2,zero,10095b8 <open+0x100>
 1009598:	e0bff817 	ldw	r2,-32(fp)
 100959c:	10800317 	ldw	r2,12(r2)
 10095a0:	e13ffc17 	ldw	r4,-16(fp)
 10095a4:	e17ffd17 	ldw	r5,-12(fp)
 10095a8:	e1bffe17 	ldw	r6,-8(fp)
 10095ac:	e1ffff17 	ldw	r7,-4(fp)
 10095b0:	103ee83a 	callr	r2
 10095b4:	00000106 	br	10095bc <open+0x104>
 10095b8:	0005883a 	mov	r2,zero
 10095bc:	e0bffa15 	stw	r2,-24(fp)
 10095c0:	00000206 	br	10095cc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 10095c4:	00bffb44 	movi	r2,-19
 10095c8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 10095cc:	e0bffa17 	ldw	r2,-24(fp)
 10095d0:	1000090e 	bge	r2,zero,10095f8 <open+0x140>
  {
    alt_release_fd (index);  
 10095d4:	e13ff917 	ldw	r4,-28(fp)
 10095d8:	10096100 	call	1009610 <alt_release_fd>
    ALT_ERRNO = -status;
 10095dc:	100939c0 	call	100939c <alt_get_errno>
 10095e0:	1007883a 	mov	r3,r2
 10095e4:	e0bffa17 	ldw	r2,-24(fp)
 10095e8:	0085c83a 	sub	r2,zero,r2
 10095ec:	18800015 	stw	r2,0(r3)
    return -1;
 10095f0:	00bfffc4 	movi	r2,-1
 10095f4:	00000106 	br	10095fc <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 10095f8:	e0bff917 	ldw	r2,-28(fp)
}
 10095fc:	e037883a 	mov	sp,fp
 1009600:	dfc00117 	ldw	ra,4(sp)
 1009604:	df000017 	ldw	fp,0(sp)
 1009608:	dec00204 	addi	sp,sp,8
 100960c:	f800283a 	ret

01009610 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1009610:	defffe04 	addi	sp,sp,-8
 1009614:	df000115 	stw	fp,4(sp)
 1009618:	df000104 	addi	fp,sp,4
 100961c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1009620:	e0bfff17 	ldw	r2,-4(fp)
 1009624:	108000d0 	cmplti	r2,r2,3
 1009628:	10000d1e 	bne	r2,zero,1009660 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 100962c:	00804074 	movhi	r2,257
 1009630:	10a96304 	addi	r2,r2,-23156
 1009634:	e0ffff17 	ldw	r3,-4(fp)
 1009638:	18c00324 	muli	r3,r3,12
 100963c:	10c5883a 	add	r2,r2,r3
 1009640:	10800204 	addi	r2,r2,8
 1009644:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1009648:	00804074 	movhi	r2,257
 100964c:	10a96304 	addi	r2,r2,-23156
 1009650:	e0ffff17 	ldw	r3,-4(fp)
 1009654:	18c00324 	muli	r3,r3,12
 1009658:	10c5883a 	add	r2,r2,r3
 100965c:	10000015 	stw	zero,0(r2)
  }
}
 1009660:	e037883a 	mov	sp,fp
 1009664:	df000017 	ldw	fp,0(sp)
 1009668:	dec00104 	addi	sp,sp,4
 100966c:	f800283a 	ret

01009670 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1009670:	defffa04 	addi	sp,sp,-24
 1009674:	df000515 	stw	fp,20(sp)
 1009678:	df000504 	addi	fp,sp,20
 100967c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1009680:	0005303a 	rdctl	r2,status
 1009684:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009688:	e0fffc17 	ldw	r3,-16(fp)
 100968c:	00bfff84 	movi	r2,-2
 1009690:	1884703a 	and	r2,r3,r2
 1009694:	1001703a 	wrctl	status,r2
  
  return context;
 1009698:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100969c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 10096a0:	e0bfff17 	ldw	r2,-4(fp)
 10096a4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10096a8:	e0bffd17 	ldw	r2,-12(fp)
 10096ac:	10800017 	ldw	r2,0(r2)
 10096b0:	e0fffd17 	ldw	r3,-12(fp)
 10096b4:	18c00117 	ldw	r3,4(r3)
 10096b8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 10096bc:	e0bffd17 	ldw	r2,-12(fp)
 10096c0:	10800117 	ldw	r2,4(r2)
 10096c4:	e0fffd17 	ldw	r3,-12(fp)
 10096c8:	18c00017 	ldw	r3,0(r3)
 10096cc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 10096d0:	e0bffd17 	ldw	r2,-12(fp)
 10096d4:	e0fffd17 	ldw	r3,-12(fp)
 10096d8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 10096dc:	e0bffd17 	ldw	r2,-12(fp)
 10096e0:	e0fffd17 	ldw	r3,-12(fp)
 10096e4:	10c00015 	stw	r3,0(r2)
 10096e8:	e0bffb17 	ldw	r2,-20(fp)
 10096ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10096f0:	e0bffe17 	ldw	r2,-8(fp)
 10096f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 10096f8:	e037883a 	mov	sp,fp
 10096fc:	df000017 	ldw	fp,0(sp)
 1009700:	dec00104 	addi	sp,sp,4
 1009704:	f800283a 	ret

01009708 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1009708:	defffb04 	addi	sp,sp,-20
 100970c:	dfc00415 	stw	ra,16(sp)
 1009710:	df000315 	stw	fp,12(sp)
 1009714:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1009718:	d0a00f17 	ldw	r2,-32708(gp)
 100971c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1009720:	d0a20b17 	ldw	r2,-30676(gp)
 1009724:	10800044 	addi	r2,r2,1
 1009728:	d0a20b15 	stw	r2,-30676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100972c:	00002e06 	br	10097e8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 1009730:	e0bffd17 	ldw	r2,-12(fp)
 1009734:	10800017 	ldw	r2,0(r2)
 1009738:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100973c:	e0bffd17 	ldw	r2,-12(fp)
 1009740:	10800403 	ldbu	r2,16(r2)
 1009744:	10803fcc 	andi	r2,r2,255
 1009748:	10000426 	beq	r2,zero,100975c <alt_tick+0x54>
 100974c:	d0a20b17 	ldw	r2,-30676(gp)
 1009750:	1000021e 	bne	r2,zero,100975c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 1009754:	e0bffd17 	ldw	r2,-12(fp)
 1009758:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100975c:	e0bffd17 	ldw	r2,-12(fp)
 1009760:	10800217 	ldw	r2,8(r2)
 1009764:	d0e20b17 	ldw	r3,-30676(gp)
 1009768:	18801d36 	bltu	r3,r2,10097e0 <alt_tick+0xd8>
 100976c:	e0bffd17 	ldw	r2,-12(fp)
 1009770:	10800403 	ldbu	r2,16(r2)
 1009774:	10803fcc 	andi	r2,r2,255
 1009778:	1000191e 	bne	r2,zero,10097e0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 100977c:	e0bffd17 	ldw	r2,-12(fp)
 1009780:	10800317 	ldw	r2,12(r2)
 1009784:	e0fffd17 	ldw	r3,-12(fp)
 1009788:	18c00517 	ldw	r3,20(r3)
 100978c:	1809883a 	mov	r4,r3
 1009790:	103ee83a 	callr	r2
 1009794:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1009798:	e0bfff17 	ldw	r2,-4(fp)
 100979c:	1000031e 	bne	r2,zero,10097ac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 10097a0:	e13ffd17 	ldw	r4,-12(fp)
 10097a4:	10096700 	call	1009670 <alt_alarm_stop>
 10097a8:	00000d06 	br	10097e0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 10097ac:	e0bffd17 	ldw	r2,-12(fp)
 10097b0:	10c00217 	ldw	r3,8(r2)
 10097b4:	e0bfff17 	ldw	r2,-4(fp)
 10097b8:	1887883a 	add	r3,r3,r2
 10097bc:	e0bffd17 	ldw	r2,-12(fp)
 10097c0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 10097c4:	e0bffd17 	ldw	r2,-12(fp)
 10097c8:	10c00217 	ldw	r3,8(r2)
 10097cc:	d0a20b17 	ldw	r2,-30676(gp)
 10097d0:	1880032e 	bgeu	r3,r2,10097e0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 10097d4:	e0bffd17 	ldw	r2,-12(fp)
 10097d8:	00c00044 	movi	r3,1
 10097dc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 10097e0:	e0bffe17 	ldw	r2,-8(fp)
 10097e4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10097e8:	e0fffd17 	ldw	r3,-12(fp)
 10097ec:	d0a00f04 	addi	r2,gp,-32708
 10097f0:	18bfcf1e 	bne	r3,r2,1009730 <__alt_data_end+0xfffe87d8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 10097f4:	0001883a 	nop
}
 10097f8:	e037883a 	mov	sp,fp
 10097fc:	dfc00117 	ldw	ra,4(sp)
 1009800:	df000017 	ldw	fp,0(sp)
 1009804:	dec00204 	addi	sp,sp,8
 1009808:	f800283a 	ret

0100980c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 100980c:	deffff04 	addi	sp,sp,-4
 1009810:	df000015 	stw	fp,0(sp)
 1009814:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1009818:	000170fa 	wrctl	ienable,zero
}
 100981c:	e037883a 	mov	sp,fp
 1009820:	df000017 	ldw	fp,0(sp)
 1009824:	dec00104 	addi	sp,sp,4
 1009828:	f800283a 	ret

0100982c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100982c:	defffb04 	addi	sp,sp,-20
 1009830:	dfc00415 	stw	ra,16(sp)
 1009834:	df000315 	stw	fp,12(sp)
 1009838:	df000304 	addi	fp,sp,12
 100983c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1009840:	00804074 	movhi	r2,257
 1009844:	10a9c804 	addi	r2,r2,-22752
 1009848:	10800017 	ldw	r2,0(r2)
 100984c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1009850:	00003106 	br	1009918 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 1009854:	e0bffd17 	ldw	r2,-12(fp)
 1009858:	10800217 	ldw	r2,8(r2)
 100985c:	1009883a 	mov	r4,r2
 1009860:	1006d480 	call	1006d48 <strlen>
 1009864:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1009868:	e0bffd17 	ldw	r2,-12(fp)
 100986c:	10c00217 	ldw	r3,8(r2)
 1009870:	e0bffe17 	ldw	r2,-8(fp)
 1009874:	10bfffc4 	addi	r2,r2,-1
 1009878:	1885883a 	add	r2,r3,r2
 100987c:	10800003 	ldbu	r2,0(r2)
 1009880:	10803fcc 	andi	r2,r2,255
 1009884:	1080201c 	xori	r2,r2,128
 1009888:	10bfe004 	addi	r2,r2,-128
 100988c:	10800bd8 	cmpnei	r2,r2,47
 1009890:	1000031e 	bne	r2,zero,10098a0 <alt_find_file+0x74>
    {
      len -= 1;
 1009894:	e0bffe17 	ldw	r2,-8(fp)
 1009898:	10bfffc4 	addi	r2,r2,-1
 100989c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10098a0:	e0bffe17 	ldw	r2,-8(fp)
 10098a4:	e0ffff17 	ldw	r3,-4(fp)
 10098a8:	1885883a 	add	r2,r3,r2
 10098ac:	10800003 	ldbu	r2,0(r2)
 10098b0:	10803fcc 	andi	r2,r2,255
 10098b4:	1080201c 	xori	r2,r2,128
 10098b8:	10bfe004 	addi	r2,r2,-128
 10098bc:	10800be0 	cmpeqi	r2,r2,47
 10098c0:	1000081e 	bne	r2,zero,10098e4 <alt_find_file+0xb8>
 10098c4:	e0bffe17 	ldw	r2,-8(fp)
 10098c8:	e0ffff17 	ldw	r3,-4(fp)
 10098cc:	1885883a 	add	r2,r3,r2
 10098d0:	10800003 	ldbu	r2,0(r2)
 10098d4:	10803fcc 	andi	r2,r2,255
 10098d8:	1080201c 	xori	r2,r2,128
 10098dc:	10bfe004 	addi	r2,r2,-128
 10098e0:	10000a1e 	bne	r2,zero,100990c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 10098e4:	e0bffd17 	ldw	r2,-12(fp)
 10098e8:	10c00217 	ldw	r3,8(r2)
 10098ec:	e0bffe17 	ldw	r2,-8(fp)
 10098f0:	1809883a 	mov	r4,r3
 10098f4:	e17fff17 	ldw	r5,-4(fp)
 10098f8:	100d883a 	mov	r6,r2
 10098fc:	1009ab40 	call	1009ab4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1009900:	1000021e 	bne	r2,zero,100990c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1009904:	e0bffd17 	ldw	r2,-12(fp)
 1009908:	00000806 	br	100992c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 100990c:	e0bffd17 	ldw	r2,-12(fp)
 1009910:	10800017 	ldw	r2,0(r2)
 1009914:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1009918:	e0fffd17 	ldw	r3,-12(fp)
 100991c:	00804074 	movhi	r2,257
 1009920:	10a9c804 	addi	r2,r2,-22752
 1009924:	18bfcb1e 	bne	r3,r2,1009854 <__alt_data_end+0xfffe88fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1009928:	0005883a 	mov	r2,zero
}
 100992c:	e037883a 	mov	sp,fp
 1009930:	dfc00117 	ldw	ra,4(sp)
 1009934:	df000017 	ldw	fp,0(sp)
 1009938:	dec00204 	addi	sp,sp,8
 100993c:	f800283a 	ret

01009940 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1009940:	defffc04 	addi	sp,sp,-16
 1009944:	df000315 	stw	fp,12(sp)
 1009948:	df000304 	addi	fp,sp,12
 100994c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1009950:	00bffa04 	movi	r2,-24
 1009954:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1009958:	e03ffd15 	stw	zero,-12(fp)
 100995c:	00001d06 	br	10099d4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 1009960:	00804074 	movhi	r2,257
 1009964:	10a96304 	addi	r2,r2,-23156
 1009968:	e0fffd17 	ldw	r3,-12(fp)
 100996c:	18c00324 	muli	r3,r3,12
 1009970:	10c5883a 	add	r2,r2,r3
 1009974:	10800017 	ldw	r2,0(r2)
 1009978:	1000131e 	bne	r2,zero,10099c8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 100997c:	00804074 	movhi	r2,257
 1009980:	10a96304 	addi	r2,r2,-23156
 1009984:	e0fffd17 	ldw	r3,-12(fp)
 1009988:	18c00324 	muli	r3,r3,12
 100998c:	10c5883a 	add	r2,r2,r3
 1009990:	e0ffff17 	ldw	r3,-4(fp)
 1009994:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1009998:	00804074 	movhi	r2,257
 100999c:	10a9cc04 	addi	r2,r2,-22736
 10099a0:	10c00017 	ldw	r3,0(r2)
 10099a4:	e0bffd17 	ldw	r2,-12(fp)
 10099a8:	1880040e 	bge	r3,r2,10099bc <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 10099ac:	00804074 	movhi	r2,257
 10099b0:	10a9cc04 	addi	r2,r2,-22736
 10099b4:	e0fffd17 	ldw	r3,-12(fp)
 10099b8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 10099bc:	e0bffd17 	ldw	r2,-12(fp)
 10099c0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 10099c4:	00000606 	br	10099e0 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10099c8:	e0bffd17 	ldw	r2,-12(fp)
 10099cc:	10800044 	addi	r2,r2,1
 10099d0:	e0bffd15 	stw	r2,-12(fp)
 10099d4:	e0bffd17 	ldw	r2,-12(fp)
 10099d8:	10800810 	cmplti	r2,r2,32
 10099dc:	103fe01e 	bne	r2,zero,1009960 <__alt_data_end+0xfffe8a08>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 10099e0:	e0bffe17 	ldw	r2,-8(fp)
}
 10099e4:	e037883a 	mov	sp,fp
 10099e8:	df000017 	ldw	fp,0(sp)
 10099ec:	dec00104 	addi	sp,sp,4
 10099f0:	f800283a 	ret

010099f4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 10099f4:	defffb04 	addi	sp,sp,-20
 10099f8:	df000415 	stw	fp,16(sp)
 10099fc:	df000404 	addi	fp,sp,16
 1009a00:	e13ffe15 	stw	r4,-8(fp)
 1009a04:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1009a08:	e0bfff17 	ldw	r2,-4(fp)
 1009a0c:	10840070 	cmpltui	r2,r2,4097
 1009a10:	1000021e 	bne	r2,zero,1009a1c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1009a14:	00840004 	movi	r2,4096
 1009a18:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1009a1c:	e0fffe17 	ldw	r3,-8(fp)
 1009a20:	e0bfff17 	ldw	r2,-4(fp)
 1009a24:	1885883a 	add	r2,r3,r2
 1009a28:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1009a2c:	e0bffe17 	ldw	r2,-8(fp)
 1009a30:	e0bffc15 	stw	r2,-16(fp)
 1009a34:	00000506 	br	1009a4c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1009a38:	e0bffc17 	ldw	r2,-16(fp)
 1009a3c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1009a40:	e0bffc17 	ldw	r2,-16(fp)
 1009a44:	10800804 	addi	r2,r2,32
 1009a48:	e0bffc15 	stw	r2,-16(fp)
 1009a4c:	e0fffc17 	ldw	r3,-16(fp)
 1009a50:	e0bffd17 	ldw	r2,-12(fp)
 1009a54:	18bff836 	bltu	r3,r2,1009a38 <__alt_data_end+0xfffe8ae0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1009a58:	e0bffe17 	ldw	r2,-8(fp)
 1009a5c:	108007cc 	andi	r2,r2,31
 1009a60:	10000226 	beq	r2,zero,1009a6c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1009a64:	e0bffc17 	ldw	r2,-16(fp)
 1009a68:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1009a6c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1009a70:	e037883a 	mov	sp,fp
 1009a74:	df000017 	ldw	fp,0(sp)
 1009a78:	dec00104 	addi	sp,sp,4
 1009a7c:	f800283a 	ret

01009a80 <atexit>:
 1009a80:	200b883a 	mov	r5,r4
 1009a84:	000d883a 	mov	r6,zero
 1009a88:	0009883a 	mov	r4,zero
 1009a8c:	000f883a 	mov	r7,zero
 1009a90:	1009ae41 	jmpi	1009ae4 <__register_exitproc>

01009a94 <exit>:
 1009a94:	defffe04 	addi	sp,sp,-8
 1009a98:	000b883a 	mov	r5,zero
 1009a9c:	dc000015 	stw	r16,0(sp)
 1009aa0:	dfc00115 	stw	ra,4(sp)
 1009aa4:	2021883a 	mov	r16,r4
 1009aa8:	1009c280 	call	1009c28 <__call_exitprocs>
 1009aac:	8009883a 	mov	r4,r16
 1009ab0:	1009dc40 	call	1009dc4 <_exit>

01009ab4 <memcmp>:
 1009ab4:	218d883a 	add	r6,r4,r6
 1009ab8:	21800826 	beq	r4,r6,1009adc <memcmp+0x28>
 1009abc:	20800003 	ldbu	r2,0(r4)
 1009ac0:	28c00003 	ldbu	r3,0(r5)
 1009ac4:	10c00226 	beq	r2,r3,1009ad0 <memcmp+0x1c>
 1009ac8:	10c5c83a 	sub	r2,r2,r3
 1009acc:	f800283a 	ret
 1009ad0:	21000044 	addi	r4,r4,1
 1009ad4:	29400044 	addi	r5,r5,1
 1009ad8:	003ff706 	br	1009ab8 <__alt_data_end+0xfffe8b60>
 1009adc:	0005883a 	mov	r2,zero
 1009ae0:	f800283a 	ret

01009ae4 <__register_exitproc>:
 1009ae4:	00804074 	movhi	r2,257
 1009ae8:	defff904 	addi	sp,sp,-28
 1009aec:	10a9c504 	addi	r2,r2,-22764
 1009af0:	dd400515 	stw	r21,20(sp)
 1009af4:	15400017 	ldw	r21,0(r2)
 1009af8:	dc000015 	stw	r16,0(sp)
 1009afc:	dd000415 	stw	r20,16(sp)
 1009b00:	ac000c17 	ldw	r16,48(r21)
 1009b04:	dcc00315 	stw	r19,12(sp)
 1009b08:	dc800215 	stw	r18,8(sp)
 1009b0c:	dc400115 	stw	r17,4(sp)
 1009b10:	dfc00615 	stw	ra,24(sp)
 1009b14:	2025883a 	mov	r18,r4
 1009b18:	2823883a 	mov	r17,r5
 1009b1c:	3029883a 	mov	r20,r6
 1009b20:	3827883a 	mov	r19,r7
 1009b24:	8000021e 	bne	r16,zero,1009b30 <__register_exitproc+0x4c>
 1009b28:	ac000d04 	addi	r16,r21,52
 1009b2c:	ac000c15 	stw	r16,48(r21)
 1009b30:	80800117 	ldw	r2,4(r16)
 1009b34:	00c007c4 	movi	r3,31
 1009b38:	18800d0e 	bge	r3,r2,1009b70 <__register_exitproc+0x8c>
 1009b3c:	00800034 	movhi	r2,0
 1009b40:	10800004 	addi	r2,r2,0
 1009b44:	1000021e 	bne	r2,zero,1009b50 <__register_exitproc+0x6c>
 1009b48:	00bfffc4 	movi	r2,-1
 1009b4c:	00002d06 	br	1009c04 <__register_exitproc+0x120>
 1009b50:	01002304 	movi	r4,140
 1009b54:	00000000 	call	0 <__reset-0x1000000>
 1009b58:	1021883a 	mov	r16,r2
 1009b5c:	103ffa26 	beq	r2,zero,1009b48 <__alt_data_end+0xfffe8bf0>
 1009b60:	10000115 	stw	zero,4(r2)
 1009b64:	a8800c17 	ldw	r2,48(r21)
 1009b68:	80800015 	stw	r2,0(r16)
 1009b6c:	ac000c15 	stw	r16,48(r21)
 1009b70:	90001b26 	beq	r18,zero,1009be0 <__register_exitproc+0xfc>
 1009b74:	80802217 	ldw	r2,136(r16)
 1009b78:	1000091e 	bne	r2,zero,1009ba0 <__register_exitproc+0xbc>
 1009b7c:	00800034 	movhi	r2,0
 1009b80:	10800004 	addi	r2,r2,0
 1009b84:	103ff026 	beq	r2,zero,1009b48 <__alt_data_end+0xfffe8bf0>
 1009b88:	01004204 	movi	r4,264
 1009b8c:	00000000 	call	0 <__reset-0x1000000>
 1009b90:	103fed26 	beq	r2,zero,1009b48 <__alt_data_end+0xfffe8bf0>
 1009b94:	10004015 	stw	zero,256(r2)
 1009b98:	10004115 	stw	zero,260(r2)
 1009b9c:	80802215 	stw	r2,136(r16)
 1009ba0:	81400117 	ldw	r5,4(r16)
 1009ba4:	01000044 	movi	r4,1
 1009ba8:	2947883a 	add	r3,r5,r5
 1009bac:	18c7883a 	add	r3,r3,r3
 1009bb0:	10c7883a 	add	r3,r2,r3
 1009bb4:	1d000015 	stw	r20,0(r3)
 1009bb8:	214a983a 	sll	r5,r4,r5
 1009bbc:	11004017 	ldw	r4,256(r2)
 1009bc0:	2148b03a 	or	r4,r4,r5
 1009bc4:	11004015 	stw	r4,256(r2)
 1009bc8:	1cc02015 	stw	r19,128(r3)
 1009bcc:	00c00084 	movi	r3,2
 1009bd0:	90c0031e 	bne	r18,r3,1009be0 <__register_exitproc+0xfc>
 1009bd4:	10c04117 	ldw	r3,260(r2)
 1009bd8:	194ab03a 	or	r5,r3,r5
 1009bdc:	11404115 	stw	r5,260(r2)
 1009be0:	80800117 	ldw	r2,4(r16)
 1009be4:	10c00044 	addi	r3,r2,1
 1009be8:	10800084 	addi	r2,r2,2
 1009bec:	1085883a 	add	r2,r2,r2
 1009bf0:	1085883a 	add	r2,r2,r2
 1009bf4:	80c00115 	stw	r3,4(r16)
 1009bf8:	80a1883a 	add	r16,r16,r2
 1009bfc:	84400015 	stw	r17,0(r16)
 1009c00:	0005883a 	mov	r2,zero
 1009c04:	dfc00617 	ldw	ra,24(sp)
 1009c08:	dd400517 	ldw	r21,20(sp)
 1009c0c:	dd000417 	ldw	r20,16(sp)
 1009c10:	dcc00317 	ldw	r19,12(sp)
 1009c14:	dc800217 	ldw	r18,8(sp)
 1009c18:	dc400117 	ldw	r17,4(sp)
 1009c1c:	dc000017 	ldw	r16,0(sp)
 1009c20:	dec00704 	addi	sp,sp,28
 1009c24:	f800283a 	ret

01009c28 <__call_exitprocs>:
 1009c28:	00804074 	movhi	r2,257
 1009c2c:	10a9c504 	addi	r2,r2,-22764
 1009c30:	10800017 	ldw	r2,0(r2)
 1009c34:	defff304 	addi	sp,sp,-52
 1009c38:	ddc00a15 	stw	r23,40(sp)
 1009c3c:	d8800015 	stw	r2,0(sp)
 1009c40:	05c00034 	movhi	r23,0
 1009c44:	10800c04 	addi	r2,r2,48
 1009c48:	dc800515 	stw	r18,20(sp)
 1009c4c:	dfc00c15 	stw	ra,48(sp)
 1009c50:	df000b15 	stw	fp,44(sp)
 1009c54:	dd800915 	stw	r22,36(sp)
 1009c58:	dd400815 	stw	r21,32(sp)
 1009c5c:	dd000715 	stw	r20,28(sp)
 1009c60:	dcc00615 	stw	r19,24(sp)
 1009c64:	dc400415 	stw	r17,16(sp)
 1009c68:	dc000315 	stw	r16,12(sp)
 1009c6c:	d9000115 	stw	r4,4(sp)
 1009c70:	2825883a 	mov	r18,r5
 1009c74:	d8800215 	stw	r2,8(sp)
 1009c78:	bdc00004 	addi	r23,r23,0
 1009c7c:	d8800017 	ldw	r2,0(sp)
 1009c80:	dc400217 	ldw	r17,8(sp)
 1009c84:	14c00c17 	ldw	r19,48(r2)
 1009c88:	98004226 	beq	r19,zero,1009d94 <__call_exitprocs+0x16c>
 1009c8c:	9c000117 	ldw	r16,4(r19)
 1009c90:	00900034 	movhi	r2,16384
 1009c94:	10bfffc4 	addi	r2,r2,-1
 1009c98:	9d002217 	ldw	r20,136(r19)
 1009c9c:	857fffc4 	addi	r21,r16,-1
 1009ca0:	80a1883a 	add	r16,r16,r2
 1009ca4:	8421883a 	add	r16,r16,r16
 1009ca8:	8421883a 	add	r16,r16,r16
 1009cac:	a42d883a 	add	r22,r20,r16
 1009cb0:	84000204 	addi	r16,r16,8
 1009cb4:	9c21883a 	add	r16,r19,r16
 1009cb8:	a8002616 	blt	r21,zero,1009d54 <__call_exitprocs+0x12c>
 1009cbc:	90000326 	beq	r18,zero,1009ccc <__call_exitprocs+0xa4>
 1009cc0:	a0002026 	beq	r20,zero,1009d44 <__call_exitprocs+0x11c>
 1009cc4:	b1002017 	ldw	r4,128(r22)
 1009cc8:	24801e1e 	bne	r4,r18,1009d44 <__call_exitprocs+0x11c>
 1009ccc:	99000117 	ldw	r4,4(r19)
 1009cd0:	82000017 	ldw	r8,0(r16)
 1009cd4:	213fffc4 	addi	r4,r4,-1
 1009cd8:	a900021e 	bne	r21,r4,1009ce4 <__call_exitprocs+0xbc>
 1009cdc:	9d400115 	stw	r21,4(r19)
 1009ce0:	00000106 	br	1009ce8 <__call_exitprocs+0xc0>
 1009ce4:	80000015 	stw	zero,0(r16)
 1009ce8:	40001626 	beq	r8,zero,1009d44 <__call_exitprocs+0x11c>
 1009cec:	9f000117 	ldw	fp,4(r19)
 1009cf0:	a0000526 	beq	r20,zero,1009d08 <__call_exitprocs+0xe0>
 1009cf4:	00800044 	movi	r2,1
 1009cf8:	1552983a 	sll	r9,r2,r21
 1009cfc:	a1404017 	ldw	r5,256(r20)
 1009d00:	494a703a 	and	r5,r9,r5
 1009d04:	2800021e 	bne	r5,zero,1009d10 <__call_exitprocs+0xe8>
 1009d08:	403ee83a 	callr	r8
 1009d0c:	00000906 	br	1009d34 <__call_exitprocs+0x10c>
 1009d10:	a1004117 	ldw	r4,260(r20)
 1009d14:	4908703a 	and	r4,r9,r4
 1009d18:	2000041e 	bne	r4,zero,1009d2c <__call_exitprocs+0x104>
 1009d1c:	d9000117 	ldw	r4,4(sp)
 1009d20:	b1400017 	ldw	r5,0(r22)
 1009d24:	403ee83a 	callr	r8
 1009d28:	00000206 	br	1009d34 <__call_exitprocs+0x10c>
 1009d2c:	b1000017 	ldw	r4,0(r22)
 1009d30:	403ee83a 	callr	r8
 1009d34:	99000117 	ldw	r4,4(r19)
 1009d38:	e13fd01e 	bne	fp,r4,1009c7c <__alt_data_end+0xfffe8d24>
 1009d3c:	89000017 	ldw	r4,0(r17)
 1009d40:	24ffce1e 	bne	r4,r19,1009c7c <__alt_data_end+0xfffe8d24>
 1009d44:	ad7fffc4 	addi	r21,r21,-1
 1009d48:	b5bfff04 	addi	r22,r22,-4
 1009d4c:	843fff04 	addi	r16,r16,-4
 1009d50:	003fd906 	br	1009cb8 <__alt_data_end+0xfffe8d60>
 1009d54:	b8000f26 	beq	r23,zero,1009d94 <__call_exitprocs+0x16c>
 1009d58:	99000117 	ldw	r4,4(r19)
 1009d5c:	20000a1e 	bne	r4,zero,1009d88 <__call_exitprocs+0x160>
 1009d60:	99000017 	ldw	r4,0(r19)
 1009d64:	20000826 	beq	r4,zero,1009d88 <__call_exitprocs+0x160>
 1009d68:	89000015 	stw	r4,0(r17)
 1009d6c:	a0000226 	beq	r20,zero,1009d78 <__call_exitprocs+0x150>
 1009d70:	a009883a 	mov	r4,r20
 1009d74:	00000000 	call	0 <__reset-0x1000000>
 1009d78:	9809883a 	mov	r4,r19
 1009d7c:	00000000 	call	0 <__reset-0x1000000>
 1009d80:	8cc00017 	ldw	r19,0(r17)
 1009d84:	003fc006 	br	1009c88 <__alt_data_end+0xfffe8d30>
 1009d88:	9823883a 	mov	r17,r19
 1009d8c:	9cc00017 	ldw	r19,0(r19)
 1009d90:	003fbd06 	br	1009c88 <__alt_data_end+0xfffe8d30>
 1009d94:	dfc00c17 	ldw	ra,48(sp)
 1009d98:	df000b17 	ldw	fp,44(sp)
 1009d9c:	ddc00a17 	ldw	r23,40(sp)
 1009da0:	dd800917 	ldw	r22,36(sp)
 1009da4:	dd400817 	ldw	r21,32(sp)
 1009da8:	dd000717 	ldw	r20,28(sp)
 1009dac:	dcc00617 	ldw	r19,24(sp)
 1009db0:	dc800517 	ldw	r18,20(sp)
 1009db4:	dc400417 	ldw	r17,16(sp)
 1009db8:	dc000317 	ldw	r16,12(sp)
 1009dbc:	dec00d04 	addi	sp,sp,52
 1009dc0:	f800283a 	ret

01009dc4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1009dc4:	defffd04 	addi	sp,sp,-12
 1009dc8:	df000215 	stw	fp,8(sp)
 1009dcc:	df000204 	addi	fp,sp,8
 1009dd0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1009dd4:	0001883a 	nop
 1009dd8:	e0bfff17 	ldw	r2,-4(fp)
 1009ddc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 1009de0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1009de4:	10000226 	beq	r2,zero,1009df0 <_exit+0x2c>
    ALT_SIM_FAIL();
 1009de8:	002af070 	cmpltui	zero,zero,43969
 1009dec:	00000106 	br	1009df4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 1009df0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1009df4:	003fff06 	br	1009df4 <__alt_data_end+0xfffe8e9c>
